CCS PCH C Compiler, Version 4.104, 5967               10-jul.-20 09:56

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Vertical\2019\CFLV 90 Biomedical #004588027 OP2019148\Firmware 3.0.0\CabinaCFLH.lst

               ROM used: 16242 bytes (50%)
                         Largest free fragment is 16524
               RAM used: 190 (9%) at main() level
                         228 (11%) worst case
               Stack:    8 worst case (6 in main + 2 for interrupts)

*
0000:  GOTO   2060
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.4
004A:  GOTO   0054
004E:  BTFSC  FF2.1
0050:  GOTO   01B2
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=48000000) 
.................... //#use delay(clock=20000000) 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV4,VREGEN,NOMCLR,NOPUT 
.................... #use delay(clock=16000000) 
*
0198:  MOVLW  04
019A:  SUBWF  xE3,F
019C:  BNC   01B0
019E:  CLRF   FEA
01A0:  MOVLW  E3
01A2:  MOVWF  FE9
01A4:  MOVF   FEF,W
01A6:  BZ    01B0
01A8:  BRA    01AC
01AA:  NOP   
01AC:  DECFSZ FEF,F
01AE:  BRA    01AA
01B0:  RETLW  00
*
07F8:  CLRF   FEA
07FA:  MOVLW  D1
07FC:  MOVWF  FE9
07FE:  MOVF   FEF,W
0800:  BZ    081E
0802:  MOVLW  05
0804:  MOVWF  01
0806:  CLRF   00
0808:  DECFSZ 00,F
080A:  BRA    0808
080C:  DECFSZ 01,F
080E:  BRA    0806
0810:  MOVLW  2E
0812:  MOVWF  00
0814:  DECFSZ 00,F
0816:  BRA    0814
0818:  BRA    081A
081A:  DECFSZ FEF,F
081C:  BRA    0802
081E:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1D10:  BCF    xCD.0
....................    y = x; 
1D12:  MOVFF  C1,C6
1D16:  MOVFF  C0,C5
1D1A:  MOVFF  BF,C4
1D1E:  MOVFF  BE,C3
....................  
....................    if (x < 0) 
1D22:  MOVFF  C1,D1
1D26:  MOVFF  C0,D0
1D2A:  MOVFF  BF,CF
1D2E:  MOVFF  BE,CE
1D32:  CLRF   xD5
1D34:  CLRF   xD4
1D36:  CLRF   xD3
1D38:  CLRF   xD2
1D3A:  CALL   0C60
1D3E:  BNC   1D48
....................    { 
....................       s = 1; 
1D40:  BSF    xCD.0
....................       y = -y; 
1D42:  MOVF   xC4,W
1D44:  XORLW  80
1D46:  MOVWF  xC4
....................    } 
....................  
....................    if (y <= 32768.0) 
1D48:  MOVFF  C6,D1
1D4C:  MOVFF  C5,D0
1D50:  MOVFF  C4,CF
1D54:  MOVFF  C3,CE
1D58:  CLRF   xD5
1D5A:  CLRF   xD4
1D5C:  CLRF   xD3
1D5E:  MOVLW  8E
1D60:  MOVWF  xD2
1D62:  CALL   0C60
1D66:  BC    1D6A
1D68:  BNZ   1D9A
....................   res = (float32)(unsigned int16)y; 
1D6A:  MOVFF  C6,D1
1D6E:  MOVFF  C5,D0
1D72:  MOVFF  C4,CF
1D76:  MOVFF  C3,CE
1D7A:  RCALL  1CD8
1D7C:  MOVFF  02,D3
1D80:  MOVFF  01,D2
1D84:  CALL   0A4C
1D88:  MOVFF  03,CA
1D8C:  MOVFF  02,C9
1D90:  MOVFF  01,C8
1D94:  MOVFF  00,C7
....................  
....................  else if (y < 10000000.0) 
1D98:  BRA    1F24
1D9A:  MOVFF  C6,D1
1D9E:  MOVFF  C5,D0
1DA2:  MOVFF  C4,CF
1DA6:  MOVFF  C3,CE
1DAA:  MOVLW  80
1DAC:  MOVWF  xD5
1DAE:  MOVLW  96
1DB0:  MOVWF  xD4
1DB2:  MOVLW  18
1DB4:  MOVWF  xD3
1DB6:  MOVLW  96
1DB8:  MOVWF  xD2
1DBA:  CALL   0C60
1DBE:  BTFSS  FD8.0
1DC0:  BRA    1F14
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1DC2:  MOVFF  C6,D1
1DC6:  MOVFF  C5,D0
1DCA:  MOVFF  C4,CF
1DCE:  MOVFF  C3,CE
1DD2:  CLRF   xD5
1DD4:  CLRF   xD4
1DD6:  CLRF   xD3
1DD8:  MOVLW  8E
1DDA:  MOVWF  xD2
1DDC:  CALL   144C
1DE0:  MOVFF  03,D1
1DE4:  MOVFF  02,D0
1DE8:  MOVFF  01,CF
1DEC:  MOVFF  00,CE
1DF0:  RCALL  1CD8
1DF2:  MOVFF  02,CC
1DF6:  MOVFF  01,CB
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1DFA:  MOVFF  C6,D1
1DFE:  MOVFF  C5,D0
1E02:  MOVFF  C4,CF
1E06:  MOVFF  C3,CE
1E0A:  CLRF   xD5
1E0C:  CLRF   xD4
1E0E:  CLRF   xD3
1E10:  MOVLW  8E
1E12:  MOVWF  xD2
1E14:  CALL   144C
1E18:  MOVFF  00,CE
1E1C:  MOVFF  01,CF
1E20:  MOVFF  02,D0
1E24:  MOVFF  03,D1
1E28:  MOVFF  CC,D3
1E2C:  MOVFF  CB,D2
1E30:  CALL   0A4C
1E34:  BSF    FD8.1
1E36:  MOVFF  D1,D5
1E3A:  MOVFF  D0,D4
1E3E:  MOVFF  CF,D3
1E42:  MOVFF  CE,D2
1E46:  MOVFF  03,D9
1E4A:  MOVFF  02,D8
1E4E:  MOVFF  01,D7
1E52:  MOVFF  00,D6
1E56:  CALL   15A6
1E5A:  CLRF   xD1
1E5C:  CLRF   xD0
1E5E:  CLRF   xCF
1E60:  MOVLW  8E
1E62:  MOVWF  xCE
1E64:  MOVFF  03,D5
1E68:  MOVFF  02,D4
1E6C:  MOVFF  01,D3
1E70:  MOVFF  00,D2
1E74:  RCALL  19A6
1E76:  MOVFF  03,C6
1E7A:  MOVFF  02,C5
1E7E:  MOVFF  01,C4
1E82:  MOVFF  00,C3
....................   res = 32768.0*(float32)l; 
1E86:  MOVFF  CC,D3
1E8A:  MOVFF  CB,D2
1E8E:  CALL   0A4C
1E92:  CLRF   xD1
1E94:  CLRF   xD0
1E96:  CLRF   xCF
1E98:  MOVLW  8E
1E9A:  MOVWF  xCE
1E9C:  MOVFF  03,D5
1EA0:  MOVFF  02,D4
1EA4:  MOVFF  01,D3
1EA8:  MOVFF  00,D2
1EAC:  RCALL  19A6
1EAE:  MOVFF  03,CA
1EB2:  MOVFF  02,C9
1EB6:  MOVFF  01,C8
1EBA:  MOVFF  00,C7
....................   res += (float32)(unsigned int16)y; 
1EBE:  MOVFF  C6,D1
1EC2:  MOVFF  C5,D0
1EC6:  MOVFF  C4,CF
1ECA:  MOVFF  C3,CE
1ECE:  RCALL  1CD8
1ED0:  MOVFF  02,D3
1ED4:  MOVFF  01,D2
1ED8:  CALL   0A4C
1EDC:  BCF    FD8.1
1EDE:  MOVFF  CA,D5
1EE2:  MOVFF  C9,D4
1EE6:  MOVFF  C8,D3
1EEA:  MOVFF  C7,D2
1EEE:  MOVFF  03,D9
1EF2:  MOVFF  02,D8
1EF6:  MOVFF  01,D7
1EFA:  MOVFF  00,D6
1EFE:  CALL   15A6
1F02:  MOVFF  03,CA
1F06:  MOVFF  02,C9
1F0A:  MOVFF  01,C8
1F0E:  MOVFF  00,C7
....................  } 
....................  
....................  else 
1F12:  BRA    1F24
....................   res = y; 
1F14:  MOVFF  C6,CA
1F18:  MOVFF  C5,C9
1F1C:  MOVFF  C4,C8
1F20:  MOVFF  C3,C7
....................  
....................  y = y - (float32)(unsigned int16)y; 
1F24:  MOVFF  C6,D1
1F28:  MOVFF  C5,D0
1F2C:  MOVFF  C4,CF
1F30:  MOVFF  C3,CE
1F34:  RCALL  1CD8
1F36:  MOVFF  02,D3
1F3A:  MOVFF  01,D2
1F3E:  CALL   0A4C
1F42:  BSF    FD8.1
1F44:  MOVFF  C6,D5
1F48:  MOVFF  C5,D4
1F4C:  MOVFF  C4,D3
1F50:  MOVFF  C3,D2
1F54:  MOVFF  03,D9
1F58:  MOVFF  02,D8
1F5C:  MOVFF  01,D7
1F60:  MOVFF  00,D6
1F64:  CALL   15A6
1F68:  MOVFF  03,C6
1F6C:  MOVFF  02,C5
1F70:  MOVFF  01,C4
1F74:  MOVFF  00,C3
....................  
....................  if (s) 
1F78:  BTFSS  xCD.0
1F7A:  BRA    1F82
....................   res = -res; 
1F7C:  MOVF   xC8,W
1F7E:  XORLW  80
1F80:  MOVWF  xC8
....................  
....................  if (y != 0) 
1F82:  MOVFF  C6,D1
1F86:  MOVFF  C5,D0
1F8A:  MOVFF  C4,CF
1F8E:  MOVFF  C3,CE
1F92:  CLRF   xD5
1F94:  CLRF   xD4
1F96:  CLRF   xD3
1F98:  CLRF   xD2
1F9A:  CALL   0C60
1F9E:  BZ    2010
....................  { 
....................   if (s == 1 && n == 0) 
1FA0:  BTFSS  xCD.0
1FA2:  BRA    1FD8
1FA4:  MOVF   xC2,F
1FA6:  BNZ   1FD8
....................    res -= 1.0; 
1FA8:  BSF    FD8.1
1FAA:  MOVFF  CA,D5
1FAE:  MOVFF  C9,D4
1FB2:  MOVFF  C8,D3
1FB6:  MOVFF  C7,D2
1FBA:  CLRF   xD9
1FBC:  CLRF   xD8
1FBE:  CLRF   xD7
1FC0:  MOVLW  7F
1FC2:  MOVWF  xD6
1FC4:  CALL   15A6
1FC8:  MOVFF  03,CA
1FCC:  MOVFF  02,C9
1FD0:  MOVFF  01,C8
1FD4:  MOVFF  00,C7
....................  
....................   if (s == 0 && n == 1) 
1FD8:  BTFSC  xCD.0
1FDA:  BRA    2010
1FDC:  DECFSZ xC2,W
1FDE:  BRA    2010
....................    res += 1.0; 
1FE0:  BCF    FD8.1
1FE2:  MOVFF  CA,D5
1FE6:  MOVFF  C9,D4
1FEA:  MOVFF  C8,D3
1FEE:  MOVFF  C7,D2
1FF2:  CLRF   xD9
1FF4:  CLRF   xD8
1FF6:  CLRF   xD7
1FF8:  MOVLW  7F
1FFA:  MOVWF  xD6
1FFC:  CALL   15A6
2000:  MOVFF  03,CA
2004:  MOVFF  02,C9
2008:  MOVFF  01,C8
200C:  MOVFF  00,C7
....................  } 
....................  if (x == 0) 
2010:  MOVFF  C1,D1
2014:  MOVFF  C0,D0
2018:  MOVFF  BF,CF
201C:  MOVFF  BE,CE
2020:  CLRF   xD5
2022:  CLRF   xD4
2024:  CLRF   xD3
2026:  CLRF   xD2
2028:  CALL   0C60
202C:  BNZ   2036
....................     res = 0; 
202E:  CLRF   xCA
2030:  CLRF   xC9
2032:  CLRF   xC8
2034:  CLRF   xC7
....................  
....................  return (res); 
2036:  MOVFF  C7,00
203A:  MOVFF  C8,01
203E:  MOVFF  C9,02
2042:  MOVFF  CA,03
.................... } 
2046:  GOTO   205E (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
204A:  MOVFF  BD,C1
204E:  MOVFF  BC,C0
2052:  MOVFF  BB,BF
2056:  MOVFF  BA,BE
205A:  CLRF   xC2
205C:  BRA    1D10
.................... } 
205E:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A1) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B1,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B1,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B2,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B2,1) 
.................... #define   Motor_L1_on       output_bit(PIN_C2,1) 
.................... #define   Motor_L1_off      output_bit(PIN_C2,0) 
.................... #define   Motor_L2_on       output_bit(PIN_C1,1) 
.................... #define   Motor_L2_off      output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0820:  SWAPF  xD2,W
0822:  ANDLW  F0
0824:  MOVWF  00
0826:  MOVLW  0F
0828:  ANDWF  F83,W
082A:  IORWF  00,W
082C:  MOVWF  F83
....................       delay_cycles(30);//30 
082E:  MOVLW  09
0830:  MOVWF  00
0832:  DECFSZ 00,F
0834:  BRA    0832
0836:  BRA    0838
....................       lcd.enable = 1; 
0838:  BSF    F83.3
....................       delay_us(55);//55 
083A:  MOVLW  49
083C:  MOVWF  00
083E:  DECFSZ 00,F
0840:  BRA    083E
....................       lcd.enable = 0; 
0842:  BCF    F83.3
.................... } 
0844:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0846:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0848:  MOVLW  01
084A:  MOVWF  xD1
084C:  RCALL  07F8
....................       lcd.rs = address; 
084E:  BTFSS  xCF.0
0850:  BCF    F83.1
0852:  BTFSC  xCF.0
0854:  BSF    F83.1
....................       delay_cycles(30);//30 
0856:  MOVLW  09
0858:  MOVWF  00
085A:  DECFSZ 00,F
085C:  BRA    085A
085E:  BRA    0860
....................       lcd.rw = 0; 
0860:  BCF    F83.2
....................       delay_cycles(30);//30 
0862:  MOVLW  09
0864:  MOVWF  00
0866:  DECFSZ 00,F
0868:  BRA    0866
086A:  BRA    086C
....................       lcd.enable = 0; 
086C:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
086E:  SWAPF  xD0,W
0870:  MOVWF  xD1
0872:  MOVLW  0F
0874:  ANDWF  xD1,F
0876:  MOVFF  D1,D2
087A:  RCALL  0820
....................       lcd_send_nibble(n & 0xf); 
087C:  MOVF   xD0,W
087E:  ANDLW  0F
0880:  MOVWF  xD1
0882:  MOVWF  xD2
0884:  RCALL  0820
.................... } 
0886:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0888:  MOVLW  00
088A:  MOVWF  F95
....................     lcd.rs = 0; 
088C:  BCF    F83.1
....................     lcd.rw = 0; 
088E:  BCF    F83.2
....................     lcd.enable = 0; 
0890:  BCF    F83.3
....................     delay_ms(15); 
0892:  MOVLW  0F
0894:  MOVWF  xD1
0896:  RCALL  07F8
....................     for(i=1;i<=3;++i) { 
0898:  MOVLW  01
089A:  MOVWF  xBA
089C:  MOVF   xBA,W
089E:  SUBLW  03
08A0:  BNC   08B2
....................        lcd_send_nibble(3); 
08A2:  MOVLW  03
08A4:  MOVWF  xD2
08A6:  RCALL  0820
....................        delay_ms(5); 
08A8:  MOVLW  05
08AA:  MOVWF  xD1
08AC:  RCALL  07F8
....................     } 
08AE:  INCF   xBA,F
08B0:  BRA    089C
....................     lcd_send_nibble(2); 
08B2:  MOVLW  02
08B4:  MOVWF  xD2
08B6:  RCALL  0820
....................     for(i=0;i<=3;++i) 
08B8:  CLRF   xBA
08BA:  MOVF   xBA,W
08BC:  SUBLW  03
08BE:  BNC   08DE
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
08C0:  CLRF   03
08C2:  MOVF   xBA,W
08C4:  MOVFF  FF2,BB
08C8:  BCF    FF2.7
08CA:  CALL   0096
08CE:  BTFSC  xBB.7
08D0:  BSF    FF2.7
08D2:  MOVWF  xBB
08D4:  CLRF   xCF
08D6:  MOVWF  xD0
08D8:  RCALL  0846
08DA:  INCF   xBA,F
08DC:  BRA    08BA
.................... } 
08DE:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0906:  MOVLW  01
0908:  SUBWF  xCD,W
090A:  ADDLW  FC
090C:  BC    092C
090E:  ADDLW  04
0910:  GOTO   093C
....................      case 1 : address=0x80;break; 
0914:  MOVLW  80
0916:  MOVWF  xCE
0918:  BRA    092C
....................      case 2 : address=0xc0;break; 
091A:  MOVLW  C0
091C:  MOVWF  xCE
091E:  BRA    092C
....................      case 3 : address=0x94;break; 
0920:  MOVLW  94
0922:  MOVWF  xCE
0924:  BRA    092C
....................      case 4 : address=0xd4;break; 
0926:  MOVLW  D4
0928:  MOVWF  xCE
092A:  BRA    092C
....................    } 
....................    address+=x-1; 
092C:  MOVLW  01
092E:  SUBWF  xCC,W
0930:  ADDWF  xCE,F
....................    lcd_send_byte(0,address); 
0932:  CLRF   xCF
0934:  MOVFF  CE,D0
0938:  RCALL  0846
.................... } 
093A:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0968:  MOVF   xCB,W
096A:  SUBLW  F1
096C:  BNZ   0972
....................    { 
....................       c=238; 
096E:  MOVLW  EE
0970:  MOVWF  xCB
....................    } 
....................    if(c=='Ñ') 
0972:  MOVF   xCB,W
0974:  SUBLW  D1
0976:  BNZ   097C
....................    { 
....................       c=255; 
0978:  MOVLW  FF
097A:  MOVWF  xCB
....................    } 
....................     
....................    switch (c) { 
097C:  MOVF   xCB,W
097E:  XORLW  0C
0980:  BZ    098C
0982:  XORLW  06
0984:  BZ    09A0
0986:  XORLW  02
0988:  BZ    09AE
098A:  BRA    09B8
....................      case '\f'   : lcd_send_byte(0,1); 
098C:  CLRF   xCF
098E:  MOVLW  01
0990:  MOVWF  xD0
0992:  RCALL  0846
....................                    lcdline=1; 
0994:  MOVLW  01
0996:  MOVWF  xB9
....................                    delay_ms(2); 
0998:  MOVLW  02
099A:  MOVWF  xD1
099C:  RCALL  07F8
....................                                            break; 
099E:  BRA    09C4
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
09A0:  INCF   xB9,F
09A2:  MOVLW  01
09A4:  MOVWF  xCC
09A6:  MOVFF  B9,CD
09AA:  RCALL  0906
09AC:  BRA    09C4
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
09AE:  CLRF   xCF
09B0:  MOVLW  10
09B2:  MOVWF  xD0
09B4:  RCALL  0846
09B6:  BRA    09C4
....................      default     : lcd_send_byte(1,c);     break; 
09B8:  MOVLW  01
09BA:  MOVWF  xCF
09BC:  MOVFF  CB,D0
09C0:  RCALL  0846
09C2:  BRA    09C4
....................    } 
.................... } 
09C4:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <Funciones.h> 
.................... void VelocidadMotor(int8 Vel){ 
....................    if(Vel==6){ 
*
1066:  MOVF   xBA,W
1068:  SUBLW  06
106A:  BNZ   1076
....................       Motor_L1_on; 
106C:  BSF    F8B.2
106E:  BCF    F94.2
....................       Motor_L2_on; 
1070:  BSF    F8B.1
1072:  BCF    F94.1
....................    }else if(Vel==5){ 
1074:  BRA    10E8
1076:  MOVF   xBA,W
1078:  SUBLW  05
107A:  BNZ   108A
....................       Porcentaje=15; 
107C:  MOVLW  0F
107E:  MOVWF  xAF
....................       retardo=2000; 
1080:  MOVLW  07
1082:  MOVWF  xAB
1084:  MOVLW  D0
1086:  MOVWF  xAA
....................    }else if(Vel==4){ 
1088:  BRA    10E8
108A:  MOVF   xBA,W
108C:  SUBLW  04
108E:  BNZ   109E
....................       Porcentaje=25; 
1090:  MOVLW  19
1092:  MOVWF  xAF
....................       retardo=3000; 
1094:  MOVLW  0B
1096:  MOVWF  xAB
1098:  MOVLW  B8
109A:  MOVWF  xAA
....................    }else if(Vel==3){ 
109C:  BRA    10E8
109E:  MOVF   xBA,W
10A0:  SUBLW  03
10A2:  BNZ   10B2
....................       Porcentaje=35; 
10A4:  MOVLW  23
10A6:  MOVWF  xAF
....................       retardo=3600; 
10A8:  MOVLW  0E
10AA:  MOVWF  xAB
10AC:  MOVLW  10
10AE:  MOVWF  xAA
....................    }else if(Vel==2){ 
10B0:  BRA    10E8
10B2:  MOVF   xBA,W
10B4:  SUBLW  02
10B6:  BNZ   10C6
....................       Porcentaje=45; 
10B8:  MOVLW  2D
10BA:  MOVWF  xAF
....................       retardo=4300; 
10BC:  MOVLW  10
10BE:  MOVWF  xAB
10C0:  MOVLW  CC
10C2:  MOVWF  xAA
....................    }else if(Vel==1){ 
10C4:  BRA    10E8
10C6:  DECFSZ xBA,W
10C8:  BRA    10D8
....................       Porcentaje=50; 
10CA:  MOVLW  32
10CC:  MOVWF  xAF
....................       retardo=5000; 
10CE:  MOVLW  13
10D0:  MOVWF  xAB
10D2:  MOVLW  88
10D4:  MOVWF  xAA
....................    }else if(Vel==0){ 
10D6:  BRA    10E8
10D8:  MOVF   xBA,F
10DA:  BNZ   10E8
....................       Porcentaje=100; 
10DC:  MOVLW  64
10DE:  MOVWF  xAF
....................       Motor_L1_off; 
10E0:  BCF    F8B.2
10E2:  BCF    F94.2
....................       Motor_L2_off; 
10E4:  BCF    F8B.1
10E6:  BCF    F94.1
....................    } 
.................... } 
10E8:  RETLW  00
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
1200:  DECFSZ xBB,W
1202:  BRA    121C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1204:  MOVLW  02
1206:  MOVWF  xCC
1208:  MOVFF  BC,CD
120C:  CALL   0906
1210:  MOVLW  B4
1212:  MOVWF  FF6
1214:  MOVLW  00
1216:  MOVWF  FF7
1218:  CALL   09C6
....................    if(x==2) 
121C:  MOVF   xBB,W
121E:  SUBLW  02
1220:  BNZ   123A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1222:  MOVLW  02
1224:  MOVWF  xCC
1226:  MOVFF  BC,CD
122A:  CALL   0906
122E:  MOVLW  C8
1230:  MOVWF  FF6
1232:  MOVLW  00
1234:  MOVWF  FF7
1236:  CALL   09C6
....................    if(x==3) 
123A:  MOVF   xBB,W
123C:  SUBLW  03
123E:  BNZ   1258
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1240:  MOVLW  02
1242:  MOVWF  xCC
1244:  MOVFF  BC,CD
1248:  CALL   0906
124C:  MOVLW  DC
124E:  MOVWF  FF6
1250:  MOVLW  00
1252:  MOVWF  FF7
1254:  CALL   09C6
....................    if(x==4) 
1258:  MOVF   xBB,W
125A:  SUBLW  04
125C:  BNZ   1276
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
125E:  MOVLW  02
1260:  MOVWF  xCC
1262:  MOVFF  BC,CD
1266:  CALL   0906
126A:  MOVLW  F0
126C:  MOVWF  FF6
126E:  MOVLW  00
1270:  MOVWF  FF7
1272:  CALL   09C6
....................     
....................    if(x==5) 
1276:  MOVF   xBB,W
1278:  SUBLW  05
127A:  BNZ   12B4
....................    {if(estadoalarma==0) 
127C:  BTFSC  17.4
127E:  BRA    1298
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1280:  MOVLW  02
1282:  MOVWF  xCC
1284:  MOVFF  BC,CD
1288:  CALL   0906
128C:  MOVLW  04
128E:  MOVWF  FF6
1290:  MOVLW  01
1292:  MOVWF  FF7
1294:  CALL   09C6
....................    if(estadoalarma==1) 
1298:  BTFSS  17.4
129A:  BRA    12B4
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
129C:  MOVLW  02
129E:  MOVWF  xCC
12A0:  MOVFF  BC,CD
12A4:  CALL   0906
12A8:  MOVLW  18
12AA:  MOVWF  FF6
12AC:  MOVLW  01
12AE:  MOVWF  FF7
12B0:  CALL   09C6
....................    } 
....................     
....................    if(x==6) 
12B4:  MOVF   xBB,W
12B6:  SUBLW  06
12B8:  BNZ   12D2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
12BA:  MOVLW  02
12BC:  MOVWF  xCC
12BE:  MOVFF  BC,CD
12C2:  CALL   0906
12C6:  MOVLW  2C
12C8:  MOVWF  FF6
12CA:  MOVLW  01
12CC:  MOVWF  FF7
12CE:  CALL   09C6
.................... } 
12D2:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
13F6:  RLCF   xBF,W
13F8:  MOVWF  00
13FA:  RLCF   00,F
13FC:  MOVLW  FC
13FE:  ANDWF  00,F
1400:  MOVFF  00,01
1404:  MOVF   FC2,W
1406:  ANDLW  C3
1408:  IORWF  00,W
140A:  MOVWF  FC2
140C:  MOVLW  0A
140E:  MOVWF  xD1
1410:  CALL   07F8
1414:  BSF    FC2.1
1416:  BTFSC  FC2.1
1418:  BRA    1416
141A:  MOVFF  FC4,03
141E:  MOVFF  FC3,D2
1422:  MOVFF  FC4,D3
1426:  CALL   0A4C
142A:  MOVFF  03,C3
142E:  MOVFF  02,C2
1432:  MOVFF  01,C1
1436:  MOVFF  00,C0
143A:  MOVFF  C0,00
143E:  MOVFF  C1,01
1442:  MOVFF  C2,02
1446:  MOVFF  C3,03
.................... } 
144A:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1810:  CLRF   xBE
1812:  CLRF   xBD
1814:  CLRF   xBC
1816:  CLRF   xBB
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
1818:  CLRF   xBF
181A:  RCALL  13F6
181C:  MOVFF  03,97
1820:  MOVFF  02,96
1824:  MOVFF  01,95
1828:  MOVFF  00,94
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
182C:  MOVFF  97,D1
1830:  MOVFF  96,D0
1834:  MOVFF  95,CF
1838:  MOVFF  94,CE
183C:  MOVFF  A7,D5
1840:  MOVFF  A6,D4
1844:  MOVFF  A5,D3
1848:  MOVFF  A4,D2
184C:  RCALL  144C
184E:  MOVFF  00,BF
1852:  MOVFF  01,C0
1856:  MOVFF  02,C1
185A:  MOVFF  03,C2
185E:  BSF    FD8.1
1860:  MOVFF  03,D5
1864:  MOVFF  02,D4
1868:  MOVFF  01,D3
186C:  MOVFF  00,D2
1870:  CLRF   xD9
1872:  CLRF   xD8
1874:  CLRF   xD7
1876:  MOVLW  7F
1878:  MOVWF  xD6
187A:  RCALL  15A6
187C:  MOVFF  03,9B
1880:  MOVFF  02,9A
1884:  MOVFF  01,99
1888:  MOVFF  00,98
....................     
....................    if(Presion<0.0) 
188C:  MOVFF  9B,D1
1890:  MOVFF  9A,D0
1894:  MOVFF  99,CF
1898:  MOVFF  98,CE
189C:  CLRF   xD5
189E:  CLRF   xD4
18A0:  CLRF   xD3
18A2:  CLRF   xD2
18A4:  CALL   0C60
18A8:  BNC   18B2
....................    { 
....................       Presion=0.0; 
18AA:  CLRF   x9B
18AC:  CLRF   x9A
18AE:  CLRF   x99
18B0:  CLRF   x98
....................    } 
....................  
....................    if(r>media-1) 
18B2:  MOVLW  01
18B4:  SUBWF  xBA,W
18B6:  SUBWF  2B,W
18B8:  BZ    18BE
18BA:  BNC   18BE
....................    {r=0;} 
18BC:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
18BE:  MOVF   2B,W
18C0:  MULLW  04
18C2:  MOVF   FF3,W
18C4:  CLRF   03
18C6:  ADDLW  44
18C8:  MOVWF  FE9
18CA:  MOVLW  00
18CC:  ADDWFC 03,W
18CE:  MOVWF  FEA
18D0:  MOVFF  98,FEF
18D4:  MOVFF  99,FEC
18D8:  MOVFF  9A,FEC
18DC:  MOVFF  9B,FEC
18E0:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
18E2:  CLRF   2C
18E4:  MOVLW  01
18E6:  SUBWF  xBA,W
18E8:  SUBWF  2C,W
18EA:  BZ    18EE
18EC:  BC    1958
....................    { 
....................       promediopresion+=PromPresion[q]; 
18EE:  MOVF   2C,W
18F0:  MULLW  04
18F2:  MOVF   FF3,W
18F4:  CLRF   03
18F6:  ADDLW  44
18F8:  MOVWF  FE9
18FA:  MOVLW  00
18FC:  ADDWFC 03,W
18FE:  MOVWF  FEA
1900:  MOVFF  FEF,00
1904:  MOVFF  FEC,01
1908:  MOVFF  FEC,02
190C:  MOVFF  FEC,03
1910:  MOVFF  FEA,C0
1914:  MOVFF  FE9,BF
1918:  BCF    FD8.1
191A:  MOVFF  BE,D5
191E:  MOVFF  BD,D4
1922:  MOVFF  BC,D3
1926:  MOVFF  BB,D2
192A:  MOVFF  03,D9
192E:  MOVFF  02,D8
1932:  MOVFF  01,D7
1936:  MOVFF  00,D6
193A:  RCALL  15A6
193C:  MOVFF  C0,FEA
1940:  MOVFF  BF,FE9
1944:  MOVFF  03,BE
1948:  MOVFF  02,BD
194C:  MOVFF  01,BC
1950:  MOVFF  00,BB
....................    }  
1954:  INCF   2C,F
1956:  BRA    18E4
....................    promediopresion=promediopresion/media;    
1958:  CLRF   xD3
195A:  MOVFF  BA,D2
195E:  CALL   0A4C
1962:  MOVFF  BE,D1
1966:  MOVFF  BD,D0
196A:  MOVFF  BC,CF
196E:  MOVFF  BB,CE
1972:  MOVFF  03,D5
1976:  MOVFF  02,D4
197A:  MOVFF  01,D3
197E:  MOVFF  00,D2
1982:  RCALL  144C
1984:  MOVFF  03,BE
1988:  MOVFF  02,BD
198C:  MOVFF  01,BC
1990:  MOVFF  00,BB
....................     
....................    return promediopresion; 
1994:  MOVFF  BB,00
1998:  MOVFF  BC,01
199C:  MOVFF  BD,02
19A0:  MOVFF  BE,03
.................... } 
19A4:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    lcd_init(); 
*
08E0:  RCALL  0888
....................    set_tris_a(0XFF); 
08E2:  MOVLW  FF
08E4:  MOVWF  F92
....................    set_tris_e(0XFF); 
08E6:  MOVWF  F96
....................    enable_interrupts(INT_EXT_L2H); 
08E8:  BSF    FF2.4
08EA:  BSF    FF1.6
....................    setup_adc_ports(AN0); 
08EC:  MOVF   FC1,W
08EE:  ANDLW  C0
08F0:  IORLW  0E
08F2:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
08F4:  BCF    FC0.0
08F6:  BSF    FC0.1
08F8:  BCF    FC0.2
08FA:  BSF    FC0.7
08FC:  BSF    FC2.0
....................    enable_interrupts(global); 
08FE:  MOVLW  C0
0900:  IORWF  FF2,F
.................... } 
0902:  GOTO   21F0 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
09E6:  MOVLW  01
09E8:  MOVWF  xCC
09EA:  MOVWF  xCD
09EC:  RCALL  0906
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
09EE:  MOVLW  40
09F0:  MOVWF  FF6
09F2:  MOVLW  01
09F4:  MOVWF  FF7
09F6:  RCALL  09C6
....................    lcd_gotoxy(1,2); 
09F8:  MOVLW  01
09FA:  MOVWF  xCC
09FC:  MOVLW  02
09FE:  MOVWF  xCD
0A00:  RCALL  0906
....................    printf(lcd_putc,"      VERTICAL      "); 
0A02:  MOVLW  56
0A04:  MOVWF  FF6
0A06:  MOVLW  01
0A08:  MOVWF  FF7
0A0A:  RCALL  09C6
....................    lcd_gotoxy(1,3); 
0A0C:  MOVLW  01
0A0E:  MOVWF  xCC
0A10:  MOVLW  03
0A12:  MOVWF  xCD
0A14:  RCALL  0906
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0A16:  MOVLW  6C
0A18:  MOVWF  FF6
0A1A:  MOVLW  01
0A1C:  MOVWF  FF7
0A1E:  RCALL  09C6
....................    lcd_gotoxy(1,4); 
0A20:  MOVLW  01
0A22:  MOVWF  xCC
0A24:  MOVLW  04
0A26:  MOVWF  xCD
0A28:  RCALL  0906
....................    printf(lcd_putc,"     REF:JPCV36     "); 
0A2A:  MOVLW  82
0A2C:  MOVWF  FF6
0A2E:  MOVLW  01
0A30:  MOVWF  FF7
0A32:  RCALL  09C6
....................    delay_ms(2000); 
0A34:  MOVLW  08
0A36:  MOVWF  xBA
0A38:  MOVLW  FA
0A3A:  MOVWF  xD1
0A3C:  RCALL  07F8
0A3E:  DECFSZ xBA,F
0A40:  BRA    0A38
....................    printf(lcd_putc,"\f"); 
0A42:  MOVLW  0C
0A44:  MOVWF  xCB
0A46:  RCALL  0968
.................... } 
0A48:  GOTO   21F4 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0A82:  MOVFF  FF2,BA
0A86:  BCF    FF2.7
0A88:  CLRF   FA9
0A8A:  BCF    FA6.6
0A8C:  BCF    FA6.7
0A8E:  BSF    FA6.0
0A90:  MOVF   FA8,W
0A92:  BTFSC  xBA.7
0A94:  BSF    FF2.7
0A96:  MOVWF  39
....................    delay_ms(20);  
0A98:  MOVLW  14
0A9A:  MOVWF  xD1
0A9C:  RCALL  07F8
....................    contrasena[1]=read_eeprom(1); 
0A9E:  MOVFF  FF2,BA
0AA2:  BCF    FF2.7
0AA4:  MOVLW  01
0AA6:  MOVWF  FA9
0AA8:  BCF    FA6.6
0AAA:  BCF    FA6.7
0AAC:  BSF    FA6.0
0AAE:  MOVF   FA8,W
0AB0:  BTFSC  xBA.7
0AB2:  BSF    FF2.7
0AB4:  MOVWF  3A
....................    delay_ms(20); 
0AB6:  MOVLW  14
0AB8:  MOVWF  xD1
0ABA:  RCALL  07F8
....................    contrasena[2]=read_eeprom(2); 
0ABC:  MOVFF  FF2,BA
0AC0:  BCF    FF2.7
0AC2:  MOVLW  02
0AC4:  MOVWF  FA9
0AC6:  BCF    FA6.6
0AC8:  BCF    FA6.7
0ACA:  BSF    FA6.0
0ACC:  MOVF   FA8,W
0ACE:  BTFSC  xBA.7
0AD0:  BSF    FF2.7
0AD2:  MOVWF  3B
....................    delay_ms(20);  
0AD4:  MOVLW  14
0AD6:  MOVWF  xD1
0AD8:  RCALL  07F8
....................    contrasena[3]=read_eeprom(3); 
0ADA:  MOVFF  FF2,BA
0ADE:  BCF    FF2.7
0AE0:  MOVLW  03
0AE2:  MOVWF  FA9
0AE4:  BCF    FA6.6
0AE6:  BCF    FA6.7
0AE8:  BSF    FA6.0
0AEA:  MOVF   FA8,W
0AEC:  BTFSC  xBA.7
0AEE:  BSF    FF2.7
0AF0:  MOVWF  3C
....................    delay_ms(20); 
0AF2:  MOVLW  14
0AF4:  MOVWF  xD1
0AF6:  RCALL  07F8
....................    estadoalarma=read_eeprom(4); 
0AF8:  MOVFF  FF2,BA
0AFC:  BCF    FF2.7
0AFE:  MOVLW  04
0B00:  MOVWF  FA9
0B02:  BCF    FA6.6
0B04:  BCF    FA6.7
0B06:  BSF    FA6.0
0B08:  MOVF   FA8,W
0B0A:  BTFSC  xBA.7
0B0C:  BSF    FF2.7
0B0E:  MOVWF  01
0B10:  BCF    17.4
0B12:  BTFSC  01.0
0B14:  BSF    17.4
....................    delay_ms(20); 
0B16:  MOVLW  14
0B18:  MOVWF  xD1
0B1A:  RCALL  07F8
....................    tempo_minutos=read_eeprom(5); 
0B1C:  MOVFF  FF2,BA
0B20:  BCF    FF2.7
0B22:  MOVLW  05
0B24:  MOVWF  FA9
0B26:  BCF    FA6.6
0B28:  BCF    FA6.7
0B2A:  BSF    FA6.0
0B2C:  MOVF   FA8,W
0B2E:  BTFSC  xBA.7
0B30:  BSF    FF2.7
0B32:  MOVWF  27
....................    delay_ms(20); 
0B34:  MOVLW  14
0B36:  MOVWF  xD1
0B38:  RCALL  07F8
....................    tempo_segundos=read_eeprom(6); 
0B3A:  MOVFF  FF2,BA
0B3E:  BCF    FF2.7
0B40:  MOVLW  06
0B42:  MOVWF  FA9
0B44:  BCF    FA6.6
0B46:  BCF    FA6.7
0B48:  BSF    FA6.0
0B4A:  MOVF   FA8,W
0B4C:  BTFSC  xBA.7
0B4E:  BSF    FF2.7
0B50:  MOVWF  28
....................    delay_ms(20); 
0B52:  MOVLW  14
0B54:  MOVWF  xD1
0B56:  RCALL  07F8
....................    segundos=read_eeprom(7); 
0B58:  MOVFF  FF2,BA
0B5C:  BCF    FF2.7
0B5E:  MOVLW  07
0B60:  MOVWF  FA9
0B62:  BCF    FA6.6
0B64:  BCF    FA6.7
0B66:  BSF    FA6.0
0B68:  MOVF   FA8,W
0B6A:  BTFSC  xBA.7
0B6C:  BSF    FF2.7
0B6E:  MOVWF  21
....................    delay_ms(20); 
0B70:  MOVLW  14
0B72:  MOVWF  xD1
0B74:  RCALL  07F8
....................    minutos=read_eeprom(8); 
0B76:  MOVFF  FF2,BA
0B7A:  BCF    FF2.7
0B7C:  MOVLW  08
0B7E:  MOVWF  FA9
0B80:  BCF    FA6.6
0B82:  BCF    FA6.7
0B84:  BSF    FA6.0
0B86:  MOVF   FA8,W
0B88:  BTFSC  xBA.7
0B8A:  BSF    FF2.7
0B8C:  MOVWF  22
....................    delay_ms(20); 
0B8E:  MOVLW  14
0B90:  MOVWF  xD1
0B92:  RCALL  07F8
....................    horasL=read_eeprom(9); 
0B94:  MOVFF  FF2,BA
0B98:  BCF    FF2.7
0B9A:  MOVLW  09
0B9C:  MOVWF  FA9
0B9E:  BCF    FA6.6
0BA0:  BCF    FA6.7
0BA2:  BSF    FA6.0
0BA4:  MOVF   FA8,W
0BA6:  BTFSC  xBA.7
0BA8:  BSF    FF2.7
0BAA:  MOVWF  23
....................    delay_ms(20); 
0BAC:  MOVLW  14
0BAE:  MOVWF  xD1
0BB0:  RCALL  07F8
....................    horasH=read_eeprom(10); 
0BB2:  MOVFF  FF2,BA
0BB6:  BCF    FF2.7
0BB8:  MOVLW  0A
0BBA:  MOVWF  FA9
0BBC:  BCF    FA6.6
0BBE:  BCF    FA6.7
0BC0:  BSF    FA6.0
0BC2:  MOVF   FA8,W
0BC4:  BTFSC  xBA.7
0BC6:  BSF    FF2.7
0BC8:  MOVWF  24
....................    delay_ms(20); 
0BCA:  MOVLW  14
0BCC:  MOVWF  xD1
0BCE:  RCALL  07F8
....................    G_l=read_eeprom(11); 
0BD0:  MOVFF  FF2,BA
0BD4:  BCF    FF2.7
0BD6:  MOVLW  0B
0BD8:  MOVWF  FA9
0BDA:  BCF    FA6.6
0BDC:  BCF    FA6.7
0BDE:  BSF    FA6.0
0BE0:  MOVF   FA8,W
0BE2:  BTFSC  xBA.7
0BE4:  BSF    FF2.7
0BE6:  MOVWF  25
....................    delay_ms(20); 
0BE8:  MOVLW  14
0BEA:  MOVWF  xD1
0BEC:  RCALL  07F8
....................    G_h=read_eeprom(12); 
0BEE:  MOVFF  FF2,BA
0BF2:  BCF    FF2.7
0BF4:  MOVLW  0C
0BF6:  MOVWF  FA9
0BF8:  BCF    FA6.6
0BFA:  BCF    FA6.7
0BFC:  BSF    FA6.0
0BFE:  MOVF   FA8,W
0C00:  BTFSC  xBA.7
0C02:  BSF    FF2.7
0C04:  MOVWF  26
....................    delay_ms(20); 
0C06:  MOVLW  14
0C08:  MOVWF  xD1
0C0A:  RCALL  07F8
....................    VelMotor=read_eeprom(13); 
0C0C:  MOVFF  FF2,BA
0C10:  BCF    FF2.7
0C12:  MOVLW  0D
0C14:  MOVWF  FA9
0C16:  BCF    FA6.6
0C18:  BCF    FA6.7
0C1A:  BSF    FA6.0
0C1C:  MOVF   FA8,W
0C1E:  BTFSC  xBA.7
0C20:  BSF    FF2.7
0C22:  MOVWF  xB0
....................    delay_ms(20); 
0C24:  MOVLW  14
0C26:  MOVWF  xD1
0C28:  RCALL  07F8
....................    G16=make16(G_h,G_l); 
0C2A:  MOVFF  26,43
0C2E:  MOVFF  25,42
....................    G=G16; 
0C32:  MOVFF  43,D3
0C36:  MOVFF  42,D2
0C3A:  RCALL  0A4C
0C3C:  MOVFF  03,A7
0C40:  MOVFF  02,A6
0C44:  MOVFF  01,A5
0C48:  MOVFF  00,A4
....................    horas=make16(horasH,horasL); 
0C4C:  MOVFF  24,41
0C50:  MOVFF  23,40
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0C54:  MOVFF  27,29
0C58:  MOVFF  28,2A
.................... } 
0C5C:  GOTO   21F8 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0CD6:  BTFSC  39.7
0CD8:  BRA    0CE0
0CDA:  MOVF   39,W
0CDC:  SUBLW  09
0CDE:  BNC   0CE6
0CE0:  BTFSC  39.7
0CE2:  BRA    0CE6
0CE4:  BRA    0D16
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0CE6:  CLRF   39
0CE8:  CLRF   FA9
0CEA:  CLRF   FA8
0CEC:  BCF    FA6.6
0CEE:  BCF    FA6.7
0CF0:  BSF    FA6.2
0CF2:  MOVF   FF2,W
0CF4:  MOVWF  00
0CF6:  BCF    FF2.7
0CF8:  MOVLB  F
0CFA:  MOVLW  55
0CFC:  MOVWF  FA7
0CFE:  MOVLW  AA
0D00:  MOVWF  FA7
0D02:  BSF    FA6.1
0D04:  BTFSC  FA6.1
0D06:  BRA    0D04
0D08:  BCF    FA6.2
0D0A:  MOVF   00,W
0D0C:  IORWF  FF2,F
0D0E:  MOVLW  14
0D10:  MOVLB  0
0D12:  MOVWF  xD1
0D14:  RCALL  07F8
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0D16:  BTFSC  3A.7
0D18:  BRA    0D20
0D1A:  MOVF   3A,W
0D1C:  SUBLW  09
0D1E:  BNC   0D26
0D20:  BTFSC  3A.7
0D22:  BRA    0D26
0D24:  BRA    0D58
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0D26:  CLRF   3A
0D28:  MOVLW  01
0D2A:  MOVWF  FA9
0D2C:  CLRF   FA8
0D2E:  BCF    FA6.6
0D30:  BCF    FA6.7
0D32:  BSF    FA6.2
0D34:  MOVF   FF2,W
0D36:  MOVWF  00
0D38:  BCF    FF2.7
0D3A:  MOVLB  F
0D3C:  MOVLW  55
0D3E:  MOVWF  FA7
0D40:  MOVLW  AA
0D42:  MOVWF  FA7
0D44:  BSF    FA6.1
0D46:  BTFSC  FA6.1
0D48:  BRA    0D46
0D4A:  BCF    FA6.2
0D4C:  MOVF   00,W
0D4E:  IORWF  FF2,F
0D50:  MOVLW  14
0D52:  MOVLB  0
0D54:  MOVWF  xD1
0D56:  RCALL  07F8
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0D58:  BTFSC  3B.7
0D5A:  BRA    0D62
0D5C:  MOVF   3B,W
0D5E:  SUBLW  09
0D60:  BNC   0D68
0D62:  BTFSC  3B.7
0D64:  BRA    0D68
0D66:  BRA    0D9A
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0D68:  CLRF   3B
0D6A:  MOVLW  02
0D6C:  MOVWF  FA9
0D6E:  CLRF   FA8
0D70:  BCF    FA6.6
0D72:  BCF    FA6.7
0D74:  BSF    FA6.2
0D76:  MOVF   FF2,W
0D78:  MOVWF  00
0D7A:  BCF    FF2.7
0D7C:  MOVLB  F
0D7E:  MOVLW  55
0D80:  MOVWF  FA7
0D82:  MOVLW  AA
0D84:  MOVWF  FA7
0D86:  BSF    FA6.1
0D88:  BTFSC  FA6.1
0D8A:  BRA    0D88
0D8C:  BCF    FA6.2
0D8E:  MOVF   00,W
0D90:  IORWF  FF2,F
0D92:  MOVLW  14
0D94:  MOVLB  0
0D96:  MOVWF  xD1
0D98:  RCALL  07F8
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0D9A:  BTFSC  3C.7
0D9C:  BRA    0DA4
0D9E:  MOVF   3C,W
0DA0:  SUBLW  09
0DA2:  BNC   0DAA
0DA4:  BTFSC  3C.7
0DA6:  BRA    0DAA
0DA8:  BRA    0DDC
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0DAA:  CLRF   3C
0DAC:  MOVLW  03
0DAE:  MOVWF  FA9
0DB0:  CLRF   FA8
0DB2:  BCF    FA6.6
0DB4:  BCF    FA6.7
0DB6:  BSF    FA6.2
0DB8:  MOVF   FF2,W
0DBA:  MOVWF  00
0DBC:  BCF    FF2.7
0DBE:  MOVLB  F
0DC0:  MOVLW  55
0DC2:  MOVWF  FA7
0DC4:  MOVLW  AA
0DC6:  MOVWF  FA7
0DC8:  BSF    FA6.1
0DCA:  BTFSC  FA6.1
0DCC:  BRA    0DCA
0DCE:  BCF    FA6.2
0DD0:  MOVF   00,W
0DD2:  IORWF  FF2,F
0DD4:  MOVLW  14
0DD6:  MOVLB  0
0DD8:  MOVWF  xD1
0DDA:  RCALL  07F8
....................    } 
....................    if(estadoalarma>1){ 
0DDC:  MOVLW  00
0DDE:  BTFSC  17.4
0DE0:  MOVLW  01
0DE2:  SUBLW  01
0DE4:  BC    0E1A
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0DE6:  BSF    17.4
0DE8:  MOVLW  04
0DEA:  MOVWF  FA9
0DEC:  MOVLW  01
0DEE:  MOVWF  FA8
0DF0:  BCF    FA6.6
0DF2:  BCF    FA6.7
0DF4:  BSF    FA6.2
0DF6:  MOVF   FF2,W
0DF8:  MOVWF  00
0DFA:  BCF    FF2.7
0DFC:  MOVLB  F
0DFE:  MOVLW  55
0E00:  MOVWF  FA7
0E02:  MOVLW  AA
0E04:  MOVWF  FA7
0E06:  BSF    FA6.1
0E08:  BTFSC  FA6.1
0E0A:  BRA    0E08
0E0C:  BCF    FA6.2
0E0E:  MOVF   00,W
0E10:  IORWF  FF2,F
0E12:  MOVLW  14
0E14:  MOVLB  0
0E16:  MOVWF  xD1
0E18:  RCALL  07F8
....................    } 
....................    if(tempo_minutos>200){ 
0E1A:  MOVF   27,W
0E1C:  SUBLW  C8
0E1E:  BC    0E56
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
0E20:  MOVLW  14
0E22:  MOVWF  27
0E24:  MOVLW  05
0E26:  MOVWF  FA9
0E28:  MOVLW  14
0E2A:  MOVWF  FA8
0E2C:  BCF    FA6.6
0E2E:  BCF    FA6.7
0E30:  BSF    FA6.2
0E32:  MOVF   FF2,W
0E34:  MOVWF  00
0E36:  BCF    FF2.7
0E38:  MOVLB  F
0E3A:  MOVLW  55
0E3C:  MOVWF  FA7
0E3E:  MOVLW  AA
0E40:  MOVWF  FA7
0E42:  BSF    FA6.1
0E44:  BTFSC  FA6.1
0E46:  BRA    0E44
0E48:  BCF    FA6.2
0E4A:  MOVF   00,W
0E4C:  IORWF  FF2,F
0E4E:  MOVLW  14
0E50:  MOVLB  0
0E52:  MOVWF  xD1
0E54:  RCALL  07F8
....................    } 
....................    if(tempo_segundos>59){ 
0E56:  MOVF   28,W
0E58:  SUBLW  3B
0E5A:  BC    0E8E
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
0E5C:  CLRF   28
0E5E:  MOVLW  06
0E60:  MOVWF  FA9
0E62:  CLRF   FA8
0E64:  BCF    FA6.6
0E66:  BCF    FA6.7
0E68:  BSF    FA6.2
0E6A:  MOVF   FF2,W
0E6C:  MOVWF  00
0E6E:  BCF    FF2.7
0E70:  MOVLB  F
0E72:  MOVLW  55
0E74:  MOVWF  FA7
0E76:  MOVLW  AA
0E78:  MOVWF  FA7
0E7A:  BSF    FA6.1
0E7C:  BTFSC  FA6.1
0E7E:  BRA    0E7C
0E80:  BCF    FA6.2
0E82:  MOVF   00,W
0E84:  IORWF  FF2,F
0E86:  MOVLW  14
0E88:  MOVLB  0
0E8A:  MOVWF  xD1
0E8C:  RCALL  07F8
....................    } 
....................    if(segundos>60){ 
0E8E:  MOVF   21,W
0E90:  SUBLW  3C
0E92:  BC    0EC6
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
0E94:  CLRF   21
0E96:  MOVLW  07
0E98:  MOVWF  FA9
0E9A:  CLRF   FA8
0E9C:  BCF    FA6.6
0E9E:  BCF    FA6.7
0EA0:  BSF    FA6.2
0EA2:  MOVF   FF2,W
0EA4:  MOVWF  00
0EA6:  BCF    FF2.7
0EA8:  MOVLB  F
0EAA:  MOVLW  55
0EAC:  MOVWF  FA7
0EAE:  MOVLW  AA
0EB0:  MOVWF  FA7
0EB2:  BSF    FA6.1
0EB4:  BTFSC  FA6.1
0EB6:  BRA    0EB4
0EB8:  BCF    FA6.2
0EBA:  MOVF   00,W
0EBC:  IORWF  FF2,F
0EBE:  MOVLW  14
0EC0:  MOVLB  0
0EC2:  MOVWF  xD1
0EC4:  RCALL  07F8
....................    } 
....................    if(minutos>60){ 
0EC6:  MOVF   22,W
0EC8:  SUBLW  3C
0ECA:  BC    0EFE
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
0ECC:  CLRF   22
0ECE:  MOVLW  08
0ED0:  MOVWF  FA9
0ED2:  CLRF   FA8
0ED4:  BCF    FA6.6
0ED6:  BCF    FA6.7
0ED8:  BSF    FA6.2
0EDA:  MOVF   FF2,W
0EDC:  MOVWF  00
0EDE:  BCF    FF2.7
0EE0:  MOVLB  F
0EE2:  MOVLW  55
0EE4:  MOVWF  FA7
0EE6:  MOVLW  AA
0EE8:  MOVWF  FA7
0EEA:  BSF    FA6.1
0EEC:  BTFSC  FA6.1
0EEE:  BRA    0EEC
0EF0:  BCF    FA6.2
0EF2:  MOVF   00,W
0EF4:  IORWF  FF2,F
0EF6:  MOVLW  14
0EF8:  MOVLB  0
0EFA:  MOVWF  xD1
0EFC:  RCALL  07F8
....................    } 
....................    if(horas>10000){ 
0EFE:  MOVF   41,W
0F00:  SUBLW  26
0F02:  BC    0F74
0F04:  XORLW  FF
0F06:  BNZ   0F0E
0F08:  MOVF   40,W
0F0A:  SUBLW  10
0F0C:  BC    0F74
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
0F0E:  CLRF   41
0F10:  CLRF   40
0F12:  MOVLW  09
0F14:  MOVWF  FA9
0F16:  MOVLW  0A
0F18:  MOVWF  FA8
0F1A:  BCF    FA6.6
0F1C:  BCF    FA6.7
0F1E:  BSF    FA6.2
0F20:  MOVF   FF2,W
0F22:  MOVWF  00
0F24:  BCF    FF2.7
0F26:  MOVLB  F
0F28:  MOVLW  55
0F2A:  MOVWF  FA7
0F2C:  MOVLW  AA
0F2E:  MOVWF  FA7
0F30:  BSF    FA6.1
0F32:  BTFSC  FA6.1
0F34:  BRA    0F32
0F36:  BCF    FA6.2
0F38:  MOVF   00,W
0F3A:  IORWF  FF2,F
0F3C:  MOVLW  14
0F3E:  MOVLB  0
0F40:  MOVWF  xD1
0F42:  RCALL  07F8
0F44:  MOVLW  0A
0F46:  MOVWF  FA9
0F48:  CLRF   FA8
0F4A:  BCF    FA6.6
0F4C:  BCF    FA6.7
0F4E:  BSF    FA6.2
0F50:  MOVF   FF2,W
0F52:  MOVWF  00
0F54:  BCF    FF2.7
0F56:  MOVLB  F
0F58:  MOVLW  55
0F5A:  MOVWF  FA7
0F5C:  MOVLW  AA
0F5E:  MOVWF  FA7
0F60:  BSF    FA6.1
0F62:  BTFSC  FA6.1
0F64:  BRA    0F62
0F66:  BCF    FA6.2
0F68:  MOVF   00,W
0F6A:  IORWF  FF2,F
0F6C:  MOVLW  14
0F6E:  MOVLB  0
0F70:  MOVWF  xD1
0F72:  RCALL  07F8
....................    } 
....................    if(G>300 || G<200){ 
0F74:  CLRF   xD1
0F76:  CLRF   xD0
0F78:  MOVLW  16
0F7A:  MOVWF  xCF
0F7C:  MOVLW  87
0F7E:  MOVWF  xCE
0F80:  MOVFF  A7,D5
0F84:  MOVFF  A6,D4
0F88:  MOVFF  A5,D3
0F8C:  MOVFF  A4,D2
0F90:  RCALL  0C60
0F92:  BC    0FB4
0F94:  MOVFF  A7,D1
0F98:  MOVFF  A6,D0
0F9C:  MOVFF  A5,CF
0FA0:  MOVFF  A4,CE
0FA4:  CLRF   xD5
0FA6:  CLRF   xD4
0FA8:  MOVLW  48
0FAA:  MOVWF  xD3
0FAC:  MOVLW  86
0FAE:  MOVWF  xD2
0FB0:  RCALL  0C60
0FB2:  BNC   1024
....................       G=240;write_eeprom(11,240);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
0FB4:  CLRF   xA7
0FB6:  CLRF   xA6
0FB8:  MOVLW  70
0FBA:  MOVWF  xA5
0FBC:  MOVLW  86
0FBE:  MOVWF  xA4
0FC0:  MOVLW  0B
0FC2:  MOVWF  FA9
0FC4:  MOVLW  F0
0FC6:  MOVWF  FA8
0FC8:  BCF    FA6.6
0FCA:  BCF    FA6.7
0FCC:  BSF    FA6.2
0FCE:  MOVF   FF2,W
0FD0:  MOVWF  00
0FD2:  BCF    FF2.7
0FD4:  MOVLB  F
0FD6:  MOVLW  55
0FD8:  MOVWF  FA7
0FDA:  MOVLW  AA
0FDC:  MOVWF  FA7
0FDE:  BSF    FA6.1
0FE0:  BTFSC  FA6.1
0FE2:  BRA    0FE0
0FE4:  BCF    FA6.2
0FE6:  MOVF   00,W
0FE8:  IORWF  FF2,F
0FEA:  MOVLW  14
0FEC:  MOVLB  0
0FEE:  MOVWF  xD1
0FF0:  RCALL  07F8
0FF2:  MOVLW  0C
0FF4:  MOVWF  FA9
0FF6:  CLRF   FA8
0FF8:  BCF    FA6.6
0FFA:  BCF    FA6.7
0FFC:  BSF    FA6.2
0FFE:  MOVF   FF2,W
1000:  MOVWF  00
1002:  BCF    FF2.7
1004:  MOVLB  F
1006:  MOVLW  55
1008:  MOVWF  FA7
100A:  MOVLW  AA
100C:  MOVWF  FA7
100E:  BSF    FA6.1
1010:  BTFSC  FA6.1
1012:  BRA    1010
1014:  BCF    FA6.2
1016:  MOVF   00,W
1018:  IORWF  FF2,F
101A:  MOVLW  14
101C:  MOVLB  0
101E:  MOVWF  xD1
1020:  CALL   07F8
....................    } 
....................    if(VelMotor>6){ 
1024:  MOVF   xB0,W
1026:  SUBLW  06
1028:  BC    1062
....................       VelMotor=4;write_eeprom(13,4);delay_ms(20); 
102A:  MOVLW  04
102C:  MOVWF  xB0
102E:  MOVLW  0D
1030:  MOVWF  FA9
1032:  MOVLW  04
1034:  MOVWF  FA8
1036:  BCF    FA6.6
1038:  BCF    FA6.7
103A:  BSF    FA6.2
103C:  MOVF   FF2,W
103E:  MOVWF  00
1040:  BCF    FF2.7
1042:  MOVLB  F
1044:  MOVLW  55
1046:  MOVWF  FA7
1048:  MOVLW  AA
104A:  MOVWF  FA7
104C:  BSF    FA6.1
104E:  BTFSC  FA6.1
1050:  BRA    104E
1052:  BCF    FA6.2
1054:  MOVF   00,W
1056:  IORWF  FF2,F
1058:  MOVLW  14
105A:  MOVLB  0
105C:  MOVWF  xD1
105E:  CALL   07F8
....................    } 
.................... } 
1062:  GOTO   21FC (RETURN)
....................  
....................  
.................... #int_EXT            // Interrupción de encoder para control. 
.................... void ext0() {       // 6 pulsos por vuelta. 
....................    pulsos++; 
*
01B2:  INCF   xA8,F
01B4:  BTFSC  FD8.2
01B6:  INCF   xA9,F
....................    if(pulsos>=120){ 
01B8:  MOVF   xA9,F
01BA:  BNZ   01C2
01BC:  MOVF   xA8,W
01BE:  SUBLW  77
01C0:  BC    0214
....................       pulsos=0; 
01C2:  CLRF   xA9
01C4:  CLRF   xA8
....................       //output_toggle(PIN_C0); 
....................       tiempos=0;tiemporeset++;Lectura=1; 
01C6:  CLRF   3F
01C8:  CLRF   3E
01CA:  INCF   2F,F
01CC:  BSF    17.0
....................     
....................       if(ActivaBuzzer==1){ 
01CE:  DECFSZ 3D,W
01D0:  BRA    01E6
....................          if(estadobuzzer==0){ 
01D2:  BTFSC  17.3
01D4:  BRA    01DC
....................             Buzzer_off; 
01D6:  BCF    F8B.0
01D8:  BCF    F94.0
....................          }else{ 
01DA:  BRA    01E4
....................             if(estadoalarma==1) 
01DC:  BTFSS  17.4
01DE:  BRA    01E4
....................                Buzzer_on; 
01E0:  BSF    F8B.0
01E2:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
01E4:  BTG    17.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
01E6:  BTFSS  16.0
01E8:  BRA    0214
....................          segundos++; 
01EA:  INCF   21,F
....................          if(tiempo_cumplido==0){ 
01EC:  BTFSC  16.7
01EE:  BRA    0214
....................             if(tempo_segundos>0){ 
01F0:  MOVF   28,F
01F2:  BZ    01F8
....................                tempo_segundos--; 
01F4:  DECF   28,F
....................             }else{ 
01F6:  BRA    0214
....................                if(tempo_minutos>0){ 
01F8:  MOVF   27,F
01FA:  BZ    0204
....................                   tempo_minutos--; 
01FC:  DECF   27,F
....................                   tempo_segundos=59; 
01FE:  MOVLW  3B
0200:  MOVWF  28
....................                }else{ 
0202:  BRA    0214
....................                   tiempo_cumplido=1; 
0204:  BSF    16.7
....................                   estadouv=0;Luz_UV_off; 
0206:  BCF    16.0
0208:  BSF    F8A.1
020A:  BCF    F93.1
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
020C:  MOVFF  29,27
0210:  MOVFF  2A,28
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
....................    tiempocruce=0; 
0214:  CLRF   xAE
0216:  CLRF   xAD
....................    Cruce=ON; 
0218:  BSF    17.7
....................    if(VelMotor<6){ 
021A:  MOVF   xB0,W
021C:  SUBLW  05
021E:  BNC   025C
....................       if(VelMotor>0 && Porcentaje<100){ 
0220:  MOVF   xB0,F
0222:  BZ    0254
0224:  MOVF   xAF,W
0226:  SUBLW  63
0228:  BNC   0254
....................          delay_us(retardo);       
022A:  MOVFF  AB,E2
022E:  INCF   xE2,F
0230:  DECF   xE2,F
0232:  BTFSC  FD8.2
0234:  BRA    023E
0236:  MOVLW  FF
0238:  MOVWF  xE3
023A:  RCALL  0198
023C:  BRA    0230
023E:  MOVFF  AA,E3
0242:  RCALL  0198
....................          Motor_L1_on; 
0244:  BSF    F8B.2
0246:  BCF    F94.2
....................          Motor_L2_on; 
0248:  BSF    F8B.1
024A:  BCF    F94.1
....................          delay_us(100);       
024C:  MOVLW  85
024E:  MOVWF  00
0250:  DECFSZ 00,F
0252:  BRA    0250
....................       } 
....................       Motor_L1_off; 
0254:  BCF    F8B.2
0256:  BCF    F94.2
....................       Motor_L2_off; 
0258:  BCF    F8B.1
025A:  BCF    F94.1
....................    } 
.................... } 
....................  
025C:  BCF    FF2.1
025E:  GOTO   0054
.................... void main () 
.................... { 
*
2060:  CLRF   FF8
2062:  BCF    FD0.7
2064:  BSF    07.7
2066:  CLRF   FEA
2068:  CLRF   FE9
206A:  BCF    16.0
206C:  BCF    16.1
206E:  BCF    16.2
2070:  BCF    16.3
2072:  BCF    16.4
2074:  BCF    16.5
2076:  BCF    16.6
2078:  BCF    16.7
207A:  BCF    17.0
207C:  BCF    17.1
207E:  BCF    17.2
2080:  BCF    17.3
2082:  BCF    17.4
2084:  CLRF   18
2086:  MOVLW  07
2088:  MOVWF  19
208A:  MOVLW  02
208C:  MOVWF  1A
208E:  MOVLW  0B
2090:  MOVWF  1B
2092:  MOVLW  02
2094:  MOVWF  1C
2096:  MOVLW  03
2098:  MOVWF  1D
209A:  MOVLW  02
209C:  MOVWF  1E
209E:  MOVWF  1F
20A0:  MOVLW  04
20A2:  MOVWF  20
20A4:  CLRF   21
20A6:  CLRF   22
20A8:  CLRF   23
20AA:  CLRF   24
20AC:  CLRF   25
20AE:  CLRF   26
20B0:  CLRF   27
20B2:  CLRF   28
20B4:  CLRF   29
20B6:  CLRF   2A
20B8:  CLRF   2B
20BA:  CLRF   2C
20BC:  CLRF   2D
20BE:  MOVLW  01
20C0:  MOVWF  2E
20C2:  CLRF   2F
20C4:  CLRF   30
20C6:  CLRF   31
20C8:  CLRF   3D
20CA:  CLRF   41
20CC:  CLRF   40
20CE:  CLRF   43
20D0:  CLRF   42
20D2:  CLRF   x97
20D4:  CLRF   x96
20D6:  CLRF   x95
20D8:  CLRF   x94
20DA:  CLRF   x9B
20DC:  CLRF   x9A
20DE:  CLRF   x99
20E0:  CLRF   x98
20E2:  CLRF   x9F
20E4:  CLRF   x9E
20E6:  CLRF   x9D
20E8:  CLRF   x9C
20EA:  CLRF   xA3
20EC:  CLRF   xA2
20EE:  CLRF   xA1
20F0:  CLRF   xA0
20F2:  CLRF   xA7
20F4:  CLRF   xA6
20F6:  CLRF   xA5
20F8:  MOVLW  80
20FA:  MOVWF  xA4
20FC:  BSF    17.5
20FE:  BCF    17.6
2100:  CLRF   xA9
2102:  CLRF   xA8
2104:  CLRF   xAB
2106:  CLRF   xAA
2108:  BCF    17.7
210A:  BCF    xAC.0
210C:  CLRF   xAE
210E:  CLRF   xAD
2110:  CLRF   xAF
2112:  CLRF   xB0
2114:  CLRF   xB4
2116:  CLRF   xB3
2118:  CLRF   xB2
211A:  CLRF   xB1
211C:  CLRF   xB8
211E:  CLRF   xB7
2120:  CLRF   xB6
2122:  CLRF   xB5
2124:  MOVF   FC1,W
2126:  ANDLW  C0
2128:  IORLW  0F
212A:  MOVWF  FC1
212C:  MOVLW  07
212E:  MOVWF  FB4
2130:  MOVLW  3E
2132:  MOVWF  32
2134:  MOVLW  20
2136:  MOVWF  33
2138:  MOVLW  5E
213A:  MOVWF  34
213C:  CLRF   35
213E:  CLRF   36
2140:  CLRF   37
2142:  CLRF   38
2144:  CLRF   39
2146:  CLRF   3A
2148:  CLRF   3B
214A:  CLRF   3C
214C:  CLRF   44
214E:  CLRF   45
2150:  CLRF   46
2152:  CLRF   47
2154:  CLRF   48
2156:  CLRF   49
2158:  CLRF   4A
215A:  CLRF   4B
215C:  CLRF   4C
215E:  CLRF   4D
2160:  CLRF   4E
2162:  CLRF   4F
2164:  CLRF   50
2166:  CLRF   51
2168:  CLRF   52
216A:  CLRF   53
216C:  CLRF   54
216E:  CLRF   55
2170:  CLRF   56
2172:  CLRF   57
2174:  CLRF   58
2176:  CLRF   59
2178:  CLRF   5A
217A:  CLRF   5B
217C:  CLRF   5C
217E:  CLRF   5D
2180:  CLRF   5E
2182:  CLRF   5F
2184:  CLRF   x60
2186:  CLRF   x61
2188:  CLRF   x62
218A:  CLRF   x63
218C:  CLRF   x64
218E:  CLRF   x65
2190:  CLRF   x66
2192:  CLRF   x67
2194:  CLRF   x68
2196:  CLRF   x69
2198:  CLRF   x6A
219A:  CLRF   x6B
219C:  CLRF   x6C
219E:  CLRF   x6D
21A0:  CLRF   x6E
21A2:  CLRF   x6F
21A4:  CLRF   x70
21A6:  CLRF   x71
21A8:  CLRF   x72
21AA:  CLRF   x73
21AC:  CLRF   x74
21AE:  CLRF   x75
21B0:  CLRF   x76
21B2:  CLRF   x77
21B4:  CLRF   x78
21B6:  CLRF   x79
21B8:  CLRF   x7A
21BA:  CLRF   x7B
21BC:  CLRF   x7C
21BE:  CLRF   x7D
21C0:  CLRF   x7E
21C2:  CLRF   x7F
21C4:  CLRF   x80
21C6:  CLRF   x81
21C8:  CLRF   x82
21CA:  CLRF   x83
21CC:  CLRF   x84
21CE:  CLRF   x85
21D0:  CLRF   x86
21D2:  CLRF   x87
21D4:  CLRF   x88
21D6:  CLRF   x89
21D8:  CLRF   x8A
21DA:  CLRF   x8B
21DC:  CLRF   x8C
21DE:  CLRF   x8D
21E0:  CLRF   x8E
21E2:  CLRF   x8F
21E4:  CLRF   x90
21E6:  CLRF   x91
21E8:  CLRF   x92
21EA:  CLRF   x93
....................    ConfigInterrupciones(); 
21EC:  GOTO   08E0
....................    MensajeBienvenida(); 
21F0:  GOTO   09E6
....................    LeeEEPROM();  
21F4:  GOTO   0A82
....................    LimitaValores(); 
21F8:  GOTO   0CD6
....................    VelocidadMotor(0); 
21FC:  CLRF   xBA
21FE:  CALL   1066
....................    Motor_L1_off; 
2202:  BCF    F8B.2
2204:  BCF    F94.2
....................    Motor_L2_off; 
2206:  BCF    F8B.1
2208:  BCF    F94.1
....................    Tcruce2=83; 
220A:  CLRF   xB8
220C:  CLRF   xB7
220E:  MOVLW  26
2210:  MOVWF  xB6
2212:  MOVLW  85
2214:  MOVWF  xB5
....................    Tcruce=8300; 
2216:  CLRF   xB4
2218:  MOVLW  B0
221A:  MOVWF  xB3
221C:  MOVLW  01
221E:  MOVWF  xB2
2220:  MOVLW  8C
2222:  MOVWF  xB1
....................    while(true){ 
....................           
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2224:  MOVF   18,F
2226:  BTFSS  FD8.2
2228:  BRA    262C
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
222A:  MOVLW  01
222C:  MOVWF  xCC
222E:  MOVWF  xCD
2230:  CALL   0906
....................          printf(lcd_putc,"     Ingrese        "); 
2234:  MOVLW  62
2236:  MOVWF  FF6
2238:  MOVLW  02
223A:  MOVWF  FF7
223C:  CALL   09C6
....................          lcd_gotoxy(1,2); 
2240:  MOVLW  01
2242:  MOVWF  xCC
2244:  MOVLW  02
2246:  MOVWF  xCD
2248:  CALL   0906
....................          printf(lcd_putc,"    Contraseña      "); 
224C:  MOVLW  78
224E:  MOVWF  FF6
2250:  MOVLW  02
2252:  MOVWF  FF7
2254:  CALL   09C6
....................          lcd_gotoxy(1,3); 
2258:  MOVLW  01
225A:  MOVWF  xCC
225C:  MOVLW  03
225E:  MOVWF  xCD
2260:  CALL   0906
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2264:  MOVLW  8E
2266:  MOVWF  FF6
2268:  MOVLW  02
226A:  MOVWF  FF7
226C:  MOVLW  0A
226E:  MOVWF  xBE
2270:  CALL   10EA
2274:  MOVFF  35,BA
2278:  MOVLW  1F
227A:  MOVWF  xBB
227C:  CALL   1130
2280:  MOVFF  36,BA
2284:  MOVLW  1F
2286:  MOVWF  xBB
2288:  CALL   1130
228C:  MOVFF  37,BA
2290:  MOVLW  1F
2292:  MOVWF  xBB
2294:  CALL   1130
2298:  MOVFF  38,BA
229C:  MOVLW  1F
229E:  MOVWF  xBB
22A0:  CALL   1130
22A4:  MOVLW  20
22A6:  MOVWF  xCB
22A8:  CALL   0968
22AC:  MOVLW  20
22AE:  MOVWF  xCB
22B0:  CALL   0968
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
22B4:  MOVFF  1B,CC
22B8:  MOVLW  04
22BA:  MOVWF  xCD
22BC:  CALL   0906
....................          lcd_putc(t[2]); 
22C0:  MOVFF  34,CB
22C4:  CALL   0968
....................           
....................          if(unidad>11&&unidad<14){ 
22C8:  MOVF   1B,W
22CA:  SUBLW  0B
22CC:  BC    22EC
22CE:  MOVF   1B,W
22D0:  SUBLW  0D
22D2:  BNC   22EC
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
22D4:  MOVLW  01
22D6:  SUBWF  1B,W
22D8:  MOVWF  xBA
22DA:  MOVWF  xCC
22DC:  MOVLW  04
22DE:  MOVWF  xCD
22E0:  CALL   0906
....................             lcd_putc(t[1]); 
22E4:  MOVFF  33,CB
22E8:  CALL   0968
....................          } 
....................           
....................          Cambio=OFF; 
22EC:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
22EE:  BSF    F92.5
22F0:  BTFSC  F80.5
22F2:  BRA    2326
....................          delay_ms(20); 
22F4:  MOVLW  14
22F6:  MOVWF  xD1
22F8:  CALL   07F8
....................          if(UP){ 
22FC:  BSF    F92.5
22FE:  BTFSC  F80.5
2300:  BRA    2324
....................             if(Flanco == 0) { 
2302:  BTFSC  16.3
2304:  BRA    2324
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2306:  MOVLW  0B
2308:  SUBWF  1B,W
230A:  CLRF   03
230C:  ADDLW  35
230E:  MOVWF  FE9
2310:  MOVLW  00
2312:  ADDWFC 03,W
2314:  MOVWF  FEA
2316:  INCF   FEF,F
2318:  BSF    16.3
231A:  MOVLW  1E
231C:  MOVWF  xD1
231E:  CALL   07F8
2322:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2324:  BRA    2328
....................          Flanco = 0; 
2326:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2328:  BSF    F96.0
232A:  BTFSC  F84.0
232C:  BRA    2360
....................          delay_ms(20); 
232E:  MOVLW  14
2330:  MOVWF  xD1
2332:  CALL   07F8
....................          if(DOWN){ 
2336:  BSF    F96.0
2338:  BTFSC  F84.0
233A:  BRA    235E
....................             if(Flanco2 == 0) { 
233C:  BTFSC  16.5
233E:  BRA    235E
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2340:  MOVLW  0B
2342:  SUBWF  1B,W
2344:  CLRF   03
2346:  ADDLW  35
2348:  MOVWF  FE9
234A:  MOVLW  00
234C:  ADDWFC 03,W
234E:  MOVWF  FEA
2350:  DECF   FEF,F
2352:  BSF    16.5
2354:  MOVLW  1E
2356:  MOVWF  xD1
2358:  CALL   07F8
235C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
235E:  BRA    2362
....................          Flanco2 = 0; 
2360:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2362:  BSF    F96.1
2364:  BTFSC  F84.1
2366:  BRA    2392
....................          delay_ms(20); 
2368:  MOVLW  14
236A:  MOVWF  xD1
236C:  CALL   07F8
....................          if(RIGHT){ 
2370:  BSF    F96.1
2372:  BTFSC  F84.1
2374:  BRA    2390
....................             if(Flanco1 == 0) { 
2376:  BTFSC  16.4
2378:  BRA    2390
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
237A:  BSF    16.4
237C:  INCF   1B,F
237E:  MOVLW  1E
2380:  MOVWF  xD1
2382:  CALL   07F8
2386:  MOVLW  0C
2388:  MOVWF  xCB
238A:  CALL   0968
238E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2390:  BRA    2394
....................          Flanco1 = 0; 
2392:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2394:  BSF    F96.2
2396:  BTFSC  F84.2
2398:  BRA    23C4
....................          delay_ms(150); 
239A:  MOVLW  96
239C:  MOVWF  xD1
239E:  CALL   07F8
....................          if(IZQU){ 
23A2:  BSF    F96.2
23A4:  BTFSC  F84.2
23A6:  BRA    23C2
....................             if(Flanco3 == 0){ 
23A8:  BTFSC  16.6
23AA:  BRA    23C2
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
23AC:  BSF    16.6
23AE:  DECF   1B,F
23B0:  MOVLW  1E
23B2:  MOVWF  xD1
23B4:  CALL   07F8
23B8:  MOVLW  0C
23BA:  MOVWF  xCB
23BC:  CALL   0968
23C0:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
23C2:  BRA    23C6
....................         Flanco3 = 0; 
23C4:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
23C6:  MOVLW  0B
23C8:  SUBWF  1B,W
23CA:  CLRF   03
23CC:  ADDLW  35
23CE:  MOVWF  FE9
23D0:  MOVLW  00
23D2:  ADDWFC 03,W
23D4:  MOVWF  FEA
23D6:  BTFSC  FEF.7
23D8:  BRA    23DC
23DA:  BRA    23F0
....................          clave[unidad-11]=9; 
23DC:  MOVLW  0B
23DE:  SUBWF  1B,W
23E0:  CLRF   03
23E2:  ADDLW  35
23E4:  MOVWF  FE9
23E6:  MOVLW  00
23E8:  ADDWFC 03,W
23EA:  MOVWF  FEA
23EC:  MOVLW  09
23EE:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
23F0:  MOVLW  0B
23F2:  SUBWF  1B,W
23F4:  CLRF   03
23F6:  ADDLW  35
23F8:  MOVWF  FE9
23FA:  MOVLW  00
23FC:  ADDWFC 03,W
23FE:  MOVWF  FEA
2400:  BTFSC  FEF.7
2402:  BRA    241C
2404:  MOVF   FEF,W
2406:  SUBLW  09
2408:  BC    241C
....................          clave[unidad-11]=0; 
240A:  MOVLW  0B
240C:  SUBWF  1B,W
240E:  CLRF   03
2410:  ADDLW  35
2412:  MOVWF  FE9
2414:  MOVLW  00
2416:  ADDWFC 03,W
2418:  MOVWF  FEA
241A:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
241C:  MOVF   1B,W
241E:  SUBLW  0A
2420:  BNC   2426
....................          unidad=11; 
2422:  MOVLW  0B
2424:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2426:  MOVF   1B,W
2428:  SUBLW  0E
242A:  BTFSC  FD8.0
242C:  BRA    262C
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
242E:  MOVF   35,W
2430:  SUBLW  03
2432:  BNZ   250E
2434:  MOVF   36,W
2436:  SUBLW  08
2438:  BNZ   250E
243A:  MOVF   37,W
243C:  SUBLW  09
243E:  BNZ   250E
2440:  MOVF   38,W
2442:  SUBLW  02
2444:  BNZ   250E
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2446:  CLRF   FA9
2448:  CLRF   FA8
244A:  BCF    FA6.6
244C:  BCF    FA6.7
244E:  BSF    FA6.2
2450:  MOVF   FF2,W
2452:  MOVWF  00
2454:  BCF    FF2.7
2456:  MOVLB  F
2458:  MOVLW  55
245A:  MOVWF  FA7
245C:  MOVLW  AA
245E:  MOVWF  FA7
2460:  BSF    FA6.1
2462:  BTFSC  FA6.1
2464:  BRA    2462
2466:  BCF    FA6.2
2468:  MOVF   00,W
246A:  IORWF  FF2,F
246C:  MOVLW  14
246E:  MOVLB  0
2470:  MOVWF  xD1
2472:  CALL   07F8
2476:  MOVLW  01
2478:  MOVWF  FA9
247A:  CLRF   FA8
247C:  BCF    FA6.6
247E:  BCF    FA6.7
2480:  BSF    FA6.2
2482:  MOVF   FF2,W
2484:  MOVWF  00
2486:  BCF    FF2.7
2488:  MOVLB  F
248A:  MOVLW  55
248C:  MOVWF  FA7
248E:  MOVLW  AA
2490:  MOVWF  FA7
2492:  BSF    FA6.1
2494:  BTFSC  FA6.1
2496:  BRA    2494
2498:  BCF    FA6.2
249A:  MOVF   00,W
249C:  IORWF  FF2,F
249E:  MOVLW  14
24A0:  MOVLB  0
24A2:  MOVWF  xD1
24A4:  CALL   07F8
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
24A8:  MOVLW  02
24AA:  MOVWF  FA9
24AC:  CLRF   FA8
24AE:  BCF    FA6.6
24B0:  BCF    FA6.7
24B2:  BSF    FA6.2
24B4:  MOVF   FF2,W
24B6:  MOVWF  00
24B8:  BCF    FF2.7
24BA:  MOVLB  F
24BC:  MOVLW  55
24BE:  MOVWF  FA7
24C0:  MOVLW  AA
24C2:  MOVWF  FA7
24C4:  BSF    FA6.1
24C6:  BTFSC  FA6.1
24C8:  BRA    24C6
24CA:  BCF    FA6.2
24CC:  MOVF   00,W
24CE:  IORWF  FF2,F
24D0:  MOVLW  14
24D2:  MOVLB  0
24D4:  MOVWF  xD1
24D6:  CALL   07F8
24DA:  MOVLW  03
24DC:  MOVWF  FA9
24DE:  CLRF   FA8
24E0:  BCF    FA6.6
24E2:  BCF    FA6.7
24E4:  BSF    FA6.2
24E6:  MOVF   FF2,W
24E8:  MOVWF  00
24EA:  BCF    FF2.7
24EC:  MOVLB  F
24EE:  MOVLW  55
24F0:  MOVWF  FA7
24F2:  MOVLW  AA
24F4:  MOVWF  FA7
24F6:  BSF    FA6.1
24F8:  BTFSC  FA6.1
24FA:  BRA    24F8
24FC:  BCF    FA6.2
24FE:  MOVF   00,W
2500:  IORWF  FF2,F
2502:  MOVLW  14
2504:  MOVLB  0
2506:  MOVWF  xD1
2508:  CALL   07F8
....................              reset_cpu(); 
250C:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
250E:  MOVF   39,W
2510:  SUBWF  35,W
2512:  BNZ   25B2
2514:  MOVF   3A,W
2516:  SUBWF  36,W
2518:  BNZ   25B2
251A:  MOVF   3B,W
251C:  SUBWF  37,W
251E:  BNZ   25B2
2520:  MOVF   3C,W
2522:  SUBWF  38,W
2524:  BNZ   25B2
....................             lcd_gotoxy(1,1); 
2526:  MOVLW  01
2528:  MOVWF  xCC
252A:  MOVWF  xCD
252C:  CALL   0906
....................             printf(lcd_putc,"                   "); 
2530:  MOVLW  A4
2532:  MOVWF  FF6
2534:  MOVLW  02
2536:  MOVWF  FF7
2538:  CALL   09C6
....................             lcd_gotoxy(1,2); 
253C:  MOVLW  01
253E:  MOVWF  xCC
2540:  MOVLW  02
2542:  MOVWF  xCD
2544:  CALL   0906
....................             printf(lcd_putc,"     Contraseña    "); 
2548:  MOVLW  B8
254A:  MOVWF  FF6
254C:  MOVLW  02
254E:  MOVWF  FF7
2550:  CALL   09C6
....................             lcd_gotoxy(1,3); 
2554:  MOVLW  01
2556:  MOVWF  xCC
2558:  MOVLW  03
255A:  MOVWF  xCD
255C:  CALL   0906
....................             printf(lcd_putc,"      Correcta     "); 
2560:  MOVLW  CC
2562:  MOVWF  FF6
2564:  MOVLW  02
2566:  MOVWF  FF7
2568:  CALL   09C6
....................             lcd_gotoxy(1,4); 
256C:  MOVLW  01
256E:  MOVWF  xCC
2570:  MOVLW  04
2572:  MOVWF  xCD
2574:  CALL   0906
....................             printf(lcd_putc,"                   "); 
2578:  MOVLW  E0
257A:  MOVWF  FF6
257C:  MOVLW  02
257E:  MOVWF  FF7
2580:  CALL   09C6
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2584:  MOVLW  04
2586:  MOVWF  xBA
2588:  MOVLW  FA
258A:  MOVWF  xD1
258C:  CALL   07F8
2590:  DECFSZ xBA,F
2592:  BRA    2588
2594:  MOVLW  32
2596:  MOVWF  18
2598:  MOVLW  0B
259A:  MOVWF  1B
259C:  MOVLW  0C
259E:  MOVWF  xCB
25A0:  CALL   0968
25A4:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
25A6:  CLRF   35
25A8:  CLRF   36
25AA:  CLRF   37
25AC:  CLRF   38
25AE:  BSF    17.5
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
25B0:  BRA    262C
....................             lcd_gotoxy(1,1); 
25B2:  MOVLW  01
25B4:  MOVWF  xCC
25B6:  MOVWF  xCD
25B8:  CALL   0906
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
25BC:  MOVLW  01
25BE:  MOVWF  xCC
25C0:  MOVLW  02
25C2:  MOVWF  xCD
25C4:  CALL   0906
....................             printf(lcd_putc,"     Contraseña    "); 
25C8:  MOVLW  F4
25CA:  MOVWF  FF6
25CC:  MOVLW  02
25CE:  MOVWF  FF7
25D0:  CALL   09C6
....................             lcd_gotoxy(1,3); 
25D4:  MOVLW  01
25D6:  MOVWF  xCC
25D8:  MOVLW  03
25DA:  MOVWF  xCD
25DC:  CALL   0906
....................             printf(lcd_putc,"     Incorrecta    "); 
25E0:  MOVLW  08
25E2:  MOVWF  FF6
25E4:  MOVLW  03
25E6:  MOVWF  FF7
25E8:  CALL   09C6
....................             lcd_gotoxy(1,4); 
25EC:  MOVLW  01
25EE:  MOVWF  xCC
25F0:  MOVLW  04
25F2:  MOVWF  xCD
25F4:  CALL   0906
....................             printf(lcd_putc,"                   "); 
25F8:  MOVLW  1C
25FA:  MOVWF  FF6
25FC:  MOVLW  03
25FE:  MOVWF  FF7
2600:  CALL   09C6
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2604:  MOVLW  04
2606:  MOVWF  xBA
2608:  MOVLW  FA
260A:  MOVWF  xD1
260C:  CALL   07F8
2610:  DECFSZ xBA,F
2612:  BRA    2608
2614:  MOVLW  0B
2616:  MOVWF  1B
2618:  MOVLW  0C
261A:  MOVWF  xCB
261C:  CALL   0968
2620:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2622:  CLRF   35
2624:  CLRF   36
2626:  CLRF   37
2628:  CLRF   38
262A:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
262C:  DECFSZ 18,W
262E:  BRA    2866
....................       EliminaRuido(); 
2630:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2634:  MOVLW  01
2636:  MOVWF  xCC
2638:  MOVWF  xCD
263A:  CALL   0906
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
263E:  MOVLW  30
2640:  MOVWF  FF6
2642:  MOVLW  03
2644:  MOVWF  FF7
2646:  CALL   09C6
....................          mensajes(1+paso,2); 
264A:  MOVLW  01
264C:  ADDWF  31,W
264E:  MOVWF  xBA
2650:  MOVWF  xBB
2652:  MOVLW  02
2654:  MOVWF  xBC
2656:  CALL   1200
....................          mensajes(2+paso,3); 
265A:  MOVLW  02
265C:  ADDWF  31,W
265E:  MOVWF  xBA
2660:  MOVWF  xBB
2662:  MOVLW  03
2664:  MOVWF  xBC
2666:  CALL   1200
....................          mensajes(3+paso,4); 
266A:  MOVLW  03
266C:  ADDWF  31,W
266E:  MOVWF  xBA
2670:  MOVWF  xBB
2672:  MOVLW  04
2674:  MOVWF  xBC
2676:  CALL   1200
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
267A:  MOVLW  01
267C:  MOVWF  xCC
267E:  MOVFF  1C,CD
2682:  CALL   0906
....................         lcd_putc(t[0]); 
2686:  MOVFF  32,CB
268A:  CALL   0968
....................  
....................         if(Flecha==2) 
268E:  MOVF   1C,W
2690:  SUBLW  02
2692:  BNZ   26BC
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2694:  MOVLW  01
2696:  MOVWF  xCC
2698:  MOVLW  04
269A:  MOVWF  xCD
269C:  CALL   0906
....................             lcd_putc(t[1]); 
26A0:  MOVFF  33,CB
26A4:  CALL   0968
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
26A8:  MOVLW  01
26AA:  MOVWF  xCC
26AC:  MOVLW  03
26AE:  MOVWF  xCD
26B0:  CALL   0906
....................             lcd_putc(t[1]); 
26B4:  MOVFF  33,CB
26B8:  CALL   0968
....................           } 
....................          
....................         if(Flecha==4) 
26BC:  MOVF   1C,W
26BE:  SUBLW  04
26C0:  BNZ   26EA
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
26C2:  MOVLW  01
26C4:  MOVWF  xCC
26C6:  MOVLW  02
26C8:  MOVWF  xCD
26CA:  CALL   0906
....................             lcd_putc(t[1]); 
26CE:  MOVFF  33,CB
26D2:  CALL   0968
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
26D6:  MOVLW  01
26D8:  MOVWF  xCC
26DA:  MOVLW  03
26DC:  MOVWF  xCD
26DE:  CALL   0906
....................             lcd_putc(t[1]); 
26E2:  MOVFF  33,CB
26E6:  CALL   0968
....................           } 
....................          
....................         if(Flecha==3) 
26EA:  MOVF   1C,W
26EC:  SUBLW  03
26EE:  BNZ   2718
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
26F0:  MOVLW  01
26F2:  MOVWF  xCC
26F4:  MOVLW  04
26F6:  MOVWF  xCD
26F8:  CALL   0906
....................             lcd_putc(t[1]); 
26FC:  MOVFF  33,CB
2700:  CALL   0968
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2704:  MOVLW  01
2706:  MOVWF  xCC
2708:  MOVLW  02
270A:  MOVWF  xCD
270C:  CALL   0906
....................             lcd_putc(t[1]); 
2710:  MOVFF  33,CB
2714:  CALL   0968
....................           } 
....................          Cambio=OFF; 
2718:  BCF    17.5
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
271A:  BSF    F92.5
271C:  BTFSC  F80.5
271E:  BRA    274A
....................          delay_ms(20); 
2720:  MOVLW  14
2722:  MOVWF  xD1
2724:  CALL   07F8
....................          if(UP){ 
2728:  BSF    F92.5
272A:  BTFSC  F80.5
272C:  BRA    2748
....................             if(Flanco == 0){ 
272E:  BTFSC  16.3
2730:  BRA    2748
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(10);Cambio=ON; 
2732:  DECF   1E,F
2734:  DECF   1C,F
2736:  MOVLW  01
2738:  ADDWF  1C,W
273A:  MOVWF  1D
273C:  BSF    16.3
273E:  MOVLW  0A
2740:  MOVWF  xD1
2742:  CALL   07F8
2746:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2748:  BRA    274C
....................          Flanco = 0; 
274A:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
274C:  BSF    F96.0
274E:  BTFSC  F84.0
2750:  BRA    277C
....................          delay_ms(20); 
2752:  MOVLW  14
2754:  MOVWF  xD1
2756:  CALL   07F8
....................          if(DOWN){ 
275A:  BSF    F96.0
275C:  BTFSC  F84.0
275E:  BRA    277A
....................             if(Flanco2 == 0){ 
2760:  BTFSC  16.5
2762:  BRA    277A
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(10);Cambio=ON; 
2764:  INCF   1E,F
2766:  INCF   1C,F
2768:  MOVLW  01
276A:  SUBWF  1C,W
276C:  MOVWF  1D
276E:  BSF    16.5
2770:  MOVLW  0A
2772:  MOVWF  xD1
2774:  CALL   07F8
2778:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
277A:  BRA    277E
....................          Flanco2 = 0; 
277C:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
277E:  MOVF   1E,W
2780:  SUBWF  20,W
2782:  BC    2794
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2784:  INCF   31,F
2786:  MOVFF  1E,20
278A:  MOVLW  02
278C:  SUBWF  20,W
278E:  MOVWF  1F
2790:  MOVLW  04
2792:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2794:  MOVF   1F,W
2796:  SUBWF  1E,W
2798:  BC    27AA
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
279A:  DECF   31,F
279C:  MOVFF  1E,1F
27A0:  MOVLW  02
27A2:  ADDWF  1F,W
27A4:  MOVWF  20
27A6:  MOVLW  02
27A8:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
27AA:  MOVF   1E,W
27AC:  SUBWF  19,W
27AE:  BC    27C2
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
27B0:  MOVFF  1A,1E
27B4:  MOVLW  02
27B6:  MOVWF  1C
27B8:  CLRF   31
27BA:  MOVFF  1E,1F
27BE:  ADDWF  1F,W
27C0:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
27C2:  MOVF   1A,W
27C4:  SUBWF  1E,W
27C6:  BC    27DE
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
27C8:  MOVFF  19,1E
27CC:  MOVLW  04
27CE:  MOVWF  1C
27D0:  SUBWF  19,W
27D2:  MOVWF  31
27D4:  MOVFF  1E,20
27D8:  MOVLW  02
27DA:  SUBWF  20,W
27DC:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
27DE:  BTFSC  31.7
27E0:  BRA    27E4
27E2:  BRA    27E6
....................          paso=0; 
27E4:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
27E6:  BSF    F96.1
27E8:  BTFSC  F84.1
27EA:  BRA    2832
....................          delay_ms(20); 
27EC:  MOVLW  14
27EE:  MOVWF  xD1
27F0:  CALL   07F8
....................          if(RIGHT){ 
27F4:  BSF    F96.1
27F6:  BTFSC  F84.1
27F8:  BRA    282E
....................             if(Flanco1 == 0){ 
27FA:  BTFSC  16.4
27FC:  BRA    282E
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
27FE:  BSF    16.4
2800:  MOVFF  1E,18
2804:  MOVLW  03
2806:  MOVWF  1C
2808:  MOVLW  02
280A:  MOVWF  xBA
280C:  MOVLW  96
280E:  MOVWF  xD1
2810:  CALL   07F8
2814:  DECFSZ xBA,F
2816:  BRA    280C
2818:  MOVLW  0C
281A:  MOVWF  xCB
281C:  CALL   0968
....................                if(Menu==6){ 
2820:  MOVF   18,W
2822:  SUBLW  06
2824:  BNZ   282E
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2826:  CLRF   35
2828:  CLRF   36
282A:  CLRF   37
282C:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
282E:  BSF    17.5
....................       }else{ 
2830:  BRA    2834
....................         Flanco1 = 0; 
2832:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
2834:  BSF    F96.2
2836:  BTFSC  F84.2
2838:  BRA    2866
....................          delay_ms(20); 
283A:  MOVLW  14
283C:  MOVWF  xD1
283E:  CALL   07F8
....................          if(IZQU){ 
2842:  BSF    F96.2
2844:  BTFSC  F84.2
2846:  BRA    2866
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2848:  MOVLW  02
284A:  MOVWF  xBA
284C:  MOVLW  FA
284E:  MOVWF  xD1
2850:  CALL   07F8
2854:  DECFSZ xBA,F
2856:  BRA    284C
2858:  MOVLW  32
285A:  MOVWF  18
285C:  MOVLW  0C
285E:  MOVWF  xCB
2860:  CALL   0968
2864:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2866:  MOVF   18,W
2868:  SUBLW  02
286A:  BTFSS  FD8.2
286C:  BRA    2AC2
....................    EliminaRuido(); 
286E:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2872:  MOVLW  01
2874:  MOVWF  xCC
2876:  MOVWF  xCD
2878:  CALL   0906
....................       printf(lcd_putc,"    Temporizador     "); 
287C:  MOVLW  46
287E:  MOVWF  FF6
2880:  MOVLW  03
2882:  MOVWF  FF7
2884:  CALL   09C6
....................       lcd_gotoxy(1,2); 
2888:  MOVLW  01
288A:  MOVWF  xCC
288C:  MOVLW  02
288E:  MOVWF  xCD
2890:  CALL   0906
....................       printf(lcd_putc,"       Luz UV        "); 
2894:  MOVLW  5C
2896:  MOVWF  FF6
2898:  MOVLW  03
289A:  MOVWF  FF7
289C:  CALL   09C6
....................       lcd_gotoxy(6,3); 
28A0:  MOVLW  06
28A2:  MOVWF  xCC
28A4:  MOVLW  03
28A6:  MOVWF  xCD
28A8:  CALL   0906
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
28AC:  MOVFF  29,BA
28B0:  MOVLW  03
28B2:  MOVWF  xBB
28B4:  CALL   12D4
28B8:  MOVLW  3A
28BA:  MOVWF  xCB
28BC:  CALL   0968
28C0:  MOVFF  2A,BA
28C4:  MOVLW  01
28C6:  MOVWF  xBB
28C8:  CALL   12D4
28CC:  MOVLW  7B
28CE:  MOVWF  FF6
28D0:  MOVLW  03
28D2:  MOVWF  FF7
28D4:  MOVLW  08
28D6:  MOVWF  xBE
28D8:  CALL   10EA
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
28DC:  MOVLW  06
28DE:  ADDWF  2E,W
28E0:  MOVWF  xBA
28E2:  MOVWF  xCC
28E4:  MOVLW  04
28E6:  MOVWF  xCD
28E8:  CALL   0906
....................       lcd_putc(t[2]); 
28EC:  MOVFF  34,CB
28F0:  CALL   0968
....................        
....................       Cambio=OFF; 
28F4:  BCF    17.5
.................... //   } 
....................     
....................    if(UP) 
28F6:  BSF    F92.5
28F8:  BTFSC  F80.5
28FA:  BRA    2948
....................    { 
....................       delay_ms(20); 
28FC:  MOVLW  14
28FE:  MOVWF  xD1
2900:  CALL   07F8
....................       if(UP){ 
2904:  BSF    F92.5
2906:  BTFSC  F80.5
2908:  BRA    2948
....................          if(unidad2==1) 
290A:  DECFSZ 2E,W
290C:  BRA    2928
....................          { 
....................             if(tempo_minutos_pro<240) 
290E:  MOVF   29,W
2910:  SUBLW  EF
2912:  BNC   2928
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
2914:  MOVLW  05
2916:  ADDWF  29,F
2918:  MOVLW  02
291A:  MOVWF  xBA
291C:  MOVLW  96
291E:  MOVWF  xD1
2920:  CALL   07F8
2924:  DECFSZ xBA,F
2926:  BRA    291C
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2928:  MOVF   2E,W
292A:  SUBLW  04
292C:  BNZ   2946
....................          { 
....................             if(tempo_segundos_pro<59) 
292E:  MOVF   2A,W
2930:  SUBLW  3A
2932:  BNC   2946
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
2934:  INCF   2A,F
2936:  MOVLW  02
2938:  MOVWF  xBA
293A:  MOVLW  96
293C:  MOVWF  xD1
293E:  CALL   07F8
2942:  DECFSZ xBA,F
2944:  BRA    293A
....................             } 
....................          }      
....................       Cambio=ON; 
2946:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2948:  BSF    F96.0
294A:  BTFSC  F84.0
294C:  BRA    2996
....................    { 
....................       delay_ms(20); 
294E:  MOVLW  14
2950:  MOVWF  xD1
2952:  CALL   07F8
....................       if(DOWN){ 
2956:  BSF    F96.0
2958:  BTFSC  F84.0
295A:  BRA    2996
....................          if(unidad2==1) 
295C:  DECFSZ 2E,W
295E:  BRA    2978
....................          { 
....................             if(tempo_minutos_pro>0) 
2960:  MOVF   29,F
2962:  BZ    2978
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
2964:  MOVLW  05
2966:  SUBWF  29,F
2968:  MOVLW  02
296A:  MOVWF  xBA
296C:  MOVLW  96
296E:  MOVWF  xD1
2970:  CALL   07F8
2974:  DECFSZ xBA,F
2976:  BRA    296C
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
2978:  MOVF   2E,W
297A:  SUBLW  04
297C:  BNZ   2994
....................          { 
....................             if(tempo_segundos_pro>0) 
297E:  MOVF   2A,F
2980:  BZ    2994
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2982:  DECF   2A,F
2984:  MOVLW  02
2986:  MOVWF  xBA
2988:  MOVLW  96
298A:  MOVWF  xD1
298C:  CALL   07F8
2990:  DECFSZ xBA,F
2992:  BRA    2988
....................             }    
....................          } 
....................       Cambio=ON; 
2994:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2996:  BSF    F96.1
2998:  BTFSC  F84.1
299A:  BRA    29D8
....................    { 
....................       delay_ms(20); 
299C:  MOVLW  14
299E:  MOVWF  xD1
29A0:  CALL   07F8
....................       if(RIGHT){ 
29A4:  BSF    F96.1
29A6:  BTFSC  F84.1
29A8:  BRA    29D8
....................          if(unidad2==1) 
29AA:  DECFSZ 2E,W
29AC:  BRA    29B4
....................          { 
....................             unidad2=4; 
29AE:  MOVLW  04
29B0:  MOVWF  2E
....................          } 
....................          else 
29B2:  BRA    29BE
....................          { 
....................             if(unidad2==4) 
29B4:  MOVF   2E,W
29B6:  SUBLW  04
29B8:  BNZ   29BE
....................             { 
....................                unidad2=1; 
29BA:  MOVLW  01
29BC:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
29BE:  MOVLW  02
29C0:  MOVWF  xBA
29C2:  MOVLW  FA
29C4:  MOVWF  xD1
29C6:  CALL   07F8
29CA:  DECFSZ xBA,F
29CC:  BRA    29C2
....................       printf(lcd_putc,"\f"); 
29CE:  MOVLW  0C
29D0:  MOVWF  xCB
29D2:  CALL   0968
....................       Cambio=ON; 
29D6:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
29D8:  BSF    F96.2
29DA:  BTFSC  F84.2
29DC:  BRA    2AC2
....................    { 
....................       if(IZQU){ 
29DE:  BSF    F96.2
29E0:  BTFSC  F84.2
29E2:  BRA    2AC2
....................          delay_ms(200); 
29E4:  MOVLW  C8
29E6:  MOVWF  xD1
29E8:  CALL   07F8
....................          printf(lcd_putc,"\f"); 
29EC:  MOVLW  0C
29EE:  MOVWF  xCB
29F0:  CALL   0968
....................          lcd_gotoxy(1,2); 
29F4:  MOVLW  01
29F6:  MOVWF  xCC
29F8:  MOVLW  02
29FA:  MOVWF  xCD
29FC:  CALL   0906
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2A00:  MOVLW  84
2A02:  MOVWF  FF6
2A04:  MOVLW  03
2A06:  MOVWF  FF7
2A08:  CALL   09C6
....................          lcd_gotoxy(1,3); 
2A0C:  MOVLW  01
2A0E:  MOVWF  xCC
2A10:  MOVLW  03
2A12:  MOVWF  xCD
2A14:  CALL   0906
....................          printf(lcd_putc,"  Correctamente  "); 
2A18:  MOVLW  96
2A1A:  MOVWF  FF6
2A1C:  MOVLW  03
2A1E:  MOVWF  FF7
2A20:  CALL   09C6
....................          write_eeprom(5,tempo_minutos_pro); 
2A24:  MOVLW  05
2A26:  MOVWF  FA9
2A28:  MOVFF  29,FA8
2A2C:  BCF    FA6.6
2A2E:  BCF    FA6.7
2A30:  BSF    FA6.2
2A32:  MOVF   FF2,W
2A34:  MOVWF  00
2A36:  BCF    FF2.7
2A38:  MOVLB  F
2A3A:  MOVLW  55
2A3C:  MOVWF  FA7
2A3E:  MOVLW  AA
2A40:  MOVWF  FA7
2A42:  BSF    FA6.1
2A44:  BTFSC  FA6.1
2A46:  BRA    2A44
2A48:  BCF    FA6.2
2A4A:  MOVF   00,W
2A4C:  IORWF  FF2,F
....................          delay_ms(20); 
2A4E:  MOVLW  14
2A50:  MOVLB  0
2A52:  MOVWF  xD1
2A54:  CALL   07F8
....................          write_eeprom(6,tempo_segundos_pro); 
2A58:  MOVLW  06
2A5A:  MOVWF  FA9
2A5C:  MOVFF  2A,FA8
2A60:  BCF    FA6.6
2A62:  BCF    FA6.7
2A64:  BSF    FA6.2
2A66:  MOVF   FF2,W
2A68:  MOVWF  00
2A6A:  BCF    FF2.7
2A6C:  MOVLB  F
2A6E:  MOVLW  55
2A70:  MOVWF  FA7
2A72:  MOVLW  AA
2A74:  MOVWF  FA7
2A76:  BSF    FA6.1
2A78:  BTFSC  FA6.1
2A7A:  BRA    2A78
2A7C:  BCF    FA6.2
2A7E:  MOVF   00,W
2A80:  IORWF  FF2,F
....................          delay_ms(20); 
2A82:  MOVLW  14
2A84:  MOVLB  0
2A86:  MOVWF  xD1
2A88:  CALL   07F8
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2A8C:  MOVFF  29,27
2A90:  MOVFF  2A,28
....................          delay_ms(700); 
2A94:  MOVLW  04
2A96:  MOVWF  xBA
2A98:  MOVLW  AF
2A9A:  MOVWF  xD1
2A9C:  CALL   07F8
2AA0:  DECFSZ xBA,F
2AA2:  BRA    2A98
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2AA4:  MOVLW  1E
2AA6:  MOVWF  xD1
2AA8:  CALL   07F8
2AAC:  MOVLW  01
2AAE:  MOVWF  18
2AB0:  CLRF   31
2AB2:  MOVLW  02
2AB4:  MOVWF  1C
2AB6:  MOVWF  1E
2AB8:  MOVLW  0C
2ABA:  MOVWF  xCB
2ABC:  CALL   0968
....................          Cambio=ON; 
2AC0:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2AC2:  MOVF   18,W
2AC4:  SUBLW  03
2AC6:  BTFSS  FD8.2
2AC8:  BRA    2E14
....................       EliminaRuido(); 
2ACA:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2ACE:  MOVLW  01
2AD0:  MOVWF  xCC
2AD2:  MOVWF  xCD
2AD4:  CALL   0906
....................          printf(lcd_putc,"     Ingrese        "); 
2AD8:  MOVLW  A8
2ADA:  MOVWF  FF6
2ADC:  MOVLW  03
2ADE:  MOVWF  FF7
2AE0:  CALL   09C6
....................          lcd_gotoxy(1,2); 
2AE4:  MOVLW  01
2AE6:  MOVWF  xCC
2AE8:  MOVLW  02
2AEA:  MOVWF  xCD
2AEC:  CALL   0906
....................          printf(lcd_putc,"    Contraseña      "); 
2AF0:  MOVLW  BE
2AF2:  MOVWF  FF6
2AF4:  MOVLW  03
2AF6:  MOVWF  FF7
2AF8:  CALL   09C6
....................          lcd_gotoxy(1,3); 
2AFC:  MOVLW  01
2AFE:  MOVWF  xCC
2B00:  MOVLW  03
2B02:  MOVWF  xCD
2B04:  CALL   0906
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2B08:  MOVLW  D4
2B0A:  MOVWF  FF6
2B0C:  MOVLW  03
2B0E:  MOVWF  FF7
2B10:  MOVLW  0A
2B12:  MOVWF  xBE
2B14:  CALL   10EA
2B18:  MOVFF  35,BA
2B1C:  MOVLW  1F
2B1E:  MOVWF  xBB
2B20:  CALL   1130
2B24:  MOVFF  36,BA
2B28:  MOVLW  1F
2B2A:  MOVWF  xBB
2B2C:  CALL   1130
2B30:  MOVFF  37,BA
2B34:  MOVLW  1F
2B36:  MOVWF  xBB
2B38:  CALL   1130
2B3C:  MOVFF  38,BA
2B40:  MOVLW  1F
2B42:  MOVWF  xBB
2B44:  CALL   1130
2B48:  MOVLW  20
2B4A:  MOVWF  xCB
2B4C:  CALL   0968
2B50:  MOVLW  20
2B52:  MOVWF  xCB
2B54:  CALL   0968
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2B58:  MOVFF  1B,CC
2B5C:  MOVLW  04
2B5E:  MOVWF  xCD
2B60:  CALL   0906
....................          lcd_putc(t[2]); 
2B64:  MOVFF  34,CB
2B68:  CALL   0968
....................           
....................          if(unidad>11&&unidad<14){ 
2B6C:  MOVF   1B,W
2B6E:  SUBLW  0B
2B70:  BC    2B90
2B72:  MOVF   1B,W
2B74:  SUBLW  0D
2B76:  BNC   2B90
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2B78:  MOVLW  01
2B7A:  SUBWF  1B,W
2B7C:  MOVWF  xBA
2B7E:  MOVWF  xCC
2B80:  MOVLW  04
2B82:  MOVWF  xCD
2B84:  CALL   0906
....................             lcd_putc(t[1]); 
2B88:  MOVFF  33,CB
2B8C:  CALL   0968
....................          } 
....................           
....................          Cambio=OFF; 
2B90:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2B92:  BSF    F92.5
2B94:  BTFSC  F80.5
2B96:  BRA    2BCA
....................          delay_ms(20); 
2B98:  MOVLW  14
2B9A:  MOVWF  xD1
2B9C:  CALL   07F8
....................          if(UP){ 
2BA0:  BSF    F92.5
2BA2:  BTFSC  F80.5
2BA4:  BRA    2BC8
....................             if(Flanco == 0) { 
2BA6:  BTFSC  16.3
2BA8:  BRA    2BC8
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2BAA:  MOVLW  0B
2BAC:  SUBWF  1B,W
2BAE:  CLRF   03
2BB0:  ADDLW  35
2BB2:  MOVWF  FE9
2BB4:  MOVLW  00
2BB6:  ADDWFC 03,W
2BB8:  MOVWF  FEA
2BBA:  INCF   FEF,F
2BBC:  BSF    16.3
2BBE:  MOVLW  1E
2BC0:  MOVWF  xD1
2BC2:  CALL   07F8
2BC6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2BC8:  BRA    2BCC
....................          Flanco = 0; 
2BCA:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2BCC:  BSF    F96.0
2BCE:  BTFSC  F84.0
2BD0:  BRA    2C04
....................          delay_ms(20); 
2BD2:  MOVLW  14
2BD4:  MOVWF  xD1
2BD6:  CALL   07F8
....................          if(DOWN){ 
2BDA:  BSF    F96.0
2BDC:  BTFSC  F84.0
2BDE:  BRA    2C02
....................             if(Flanco2 == 0) { 
2BE0:  BTFSC  16.5
2BE2:  BRA    2C02
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2BE4:  MOVLW  0B
2BE6:  SUBWF  1B,W
2BE8:  CLRF   03
2BEA:  ADDLW  35
2BEC:  MOVWF  FE9
2BEE:  MOVLW  00
2BF0:  ADDWFC 03,W
2BF2:  MOVWF  FEA
2BF4:  DECF   FEF,F
2BF6:  BSF    16.5
2BF8:  MOVLW  1E
2BFA:  MOVWF  xD1
2BFC:  CALL   07F8
2C00:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C02:  BRA    2C06
....................          Flanco2 = 0; 
2C04:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2C06:  BSF    F96.1
2C08:  BTFSC  F84.1
2C0A:  BRA    2C36
....................          delay_ms(20); 
2C0C:  MOVLW  14
2C0E:  MOVWF  xD1
2C10:  CALL   07F8
....................          if(RIGHT){ 
2C14:  BSF    F96.1
2C16:  BTFSC  F84.1
2C18:  BRA    2C34
....................             if(Flanco1 == 0) { 
2C1A:  BTFSC  16.4
2C1C:  BRA    2C34
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C1E:  BSF    16.4
2C20:  INCF   1B,F
2C22:  MOVLW  1E
2C24:  MOVWF  xD1
2C26:  CALL   07F8
2C2A:  MOVLW  0C
2C2C:  MOVWF  xCB
2C2E:  CALL   0968
2C32:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C34:  BRA    2C38
....................          Flanco1 = 0; 
2C36:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2C38:  BSF    F96.2
2C3A:  BTFSC  F84.2
2C3C:  BRA    2C68
....................          delay_ms(150); 
2C3E:  MOVLW  96
2C40:  MOVWF  xD1
2C42:  CALL   07F8
....................          if(IZQU){ 
2C46:  BSF    F96.2
2C48:  BTFSC  F84.2
2C4A:  BRA    2C66
....................             if(Flanco3 == 0){ 
2C4C:  BTFSC  16.6
2C4E:  BRA    2C66
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C50:  BSF    16.6
2C52:  DECF   1B,F
2C54:  MOVLW  1E
2C56:  MOVWF  xD1
2C58:  CALL   07F8
2C5C:  MOVLW  0C
2C5E:  MOVWF  xCB
2C60:  CALL   0968
2C64:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C66:  BRA    2C6A
....................         Flanco3 = 0; 
2C68:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2C6A:  MOVLW  0B
2C6C:  SUBWF  1B,W
2C6E:  CLRF   03
2C70:  ADDLW  35
2C72:  MOVWF  FE9
2C74:  MOVLW  00
2C76:  ADDWFC 03,W
2C78:  MOVWF  FEA
2C7A:  BTFSC  FEF.7
2C7C:  BRA    2C80
2C7E:  BRA    2C94
....................          clave[unidad-11]=9; 
2C80:  MOVLW  0B
2C82:  SUBWF  1B,W
2C84:  CLRF   03
2C86:  ADDLW  35
2C88:  MOVWF  FE9
2C8A:  MOVLW  00
2C8C:  ADDWFC 03,W
2C8E:  MOVWF  FEA
2C90:  MOVLW  09
2C92:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2C94:  MOVLW  0B
2C96:  SUBWF  1B,W
2C98:  CLRF   03
2C9A:  ADDLW  35
2C9C:  MOVWF  FE9
2C9E:  MOVLW  00
2CA0:  ADDWFC 03,W
2CA2:  MOVWF  FEA
2CA4:  BTFSC  FEF.7
2CA6:  BRA    2CC0
2CA8:  MOVF   FEF,W
2CAA:  SUBLW  09
2CAC:  BC    2CC0
....................          clave[unidad-11]=0; 
2CAE:  MOVLW  0B
2CB0:  SUBWF  1B,W
2CB2:  CLRF   03
2CB4:  ADDLW  35
2CB6:  MOVWF  FE9
2CB8:  MOVLW  00
2CBA:  ADDWFC 03,W
2CBC:  MOVWF  FEA
2CBE:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2CC0:  MOVF   1B,W
2CC2:  SUBLW  0A
2CC4:  BNC   2CE6
....................          unidad=11; 
2CC6:  MOVLW  0B
2CC8:  MOVWF  1B
....................          Menu=1; 
2CCA:  MOVLW  01
2CCC:  MOVWF  18
....................          paso=0; 
2CCE:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2CD0:  CLRF   35
2CD2:  CLRF   36
2CD4:  CLRF   37
2CD6:  CLRF   38
2CD8:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2CDA:  MOVLW  0B
2CDC:  MOVWF  1B
2CDE:  MOVLW  0C
2CE0:  MOVWF  xCB
2CE2:  CALL   0968
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2CE6:  MOVF   1B,W
2CE8:  SUBLW  0E
2CEA:  BTFSC  FD8.0
2CEC:  BRA    2E14
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
2CEE:  MOVF   39,W
2CF0:  SUBWF  35,W
2CF2:  BNZ   2D90
2CF4:  MOVF   3A,W
2CF6:  SUBWF  36,W
2CF8:  BNZ   2D90
2CFA:  MOVF   3B,W
2CFC:  SUBWF  37,W
2CFE:  BNZ   2D90
2D00:  MOVF   3C,W
2D02:  SUBWF  38,W
2D04:  BNZ   2D90
....................             lcd_gotoxy(1,1); 
2D06:  MOVLW  01
2D08:  MOVWF  xCC
2D0A:  MOVWF  xCD
2D0C:  CALL   0906
....................             printf(lcd_putc,"                    "); 
2D10:  MOVLW  EA
2D12:  MOVWF  FF6
2D14:  MOVLW  03
2D16:  MOVWF  FF7
2D18:  CALL   09C6
....................             lcd_gotoxy(1,2); 
2D1C:  MOVLW  01
2D1E:  MOVWF  xCC
2D20:  MOVLW  02
2D22:  MOVWF  xCD
2D24:  CALL   0906
....................             printf(lcd_putc,"     Contraseña     "); 
2D28:  MOVLW  00
2D2A:  MOVWF  FF6
2D2C:  MOVLW  04
2D2E:  MOVWF  FF7
2D30:  CALL   09C6
....................             lcd_gotoxy(1,3); 
2D34:  MOVLW  01
2D36:  MOVWF  xCC
2D38:  MOVLW  03
2D3A:  MOVWF  xCD
2D3C:  CALL   0906
....................             printf(lcd_putc,"      Correcta      "); 
2D40:  MOVLW  16
2D42:  MOVWF  FF6
2D44:  MOVLW  04
2D46:  MOVWF  FF7
2D48:  CALL   09C6
....................             lcd_gotoxy(1,4); 
2D4C:  MOVLW  01
2D4E:  MOVWF  xCC
2D50:  MOVLW  04
2D52:  MOVWF  xCD
2D54:  CALL   0906
....................             printf(lcd_putc,"                    "); 
2D58:  MOVLW  2C
2D5A:  MOVWF  FF6
2D5C:  MOVLW  04
2D5E:  MOVWF  FF7
2D60:  CALL   09C6
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2D64:  MOVLW  02
2D66:  MOVWF  xBA
2D68:  MOVLW  FA
2D6A:  MOVWF  xD1
2D6C:  CALL   07F8
2D70:  DECFSZ xBA,F
2D72:  BRA    2D68
2D74:  MOVLW  3D
2D76:  MOVWF  18
2D78:  MOVLW  0B
2D7A:  MOVWF  1B
2D7C:  MOVLW  0C
2D7E:  MOVWF  xCB
2D80:  CALL   0968
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2D84:  CLRF   35
2D86:  CLRF   36
2D88:  CLRF   37
2D8A:  CLRF   38
2D8C:  BSF    17.5
....................          }else{ 
2D8E:  BRA    2E14
....................             lcd_gotoxy(1,1); 
2D90:  MOVLW  01
2D92:  MOVWF  xCC
2D94:  MOVWF  xCD
2D96:  CALL   0906
....................             printf(lcd_putc,"                    "); 
2D9A:  MOVLW  42
2D9C:  MOVWF  FF6
2D9E:  MOVLW  04
2DA0:  MOVWF  FF7
2DA2:  CALL   09C6
....................             lcd_gotoxy(1,2); 
2DA6:  MOVLW  01
2DA8:  MOVWF  xCC
2DAA:  MOVLW  02
2DAC:  MOVWF  xCD
2DAE:  CALL   0906
....................             printf(lcd_putc,"     Contraseña     "); 
2DB2:  MOVLW  58
2DB4:  MOVWF  FF6
2DB6:  MOVLW  04
2DB8:  MOVWF  FF7
2DBA:  CALL   09C6
....................             lcd_gotoxy(1,3); 
2DBE:  MOVLW  01
2DC0:  MOVWF  xCC
2DC2:  MOVLW  03
2DC4:  MOVWF  xCD
2DC6:  CALL   0906
....................             printf(lcd_putc,"     Incorrecta     "); 
2DCA:  MOVLW  6E
2DCC:  MOVWF  FF6
2DCE:  MOVLW  04
2DD0:  MOVWF  FF7
2DD2:  CALL   09C6
....................             lcd_gotoxy(1,4); 
2DD6:  MOVLW  01
2DD8:  MOVWF  xCC
2DDA:  MOVLW  04
2DDC:  MOVWF  xCD
2DDE:  CALL   0906
....................             printf(lcd_putc,"                    "); 
2DE2:  MOVLW  84
2DE4:  MOVWF  FF6
2DE6:  MOVLW  04
2DE8:  MOVWF  FF7
2DEA:  CALL   09C6
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2DEE:  MOVLW  02
2DF0:  MOVWF  xBA
2DF2:  MOVLW  FA
2DF4:  MOVWF  xD1
2DF6:  CALL   07F8
2DFA:  DECFSZ xBA,F
2DFC:  BRA    2DF2
2DFE:  MOVLW  0B
2E00:  MOVWF  1B
2E02:  MOVLW  0C
2E04:  MOVWF  xCB
2E06:  CALL   0968
2E0A:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2E0C:  CLRF   35
2E0E:  CLRF   36
2E10:  CLRF   37
2E12:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2E14:  MOVF   18,W
2E16:  SUBLW  3D
2E18:  BTFSS  FD8.2
2E1A:  BRA    31A4
....................       EliminaRuido(); 
2E1C:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2E20:  MOVLW  01
2E22:  MOVWF  xCC
2E24:  MOVWF  xCD
2E26:  CALL   0906
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
2E2A:  MOVLW  9A
2E2C:  MOVWF  FF6
2E2E:  MOVLW  04
2E30:  MOVWF  FF7
2E32:  CALL   09C6
....................          lcd_gotoxy(1,2); 
2E36:  MOVLW  01
2E38:  MOVWF  xCC
2E3A:  MOVLW  02
2E3C:  MOVWF  xCD
2E3E:  CALL   0906
....................          printf(lcd_putc,"     Contraseña     "); 
2E42:  MOVLW  B0
2E44:  MOVWF  FF6
2E46:  MOVLW  04
2E48:  MOVWF  FF7
2E4A:  CALL   09C6
....................          lcd_gotoxy(1,3); 
2E4E:  MOVLW  01
2E50:  MOVWF  xCC
2E52:  MOVLW  03
2E54:  MOVWF  xCD
2E56:  CALL   0906
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2E5A:  MOVLW  C6
2E5C:  MOVWF  FF6
2E5E:  MOVLW  04
2E60:  MOVWF  FF7
2E62:  MOVLW  0A
2E64:  MOVWF  xBE
2E66:  CALL   10EA
2E6A:  MOVFF  35,BA
2E6E:  MOVLW  1F
2E70:  MOVWF  xBB
2E72:  CALL   1130
2E76:  MOVFF  36,BA
2E7A:  MOVLW  1F
2E7C:  MOVWF  xBB
2E7E:  CALL   1130
2E82:  MOVFF  37,BA
2E86:  MOVLW  1F
2E88:  MOVWF  xBB
2E8A:  CALL   1130
2E8E:  MOVFF  38,BA
2E92:  MOVLW  1F
2E94:  MOVWF  xBB
2E96:  CALL   1130
2E9A:  MOVLW  20
2E9C:  MOVWF  xCB
2E9E:  CALL   0968
2EA2:  MOVLW  20
2EA4:  MOVWF  xCB
2EA6:  CALL   0968
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2EAA:  MOVFF  1B,CC
2EAE:  MOVLW  04
2EB0:  MOVWF  xCD
2EB2:  CALL   0906
....................          lcd_putc(t[2]); 
2EB6:  MOVFF  34,CB
2EBA:  CALL   0968
....................           
....................          if(unidad>11&&unidad<14){ 
2EBE:  MOVF   1B,W
2EC0:  SUBLW  0B
2EC2:  BC    2EE2
2EC4:  MOVF   1B,W
2EC6:  SUBLW  0D
2EC8:  BNC   2EE2
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2ECA:  MOVLW  01
2ECC:  SUBWF  1B,W
2ECE:  MOVWF  xBA
2ED0:  MOVWF  xCC
2ED2:  MOVLW  04
2ED4:  MOVWF  xCD
2ED6:  CALL   0906
....................             lcd_putc(t[1]); 
2EDA:  MOVFF  33,CB
2EDE:  CALL   0968
....................          } 
....................           
....................          Cambio=OFF; 
2EE2:  BCF    17.5
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
2EE4:  BSF    F92.5
2EE6:  BTFSC  F80.5
2EE8:  BRA    2F1C
....................          delay_ms(20); 
2EEA:  MOVLW  14
2EEC:  MOVWF  xD1
2EEE:  CALL   07F8
....................          if(UP){ 
2EF2:  BSF    F92.5
2EF4:  BTFSC  F80.5
2EF6:  BRA    2F1A
....................             if(Flanco == 0) { 
2EF8:  BTFSC  16.3
2EFA:  BRA    2F1A
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2EFC:  MOVLW  0B
2EFE:  SUBWF  1B,W
2F00:  CLRF   03
2F02:  ADDLW  35
2F04:  MOVWF  FE9
2F06:  MOVLW  00
2F08:  ADDWFC 03,W
2F0A:  MOVWF  FEA
2F0C:  INCF   FEF,F
2F0E:  BSF    16.3
2F10:  MOVLW  1E
2F12:  MOVWF  xD1
2F14:  CALL   07F8
2F18:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F1A:  BRA    2F1E
....................          Flanco = 0; 
2F1C:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2F1E:  BSF    F96.0
2F20:  BTFSC  F84.0
2F22:  BRA    2F56
....................          delay_ms(20); 
2F24:  MOVLW  14
2F26:  MOVWF  xD1
2F28:  CALL   07F8
....................          if(DOWN){ 
2F2C:  BSF    F96.0
2F2E:  BTFSC  F84.0
2F30:  BRA    2F54
....................             if(Flanco2 == 0) { 
2F32:  BTFSC  16.5
2F34:  BRA    2F54
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2F36:  MOVLW  0B
2F38:  SUBWF  1B,W
2F3A:  CLRF   03
2F3C:  ADDLW  35
2F3E:  MOVWF  FE9
2F40:  MOVLW  00
2F42:  ADDWFC 03,W
2F44:  MOVWF  FEA
2F46:  DECF   FEF,F
2F48:  BSF    16.5
2F4A:  MOVLW  1E
2F4C:  MOVWF  xD1
2F4E:  CALL   07F8
2F52:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F54:  BRA    2F58
....................          Flanco2 = 0; 
2F56:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2F58:  BSF    F96.1
2F5A:  BTFSC  F84.1
2F5C:  BRA    2F80
....................          if(RIGHT){ 
2F5E:  BSF    F96.1
2F60:  BTFSC  F84.1
2F62:  BRA    2F7E
....................             if(Flanco1 == 0) { 
2F64:  BTFSC  16.4
2F66:  BRA    2F7E
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F68:  BSF    16.4
2F6A:  INCF   1B,F
2F6C:  MOVLW  1E
2F6E:  MOVWF  xD1
2F70:  CALL   07F8
2F74:  MOVLW  0C
2F76:  MOVWF  xCB
2F78:  CALL   0968
2F7C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F7E:  BRA    2F82
....................          Flanco1 = 0; 
2F80:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2F82:  BSF    F96.2
2F84:  BTFSC  F84.2
2F86:  BRA    2FB2
....................          delay_ms(150); 
2F88:  MOVLW  96
2F8A:  MOVWF  xD1
2F8C:  CALL   07F8
....................          if(IZQU){ 
2F90:  BSF    F96.2
2F92:  BTFSC  F84.2
2F94:  BRA    2FB0
....................             if(Flanco3 == 0){ 
2F96:  BTFSC  16.6
2F98:  BRA    2FB0
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F9A:  BSF    16.6
2F9C:  DECF   1B,F
2F9E:  MOVLW  1E
2FA0:  MOVWF  xD1
2FA2:  CALL   07F8
2FA6:  MOVLW  0C
2FA8:  MOVWF  xCB
2FAA:  CALL   0968
2FAE:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2FB0:  BRA    2FB4
....................         Flanco3 = 0; 
2FB2:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2FB4:  MOVLW  0B
2FB6:  SUBWF  1B,W
2FB8:  CLRF   03
2FBA:  ADDLW  35
2FBC:  MOVWF  FE9
2FBE:  MOVLW  00
2FC0:  ADDWFC 03,W
2FC2:  MOVWF  FEA
2FC4:  BTFSC  FEF.7
2FC6:  BRA    2FCA
2FC8:  BRA    2FDE
....................          clave[unidad-11]=9; 
2FCA:  MOVLW  0B
2FCC:  SUBWF  1B,W
2FCE:  CLRF   03
2FD0:  ADDLW  35
2FD2:  MOVWF  FE9
2FD4:  MOVLW  00
2FD6:  ADDWFC 03,W
2FD8:  MOVWF  FEA
2FDA:  MOVLW  09
2FDC:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2FDE:  MOVLW  0B
2FE0:  SUBWF  1B,W
2FE2:  CLRF   03
2FE4:  ADDLW  35
2FE6:  MOVWF  FE9
2FE8:  MOVLW  00
2FEA:  ADDWFC 03,W
2FEC:  MOVWF  FEA
2FEE:  BTFSC  FEF.7
2FF0:  BRA    300A
2FF2:  MOVF   FEF,W
2FF4:  SUBLW  09
2FF6:  BC    300A
....................          clave[unidad-11]=0; 
2FF8:  MOVLW  0B
2FFA:  SUBWF  1B,W
2FFC:  CLRF   03
2FFE:  ADDLW  35
3000:  MOVWF  FE9
3002:  MOVLW  00
3004:  ADDWFC 03,W
3006:  MOVWF  FEA
3008:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
300A:  MOVF   1B,W
300C:  SUBLW  0A
300E:  BNC   302E
....................          unidad=11; 
3010:  MOVLW  0B
3012:  MOVWF  1B
....................          Menu=1; 
3014:  MOVLW  01
3016:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3018:  CLRF   35
301A:  CLRF   36
301C:  CLRF   37
301E:  CLRF   38
3020:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
3022:  MOVLW  0B
3024:  MOVWF  1B
3026:  MOVLW  0C
3028:  MOVWF  xCB
302A:  CALL   0968
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
302E:  MOVF   1B,W
3030:  SUBLW  0E
3032:  BTFSC  FD8.0
3034:  BRA    31A4
....................          lcd_gotoxy(1,1); 
3036:  MOVLW  01
3038:  MOVWF  xCC
303A:  MOVWF  xCD
303C:  CALL   0906
....................          printf(lcd_putc,"                    "); 
3040:  MOVLW  DC
3042:  MOVWF  FF6
3044:  MOVLW  04
3046:  MOVWF  FF7
3048:  CALL   09C6
....................          lcd_gotoxy(1,2); 
304C:  MOVLW  01
304E:  MOVWF  xCC
3050:  MOVLW  02
3052:  MOVWF  xCD
3054:  CALL   0906
....................          printf(lcd_putc,"     Contraseña     "); 
3058:  MOVLW  F2
305A:  MOVWF  FF6
305C:  MOVLW  04
305E:  MOVWF  FF7
3060:  CALL   09C6
....................          lcd_gotoxy(1,3); 
3064:  MOVLW  01
3066:  MOVWF  xCC
3068:  MOVLW  03
306A:  MOVWF  xCD
306C:  CALL   0906
....................          printf(lcd_putc,"     Almacenada     "); 
3070:  MOVLW  08
3072:  MOVWF  FF6
3074:  MOVLW  05
3076:  MOVWF  FF7
3078:  CALL   09C6
....................          lcd_gotoxy(1,4); 
307C:  MOVLW  01
307E:  MOVWF  xCC
3080:  MOVLW  04
3082:  MOVWF  xCD
3084:  CALL   0906
....................          printf(lcd_putc,"                    "); 
3088:  MOVLW  1E
308A:  MOVWF  FF6
308C:  MOVLW  05
308E:  MOVWF  FF7
3090:  CALL   09C6
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3094:  CLRF   FA9
3096:  MOVFF  35,FA8
309A:  BCF    FA6.6
309C:  BCF    FA6.7
309E:  BSF    FA6.2
30A0:  MOVF   FF2,W
30A2:  MOVWF  00
30A4:  BCF    FF2.7
30A6:  MOVLB  F
30A8:  MOVLW  55
30AA:  MOVWF  FA7
30AC:  MOVLW  AA
30AE:  MOVWF  FA7
30B0:  BSF    FA6.1
30B2:  BTFSC  FA6.1
30B4:  BRA    30B2
30B6:  BCF    FA6.2
30B8:  MOVF   00,W
30BA:  IORWF  FF2,F
30BC:  MOVLW  14
30BE:  MOVLB  0
30C0:  MOVWF  xD1
30C2:  CALL   07F8
30C6:  MOVLW  01
30C8:  MOVWF  FA9
30CA:  MOVFF  36,FA8
30CE:  BCF    FA6.6
30D0:  BCF    FA6.7
30D2:  BSF    FA6.2
30D4:  MOVF   FF2,W
30D6:  MOVWF  00
30D8:  BCF    FF2.7
30DA:  MOVLB  F
30DC:  MOVLW  55
30DE:  MOVWF  FA7
30E0:  MOVLW  AA
30E2:  MOVWF  FA7
30E4:  BSF    FA6.1
30E6:  BTFSC  FA6.1
30E8:  BRA    30E6
30EA:  BCF    FA6.2
30EC:  MOVF   00,W
30EE:  IORWF  FF2,F
30F0:  MOVLW  14
30F2:  MOVLB  0
30F4:  MOVWF  xD1
30F6:  CALL   07F8
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
30FA:  MOVLW  02
30FC:  MOVWF  FA9
30FE:  MOVFF  37,FA8
3102:  BCF    FA6.6
3104:  BCF    FA6.7
3106:  BSF    FA6.2
3108:  MOVF   FF2,W
310A:  MOVWF  00
310C:  BCF    FF2.7
310E:  MOVLB  F
3110:  MOVLW  55
3112:  MOVWF  FA7
3114:  MOVLW  AA
3116:  MOVWF  FA7
3118:  BSF    FA6.1
311A:  BTFSC  FA6.1
311C:  BRA    311A
311E:  BCF    FA6.2
3120:  MOVF   00,W
3122:  IORWF  FF2,F
3124:  MOVLW  14
3126:  MOVLB  0
3128:  MOVWF  xD1
312A:  CALL   07F8
312E:  MOVLW  03
3130:  MOVWF  FA9
3132:  MOVFF  38,FA8
3136:  BCF    FA6.6
3138:  BCF    FA6.7
313A:  BSF    FA6.2
313C:  MOVF   FF2,W
313E:  MOVWF  00
3140:  BCF    FF2.7
3142:  MOVLB  F
3144:  MOVLW  55
3146:  MOVWF  FA7
3148:  MOVLW  AA
314A:  MOVWF  FA7
314C:  BSF    FA6.1
314E:  BTFSC  FA6.1
3150:  BRA    314E
3152:  BCF    FA6.2
3154:  MOVF   00,W
3156:  IORWF  FF2,F
3158:  MOVLW  14
315A:  MOVLB  0
315C:  MOVWF  xD1
315E:  CALL   07F8
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3162:  MOVLW  02
3164:  MOVWF  xBA
3166:  MOVLW  FA
3168:  MOVWF  xD1
316A:  CALL   07F8
316E:  DECFSZ xBA,F
3170:  BRA    3166
3172:  MOVLW  01
3174:  MOVWF  18
3176:  CLRF   31
3178:  MOVLW  02
317A:  MOVWF  1C
317C:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
317E:  MOVFF  35,39
3182:  MOVFF  36,3A
3186:  MOVFF  37,3B
318A:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
318E:  CLRF   35
3190:  CLRF   36
3192:  CLRF   37
3194:  CLRF   38
3196:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
3198:  MOVLW  0B
319A:  MOVWF  1B
319C:  MOVLW  0C
319E:  MOVWF  xCB
31A0:  CALL   0968
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
31A4:  MOVF   18,W
31A6:  SUBLW  04
31A8:  BTFSS  FD8.2
31AA:  BRA    33BE
....................    EliminaRuido(); 
31AC:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
31B0:  MOVLW  01
31B2:  MOVWF  xCC
31B4:  MOVWF  xCD
31B6:  CALL   0906
....................       printf(lcd_putc,"  Duracion Actual   "); 
31BA:  MOVLW  34
31BC:  MOVWF  FF6
31BE:  MOVLW  05
31C0:  MOVWF  FF7
31C2:  CALL   09C6
....................       lcd_gotoxy(1,2); 
31C6:  MOVLW  01
31C8:  MOVWF  xCC
31CA:  MOVLW  02
31CC:  MOVWF  xCD
31CE:  CALL   0906
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
31D2:  MOVLW  4A
31D4:  MOVWF  FF6
31D6:  MOVLW  05
31D8:  MOVWF  FF7
31DA:  MOVLW  0B
31DC:  MOVWF  xBE
31DE:  CALL   10EA
31E2:  MOVLW  08
31E4:  MOVWF  FE9
31E6:  MOVFF  41,BB
31EA:  MOVFF  40,BA
31EE:  GOTO   1340
31F2:  MOVLW  20
31F4:  MOVWF  xCB
31F6:  CALL   0968
31FA:  MOVLW  20
31FC:  MOVWF  xCB
31FE:  CALL   0968
3202:  MOVLW  20
3204:  MOVWF  xCB
3206:  CALL   0968
....................       lcd_gotoxy(1,4); 
320A:  MOVLW  01
320C:  MOVWF  xCC
320E:  MOVLW  04
3210:  MOVWF  xCD
3212:  CALL   0906
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3216:  MOVLW  5E
3218:  MOVWF  FF6
321A:  MOVLW  05
321C:  MOVWF  FF7
321E:  CALL   09C6
....................        
....................       Cambio=OFF; 
3222:  BCF    17.5
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3224:  BSF    F92.5
3226:  BTFSC  F80.5
3228:  BRA    337A
322A:  BSF    F96.1
322C:  BTFSC  F84.1
322E:  BRA    337A
....................          delay_ms(20); 
3230:  MOVLW  14
3232:  MOVWF  xD1
3234:  CALL   07F8
....................          if(UP && RIGHT){ 
3238:  BSF    F92.5
323A:  BTFSC  F80.5
323C:  BRA    337A
323E:  BSF    F96.1
3240:  BTFSC  F84.1
3242:  BRA    337A
....................             delay_ms(200); 
3244:  MOVLW  C8
3246:  MOVWF  xD1
3248:  CALL   07F8
....................             printf(lcd_putc,"\f"); 
324C:  MOVLW  0C
324E:  MOVWF  xCB
3250:  CALL   0968
....................             lcd_gotoxy(1,2); 
3254:  MOVLW  01
3256:  MOVWF  xCC
3258:  MOVLW  02
325A:  MOVWF  xCD
325C:  CALL   0906
....................             printf(lcd_putc," Reset de tiempo "); 
3260:  MOVLW  74
3262:  MOVWF  FF6
3264:  MOVLW  05
3266:  MOVWF  FF7
3268:  CALL   09C6
....................             lcd_gotoxy(1,3); 
326C:  MOVLW  01
326E:  MOVWF  xCC
3270:  MOVLW  03
3272:  MOVWF  xCD
3274:  CALL   0906
....................             printf(lcd_putc,"     Exitoso     "); 
3278:  MOVLW  86
327A:  MOVWF  FF6
327C:  MOVLW  05
327E:  MOVWF  FF7
3280:  CALL   09C6
....................             write_eeprom(7,0); 
3284:  MOVLW  07
3286:  MOVWF  FA9
3288:  CLRF   FA8
328A:  BCF    FA6.6
328C:  BCF    FA6.7
328E:  BSF    FA6.2
3290:  MOVF   FF2,W
3292:  MOVWF  00
3294:  BCF    FF2.7
3296:  MOVLB  F
3298:  MOVLW  55
329A:  MOVWF  FA7
329C:  MOVLW  AA
329E:  MOVWF  FA7
32A0:  BSF    FA6.1
32A2:  BTFSC  FA6.1
32A4:  BRA    32A2
32A6:  BCF    FA6.2
32A8:  MOVF   00,W
32AA:  IORWF  FF2,F
....................             delay_ms(20); 
32AC:  MOVLW  14
32AE:  MOVLB  0
32B0:  MOVWF  xD1
32B2:  CALL   07F8
....................             write_eeprom(8,0); 
32B6:  MOVLW  08
32B8:  MOVWF  FA9
32BA:  CLRF   FA8
32BC:  BCF    FA6.6
32BE:  BCF    FA6.7
32C0:  BSF    FA6.2
32C2:  MOVF   FF2,W
32C4:  MOVWF  00
32C6:  BCF    FF2.7
32C8:  MOVLB  F
32CA:  MOVLW  55
32CC:  MOVWF  FA7
32CE:  MOVLW  AA
32D0:  MOVWF  FA7
32D2:  BSF    FA6.1
32D4:  BTFSC  FA6.1
32D6:  BRA    32D4
32D8:  BCF    FA6.2
32DA:  MOVF   00,W
32DC:  IORWF  FF2,F
....................             delay_ms(20); 
32DE:  MOVLW  14
32E0:  MOVLB  0
32E2:  MOVWF  xD1
32E4:  CALL   07F8
....................             write_eeprom(9,0); 
32E8:  MOVLW  09
32EA:  MOVWF  FA9
32EC:  CLRF   FA8
32EE:  BCF    FA6.6
32F0:  BCF    FA6.7
32F2:  BSF    FA6.2
32F4:  MOVF   FF2,W
32F6:  MOVWF  00
32F8:  BCF    FF2.7
32FA:  MOVLB  F
32FC:  MOVLW  55
32FE:  MOVWF  FA7
3300:  MOVLW  AA
3302:  MOVWF  FA7
3304:  BSF    FA6.1
3306:  BTFSC  FA6.1
3308:  BRA    3306
330A:  BCF    FA6.2
330C:  MOVF   00,W
330E:  IORWF  FF2,F
....................             delay_ms(20); 
3310:  MOVLW  14
3312:  MOVLB  0
3314:  MOVWF  xD1
3316:  CALL   07F8
....................             write_eeprom(10,0); 
331A:  MOVLW  0A
331C:  MOVWF  FA9
331E:  CLRF   FA8
3320:  BCF    FA6.6
3322:  BCF    FA6.7
3324:  BSF    FA6.2
3326:  MOVF   FF2,W
3328:  MOVWF  00
332A:  BCF    FF2.7
332C:  MOVLB  F
332E:  MOVLW  55
3330:  MOVWF  FA7
3332:  MOVLW  AA
3334:  MOVWF  FA7
3336:  BSF    FA6.1
3338:  BTFSC  FA6.1
333A:  BRA    3338
333C:  BCF    FA6.2
333E:  MOVF   00,W
3340:  IORWF  FF2,F
....................             delay_ms(700); 
3342:  MOVLW  04
3344:  MOVLB  0
3346:  MOVWF  xBA
3348:  MOVLW  AF
334A:  MOVWF  xD1
334C:  CALL   07F8
3350:  DECFSZ xBA,F
3352:  BRA    3348
....................             segundos=0;minutos=0;horas=0; 
3354:  CLRF   21
3356:  CLRF   22
3358:  CLRF   41
335A:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
335C:  MOVLW  1E
335E:  MOVWF  xD1
3360:  CALL   07F8
3364:  MOVLW  01
3366:  MOVWF  18
3368:  CLRF   31
336A:  MOVLW  02
336C:  MOVWF  1C
336E:  MOVWF  1E
3370:  MOVLW  0C
3372:  MOVWF  xCB
3374:  CALL   0968
....................             Cambio=ON; 
3378:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
337A:  BSF    F96.2
337C:  BTFSC  F84.2
337E:  BRA    33BC
....................          delay_ms(20); 
3380:  MOVLW  14
3382:  MOVWF  xD1
3384:  CALL   07F8
....................          if(IZQU){ 
3388:  BSF    F96.2
338A:  BTFSC  F84.2
338C:  BRA    33BA
....................             if(Flanco3 == 0){ 
338E:  BTFSC  16.6
3390:  BRA    33BA
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3392:  BSF    16.6
3394:  MOVLW  02
3396:  MOVWF  xBA
3398:  MOVLW  FA
339A:  MOVWF  xD1
339C:  CALL   07F8
33A0:  DECFSZ xBA,F
33A2:  BRA    3398
33A4:  MOVLW  01
33A6:  MOVWF  18
33A8:  CLRF   31
33AA:  MOVLW  02
33AC:  MOVWF  1C
33AE:  MOVWF  1E
33B0:  MOVLW  0C
33B2:  MOVWF  xCB
33B4:  CALL   0968
33B8:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
33BA:  BRA    33BE
....................          Flanco3 = 0; 
33BC:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
33BE:  MOVF   18,W
33C0:  SUBLW  05
33C2:  BTFSS  FD8.2
33C4:  BRA    361A
....................       EliminaRuido(); 
33C6:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
33CA:  MOVLW  01
33CC:  MOVWF  xCC
33CE:  MOVWF  xCD
33D0:  CALL   0906
....................          printf(lcd_putc,"  Zero Point Config "); 
33D4:  MOVLW  98
33D6:  MOVWF  FF6
33D8:  MOVLW  05
33DA:  MOVWF  FF7
33DC:  CALL   09C6
....................          lcd_gotoxy(1,2); 
33E0:  MOVLW  01
33E2:  MOVWF  xCC
33E4:  MOVLW  02
33E6:  MOVWF  xCD
33E8:  CALL   0906
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
33EC:  MOVLW  05
33EE:  MOVWF  xBA
33F0:  CALL   1810
33F4:  MOVFF  00,BA
33F8:  MOVFF  01,BB
33FC:  MOVFF  02,BC
3400:  MOVFF  03,BD
3404:  MOVFF  03,D1
3408:  MOVFF  02,D0
340C:  MOVFF  01,CF
3410:  MOVFF  00,CE
3414:  MOVLW  D7
3416:  MOVWF  xD5
3418:  MOVLW  A3
341A:  MOVWF  xD4
341C:  CLRF   xD3
341E:  MOVLW  81
3420:  MOVWF  xD2
3422:  CALL   19A6
3426:  MOVFF  00,BA
342A:  MOVFF  01,BB
342E:  MOVFF  02,BC
3432:  MOVFF  03,BD
3436:  MOVLW  AE
3438:  MOVWF  FF6
343A:  MOVLW  05
343C:  MOVWF  FF7
343E:  MOVLW  09
3440:  MOVWF  xBE
3442:  CALL   10EA
3446:  MOVLW  02
3448:  MOVWF  FE9
344A:  MOVFF  BD,C1
344E:  MOVFF  BC,C0
3452:  MOVFF  BB,BF
3456:  MOVFF  BA,BE
345A:  MOVWF  xC2
345C:  CALL   1B52
3460:  MOVLW  BC
3462:  MOVWF  FF6
3464:  MOVLW  05
3466:  MOVWF  FF7
3468:  MOVLW  07
346A:  MOVWF  xBE
346C:  CALL   10EA
....................          lcd_gotoxy(1,3); 
3470:  MOVLW  01
3472:  MOVWF  xCC
3474:  MOVLW  03
3476:  MOVWF  xCD
3478:  CALL   0906
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
347C:  CLRF   xBF
347E:  CALL   13F6
3482:  MOVFF  00,BA
3486:  MOVFF  01,BB
348A:  MOVFF  02,BC
348E:  MOVFF  03,BD
3492:  MOVLW  C4
3494:  MOVWF  FF6
3496:  MOVLW  05
3498:  MOVWF  FF7
349A:  MOVLW  08
349C:  MOVWF  xBE
349E:  CALL   10EA
34A2:  MOVLW  01
34A4:  MOVWF  FE9
34A6:  MOVFF  BD,C1
34AA:  MOVFF  BC,C0
34AE:  MOVFF  BB,BF
34B2:  MOVFF  BA,BE
34B6:  CLRF   xC2
34B8:  CALL   1B52
....................          lcd_gotoxy(1,4); 
34BC:  MOVLW  01
34BE:  MOVWF  xCC
34C0:  MOVLW  04
34C2:  MOVWF  xCD
34C4:  CALL   0906
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
34C8:  MOVLW  D2
34CA:  MOVWF  FF6
34CC:  MOVLW  05
34CE:  MOVWF  FF7
34D0:  MOVLW  07
34D2:  MOVWF  xBE
34D4:  CALL   10EA
34D8:  MOVLW  01
34DA:  MOVWF  FE9
34DC:  MOVFF  A7,C1
34E0:  MOVFF  A6,C0
34E4:  MOVFF  A5,BF
34E8:  MOVFF  A4,BE
34EC:  CLRF   xC2
34EE:  CALL   1B52
....................           
....................          Cambio=OFF; 
34F2:  BCF    17.5
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
34F4:  BSF    F96.1
34F6:  BTFSC  F84.1
34F8:  BRA    35DA
....................          delay_ms(20); 
34FA:  MOVLW  14
34FC:  MOVWF  xD1
34FE:  CALL   07F8
....................          if(RIGHT){ 
3502:  BSF    F96.1
3504:  BTFSC  F84.1
3506:  BRA    35D8
....................             if(Flanco1 == 0){ 
3508:  BTFSC  16.4
350A:  BRA    35D8
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
350C:  MOVLW  01
350E:  MOVWF  18
3510:  CLRF   31
3512:  MOVLW  02
3514:  MOVWF  1C
3516:  MOVWF  1E
3518:  MOVLW  0B
351A:  MOVWF  1B
351C:  MOVLW  02
351E:  MOVWF  xBA
3520:  MOVLW  FA
3522:  MOVWF  xD1
3524:  CALL   07F8
3528:  DECFSZ xBA,F
352A:  BRA    3520
352C:  MOVLW  0C
352E:  MOVWF  xCB
3530:  CALL   0968
....................                G=sensores(0); 
3534:  CLRF   xBF
3536:  CALL   13F6
353A:  MOVFF  03,A7
353E:  MOVFF  02,A6
3542:  MOVFF  01,A5
3546:  MOVFF  00,A4
....................                G16=(int16)G; 
354A:  MOVFF  A7,D1
354E:  MOVFF  A6,D0
3552:  MOVFF  A5,CF
3556:  MOVFF  A4,CE
355A:  CALL   1CD8
355E:  MOVFF  02,43
3562:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
3566:  MOVFF  42,25
356A:  MOVFF  43,26
....................                 
....................                write_eeprom(11,G_l); 
356E:  MOVLW  0B
3570:  MOVWF  FA9
3572:  MOVFF  25,FA8
3576:  BCF    FA6.6
3578:  BCF    FA6.7
357A:  BSF    FA6.2
357C:  MOVF   FF2,W
357E:  MOVWF  00
3580:  BCF    FF2.7
3582:  MOVLB  F
3584:  MOVLW  55
3586:  MOVWF  FA7
3588:  MOVLW  AA
358A:  MOVWF  FA7
358C:  BSF    FA6.1
358E:  BTFSC  FA6.1
3590:  BRA    358E
3592:  BCF    FA6.2
3594:  MOVF   00,W
3596:  IORWF  FF2,F
....................                delay_ms(20); 
3598:  MOVLW  14
359A:  MOVLB  0
359C:  MOVWF  xD1
359E:  CALL   07F8
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
35A2:  MOVLW  0C
35A4:  MOVWF  FA9
35A6:  MOVFF  26,FA8
35AA:  BCF    FA6.6
35AC:  BCF    FA6.7
35AE:  BSF    FA6.2
35B0:  MOVF   FF2,W
35B2:  MOVWF  00
35B4:  BCF    FF2.7
35B6:  MOVLB  F
35B8:  MOVLW  55
35BA:  MOVWF  FA7
35BC:  MOVLW  AA
35BE:  MOVWF  FA7
35C0:  BSF    FA6.1
35C2:  BTFSC  FA6.1
35C4:  BRA    35C2
35C6:  BCF    FA6.2
35C8:  MOVF   00,W
35CA:  IORWF  FF2,F
....................                delay_ms(20); 
35CC:  MOVLW  14
35CE:  MOVLB  0
35D0:  MOVWF  xD1
35D2:  CALL   07F8
....................                Cambio=ON; 
35D6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
35D8:  BRA    35DC
....................          Flanco1 = 0; 
35DA:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
35DC:  BSF    F96.2
35DE:  BTFSC  F84.2
35E0:  BRA    3618
....................          delay_ms(20); 
35E2:  MOVLW  14
35E4:  MOVWF  xD1
35E6:  CALL   07F8
....................          if(IZQU){ 
35EA:  BSF    F96.2
35EC:  BTFSC  F84.2
35EE:  BRA    3616
....................             if(Flanco3 == 0){ 
35F0:  BTFSC  16.6
35F2:  BRA    3616
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
35F4:  MOVLW  01
35F6:  MOVWF  18
35F8:  CLRF   31
35FA:  MOVLW  02
35FC:  MOVWF  1C
35FE:  MOVWF  1E
3600:  MOVLW  0B
3602:  MOVWF  1B
3604:  MOVLW  1E
3606:  MOVWF  xD1
3608:  CALL   07F8
360C:  MOVLW  0C
360E:  MOVWF  xCB
3610:  CALL   0968
....................                Cambio=ON; 
3614:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
3616:  BRA    361A
....................          Flanco3 = 0; 
3618:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
361A:  MOVF   18,W
361C:  SUBLW  06
361E:  BTFSS  FD8.2
3620:  BRA    3748
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
3622:  BTG    17.4
3624:  BSF    16.4
3626:  MOVLW  01
3628:  MOVWF  18
362A:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
362C:  BTFSS  17.4
362E:  BRA    3690
....................             {estadoalarma=1; 
3630:  BSF    17.4
....................                lcd_gotoxy(1,1); 
3632:  MOVLW  01
3634:  MOVWF  xCC
3636:  MOVWF  xCD
3638:  CALL   0906
....................                printf(lcd_putc,"                    "); 
363C:  MOVLW  E0
363E:  MOVWF  FF6
3640:  MOVLW  05
3642:  MOVWF  FF7
3644:  CALL   09C6
....................                lcd_gotoxy(1,2); 
3648:  MOVLW  01
364A:  MOVWF  xCC
364C:  MOVLW  02
364E:  MOVWF  xCD
3650:  CALL   0906
....................                printf(lcd_putc,"        Activo      "); 
3654:  MOVLW  F6
3656:  MOVWF  FF6
3658:  MOVLW  05
365A:  MOVWF  FF7
365C:  CALL   09C6
....................                lcd_gotoxy(1,3); 
3660:  MOVLW  01
3662:  MOVWF  xCC
3664:  MOVLW  03
3666:  MOVWF  xCD
3668:  CALL   0906
....................                printf(lcd_putc,"        Alarma      "); 
366C:  MOVLW  0C
366E:  MOVWF  FF6
3670:  MOVLW  06
3672:  MOVWF  FF7
3674:  CALL   09C6
....................                lcd_gotoxy(1,4); 
3678:  MOVLW  01
367A:  MOVWF  xCC
367C:  MOVLW  04
367E:  MOVWF  xCD
3680:  CALL   0906
....................                printf(lcd_putc,"                    ");} 
3684:  MOVLW  22
3686:  MOVWF  FF6
3688:  MOVLW  06
368A:  MOVWF  FF7
368C:  CALL   09C6
....................                 
....................             if(estadoalarma==0) 
3690:  BTFSC  17.4
3692:  BRA    36F4
....................             {estadoalarma=0; 
3694:  BCF    17.4
....................                lcd_gotoxy(1,1); 
3696:  MOVLW  01
3698:  MOVWF  xCC
369A:  MOVWF  xCD
369C:  CALL   0906
....................                printf(lcd_putc,"                    "); 
36A0:  MOVLW  38
36A2:  MOVWF  FF6
36A4:  MOVLW  06
36A6:  MOVWF  FF7
36A8:  CALL   09C6
....................                lcd_gotoxy(1,2); 
36AC:  MOVLW  01
36AE:  MOVWF  xCC
36B0:  MOVLW  02
36B2:  MOVWF  xCD
36B4:  CALL   0906
....................                printf(lcd_putc,"      Desactivo     "); 
36B8:  MOVLW  4E
36BA:  MOVWF  FF6
36BC:  MOVLW  06
36BE:  MOVWF  FF7
36C0:  CALL   09C6
....................                lcd_gotoxy(1,3); 
36C4:  MOVLW  01
36C6:  MOVWF  xCC
36C8:  MOVLW  03
36CA:  MOVWF  xCD
36CC:  CALL   0906
....................                printf(lcd_putc,"       Alarma       "); 
36D0:  MOVLW  64
36D2:  MOVWF  FF6
36D4:  MOVLW  06
36D6:  MOVWF  FF7
36D8:  CALL   09C6
....................                lcd_gotoxy(1,4); 
36DC:  MOVLW  01
36DE:  MOVWF  xCC
36E0:  MOVLW  04
36E2:  MOVWF  xCD
36E4:  CALL   0906
....................                printf(lcd_putc,"                    ");} 
36E8:  MOVLW  7A
36EA:  MOVWF  FF6
36EC:  MOVLW  06
36EE:  MOVWF  FF7
36F0:  CALL   09C6
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
36F4:  MOVLW  00
36F6:  BTFSC  17.4
36F8:  MOVLW  01
36FA:  MOVWF  xBA
36FC:  MOVLW  04
36FE:  MOVWF  FA9
3700:  MOVFF  BA,FA8
3704:  BCF    FA6.6
3706:  BCF    FA6.7
3708:  BSF    FA6.2
370A:  MOVF   FF2,W
370C:  MOVWF  00
370E:  BCF    FF2.7
3710:  MOVLB  F
3712:  MOVLW  55
3714:  MOVWF  FA7
3716:  MOVLW  AA
3718:  MOVWF  FA7
371A:  BSF    FA6.1
371C:  BTFSC  FA6.1
371E:  BRA    371C
3720:  BCF    FA6.2
3722:  MOVF   00,W
3724:  IORWF  FF2,F
3726:  MOVLW  04
3728:  MOVLB  0
372A:  MOVWF  xBA
372C:  MOVLW  FA
372E:  MOVWF  xD1
3730:  CALL   07F8
3734:  DECFSZ xBA,F
3736:  BRA    372C
3738:  MOVLW  02
373A:  MOVWF  1C
373C:  MOVWF  1E
373E:  MOVLW  0C
3740:  MOVWF  xCB
3742:  CALL   0968
....................             Cambio=ON; 
3746:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
3748:  MOVF   18,W
374A:  SUBLW  07
374C:  BTFSS  FD8.2
374E:  BRA    38E8
....................       if(VelMotor>6)VelMotor=6; 
3750:  MOVF   xB0,W
3752:  SUBLW  06
3754:  BC    375A
3756:  MOVLW  06
3758:  MOVWF  xB0
....................       if(VelMotor<1)VelMotor=1; 
375A:  MOVF   xB0,F
375C:  BNZ   3762
375E:  MOVLW  01
3760:  MOVWF  xB0
....................        
....................       lcd_gotoxy(1,1); 
3762:  MOVLW  01
3764:  MOVWF  xCC
3766:  MOVWF  xCD
3768:  CALL   0906
....................       printf(lcd_putc,"Seleccione Velocidad"); 
376C:  MOVLW  90
376E:  MOVWF  FF6
3770:  MOVLW  06
3772:  MOVWF  FF7
3774:  CALL   09C6
....................       lcd_gotoxy(1,2); 
3778:  MOVLW  01
377A:  MOVWF  xCC
377C:  MOVLW  02
377E:  MOVWF  xCD
3780:  CALL   0906
....................       printf(lcd_putc,"   del Ventilador   "); 
3784:  MOVLW  A6
3786:  MOVWF  FF6
3788:  MOVLW  06
378A:  MOVWF  FF7
378C:  CALL   09C6
....................       lcd_gotoxy(1,3); 
3790:  MOVLW  01
3792:  MOVWF  xCC
3794:  MOVLW  03
3796:  MOVWF  xCD
3798:  CALL   0906
....................       printf(lcd_putc,"     Vel: %u       ",VelMotor); 
379C:  MOVLW  BC
379E:  MOVWF  FF6
37A0:  MOVLW  06
37A2:  MOVWF  FF7
37A4:  MOVLW  0A
37A6:  MOVWF  xBE
37A8:  CALL   10EA
37AC:  MOVFF  B0,BA
37B0:  MOVLW  1B
37B2:  MOVWF  xBB
37B4:  CALL   12D4
37B8:  MOVLW  C8
37BA:  MOVWF  FF6
37BC:  MOVLW  06
37BE:  MOVWF  FF7
37C0:  MOVLW  07
37C2:  MOVWF  xBE
37C4:  CALL   10EA
....................       lcd_gotoxy(1,4); 
37C8:  MOVLW  01
37CA:  MOVWF  xCC
37CC:  MOVLW  04
37CE:  MOVWF  xCD
37D0:  CALL   0906
....................       printf(lcd_putc,"                    ");       
37D4:  MOVLW  D0
37D6:  MOVWF  FF6
37D8:  MOVLW  06
37DA:  MOVWF  FF7
37DC:  CALL   09C6
....................        
....................       if(UP && VelMotor<6)//Si oprime hacia arriba 
37E0:  BSF    F92.5
37E2:  BTFSC  F80.5
37E4:  BRA    37F6
37E6:  MOVF   xB0,W
37E8:  SUBLW  05
37EA:  BNC   37F6
....................       {   
....................          delay_ms(100);VelMotor++; 
37EC:  MOVLW  64
37EE:  MOVWF  xD1
37F0:  CALL   07F8
37F4:  INCF   xB0,F
....................       } 
....................              
....................       if(DOWN && VelMotor>0)//Si oprime hacia abajo 
37F6:  BSF    F96.0
37F8:  BTFSC  F84.0
37FA:  BRA    380A
37FC:  MOVF   xB0,F
37FE:  BZ    380A
....................       {   
....................          delay_ms(100);VelMotor--; 
3800:  MOVLW  64
3802:  MOVWF  xD1
3804:  CALL   07F8
3808:  DECF   xB0,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
380A:  BSF    F96.1
380C:  BTFSC  F84.1
380E:  BRA    3818
....................       {            
....................          VelocidadMotor(VelMotor); 
3810:  MOVFF  B0,BA
3814:  CALL   1066
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
3818:  BSF    F96.2
381A:  BTFSC  F84.2
381C:  BRA    38E8
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
381E:  MOVLW  64
3820:  MOVWF  xD1
3822:  CALL   07F8
3826:  MOVLW  02
3828:  MOVWF  1C
382A:  MOVWF  1E
382C:  MOVLW  0C
382E:  MOVWF  xCB
3830:  CALL   0968
....................          write_eeprom(13,VelMotor);//Guardar valor de Setpoint en eeprom 
3834:  MOVLW  0D
3836:  MOVWF  FA9
3838:  MOVFF  B0,FA8
383C:  BCF    FA6.6
383E:  BCF    FA6.7
3840:  BSF    FA6.2
3842:  MOVF   FF2,W
3844:  MOVWF  00
3846:  BCF    FF2.7
3848:  MOVLB  F
384A:  MOVLW  55
384C:  MOVWF  FA7
384E:  MOVLW  AA
3850:  MOVWF  FA7
3852:  BSF    FA6.1
3854:  BTFSC  FA6.1
3856:  BRA    3854
3858:  BCF    FA6.2
385A:  MOVF   00,W
385C:  IORWF  FF2,F
....................          delay_ms(20); 
385E:  MOVLW  14
3860:  MOVLB  0
3862:  MOVWF  xD1
3864:  CALL   07F8
....................          lcd_gotoxy(1,1); 
3868:  MOVLW  01
386A:  MOVWF  xCC
386C:  MOVWF  xCD
386E:  CALL   0906
....................          printf(lcd_putc,"                    "); 
3872:  MOVLW  E6
3874:  MOVWF  FF6
3876:  MOVLW  06
3878:  MOVWF  FF7
387A:  CALL   09C6
....................          lcd_gotoxy(1,2); 
387E:  MOVLW  01
3880:  MOVWF  xCC
3882:  MOVLW  02
3884:  MOVWF  xCD
3886:  CALL   0906
....................          printf(lcd_putc,"     Velocidad      "); 
388A:  MOVLW  FC
388C:  MOVWF  FF6
388E:  MOVLW  06
3890:  MOVWF  FF7
3892:  CALL   09C6
....................          lcd_gotoxy(1,3); 
3896:  MOVLW  01
3898:  MOVWF  xCC
389A:  MOVLW  03
389C:  MOVWF  xCD
389E:  CALL   0906
....................          printf(lcd_putc,"      Almacenada    "); 
38A2:  MOVLW  12
38A4:  MOVWF  FF6
38A6:  MOVLW  07
38A8:  MOVWF  FF7
38AA:  CALL   09C6
....................          lcd_gotoxy(1,4); 
38AE:  MOVLW  01
38B0:  MOVWF  xCC
38B2:  MOVLW  04
38B4:  MOVWF  xCD
38B6:  CALL   0906
....................          printf(lcd_putc,"                    ");  
38BA:  MOVLW  28
38BC:  MOVWF  FF6
38BE:  MOVLW  07
38C0:  MOVWF  FF7
38C2:  CALL   09C6
....................          delay_ms(1000); 
38C6:  MOVLW  04
38C8:  MOVWF  xBA
38CA:  MOVLW  FA
38CC:  MOVWF  xD1
38CE:  CALL   07F8
38D2:  DECFSZ xBA,F
38D4:  BRA    38CA
....................          printf(lcd_putc,"\f"); 
38D6:  MOVLW  0C
38D8:  MOVWF  xCB
38DA:  CALL   0968
....................          lcd_init(); 
38DE:  CALL   0888
....................          Menu=1; paso=0; 
38E2:  MOVLW  01
38E4:  MOVWF  18
38E6:  CLRF   31
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
38E8:  MOVF   18,W
38EA:  SUBLW  32
38EC:  BTFSS  FD8.2
38EE:  BRA    3F54
....................    if(Lectura==1){ 
38F0:  BTFSS  17.0
38F2:  BRA    3B4A
....................       Lectura=0; 
38F4:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
38F6:  MOVLW  05
38F8:  MOVWF  xBA
38FA:  CALL   1810
38FE:  MOVFF  03,A3
3902:  MOVFF  02,A2
3906:  MOVFF  01,A1
390A:  MOVFF  00,A0
....................       lcd_gotoxy(1,1); 
390E:  MOVLW  01
3910:  MOVWF  xCC
3912:  MOVWF  xCD
3914:  CALL   0906
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
3918:  MOVFF  A3,D1
391C:  MOVFF  A2,D0
3920:  MOVFF  A1,CF
3924:  MOVFF  A0,CE
3928:  MOVLW  D7
392A:  MOVWF  xD5
392C:  MOVLW  A3
392E:  MOVWF  xD4
3930:  CLRF   xD3
3932:  MOVLW  81
3934:  MOVWF  xD2
3936:  CALL   19A6
393A:  MOVFF  00,BA
393E:  MOVFF  01,BB
3942:  MOVFF  02,BC
3946:  MOVFF  03,BD
394A:  MOVLW  3E
394C:  MOVWF  FF6
394E:  MOVLW  07
3950:  MOVWF  FF7
3952:  MOVLW  08
3954:  MOVWF  xBE
3956:  CALL   10EA
395A:  MOVLW  02
395C:  MOVWF  FE9
395E:  MOVFF  BD,C1
3962:  MOVFF  BC,C0
3966:  MOVFF  BB,BF
396A:  MOVFF  BA,BE
396E:  MOVWF  xC2
3970:  CALL   1B52
3974:  MOVLW  4B
3976:  MOVWF  FF6
3978:  MOVLW  07
397A:  MOVWF  FF7
397C:  MOVLW  07
397E:  MOVWF  xBE
3980:  CALL   10EA
....................       //Saturacion=((CaidaPresion-0.07462)/0.15)*11; 
....................       Saturacion=((CaidaPresion-0.1243)/0.18)*35; 
3984:  BSF    FD8.1
3986:  MOVFF  A3,D5
398A:  MOVFF  A2,D4
398E:  MOVFF  A1,D3
3992:  MOVFF  A0,D2
3996:  CLRF   xD9
3998:  MOVLW  91
399A:  MOVWF  xD8
399C:  MOVLW  7E
399E:  MOVWF  xD7
39A0:  MOVLW  7B
39A2:  MOVWF  xD6
39A4:  CALL   15A6
39A8:  MOVFF  00,BA
39AC:  MOVFF  01,BB
39B0:  MOVFF  02,BC
39B4:  MOVFF  03,BD
39B8:  MOVFF  03,D1
39BC:  MOVFF  02,D0
39C0:  MOVFF  01,CF
39C4:  MOVFF  00,CE
39C8:  MOVLW  EC
39CA:  MOVWF  xD5
39CC:  MOVLW  51
39CE:  MOVWF  xD4
39D0:  MOVLW  38
39D2:  MOVWF  xD3
39D4:  MOVLW  7C
39D6:  MOVWF  xD2
39D8:  CALL   144C
39DC:  MOVFF  00,BA
39E0:  MOVFF  01,BB
39E4:  MOVFF  02,BC
39E8:  MOVFF  03,BD
39EC:  MOVFF  03,D1
39F0:  MOVFF  02,D0
39F4:  MOVFF  01,CF
39F8:  MOVFF  00,CE
39FC:  CLRF   xD5
39FE:  CLRF   xD4
3A00:  MOVLW  0C
3A02:  MOVWF  xD3
3A04:  MOVLW  84
3A06:  MOVWF  xD2
3A08:  CALL   19A6
3A0C:  MOVFF  03,9F
3A10:  MOVFF  02,9E
3A14:  MOVFF  01,9D
3A18:  MOVFF  00,9C
....................        
....................       if(Saturacion>11) 
3A1C:  CLRF   xD1
3A1E:  CLRF   xD0
3A20:  MOVLW  30
3A22:  MOVWF  xCF
3A24:  MOVLW  82
3A26:  MOVWF  xCE
3A28:  MOVFF  9F,D5
3A2C:  MOVFF  9E,D4
3A30:  MOVFF  9D,D3
3A34:  MOVFF  9C,D2
3A38:  CALL   0C60
3A3C:  BNC   3A4A
....................       { 
....................          Saturacion=11; 
3A3E:  CLRF   x9F
3A40:  CLRF   x9E
3A42:  MOVLW  30
3A44:  MOVWF  x9D
3A46:  MOVLW  82
3A48:  MOVWF  x9C
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
3A4A:  CLRF   2D
3A4C:  MOVFF  9F,BD
3A50:  MOVFF  9E,BC
3A54:  MOVFF  9D,BB
3A58:  MOVFF  9C,BA
3A5C:  CALL   204A
3A60:  MOVFF  00,BA
3A64:  MOVFF  01,BB
3A68:  MOVFF  02,BC
3A6C:  MOVFF  03,BD
3A70:  CLRF   xD3
3A72:  MOVFF  2D,D2
3A76:  CALL   0A4C
3A7A:  MOVFF  03,D1
3A7E:  MOVFF  02,D0
3A82:  MOVFF  01,CF
3A86:  MOVFF  00,CE
3A8A:  MOVFF  BD,D5
3A8E:  MOVFF  BC,D4
3A92:  MOVFF  BB,D3
3A96:  MOVFF  BA,D2
3A9A:  CALL   0C60
3A9E:  BNC   3ABC
....................       { 
....................          lcd_gotoxy(i+8,2); 
3AA0:  MOVLW  08
3AA2:  ADDWF  2D,W
3AA4:  MOVWF  xBA
3AA6:  MOVWF  xCC
3AA8:  MOVLW  02
3AAA:  MOVWF  xCD
3AAC:  CALL   0906
....................          printf(lcd_putc,"Ñ"); 
3AB0:  MOVLW  D1
3AB2:  MOVWF  xCB
3AB4:  CALL   0968
....................       } 
3AB8:  INCF   2D,F
3ABA:  BRA    3A4C
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3ABC:  MOVFF  9F,BD
3AC0:  MOVFF  9E,BC
3AC4:  MOVFF  9D,BB
3AC8:  MOVFF  9C,BA
3ACC:  CALL   204A
3AD0:  MOVFF  03,D1
3AD4:  MOVFF  02,D0
3AD8:  MOVFF  01,CF
3ADC:  MOVFF  00,CE
3AE0:  CALL   1CD8
3AE4:  MOVFF  01,2D
3AE8:  MOVF   2D,W
3AEA:  SUBLW  0A
3AEC:  BNC   3B0A
....................       { 
....................          lcd_gotoxy(i+8,2); 
3AEE:  MOVLW  08
3AF0:  ADDWF  2D,W
3AF2:  MOVWF  xBA
3AF4:  MOVWF  xCC
3AF6:  MOVLW  02
3AF8:  MOVWF  xCD
3AFA:  CALL   0906
....................          printf(lcd_putc," "); 
3AFE:  MOVLW  20
3B00:  MOVWF  xCB
3B02:  CALL   0968
....................       } 
3B06:  INCF   2D,F
3B08:  BRA    3AE8
....................        
....................       lcd_gotoxy(9,3); 
3B0A:  MOVLW  09
3B0C:  MOVWF  xCC
3B0E:  MOVLW  03
3B10:  MOVWF  xCD
3B12:  CALL   0906
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3B16:  MOVLW  54
3B18:  MOVWF  FF6
3B1A:  MOVLW  07
3B1C:  MOVWF  FF7
3B1E:  MOVLW  06
3B20:  MOVWF  xBE
3B22:  CALL   10EA
3B26:  MOVFF  27,BA
3B2A:  MOVLW  03
3B2C:  MOVWF  xBB
3B2E:  CALL   12D4
3B32:  MOVLW  3A
3B34:  MOVWF  xCB
3B36:  CALL   0968
3B3A:  MOVFF  28,BA
3B3E:  MOVLW  01
3B40:  MOVWF  xBB
3B42:  CALL   12D4
....................       EliminaRuido(); 
3B46:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
3B4A:  BTFSS  16.7
3B4C:  BRA    3BE6
....................    { 
....................       if(estadoalarma==1) 
3B4E:  BTFSS  17.4
3B50:  BRA    3BDC
....................       { 
....................          printf(lcd_putc,"\f"); 
3B52:  MOVLW  0C
3B54:  MOVWF  xCB
3B56:  CALL   0968
....................          lcd_gotoxy(1,2); 
3B5A:  MOVLW  01
3B5C:  MOVWF  xCC
3B5E:  MOVLW  02
3B60:  MOVWF  xCD
3B62:  CALL   0906
....................          printf(lcd_putc,"  Temporizador  de  "); 
3B66:  MOVLW  64
3B68:  MOVWF  FF6
3B6A:  MOVLW  07
3B6C:  MOVWF  FF7
3B6E:  CALL   09C6
....................          lcd_gotoxy(1,3); 
3B72:  MOVLW  01
3B74:  MOVWF  xCC
3B76:  MOVLW  03
3B78:  MOVWF  xCD
3B7A:  CALL   0906
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3B7E:  MOVLW  7A
3B80:  MOVWF  FF6
3B82:  MOVLW  07
3B84:  MOVWF  FF7
3B86:  CALL   09C6
....................          lcd_gotoxy(1,4); 
3B8A:  MOVLW  01
3B8C:  MOVWF  xCC
3B8E:  MOVLW  04
3B90:  MOVWF  xCD
3B92:  CALL   0906
....................          printf(lcd_putc,"                    "); 
3B96:  MOVLW  90
3B98:  MOVWF  FF6
3B9A:  MOVLW  07
3B9C:  MOVWF  FF7
3B9E:  CALL   09C6
....................          lcd_gotoxy(1,1); 
3BA2:  MOVLW  01
3BA4:  MOVWF  xCC
3BA6:  MOVWF  xCD
3BA8:  CALL   0906
....................          printf(lcd_putc,"                    "); 
3BAC:  MOVLW  A6
3BAE:  MOVWF  FF6
3BB0:  MOVLW  07
3BB2:  MOVWF  FF7
3BB4:  CALL   09C6
....................          for(i=0;i<5;i++) 
3BB8:  CLRF   2D
3BBA:  MOVF   2D,W
3BBC:  SUBLW  04
3BBE:  BNC   3BDC
....................          { 
....................             Buzzer_on; 
3BC0:  BSF    F8B.0
3BC2:  BCF    F94.0
....................             delay_ms(200); 
3BC4:  MOVLW  C8
3BC6:  MOVWF  xD1
3BC8:  CALL   07F8
....................             Buzzer_off; 
3BCC:  BCF    F8B.0
3BCE:  BCF    F94.0
....................             delay_ms(200); 
3BD0:  MOVLW  C8
3BD2:  MOVWF  xD1
3BD4:  CALL   07F8
....................          } 
3BD8:  INCF   2D,F
3BDA:  BRA    3BBA
....................       } 
....................       tiempo_cumplido=0; 
3BDC:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
3BDE:  MOVLW  0C
3BE0:  MOVWF  xCB
3BE2:  CALL   0968
....................    } 
....................     
....................    if(CaidaPresion>=0.174) 
3BE6:  MOVLW  0E
3BE8:  MOVWF  xD1
3BEA:  MOVLW  2D
3BEC:  MOVWF  xD0
3BEE:  MOVLW  32
3BF0:  MOVWF  xCF
3BF2:  MOVLW  7C
3BF4:  MOVWF  xCE
3BF6:  MOVFF  A3,D5
3BFA:  MOVFF  A2,D4
3BFE:  MOVFF  A1,D3
3C02:  MOVFF  A0,D2
3C06:  CALL   0C60
3C0A:  BC    3C0E
3C0C:  BNZ   3C14
....................    {  
....................       ActivaBuzzer=1; 
3C0E:  MOVLW  01
3C10:  MOVWF  3D
....................    } 
....................    else 
3C12:  BRA    3C1A
....................    { 
....................       ActivaBuzzer=0; 
3C14:  CLRF   3D
....................       Buzzer_off; 
3C16:  BCF    F8B.0
3C18:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
3C1A:  MOVLW  01
3C1C:  MOVWF  xCC
3C1E:  MOVLW  02
3C20:  MOVWF  xCD
3C22:  CALL   0906
....................       printf(lcd_putc,"Filtro:"); 
3C26:  MOVLW  BC
3C28:  MOVWF  FF6
3C2A:  MOVLW  07
3C2C:  MOVWF  FF7
3C2E:  CALL   09C6
....................        
....................       if(estadomv==1) 
3C32:  BTFSS  16.2
3C34:  BRA    3C50
....................       { 
....................          lcd_gotoxy(1,4); 
3C36:  MOVLW  01
3C38:  MOVWF  xCC
3C3A:  MOVLW  04
3C3C:  MOVWF  xCD
3C3E:  CALL   0906
....................          printf(lcd_putc,"Motor:ON ");       
3C42:  MOVLW  C4
3C44:  MOVWF  FF6
3C46:  MOVLW  07
3C48:  MOVWF  FF7
3C4A:  CALL   09C6
....................       } 
....................       else 
3C4E:  BRA    3C68
....................       { 
....................          lcd_gotoxy(1,4); 
3C50:  MOVLW  01
3C52:  MOVWF  xCC
3C54:  MOVLW  04
3C56:  MOVWF  xCD
3C58:  CALL   0906
....................          printf(lcd_putc,"Motor:OFF"); 
3C5C:  MOVLW  CE
3C5E:  MOVWF  FF6
3C60:  MOVLW  07
3C62:  MOVWF  FF7
3C64:  CALL   09C6
....................       } 
....................        
....................       if(estadouv==1) 
3C68:  BTFSS  16.0
3C6A:  BRA    3C86
....................       { 
....................          lcd_gotoxy(13,4); 
3C6C:  MOVLW  0D
3C6E:  MOVWF  xCC
3C70:  MOVLW  04
3C72:  MOVWF  xCD
3C74:  CALL   0906
....................          printf(lcd_putc,"UV:ON "); 
3C78:  MOVLW  D8
3C7A:  MOVWF  FF6
3C7C:  MOVLW  07
3C7E:  MOVWF  FF7
3C80:  CALL   09C6
....................       } 
....................       else 
3C84:  BRA    3C9E
....................       {          
....................          lcd_gotoxy(13,4); 
3C86:  MOVLW  0D
3C88:  MOVWF  xCC
3C8A:  MOVLW  04
3C8C:  MOVWF  xCD
3C8E:  CALL   0906
....................          printf(lcd_putc,"UV:OFF"); 
3C92:  MOVLW  E0
3C94:  MOVWF  FF6
3C96:  MOVLW  07
3C98:  MOVWF  FF7
3C9A:  CALL   09C6
....................       } 
....................        
....................       if(estadofl==1) 
3C9E:  BTFSS  16.1
3CA0:  BRA    3CBC
....................       { 
....................          lcd_gotoxy(1,3); 
3CA2:  MOVLW  01
3CA4:  MOVWF  xCC
3CA6:  MOVLW  03
3CA8:  MOVWF  xCD
3CAA:  CALL   0906
....................          printf(lcd_putc,"Luz:ON "); 
3CAE:  MOVLW  E8
3CB0:  MOVWF  FF6
3CB2:  MOVLW  07
3CB4:  MOVWF  FF7
3CB6:  CALL   09C6
....................       } 
....................       else 
3CBA:  BRA    3CD4
....................       { 
....................          lcd_gotoxy(1,3); 
3CBC:  MOVLW  01
3CBE:  MOVWF  xCC
3CC0:  MOVLW  03
3CC2:  MOVWF  xCD
3CC4:  CALL   0906
....................          printf(lcd_putc,"Luz:OFF"); 
3CC8:  MOVLW  F0
3CCA:  MOVWF  FF6
3CCC:  MOVLW  07
3CCE:  MOVWF  FF7
3CD0:  CALL   09C6
....................       }  
....................       Cambio=OFF; 
3CD4:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
3CD6:  BTFSS  16.2
3CD8:  BRA    3D04
....................       if(flagmv==0){ 
3CDA:  BTFSC  17.6
3CDC:  BRA    3CFA
....................          VelocidadMotor(6);lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
3CDE:  MOVLW  06
3CE0:  MOVWF  xBA
3CE2:  CALL   1066
3CE6:  CALL   0888
3CEA:  MOVLW  C8
3CEC:  MOVWF  xD1
3CEE:  CALL   07F8
3CF2:  CALL   0888
3CF6:  BSF    17.6
3CF8:  BSF    17.5
....................       } 
....................       VelocidadMotor(VelMotor); 
3CFA:  MOVFF  B0,BA
3CFE:  CALL   1066
....................    }else{ 
3D02:  BRA    3D22
....................       VelocidadMotor(0); 
3D04:  CLRF   xBA
3D06:  CALL   1066
....................       if(flagmv==1){ 
3D0A:  BTFSS  17.6
3D0C:  BRA    3D22
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
3D0E:  CALL   0888
3D12:  MOVLW  C8
3D14:  MOVWF  xD1
3D16:  CALL   07F8
3D1A:  CALL   0888
3D1E:  BCF    17.6
3D20:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
3D22:  BTFSS  16.0
3D24:  BRA    3D58
....................       estadomv=0; 
3D26:  BCF    16.2
....................       VelocidadMotor(0); 
3D28:  CLRF   xBA
3D2A:  CALL   1066
....................       estadofl=0; 
3D2E:  BCF    16.1
....................       Luz_Blanca_off; 
3D30:  BSF    F8A.2
3D32:  BCF    F93.2
....................       Luz_UV_on; 
3D34:  BCF    F8A.1
3D36:  BCF    F93.1
....................       tiempo_cumplido=0; 
3D38:  BCF    16.7
....................       if(flaguv==0){ 
3D3A:  BTFSC  17.1
3D3C:  BRA    3D56
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
3D3E:  CALL   0888
3D42:  MOVLW  C8
3D44:  MOVWF  xD1
3D46:  CALL   07F8
3D4A:  CALL   0888
3D4E:  BSF    17.1
3D50:  MOVLW  01
3D52:  MOVWF  30
3D54:  BSF    17.5
....................       } 
....................    }else{ 
3D56:  BRA    3D7A
....................       estadouv=0; 
3D58:  BCF    16.0
....................       Luz_UV_off; 
3D5A:  BSF    F8A.1
3D5C:  BCF    F93.1
....................       if(flaguv==1){ 
3D5E:  BTFSS  17.1
3D60:  BRA    3D7A
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
3D62:  CALL   0888
3D66:  MOVLW  C8
3D68:  MOVWF  xD1
3D6A:  CALL   07F8
3D6E:  CALL   0888
3D72:  BCF    17.1
3D74:  MOVLW  01
3D76:  MOVWF  30
3D78:  BSF    17.5
....................       } 
....................    } 
....................        
....................    if(estadofl==1) 
3D7A:  BTFSS  16.1
3D7C:  BRA    3D9C
....................    { 
....................       Luz_Blanca_on; 
3D7E:  BCF    F8A.2
3D80:  BCF    F93.2
....................       if(flagfl==0) 
3D82:  BTFSC  17.2
3D84:  BRA    3D9A
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
3D86:  CALL   0888
3D8A:  MOVLW  C8
3D8C:  MOVWF  xD1
3D8E:  CALL   07F8
3D92:  CALL   0888
3D96:  BSF    17.2
3D98:  BSF    17.5
....................       } 
....................    } 
....................    else 
3D9A:  BRA    3DB8
....................    { 
....................       Luz_Blanca_off; 
3D9C:  BSF    F8A.2
3D9E:  BCF    F93.2
....................       if(flagfl==1) 
3DA0:  BTFSS  17.2
3DA2:  BRA    3DB8
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
3DA4:  CALL   0888
3DA8:  MOVLW  C8
3DAA:  MOVWF  xD1
3DAC:  CALL   07F8
3DB0:  CALL   0888
3DB4:  BCF    17.2
3DB6:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia arriba 
3DB8:  BSF    F96.0
3DBA:  BTFSC  F84.0
3DBC:  BRA    3DE8
....................    { 
....................       delay_ms(20); 
3DBE:  MOVLW  14
3DC0:  MOVWF  xD1
3DC2:  CALL   07F8
....................       if(DOWN){ 
3DC6:  BSF    F96.0
3DC8:  BTFSC  F84.0
3DCA:  BRA    3DE6
....................          if(Flanco == 0) 
3DCC:  BTFSC  16.3
3DCE:  BRA    3DE6
....................          { 
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
3DD0:  BTG    16.1
3DD2:  BSF    16.3
3DD4:  MOVLW  02
3DD6:  MOVWF  xBA
3DD8:  MOVLW  96
3DDA:  MOVWF  xD1
3DDC:  CALL   07F8
3DE0:  DECFSZ xBA,F
3DE2:  BRA    3DD8
3DE4:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3DE6:  BRA    3DEA
....................    { 
....................       Flanco = 0; 
3DE8:  BCF    16.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3DEA:  BSF    F96.1
3DEC:  BTFSC  F84.1
3DEE:  BRA    3E1A
....................    { 
....................       delay_ms(20); 
3DF0:  MOVLW  14
3DF2:  MOVWF  xD1
3DF4:  CALL   07F8
....................       if(RIGHT){ 
3DF8:  BSF    F96.1
3DFA:  BTFSC  F84.1
3DFC:  BRA    3E18
....................          if(Flanco1 == 0) 
3DFE:  BTFSC  16.4
3E00:  BRA    3E18
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
3E02:  BTG    16.2
3E04:  BSF    16.4
3E06:  MOVLW  02
3E08:  MOVWF  xBA
3E0A:  MOVLW  96
3E0C:  MOVWF  xD1
3E0E:  CALL   07F8
3E12:  DECFSZ xBA,F
3E14:  BRA    3E0A
3E16:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3E18:  BRA    3E1C
....................    { 
....................       Flanco1 = 0; 
3E1A:  BCF    16.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
3E1C:  BSF    F96.2
3E1E:  BTFSC  F84.2
3E20:  BRA    3E3C
....................    { 
....................       delay_ms(20); 
3E22:  MOVLW  14
3E24:  MOVWF  xD1
3E26:  CALL   07F8
....................       if(IZQU){ 
3E2A:  BSF    F96.2
3E2C:  BTFSC  F84.2
3E2E:  BRA    3E3C
....................          delay_ms(150);  
3E30:  MOVLW  96
3E32:  MOVWF  xD1
3E34:  CALL   07F8
....................          estadouv=!estadouv; 
3E38:  BTG    16.0
....................          Cambio=ON; 
3E3A:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3E3C:  BSF    F92.5
3E3E:  BTFSC  F80.5
3E40:  BRA    3E76
....................    { 
....................       delay_ms(20); 
3E42:  MOVLW  14
3E44:  MOVWF  xD1
3E46:  CALL   07F8
....................       if(UP){ 
3E4A:  BSF    F92.5
3E4C:  BTFSC  F80.5
3E4E:  BRA    3E76
....................          printf(lcd_putc,"\f"); 
3E50:  MOVLW  0C
3E52:  MOVWF  xCB
3E54:  CALL   0968
....................          delay_ms(300); 
3E58:  MOVLW  02
3E5A:  MOVWF  xBA
3E5C:  MOVLW  96
3E5E:  MOVWF  xD1
3E60:  CALL   07F8
3E64:  DECFSZ xBA,F
3E66:  BRA    3E5C
....................          Menu=1;  
3E68:  MOVLW  01
3E6A:  MOVWF  18
....................          paso=0; 
3E6C:  CLRF   31
....................          Flecha=2; 
3E6E:  MOVLW  02
3E70:  MOVWF  1C
....................          Flecha2=2; 
3E72:  MOVWF  1E
....................          Cambio=ON; 
3E74:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(guardaruv==1) 
3E76:  DECFSZ 30,W
3E78:  BRA    3F3C
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
3E7A:  MOVLW  07
3E7C:  MOVWF  FA9
3E7E:  MOVFF  21,FA8
3E82:  BCF    FA6.6
3E84:  BCF    FA6.7
3E86:  BSF    FA6.2
3E88:  MOVF   FF2,W
3E8A:  MOVWF  00
3E8C:  BCF    FF2.7
3E8E:  MOVLB  F
3E90:  MOVLW  55
3E92:  MOVWF  FA7
3E94:  MOVLW  AA
3E96:  MOVWF  FA7
3E98:  BSF    FA6.1
3E9A:  BTFSC  FA6.1
3E9C:  BRA    3E9A
3E9E:  BCF    FA6.2
3EA0:  MOVF   00,W
3EA2:  IORWF  FF2,F
3EA4:  MOVLW  08
3EA6:  MOVWF  FA9
3EA8:  MOVFF  22,FA8
3EAC:  BCF    FA6.6
3EAE:  BCF    FA6.7
3EB0:  BSF    FA6.2
3EB2:  MOVF   FF2,W
3EB4:  MOVWF  00
3EB6:  BCF    FF2.7
3EB8:  MOVLW  55
3EBA:  MOVWF  FA7
3EBC:  MOVLW  AA
3EBE:  MOVWF  FA7
3EC0:  BSF    FA6.1
3EC2:  BTFSC  FA6.1
3EC4:  BRA    3EC2
3EC6:  BCF    FA6.2
3EC8:  MOVF   00,W
3ECA:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
3ECC:  MOVFF  40,23
....................       horasH=make8(horas,1); 
3ED0:  MOVFF  41,24
....................       write_eeprom(9,horasL); 
3ED4:  MOVLW  09
3ED6:  MOVWF  FA9
3ED8:  MOVFF  23,FA8
3EDC:  BCF    FA6.6
3EDE:  BCF    FA6.7
3EE0:  BSF    FA6.2
3EE2:  MOVFF  FF2,00
3EE6:  BCF    FF2.7
3EE8:  MOVLW  55
3EEA:  MOVWF  FA7
3EEC:  MOVLW  AA
3EEE:  MOVWF  FA7
3EF0:  BSF    FA6.1
3EF2:  BTFSC  FA6.1
3EF4:  BRA    3EF2
3EF6:  BCF    FA6.2
3EF8:  MOVF   00,W
3EFA:  IORWF  FF2,F
....................       delay_ms(20); 
3EFC:  MOVLW  14
3EFE:  MOVLB  0
3F00:  MOVWF  xD1
3F02:  CALL   07F8
....................       write_eeprom(10,horasH); 
3F06:  MOVLW  0A
3F08:  MOVWF  FA9
3F0A:  MOVFF  24,FA8
3F0E:  BCF    FA6.6
3F10:  BCF    FA6.7
3F12:  BSF    FA6.2
3F14:  MOVF   FF2,W
3F16:  MOVWF  00
3F18:  BCF    FF2.7
3F1A:  MOVLB  F
3F1C:  MOVLW  55
3F1E:  MOVWF  FA7
3F20:  MOVLW  AA
3F22:  MOVWF  FA7
3F24:  BSF    FA6.1
3F26:  BTFSC  FA6.1
3F28:  BRA    3F26
3F2A:  BCF    FA6.2
3F2C:  MOVF   00,W
3F2E:  IORWF  FF2,F
....................       delay_ms(20); 
3F30:  MOVLW  14
3F32:  MOVLB  0
3F34:  MOVWF  xD1
3F36:  CALL   07F8
....................       guardaruv=0; 
3F3A:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
3F3C:  MOVF   21,W
3F3E:  SUBLW  3B
3F40:  BC    3F46
....................    { 
....................       segundos=0;minutos++; 
3F42:  CLRF   21
3F44:  INCF   22,F
....................    } 
....................    if(minutos==60) 
3F46:  MOVF   22,W
3F48:  SUBLW  3C
3F4A:  BNZ   3F54
....................    { 
....................       minutos=0;horas++; 
3F4C:  CLRF   22
3F4E:  INCF   40,F
3F50:  BTFSC  FD8.2
3F52:  INCF   41,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
3F54:  MOVF   2F,W
3F56:  SUBLW  3B
3F58:  BC    3F6E
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
3F5A:  CALL   0888
3F5E:  MOVLW  C8
3F60:  MOVWF  xD1
3F62:  CALL   07F8
3F66:  CALL   0888
....................       tiemporeset=0; 
3F6A:  CLRF   2F
....................       Cambio=ON; 
3F6C:  BSF    17.5
....................    }    
....................    } 
3F6E:  GOTO   2224
.................... } 
....................  
3F72:  SLEEP 

Configuration Fuses:
   Word  1: C238   XTPLL IESO FCMEN PLL1 CPUDIV4 USBDIV
   Word  2: 1E3F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
