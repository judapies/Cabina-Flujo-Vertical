CCS PCH C Compiler, Version 4.104, 5967               09-ene.-20 11:02

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Vertical\2019\CFLV 60 Biotech #004588076 OP2019207\Firmware Prueba\CabinaCFLH.lst

               ROM used: 16178 bytes (49%)
                         Largest free fragment is 16588
               RAM used: 190 (9%) at main() level
                         228 (11%) worst case
               Stack:    8 worst case (6 in main + 2 for interrupts)

*
0000:  GOTO   2046
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  FF2.4
004A:  GOTO   0054
004E:  BTFSC  FF2.1
0050:  GOTO   01B2
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#use delay(clock=48000000) 
.................... //#use delay(clock=20000000) 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOPUT 
.................... #use delay(clock=16000000) 
*
0198:  MOVLW  04
019A:  SUBWF  xE3,F
019C:  BNC   01B0
019E:  CLRF   FEA
01A0:  MOVLW  E3
01A2:  MOVWF  FE9
01A4:  MOVF   FEF,W
01A6:  BZ    01B0
01A8:  BRA    01AC
01AA:  NOP   
01AC:  DECFSZ FEF,F
01AE:  BRA    01AA
01B0:  RETLW  00
*
07F8:  CLRF   FEA
07FA:  MOVLW  D1
07FC:  MOVWF  FE9
07FE:  MOVF   FEF,W
0800:  BZ    081E
0802:  MOVLW  05
0804:  MOVWF  01
0806:  CLRF   00
0808:  DECFSZ 00,F
080A:  BRA    0808
080C:  DECFSZ 01,F
080E:  BRA    0806
0810:  MOVLW  2E
0812:  MOVWF  00
0814:  DECFSZ 00,F
0816:  BRA    0814
0818:  BRA    081A
081A:  DECFSZ FEF,F
081C:  BRA    0802
081E:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1CF6:  BCF    xCD.0
....................    y = x; 
1CF8:  MOVFF  C1,C6
1CFC:  MOVFF  C0,C5
1D00:  MOVFF  BF,C4
1D04:  MOVFF  BE,C3
....................  
....................    if (x < 0) 
1D08:  MOVFF  C1,D1
1D0C:  MOVFF  C0,D0
1D10:  MOVFF  BF,CF
1D14:  MOVFF  BE,CE
1D18:  CLRF   xD5
1D1A:  CLRF   xD4
1D1C:  CLRF   xD3
1D1E:  CLRF   xD2
1D20:  CALL   0C66
1D24:  BNC   1D2E
....................    { 
....................       s = 1; 
1D26:  BSF    xCD.0
....................       y = -y; 
1D28:  MOVF   xC4,W
1D2A:  XORLW  80
1D2C:  MOVWF  xC4
....................    } 
....................  
....................    if (y <= 32768.0) 
1D2E:  MOVFF  C6,D1
1D32:  MOVFF  C5,D0
1D36:  MOVFF  C4,CF
1D3A:  MOVFF  C3,CE
1D3E:  CLRF   xD5
1D40:  CLRF   xD4
1D42:  CLRF   xD3
1D44:  MOVLW  8E
1D46:  MOVWF  xD2
1D48:  CALL   0C66
1D4C:  BC    1D50
1D4E:  BNZ   1D80
....................   res = (float32)(unsigned int16)y; 
1D50:  MOVFF  C6,D1
1D54:  MOVFF  C5,D0
1D58:  MOVFF  C4,CF
1D5C:  MOVFF  C3,CE
1D60:  RCALL  1CBE
1D62:  MOVFF  02,D3
1D66:  MOVFF  01,D2
1D6A:  CALL   0A52
1D6E:  MOVFF  03,CA
1D72:  MOVFF  02,C9
1D76:  MOVFF  01,C8
1D7A:  MOVFF  00,C7
....................  
....................  else if (y < 10000000.0) 
1D7E:  BRA    1F0A
1D80:  MOVFF  C6,D1
1D84:  MOVFF  C5,D0
1D88:  MOVFF  C4,CF
1D8C:  MOVFF  C3,CE
1D90:  MOVLW  80
1D92:  MOVWF  xD5
1D94:  MOVLW  96
1D96:  MOVWF  xD4
1D98:  MOVLW  18
1D9A:  MOVWF  xD3
1D9C:  MOVLW  96
1D9E:  MOVWF  xD2
1DA0:  CALL   0C66
1DA4:  BTFSS  FD8.0
1DA6:  BRA    1EFA
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1DA8:  MOVFF  C6,D1
1DAC:  MOVFF  C5,D0
1DB0:  MOVFF  C4,CF
1DB4:  MOVFF  C3,CE
1DB8:  CLRF   xD5
1DBA:  CLRF   xD4
1DBC:  CLRF   xD3
1DBE:  MOVLW  8E
1DC0:  MOVWF  xD2
1DC2:  CALL   1432
1DC6:  MOVFF  03,D1
1DCA:  MOVFF  02,D0
1DCE:  MOVFF  01,CF
1DD2:  MOVFF  00,CE
1DD6:  RCALL  1CBE
1DD8:  MOVFF  02,CC
1DDC:  MOVFF  01,CB
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1DE0:  MOVFF  C6,D1
1DE4:  MOVFF  C5,D0
1DE8:  MOVFF  C4,CF
1DEC:  MOVFF  C3,CE
1DF0:  CLRF   xD5
1DF2:  CLRF   xD4
1DF4:  CLRF   xD3
1DF6:  MOVLW  8E
1DF8:  MOVWF  xD2
1DFA:  CALL   1432
1DFE:  MOVFF  00,CE
1E02:  MOVFF  01,CF
1E06:  MOVFF  02,D0
1E0A:  MOVFF  03,D1
1E0E:  MOVFF  CC,D3
1E12:  MOVFF  CB,D2
1E16:  CALL   0A52
1E1A:  BSF    FD8.1
1E1C:  MOVFF  D1,D5
1E20:  MOVFF  D0,D4
1E24:  MOVFF  CF,D3
1E28:  MOVFF  CE,D2
1E2C:  MOVFF  03,D9
1E30:  MOVFF  02,D8
1E34:  MOVFF  01,D7
1E38:  MOVFF  00,D6
1E3C:  CALL   158C
1E40:  CLRF   xD1
1E42:  CLRF   xD0
1E44:  CLRF   xCF
1E46:  MOVLW  8E
1E48:  MOVWF  xCE
1E4A:  MOVFF  03,D5
1E4E:  MOVFF  02,D4
1E52:  MOVFF  01,D3
1E56:  MOVFF  00,D2
1E5A:  RCALL  198C
1E5C:  MOVFF  03,C6
1E60:  MOVFF  02,C5
1E64:  MOVFF  01,C4
1E68:  MOVFF  00,C3
....................   res = 32768.0*(float32)l; 
1E6C:  MOVFF  CC,D3
1E70:  MOVFF  CB,D2
1E74:  CALL   0A52
1E78:  CLRF   xD1
1E7A:  CLRF   xD0
1E7C:  CLRF   xCF
1E7E:  MOVLW  8E
1E80:  MOVWF  xCE
1E82:  MOVFF  03,D5
1E86:  MOVFF  02,D4
1E8A:  MOVFF  01,D3
1E8E:  MOVFF  00,D2
1E92:  RCALL  198C
1E94:  MOVFF  03,CA
1E98:  MOVFF  02,C9
1E9C:  MOVFF  01,C8
1EA0:  MOVFF  00,C7
....................   res += (float32)(unsigned int16)y; 
1EA4:  MOVFF  C6,D1
1EA8:  MOVFF  C5,D0
1EAC:  MOVFF  C4,CF
1EB0:  MOVFF  C3,CE
1EB4:  RCALL  1CBE
1EB6:  MOVFF  02,D3
1EBA:  MOVFF  01,D2
1EBE:  CALL   0A52
1EC2:  BCF    FD8.1
1EC4:  MOVFF  CA,D5
1EC8:  MOVFF  C9,D4
1ECC:  MOVFF  C8,D3
1ED0:  MOVFF  C7,D2
1ED4:  MOVFF  03,D9
1ED8:  MOVFF  02,D8
1EDC:  MOVFF  01,D7
1EE0:  MOVFF  00,D6
1EE4:  CALL   158C
1EE8:  MOVFF  03,CA
1EEC:  MOVFF  02,C9
1EF0:  MOVFF  01,C8
1EF4:  MOVFF  00,C7
....................  } 
....................  
....................  else 
1EF8:  BRA    1F0A
....................   res = y; 
1EFA:  MOVFF  C6,CA
1EFE:  MOVFF  C5,C9
1F02:  MOVFF  C4,C8
1F06:  MOVFF  C3,C7
....................  
....................  y = y - (float32)(unsigned int16)y; 
1F0A:  MOVFF  C6,D1
1F0E:  MOVFF  C5,D0
1F12:  MOVFF  C4,CF
1F16:  MOVFF  C3,CE
1F1A:  RCALL  1CBE
1F1C:  MOVFF  02,D3
1F20:  MOVFF  01,D2
1F24:  CALL   0A52
1F28:  BSF    FD8.1
1F2A:  MOVFF  C6,D5
1F2E:  MOVFF  C5,D4
1F32:  MOVFF  C4,D3
1F36:  MOVFF  C3,D2
1F3A:  MOVFF  03,D9
1F3E:  MOVFF  02,D8
1F42:  MOVFF  01,D7
1F46:  MOVFF  00,D6
1F4A:  CALL   158C
1F4E:  MOVFF  03,C6
1F52:  MOVFF  02,C5
1F56:  MOVFF  01,C4
1F5A:  MOVFF  00,C3
....................  
....................  if (s) 
1F5E:  BTFSS  xCD.0
1F60:  BRA    1F68
....................   res = -res; 
1F62:  MOVF   xC8,W
1F64:  XORLW  80
1F66:  MOVWF  xC8
....................  
....................  if (y != 0) 
1F68:  MOVFF  C6,D1
1F6C:  MOVFF  C5,D0
1F70:  MOVFF  C4,CF
1F74:  MOVFF  C3,CE
1F78:  CLRF   xD5
1F7A:  CLRF   xD4
1F7C:  CLRF   xD3
1F7E:  CLRF   xD2
1F80:  CALL   0C66
1F84:  BZ    1FF6
....................  { 
....................   if (s == 1 && n == 0) 
1F86:  BTFSS  xCD.0
1F88:  BRA    1FBE
1F8A:  MOVF   xC2,F
1F8C:  BNZ   1FBE
....................    res -= 1.0; 
1F8E:  BSF    FD8.1
1F90:  MOVFF  CA,D5
1F94:  MOVFF  C9,D4
1F98:  MOVFF  C8,D3
1F9C:  MOVFF  C7,D2
1FA0:  CLRF   xD9
1FA2:  CLRF   xD8
1FA4:  CLRF   xD7
1FA6:  MOVLW  7F
1FA8:  MOVWF  xD6
1FAA:  CALL   158C
1FAE:  MOVFF  03,CA
1FB2:  MOVFF  02,C9
1FB6:  MOVFF  01,C8
1FBA:  MOVFF  00,C7
....................  
....................   if (s == 0 && n == 1) 
1FBE:  BTFSC  xCD.0
1FC0:  BRA    1FF6
1FC2:  DECFSZ xC2,W
1FC4:  BRA    1FF6
....................    res += 1.0; 
1FC6:  BCF    FD8.1
1FC8:  MOVFF  CA,D5
1FCC:  MOVFF  C9,D4
1FD0:  MOVFF  C8,D3
1FD4:  MOVFF  C7,D2
1FD8:  CLRF   xD9
1FDA:  CLRF   xD8
1FDC:  CLRF   xD7
1FDE:  MOVLW  7F
1FE0:  MOVWF  xD6
1FE2:  CALL   158C
1FE6:  MOVFF  03,CA
1FEA:  MOVFF  02,C9
1FEE:  MOVFF  01,C8
1FF2:  MOVFF  00,C7
....................  } 
....................  if (x == 0) 
1FF6:  MOVFF  C1,D1
1FFA:  MOVFF  C0,D0
1FFE:  MOVFF  BF,CF
2002:  MOVFF  BE,CE
2006:  CLRF   xD5
2008:  CLRF   xD4
200A:  CLRF   xD3
200C:  CLRF   xD2
200E:  CALL   0C66
2012:  BNZ   201C
....................     res = 0; 
2014:  CLRF   xCA
2016:  CLRF   xC9
2018:  CLRF   xC8
201A:  CLRF   xC7
....................  
....................  return (res); 
201C:  MOVFF  C7,00
2020:  MOVFF  C8,01
2024:  MOVFF  C9,02
2028:  MOVFF  CA,03
.................... } 
202C:  GOTO   2044 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
2030:  MOVFF  BD,C1
2034:  MOVFF  BC,C0
2038:  MOVFF  BB,BF
203C:  MOVFF  BA,BE
2040:  CLRF   xC2
2042:  BRA    1CF6
.................... } 
2044:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A1) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B1,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B1,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B2,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B2,1) 
.................... #define   Motor_L1_on       output_bit(PIN_C2,1) 
.................... #define   Motor_L1_off      output_bit(PIN_C2,0) 
.................... #define   Motor_L2_on       output_bit(PIN_C1,1) 
.................... #define   Motor_L2_off      output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0820:  SWAPF  xD2,W
0822:  ANDLW  F0
0824:  MOVWF  00
0826:  MOVLW  0F
0828:  ANDWF  F83,W
082A:  IORWF  00,W
082C:  MOVWF  F83
....................       delay_cycles(30);//30 
082E:  MOVLW  09
0830:  MOVWF  00
0832:  DECFSZ 00,F
0834:  BRA    0832
0836:  BRA    0838
....................       lcd.enable = 1; 
0838:  BSF    F83.3
....................       delay_us(55);//55 
083A:  MOVLW  49
083C:  MOVWF  00
083E:  DECFSZ 00,F
0840:  BRA    083E
....................       lcd.enable = 0; 
0842:  BCF    F83.3
.................... } 
0844:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0846:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0848:  MOVLW  01
084A:  MOVWF  xD1
084C:  RCALL  07F8
....................       lcd.rs = address; 
084E:  BTFSS  xCF.0
0850:  BCF    F83.1
0852:  BTFSC  xCF.0
0854:  BSF    F83.1
....................       delay_cycles(30);//30 
0856:  MOVLW  09
0858:  MOVWF  00
085A:  DECFSZ 00,F
085C:  BRA    085A
085E:  BRA    0860
....................       lcd.rw = 0; 
0860:  BCF    F83.2
....................       delay_cycles(30);//30 
0862:  MOVLW  09
0864:  MOVWF  00
0866:  DECFSZ 00,F
0868:  BRA    0866
086A:  BRA    086C
....................       lcd.enable = 0; 
086C:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
086E:  SWAPF  xD0,W
0870:  MOVWF  xD1
0872:  MOVLW  0F
0874:  ANDWF  xD1,F
0876:  MOVFF  D1,D2
087A:  RCALL  0820
....................       lcd_send_nibble(n & 0xf); 
087C:  MOVF   xD0,W
087E:  ANDLW  0F
0880:  MOVWF  xD1
0882:  MOVWF  xD2
0884:  RCALL  0820
.................... } 
0886:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0888:  MOVLW  00
088A:  MOVWF  F95
....................     lcd.rs = 0; 
088C:  BCF    F83.1
....................     lcd.rw = 0; 
088E:  BCF    F83.2
....................     lcd.enable = 0; 
0890:  BCF    F83.3
....................     delay_ms(15); 
0892:  MOVLW  0F
0894:  MOVWF  xD1
0896:  RCALL  07F8
....................     for(i=1;i<=3;++i) { 
0898:  MOVLW  01
089A:  MOVWF  xBA
089C:  MOVF   xBA,W
089E:  SUBLW  03
08A0:  BNC   08B2
....................        lcd_send_nibble(3); 
08A2:  MOVLW  03
08A4:  MOVWF  xD2
08A6:  RCALL  0820
....................        delay_ms(5); 
08A8:  MOVLW  05
08AA:  MOVWF  xD1
08AC:  RCALL  07F8
....................     } 
08AE:  INCF   xBA,F
08B0:  BRA    089C
....................     lcd_send_nibble(2); 
08B2:  MOVLW  02
08B4:  MOVWF  xD2
08B6:  RCALL  0820
....................     for(i=0;i<=3;++i) 
08B8:  CLRF   xBA
08BA:  MOVF   xBA,W
08BC:  SUBLW  03
08BE:  BNC   08DE
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
08C0:  CLRF   03
08C2:  MOVF   xBA,W
08C4:  MOVFF  FF2,BB
08C8:  BCF    FF2.7
08CA:  CALL   0096
08CE:  BTFSC  xBB.7
08D0:  BSF    FF2.7
08D2:  MOVWF  xBB
08D4:  CLRF   xCF
08D6:  MOVWF  xD0
08D8:  RCALL  0846
08DA:  INCF   xBA,F
08DC:  BRA    08BA
.................... } 
08DE:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
090C:  MOVLW  01
090E:  SUBWF  xCD,W
0910:  ADDLW  FC
0912:  BC    0932
0914:  ADDLW  04
0916:  GOTO   0942
....................      case 1 : address=0x80;break; 
091A:  MOVLW  80
091C:  MOVWF  xCE
091E:  BRA    0932
....................      case 2 : address=0xc0;break; 
0920:  MOVLW  C0
0922:  MOVWF  xCE
0924:  BRA    0932
....................      case 3 : address=0x94;break; 
0926:  MOVLW  94
0928:  MOVWF  xCE
092A:  BRA    0932
....................      case 4 : address=0xd4;break; 
092C:  MOVLW  D4
092E:  MOVWF  xCE
0930:  BRA    0932
....................    } 
....................    address+=x-1; 
0932:  MOVLW  01
0934:  SUBWF  xCC,W
0936:  ADDWF  xCE,F
....................    lcd_send_byte(0,address); 
0938:  CLRF   xCF
093A:  MOVFF  CE,D0
093E:  RCALL  0846
.................... } 
0940:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
096E:  MOVF   xCB,W
0970:  SUBLW  F1
0972:  BNZ   0978
....................    { 
....................       c=238; 
0974:  MOVLW  EE
0976:  MOVWF  xCB
....................    } 
....................    if(c=='Ñ') 
0978:  MOVF   xCB,W
097A:  SUBLW  D1
097C:  BNZ   0982
....................    { 
....................       c=255; 
097E:  MOVLW  FF
0980:  MOVWF  xCB
....................    } 
....................     
....................    switch (c) { 
0982:  MOVF   xCB,W
0984:  XORLW  0C
0986:  BZ    0992
0988:  XORLW  06
098A:  BZ    09A6
098C:  XORLW  02
098E:  BZ    09B4
0990:  BRA    09BE
....................      case '\f'   : lcd_send_byte(0,1); 
0992:  CLRF   xCF
0994:  MOVLW  01
0996:  MOVWF  xD0
0998:  RCALL  0846
....................                    lcdline=1; 
099A:  MOVLW  01
099C:  MOVWF  xB9
....................                    delay_ms(2); 
099E:  MOVLW  02
09A0:  MOVWF  xD1
09A2:  RCALL  07F8
....................                                            break; 
09A4:  BRA    09CA
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
09A6:  INCF   xB9,F
09A8:  MOVLW  01
09AA:  MOVWF  xCC
09AC:  MOVFF  B9,CD
09B0:  RCALL  090C
09B2:  BRA    09CA
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
09B4:  CLRF   xCF
09B6:  MOVLW  10
09B8:  MOVWF  xD0
09BA:  RCALL  0846
09BC:  BRA    09CA
....................      default     : lcd_send_byte(1,c);     break; 
09BE:  MOVLW  01
09C0:  MOVWF  xCF
09C2:  MOVFF  CB,D0
09C6:  RCALL  0846
09C8:  BRA    09CA
....................    } 
.................... } 
09CA:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <Funciones.h> 
.................... void VelocidadMotor(int8 Vel){ 
....................    if(Vel==6){ 
*
104C:  MOVF   xBA,W
104E:  SUBLW  06
1050:  BNZ   105C
....................       Motor_L1_on; 
1052:  BSF    F8B.2
1054:  BCF    F94.2
....................       Motor_L2_on; 
1056:  BSF    F8B.1
1058:  BCF    F94.1
....................    }else if(Vel==5){ 
105A:  BRA    10CE
105C:  MOVF   xBA,W
105E:  SUBLW  05
1060:  BNZ   1070
....................       Porcentaje=15; 
1062:  MOVLW  0F
1064:  MOVWF  xAF
....................       retardo=2000; 
1066:  MOVLW  07
1068:  MOVWF  xAB
106A:  MOVLW  D0
106C:  MOVWF  xAA
....................    }else if(Vel==4){ 
106E:  BRA    10CE
1070:  MOVF   xBA,W
1072:  SUBLW  04
1074:  BNZ   1084
....................       Porcentaje=25; 
1076:  MOVLW  19
1078:  MOVWF  xAF
....................       retardo=3000; 
107A:  MOVLW  0B
107C:  MOVWF  xAB
107E:  MOVLW  B8
1080:  MOVWF  xAA
....................    }else if(Vel==3){ 
1082:  BRA    10CE
1084:  MOVF   xBA,W
1086:  SUBLW  03
1088:  BNZ   1098
....................       Porcentaje=35; 
108A:  MOVLW  23
108C:  MOVWF  xAF
....................       retardo=3600; 
108E:  MOVLW  0E
1090:  MOVWF  xAB
1092:  MOVLW  10
1094:  MOVWF  xAA
....................    }else if(Vel==2){ 
1096:  BRA    10CE
1098:  MOVF   xBA,W
109A:  SUBLW  02
109C:  BNZ   10AC
....................       Porcentaje=45; 
109E:  MOVLW  2D
10A0:  MOVWF  xAF
....................       retardo=4300; 
10A2:  MOVLW  10
10A4:  MOVWF  xAB
10A6:  MOVLW  CC
10A8:  MOVWF  xAA
....................    }else if(Vel==1){ 
10AA:  BRA    10CE
10AC:  DECFSZ xBA,W
10AE:  BRA    10BE
....................       Porcentaje=50; 
10B0:  MOVLW  32
10B2:  MOVWF  xAF
....................       retardo=5000; 
10B4:  MOVLW  13
10B6:  MOVWF  xAB
10B8:  MOVLW  88
10BA:  MOVWF  xAA
....................    }else if(Vel==0){ 
10BC:  BRA    10CE
10BE:  MOVF   xBA,F
10C0:  BNZ   10CE
....................       Porcentaje=100; 
10C2:  MOVLW  64
10C4:  MOVWF  xAF
....................       Motor_L1_off; 
10C6:  BCF    F8B.2
10C8:  BCF    F94.2
....................       Motor_L2_off; 
10CA:  BCF    F8B.1
10CC:  BCF    F94.1
....................    } 
.................... } 
10CE:  RETLW  00
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
11E6:  DECFSZ xBB,W
11E8:  BRA    1202
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
11EA:  MOVLW  02
11EC:  MOVWF  xCC
11EE:  MOVFF  BC,CD
11F2:  CALL   090C
11F6:  MOVLW  B4
11F8:  MOVWF  FF6
11FA:  MOVLW  00
11FC:  MOVWF  FF7
11FE:  CALL   09CC
....................    if(x==2) 
1202:  MOVF   xBB,W
1204:  SUBLW  02
1206:  BNZ   1220
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1208:  MOVLW  02
120A:  MOVWF  xCC
120C:  MOVFF  BC,CD
1210:  CALL   090C
1214:  MOVLW  C8
1216:  MOVWF  FF6
1218:  MOVLW  00
121A:  MOVWF  FF7
121C:  CALL   09CC
....................    if(x==3) 
1220:  MOVF   xBB,W
1222:  SUBLW  03
1224:  BNZ   123E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1226:  MOVLW  02
1228:  MOVWF  xCC
122A:  MOVFF  BC,CD
122E:  CALL   090C
1232:  MOVLW  DC
1234:  MOVWF  FF6
1236:  MOVLW  00
1238:  MOVWF  FF7
123A:  CALL   09CC
....................    if(x==4) 
123E:  MOVF   xBB,W
1240:  SUBLW  04
1242:  BNZ   125C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1244:  MOVLW  02
1246:  MOVWF  xCC
1248:  MOVFF  BC,CD
124C:  CALL   090C
1250:  MOVLW  F0
1252:  MOVWF  FF6
1254:  MOVLW  00
1256:  MOVWF  FF7
1258:  CALL   09CC
....................     
....................    if(x==5) 
125C:  MOVF   xBB,W
125E:  SUBLW  05
1260:  BNZ   129A
....................    {if(estadoalarma==0) 
1262:  BTFSC  17.4
1264:  BRA    127E
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1266:  MOVLW  02
1268:  MOVWF  xCC
126A:  MOVFF  BC,CD
126E:  CALL   090C
1272:  MOVLW  04
1274:  MOVWF  FF6
1276:  MOVLW  01
1278:  MOVWF  FF7
127A:  CALL   09CC
....................    if(estadoalarma==1) 
127E:  BTFSS  17.4
1280:  BRA    129A
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1282:  MOVLW  02
1284:  MOVWF  xCC
1286:  MOVFF  BC,CD
128A:  CALL   090C
128E:  MOVLW  18
1290:  MOVWF  FF6
1292:  MOVLW  01
1294:  MOVWF  FF7
1296:  CALL   09CC
....................    } 
....................     
....................    if(x==6) 
129A:  MOVF   xBB,W
129C:  SUBLW  06
129E:  BNZ   12B8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad         ");} 
12A0:  MOVLW  02
12A2:  MOVWF  xCC
12A4:  MOVFF  BC,CD
12A8:  CALL   090C
12AC:  MOVLW  2C
12AE:  MOVWF  FF6
12B0:  MOVLW  01
12B2:  MOVWF  FF7
12B4:  CALL   09CC
.................... } 
12B8:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
13DC:  RLCF   xBF,W
13DE:  MOVWF  00
13E0:  RLCF   00,F
13E2:  MOVLW  FC
13E4:  ANDWF  00,F
13E6:  MOVFF  00,01
13EA:  MOVF   FC2,W
13EC:  ANDLW  C3
13EE:  IORWF  00,W
13F0:  MOVWF  FC2
13F2:  MOVLW  0A
13F4:  MOVWF  xD1
13F6:  CALL   07F8
13FA:  BSF    FC2.1
13FC:  BTFSC  FC2.1
13FE:  BRA    13FC
1400:  MOVFF  FC4,03
1404:  MOVFF  FC3,D2
1408:  MOVFF  FC4,D3
140C:  CALL   0A52
1410:  MOVFF  03,C3
1414:  MOVFF  02,C2
1418:  MOVFF  01,C1
141C:  MOVFF  00,C0
1420:  MOVFF  C0,00
1424:  MOVFF  C1,01
1428:  MOVFF  C2,02
142C:  MOVFF  C3,03
.................... } 
1430:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
17F6:  CLRF   xBE
17F8:  CLRF   xBD
17FA:  CLRF   xBC
17FC:  CLRF   xBB
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
17FE:  CLRF   xBF
1800:  RCALL  13DC
1802:  MOVFF  03,97
1806:  MOVFF  02,96
180A:  MOVFF  01,95
180E:  MOVFF  00,94
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1812:  MOVFF  97,D1
1816:  MOVFF  96,D0
181A:  MOVFF  95,CF
181E:  MOVFF  94,CE
1822:  MOVFF  A7,D5
1826:  MOVFF  A6,D4
182A:  MOVFF  A5,D3
182E:  MOVFF  A4,D2
1832:  RCALL  1432
1834:  MOVFF  00,BF
1838:  MOVFF  01,C0
183C:  MOVFF  02,C1
1840:  MOVFF  03,C2
1844:  BSF    FD8.1
1846:  MOVFF  03,D5
184A:  MOVFF  02,D4
184E:  MOVFF  01,D3
1852:  MOVFF  00,D2
1856:  CLRF   xD9
1858:  CLRF   xD8
185A:  CLRF   xD7
185C:  MOVLW  7F
185E:  MOVWF  xD6
1860:  RCALL  158C
1862:  MOVFF  03,9B
1866:  MOVFF  02,9A
186A:  MOVFF  01,99
186E:  MOVFF  00,98
....................     
....................    if(Presion<0.0) 
1872:  MOVFF  9B,D1
1876:  MOVFF  9A,D0
187A:  MOVFF  99,CF
187E:  MOVFF  98,CE
1882:  CLRF   xD5
1884:  CLRF   xD4
1886:  CLRF   xD3
1888:  CLRF   xD2
188A:  CALL   0C66
188E:  BNC   1898
....................    { 
....................       Presion=0.0; 
1890:  CLRF   x9B
1892:  CLRF   x9A
1894:  CLRF   x99
1896:  CLRF   x98
....................    } 
....................  
....................    if(r>media-1) 
1898:  MOVLW  01
189A:  SUBWF  xBA,W
189C:  SUBWF  2B,W
189E:  BZ    18A4
18A0:  BNC   18A4
....................    {r=0;} 
18A2:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
18A4:  MOVF   2B,W
18A6:  MULLW  04
18A8:  MOVF   FF3,W
18AA:  CLRF   03
18AC:  ADDLW  44
18AE:  MOVWF  FE9
18B0:  MOVLW  00
18B2:  ADDWFC 03,W
18B4:  MOVWF  FEA
18B6:  MOVFF  98,FEF
18BA:  MOVFF  99,FEC
18BE:  MOVFF  9A,FEC
18C2:  MOVFF  9B,FEC
18C6:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
18C8:  CLRF   2C
18CA:  MOVLW  01
18CC:  SUBWF  xBA,W
18CE:  SUBWF  2C,W
18D0:  BZ    18D4
18D2:  BC    193E
....................    { 
....................       promediopresion+=PromPresion[q]; 
18D4:  MOVF   2C,W
18D6:  MULLW  04
18D8:  MOVF   FF3,W
18DA:  CLRF   03
18DC:  ADDLW  44
18DE:  MOVWF  FE9
18E0:  MOVLW  00
18E2:  ADDWFC 03,W
18E4:  MOVWF  FEA
18E6:  MOVFF  FEF,00
18EA:  MOVFF  FEC,01
18EE:  MOVFF  FEC,02
18F2:  MOVFF  FEC,03
18F6:  MOVFF  FEA,C0
18FA:  MOVFF  FE9,BF
18FE:  BCF    FD8.1
1900:  MOVFF  BE,D5
1904:  MOVFF  BD,D4
1908:  MOVFF  BC,D3
190C:  MOVFF  BB,D2
1910:  MOVFF  03,D9
1914:  MOVFF  02,D8
1918:  MOVFF  01,D7
191C:  MOVFF  00,D6
1920:  RCALL  158C
1922:  MOVFF  C0,FEA
1926:  MOVFF  BF,FE9
192A:  MOVFF  03,BE
192E:  MOVFF  02,BD
1932:  MOVFF  01,BC
1936:  MOVFF  00,BB
....................    }  
193A:  INCF   2C,F
193C:  BRA    18CA
....................    promediopresion=promediopresion/media;    
193E:  CLRF   xD3
1940:  MOVFF  BA,D2
1944:  CALL   0A52
1948:  MOVFF  BE,D1
194C:  MOVFF  BD,D0
1950:  MOVFF  BC,CF
1954:  MOVFF  BB,CE
1958:  MOVFF  03,D5
195C:  MOVFF  02,D4
1960:  MOVFF  01,D3
1964:  MOVFF  00,D2
1968:  RCALL  1432
196A:  MOVFF  03,BE
196E:  MOVFF  02,BD
1972:  MOVFF  01,BC
1976:  MOVFF  00,BB
....................     
....................    return promediopresion; 
197A:  MOVFF  BB,00
197E:  MOVFF  BC,01
1982:  MOVFF  BD,02
1986:  MOVFF  BE,03
.................... } 
198A:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
08E0:  MOVLW  C8
08E2:  MOVWF  xD1
08E4:  RCALL  07F8
....................    lcd_init(); 
08E6:  RCALL  0888
....................    set_tris_a(0XFF); 
08E8:  MOVLW  FF
08EA:  MOVWF  F92
....................    set_tris_e(0XFF); 
08EC:  MOVWF  F96
....................    enable_interrupts(INT_EXT_L2H); 
08EE:  BSF    FF2.4
08F0:  BSF    FF1.6
....................    setup_adc_ports(AN0); 
08F2:  MOVF   FC1,W
08F4:  ANDLW  C0
08F6:  IORLW  0E
08F8:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
08FA:  BCF    FC0.0
08FC:  BSF    FC0.1
08FE:  BCF    FC0.2
0900:  BSF    FC0.7
0902:  BSF    FC2.0
....................    enable_interrupts(global); 
0904:  MOVLW  C0
0906:  IORWF  FF2,F
.................... } 
0908:  GOTO   21D6 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
09EC:  MOVLW  01
09EE:  MOVWF  xCC
09F0:  MOVWF  xCD
09F2:  RCALL  090C
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
09F4:  MOVLW  40
09F6:  MOVWF  FF6
09F8:  MOVLW  01
09FA:  MOVWF  FF7
09FC:  RCALL  09CC
....................    lcd_gotoxy(1,2); 
09FE:  MOVLW  01
0A00:  MOVWF  xCC
0A02:  MOVLW  02
0A04:  MOVWF  xCD
0A06:  RCALL  090C
....................    printf(lcd_putc,"     HORIZONTAL     "); 
0A08:  MOVLW  56
0A0A:  MOVWF  FF6
0A0C:  MOVLW  01
0A0E:  MOVWF  FF7
0A10:  RCALL  09CC
....................    lcd_gotoxy(1,3); 
0A12:  MOVLW  01
0A14:  MOVWF  xCC
0A16:  MOVLW  03
0A18:  MOVWF  xCD
0A1A:  RCALL  090C
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0A1C:  MOVLW  6C
0A1E:  MOVWF  FF6
0A20:  MOVLW  01
0A22:  MOVWF  FF7
0A24:  RCALL  09CC
....................    lcd_gotoxy(1,4); 
0A26:  MOVLW  01
0A28:  MOVWF  xCC
0A2A:  MOVLW  04
0A2C:  MOVWF  xCD
0A2E:  RCALL  090C
....................    printf(lcd_putc,"     REF:JPCV24     "); 
0A30:  MOVLW  82
0A32:  MOVWF  FF6
0A34:  MOVLW  01
0A36:  MOVWF  FF7
0A38:  RCALL  09CC
....................    delay_ms(2000); 
0A3A:  MOVLW  08
0A3C:  MOVWF  xBA
0A3E:  MOVLW  FA
0A40:  MOVWF  xD1
0A42:  RCALL  07F8
0A44:  DECFSZ xBA,F
0A46:  BRA    0A3E
....................    printf(lcd_putc,"\f"); 
0A48:  MOVLW  0C
0A4A:  MOVWF  xCB
0A4C:  RCALL  096E
.................... } 
0A4E:  GOTO   21DA (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0A88:  MOVFF  FF2,BA
0A8C:  BCF    FF2.7
0A8E:  CLRF   FA9
0A90:  BCF    FA6.6
0A92:  BCF    FA6.7
0A94:  BSF    FA6.0
0A96:  MOVF   FA8,W
0A98:  BTFSC  xBA.7
0A9A:  BSF    FF2.7
0A9C:  MOVWF  39
....................    delay_ms(20);  
0A9E:  MOVLW  14
0AA0:  MOVWF  xD1
0AA2:  RCALL  07F8
....................    contrasena[1]=read_eeprom(1); 
0AA4:  MOVFF  FF2,BA
0AA8:  BCF    FF2.7
0AAA:  MOVLW  01
0AAC:  MOVWF  FA9
0AAE:  BCF    FA6.6
0AB0:  BCF    FA6.7
0AB2:  BSF    FA6.0
0AB4:  MOVF   FA8,W
0AB6:  BTFSC  xBA.7
0AB8:  BSF    FF2.7
0ABA:  MOVWF  3A
....................    delay_ms(20); 
0ABC:  MOVLW  14
0ABE:  MOVWF  xD1
0AC0:  RCALL  07F8
....................    contrasena[2]=read_eeprom(2); 
0AC2:  MOVFF  FF2,BA
0AC6:  BCF    FF2.7
0AC8:  MOVLW  02
0ACA:  MOVWF  FA9
0ACC:  BCF    FA6.6
0ACE:  BCF    FA6.7
0AD0:  BSF    FA6.0
0AD2:  MOVF   FA8,W
0AD4:  BTFSC  xBA.7
0AD6:  BSF    FF2.7
0AD8:  MOVWF  3B
....................    delay_ms(20);  
0ADA:  MOVLW  14
0ADC:  MOVWF  xD1
0ADE:  RCALL  07F8
....................    contrasena[3]=read_eeprom(3); 
0AE0:  MOVFF  FF2,BA
0AE4:  BCF    FF2.7
0AE6:  MOVLW  03
0AE8:  MOVWF  FA9
0AEA:  BCF    FA6.6
0AEC:  BCF    FA6.7
0AEE:  BSF    FA6.0
0AF0:  MOVF   FA8,W
0AF2:  BTFSC  xBA.7
0AF4:  BSF    FF2.7
0AF6:  MOVWF  3C
....................    delay_ms(20); 
0AF8:  MOVLW  14
0AFA:  MOVWF  xD1
0AFC:  RCALL  07F8
....................    estadoalarma=read_eeprom(4); 
0AFE:  MOVFF  FF2,BA
0B02:  BCF    FF2.7
0B04:  MOVLW  04
0B06:  MOVWF  FA9
0B08:  BCF    FA6.6
0B0A:  BCF    FA6.7
0B0C:  BSF    FA6.0
0B0E:  MOVF   FA8,W
0B10:  BTFSC  xBA.7
0B12:  BSF    FF2.7
0B14:  MOVWF  01
0B16:  BCF    17.4
0B18:  BTFSC  01.0
0B1A:  BSF    17.4
....................    delay_ms(20); 
0B1C:  MOVLW  14
0B1E:  MOVWF  xD1
0B20:  RCALL  07F8
....................    tempo_minutos=read_eeprom(5); 
0B22:  MOVFF  FF2,BA
0B26:  BCF    FF2.7
0B28:  MOVLW  05
0B2A:  MOVWF  FA9
0B2C:  BCF    FA6.6
0B2E:  BCF    FA6.7
0B30:  BSF    FA6.0
0B32:  MOVF   FA8,W
0B34:  BTFSC  xBA.7
0B36:  BSF    FF2.7
0B38:  MOVWF  27
....................    delay_ms(20); 
0B3A:  MOVLW  14
0B3C:  MOVWF  xD1
0B3E:  RCALL  07F8
....................    tempo_segundos=read_eeprom(6); 
0B40:  MOVFF  FF2,BA
0B44:  BCF    FF2.7
0B46:  MOVLW  06
0B48:  MOVWF  FA9
0B4A:  BCF    FA6.6
0B4C:  BCF    FA6.7
0B4E:  BSF    FA6.0
0B50:  MOVF   FA8,W
0B52:  BTFSC  xBA.7
0B54:  BSF    FF2.7
0B56:  MOVWF  28
....................    delay_ms(20); 
0B58:  MOVLW  14
0B5A:  MOVWF  xD1
0B5C:  RCALL  07F8
....................    segundos=read_eeprom(7); 
0B5E:  MOVFF  FF2,BA
0B62:  BCF    FF2.7
0B64:  MOVLW  07
0B66:  MOVWF  FA9
0B68:  BCF    FA6.6
0B6A:  BCF    FA6.7
0B6C:  BSF    FA6.0
0B6E:  MOVF   FA8,W
0B70:  BTFSC  xBA.7
0B72:  BSF    FF2.7
0B74:  MOVWF  21
....................    delay_ms(20); 
0B76:  MOVLW  14
0B78:  MOVWF  xD1
0B7A:  RCALL  07F8
....................    minutos=read_eeprom(8); 
0B7C:  MOVFF  FF2,BA
0B80:  BCF    FF2.7
0B82:  MOVLW  08
0B84:  MOVWF  FA9
0B86:  BCF    FA6.6
0B88:  BCF    FA6.7
0B8A:  BSF    FA6.0
0B8C:  MOVF   FA8,W
0B8E:  BTFSC  xBA.7
0B90:  BSF    FF2.7
0B92:  MOVWF  22
....................    delay_ms(20); 
0B94:  MOVLW  14
0B96:  MOVWF  xD1
0B98:  RCALL  07F8
....................    horasL=read_eeprom(9); 
0B9A:  MOVFF  FF2,BA
0B9E:  BCF    FF2.7
0BA0:  MOVLW  09
0BA2:  MOVWF  FA9
0BA4:  BCF    FA6.6
0BA6:  BCF    FA6.7
0BA8:  BSF    FA6.0
0BAA:  MOVF   FA8,W
0BAC:  BTFSC  xBA.7
0BAE:  BSF    FF2.7
0BB0:  MOVWF  23
....................    delay_ms(20); 
0BB2:  MOVLW  14
0BB4:  MOVWF  xD1
0BB6:  RCALL  07F8
....................    horasH=read_eeprom(10); 
0BB8:  MOVFF  FF2,BA
0BBC:  BCF    FF2.7
0BBE:  MOVLW  0A
0BC0:  MOVWF  FA9
0BC2:  BCF    FA6.6
0BC4:  BCF    FA6.7
0BC6:  BSF    FA6.0
0BC8:  MOVF   FA8,W
0BCA:  BTFSC  xBA.7
0BCC:  BSF    FF2.7
0BCE:  MOVWF  24
....................    delay_ms(20); 
0BD0:  MOVLW  14
0BD2:  MOVWF  xD1
0BD4:  RCALL  07F8
....................    G_l=read_eeprom(11); 
0BD6:  MOVFF  FF2,BA
0BDA:  BCF    FF2.7
0BDC:  MOVLW  0B
0BDE:  MOVWF  FA9
0BE0:  BCF    FA6.6
0BE2:  BCF    FA6.7
0BE4:  BSF    FA6.0
0BE6:  MOVF   FA8,W
0BE8:  BTFSC  xBA.7
0BEA:  BSF    FF2.7
0BEC:  MOVWF  25
....................    delay_ms(20); 
0BEE:  MOVLW  14
0BF0:  MOVWF  xD1
0BF2:  RCALL  07F8
....................    G_h=read_eeprom(12); 
0BF4:  MOVFF  FF2,BA
0BF8:  BCF    FF2.7
0BFA:  MOVLW  0C
0BFC:  MOVWF  FA9
0BFE:  BCF    FA6.6
0C00:  BCF    FA6.7
0C02:  BSF    FA6.0
0C04:  MOVF   FA8,W
0C06:  BTFSC  xBA.7
0C08:  BSF    FF2.7
0C0A:  MOVWF  26
....................    delay_ms(20); 
0C0C:  MOVLW  14
0C0E:  MOVWF  xD1
0C10:  RCALL  07F8
....................    VelMotor=read_eeprom(13); 
0C12:  MOVFF  FF2,BA
0C16:  BCF    FF2.7
0C18:  MOVLW  0D
0C1A:  MOVWF  FA9
0C1C:  BCF    FA6.6
0C1E:  BCF    FA6.7
0C20:  BSF    FA6.0
0C22:  MOVF   FA8,W
0C24:  BTFSC  xBA.7
0C26:  BSF    FF2.7
0C28:  MOVWF  xB0
....................    delay_ms(20); 
0C2A:  MOVLW  14
0C2C:  MOVWF  xD1
0C2E:  RCALL  07F8
....................    G16=make16(G_h,G_l); 
0C30:  MOVFF  26,43
0C34:  MOVFF  25,42
....................    G=G16; 
0C38:  MOVFF  43,D3
0C3C:  MOVFF  42,D2
0C40:  RCALL  0A52
0C42:  MOVFF  03,A7
0C46:  MOVFF  02,A6
0C4A:  MOVFF  01,A5
0C4E:  MOVFF  00,A4
....................    horas=make16(horasH,horasL); 
0C52:  MOVFF  24,41
0C56:  MOVFF  23,40
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0C5A:  MOVFF  27,29
0C5E:  MOVFF  28,2A
.................... } 
0C62:  GOTO   21DE (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0CDC:  BTFSC  39.7
0CDE:  BRA    0CE6
0CE0:  MOVF   39,W
0CE2:  SUBLW  09
0CE4:  BNC   0CEC
0CE6:  BTFSC  39.7
0CE8:  BRA    0CEC
0CEA:  BRA    0D1C
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0CEC:  CLRF   39
0CEE:  CLRF   FA9
0CF0:  CLRF   FA8
0CF2:  BCF    FA6.6
0CF4:  BCF    FA6.7
0CF6:  BSF    FA6.2
0CF8:  MOVF   FF2,W
0CFA:  MOVWF  00
0CFC:  BCF    FF2.7
0CFE:  MOVLB  F
0D00:  MOVLW  55
0D02:  MOVWF  FA7
0D04:  MOVLW  AA
0D06:  MOVWF  FA7
0D08:  BSF    FA6.1
0D0A:  BTFSC  FA6.1
0D0C:  BRA    0D0A
0D0E:  BCF    FA6.2
0D10:  MOVF   00,W
0D12:  IORWF  FF2,F
0D14:  MOVLW  14
0D16:  MOVLB  0
0D18:  MOVWF  xD1
0D1A:  RCALL  07F8
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0D1C:  BTFSC  3A.7
0D1E:  BRA    0D26
0D20:  MOVF   3A,W
0D22:  SUBLW  09
0D24:  BNC   0D2C
0D26:  BTFSC  3A.7
0D28:  BRA    0D2C
0D2A:  BRA    0D5E
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0D2C:  CLRF   3A
0D2E:  MOVLW  01
0D30:  MOVWF  FA9
0D32:  CLRF   FA8
0D34:  BCF    FA6.6
0D36:  BCF    FA6.7
0D38:  BSF    FA6.2
0D3A:  MOVF   FF2,W
0D3C:  MOVWF  00
0D3E:  BCF    FF2.7
0D40:  MOVLB  F
0D42:  MOVLW  55
0D44:  MOVWF  FA7
0D46:  MOVLW  AA
0D48:  MOVWF  FA7
0D4A:  BSF    FA6.1
0D4C:  BTFSC  FA6.1
0D4E:  BRA    0D4C
0D50:  BCF    FA6.2
0D52:  MOVF   00,W
0D54:  IORWF  FF2,F
0D56:  MOVLW  14
0D58:  MOVLB  0
0D5A:  MOVWF  xD1
0D5C:  RCALL  07F8
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0D5E:  BTFSC  3B.7
0D60:  BRA    0D68
0D62:  MOVF   3B,W
0D64:  SUBLW  09
0D66:  BNC   0D6E
0D68:  BTFSC  3B.7
0D6A:  BRA    0D6E
0D6C:  BRA    0DA0
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0D6E:  CLRF   3B
0D70:  MOVLW  02
0D72:  MOVWF  FA9
0D74:  CLRF   FA8
0D76:  BCF    FA6.6
0D78:  BCF    FA6.7
0D7A:  BSF    FA6.2
0D7C:  MOVF   FF2,W
0D7E:  MOVWF  00
0D80:  BCF    FF2.7
0D82:  MOVLB  F
0D84:  MOVLW  55
0D86:  MOVWF  FA7
0D88:  MOVLW  AA
0D8A:  MOVWF  FA7
0D8C:  BSF    FA6.1
0D8E:  BTFSC  FA6.1
0D90:  BRA    0D8E
0D92:  BCF    FA6.2
0D94:  MOVF   00,W
0D96:  IORWF  FF2,F
0D98:  MOVLW  14
0D9A:  MOVLB  0
0D9C:  MOVWF  xD1
0D9E:  RCALL  07F8
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
0DA0:  BTFSC  3C.7
0DA2:  BRA    0DAA
0DA4:  MOVF   3C,W
0DA6:  SUBLW  09
0DA8:  BNC   0DB0
0DAA:  BTFSC  3C.7
0DAC:  BRA    0DB0
0DAE:  BRA    0DE2
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
0DB0:  CLRF   3C
0DB2:  MOVLW  03
0DB4:  MOVWF  FA9
0DB6:  CLRF   FA8
0DB8:  BCF    FA6.6
0DBA:  BCF    FA6.7
0DBC:  BSF    FA6.2
0DBE:  MOVF   FF2,W
0DC0:  MOVWF  00
0DC2:  BCF    FF2.7
0DC4:  MOVLB  F
0DC6:  MOVLW  55
0DC8:  MOVWF  FA7
0DCA:  MOVLW  AA
0DCC:  MOVWF  FA7
0DCE:  BSF    FA6.1
0DD0:  BTFSC  FA6.1
0DD2:  BRA    0DD0
0DD4:  BCF    FA6.2
0DD6:  MOVF   00,W
0DD8:  IORWF  FF2,F
0DDA:  MOVLW  14
0DDC:  MOVLB  0
0DDE:  MOVWF  xD1
0DE0:  RCALL  07F8
....................    } 
....................    if(estadoalarma>1){ 
0DE2:  MOVLW  00
0DE4:  BTFSC  17.4
0DE6:  MOVLW  01
0DE8:  SUBLW  01
0DEA:  BC    0E20
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
0DEC:  BSF    17.4
0DEE:  MOVLW  04
0DF0:  MOVWF  FA9
0DF2:  MOVLW  01
0DF4:  MOVWF  FA8
0DF6:  BCF    FA6.6
0DF8:  BCF    FA6.7
0DFA:  BSF    FA6.2
0DFC:  MOVF   FF2,W
0DFE:  MOVWF  00
0E00:  BCF    FF2.7
0E02:  MOVLB  F
0E04:  MOVLW  55
0E06:  MOVWF  FA7
0E08:  MOVLW  AA
0E0A:  MOVWF  FA7
0E0C:  BSF    FA6.1
0E0E:  BTFSC  FA6.1
0E10:  BRA    0E0E
0E12:  BCF    FA6.2
0E14:  MOVF   00,W
0E16:  IORWF  FF2,F
0E18:  MOVLW  14
0E1A:  MOVLB  0
0E1C:  MOVWF  xD1
0E1E:  RCALL  07F8
....................    } 
....................    if(tempo_minutos>200){ 
0E20:  MOVF   27,W
0E22:  SUBLW  C8
0E24:  BC    0E5C
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
0E26:  MOVLW  14
0E28:  MOVWF  27
0E2A:  MOVLW  05
0E2C:  MOVWF  FA9
0E2E:  MOVLW  14
0E30:  MOVWF  FA8
0E32:  BCF    FA6.6
0E34:  BCF    FA6.7
0E36:  BSF    FA6.2
0E38:  MOVF   FF2,W
0E3A:  MOVWF  00
0E3C:  BCF    FF2.7
0E3E:  MOVLB  F
0E40:  MOVLW  55
0E42:  MOVWF  FA7
0E44:  MOVLW  AA
0E46:  MOVWF  FA7
0E48:  BSF    FA6.1
0E4A:  BTFSC  FA6.1
0E4C:  BRA    0E4A
0E4E:  BCF    FA6.2
0E50:  MOVF   00,W
0E52:  IORWF  FF2,F
0E54:  MOVLW  14
0E56:  MOVLB  0
0E58:  MOVWF  xD1
0E5A:  RCALL  07F8
....................    } 
....................    if(tempo_segundos>59){ 
0E5C:  MOVF   28,W
0E5E:  SUBLW  3B
0E60:  BC    0E94
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
0E62:  CLRF   28
0E64:  MOVLW  06
0E66:  MOVWF  FA9
0E68:  CLRF   FA8
0E6A:  BCF    FA6.6
0E6C:  BCF    FA6.7
0E6E:  BSF    FA6.2
0E70:  MOVF   FF2,W
0E72:  MOVWF  00
0E74:  BCF    FF2.7
0E76:  MOVLB  F
0E78:  MOVLW  55
0E7A:  MOVWF  FA7
0E7C:  MOVLW  AA
0E7E:  MOVWF  FA7
0E80:  BSF    FA6.1
0E82:  BTFSC  FA6.1
0E84:  BRA    0E82
0E86:  BCF    FA6.2
0E88:  MOVF   00,W
0E8A:  IORWF  FF2,F
0E8C:  MOVLW  14
0E8E:  MOVLB  0
0E90:  MOVWF  xD1
0E92:  RCALL  07F8
....................    } 
....................    if(segundos>60){ 
0E94:  MOVF   21,W
0E96:  SUBLW  3C
0E98:  BC    0ECC
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
0E9A:  CLRF   21
0E9C:  MOVLW  07
0E9E:  MOVWF  FA9
0EA0:  CLRF   FA8
0EA2:  BCF    FA6.6
0EA4:  BCF    FA6.7
0EA6:  BSF    FA6.2
0EA8:  MOVF   FF2,W
0EAA:  MOVWF  00
0EAC:  BCF    FF2.7
0EAE:  MOVLB  F
0EB0:  MOVLW  55
0EB2:  MOVWF  FA7
0EB4:  MOVLW  AA
0EB6:  MOVWF  FA7
0EB8:  BSF    FA6.1
0EBA:  BTFSC  FA6.1
0EBC:  BRA    0EBA
0EBE:  BCF    FA6.2
0EC0:  MOVF   00,W
0EC2:  IORWF  FF2,F
0EC4:  MOVLW  14
0EC6:  MOVLB  0
0EC8:  MOVWF  xD1
0ECA:  RCALL  07F8
....................    } 
....................    if(minutos>60){ 
0ECC:  MOVF   22,W
0ECE:  SUBLW  3C
0ED0:  BC    0F04
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
0ED2:  CLRF   22
0ED4:  MOVLW  08
0ED6:  MOVWF  FA9
0ED8:  CLRF   FA8
0EDA:  BCF    FA6.6
0EDC:  BCF    FA6.7
0EDE:  BSF    FA6.2
0EE0:  MOVF   FF2,W
0EE2:  MOVWF  00
0EE4:  BCF    FF2.7
0EE6:  MOVLB  F
0EE8:  MOVLW  55
0EEA:  MOVWF  FA7
0EEC:  MOVLW  AA
0EEE:  MOVWF  FA7
0EF0:  BSF    FA6.1
0EF2:  BTFSC  FA6.1
0EF4:  BRA    0EF2
0EF6:  BCF    FA6.2
0EF8:  MOVF   00,W
0EFA:  IORWF  FF2,F
0EFC:  MOVLW  14
0EFE:  MOVLB  0
0F00:  MOVWF  xD1
0F02:  RCALL  07F8
....................    } 
....................    if(horas>10000){ 
0F04:  MOVF   41,W
0F06:  SUBLW  26
0F08:  BC    0F7A
0F0A:  XORLW  FF
0F0C:  BNZ   0F14
0F0E:  MOVF   40,W
0F10:  SUBLW  10
0F12:  BC    0F7A
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
0F14:  CLRF   41
0F16:  CLRF   40
0F18:  MOVLW  09
0F1A:  MOVWF  FA9
0F1C:  MOVLW  0A
0F1E:  MOVWF  FA8
0F20:  BCF    FA6.6
0F22:  BCF    FA6.7
0F24:  BSF    FA6.2
0F26:  MOVF   FF2,W
0F28:  MOVWF  00
0F2A:  BCF    FF2.7
0F2C:  MOVLB  F
0F2E:  MOVLW  55
0F30:  MOVWF  FA7
0F32:  MOVLW  AA
0F34:  MOVWF  FA7
0F36:  BSF    FA6.1
0F38:  BTFSC  FA6.1
0F3A:  BRA    0F38
0F3C:  BCF    FA6.2
0F3E:  MOVF   00,W
0F40:  IORWF  FF2,F
0F42:  MOVLW  14
0F44:  MOVLB  0
0F46:  MOVWF  xD1
0F48:  RCALL  07F8
0F4A:  MOVLW  0A
0F4C:  MOVWF  FA9
0F4E:  CLRF   FA8
0F50:  BCF    FA6.6
0F52:  BCF    FA6.7
0F54:  BSF    FA6.2
0F56:  MOVF   FF2,W
0F58:  MOVWF  00
0F5A:  BCF    FF2.7
0F5C:  MOVLB  F
0F5E:  MOVLW  55
0F60:  MOVWF  FA7
0F62:  MOVLW  AA
0F64:  MOVWF  FA7
0F66:  BSF    FA6.1
0F68:  BTFSC  FA6.1
0F6A:  BRA    0F68
0F6C:  BCF    FA6.2
0F6E:  MOVF   00,W
0F70:  IORWF  FF2,F
0F72:  MOVLW  14
0F74:  MOVLB  0
0F76:  MOVWF  xD1
0F78:  RCALL  07F8
....................    } 
....................    if(G>260){ 
0F7A:  CLRF   xD1
0F7C:  CLRF   xD0
0F7E:  MOVLW  02
0F80:  MOVWF  xCF
0F82:  MOVLW  87
0F84:  MOVWF  xCE
0F86:  MOVFF  A7,D5
0F8A:  MOVFF  A6,D4
0F8E:  MOVFF  A5,D3
0F92:  MOVFF  A4,D2
0F96:  RCALL  0C66
0F98:  BNC   100A
....................       G=260;write_eeprom(11,260);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
0F9A:  CLRF   xA7
0F9C:  CLRF   xA6
0F9E:  MOVLW  02
0FA0:  MOVWF  xA5
0FA2:  MOVLW  87
0FA4:  MOVWF  xA4
0FA6:  MOVLW  0B
0FA8:  MOVWF  FA9
0FAA:  MOVLW  04
0FAC:  MOVWF  FA8
0FAE:  BCF    FA6.6
0FB0:  BCF    FA6.7
0FB2:  BSF    FA6.2
0FB4:  MOVF   FF2,W
0FB6:  MOVWF  00
0FB8:  BCF    FF2.7
0FBA:  MOVLB  F
0FBC:  MOVLW  55
0FBE:  MOVWF  FA7
0FC0:  MOVLW  AA
0FC2:  MOVWF  FA7
0FC4:  BSF    FA6.1
0FC6:  BTFSC  FA6.1
0FC8:  BRA    0FC6
0FCA:  BCF    FA6.2
0FCC:  MOVF   00,W
0FCE:  IORWF  FF2,F
0FD0:  MOVLW  14
0FD2:  MOVLB  0
0FD4:  MOVWF  xD1
0FD6:  RCALL  07F8
0FD8:  MOVLW  0C
0FDA:  MOVWF  FA9
0FDC:  CLRF   FA8
0FDE:  BCF    FA6.6
0FE0:  BCF    FA6.7
0FE2:  BSF    FA6.2
0FE4:  MOVF   FF2,W
0FE6:  MOVWF  00
0FE8:  BCF    FF2.7
0FEA:  MOVLB  F
0FEC:  MOVLW  55
0FEE:  MOVWF  FA7
0FF0:  MOVLW  AA
0FF2:  MOVWF  FA7
0FF4:  BSF    FA6.1
0FF6:  BTFSC  FA6.1
0FF8:  BRA    0FF6
0FFA:  BCF    FA6.2
0FFC:  MOVF   00,W
0FFE:  IORWF  FF2,F
1000:  MOVLW  14
1002:  MOVLB  0
1004:  MOVWF  xD1
1006:  CALL   07F8
....................    } 
....................    if(VelMotor>6){ 
100A:  MOVF   xB0,W
100C:  SUBLW  06
100E:  BC    1048
....................       VelMotor=4;write_eeprom(13,4);delay_ms(20); 
1010:  MOVLW  04
1012:  MOVWF  xB0
1014:  MOVLW  0D
1016:  MOVWF  FA9
1018:  MOVLW  04
101A:  MOVWF  FA8
101C:  BCF    FA6.6
101E:  BCF    FA6.7
1020:  BSF    FA6.2
1022:  MOVF   FF2,W
1024:  MOVWF  00
1026:  BCF    FF2.7
1028:  MOVLB  F
102A:  MOVLW  55
102C:  MOVWF  FA7
102E:  MOVLW  AA
1030:  MOVWF  FA7
1032:  BSF    FA6.1
1034:  BTFSC  FA6.1
1036:  BRA    1034
1038:  BCF    FA6.2
103A:  MOVF   00,W
103C:  IORWF  FF2,F
103E:  MOVLW  14
1040:  MOVLB  0
1042:  MOVWF  xD1
1044:  CALL   07F8
....................    } 
.................... } 
1048:  GOTO   21E2 (RETURN)
....................  
....................  
.................... #int_EXT            // Interrupción de encoder para control. 
.................... void ext0() {       // 6 pulsos por vuelta. 
....................    pulsos++; 
*
01B2:  INCF   xA8,F
01B4:  BTFSC  FD8.2
01B6:  INCF   xA9,F
....................    if(pulsos>=120){ 
01B8:  MOVF   xA9,F
01BA:  BNZ   01C2
01BC:  MOVF   xA8,W
01BE:  SUBLW  77
01C0:  BC    0214
....................       pulsos=0; 
01C2:  CLRF   xA9
01C4:  CLRF   xA8
....................       //output_toggle(PIN_C0); 
....................       tiempos=0;tiemporeset++;Lectura=1; 
01C6:  CLRF   3F
01C8:  CLRF   3E
01CA:  INCF   2F,F
01CC:  BSF    17.0
....................     
....................       if(ActivaBuzzer==1){ 
01CE:  DECFSZ 3D,W
01D0:  BRA    01E6
....................          if(estadobuzzer==0){ 
01D2:  BTFSC  17.3
01D4:  BRA    01DC
....................             Buzzer_off; 
01D6:  BCF    F8B.0
01D8:  BCF    F94.0
....................          }else{ 
01DA:  BRA    01E4
....................             if(estadoalarma==1) 
01DC:  BTFSS  17.4
01DE:  BRA    01E4
....................                Buzzer_on; 
01E0:  BSF    F8B.0
01E2:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
01E4:  BTG    17.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
01E6:  BTFSS  16.0
01E8:  BRA    0214
....................          segundos++; 
01EA:  INCF   21,F
....................          if(tiempo_cumplido==0){ 
01EC:  BTFSC  16.7
01EE:  BRA    0214
....................             if(tempo_segundos>0){ 
01F0:  MOVF   28,F
01F2:  BZ    01F8
....................                tempo_segundos--; 
01F4:  DECF   28,F
....................             }else{ 
01F6:  BRA    0214
....................                if(tempo_minutos>0){ 
01F8:  MOVF   27,F
01FA:  BZ    0204
....................                   tempo_minutos--; 
01FC:  DECF   27,F
....................                   tempo_segundos=59; 
01FE:  MOVLW  3B
0200:  MOVWF  28
....................                }else{ 
0202:  BRA    0214
....................                   tiempo_cumplido=1; 
0204:  BSF    16.7
....................                   estadouv=0;Luz_UV_off; 
0206:  BCF    16.0
0208:  BSF    F8A.1
020A:  BCF    F93.1
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
020C:  MOVFF  29,27
0210:  MOVFF  2A,28
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
....................    tiempocruce=0; 
0214:  CLRF   xAE
0216:  CLRF   xAD
....................    Cruce=ON; 
0218:  BSF    17.7
....................    if(VelMotor<6){ 
021A:  MOVF   xB0,W
021C:  SUBLW  05
021E:  BNC   025C
....................       if(VelMotor>0 && Porcentaje<100){ 
0220:  MOVF   xB0,F
0222:  BZ    0254
0224:  MOVF   xAF,W
0226:  SUBLW  63
0228:  BNC   0254
....................          delay_us(retardo);       
022A:  MOVFF  AB,E2
022E:  INCF   xE2,F
0230:  DECF   xE2,F
0232:  BTFSC  FD8.2
0234:  BRA    023E
0236:  MOVLW  FF
0238:  MOVWF  xE3
023A:  RCALL  0198
023C:  BRA    0230
023E:  MOVFF  AA,E3
0242:  RCALL  0198
....................          Motor_L1_on; 
0244:  BSF    F8B.2
0246:  BCF    F94.2
....................          Motor_L2_on; 
0248:  BSF    F8B.1
024A:  BCF    F94.1
....................          delay_us(100);       
024C:  MOVLW  85
024E:  MOVWF  00
0250:  DECFSZ 00,F
0252:  BRA    0250
....................       } 
....................       Motor_L1_off; 
0254:  BCF    F8B.2
0256:  BCF    F94.2
....................       Motor_L2_off; 
0258:  BCF    F8B.1
025A:  BCF    F94.1
....................    } 
.................... } 
....................  
025C:  BCF    FF2.1
025E:  GOTO   0054
.................... void main () 
.................... { 
*
2046:  CLRF   FF8
2048:  BCF    FD0.7
204A:  BSF    07.7
204C:  CLRF   FEA
204E:  CLRF   FE9
2050:  BCF    16.0
2052:  BCF    16.1
2054:  BCF    16.2
2056:  BCF    16.3
2058:  BCF    16.4
205A:  BCF    16.5
205C:  BCF    16.6
205E:  BCF    16.7
2060:  BCF    17.0
2062:  BCF    17.1
2064:  BCF    17.2
2066:  BCF    17.3
2068:  BCF    17.4
206A:  CLRF   18
206C:  MOVLW  07
206E:  MOVWF  19
2070:  MOVLW  02
2072:  MOVWF  1A
2074:  MOVLW  0B
2076:  MOVWF  1B
2078:  MOVLW  02
207A:  MOVWF  1C
207C:  MOVLW  03
207E:  MOVWF  1D
2080:  MOVLW  02
2082:  MOVWF  1E
2084:  MOVWF  1F
2086:  MOVLW  04
2088:  MOVWF  20
208A:  CLRF   21
208C:  CLRF   22
208E:  CLRF   23
2090:  CLRF   24
2092:  CLRF   25
2094:  CLRF   26
2096:  CLRF   27
2098:  CLRF   28
209A:  CLRF   29
209C:  CLRF   2A
209E:  CLRF   2B
20A0:  CLRF   2C
20A2:  CLRF   2D
20A4:  MOVLW  01
20A6:  MOVWF  2E
20A8:  CLRF   2F
20AA:  CLRF   30
20AC:  CLRF   31
20AE:  CLRF   3D
20B0:  CLRF   41
20B2:  CLRF   40
20B4:  CLRF   43
20B6:  CLRF   42
20B8:  CLRF   x97
20BA:  CLRF   x96
20BC:  CLRF   x95
20BE:  CLRF   x94
20C0:  CLRF   x9B
20C2:  CLRF   x9A
20C4:  CLRF   x99
20C6:  CLRF   x98
20C8:  CLRF   x9F
20CA:  CLRF   x9E
20CC:  CLRF   x9D
20CE:  CLRF   x9C
20D0:  CLRF   xA3
20D2:  CLRF   xA2
20D4:  CLRF   xA1
20D6:  CLRF   xA0
20D8:  CLRF   xA7
20DA:  CLRF   xA6
20DC:  CLRF   xA5
20DE:  MOVLW  80
20E0:  MOVWF  xA4
20E2:  BSF    17.5
20E4:  BCF    17.6
20E6:  CLRF   xA9
20E8:  CLRF   xA8
20EA:  CLRF   xAB
20EC:  CLRF   xAA
20EE:  BCF    17.7
20F0:  BCF    xAC.0
20F2:  CLRF   xAE
20F4:  CLRF   xAD
20F6:  CLRF   xAF
20F8:  CLRF   xB0
20FA:  CLRF   xB4
20FC:  CLRF   xB3
20FE:  CLRF   xB2
2100:  CLRF   xB1
2102:  CLRF   xB8
2104:  CLRF   xB7
2106:  CLRF   xB6
2108:  CLRF   xB5
210A:  MOVF   FC1,W
210C:  ANDLW  C0
210E:  IORLW  0F
2110:  MOVWF  FC1
2112:  MOVLW  07
2114:  MOVWF  FB4
2116:  MOVLW  3E
2118:  MOVWF  32
211A:  MOVLW  20
211C:  MOVWF  33
211E:  MOVLW  5E
2120:  MOVWF  34
2122:  CLRF   35
2124:  CLRF   36
2126:  CLRF   37
2128:  CLRF   38
212A:  CLRF   39
212C:  CLRF   3A
212E:  CLRF   3B
2130:  CLRF   3C
2132:  CLRF   44
2134:  CLRF   45
2136:  CLRF   46
2138:  CLRF   47
213A:  CLRF   48
213C:  CLRF   49
213E:  CLRF   4A
2140:  CLRF   4B
2142:  CLRF   4C
2144:  CLRF   4D
2146:  CLRF   4E
2148:  CLRF   4F
214A:  CLRF   50
214C:  CLRF   51
214E:  CLRF   52
2150:  CLRF   53
2152:  CLRF   54
2154:  CLRF   55
2156:  CLRF   56
2158:  CLRF   57
215A:  CLRF   58
215C:  CLRF   59
215E:  CLRF   5A
2160:  CLRF   5B
2162:  CLRF   5C
2164:  CLRF   5D
2166:  CLRF   5E
2168:  CLRF   5F
216A:  CLRF   x60
216C:  CLRF   x61
216E:  CLRF   x62
2170:  CLRF   x63
2172:  CLRF   x64
2174:  CLRF   x65
2176:  CLRF   x66
2178:  CLRF   x67
217A:  CLRF   x68
217C:  CLRF   x69
217E:  CLRF   x6A
2180:  CLRF   x6B
2182:  CLRF   x6C
2184:  CLRF   x6D
2186:  CLRF   x6E
2188:  CLRF   x6F
218A:  CLRF   x70
218C:  CLRF   x71
218E:  CLRF   x72
2190:  CLRF   x73
2192:  CLRF   x74
2194:  CLRF   x75
2196:  CLRF   x76
2198:  CLRF   x77
219A:  CLRF   x78
219C:  CLRF   x79
219E:  CLRF   x7A
21A0:  CLRF   x7B
21A2:  CLRF   x7C
21A4:  CLRF   x7D
21A6:  CLRF   x7E
21A8:  CLRF   x7F
21AA:  CLRF   x80
21AC:  CLRF   x81
21AE:  CLRF   x82
21B0:  CLRF   x83
21B2:  CLRF   x84
21B4:  CLRF   x85
21B6:  CLRF   x86
21B8:  CLRF   x87
21BA:  CLRF   x88
21BC:  CLRF   x89
21BE:  CLRF   x8A
21C0:  CLRF   x8B
21C2:  CLRF   x8C
21C4:  CLRF   x8D
21C6:  CLRF   x8E
21C8:  CLRF   x8F
21CA:  CLRF   x90
21CC:  CLRF   x91
21CE:  CLRF   x92
21D0:  CLRF   x93
....................    ConfigInterrupciones(); 
21D2:  GOTO   08E0
....................    MensajeBienvenida(); 
21D6:  GOTO   09EC
....................    LeeEEPROM();  
21DA:  GOTO   0A88
....................    LimitaValores(); 
21DE:  GOTO   0CDC
....................    VelocidadMotor(0); 
21E2:  CLRF   xBA
21E4:  CALL   104C
....................    Motor_L1_off; 
21E8:  BCF    F8B.2
21EA:  BCF    F94.2
....................    Motor_L2_off; 
21EC:  BCF    F8B.1
21EE:  BCF    F94.1
....................    Tcruce2=83; 
21F0:  CLRF   xB8
21F2:  CLRF   xB7
21F4:  MOVLW  26
21F6:  MOVWF  xB6
21F8:  MOVLW  85
21FA:  MOVWF  xB5
....................    Tcruce=8300; 
21FC:  CLRF   xB4
21FE:  MOVLW  B0
2200:  MOVWF  xB3
2202:  MOVLW  01
2204:  MOVWF  xB2
2206:  MOVLW  8C
2208:  MOVWF  xB1
....................    while(true){ 
....................           
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
220A:  MOVF   18,F
220C:  BTFSS  FD8.2
220E:  BRA    2612
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2210:  MOVLW  01
2212:  MOVWF  xCC
2214:  MOVWF  xCD
2216:  CALL   090C
....................          printf(lcd_putc,"     Ingrese        "); 
221A:  MOVLW  62
221C:  MOVWF  FF6
221E:  MOVLW  02
2220:  MOVWF  FF7
2222:  CALL   09CC
....................          lcd_gotoxy(1,2); 
2226:  MOVLW  01
2228:  MOVWF  xCC
222A:  MOVLW  02
222C:  MOVWF  xCD
222E:  CALL   090C
....................          printf(lcd_putc,"    Contraseña      "); 
2232:  MOVLW  78
2234:  MOVWF  FF6
2236:  MOVLW  02
2238:  MOVWF  FF7
223A:  CALL   09CC
....................          lcd_gotoxy(1,3); 
223E:  MOVLW  01
2240:  MOVWF  xCC
2242:  MOVLW  03
2244:  MOVWF  xCD
2246:  CALL   090C
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
224A:  MOVLW  8E
224C:  MOVWF  FF6
224E:  MOVLW  02
2250:  MOVWF  FF7
2252:  MOVLW  0A
2254:  MOVWF  xBE
2256:  CALL   10D0
225A:  MOVFF  35,BA
225E:  MOVLW  1F
2260:  MOVWF  xBB
2262:  CALL   1116
2266:  MOVFF  36,BA
226A:  MOVLW  1F
226C:  MOVWF  xBB
226E:  CALL   1116
2272:  MOVFF  37,BA
2276:  MOVLW  1F
2278:  MOVWF  xBB
227A:  CALL   1116
227E:  MOVFF  38,BA
2282:  MOVLW  1F
2284:  MOVWF  xBB
2286:  CALL   1116
228A:  MOVLW  20
228C:  MOVWF  xCB
228E:  CALL   096E
2292:  MOVLW  20
2294:  MOVWF  xCB
2296:  CALL   096E
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
229A:  MOVFF  1B,CC
229E:  MOVLW  04
22A0:  MOVWF  xCD
22A2:  CALL   090C
....................          lcd_putc(t[2]); 
22A6:  MOVFF  34,CB
22AA:  CALL   096E
....................           
....................          if(unidad>11&&unidad<14){ 
22AE:  MOVF   1B,W
22B0:  SUBLW  0B
22B2:  BC    22D2
22B4:  MOVF   1B,W
22B6:  SUBLW  0D
22B8:  BNC   22D2
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
22BA:  MOVLW  01
22BC:  SUBWF  1B,W
22BE:  MOVWF  xBA
22C0:  MOVWF  xCC
22C2:  MOVLW  04
22C4:  MOVWF  xCD
22C6:  CALL   090C
....................             lcd_putc(t[1]); 
22CA:  MOVFF  33,CB
22CE:  CALL   096E
....................          } 
....................           
....................          Cambio=OFF; 
22D2:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
22D4:  BSF    F92.5
22D6:  BTFSC  F80.5
22D8:  BRA    230C
....................          delay_ms(20); 
22DA:  MOVLW  14
22DC:  MOVWF  xD1
22DE:  CALL   07F8
....................          if(UP){ 
22E2:  BSF    F92.5
22E4:  BTFSC  F80.5
22E6:  BRA    230A
....................             if(Flanco == 0) { 
22E8:  BTFSC  16.3
22EA:  BRA    230A
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
22EC:  MOVLW  0B
22EE:  SUBWF  1B,W
22F0:  CLRF   03
22F2:  ADDLW  35
22F4:  MOVWF  FE9
22F6:  MOVLW  00
22F8:  ADDWFC 03,W
22FA:  MOVWF  FEA
22FC:  INCF   FEF,F
22FE:  BSF    16.3
2300:  MOVLW  1E
2302:  MOVWF  xD1
2304:  CALL   07F8
2308:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
230A:  BRA    230E
....................          Flanco = 0; 
230C:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
230E:  BSF    F96.0
2310:  BTFSC  F84.0
2312:  BRA    2346
....................          delay_ms(20); 
2314:  MOVLW  14
2316:  MOVWF  xD1
2318:  CALL   07F8
....................          if(DOWN){ 
231C:  BSF    F96.0
231E:  BTFSC  F84.0
2320:  BRA    2344
....................             if(Flanco2 == 0) { 
2322:  BTFSC  16.5
2324:  BRA    2344
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2326:  MOVLW  0B
2328:  SUBWF  1B,W
232A:  CLRF   03
232C:  ADDLW  35
232E:  MOVWF  FE9
2330:  MOVLW  00
2332:  ADDWFC 03,W
2334:  MOVWF  FEA
2336:  DECF   FEF,F
2338:  BSF    16.5
233A:  MOVLW  1E
233C:  MOVWF  xD1
233E:  CALL   07F8
2342:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2344:  BRA    2348
....................          Flanco2 = 0; 
2346:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2348:  BSF    F96.1
234A:  BTFSC  F84.1
234C:  BRA    2378
....................          delay_ms(20); 
234E:  MOVLW  14
2350:  MOVWF  xD1
2352:  CALL   07F8
....................          if(RIGHT){ 
2356:  BSF    F96.1
2358:  BTFSC  F84.1
235A:  BRA    2376
....................             if(Flanco1 == 0) { 
235C:  BTFSC  16.4
235E:  BRA    2376
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2360:  BSF    16.4
2362:  INCF   1B,F
2364:  MOVLW  1E
2366:  MOVWF  xD1
2368:  CALL   07F8
236C:  MOVLW  0C
236E:  MOVWF  xCB
2370:  CALL   096E
2374:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2376:  BRA    237A
....................          Flanco1 = 0; 
2378:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
237A:  BSF    F96.2
237C:  BTFSC  F84.2
237E:  BRA    23AA
....................          delay_ms(150); 
2380:  MOVLW  96
2382:  MOVWF  xD1
2384:  CALL   07F8
....................          if(IZQU){ 
2388:  BSF    F96.2
238A:  BTFSC  F84.2
238C:  BRA    23A8
....................             if(Flanco3 == 0){ 
238E:  BTFSC  16.6
2390:  BRA    23A8
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2392:  BSF    16.6
2394:  DECF   1B,F
2396:  MOVLW  1E
2398:  MOVWF  xD1
239A:  CALL   07F8
239E:  MOVLW  0C
23A0:  MOVWF  xCB
23A2:  CALL   096E
23A6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
23A8:  BRA    23AC
....................         Flanco3 = 0; 
23AA:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
23AC:  MOVLW  0B
23AE:  SUBWF  1B,W
23B0:  CLRF   03
23B2:  ADDLW  35
23B4:  MOVWF  FE9
23B6:  MOVLW  00
23B8:  ADDWFC 03,W
23BA:  MOVWF  FEA
23BC:  BTFSC  FEF.7
23BE:  BRA    23C2
23C0:  BRA    23D6
....................          clave[unidad-11]=9; 
23C2:  MOVLW  0B
23C4:  SUBWF  1B,W
23C6:  CLRF   03
23C8:  ADDLW  35
23CA:  MOVWF  FE9
23CC:  MOVLW  00
23CE:  ADDWFC 03,W
23D0:  MOVWF  FEA
23D2:  MOVLW  09
23D4:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
23D6:  MOVLW  0B
23D8:  SUBWF  1B,W
23DA:  CLRF   03
23DC:  ADDLW  35
23DE:  MOVWF  FE9
23E0:  MOVLW  00
23E2:  ADDWFC 03,W
23E4:  MOVWF  FEA
23E6:  BTFSC  FEF.7
23E8:  BRA    2402
23EA:  MOVF   FEF,W
23EC:  SUBLW  09
23EE:  BC    2402
....................          clave[unidad-11]=0; 
23F0:  MOVLW  0B
23F2:  SUBWF  1B,W
23F4:  CLRF   03
23F6:  ADDLW  35
23F8:  MOVWF  FE9
23FA:  MOVLW  00
23FC:  ADDWFC 03,W
23FE:  MOVWF  FEA
2400:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2402:  MOVF   1B,W
2404:  SUBLW  0A
2406:  BNC   240C
....................          unidad=11; 
2408:  MOVLW  0B
240A:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
240C:  MOVF   1B,W
240E:  SUBLW  0E
2410:  BTFSC  FD8.0
2412:  BRA    2612
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2414:  MOVF   35,W
2416:  SUBLW  03
2418:  BNZ   24F4
241A:  MOVF   36,W
241C:  SUBLW  08
241E:  BNZ   24F4
2420:  MOVF   37,W
2422:  SUBLW  09
2424:  BNZ   24F4
2426:  MOVF   38,W
2428:  SUBLW  02
242A:  BNZ   24F4
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
242C:  CLRF   FA9
242E:  CLRF   FA8
2430:  BCF    FA6.6
2432:  BCF    FA6.7
2434:  BSF    FA6.2
2436:  MOVF   FF2,W
2438:  MOVWF  00
243A:  BCF    FF2.7
243C:  MOVLB  F
243E:  MOVLW  55
2440:  MOVWF  FA7
2442:  MOVLW  AA
2444:  MOVWF  FA7
2446:  BSF    FA6.1
2448:  BTFSC  FA6.1
244A:  BRA    2448
244C:  BCF    FA6.2
244E:  MOVF   00,W
2450:  IORWF  FF2,F
2452:  MOVLW  14
2454:  MOVLB  0
2456:  MOVWF  xD1
2458:  CALL   07F8
245C:  MOVLW  01
245E:  MOVWF  FA9
2460:  CLRF   FA8
2462:  BCF    FA6.6
2464:  BCF    FA6.7
2466:  BSF    FA6.2
2468:  MOVF   FF2,W
246A:  MOVWF  00
246C:  BCF    FF2.7
246E:  MOVLB  F
2470:  MOVLW  55
2472:  MOVWF  FA7
2474:  MOVLW  AA
2476:  MOVWF  FA7
2478:  BSF    FA6.1
247A:  BTFSC  FA6.1
247C:  BRA    247A
247E:  BCF    FA6.2
2480:  MOVF   00,W
2482:  IORWF  FF2,F
2484:  MOVLW  14
2486:  MOVLB  0
2488:  MOVWF  xD1
248A:  CALL   07F8
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
248E:  MOVLW  02
2490:  MOVWF  FA9
2492:  CLRF   FA8
2494:  BCF    FA6.6
2496:  BCF    FA6.7
2498:  BSF    FA6.2
249A:  MOVF   FF2,W
249C:  MOVWF  00
249E:  BCF    FF2.7
24A0:  MOVLB  F
24A2:  MOVLW  55
24A4:  MOVWF  FA7
24A6:  MOVLW  AA
24A8:  MOVWF  FA7
24AA:  BSF    FA6.1
24AC:  BTFSC  FA6.1
24AE:  BRA    24AC
24B0:  BCF    FA6.2
24B2:  MOVF   00,W
24B4:  IORWF  FF2,F
24B6:  MOVLW  14
24B8:  MOVLB  0
24BA:  MOVWF  xD1
24BC:  CALL   07F8
24C0:  MOVLW  03
24C2:  MOVWF  FA9
24C4:  CLRF   FA8
24C6:  BCF    FA6.6
24C8:  BCF    FA6.7
24CA:  BSF    FA6.2
24CC:  MOVF   FF2,W
24CE:  MOVWF  00
24D0:  BCF    FF2.7
24D2:  MOVLB  F
24D4:  MOVLW  55
24D6:  MOVWF  FA7
24D8:  MOVLW  AA
24DA:  MOVWF  FA7
24DC:  BSF    FA6.1
24DE:  BTFSC  FA6.1
24E0:  BRA    24DE
24E2:  BCF    FA6.2
24E4:  MOVF   00,W
24E6:  IORWF  FF2,F
24E8:  MOVLW  14
24EA:  MOVLB  0
24EC:  MOVWF  xD1
24EE:  CALL   07F8
....................              reset_cpu(); 
24F2:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
24F4:  MOVF   39,W
24F6:  SUBWF  35,W
24F8:  BNZ   2598
24FA:  MOVF   3A,W
24FC:  SUBWF  36,W
24FE:  BNZ   2598
2500:  MOVF   3B,W
2502:  SUBWF  37,W
2504:  BNZ   2598
2506:  MOVF   3C,W
2508:  SUBWF  38,W
250A:  BNZ   2598
....................             lcd_gotoxy(1,1); 
250C:  MOVLW  01
250E:  MOVWF  xCC
2510:  MOVWF  xCD
2512:  CALL   090C
....................             printf(lcd_putc,"                   "); 
2516:  MOVLW  A4
2518:  MOVWF  FF6
251A:  MOVLW  02
251C:  MOVWF  FF7
251E:  CALL   09CC
....................             lcd_gotoxy(1,2); 
2522:  MOVLW  01
2524:  MOVWF  xCC
2526:  MOVLW  02
2528:  MOVWF  xCD
252A:  CALL   090C
....................             printf(lcd_putc,"     Contraseña    "); 
252E:  MOVLW  B8
2530:  MOVWF  FF6
2532:  MOVLW  02
2534:  MOVWF  FF7
2536:  CALL   09CC
....................             lcd_gotoxy(1,3); 
253A:  MOVLW  01
253C:  MOVWF  xCC
253E:  MOVLW  03
2540:  MOVWF  xCD
2542:  CALL   090C
....................             printf(lcd_putc,"      Correcta     "); 
2546:  MOVLW  CC
2548:  MOVWF  FF6
254A:  MOVLW  02
254C:  MOVWF  FF7
254E:  CALL   09CC
....................             lcd_gotoxy(1,4); 
2552:  MOVLW  01
2554:  MOVWF  xCC
2556:  MOVLW  04
2558:  MOVWF  xCD
255A:  CALL   090C
....................             printf(lcd_putc,"                   "); 
255E:  MOVLW  E0
2560:  MOVWF  FF6
2562:  MOVLW  02
2564:  MOVWF  FF7
2566:  CALL   09CC
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
256A:  MOVLW  04
256C:  MOVWF  xBA
256E:  MOVLW  FA
2570:  MOVWF  xD1
2572:  CALL   07F8
2576:  DECFSZ xBA,F
2578:  BRA    256E
257A:  MOVLW  32
257C:  MOVWF  18
257E:  MOVLW  0B
2580:  MOVWF  1B
2582:  MOVLW  0C
2584:  MOVWF  xCB
2586:  CALL   096E
258A:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
258C:  CLRF   35
258E:  CLRF   36
2590:  CLRF   37
2592:  CLRF   38
2594:  BSF    17.5
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2596:  BRA    2612
....................             lcd_gotoxy(1,1); 
2598:  MOVLW  01
259A:  MOVWF  xCC
259C:  MOVWF  xCD
259E:  CALL   090C
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
25A2:  MOVLW  01
25A4:  MOVWF  xCC
25A6:  MOVLW  02
25A8:  MOVWF  xCD
25AA:  CALL   090C
....................             printf(lcd_putc,"     Contraseña    "); 
25AE:  MOVLW  F4
25B0:  MOVWF  FF6
25B2:  MOVLW  02
25B4:  MOVWF  FF7
25B6:  CALL   09CC
....................             lcd_gotoxy(1,3); 
25BA:  MOVLW  01
25BC:  MOVWF  xCC
25BE:  MOVLW  03
25C0:  MOVWF  xCD
25C2:  CALL   090C
....................             printf(lcd_putc,"     Incorrecta    "); 
25C6:  MOVLW  08
25C8:  MOVWF  FF6
25CA:  MOVLW  03
25CC:  MOVWF  FF7
25CE:  CALL   09CC
....................             lcd_gotoxy(1,4); 
25D2:  MOVLW  01
25D4:  MOVWF  xCC
25D6:  MOVLW  04
25D8:  MOVWF  xCD
25DA:  CALL   090C
....................             printf(lcd_putc,"                   "); 
25DE:  MOVLW  1C
25E0:  MOVWF  FF6
25E2:  MOVLW  03
25E4:  MOVWF  FF7
25E6:  CALL   09CC
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
25EA:  MOVLW  04
25EC:  MOVWF  xBA
25EE:  MOVLW  FA
25F0:  MOVWF  xD1
25F2:  CALL   07F8
25F6:  DECFSZ xBA,F
25F8:  BRA    25EE
25FA:  MOVLW  0B
25FC:  MOVWF  1B
25FE:  MOVLW  0C
2600:  MOVWF  xCB
2602:  CALL   096E
2606:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2608:  CLRF   35
260A:  CLRF   36
260C:  CLRF   37
260E:  CLRF   38
2610:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2612:  DECFSZ 18,W
2614:  BRA    284C
....................       EliminaRuido(); 
2616:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
261A:  MOVLW  01
261C:  MOVWF  xCC
261E:  MOVWF  xCD
2620:  CALL   090C
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2624:  MOVLW  30
2626:  MOVWF  FF6
2628:  MOVLW  03
262A:  MOVWF  FF7
262C:  CALL   09CC
....................          mensajes(1+paso,2); 
2630:  MOVLW  01
2632:  ADDWF  31,W
2634:  MOVWF  xBA
2636:  MOVWF  xBB
2638:  MOVLW  02
263A:  MOVWF  xBC
263C:  CALL   11E6
....................          mensajes(2+paso,3); 
2640:  MOVLW  02
2642:  ADDWF  31,W
2644:  MOVWF  xBA
2646:  MOVWF  xBB
2648:  MOVLW  03
264A:  MOVWF  xBC
264C:  CALL   11E6
....................          mensajes(3+paso,4); 
2650:  MOVLW  03
2652:  ADDWF  31,W
2654:  MOVWF  xBA
2656:  MOVWF  xBB
2658:  MOVLW  04
265A:  MOVWF  xBC
265C:  CALL   11E6
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2660:  MOVLW  01
2662:  MOVWF  xCC
2664:  MOVFF  1C,CD
2668:  CALL   090C
....................         lcd_putc(t[0]); 
266C:  MOVFF  32,CB
2670:  CALL   096E
....................  
....................         if(Flecha==2) 
2674:  MOVF   1C,W
2676:  SUBLW  02
2678:  BNZ   26A2
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
267A:  MOVLW  01
267C:  MOVWF  xCC
267E:  MOVLW  04
2680:  MOVWF  xCD
2682:  CALL   090C
....................             lcd_putc(t[1]); 
2686:  MOVFF  33,CB
268A:  CALL   096E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
268E:  MOVLW  01
2690:  MOVWF  xCC
2692:  MOVLW  03
2694:  MOVWF  xCD
2696:  CALL   090C
....................             lcd_putc(t[1]); 
269A:  MOVFF  33,CB
269E:  CALL   096E
....................           } 
....................          
....................         if(Flecha==4) 
26A2:  MOVF   1C,W
26A4:  SUBLW  04
26A6:  BNZ   26D0
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
26A8:  MOVLW  01
26AA:  MOVWF  xCC
26AC:  MOVLW  02
26AE:  MOVWF  xCD
26B0:  CALL   090C
....................             lcd_putc(t[1]); 
26B4:  MOVFF  33,CB
26B8:  CALL   096E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
26BC:  MOVLW  01
26BE:  MOVWF  xCC
26C0:  MOVLW  03
26C2:  MOVWF  xCD
26C4:  CALL   090C
....................             lcd_putc(t[1]); 
26C8:  MOVFF  33,CB
26CC:  CALL   096E
....................           } 
....................          
....................         if(Flecha==3) 
26D0:  MOVF   1C,W
26D2:  SUBLW  03
26D4:  BNZ   26FE
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
26D6:  MOVLW  01
26D8:  MOVWF  xCC
26DA:  MOVLW  04
26DC:  MOVWF  xCD
26DE:  CALL   090C
....................             lcd_putc(t[1]); 
26E2:  MOVFF  33,CB
26E6:  CALL   096E
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
26EA:  MOVLW  01
26EC:  MOVWF  xCC
26EE:  MOVLW  02
26F0:  MOVWF  xCD
26F2:  CALL   090C
....................             lcd_putc(t[1]); 
26F6:  MOVFF  33,CB
26FA:  CALL   096E
....................           } 
....................          Cambio=OFF; 
26FE:  BCF    17.5
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
2700:  BSF    F92.5
2702:  BTFSC  F80.5
2704:  BRA    2730
....................          delay_ms(20); 
2706:  MOVLW  14
2708:  MOVWF  xD1
270A:  CALL   07F8
....................          if(UP){ 
270E:  BSF    F92.5
2710:  BTFSC  F80.5
2712:  BRA    272E
....................             if(Flanco == 0){ 
2714:  BTFSC  16.3
2716:  BRA    272E
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
2718:  DECF   1E,F
271A:  DECF   1C,F
271C:  MOVLW  01
271E:  ADDWF  1C,W
2720:  MOVWF  1D
2722:  BSF    16.3
2724:  MOVLW  1E
2726:  MOVWF  xD1
2728:  CALL   07F8
272C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
272E:  BRA    2732
....................          Flanco = 0; 
2730:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2732:  BSF    F96.0
2734:  BTFSC  F84.0
2736:  BRA    2762
....................          delay_ms(20); 
2738:  MOVLW  14
273A:  MOVWF  xD1
273C:  CALL   07F8
....................          if(DOWN){ 
2740:  BSF    F96.0
2742:  BTFSC  F84.0
2744:  BRA    2760
....................             if(Flanco2 == 0){ 
2746:  BTFSC  16.5
2748:  BRA    2760
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
274A:  INCF   1E,F
274C:  INCF   1C,F
274E:  MOVLW  01
2750:  SUBWF  1C,W
2752:  MOVWF  1D
2754:  BSF    16.5
2756:  MOVLW  1E
2758:  MOVWF  xD1
275A:  CALL   07F8
275E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2760:  BRA    2764
....................          Flanco2 = 0; 
2762:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
2764:  MOVF   1E,W
2766:  SUBWF  20,W
2768:  BC    277A
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
276A:  INCF   31,F
276C:  MOVFF  1E,20
2770:  MOVLW  02
2772:  SUBWF  20,W
2774:  MOVWF  1F
2776:  MOVLW  04
2778:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
277A:  MOVF   1F,W
277C:  SUBWF  1E,W
277E:  BC    2790
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
2780:  DECF   31,F
2782:  MOVFF  1E,1F
2786:  MOVLW  02
2788:  ADDWF  1F,W
278A:  MOVWF  20
278C:  MOVLW  02
278E:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
2790:  MOVF   1E,W
2792:  SUBWF  19,W
2794:  BC    27A8
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
2796:  MOVFF  1A,1E
279A:  MOVLW  02
279C:  MOVWF  1C
279E:  CLRF   31
27A0:  MOVFF  1E,1F
27A4:  ADDWF  1F,W
27A6:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
27A8:  MOVF   1A,W
27AA:  SUBWF  1E,W
27AC:  BC    27C4
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
27AE:  MOVFF  19,1E
27B2:  MOVLW  04
27B4:  MOVWF  1C
27B6:  SUBWF  19,W
27B8:  MOVWF  31
27BA:  MOVFF  1E,20
27BE:  MOVLW  02
27C0:  SUBWF  20,W
27C2:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
27C4:  BTFSC  31.7
27C6:  BRA    27CA
27C8:  BRA    27CC
....................          paso=0; 
27CA:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
27CC:  BSF    F96.1
27CE:  BTFSC  F84.1
27D0:  BRA    2818
....................          delay_ms(20); 
27D2:  MOVLW  14
27D4:  MOVWF  xD1
27D6:  CALL   07F8
....................          if(RIGHT){ 
27DA:  BSF    F96.1
27DC:  BTFSC  F84.1
27DE:  BRA    2814
....................             if(Flanco1 == 0){ 
27E0:  BTFSC  16.4
27E2:  BRA    2814
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
27E4:  BSF    16.4
27E6:  MOVFF  1E,18
27EA:  MOVLW  03
27EC:  MOVWF  1C
27EE:  MOVLW  02
27F0:  MOVWF  xBA
27F2:  MOVLW  96
27F4:  MOVWF  xD1
27F6:  CALL   07F8
27FA:  DECFSZ xBA,F
27FC:  BRA    27F2
27FE:  MOVLW  0C
2800:  MOVWF  xCB
2802:  CALL   096E
....................                if(Menu==6){ 
2806:  MOVF   18,W
2808:  SUBLW  06
280A:  BNZ   2814
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
280C:  CLRF   35
280E:  CLRF   36
2810:  CLRF   37
2812:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2814:  BSF    17.5
....................       }else{ 
2816:  BRA    281A
....................         Flanco1 = 0; 
2818:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
281A:  BSF    F96.2
281C:  BTFSC  F84.2
281E:  BRA    284C
....................          delay_ms(20); 
2820:  MOVLW  14
2822:  MOVWF  xD1
2824:  CALL   07F8
....................          if(IZQU){ 
2828:  BSF    F96.2
282A:  BTFSC  F84.2
282C:  BRA    284C
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
282E:  MOVLW  02
2830:  MOVWF  xBA
2832:  MOVLW  FA
2834:  MOVWF  xD1
2836:  CALL   07F8
283A:  DECFSZ xBA,F
283C:  BRA    2832
283E:  MOVLW  32
2840:  MOVWF  18
2842:  MOVLW  0C
2844:  MOVWF  xCB
2846:  CALL   096E
284A:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
284C:  MOVF   18,W
284E:  SUBLW  02
2850:  BTFSS  FD8.2
2852:  BRA    2AA8
....................    EliminaRuido(); 
2854:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2858:  MOVLW  01
285A:  MOVWF  xCC
285C:  MOVWF  xCD
285E:  CALL   090C
....................       printf(lcd_putc,"    Temporizador     "); 
2862:  MOVLW  46
2864:  MOVWF  FF6
2866:  MOVLW  03
2868:  MOVWF  FF7
286A:  CALL   09CC
....................       lcd_gotoxy(1,2); 
286E:  MOVLW  01
2870:  MOVWF  xCC
2872:  MOVLW  02
2874:  MOVWF  xCD
2876:  CALL   090C
....................       printf(lcd_putc,"       Luz UV        "); 
287A:  MOVLW  5C
287C:  MOVWF  FF6
287E:  MOVLW  03
2880:  MOVWF  FF7
2882:  CALL   09CC
....................       lcd_gotoxy(6,3); 
2886:  MOVLW  06
2888:  MOVWF  xCC
288A:  MOVLW  03
288C:  MOVWF  xCD
288E:  CALL   090C
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2892:  MOVFF  29,BA
2896:  MOVLW  03
2898:  MOVWF  xBB
289A:  CALL   12BA
289E:  MOVLW  3A
28A0:  MOVWF  xCB
28A2:  CALL   096E
28A6:  MOVFF  2A,BA
28AA:  MOVLW  01
28AC:  MOVWF  xBB
28AE:  CALL   12BA
28B2:  MOVLW  7B
28B4:  MOVWF  FF6
28B6:  MOVLW  03
28B8:  MOVWF  FF7
28BA:  MOVLW  08
28BC:  MOVWF  xBE
28BE:  CALL   10D0
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
28C2:  MOVLW  06
28C4:  ADDWF  2E,W
28C6:  MOVWF  xBA
28C8:  MOVWF  xCC
28CA:  MOVLW  04
28CC:  MOVWF  xCD
28CE:  CALL   090C
....................       lcd_putc(t[2]); 
28D2:  MOVFF  34,CB
28D6:  CALL   096E
....................        
....................       Cambio=OFF; 
28DA:  BCF    17.5
.................... //   } 
....................     
....................    if(UP) 
28DC:  BSF    F92.5
28DE:  BTFSC  F80.5
28E0:  BRA    292E
....................    { 
....................       delay_ms(20); 
28E2:  MOVLW  14
28E4:  MOVWF  xD1
28E6:  CALL   07F8
....................       if(UP){ 
28EA:  BSF    F92.5
28EC:  BTFSC  F80.5
28EE:  BRA    292E
....................          if(unidad2==1) 
28F0:  DECFSZ 2E,W
28F2:  BRA    290E
....................          { 
....................             if(tempo_minutos_pro<240) 
28F4:  MOVF   29,W
28F6:  SUBLW  EF
28F8:  BNC   290E
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
28FA:  MOVLW  05
28FC:  ADDWF  29,F
28FE:  MOVLW  02
2900:  MOVWF  xBA
2902:  MOVLW  96
2904:  MOVWF  xD1
2906:  CALL   07F8
290A:  DECFSZ xBA,F
290C:  BRA    2902
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
290E:  MOVF   2E,W
2910:  SUBLW  04
2912:  BNZ   292C
....................          { 
....................             if(tempo_segundos_pro<59) 
2914:  MOVF   2A,W
2916:  SUBLW  3A
2918:  BNC   292C
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
291A:  INCF   2A,F
291C:  MOVLW  02
291E:  MOVWF  xBA
2920:  MOVLW  96
2922:  MOVWF  xD1
2924:  CALL   07F8
2928:  DECFSZ xBA,F
292A:  BRA    2920
....................             } 
....................          }      
....................       Cambio=ON; 
292C:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
292E:  BSF    F96.0
2930:  BTFSC  F84.0
2932:  BRA    297C
....................    { 
....................       delay_ms(20); 
2934:  MOVLW  14
2936:  MOVWF  xD1
2938:  CALL   07F8
....................       if(DOWN){ 
293C:  BSF    F96.0
293E:  BTFSC  F84.0
2940:  BRA    297C
....................          if(unidad2==1) 
2942:  DECFSZ 2E,W
2944:  BRA    295E
....................          { 
....................             if(tempo_minutos_pro>0) 
2946:  MOVF   29,F
2948:  BZ    295E
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
294A:  MOVLW  05
294C:  SUBWF  29,F
294E:  MOVLW  02
2950:  MOVWF  xBA
2952:  MOVLW  96
2954:  MOVWF  xD1
2956:  CALL   07F8
295A:  DECFSZ xBA,F
295C:  BRA    2952
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
295E:  MOVF   2E,W
2960:  SUBLW  04
2962:  BNZ   297A
....................          { 
....................             if(tempo_segundos_pro>0) 
2964:  MOVF   2A,F
2966:  BZ    297A
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2968:  DECF   2A,F
296A:  MOVLW  02
296C:  MOVWF  xBA
296E:  MOVLW  96
2970:  MOVWF  xD1
2972:  CALL   07F8
2976:  DECFSZ xBA,F
2978:  BRA    296E
....................             }    
....................          } 
....................       Cambio=ON; 
297A:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
297C:  BSF    F96.1
297E:  BTFSC  F84.1
2980:  BRA    29BE
....................    { 
....................       delay_ms(20); 
2982:  MOVLW  14
2984:  MOVWF  xD1
2986:  CALL   07F8
....................       if(RIGHT){ 
298A:  BSF    F96.1
298C:  BTFSC  F84.1
298E:  BRA    29BE
....................          if(unidad2==1) 
2990:  DECFSZ 2E,W
2992:  BRA    299A
....................          { 
....................             unidad2=4; 
2994:  MOVLW  04
2996:  MOVWF  2E
....................          } 
....................          else 
2998:  BRA    29A4
....................          { 
....................             if(unidad2==4) 
299A:  MOVF   2E,W
299C:  SUBLW  04
299E:  BNZ   29A4
....................             { 
....................                unidad2=1; 
29A0:  MOVLW  01
29A2:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
29A4:  MOVLW  02
29A6:  MOVWF  xBA
29A8:  MOVLW  FA
29AA:  MOVWF  xD1
29AC:  CALL   07F8
29B0:  DECFSZ xBA,F
29B2:  BRA    29A8
....................       printf(lcd_putc,"\f"); 
29B4:  MOVLW  0C
29B6:  MOVWF  xCB
29B8:  CALL   096E
....................       Cambio=ON; 
29BC:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
29BE:  BSF    F96.2
29C0:  BTFSC  F84.2
29C2:  BRA    2AA8
....................    { 
....................       if(IZQU){ 
29C4:  BSF    F96.2
29C6:  BTFSC  F84.2
29C8:  BRA    2AA8
....................          delay_ms(200); 
29CA:  MOVLW  C8
29CC:  MOVWF  xD1
29CE:  CALL   07F8
....................          printf(lcd_putc,"\f"); 
29D2:  MOVLW  0C
29D4:  MOVWF  xCB
29D6:  CALL   096E
....................          lcd_gotoxy(1,2); 
29DA:  MOVLW  01
29DC:  MOVWF  xCC
29DE:  MOVLW  02
29E0:  MOVWF  xCD
29E2:  CALL   090C
....................          printf(lcd_putc,"Tiempo Almacenado"); 
29E6:  MOVLW  84
29E8:  MOVWF  FF6
29EA:  MOVLW  03
29EC:  MOVWF  FF7
29EE:  CALL   09CC
....................          lcd_gotoxy(1,3); 
29F2:  MOVLW  01
29F4:  MOVWF  xCC
29F6:  MOVLW  03
29F8:  MOVWF  xCD
29FA:  CALL   090C
....................          printf(lcd_putc,"  Correctamente  "); 
29FE:  MOVLW  96
2A00:  MOVWF  FF6
2A02:  MOVLW  03
2A04:  MOVWF  FF7
2A06:  CALL   09CC
....................          write_eeprom(5,tempo_minutos_pro); 
2A0A:  MOVLW  05
2A0C:  MOVWF  FA9
2A0E:  MOVFF  29,FA8
2A12:  BCF    FA6.6
2A14:  BCF    FA6.7
2A16:  BSF    FA6.2
2A18:  MOVF   FF2,W
2A1A:  MOVWF  00
2A1C:  BCF    FF2.7
2A1E:  MOVLB  F
2A20:  MOVLW  55
2A22:  MOVWF  FA7
2A24:  MOVLW  AA
2A26:  MOVWF  FA7
2A28:  BSF    FA6.1
2A2A:  BTFSC  FA6.1
2A2C:  BRA    2A2A
2A2E:  BCF    FA6.2
2A30:  MOVF   00,W
2A32:  IORWF  FF2,F
....................          delay_ms(20); 
2A34:  MOVLW  14
2A36:  MOVLB  0
2A38:  MOVWF  xD1
2A3A:  CALL   07F8
....................          write_eeprom(6,tempo_segundos_pro); 
2A3E:  MOVLW  06
2A40:  MOVWF  FA9
2A42:  MOVFF  2A,FA8
2A46:  BCF    FA6.6
2A48:  BCF    FA6.7
2A4A:  BSF    FA6.2
2A4C:  MOVF   FF2,W
2A4E:  MOVWF  00
2A50:  BCF    FF2.7
2A52:  MOVLB  F
2A54:  MOVLW  55
2A56:  MOVWF  FA7
2A58:  MOVLW  AA
2A5A:  MOVWF  FA7
2A5C:  BSF    FA6.1
2A5E:  BTFSC  FA6.1
2A60:  BRA    2A5E
2A62:  BCF    FA6.2
2A64:  MOVF   00,W
2A66:  IORWF  FF2,F
....................          delay_ms(20); 
2A68:  MOVLW  14
2A6A:  MOVLB  0
2A6C:  MOVWF  xD1
2A6E:  CALL   07F8
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2A72:  MOVFF  29,27
2A76:  MOVFF  2A,28
....................          delay_ms(700); 
2A7A:  MOVLW  04
2A7C:  MOVWF  xBA
2A7E:  MOVLW  AF
2A80:  MOVWF  xD1
2A82:  CALL   07F8
2A86:  DECFSZ xBA,F
2A88:  BRA    2A7E
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2A8A:  MOVLW  1E
2A8C:  MOVWF  xD1
2A8E:  CALL   07F8
2A92:  MOVLW  01
2A94:  MOVWF  18
2A96:  CLRF   31
2A98:  MOVLW  02
2A9A:  MOVWF  1C
2A9C:  MOVWF  1E
2A9E:  MOVLW  0C
2AA0:  MOVWF  xCB
2AA2:  CALL   096E
....................          Cambio=ON; 
2AA6:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2AA8:  MOVF   18,W
2AAA:  SUBLW  03
2AAC:  BTFSS  FD8.2
2AAE:  BRA    2DFA
....................       EliminaRuido(); 
2AB0:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2AB4:  MOVLW  01
2AB6:  MOVWF  xCC
2AB8:  MOVWF  xCD
2ABA:  CALL   090C
....................          printf(lcd_putc,"     Ingrese        "); 
2ABE:  MOVLW  A8
2AC0:  MOVWF  FF6
2AC2:  MOVLW  03
2AC4:  MOVWF  FF7
2AC6:  CALL   09CC
....................          lcd_gotoxy(1,2); 
2ACA:  MOVLW  01
2ACC:  MOVWF  xCC
2ACE:  MOVLW  02
2AD0:  MOVWF  xCD
2AD2:  CALL   090C
....................          printf(lcd_putc,"    Contraseña      "); 
2AD6:  MOVLW  BE
2AD8:  MOVWF  FF6
2ADA:  MOVLW  03
2ADC:  MOVWF  FF7
2ADE:  CALL   09CC
....................          lcd_gotoxy(1,3); 
2AE2:  MOVLW  01
2AE4:  MOVWF  xCC
2AE6:  MOVLW  03
2AE8:  MOVWF  xCD
2AEA:  CALL   090C
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2AEE:  MOVLW  D4
2AF0:  MOVWF  FF6
2AF2:  MOVLW  03
2AF4:  MOVWF  FF7
2AF6:  MOVLW  0A
2AF8:  MOVWF  xBE
2AFA:  CALL   10D0
2AFE:  MOVFF  35,BA
2B02:  MOVLW  1F
2B04:  MOVWF  xBB
2B06:  CALL   1116
2B0A:  MOVFF  36,BA
2B0E:  MOVLW  1F
2B10:  MOVWF  xBB
2B12:  CALL   1116
2B16:  MOVFF  37,BA
2B1A:  MOVLW  1F
2B1C:  MOVWF  xBB
2B1E:  CALL   1116
2B22:  MOVFF  38,BA
2B26:  MOVLW  1F
2B28:  MOVWF  xBB
2B2A:  CALL   1116
2B2E:  MOVLW  20
2B30:  MOVWF  xCB
2B32:  CALL   096E
2B36:  MOVLW  20
2B38:  MOVWF  xCB
2B3A:  CALL   096E
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2B3E:  MOVFF  1B,CC
2B42:  MOVLW  04
2B44:  MOVWF  xCD
2B46:  CALL   090C
....................          lcd_putc(t[2]); 
2B4A:  MOVFF  34,CB
2B4E:  CALL   096E
....................           
....................          if(unidad>11&&unidad<14){ 
2B52:  MOVF   1B,W
2B54:  SUBLW  0B
2B56:  BC    2B76
2B58:  MOVF   1B,W
2B5A:  SUBLW  0D
2B5C:  BNC   2B76
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2B5E:  MOVLW  01
2B60:  SUBWF  1B,W
2B62:  MOVWF  xBA
2B64:  MOVWF  xCC
2B66:  MOVLW  04
2B68:  MOVWF  xCD
2B6A:  CALL   090C
....................             lcd_putc(t[1]); 
2B6E:  MOVFF  33,CB
2B72:  CALL   096E
....................          } 
....................           
....................          Cambio=OFF; 
2B76:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2B78:  BSF    F92.5
2B7A:  BTFSC  F80.5
2B7C:  BRA    2BB0
....................          delay_ms(20); 
2B7E:  MOVLW  14
2B80:  MOVWF  xD1
2B82:  CALL   07F8
....................          if(UP){ 
2B86:  BSF    F92.5
2B88:  BTFSC  F80.5
2B8A:  BRA    2BAE
....................             if(Flanco == 0) { 
2B8C:  BTFSC  16.3
2B8E:  BRA    2BAE
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2B90:  MOVLW  0B
2B92:  SUBWF  1B,W
2B94:  CLRF   03
2B96:  ADDLW  35
2B98:  MOVWF  FE9
2B9A:  MOVLW  00
2B9C:  ADDWFC 03,W
2B9E:  MOVWF  FEA
2BA0:  INCF   FEF,F
2BA2:  BSF    16.3
2BA4:  MOVLW  1E
2BA6:  MOVWF  xD1
2BA8:  CALL   07F8
2BAC:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2BAE:  BRA    2BB2
....................          Flanco = 0; 
2BB0:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2BB2:  BSF    F96.0
2BB4:  BTFSC  F84.0
2BB6:  BRA    2BEA
....................          delay_ms(20); 
2BB8:  MOVLW  14
2BBA:  MOVWF  xD1
2BBC:  CALL   07F8
....................          if(DOWN){ 
2BC0:  BSF    F96.0
2BC2:  BTFSC  F84.0
2BC4:  BRA    2BE8
....................             if(Flanco2 == 0) { 
2BC6:  BTFSC  16.5
2BC8:  BRA    2BE8
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2BCA:  MOVLW  0B
2BCC:  SUBWF  1B,W
2BCE:  CLRF   03
2BD0:  ADDLW  35
2BD2:  MOVWF  FE9
2BD4:  MOVLW  00
2BD6:  ADDWFC 03,W
2BD8:  MOVWF  FEA
2BDA:  DECF   FEF,F
2BDC:  BSF    16.5
2BDE:  MOVLW  1E
2BE0:  MOVWF  xD1
2BE2:  CALL   07F8
2BE6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2BE8:  BRA    2BEC
....................          Flanco2 = 0; 
2BEA:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2BEC:  BSF    F96.1
2BEE:  BTFSC  F84.1
2BF0:  BRA    2C1C
....................          delay_ms(20); 
2BF2:  MOVLW  14
2BF4:  MOVWF  xD1
2BF6:  CALL   07F8
....................          if(RIGHT){ 
2BFA:  BSF    F96.1
2BFC:  BTFSC  F84.1
2BFE:  BRA    2C1A
....................             if(Flanco1 == 0) { 
2C00:  BTFSC  16.4
2C02:  BRA    2C1A
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C04:  BSF    16.4
2C06:  INCF   1B,F
2C08:  MOVLW  1E
2C0A:  MOVWF  xD1
2C0C:  CALL   07F8
2C10:  MOVLW  0C
2C12:  MOVWF  xCB
2C14:  CALL   096E
2C18:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C1A:  BRA    2C1E
....................          Flanco1 = 0; 
2C1C:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2C1E:  BSF    F96.2
2C20:  BTFSC  F84.2
2C22:  BRA    2C4E
....................          delay_ms(150); 
2C24:  MOVLW  96
2C26:  MOVWF  xD1
2C28:  CALL   07F8
....................          if(IZQU){ 
2C2C:  BSF    F96.2
2C2E:  BTFSC  F84.2
2C30:  BRA    2C4C
....................             if(Flanco3 == 0){ 
2C32:  BTFSC  16.6
2C34:  BRA    2C4C
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C36:  BSF    16.6
2C38:  DECF   1B,F
2C3A:  MOVLW  1E
2C3C:  MOVWF  xD1
2C3E:  CALL   07F8
2C42:  MOVLW  0C
2C44:  MOVWF  xCB
2C46:  CALL   096E
2C4A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2C4C:  BRA    2C50
....................         Flanco3 = 0; 
2C4E:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2C50:  MOVLW  0B
2C52:  SUBWF  1B,W
2C54:  CLRF   03
2C56:  ADDLW  35
2C58:  MOVWF  FE9
2C5A:  MOVLW  00
2C5C:  ADDWFC 03,W
2C5E:  MOVWF  FEA
2C60:  BTFSC  FEF.7
2C62:  BRA    2C66
2C64:  BRA    2C7A
....................          clave[unidad-11]=9; 
2C66:  MOVLW  0B
2C68:  SUBWF  1B,W
2C6A:  CLRF   03
2C6C:  ADDLW  35
2C6E:  MOVWF  FE9
2C70:  MOVLW  00
2C72:  ADDWFC 03,W
2C74:  MOVWF  FEA
2C76:  MOVLW  09
2C78:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2C7A:  MOVLW  0B
2C7C:  SUBWF  1B,W
2C7E:  CLRF   03
2C80:  ADDLW  35
2C82:  MOVWF  FE9
2C84:  MOVLW  00
2C86:  ADDWFC 03,W
2C88:  MOVWF  FEA
2C8A:  BTFSC  FEF.7
2C8C:  BRA    2CA6
2C8E:  MOVF   FEF,W
2C90:  SUBLW  09
2C92:  BC    2CA6
....................          clave[unidad-11]=0; 
2C94:  MOVLW  0B
2C96:  SUBWF  1B,W
2C98:  CLRF   03
2C9A:  ADDLW  35
2C9C:  MOVWF  FE9
2C9E:  MOVLW  00
2CA0:  ADDWFC 03,W
2CA2:  MOVWF  FEA
2CA4:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2CA6:  MOVF   1B,W
2CA8:  SUBLW  0A
2CAA:  BNC   2CCC
....................          unidad=11; 
2CAC:  MOVLW  0B
2CAE:  MOVWF  1B
....................          Menu=1; 
2CB0:  MOVLW  01
2CB2:  MOVWF  18
....................          paso=0; 
2CB4:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2CB6:  CLRF   35
2CB8:  CLRF   36
2CBA:  CLRF   37
2CBC:  CLRF   38
2CBE:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2CC0:  MOVLW  0B
2CC2:  MOVWF  1B
2CC4:  MOVLW  0C
2CC6:  MOVWF  xCB
2CC8:  CALL   096E
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2CCC:  MOVF   1B,W
2CCE:  SUBLW  0E
2CD0:  BTFSC  FD8.0
2CD2:  BRA    2DFA
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
2CD4:  MOVF   39,W
2CD6:  SUBWF  35,W
2CD8:  BNZ   2D76
2CDA:  MOVF   3A,W
2CDC:  SUBWF  36,W
2CDE:  BNZ   2D76
2CE0:  MOVF   3B,W
2CE2:  SUBWF  37,W
2CE4:  BNZ   2D76
2CE6:  MOVF   3C,W
2CE8:  SUBWF  38,W
2CEA:  BNZ   2D76
....................             lcd_gotoxy(1,1); 
2CEC:  MOVLW  01
2CEE:  MOVWF  xCC
2CF0:  MOVWF  xCD
2CF2:  CALL   090C
....................             printf(lcd_putc,"                    "); 
2CF6:  MOVLW  EA
2CF8:  MOVWF  FF6
2CFA:  MOVLW  03
2CFC:  MOVWF  FF7
2CFE:  CALL   09CC
....................             lcd_gotoxy(1,2); 
2D02:  MOVLW  01
2D04:  MOVWF  xCC
2D06:  MOVLW  02
2D08:  MOVWF  xCD
2D0A:  CALL   090C
....................             printf(lcd_putc,"     Contraseña     "); 
2D0E:  MOVLW  00
2D10:  MOVWF  FF6
2D12:  MOVLW  04
2D14:  MOVWF  FF7
2D16:  CALL   09CC
....................             lcd_gotoxy(1,3); 
2D1A:  MOVLW  01
2D1C:  MOVWF  xCC
2D1E:  MOVLW  03
2D20:  MOVWF  xCD
2D22:  CALL   090C
....................             printf(lcd_putc,"      Correcta      "); 
2D26:  MOVLW  16
2D28:  MOVWF  FF6
2D2A:  MOVLW  04
2D2C:  MOVWF  FF7
2D2E:  CALL   09CC
....................             lcd_gotoxy(1,4); 
2D32:  MOVLW  01
2D34:  MOVWF  xCC
2D36:  MOVLW  04
2D38:  MOVWF  xCD
2D3A:  CALL   090C
....................             printf(lcd_putc,"                    "); 
2D3E:  MOVLW  2C
2D40:  MOVWF  FF6
2D42:  MOVLW  04
2D44:  MOVWF  FF7
2D46:  CALL   09CC
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2D4A:  MOVLW  02
2D4C:  MOVWF  xBA
2D4E:  MOVLW  FA
2D50:  MOVWF  xD1
2D52:  CALL   07F8
2D56:  DECFSZ xBA,F
2D58:  BRA    2D4E
2D5A:  MOVLW  3D
2D5C:  MOVWF  18
2D5E:  MOVLW  0B
2D60:  MOVWF  1B
2D62:  MOVLW  0C
2D64:  MOVWF  xCB
2D66:  CALL   096E
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2D6A:  CLRF   35
2D6C:  CLRF   36
2D6E:  CLRF   37
2D70:  CLRF   38
2D72:  BSF    17.5
....................          }else{ 
2D74:  BRA    2DFA
....................             lcd_gotoxy(1,1); 
2D76:  MOVLW  01
2D78:  MOVWF  xCC
2D7A:  MOVWF  xCD
2D7C:  CALL   090C
....................             printf(lcd_putc,"                    "); 
2D80:  MOVLW  42
2D82:  MOVWF  FF6
2D84:  MOVLW  04
2D86:  MOVWF  FF7
2D88:  CALL   09CC
....................             lcd_gotoxy(1,2); 
2D8C:  MOVLW  01
2D8E:  MOVWF  xCC
2D90:  MOVLW  02
2D92:  MOVWF  xCD
2D94:  CALL   090C
....................             printf(lcd_putc,"     Contraseña     "); 
2D98:  MOVLW  58
2D9A:  MOVWF  FF6
2D9C:  MOVLW  04
2D9E:  MOVWF  FF7
2DA0:  CALL   09CC
....................             lcd_gotoxy(1,3); 
2DA4:  MOVLW  01
2DA6:  MOVWF  xCC
2DA8:  MOVLW  03
2DAA:  MOVWF  xCD
2DAC:  CALL   090C
....................             printf(lcd_putc,"     Incorrecta     "); 
2DB0:  MOVLW  6E
2DB2:  MOVWF  FF6
2DB4:  MOVLW  04
2DB6:  MOVWF  FF7
2DB8:  CALL   09CC
....................             lcd_gotoxy(1,4); 
2DBC:  MOVLW  01
2DBE:  MOVWF  xCC
2DC0:  MOVLW  04
2DC2:  MOVWF  xCD
2DC4:  CALL   090C
....................             printf(lcd_putc,"                    "); 
2DC8:  MOVLW  84
2DCA:  MOVWF  FF6
2DCC:  MOVLW  04
2DCE:  MOVWF  FF7
2DD0:  CALL   09CC
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2DD4:  MOVLW  02
2DD6:  MOVWF  xBA
2DD8:  MOVLW  FA
2DDA:  MOVWF  xD1
2DDC:  CALL   07F8
2DE0:  DECFSZ xBA,F
2DE2:  BRA    2DD8
2DE4:  MOVLW  0B
2DE6:  MOVWF  1B
2DE8:  MOVLW  0C
2DEA:  MOVWF  xCB
2DEC:  CALL   096E
2DF0:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2DF2:  CLRF   35
2DF4:  CLRF   36
2DF6:  CLRF   37
2DF8:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2DFA:  MOVF   18,W
2DFC:  SUBLW  3D
2DFE:  BTFSS  FD8.2
2E00:  BRA    318A
....................       EliminaRuido(); 
2E02:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2E06:  MOVLW  01
2E08:  MOVWF  xCC
2E0A:  MOVWF  xCD
2E0C:  CALL   090C
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
2E10:  MOVLW  9A
2E12:  MOVWF  FF6
2E14:  MOVLW  04
2E16:  MOVWF  FF7
2E18:  CALL   09CC
....................          lcd_gotoxy(1,2); 
2E1C:  MOVLW  01
2E1E:  MOVWF  xCC
2E20:  MOVLW  02
2E22:  MOVWF  xCD
2E24:  CALL   090C
....................          printf(lcd_putc,"     Contraseña     "); 
2E28:  MOVLW  B0
2E2A:  MOVWF  FF6
2E2C:  MOVLW  04
2E2E:  MOVWF  FF7
2E30:  CALL   09CC
....................          lcd_gotoxy(1,3); 
2E34:  MOVLW  01
2E36:  MOVWF  xCC
2E38:  MOVLW  03
2E3A:  MOVWF  xCD
2E3C:  CALL   090C
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2E40:  MOVLW  C6
2E42:  MOVWF  FF6
2E44:  MOVLW  04
2E46:  MOVWF  FF7
2E48:  MOVLW  0A
2E4A:  MOVWF  xBE
2E4C:  CALL   10D0
2E50:  MOVFF  35,BA
2E54:  MOVLW  1F
2E56:  MOVWF  xBB
2E58:  CALL   1116
2E5C:  MOVFF  36,BA
2E60:  MOVLW  1F
2E62:  MOVWF  xBB
2E64:  CALL   1116
2E68:  MOVFF  37,BA
2E6C:  MOVLW  1F
2E6E:  MOVWF  xBB
2E70:  CALL   1116
2E74:  MOVFF  38,BA
2E78:  MOVLW  1F
2E7A:  MOVWF  xBB
2E7C:  CALL   1116
2E80:  MOVLW  20
2E82:  MOVWF  xCB
2E84:  CALL   096E
2E88:  MOVLW  20
2E8A:  MOVWF  xCB
2E8C:  CALL   096E
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2E90:  MOVFF  1B,CC
2E94:  MOVLW  04
2E96:  MOVWF  xCD
2E98:  CALL   090C
....................          lcd_putc(t[2]); 
2E9C:  MOVFF  34,CB
2EA0:  CALL   096E
....................           
....................          if(unidad>11&&unidad<14){ 
2EA4:  MOVF   1B,W
2EA6:  SUBLW  0B
2EA8:  BC    2EC8
2EAA:  MOVF   1B,W
2EAC:  SUBLW  0D
2EAE:  BNC   2EC8
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2EB0:  MOVLW  01
2EB2:  SUBWF  1B,W
2EB4:  MOVWF  xBA
2EB6:  MOVWF  xCC
2EB8:  MOVLW  04
2EBA:  MOVWF  xCD
2EBC:  CALL   090C
....................             lcd_putc(t[1]); 
2EC0:  MOVFF  33,CB
2EC4:  CALL   096E
....................          } 
....................           
....................          Cambio=OFF; 
2EC8:  BCF    17.5
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
2ECA:  BSF    F92.5
2ECC:  BTFSC  F80.5
2ECE:  BRA    2F02
....................          delay_ms(20); 
2ED0:  MOVLW  14
2ED2:  MOVWF  xD1
2ED4:  CALL   07F8
....................          if(UP){ 
2ED8:  BSF    F92.5
2EDA:  BTFSC  F80.5
2EDC:  BRA    2F00
....................             if(Flanco == 0) { 
2EDE:  BTFSC  16.3
2EE0:  BRA    2F00
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2EE2:  MOVLW  0B
2EE4:  SUBWF  1B,W
2EE6:  CLRF   03
2EE8:  ADDLW  35
2EEA:  MOVWF  FE9
2EEC:  MOVLW  00
2EEE:  ADDWFC 03,W
2EF0:  MOVWF  FEA
2EF2:  INCF   FEF,F
2EF4:  BSF    16.3
2EF6:  MOVLW  1E
2EF8:  MOVWF  xD1
2EFA:  CALL   07F8
2EFE:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F00:  BRA    2F04
....................          Flanco = 0; 
2F02:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2F04:  BSF    F96.0
2F06:  BTFSC  F84.0
2F08:  BRA    2F3C
....................          delay_ms(20); 
2F0A:  MOVLW  14
2F0C:  MOVWF  xD1
2F0E:  CALL   07F8
....................          if(DOWN){ 
2F12:  BSF    F96.0
2F14:  BTFSC  F84.0
2F16:  BRA    2F3A
....................             if(Flanco2 == 0) { 
2F18:  BTFSC  16.5
2F1A:  BRA    2F3A
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2F1C:  MOVLW  0B
2F1E:  SUBWF  1B,W
2F20:  CLRF   03
2F22:  ADDLW  35
2F24:  MOVWF  FE9
2F26:  MOVLW  00
2F28:  ADDWFC 03,W
2F2A:  MOVWF  FEA
2F2C:  DECF   FEF,F
2F2E:  BSF    16.5
2F30:  MOVLW  1E
2F32:  MOVWF  xD1
2F34:  CALL   07F8
2F38:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F3A:  BRA    2F3E
....................          Flanco2 = 0; 
2F3C:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2F3E:  BSF    F96.1
2F40:  BTFSC  F84.1
2F42:  BRA    2F66
....................          if(RIGHT){ 
2F44:  BSF    F96.1
2F46:  BTFSC  F84.1
2F48:  BRA    2F64
....................             if(Flanco1 == 0) { 
2F4A:  BTFSC  16.4
2F4C:  BRA    2F64
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F4E:  BSF    16.4
2F50:  INCF   1B,F
2F52:  MOVLW  1E
2F54:  MOVWF  xD1
2F56:  CALL   07F8
2F5A:  MOVLW  0C
2F5C:  MOVWF  xCB
2F5E:  CALL   096E
2F62:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F64:  BRA    2F68
....................          Flanco1 = 0; 
2F66:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2F68:  BSF    F96.2
2F6A:  BTFSC  F84.2
2F6C:  BRA    2F98
....................          delay_ms(150); 
2F6E:  MOVLW  96
2F70:  MOVWF  xD1
2F72:  CALL   07F8
....................          if(IZQU){ 
2F76:  BSF    F96.2
2F78:  BTFSC  F84.2
2F7A:  BRA    2F96
....................             if(Flanco3 == 0){ 
2F7C:  BTFSC  16.6
2F7E:  BRA    2F96
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F80:  BSF    16.6
2F82:  DECF   1B,F
2F84:  MOVLW  1E
2F86:  MOVWF  xD1
2F88:  CALL   07F8
2F8C:  MOVLW  0C
2F8E:  MOVWF  xCB
2F90:  CALL   096E
2F94:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2F96:  BRA    2F9A
....................         Flanco3 = 0; 
2F98:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2F9A:  MOVLW  0B
2F9C:  SUBWF  1B,W
2F9E:  CLRF   03
2FA0:  ADDLW  35
2FA2:  MOVWF  FE9
2FA4:  MOVLW  00
2FA6:  ADDWFC 03,W
2FA8:  MOVWF  FEA
2FAA:  BTFSC  FEF.7
2FAC:  BRA    2FB0
2FAE:  BRA    2FC4
....................          clave[unidad-11]=9; 
2FB0:  MOVLW  0B
2FB2:  SUBWF  1B,W
2FB4:  CLRF   03
2FB6:  ADDLW  35
2FB8:  MOVWF  FE9
2FBA:  MOVLW  00
2FBC:  ADDWFC 03,W
2FBE:  MOVWF  FEA
2FC0:  MOVLW  09
2FC2:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2FC4:  MOVLW  0B
2FC6:  SUBWF  1B,W
2FC8:  CLRF   03
2FCA:  ADDLW  35
2FCC:  MOVWF  FE9
2FCE:  MOVLW  00
2FD0:  ADDWFC 03,W
2FD2:  MOVWF  FEA
2FD4:  BTFSC  FEF.7
2FD6:  BRA    2FF0
2FD8:  MOVF   FEF,W
2FDA:  SUBLW  09
2FDC:  BC    2FF0
....................          clave[unidad-11]=0; 
2FDE:  MOVLW  0B
2FE0:  SUBWF  1B,W
2FE2:  CLRF   03
2FE4:  ADDLW  35
2FE6:  MOVWF  FE9
2FE8:  MOVLW  00
2FEA:  ADDWFC 03,W
2FEC:  MOVWF  FEA
2FEE:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2FF0:  MOVF   1B,W
2FF2:  SUBLW  0A
2FF4:  BNC   3014
....................          unidad=11; 
2FF6:  MOVLW  0B
2FF8:  MOVWF  1B
....................          Menu=1; 
2FFA:  MOVLW  01
2FFC:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2FFE:  CLRF   35
3000:  CLRF   36
3002:  CLRF   37
3004:  CLRF   38
3006:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
3008:  MOVLW  0B
300A:  MOVWF  1B
300C:  MOVLW  0C
300E:  MOVWF  xCB
3010:  CALL   096E
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
3014:  MOVF   1B,W
3016:  SUBLW  0E
3018:  BTFSC  FD8.0
301A:  BRA    318A
....................          lcd_gotoxy(1,1); 
301C:  MOVLW  01
301E:  MOVWF  xCC
3020:  MOVWF  xCD
3022:  CALL   090C
....................          printf(lcd_putc,"                    "); 
3026:  MOVLW  DC
3028:  MOVWF  FF6
302A:  MOVLW  04
302C:  MOVWF  FF7
302E:  CALL   09CC
....................          lcd_gotoxy(1,2); 
3032:  MOVLW  01
3034:  MOVWF  xCC
3036:  MOVLW  02
3038:  MOVWF  xCD
303A:  CALL   090C
....................          printf(lcd_putc,"     Contraseña     "); 
303E:  MOVLW  F2
3040:  MOVWF  FF6
3042:  MOVLW  04
3044:  MOVWF  FF7
3046:  CALL   09CC
....................          lcd_gotoxy(1,3); 
304A:  MOVLW  01
304C:  MOVWF  xCC
304E:  MOVLW  03
3050:  MOVWF  xCD
3052:  CALL   090C
....................          printf(lcd_putc,"     Almacenada     "); 
3056:  MOVLW  08
3058:  MOVWF  FF6
305A:  MOVLW  05
305C:  MOVWF  FF7
305E:  CALL   09CC
....................          lcd_gotoxy(1,4); 
3062:  MOVLW  01
3064:  MOVWF  xCC
3066:  MOVLW  04
3068:  MOVWF  xCD
306A:  CALL   090C
....................          printf(lcd_putc,"                    "); 
306E:  MOVLW  1E
3070:  MOVWF  FF6
3072:  MOVLW  05
3074:  MOVWF  FF7
3076:  CALL   09CC
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
307A:  CLRF   FA9
307C:  MOVFF  35,FA8
3080:  BCF    FA6.6
3082:  BCF    FA6.7
3084:  BSF    FA6.2
3086:  MOVF   FF2,W
3088:  MOVWF  00
308A:  BCF    FF2.7
308C:  MOVLB  F
308E:  MOVLW  55
3090:  MOVWF  FA7
3092:  MOVLW  AA
3094:  MOVWF  FA7
3096:  BSF    FA6.1
3098:  BTFSC  FA6.1
309A:  BRA    3098
309C:  BCF    FA6.2
309E:  MOVF   00,W
30A0:  IORWF  FF2,F
30A2:  MOVLW  14
30A4:  MOVLB  0
30A6:  MOVWF  xD1
30A8:  CALL   07F8
30AC:  MOVLW  01
30AE:  MOVWF  FA9
30B0:  MOVFF  36,FA8
30B4:  BCF    FA6.6
30B6:  BCF    FA6.7
30B8:  BSF    FA6.2
30BA:  MOVF   FF2,W
30BC:  MOVWF  00
30BE:  BCF    FF2.7
30C0:  MOVLB  F
30C2:  MOVLW  55
30C4:  MOVWF  FA7
30C6:  MOVLW  AA
30C8:  MOVWF  FA7
30CA:  BSF    FA6.1
30CC:  BTFSC  FA6.1
30CE:  BRA    30CC
30D0:  BCF    FA6.2
30D2:  MOVF   00,W
30D4:  IORWF  FF2,F
30D6:  MOVLW  14
30D8:  MOVLB  0
30DA:  MOVWF  xD1
30DC:  CALL   07F8
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
30E0:  MOVLW  02
30E2:  MOVWF  FA9
30E4:  MOVFF  37,FA8
30E8:  BCF    FA6.6
30EA:  BCF    FA6.7
30EC:  BSF    FA6.2
30EE:  MOVF   FF2,W
30F0:  MOVWF  00
30F2:  BCF    FF2.7
30F4:  MOVLB  F
30F6:  MOVLW  55
30F8:  MOVWF  FA7
30FA:  MOVLW  AA
30FC:  MOVWF  FA7
30FE:  BSF    FA6.1
3100:  BTFSC  FA6.1
3102:  BRA    3100
3104:  BCF    FA6.2
3106:  MOVF   00,W
3108:  IORWF  FF2,F
310A:  MOVLW  14
310C:  MOVLB  0
310E:  MOVWF  xD1
3110:  CALL   07F8
3114:  MOVLW  03
3116:  MOVWF  FA9
3118:  MOVFF  38,FA8
311C:  BCF    FA6.6
311E:  BCF    FA6.7
3120:  BSF    FA6.2
3122:  MOVF   FF2,W
3124:  MOVWF  00
3126:  BCF    FF2.7
3128:  MOVLB  F
312A:  MOVLW  55
312C:  MOVWF  FA7
312E:  MOVLW  AA
3130:  MOVWF  FA7
3132:  BSF    FA6.1
3134:  BTFSC  FA6.1
3136:  BRA    3134
3138:  BCF    FA6.2
313A:  MOVF   00,W
313C:  IORWF  FF2,F
313E:  MOVLW  14
3140:  MOVLB  0
3142:  MOVWF  xD1
3144:  CALL   07F8
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3148:  MOVLW  02
314A:  MOVWF  xBA
314C:  MOVLW  FA
314E:  MOVWF  xD1
3150:  CALL   07F8
3154:  DECFSZ xBA,F
3156:  BRA    314C
3158:  MOVLW  01
315A:  MOVWF  18
315C:  CLRF   31
315E:  MOVLW  02
3160:  MOVWF  1C
3162:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3164:  MOVFF  35,39
3168:  MOVFF  36,3A
316C:  MOVFF  37,3B
3170:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3174:  CLRF   35
3176:  CLRF   36
3178:  CLRF   37
317A:  CLRF   38
317C:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
317E:  MOVLW  0B
3180:  MOVWF  1B
3182:  MOVLW  0C
3184:  MOVWF  xCB
3186:  CALL   096E
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
318A:  MOVF   18,W
318C:  SUBLW  04
318E:  BTFSS  FD8.2
3190:  BRA    33A4
....................    EliminaRuido(); 
3192:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3196:  MOVLW  01
3198:  MOVWF  xCC
319A:  MOVWF  xCD
319C:  CALL   090C
....................       printf(lcd_putc,"  Duracion Actual   "); 
31A0:  MOVLW  34
31A2:  MOVWF  FF6
31A4:  MOVLW  05
31A6:  MOVWF  FF7
31A8:  CALL   09CC
....................       lcd_gotoxy(1,2); 
31AC:  MOVLW  01
31AE:  MOVWF  xCC
31B0:  MOVLW  02
31B2:  MOVWF  xCD
31B4:  CALL   090C
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
31B8:  MOVLW  4A
31BA:  MOVWF  FF6
31BC:  MOVLW  05
31BE:  MOVWF  FF7
31C0:  MOVLW  0B
31C2:  MOVWF  xBE
31C4:  CALL   10D0
31C8:  MOVLW  08
31CA:  MOVWF  FE9
31CC:  MOVFF  41,BB
31D0:  MOVFF  40,BA
31D4:  GOTO   1326
31D8:  MOVLW  20
31DA:  MOVWF  xCB
31DC:  CALL   096E
31E0:  MOVLW  20
31E2:  MOVWF  xCB
31E4:  CALL   096E
31E8:  MOVLW  20
31EA:  MOVWF  xCB
31EC:  CALL   096E
....................       lcd_gotoxy(1,4); 
31F0:  MOVLW  01
31F2:  MOVWF  xCC
31F4:  MOVLW  04
31F6:  MOVWF  xCD
31F8:  CALL   090C
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
31FC:  MOVLW  5E
31FE:  MOVWF  FF6
3200:  MOVLW  05
3202:  MOVWF  FF7
3204:  CALL   09CC
....................        
....................       Cambio=OFF; 
3208:  BCF    17.5
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
320A:  BSF    F92.5
320C:  BTFSC  F80.5
320E:  BRA    3360
3210:  BSF    F96.1
3212:  BTFSC  F84.1
3214:  BRA    3360
....................          delay_ms(20); 
3216:  MOVLW  14
3218:  MOVWF  xD1
321A:  CALL   07F8
....................          if(UP && RIGHT){ 
321E:  BSF    F92.5
3220:  BTFSC  F80.5
3222:  BRA    3360
3224:  BSF    F96.1
3226:  BTFSC  F84.1
3228:  BRA    3360
....................             delay_ms(200); 
322A:  MOVLW  C8
322C:  MOVWF  xD1
322E:  CALL   07F8
....................             printf(lcd_putc,"\f"); 
3232:  MOVLW  0C
3234:  MOVWF  xCB
3236:  CALL   096E
....................             lcd_gotoxy(1,2); 
323A:  MOVLW  01
323C:  MOVWF  xCC
323E:  MOVLW  02
3240:  MOVWF  xCD
3242:  CALL   090C
....................             printf(lcd_putc," Reset de tiempo "); 
3246:  MOVLW  74
3248:  MOVWF  FF6
324A:  MOVLW  05
324C:  MOVWF  FF7
324E:  CALL   09CC
....................             lcd_gotoxy(1,3); 
3252:  MOVLW  01
3254:  MOVWF  xCC
3256:  MOVLW  03
3258:  MOVWF  xCD
325A:  CALL   090C
....................             printf(lcd_putc,"     Exitoso     "); 
325E:  MOVLW  86
3260:  MOVWF  FF6
3262:  MOVLW  05
3264:  MOVWF  FF7
3266:  CALL   09CC
....................             write_eeprom(7,0); 
326A:  MOVLW  07
326C:  MOVWF  FA9
326E:  CLRF   FA8
3270:  BCF    FA6.6
3272:  BCF    FA6.7
3274:  BSF    FA6.2
3276:  MOVF   FF2,W
3278:  MOVWF  00
327A:  BCF    FF2.7
327C:  MOVLB  F
327E:  MOVLW  55
3280:  MOVWF  FA7
3282:  MOVLW  AA
3284:  MOVWF  FA7
3286:  BSF    FA6.1
3288:  BTFSC  FA6.1
328A:  BRA    3288
328C:  BCF    FA6.2
328E:  MOVF   00,W
3290:  IORWF  FF2,F
....................             delay_ms(20); 
3292:  MOVLW  14
3294:  MOVLB  0
3296:  MOVWF  xD1
3298:  CALL   07F8
....................             write_eeprom(8,0); 
329C:  MOVLW  08
329E:  MOVWF  FA9
32A0:  CLRF   FA8
32A2:  BCF    FA6.6
32A4:  BCF    FA6.7
32A6:  BSF    FA6.2
32A8:  MOVF   FF2,W
32AA:  MOVWF  00
32AC:  BCF    FF2.7
32AE:  MOVLB  F
32B0:  MOVLW  55
32B2:  MOVWF  FA7
32B4:  MOVLW  AA
32B6:  MOVWF  FA7
32B8:  BSF    FA6.1
32BA:  BTFSC  FA6.1
32BC:  BRA    32BA
32BE:  BCF    FA6.2
32C0:  MOVF   00,W
32C2:  IORWF  FF2,F
....................             delay_ms(20); 
32C4:  MOVLW  14
32C6:  MOVLB  0
32C8:  MOVWF  xD1
32CA:  CALL   07F8
....................             write_eeprom(9,0); 
32CE:  MOVLW  09
32D0:  MOVWF  FA9
32D2:  CLRF   FA8
32D4:  BCF    FA6.6
32D6:  BCF    FA6.7
32D8:  BSF    FA6.2
32DA:  MOVF   FF2,W
32DC:  MOVWF  00
32DE:  BCF    FF2.7
32E0:  MOVLB  F
32E2:  MOVLW  55
32E4:  MOVWF  FA7
32E6:  MOVLW  AA
32E8:  MOVWF  FA7
32EA:  BSF    FA6.1
32EC:  BTFSC  FA6.1
32EE:  BRA    32EC
32F0:  BCF    FA6.2
32F2:  MOVF   00,W
32F4:  IORWF  FF2,F
....................             delay_ms(20); 
32F6:  MOVLW  14
32F8:  MOVLB  0
32FA:  MOVWF  xD1
32FC:  CALL   07F8
....................             write_eeprom(10,0); 
3300:  MOVLW  0A
3302:  MOVWF  FA9
3304:  CLRF   FA8
3306:  BCF    FA6.6
3308:  BCF    FA6.7
330A:  BSF    FA6.2
330C:  MOVF   FF2,W
330E:  MOVWF  00
3310:  BCF    FF2.7
3312:  MOVLB  F
3314:  MOVLW  55
3316:  MOVWF  FA7
3318:  MOVLW  AA
331A:  MOVWF  FA7
331C:  BSF    FA6.1
331E:  BTFSC  FA6.1
3320:  BRA    331E
3322:  BCF    FA6.2
3324:  MOVF   00,W
3326:  IORWF  FF2,F
....................             delay_ms(700); 
3328:  MOVLW  04
332A:  MOVLB  0
332C:  MOVWF  xBA
332E:  MOVLW  AF
3330:  MOVWF  xD1
3332:  CALL   07F8
3336:  DECFSZ xBA,F
3338:  BRA    332E
....................             segundos=0;minutos=0;horas=0; 
333A:  CLRF   21
333C:  CLRF   22
333E:  CLRF   41
3340:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3342:  MOVLW  1E
3344:  MOVWF  xD1
3346:  CALL   07F8
334A:  MOVLW  01
334C:  MOVWF  18
334E:  CLRF   31
3350:  MOVLW  02
3352:  MOVWF  1C
3354:  MOVWF  1E
3356:  MOVLW  0C
3358:  MOVWF  xCB
335A:  CALL   096E
....................             Cambio=ON; 
335E:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3360:  BSF    F96.2
3362:  BTFSC  F84.2
3364:  BRA    33A2
....................          delay_ms(20); 
3366:  MOVLW  14
3368:  MOVWF  xD1
336A:  CALL   07F8
....................          if(IZQU){ 
336E:  BSF    F96.2
3370:  BTFSC  F84.2
3372:  BRA    33A0
....................             if(Flanco3 == 0){ 
3374:  BTFSC  16.6
3376:  BRA    33A0
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3378:  BSF    16.6
337A:  MOVLW  02
337C:  MOVWF  xBA
337E:  MOVLW  FA
3380:  MOVWF  xD1
3382:  CALL   07F8
3386:  DECFSZ xBA,F
3388:  BRA    337E
338A:  MOVLW  01
338C:  MOVWF  18
338E:  CLRF   31
3390:  MOVLW  02
3392:  MOVWF  1C
3394:  MOVWF  1E
3396:  MOVLW  0C
3398:  MOVWF  xCB
339A:  CALL   096E
339E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
33A0:  BRA    33A4
....................          Flanco3 = 0; 
33A2:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
33A4:  MOVF   18,W
33A6:  SUBLW  05
33A8:  BTFSS  FD8.2
33AA:  BRA    3600
....................       EliminaRuido(); 
33AC:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
33B0:  MOVLW  01
33B2:  MOVWF  xCC
33B4:  MOVWF  xCD
33B6:  CALL   090C
....................          printf(lcd_putc,"  Zero Point Config "); 
33BA:  MOVLW  98
33BC:  MOVWF  FF6
33BE:  MOVLW  05
33C0:  MOVWF  FF7
33C2:  CALL   09CC
....................          lcd_gotoxy(1,2); 
33C6:  MOVLW  01
33C8:  MOVWF  xCC
33CA:  MOVLW  02
33CC:  MOVWF  xCD
33CE:  CALL   090C
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
33D2:  MOVLW  05
33D4:  MOVWF  xBA
33D6:  CALL   17F6
33DA:  MOVFF  00,BA
33DE:  MOVFF  01,BB
33E2:  MOVFF  02,BC
33E6:  MOVFF  03,BD
33EA:  MOVFF  03,D1
33EE:  MOVFF  02,D0
33F2:  MOVFF  01,CF
33F6:  MOVFF  00,CE
33FA:  MOVLW  D7
33FC:  MOVWF  xD5
33FE:  MOVLW  A3
3400:  MOVWF  xD4
3402:  CLRF   xD3
3404:  MOVLW  81
3406:  MOVWF  xD2
3408:  CALL   198C
340C:  MOVFF  00,BA
3410:  MOVFF  01,BB
3414:  MOVFF  02,BC
3418:  MOVFF  03,BD
341C:  MOVLW  AE
341E:  MOVWF  FF6
3420:  MOVLW  05
3422:  MOVWF  FF7
3424:  MOVLW  09
3426:  MOVWF  xBE
3428:  CALL   10D0
342C:  MOVLW  02
342E:  MOVWF  FE9
3430:  MOVFF  BD,C1
3434:  MOVFF  BC,C0
3438:  MOVFF  BB,BF
343C:  MOVFF  BA,BE
3440:  MOVWF  xC2
3442:  CALL   1B38
3446:  MOVLW  BC
3448:  MOVWF  FF6
344A:  MOVLW  05
344C:  MOVWF  FF7
344E:  MOVLW  07
3450:  MOVWF  xBE
3452:  CALL   10D0
....................          lcd_gotoxy(1,3); 
3456:  MOVLW  01
3458:  MOVWF  xCC
345A:  MOVLW  03
345C:  MOVWF  xCD
345E:  CALL   090C
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3462:  CLRF   xBF
3464:  CALL   13DC
3468:  MOVFF  00,BA
346C:  MOVFF  01,BB
3470:  MOVFF  02,BC
3474:  MOVFF  03,BD
3478:  MOVLW  C4
347A:  MOVWF  FF6
347C:  MOVLW  05
347E:  MOVWF  FF7
3480:  MOVLW  08
3482:  MOVWF  xBE
3484:  CALL   10D0
3488:  MOVLW  01
348A:  MOVWF  FE9
348C:  MOVFF  BD,C1
3490:  MOVFF  BC,C0
3494:  MOVFF  BB,BF
3498:  MOVFF  BA,BE
349C:  CLRF   xC2
349E:  CALL   1B38
....................          lcd_gotoxy(1,4); 
34A2:  MOVLW  01
34A4:  MOVWF  xCC
34A6:  MOVLW  04
34A8:  MOVWF  xCD
34AA:  CALL   090C
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
34AE:  MOVLW  D2
34B0:  MOVWF  FF6
34B2:  MOVLW  05
34B4:  MOVWF  FF7
34B6:  MOVLW  07
34B8:  MOVWF  xBE
34BA:  CALL   10D0
34BE:  MOVLW  01
34C0:  MOVWF  FE9
34C2:  MOVFF  A7,C1
34C6:  MOVFF  A6,C0
34CA:  MOVFF  A5,BF
34CE:  MOVFF  A4,BE
34D2:  CLRF   xC2
34D4:  CALL   1B38
....................           
....................          Cambio=OFF; 
34D8:  BCF    17.5
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
34DA:  BSF    F96.1
34DC:  BTFSC  F84.1
34DE:  BRA    35C0
....................          delay_ms(20); 
34E0:  MOVLW  14
34E2:  MOVWF  xD1
34E4:  CALL   07F8
....................          if(RIGHT){ 
34E8:  BSF    F96.1
34EA:  BTFSC  F84.1
34EC:  BRA    35BE
....................             if(Flanco1 == 0){ 
34EE:  BTFSC  16.4
34F0:  BRA    35BE
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
34F2:  MOVLW  01
34F4:  MOVWF  18
34F6:  CLRF   31
34F8:  MOVLW  02
34FA:  MOVWF  1C
34FC:  MOVWF  1E
34FE:  MOVLW  0B
3500:  MOVWF  1B
3502:  MOVLW  02
3504:  MOVWF  xBA
3506:  MOVLW  FA
3508:  MOVWF  xD1
350A:  CALL   07F8
350E:  DECFSZ xBA,F
3510:  BRA    3506
3512:  MOVLW  0C
3514:  MOVWF  xCB
3516:  CALL   096E
....................                G=sensores(0); 
351A:  CLRF   xBF
351C:  CALL   13DC
3520:  MOVFF  03,A7
3524:  MOVFF  02,A6
3528:  MOVFF  01,A5
352C:  MOVFF  00,A4
....................                G16=(int16)G; 
3530:  MOVFF  A7,D1
3534:  MOVFF  A6,D0
3538:  MOVFF  A5,CF
353C:  MOVFF  A4,CE
3540:  CALL   1CBE
3544:  MOVFF  02,43
3548:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
354C:  MOVFF  42,25
3550:  MOVFF  43,26
....................                 
....................                write_eeprom(11,G_l); 
3554:  MOVLW  0B
3556:  MOVWF  FA9
3558:  MOVFF  25,FA8
355C:  BCF    FA6.6
355E:  BCF    FA6.7
3560:  BSF    FA6.2
3562:  MOVF   FF2,W
3564:  MOVWF  00
3566:  BCF    FF2.7
3568:  MOVLB  F
356A:  MOVLW  55
356C:  MOVWF  FA7
356E:  MOVLW  AA
3570:  MOVWF  FA7
3572:  BSF    FA6.1
3574:  BTFSC  FA6.1
3576:  BRA    3574
3578:  BCF    FA6.2
357A:  MOVF   00,W
357C:  IORWF  FF2,F
....................                delay_ms(20); 
357E:  MOVLW  14
3580:  MOVLB  0
3582:  MOVWF  xD1
3584:  CALL   07F8
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
3588:  MOVLW  0C
358A:  MOVWF  FA9
358C:  MOVFF  26,FA8
3590:  BCF    FA6.6
3592:  BCF    FA6.7
3594:  BSF    FA6.2
3596:  MOVF   FF2,W
3598:  MOVWF  00
359A:  BCF    FF2.7
359C:  MOVLB  F
359E:  MOVLW  55
35A0:  MOVWF  FA7
35A2:  MOVLW  AA
35A4:  MOVWF  FA7
35A6:  BSF    FA6.1
35A8:  BTFSC  FA6.1
35AA:  BRA    35A8
35AC:  BCF    FA6.2
35AE:  MOVF   00,W
35B0:  IORWF  FF2,F
....................                delay_ms(20); 
35B2:  MOVLW  14
35B4:  MOVLB  0
35B6:  MOVWF  xD1
35B8:  CALL   07F8
....................                Cambio=ON; 
35BC:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
35BE:  BRA    35C2
....................          Flanco1 = 0; 
35C0:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
35C2:  BSF    F96.2
35C4:  BTFSC  F84.2
35C6:  BRA    35FE
....................          delay_ms(20); 
35C8:  MOVLW  14
35CA:  MOVWF  xD1
35CC:  CALL   07F8
....................          if(IZQU){ 
35D0:  BSF    F96.2
35D2:  BTFSC  F84.2
35D4:  BRA    35FC
....................             if(Flanco3 == 0){ 
35D6:  BTFSC  16.6
35D8:  BRA    35FC
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
35DA:  MOVLW  01
35DC:  MOVWF  18
35DE:  CLRF   31
35E0:  MOVLW  02
35E2:  MOVWF  1C
35E4:  MOVWF  1E
35E6:  MOVLW  0B
35E8:  MOVWF  1B
35EA:  MOVLW  1E
35EC:  MOVWF  xD1
35EE:  CALL   07F8
35F2:  MOVLW  0C
35F4:  MOVWF  xCB
35F6:  CALL   096E
....................                Cambio=ON; 
35FA:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
35FC:  BRA    3600
....................          Flanco3 = 0; 
35FE:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
3600:  MOVF   18,W
3602:  SUBLW  06
3604:  BTFSS  FD8.2
3606:  BRA    372E
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
3608:  BTG    17.4
360A:  BSF    16.4
360C:  MOVLW  01
360E:  MOVWF  18
3610:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
3612:  BTFSS  17.4
3614:  BRA    3676
....................             {estadoalarma=1; 
3616:  BSF    17.4
....................                lcd_gotoxy(1,1); 
3618:  MOVLW  01
361A:  MOVWF  xCC
361C:  MOVWF  xCD
361E:  CALL   090C
....................                printf(lcd_putc,"                    "); 
3622:  MOVLW  E0
3624:  MOVWF  FF6
3626:  MOVLW  05
3628:  MOVWF  FF7
362A:  CALL   09CC
....................                lcd_gotoxy(1,2); 
362E:  MOVLW  01
3630:  MOVWF  xCC
3632:  MOVLW  02
3634:  MOVWF  xCD
3636:  CALL   090C
....................                printf(lcd_putc,"        Activo      "); 
363A:  MOVLW  F6
363C:  MOVWF  FF6
363E:  MOVLW  05
3640:  MOVWF  FF7
3642:  CALL   09CC
....................                lcd_gotoxy(1,3); 
3646:  MOVLW  01
3648:  MOVWF  xCC
364A:  MOVLW  03
364C:  MOVWF  xCD
364E:  CALL   090C
....................                printf(lcd_putc,"        Alarma      "); 
3652:  MOVLW  0C
3654:  MOVWF  FF6
3656:  MOVLW  06
3658:  MOVWF  FF7
365A:  CALL   09CC
....................                lcd_gotoxy(1,4); 
365E:  MOVLW  01
3660:  MOVWF  xCC
3662:  MOVLW  04
3664:  MOVWF  xCD
3666:  CALL   090C
....................                printf(lcd_putc,"                    ");} 
366A:  MOVLW  22
366C:  MOVWF  FF6
366E:  MOVLW  06
3670:  MOVWF  FF7
3672:  CALL   09CC
....................                 
....................             if(estadoalarma==0) 
3676:  BTFSC  17.4
3678:  BRA    36DA
....................             {estadoalarma=0; 
367A:  BCF    17.4
....................                lcd_gotoxy(1,1); 
367C:  MOVLW  01
367E:  MOVWF  xCC
3680:  MOVWF  xCD
3682:  CALL   090C
....................                printf(lcd_putc,"                    "); 
3686:  MOVLW  38
3688:  MOVWF  FF6
368A:  MOVLW  06
368C:  MOVWF  FF7
368E:  CALL   09CC
....................                lcd_gotoxy(1,2); 
3692:  MOVLW  01
3694:  MOVWF  xCC
3696:  MOVLW  02
3698:  MOVWF  xCD
369A:  CALL   090C
....................                printf(lcd_putc,"      Desactivo     "); 
369E:  MOVLW  4E
36A0:  MOVWF  FF6
36A2:  MOVLW  06
36A4:  MOVWF  FF7
36A6:  CALL   09CC
....................                lcd_gotoxy(1,3); 
36AA:  MOVLW  01
36AC:  MOVWF  xCC
36AE:  MOVLW  03
36B0:  MOVWF  xCD
36B2:  CALL   090C
....................                printf(lcd_putc,"       Alarma       "); 
36B6:  MOVLW  64
36B8:  MOVWF  FF6
36BA:  MOVLW  06
36BC:  MOVWF  FF7
36BE:  CALL   09CC
....................                lcd_gotoxy(1,4); 
36C2:  MOVLW  01
36C4:  MOVWF  xCC
36C6:  MOVLW  04
36C8:  MOVWF  xCD
36CA:  CALL   090C
....................                printf(lcd_putc,"                    ");} 
36CE:  MOVLW  7A
36D0:  MOVWF  FF6
36D2:  MOVLW  06
36D4:  MOVWF  FF7
36D6:  CALL   09CC
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
36DA:  MOVLW  00
36DC:  BTFSC  17.4
36DE:  MOVLW  01
36E0:  MOVWF  xBA
36E2:  MOVLW  04
36E4:  MOVWF  FA9
36E6:  MOVFF  BA,FA8
36EA:  BCF    FA6.6
36EC:  BCF    FA6.7
36EE:  BSF    FA6.2
36F0:  MOVF   FF2,W
36F2:  MOVWF  00
36F4:  BCF    FF2.7
36F6:  MOVLB  F
36F8:  MOVLW  55
36FA:  MOVWF  FA7
36FC:  MOVLW  AA
36FE:  MOVWF  FA7
3700:  BSF    FA6.1
3702:  BTFSC  FA6.1
3704:  BRA    3702
3706:  BCF    FA6.2
3708:  MOVF   00,W
370A:  IORWF  FF2,F
370C:  MOVLW  04
370E:  MOVLB  0
3710:  MOVWF  xBA
3712:  MOVLW  FA
3714:  MOVWF  xD1
3716:  CALL   07F8
371A:  DECFSZ xBA,F
371C:  BRA    3712
371E:  MOVLW  02
3720:  MOVWF  1C
3722:  MOVWF  1E
3724:  MOVLW  0C
3726:  MOVWF  xCB
3728:  CALL   096E
....................             Cambio=ON; 
372C:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
372E:  MOVF   18,W
3730:  SUBLW  07
3732:  BTFSS  FD8.2
3734:  BRA    38CE
....................       if(VelMotor>6)VelMotor=6; 
3736:  MOVF   xB0,W
3738:  SUBLW  06
373A:  BC    3740
373C:  MOVLW  06
373E:  MOVWF  xB0
....................       if(VelMotor<1)VelMotor=1; 
3740:  MOVF   xB0,F
3742:  BNZ   3748
3744:  MOVLW  01
3746:  MOVWF  xB0
....................        
....................       lcd_gotoxy(1,1); 
3748:  MOVLW  01
374A:  MOVWF  xCC
374C:  MOVWF  xCD
374E:  CALL   090C
....................       printf(lcd_putc,"Seleccione Velocidad"); 
3752:  MOVLW  90
3754:  MOVWF  FF6
3756:  MOVLW  06
3758:  MOVWF  FF7
375A:  CALL   09CC
....................       lcd_gotoxy(1,2); 
375E:  MOVLW  01
3760:  MOVWF  xCC
3762:  MOVLW  02
3764:  MOVWF  xCD
3766:  CALL   090C
....................       printf(lcd_putc,"   del Ventilador   "); 
376A:  MOVLW  A6
376C:  MOVWF  FF6
376E:  MOVLW  06
3770:  MOVWF  FF7
3772:  CALL   09CC
....................       lcd_gotoxy(1,3); 
3776:  MOVLW  01
3778:  MOVWF  xCC
377A:  MOVLW  03
377C:  MOVWF  xCD
377E:  CALL   090C
....................       printf(lcd_putc,"     Vel: %u       ",VelMotor); 
3782:  MOVLW  BC
3784:  MOVWF  FF6
3786:  MOVLW  06
3788:  MOVWF  FF7
378A:  MOVLW  0A
378C:  MOVWF  xBE
378E:  CALL   10D0
3792:  MOVFF  B0,BA
3796:  MOVLW  1B
3798:  MOVWF  xBB
379A:  CALL   12BA
379E:  MOVLW  C8
37A0:  MOVWF  FF6
37A2:  MOVLW  06
37A4:  MOVWF  FF7
37A6:  MOVLW  07
37A8:  MOVWF  xBE
37AA:  CALL   10D0
....................       lcd_gotoxy(1,4); 
37AE:  MOVLW  01
37B0:  MOVWF  xCC
37B2:  MOVLW  04
37B4:  MOVWF  xCD
37B6:  CALL   090C
....................       printf(lcd_putc,"                    ");       
37BA:  MOVLW  D0
37BC:  MOVWF  FF6
37BE:  MOVLW  06
37C0:  MOVWF  FF7
37C2:  CALL   09CC
....................        
....................       if(UP && VelMotor<6)//Si oprime hacia arriba 
37C6:  BSF    F92.5
37C8:  BTFSC  F80.5
37CA:  BRA    37DC
37CC:  MOVF   xB0,W
37CE:  SUBLW  05
37D0:  BNC   37DC
....................       {   
....................          delay_ms(200);VelMotor++; 
37D2:  MOVLW  C8
37D4:  MOVWF  xD1
37D6:  CALL   07F8
37DA:  INCF   xB0,F
....................       } 
....................              
....................       if(DOWN && VelMotor>0)//Si oprime hacia abajo 
37DC:  BSF    F96.0
37DE:  BTFSC  F84.0
37E0:  BRA    37F0
37E2:  MOVF   xB0,F
37E4:  BZ    37F0
....................       {   
....................          delay_ms(200);VelMotor--; 
37E6:  MOVLW  C8
37E8:  MOVWF  xD1
37EA:  CALL   07F8
37EE:  DECF   xB0,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
37F0:  BSF    F96.1
37F2:  BTFSC  F84.1
37F4:  BRA    37FE
....................       {            
....................          VelocidadMotor(VelMotor); 
37F6:  MOVFF  B0,BA
37FA:  CALL   104C
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
37FE:  BSF    F96.2
3800:  BTFSC  F84.2
3802:  BRA    38CE
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3804:  MOVLW  64
3806:  MOVWF  xD1
3808:  CALL   07F8
380C:  MOVLW  02
380E:  MOVWF  1C
3810:  MOVWF  1E
3812:  MOVLW  0C
3814:  MOVWF  xCB
3816:  CALL   096E
....................          write_eeprom(13,VelMotor);//Guardar valor de Setpoint en eeprom 
381A:  MOVLW  0D
381C:  MOVWF  FA9
381E:  MOVFF  B0,FA8
3822:  BCF    FA6.6
3824:  BCF    FA6.7
3826:  BSF    FA6.2
3828:  MOVF   FF2,W
382A:  MOVWF  00
382C:  BCF    FF2.7
382E:  MOVLB  F
3830:  MOVLW  55
3832:  MOVWF  FA7
3834:  MOVLW  AA
3836:  MOVWF  FA7
3838:  BSF    FA6.1
383A:  BTFSC  FA6.1
383C:  BRA    383A
383E:  BCF    FA6.2
3840:  MOVF   00,W
3842:  IORWF  FF2,F
....................          delay_ms(20); 
3844:  MOVLW  14
3846:  MOVLB  0
3848:  MOVWF  xD1
384A:  CALL   07F8
....................          lcd_gotoxy(1,1); 
384E:  MOVLW  01
3850:  MOVWF  xCC
3852:  MOVWF  xCD
3854:  CALL   090C
....................          printf(lcd_putc,"                    "); 
3858:  MOVLW  E6
385A:  MOVWF  FF6
385C:  MOVLW  06
385E:  MOVWF  FF7
3860:  CALL   09CC
....................          lcd_gotoxy(1,2); 
3864:  MOVLW  01
3866:  MOVWF  xCC
3868:  MOVLW  02
386A:  MOVWF  xCD
386C:  CALL   090C
....................          printf(lcd_putc,"     Velocidad      "); 
3870:  MOVLW  FC
3872:  MOVWF  FF6
3874:  MOVLW  06
3876:  MOVWF  FF7
3878:  CALL   09CC
....................          lcd_gotoxy(1,3); 
387C:  MOVLW  01
387E:  MOVWF  xCC
3880:  MOVLW  03
3882:  MOVWF  xCD
3884:  CALL   090C
....................          printf(lcd_putc,"      Almacenada    "); 
3888:  MOVLW  12
388A:  MOVWF  FF6
388C:  MOVLW  07
388E:  MOVWF  FF7
3890:  CALL   09CC
....................          lcd_gotoxy(1,4); 
3894:  MOVLW  01
3896:  MOVWF  xCC
3898:  MOVLW  04
389A:  MOVWF  xCD
389C:  CALL   090C
....................          printf(lcd_putc,"                    ");  
38A0:  MOVLW  28
38A2:  MOVWF  FF6
38A4:  MOVLW  07
38A6:  MOVWF  FF7
38A8:  CALL   09CC
....................          delay_ms(1000); 
38AC:  MOVLW  04
38AE:  MOVWF  xBA
38B0:  MOVLW  FA
38B2:  MOVWF  xD1
38B4:  CALL   07F8
38B8:  DECFSZ xBA,F
38BA:  BRA    38B0
....................          printf(lcd_putc,"\f"); 
38BC:  MOVLW  0C
38BE:  MOVWF  xCB
38C0:  CALL   096E
....................          lcd_init(); 
38C4:  CALL   0888
....................          Menu=1; paso=0; 
38C8:  MOVLW  01
38CA:  MOVWF  18
38CC:  CLRF   31
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
38CE:  MOVF   18,W
38D0:  SUBLW  32
38D2:  BTFSS  FD8.2
38D4:  BRA    3F14
....................    if(Lectura==1){ 
38D6:  BTFSS  17.0
38D8:  BRA    3AFC
....................       Lectura=0; 
38DA:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
38DC:  MOVLW  08
38DE:  MOVWF  xBA
38E0:  CALL   17F6
38E4:  MOVFF  03,A3
38E8:  MOVFF  02,A2
38EC:  MOVFF  01,A1
38F0:  MOVFF  00,A0
....................       lcd_gotoxy(1,1); 
38F4:  MOVLW  01
38F6:  MOVWF  xCC
38F8:  MOVWF  xCD
38FA:  CALL   090C
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
38FE:  MOVFF  A3,D1
3902:  MOVFF  A2,D0
3906:  MOVFF  A1,CF
390A:  MOVFF  A0,CE
390E:  MOVLW  D7
3910:  MOVWF  xD5
3912:  MOVLW  A3
3914:  MOVWF  xD4
3916:  CLRF   xD3
3918:  MOVLW  81
391A:  MOVWF  xD2
391C:  CALL   198C
3920:  MOVFF  00,BA
3924:  MOVFF  01,BB
3928:  MOVFF  02,BC
392C:  MOVFF  03,BD
3930:  MOVLW  3E
3932:  MOVWF  FF6
3934:  MOVLW  07
3936:  MOVWF  FF7
3938:  MOVLW  08
393A:  MOVWF  xBE
393C:  CALL   10D0
3940:  MOVLW  02
3942:  MOVWF  FE9
3944:  MOVFF  BD,C1
3948:  MOVFF  BC,C0
394C:  MOVFF  BB,BF
3950:  MOVFF  BA,BE
3954:  MOVWF  xC2
3956:  CALL   1B38
395A:  MOVLW  4B
395C:  MOVWF  FF6
395E:  MOVLW  07
3960:  MOVWF  FF7
3962:  MOVLW  07
3964:  MOVWF  xBE
3966:  CALL   10D0
....................       Saturacion=(CaidaPresion/0.24)*11; 
396A:  MOVFF  A3,D1
396E:  MOVFF  A2,D0
3972:  MOVFF  A1,CF
3976:  MOVFF  A0,CE
397A:  MOVLW  8F
397C:  MOVWF  xD5
397E:  MOVLW  C2
3980:  MOVWF  xD4
3982:  MOVLW  75
3984:  MOVWF  xD3
3986:  MOVLW  7C
3988:  MOVWF  xD2
398A:  CALL   1432
398E:  MOVFF  00,BA
3992:  MOVFF  01,BB
3996:  MOVFF  02,BC
399A:  MOVFF  03,BD
399E:  MOVFF  03,D1
39A2:  MOVFF  02,D0
39A6:  MOVFF  01,CF
39AA:  MOVFF  00,CE
39AE:  CLRF   xD5
39B0:  CLRF   xD4
39B2:  MOVLW  30
39B4:  MOVWF  xD3
39B6:  MOVLW  82
39B8:  MOVWF  xD2
39BA:  CALL   198C
39BE:  MOVFF  03,9F
39C2:  MOVFF  02,9E
39C6:  MOVFF  01,9D
39CA:  MOVFF  00,9C
....................        
....................       if(Saturacion>11) 
39CE:  CLRF   xD1
39D0:  CLRF   xD0
39D2:  MOVLW  30
39D4:  MOVWF  xCF
39D6:  MOVLW  82
39D8:  MOVWF  xCE
39DA:  MOVFF  9F,D5
39DE:  MOVFF  9E,D4
39E2:  MOVFF  9D,D3
39E6:  MOVFF  9C,D2
39EA:  CALL   0C66
39EE:  BNC   39FC
....................       { 
....................          Saturacion=11; 
39F0:  CLRF   x9F
39F2:  CLRF   x9E
39F4:  MOVLW  30
39F6:  MOVWF  x9D
39F8:  MOVLW  82
39FA:  MOVWF  x9C
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
39FC:  CLRF   2D
39FE:  MOVFF  9F,BD
3A02:  MOVFF  9E,BC
3A06:  MOVFF  9D,BB
3A0A:  MOVFF  9C,BA
3A0E:  CALL   2030
3A12:  MOVFF  00,BA
3A16:  MOVFF  01,BB
3A1A:  MOVFF  02,BC
3A1E:  MOVFF  03,BD
3A22:  CLRF   xD3
3A24:  MOVFF  2D,D2
3A28:  CALL   0A52
3A2C:  MOVFF  03,D1
3A30:  MOVFF  02,D0
3A34:  MOVFF  01,CF
3A38:  MOVFF  00,CE
3A3C:  MOVFF  BD,D5
3A40:  MOVFF  BC,D4
3A44:  MOVFF  BB,D3
3A48:  MOVFF  BA,D2
3A4C:  CALL   0C66
3A50:  BNC   3A6E
....................       { 
....................          lcd_gotoxy(i+8,2); 
3A52:  MOVLW  08
3A54:  ADDWF  2D,W
3A56:  MOVWF  xBA
3A58:  MOVWF  xCC
3A5A:  MOVLW  02
3A5C:  MOVWF  xCD
3A5E:  CALL   090C
....................          printf(lcd_putc,"Ñ"); 
3A62:  MOVLW  D1
3A64:  MOVWF  xCB
3A66:  CALL   096E
....................       } 
3A6A:  INCF   2D,F
3A6C:  BRA    39FE
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3A6E:  MOVFF  9F,BD
3A72:  MOVFF  9E,BC
3A76:  MOVFF  9D,BB
3A7A:  MOVFF  9C,BA
3A7E:  CALL   2030
3A82:  MOVFF  03,D1
3A86:  MOVFF  02,D0
3A8A:  MOVFF  01,CF
3A8E:  MOVFF  00,CE
3A92:  CALL   1CBE
3A96:  MOVFF  01,2D
3A9A:  MOVF   2D,W
3A9C:  SUBLW  0A
3A9E:  BNC   3ABC
....................       { 
....................          lcd_gotoxy(i+8,2); 
3AA0:  MOVLW  08
3AA2:  ADDWF  2D,W
3AA4:  MOVWF  xBA
3AA6:  MOVWF  xCC
3AA8:  MOVLW  02
3AAA:  MOVWF  xCD
3AAC:  CALL   090C
....................          printf(lcd_putc," "); 
3AB0:  MOVLW  20
3AB2:  MOVWF  xCB
3AB4:  CALL   096E
....................       } 
3AB8:  INCF   2D,F
3ABA:  BRA    3A9A
....................        
....................       lcd_gotoxy(9,3); 
3ABC:  MOVLW  09
3ABE:  MOVWF  xCC
3AC0:  MOVLW  03
3AC2:  MOVWF  xCD
3AC4:  CALL   090C
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3AC8:  MOVLW  54
3ACA:  MOVWF  FF6
3ACC:  MOVLW  07
3ACE:  MOVWF  FF7
3AD0:  MOVLW  06
3AD2:  MOVWF  xBE
3AD4:  CALL   10D0
3AD8:  MOVFF  27,BA
3ADC:  MOVLW  03
3ADE:  MOVWF  xBB
3AE0:  CALL   12BA
3AE4:  MOVLW  3A
3AE6:  MOVWF  xCB
3AE8:  CALL   096E
3AEC:  MOVFF  28,BA
3AF0:  MOVLW  01
3AF2:  MOVWF  xBB
3AF4:  CALL   12BA
....................       EliminaRuido(); 
3AF8:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
3AFC:  BTFSS  16.7
3AFE:  BRA    3B98
....................    { 
....................       if(estadoalarma==1) 
3B00:  BTFSS  17.4
3B02:  BRA    3B8E
....................       { 
....................          printf(lcd_putc,"\f"); 
3B04:  MOVLW  0C
3B06:  MOVWF  xCB
3B08:  CALL   096E
....................          lcd_gotoxy(1,2); 
3B0C:  MOVLW  01
3B0E:  MOVWF  xCC
3B10:  MOVLW  02
3B12:  MOVWF  xCD
3B14:  CALL   090C
....................          printf(lcd_putc,"  Temporizador  de  "); 
3B18:  MOVLW  64
3B1A:  MOVWF  FF6
3B1C:  MOVLW  07
3B1E:  MOVWF  FF7
3B20:  CALL   09CC
....................          lcd_gotoxy(1,3); 
3B24:  MOVLW  01
3B26:  MOVWF  xCC
3B28:  MOVLW  03
3B2A:  MOVWF  xCD
3B2C:  CALL   090C
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3B30:  MOVLW  7A
3B32:  MOVWF  FF6
3B34:  MOVLW  07
3B36:  MOVWF  FF7
3B38:  CALL   09CC
....................          lcd_gotoxy(1,4); 
3B3C:  MOVLW  01
3B3E:  MOVWF  xCC
3B40:  MOVLW  04
3B42:  MOVWF  xCD
3B44:  CALL   090C
....................          printf(lcd_putc,"                    "); 
3B48:  MOVLW  90
3B4A:  MOVWF  FF6
3B4C:  MOVLW  07
3B4E:  MOVWF  FF7
3B50:  CALL   09CC
....................          lcd_gotoxy(1,1); 
3B54:  MOVLW  01
3B56:  MOVWF  xCC
3B58:  MOVWF  xCD
3B5A:  CALL   090C
....................          printf(lcd_putc,"                    "); 
3B5E:  MOVLW  A6
3B60:  MOVWF  FF6
3B62:  MOVLW  07
3B64:  MOVWF  FF7
3B66:  CALL   09CC
....................          for(i=0;i<5;i++) 
3B6A:  CLRF   2D
3B6C:  MOVF   2D,W
3B6E:  SUBLW  04
3B70:  BNC   3B8E
....................          { 
....................             Buzzer_on; 
3B72:  BSF    F8B.0
3B74:  BCF    F94.0
....................             delay_ms(200); 
3B76:  MOVLW  C8
3B78:  MOVWF  xD1
3B7A:  CALL   07F8
....................             Buzzer_off; 
3B7E:  BCF    F8B.0
3B80:  BCF    F94.0
....................             delay_ms(200); 
3B82:  MOVLW  C8
3B84:  MOVWF  xD1
3B86:  CALL   07F8
....................          } 
3B8A:  INCF   2D,F
3B8C:  BRA    3B6C
....................       } 
....................       tiempo_cumplido=0; 
3B8E:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
3B90:  MOVLW  0C
3B92:  MOVWF  xCB
3B94:  CALL   096E
....................    } 
....................     
....................    if(CaidaPresion>=0.23) 
3B98:  MOVLW  1F
3B9A:  MOVWF  xD1
3B9C:  MOVLW  85
3B9E:  MOVWF  xD0
3BA0:  MOVLW  6B
3BA2:  MOVWF  xCF
3BA4:  MOVLW  7C
3BA6:  MOVWF  xCE
3BA8:  MOVFF  A3,D5
3BAC:  MOVFF  A2,D4
3BB0:  MOVFF  A1,D3
3BB4:  MOVFF  A0,D2
3BB8:  CALL   0C66
3BBC:  BC    3BC0
3BBE:  BNZ   3BC6
....................    {  
....................       ActivaBuzzer=1; 
3BC0:  MOVLW  01
3BC2:  MOVWF  3D
....................    } 
....................    else 
3BC4:  BRA    3BCC
....................    { 
....................       ActivaBuzzer=0; 
3BC6:  CLRF   3D
....................       Buzzer_off; 
3BC8:  BCF    F8B.0
3BCA:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
3BCC:  MOVLW  01
3BCE:  MOVWF  xCC
3BD0:  MOVLW  02
3BD2:  MOVWF  xCD
3BD4:  CALL   090C
....................       printf(lcd_putc,"Filtro:"); 
3BD8:  MOVLW  BC
3BDA:  MOVWF  FF6
3BDC:  MOVLW  07
3BDE:  MOVWF  FF7
3BE0:  CALL   09CC
....................        
....................       if(estadomv==1) 
3BE4:  BTFSS  16.2
3BE6:  BRA    3C02
....................       { 
....................          lcd_gotoxy(1,4); 
3BE8:  MOVLW  01
3BEA:  MOVWF  xCC
3BEC:  MOVLW  04
3BEE:  MOVWF  xCD
3BF0:  CALL   090C
....................          printf(lcd_putc,"Motor:ON ");       
3BF4:  MOVLW  C4
3BF6:  MOVWF  FF6
3BF8:  MOVLW  07
3BFA:  MOVWF  FF7
3BFC:  CALL   09CC
....................       } 
....................       else 
3C00:  BRA    3C1A
....................       { 
....................          lcd_gotoxy(1,4); 
3C02:  MOVLW  01
3C04:  MOVWF  xCC
3C06:  MOVLW  04
3C08:  MOVWF  xCD
3C0A:  CALL   090C
....................          printf(lcd_putc,"Motor:OFF"); 
3C0E:  MOVLW  CE
3C10:  MOVWF  FF6
3C12:  MOVLW  07
3C14:  MOVWF  FF7
3C16:  CALL   09CC
....................       } 
....................        
....................       if(estadouv==1) 
3C1A:  BTFSS  16.0
3C1C:  BRA    3C38
....................       { 
....................          lcd_gotoxy(13,4); 
3C1E:  MOVLW  0D
3C20:  MOVWF  xCC
3C22:  MOVLW  04
3C24:  MOVWF  xCD
3C26:  CALL   090C
....................          printf(lcd_putc,"UV:ON "); 
3C2A:  MOVLW  D8
3C2C:  MOVWF  FF6
3C2E:  MOVLW  07
3C30:  MOVWF  FF7
3C32:  CALL   09CC
....................       } 
....................       else 
3C36:  BRA    3C50
....................       {          
....................          lcd_gotoxy(13,4); 
3C38:  MOVLW  0D
3C3A:  MOVWF  xCC
3C3C:  MOVLW  04
3C3E:  MOVWF  xCD
3C40:  CALL   090C
....................          printf(lcd_putc,"UV:OFF"); 
3C44:  MOVLW  E0
3C46:  MOVWF  FF6
3C48:  MOVLW  07
3C4A:  MOVWF  FF7
3C4C:  CALL   09CC
....................       } 
....................        
....................       if(estadofl==1) 
3C50:  BTFSS  16.1
3C52:  BRA    3C6E
....................       { 
....................          lcd_gotoxy(1,3); 
3C54:  MOVLW  01
3C56:  MOVWF  xCC
3C58:  MOVLW  03
3C5A:  MOVWF  xCD
3C5C:  CALL   090C
....................          printf(lcd_putc,"Luz:ON "); 
3C60:  MOVLW  E8
3C62:  MOVWF  FF6
3C64:  MOVLW  07
3C66:  MOVWF  FF7
3C68:  CALL   09CC
....................       } 
....................       else 
3C6C:  BRA    3C86
....................       { 
....................          lcd_gotoxy(1,3); 
3C6E:  MOVLW  01
3C70:  MOVWF  xCC
3C72:  MOVLW  03
3C74:  MOVWF  xCD
3C76:  CALL   090C
....................          printf(lcd_putc,"Luz:OFF"); 
3C7A:  MOVLW  F0
3C7C:  MOVWF  FF6
3C7E:  MOVLW  07
3C80:  MOVWF  FF7
3C82:  CALL   09CC
....................       }  
....................       Cambio=OFF; 
3C86:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
3C88:  BTFSS  16.2
3C8A:  BRA    3CB6
....................       if(flagmv==0){ 
3C8C:  BTFSC  17.6
3C8E:  BRA    3CAC
....................          VelocidadMotor(6);lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
3C90:  MOVLW  06
3C92:  MOVWF  xBA
3C94:  CALL   104C
3C98:  CALL   0888
3C9C:  MOVLW  C8
3C9E:  MOVWF  xD1
3CA0:  CALL   07F8
3CA4:  CALL   0888
3CA8:  BSF    17.6
3CAA:  BSF    17.5
....................       } 
....................       VelocidadMotor(VelMotor); 
3CAC:  MOVFF  B0,BA
3CB0:  CALL   104C
....................    }else{ 
3CB4:  BRA    3CD4
....................       VelocidadMotor(0); 
3CB6:  CLRF   xBA
3CB8:  CALL   104C
....................       if(flagmv==1){ 
3CBC:  BTFSS  17.6
3CBE:  BRA    3CD4
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
3CC0:  CALL   0888
3CC4:  MOVLW  C8
3CC6:  MOVWF  xD1
3CC8:  CALL   07F8
3CCC:  CALL   0888
3CD0:  BCF    17.6
3CD2:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(estadouv==1 && !VIDRIO){ 
3CD4:  BTFSS  16.0
3CD6:  BRA    3D10
3CD8:  BSF    F92.1
3CDA:  BTFSS  F80.1
3CDC:  BRA    3D10
....................       estadomv=0; 
3CDE:  BCF    16.2
....................       VelocidadMotor(0); 
3CE0:  CLRF   xBA
3CE2:  CALL   104C
....................       estadofl=0; 
3CE6:  BCF    16.1
....................       Luz_Blanca_off; 
3CE8:  BSF    F8A.2
3CEA:  BCF    F93.2
....................       Luz_UV_on; 
3CEC:  BCF    F8A.1
3CEE:  BCF    F93.1
....................       tiempo_cumplido=0; 
3CF0:  BCF    16.7
....................       if(flaguv==0){ 
3CF2:  BTFSC  17.1
3CF4:  BRA    3D0E
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
3CF6:  CALL   0888
3CFA:  MOVLW  C8
3CFC:  MOVWF  xD1
3CFE:  CALL   07F8
3D02:  CALL   0888
3D06:  BSF    17.1
3D08:  MOVLW  01
3D0A:  MOVWF  30
3D0C:  BSF    17.5
....................       } 
....................    }else{ 
3D0E:  BRA    3D32
....................       estadouv=0; 
3D10:  BCF    16.0
....................       Luz_UV_off; 
3D12:  BSF    F8A.1
3D14:  BCF    F93.1
....................       if(flaguv==1){ 
3D16:  BTFSS  17.1
3D18:  BRA    3D32
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
3D1A:  CALL   0888
3D1E:  MOVLW  C8
3D20:  MOVWF  xD1
3D22:  CALL   07F8
3D26:  CALL   0888
3D2A:  BCF    17.1
3D2C:  MOVLW  01
3D2E:  MOVWF  30
3D30:  BSF    17.5
....................       } 
....................    } 
....................        
....................    if(estadofl==1) 
3D32:  BTFSS  16.1
3D34:  BRA    3D54
....................    { 
....................       Luz_Blanca_on; 
3D36:  BCF    F8A.2
3D38:  BCF    F93.2
....................       if(flagfl==0) 
3D3A:  BTFSC  17.2
3D3C:  BRA    3D52
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
3D3E:  CALL   0888
3D42:  MOVLW  C8
3D44:  MOVWF  xD1
3D46:  CALL   07F8
3D4A:  CALL   0888
3D4E:  BSF    17.2
3D50:  BSF    17.5
....................       } 
....................    } 
....................    else 
3D52:  BRA    3D70
....................    { 
....................       Luz_Blanca_off; 
3D54:  BSF    F8A.2
3D56:  BCF    F93.2
....................       if(flagfl==1) 
3D58:  BTFSS  17.2
3D5A:  BRA    3D70
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
3D5C:  CALL   0888
3D60:  MOVLW  C8
3D62:  MOVWF  xD1
3D64:  CALL   07F8
3D68:  CALL   0888
3D6C:  BCF    17.2
3D6E:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia arriba 
3D70:  BSF    F96.0
3D72:  BTFSC  F84.0
3D74:  BRA    3DA0
....................    { 
....................       delay_ms(20); 
3D76:  MOVLW  14
3D78:  MOVWF  xD1
3D7A:  CALL   07F8
....................       if(DOWN){ 
3D7E:  BSF    F96.0
3D80:  BTFSC  F84.0
3D82:  BRA    3D9E
....................          if(Flanco == 0) 
3D84:  BTFSC  16.3
3D86:  BRA    3D9E
....................          { 
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
3D88:  BTG    16.1
3D8A:  BSF    16.3
3D8C:  MOVLW  02
3D8E:  MOVWF  xBA
3D90:  MOVLW  96
3D92:  MOVWF  xD1
3D94:  CALL   07F8
3D98:  DECFSZ xBA,F
3D9A:  BRA    3D90
3D9C:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3D9E:  BRA    3DA2
....................    { 
....................       Flanco = 0; 
3DA0:  BCF    16.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3DA2:  BSF    F96.1
3DA4:  BTFSC  F84.1
3DA6:  BRA    3DD2
....................    { 
....................       delay_ms(20); 
3DA8:  MOVLW  14
3DAA:  MOVWF  xD1
3DAC:  CALL   07F8
....................       if(RIGHT){ 
3DB0:  BSF    F96.1
3DB2:  BTFSC  F84.1
3DB4:  BRA    3DD0
....................          if(Flanco1 == 0) 
3DB6:  BTFSC  16.4
3DB8:  BRA    3DD0
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
3DBA:  BTG    16.2
3DBC:  BSF    16.4
3DBE:  MOVLW  02
3DC0:  MOVWF  xBA
3DC2:  MOVLW  96
3DC4:  MOVWF  xD1
3DC6:  CALL   07F8
3DCA:  DECFSZ xBA,F
3DCC:  BRA    3DC2
3DCE:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3DD0:  BRA    3DD4
....................    { 
....................       Flanco1 = 0; 
3DD2:  BCF    16.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
3DD4:  BSF    F96.2
3DD6:  BTFSC  F84.2
3DD8:  BRA    3DF4
....................    { 
....................       delay_ms(20); 
3DDA:  MOVLW  14
3DDC:  MOVWF  xD1
3DDE:  CALL   07F8
....................       if(IZQU){ 
3DE2:  BSF    F96.2
3DE4:  BTFSC  F84.2
3DE6:  BRA    3DF4
....................          delay_ms(150);  
3DE8:  MOVLW  96
3DEA:  MOVWF  xD1
3DEC:  CALL   07F8
....................          estadouv=!estadouv; 
3DF0:  BTG    16.0
....................          Cambio=ON; 
3DF2:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3DF4:  BSF    F92.5
3DF6:  BTFSC  F80.5
3DF8:  BRA    3E36
....................    { 
....................       delay_ms(20); 
3DFA:  MOVLW  14
3DFC:  MOVWF  xD1
3DFE:  CALL   07F8
....................       if(UP){ 
3E02:  BSF    F92.5
3E04:  BTFSC  F80.5
3E06:  BRA    3E36
....................          delay_ms(200); 
3E08:  MOVLW  C8
3E0A:  MOVWF  xD1
3E0C:  CALL   07F8
....................          printf(lcd_putc,"\f"); 
3E10:  MOVLW  0C
3E12:  MOVWF  xCB
3E14:  CALL   096E
....................          delay_ms(300); 
3E18:  MOVLW  02
3E1A:  MOVWF  xBA
3E1C:  MOVLW  96
3E1E:  MOVWF  xD1
3E20:  CALL   07F8
3E24:  DECFSZ xBA,F
3E26:  BRA    3E1C
....................          Menu=1;  
3E28:  MOVLW  01
3E2A:  MOVWF  18
....................          paso=0; 
3E2C:  CLRF   31
....................          Flecha=2; 
3E2E:  MOVLW  02
3E30:  MOVWF  1C
....................          Flecha2=2; 
3E32:  MOVWF  1E
....................          Cambio=ON; 
3E34:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(guardaruv==1) 
3E36:  DECFSZ 30,W
3E38:  BRA    3EFC
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
3E3A:  MOVLW  07
3E3C:  MOVWF  FA9
3E3E:  MOVFF  21,FA8
3E42:  BCF    FA6.6
3E44:  BCF    FA6.7
3E46:  BSF    FA6.2
3E48:  MOVF   FF2,W
3E4A:  MOVWF  00
3E4C:  BCF    FF2.7
3E4E:  MOVLB  F
3E50:  MOVLW  55
3E52:  MOVWF  FA7
3E54:  MOVLW  AA
3E56:  MOVWF  FA7
3E58:  BSF    FA6.1
3E5A:  BTFSC  FA6.1
3E5C:  BRA    3E5A
3E5E:  BCF    FA6.2
3E60:  MOVF   00,W
3E62:  IORWF  FF2,F
3E64:  MOVLW  08
3E66:  MOVWF  FA9
3E68:  MOVFF  22,FA8
3E6C:  BCF    FA6.6
3E6E:  BCF    FA6.7
3E70:  BSF    FA6.2
3E72:  MOVF   FF2,W
3E74:  MOVWF  00
3E76:  BCF    FF2.7
3E78:  MOVLW  55
3E7A:  MOVWF  FA7
3E7C:  MOVLW  AA
3E7E:  MOVWF  FA7
3E80:  BSF    FA6.1
3E82:  BTFSC  FA6.1
3E84:  BRA    3E82
3E86:  BCF    FA6.2
3E88:  MOVF   00,W
3E8A:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
3E8C:  MOVFF  40,23
....................       horasH=make8(horas,1); 
3E90:  MOVFF  41,24
....................       write_eeprom(9,horasL); 
3E94:  MOVLW  09
3E96:  MOVWF  FA9
3E98:  MOVFF  23,FA8
3E9C:  BCF    FA6.6
3E9E:  BCF    FA6.7
3EA0:  BSF    FA6.2
3EA2:  MOVFF  FF2,00
3EA6:  BCF    FF2.7
3EA8:  MOVLW  55
3EAA:  MOVWF  FA7
3EAC:  MOVLW  AA
3EAE:  MOVWF  FA7
3EB0:  BSF    FA6.1
3EB2:  BTFSC  FA6.1
3EB4:  BRA    3EB2
3EB6:  BCF    FA6.2
3EB8:  MOVF   00,W
3EBA:  IORWF  FF2,F
....................       delay_ms(20); 
3EBC:  MOVLW  14
3EBE:  MOVLB  0
3EC0:  MOVWF  xD1
3EC2:  CALL   07F8
....................       write_eeprom(10,horasH); 
3EC6:  MOVLW  0A
3EC8:  MOVWF  FA9
3ECA:  MOVFF  24,FA8
3ECE:  BCF    FA6.6
3ED0:  BCF    FA6.7
3ED2:  BSF    FA6.2
3ED4:  MOVF   FF2,W
3ED6:  MOVWF  00
3ED8:  BCF    FF2.7
3EDA:  MOVLB  F
3EDC:  MOVLW  55
3EDE:  MOVWF  FA7
3EE0:  MOVLW  AA
3EE2:  MOVWF  FA7
3EE4:  BSF    FA6.1
3EE6:  BTFSC  FA6.1
3EE8:  BRA    3EE6
3EEA:  BCF    FA6.2
3EEC:  MOVF   00,W
3EEE:  IORWF  FF2,F
....................       delay_ms(20); 
3EF0:  MOVLW  14
3EF2:  MOVLB  0
3EF4:  MOVWF  xD1
3EF6:  CALL   07F8
....................       guardaruv=0; 
3EFA:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
3EFC:  MOVF   21,W
3EFE:  SUBLW  3B
3F00:  BC    3F06
....................    { 
....................       segundos=0;minutos++; 
3F02:  CLRF   21
3F04:  INCF   22,F
....................    } 
....................    if(minutos==60) 
3F06:  MOVF   22,W
3F08:  SUBLW  3C
3F0A:  BNZ   3F14
....................    { 
....................       minutos=0;horas++; 
3F0C:  CLRF   22
3F0E:  INCF   40,F
3F10:  BTFSC  FD8.2
3F12:  INCF   41,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
3F14:  MOVF   2F,W
3F16:  SUBLW  3B
3F18:  BC    3F2E
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
3F1A:  CALL   0888
3F1E:  MOVLW  C8
3F20:  MOVWF  xD1
3F22:  CALL   07F8
3F26:  CALL   0888
....................       tiemporeset=0; 
3F2A:  CLRF   2F
....................       Cambio=ON; 
3F2C:  BSF    17.5
....................    }    
....................    } 
3F2E:  GOTO   220A
.................... } 
....................  
3F32:  SLEEP 

Configuration Fuses:
   Word  1: CE3C   IESO FCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E3F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
