CCS PCH C Compiler, Version 4.104, 5967               31-may.-19 08:32

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Vertical\2019\CFLV 120 V2.0 FaltaPedido #0045879XX\Firmware V2.1\CabinaCFLH.lst

               ROM used: 14518 bytes (44%)
                         Largest free fragment is 18248
               RAM used: 179 (9%) at main() level
                         216 (11%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1946
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses XTPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
06E2:  CLRF   FEA
06E4:  MOVLW  C6
06E6:  MOVWF  FE9
06E8:  MOVF   FEF,W
06EA:  BZ    0708
06EC:  MOVLW  0F
06EE:  MOVWF  01
06F0:  CLRF   00
06F2:  DECFSZ 00,F
06F4:  BRA    06F2
06F6:  DECFSZ 01,F
06F8:  BRA    06F0
06FA:  MOVLW  8F
06FC:  MOVWF  00
06FE:  DECFSZ 00,F
0700:  BRA    06FE
0702:  NOP   
0704:  DECFSZ FEF,F
0706:  BRA    06EC
0708:  RETLW  00
.................... //#use delay(clock=20000000) 
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
15E6:  BCF    xC2.0
....................    y = x; 
15E8:  MOVFF  B6,BB
15EC:  MOVFF  B5,BA
15F0:  MOVFF  B4,B9
15F4:  MOVFF  B3,B8
....................  
....................    if (x < 0) 
15F8:  MOVFF  B6,C6
15FC:  MOVFF  B5,C5
1600:  MOVFF  B4,C4
1604:  MOVFF  B3,C3
1608:  CLRF   xCA
160A:  CLRF   xC9
160C:  CLRF   xC8
160E:  CLRF   xC7
1610:  CALL   0932
1614:  BNC   161E
....................    { 
....................       s = 1; 
1616:  BSF    xC2.0
....................       y = -y; 
1618:  MOVF   xB9,W
161A:  XORLW  80
161C:  MOVWF  xB9
....................    } 
....................  
....................    if (y <= 32768.0) 
161E:  MOVFF  BB,C6
1622:  MOVFF  BA,C5
1626:  MOVFF  B9,C4
162A:  MOVFF  B8,C3
162E:  CLRF   xCA
1630:  CLRF   xC9
1632:  CLRF   xC8
1634:  MOVLW  8E
1636:  MOVWF  xC7
1638:  CALL   0932
163C:  BC    1640
163E:  BNZ   1670
....................   res = (float32)(unsigned int16)y; 
1640:  MOVFF  BB,C6
1644:  MOVFF  BA,C5
1648:  MOVFF  B9,C4
164C:  MOVFF  B8,C3
1650:  RCALL  15AE
1652:  MOVFF  02,C8
1656:  MOVFF  01,C7
165A:  CALL   07CA
165E:  MOVFF  03,BF
1662:  MOVFF  02,BE
1666:  MOVFF  01,BD
166A:  MOVFF  00,BC
....................  
....................  else if (y < 10000000.0) 
166E:  BRA    17FA
1670:  MOVFF  BB,C6
1674:  MOVFF  BA,C5
1678:  MOVFF  B9,C4
167C:  MOVFF  B8,C3
1680:  MOVLW  80
1682:  MOVWF  xCA
1684:  MOVLW  96
1686:  MOVWF  xC9
1688:  MOVLW  18
168A:  MOVWF  xC8
168C:  MOVLW  96
168E:  MOVWF  xC7
1690:  CALL   0932
1694:  BTFSS  FD8.0
1696:  BRA    17EA
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1698:  MOVFF  BB,C6
169C:  MOVFF  BA,C5
16A0:  MOVFF  B9,C4
16A4:  MOVFF  B8,C3
16A8:  CLRF   xCA
16AA:  CLRF   xC9
16AC:  CLRF   xC8
16AE:  MOVLW  8E
16B0:  MOVWF  xC7
16B2:  CALL   0D20
16B6:  MOVFF  03,C6
16BA:  MOVFF  02,C5
16BE:  MOVFF  01,C4
16C2:  MOVFF  00,C3
16C6:  RCALL  15AE
16C8:  MOVFF  02,C1
16CC:  MOVFF  01,C0
....................       y = 32768.0*(y/32768.0 - (float32)l); 
16D0:  MOVFF  BB,C6
16D4:  MOVFF  BA,C5
16D8:  MOVFF  B9,C4
16DC:  MOVFF  B8,C3
16E0:  CLRF   xCA
16E2:  CLRF   xC9
16E4:  CLRF   xC8
16E6:  MOVLW  8E
16E8:  MOVWF  xC7
16EA:  CALL   0D20
16EE:  MOVFF  00,C3
16F2:  MOVFF  01,C4
16F6:  MOVFF  02,C5
16FA:  MOVFF  03,C6
16FE:  MOVFF  C1,C8
1702:  MOVFF  C0,C7
1706:  CALL   07CA
170A:  BSF    FD8.1
170C:  MOVFF  C6,CA
1710:  MOVFF  C5,C9
1714:  MOVFF  C4,C8
1718:  MOVFF  C3,C7
171C:  MOVFF  03,CE
1720:  MOVFF  02,CD
1724:  MOVFF  01,CC
1728:  MOVFF  00,CB
172C:  CALL   0E7A
1730:  CLRF   xC6
1732:  CLRF   xC5
1734:  CLRF   xC4
1736:  MOVLW  8E
1738:  MOVWF  xC3
173A:  MOVFF  03,CA
173E:  MOVFF  02,C9
1742:  MOVFF  01,C8
1746:  MOVFF  00,C7
174A:  RCALL  127C
174C:  MOVFF  03,BB
1750:  MOVFF  02,BA
1754:  MOVFF  01,B9
1758:  MOVFF  00,B8
....................   res = 32768.0*(float32)l; 
175C:  MOVFF  C1,C8
1760:  MOVFF  C0,C7
1764:  CALL   07CA
1768:  CLRF   xC6
176A:  CLRF   xC5
176C:  CLRF   xC4
176E:  MOVLW  8E
1770:  MOVWF  xC3
1772:  MOVFF  03,CA
1776:  MOVFF  02,C9
177A:  MOVFF  01,C8
177E:  MOVFF  00,C7
1782:  RCALL  127C
1784:  MOVFF  03,BF
1788:  MOVFF  02,BE
178C:  MOVFF  01,BD
1790:  MOVFF  00,BC
....................   res += (float32)(unsigned int16)y; 
1794:  MOVFF  BB,C6
1798:  MOVFF  BA,C5
179C:  MOVFF  B9,C4
17A0:  MOVFF  B8,C3
17A4:  RCALL  15AE
17A6:  MOVFF  02,C8
17AA:  MOVFF  01,C7
17AE:  CALL   07CA
17B2:  BCF    FD8.1
17B4:  MOVFF  BF,CA
17B8:  MOVFF  BE,C9
17BC:  MOVFF  BD,C8
17C0:  MOVFF  BC,C7
17C4:  MOVFF  03,CE
17C8:  MOVFF  02,CD
17CC:  MOVFF  01,CC
17D0:  MOVFF  00,CB
17D4:  CALL   0E7A
17D8:  MOVFF  03,BF
17DC:  MOVFF  02,BE
17E0:  MOVFF  01,BD
17E4:  MOVFF  00,BC
....................  } 
....................  
....................  else 
17E8:  BRA    17FA
....................   res = y; 
17EA:  MOVFF  BB,BF
17EE:  MOVFF  BA,BE
17F2:  MOVFF  B9,BD
17F6:  MOVFF  B8,BC
....................  
....................  y = y - (float32)(unsigned int16)y; 
17FA:  MOVFF  BB,C6
17FE:  MOVFF  BA,C5
1802:  MOVFF  B9,C4
1806:  MOVFF  B8,C3
180A:  RCALL  15AE
180C:  MOVFF  02,C8
1810:  MOVFF  01,C7
1814:  CALL   07CA
1818:  BSF    FD8.1
181A:  MOVFF  BB,CA
181E:  MOVFF  BA,C9
1822:  MOVFF  B9,C8
1826:  MOVFF  B8,C7
182A:  MOVFF  03,CE
182E:  MOVFF  02,CD
1832:  MOVFF  01,CC
1836:  MOVFF  00,CB
183A:  CALL   0E7A
183E:  MOVFF  03,BB
1842:  MOVFF  02,BA
1846:  MOVFF  01,B9
184A:  MOVFF  00,B8
....................  
....................  if (s) 
184E:  BTFSS  xC2.0
1850:  BRA    1858
....................   res = -res; 
1852:  MOVF   xBD,W
1854:  XORLW  80
1856:  MOVWF  xBD
....................  
....................  if (y != 0) 
1858:  MOVFF  BB,C6
185C:  MOVFF  BA,C5
1860:  MOVFF  B9,C4
1864:  MOVFF  B8,C3
1868:  CLRF   xCA
186A:  CLRF   xC9
186C:  CLRF   xC8
186E:  CLRF   xC7
1870:  CALL   0932
1874:  BZ    18E6
....................  { 
....................   if (s == 1 && n == 0) 
1876:  BTFSS  xC2.0
1878:  BRA    18AE
187A:  MOVF   xB7,F
187C:  BNZ   18AE
....................    res -= 1.0; 
187E:  BSF    FD8.1
1880:  MOVFF  BF,CA
1884:  MOVFF  BE,C9
1888:  MOVFF  BD,C8
188C:  MOVFF  BC,C7
1890:  CLRF   xCE
1892:  CLRF   xCD
1894:  CLRF   xCC
1896:  MOVLW  7F
1898:  MOVWF  xCB
189A:  CALL   0E7A
189E:  MOVFF  03,BF
18A2:  MOVFF  02,BE
18A6:  MOVFF  01,BD
18AA:  MOVFF  00,BC
....................  
....................   if (s == 0 && n == 1) 
18AE:  BTFSC  xC2.0
18B0:  BRA    18E6
18B2:  DECFSZ xB7,W
18B4:  BRA    18E6
....................    res += 1.0; 
18B6:  BCF    FD8.1
18B8:  MOVFF  BF,CA
18BC:  MOVFF  BE,C9
18C0:  MOVFF  BD,C8
18C4:  MOVFF  BC,C7
18C8:  CLRF   xCE
18CA:  CLRF   xCD
18CC:  CLRF   xCC
18CE:  MOVLW  7F
18D0:  MOVWF  xCB
18D2:  CALL   0E7A
18D6:  MOVFF  03,BF
18DA:  MOVFF  02,BE
18DE:  MOVFF  01,BD
18E2:  MOVFF  00,BC
....................  } 
....................  if (x == 0) 
18E6:  MOVFF  B6,C6
18EA:  MOVFF  B5,C5
18EE:  MOVFF  B4,C4
18F2:  MOVFF  B3,C3
18F6:  CLRF   xCA
18F8:  CLRF   xC9
18FA:  CLRF   xC8
18FC:  CLRF   xC7
18FE:  CALL   0932
1902:  BNZ   190C
....................     res = 0; 
1904:  CLRF   xBF
1906:  CLRF   xBE
1908:  CLRF   xBD
190A:  CLRF   xBC
....................  
....................  return (res); 
190C:  MOVFF  BC,00
1910:  MOVFF  BD,01
1914:  MOVFF  BE,02
1918:  MOVFF  BF,03
.................... } 
191C:  GOTO   1934 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
1920:  MOVFF  B2,B6
1924:  MOVFF  B1,B5
1928:  MOVFF  B0,B4
192C:  MOVFF  AF,B3
1930:  CLRF   xB7
1932:  BRA    15E6
.................... } 
1934:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D1,0) 
.................... #define   Luz_UV_off        output_bit(PIN_D1,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D2,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D2,1) 
.................... #define   Motor_L1_on       output_bit(PIN_C6,0) 
.................... #define   Motor_L1_off      output_bit(PIN_C6,1) 
.................... #define   Buzzer_on         output_bit(PIN_D0,1) 
.................... #define   Buzzer_off        output_bit(PIN_D0,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0,tiempobloqueo=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0,Ruido=OFF,Bloqueo=OFF; 
.................... char dato[3]; 
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
070A:  SWAPF  xC7,W
070C:  ANDLW  F0
070E:  MOVWF  00
0710:  MOVLW  0F
0712:  ANDWF  F81,W
0714:  IORWF  00,W
0716:  MOVWF  F81
....................       delay_cycles(30);//30 
0718:  MOVLW  09
071A:  MOVWF  00
071C:  DECFSZ 00,F
071E:  BRA    071C
0720:  BRA    0722
....................       lcd.enable = 1; 
0722:  BSF    F81.3
....................       delay_us(55);//55 
0724:  MOVLW  DB
0726:  MOVWF  00
0728:  DECFSZ 00,F
072A:  BRA    0728
072C:  BRA    072E
....................       lcd.enable = 0; 
072E:  BCF    F81.3
.................... } 
0730:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0732:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0734:  MOVLW  01
0736:  MOVWF  xC6
0738:  RCALL  06E2
....................       lcd.rs = address; 
073A:  BTFSS  xC4.0
073C:  BCF    F81.1
073E:  BTFSC  xC4.0
0740:  BSF    F81.1
....................       delay_cycles(30);//30 
0742:  MOVLW  09
0744:  MOVWF  00
0746:  DECFSZ 00,F
0748:  BRA    0746
074A:  BRA    074C
....................       lcd.rw = 0; 
074C:  BCF    F81.2
....................       delay_cycles(30);//30 
074E:  MOVLW  09
0750:  MOVWF  00
0752:  DECFSZ 00,F
0754:  BRA    0752
0756:  BRA    0758
....................       lcd.enable = 0; 
0758:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
075A:  SWAPF  xC5,W
075C:  MOVWF  xC6
075E:  MOVLW  0F
0760:  ANDWF  xC6,F
0762:  MOVFF  C6,C7
0766:  RCALL  070A
....................       lcd_send_nibble(n & 0xf); 
0768:  MOVF   xC5,W
076A:  ANDLW  0F
076C:  MOVWF  xC6
076E:  MOVWF  xC7
0770:  RCALL  070A
.................... } 
0772:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0774:  MOVLW  00
0776:  MOVWF  F93
....................     lcd.rs = 0; 
0778:  BCF    F81.1
....................     lcd.rw = 0; 
077A:  BCF    F81.2
....................     lcd.enable = 0; 
077C:  BCF    F81.3
....................     delay_ms(15); 
077E:  MOVLW  0F
0780:  MOVWF  xC6
0782:  RCALL  06E2
....................     for(i=1;i<=3;++i) { 
0784:  MOVLW  01
0786:  MOVWF  xAF
0788:  MOVF   xAF,W
078A:  SUBLW  03
078C:  BNC   079E
....................        lcd_send_nibble(3); 
078E:  MOVLW  03
0790:  MOVWF  xC7
0792:  RCALL  070A
....................        delay_ms(5); 
0794:  MOVLW  05
0796:  MOVWF  xC6
0798:  RCALL  06E2
....................     } 
079A:  INCF   xAF,F
079C:  BRA    0788
....................     lcd_send_nibble(2); 
079E:  MOVLW  02
07A0:  MOVWF  xC7
07A2:  RCALL  070A
....................     for(i=0;i<=3;++i) 
07A4:  CLRF   xAF
07A6:  MOVF   xAF,W
07A8:  SUBLW  03
07AA:  BNC   07C8
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
07AC:  CLRF   03
07AE:  MOVF   xAF,W
07B0:  MOVFF  FF2,B0
07B4:  BCF    FF2.7
07B6:  RCALL  0096
07B8:  BTFSC  xB0.7
07BA:  BSF    FF2.7
07BC:  MOVWF  xB0
07BE:  CLRF   xC4
07C0:  MOVWF  xC5
07C2:  RCALL  0732
07C4:  INCF   xAF,F
07C6:  BRA    07A6
.................... } 
07C8:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0852:  MOVLW  01
0854:  SUBWF  xC2,W
0856:  ADDLW  FC
0858:  BC    0878
085A:  ADDLW  04
085C:  GOTO   0888
....................      case 1 : address=0x80;break; 
0860:  MOVLW  80
0862:  MOVWF  xC3
0864:  BRA    0878
....................      case 2 : address=0xc0;break; 
0866:  MOVLW  C0
0868:  MOVWF  xC3
086A:  BRA    0878
....................      case 3 : address=0x94;break; 
086C:  MOVLW  94
086E:  MOVWF  xC3
0870:  BRA    0878
....................      case 4 : address=0xd4;break; 
0872:  MOVLW  D4
0874:  MOVWF  xC3
0876:  BRA    0878
....................    } 
....................    address+=x-1; 
0878:  MOVLW  01
087A:  SUBWF  xC1,W
087C:  ADDWF  xC3,F
....................    lcd_send_byte(0,address); 
087E:  CLRF   xC4
0880:  MOVFF  C3,C5
0884:  RCALL  0732
.................... } 
0886:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
08B4:  MOVF   xC0,W
08B6:  SUBLW  F1
08B8:  BNZ   08BE
....................    { 
....................       c=238; 
08BA:  MOVLW  EE
08BC:  MOVWF  xC0
....................    } 
....................    if(c=='Ñ') 
08BE:  MOVF   xC0,W
08C0:  SUBLW  D1
08C2:  BNZ   08C8
....................    { 
....................       c=255; 
08C4:  MOVLW  FF
08C6:  MOVWF  xC0
....................    } 
....................     
....................    switch (c) { 
08C8:  MOVF   xC0,W
08CA:  XORLW  0C
08CC:  BZ    08D8
08CE:  XORLW  06
08D0:  BZ    08EC
08D2:  XORLW  02
08D4:  BZ    08FA
08D6:  BRA    0904
....................      case '\f'   : lcd_send_byte(0,1); 
08D8:  CLRF   xC4
08DA:  MOVLW  01
08DC:  MOVWF  xC5
08DE:  RCALL  0732
....................                    lcdline=1; 
08E0:  MOVLW  01
08E2:  MOVWF  xAE
....................                    delay_ms(2); 
08E4:  MOVLW  02
08E6:  MOVWF  xC6
08E8:  RCALL  06E2
....................                                            break; 
08EA:  BRA    0910
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
08EC:  INCF   xAE,F
08EE:  MOVLW  01
08F0:  MOVWF  xC1
08F2:  MOVFF  AE,C2
08F6:  RCALL  0852
08F8:  BRA    0910
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
08FA:  CLRF   xC4
08FC:  MOVLW  10
08FE:  MOVWF  xC5
0900:  RCALL  0732
0902:  BRA    0910
....................      default     : lcd_send_byte(1,c);     break; 
0904:  MOVLW  01
0906:  MOVWF  xC4
0908:  MOVFF  C0,C5
090C:  RCALL  0732
090E:  BRA    0910
....................    } 
.................... } 
0910:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    //set_timer1(45536);  // 5 ms 
....................    tiempos++; 
00BC:  INCF   3E,F
00BE:  BTFSC  FD8.2
00C0:  INCF   3F,F
....................     
....................    if(Bloqueo){ 
00C2:  BTFSS  xAA.0
00C4:  BRA    00CC
....................       tiempobloqueo++; 
00C6:  INCF   44,F
00C8:  BTFSC  FD8.2
00CA:  INCF   45,F
....................    } 
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00CC:  MOVF   3F,F
00CE:  BNZ   00D6
00D0:  MOVF   3E,W
00D2:  SUBLW  C7
00D4:  BC    0124
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00D6:  CLRF   3F
00D8:  CLRF   3E
00DA:  INCF   2F,F
00DC:  BSF    17.0
....................     
....................    if(ActivaBuzzer==1) 
00DE:  DECFSZ 3D,W
00E0:  BRA    00F6
....................    { 
....................       if(estadobuzzer==0) 
00E2:  BTFSC  17.3
00E4:  BRA    00EC
....................       { 
....................          Buzzer_off; 
00E6:  BCF    F8C.0
00E8:  BCF    F95.0
....................       } 
....................       else 
00EA:  BRA    00F4
....................       { 
....................          if(estadoalarma==1) 
00EC:  BTFSS  17.4
00EE:  BRA    00F4
....................             Buzzer_on; 
00F0:  BSF    F8C.0
00F2:  BCF    F95.0
....................       } 
....................       estadobuzzer=!estadobuzzer; 
00F4:  BTG    17.3
....................    } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00F6:  BTFSS  16.0
00F8:  BRA    0124
....................    { 
....................       segundos++; 
00FA:  INCF   21,F
....................       if(tiempo_cumplido==0) 
00FC:  BTFSC  16.7
00FE:  BRA    0124
....................       { 
....................          if(tempo_segundos>0) 
0100:  MOVF   28,F
0102:  BZ    0108
....................          { 
....................             tempo_segundos--; 
0104:  DECF   28,F
....................          } 
....................          else 
0106:  BRA    0124
....................          { 
....................             if(tempo_minutos>0) 
0108:  MOVF   27,F
010A:  BZ    0114
....................             { 
....................                tempo_minutos--; 
010C:  DECF   27,F
....................                tempo_segundos=59; 
010E:  MOVLW  3B
0110:  MOVWF  28
....................             } 
....................             else 
0112:  BRA    0124
....................             { 
....................                tiempo_cumplido=1; 
0114:  BSF    16.7
....................                estadouv=0;Luz_UV_off; 
0116:  BCF    16.0
0118:  BSF    F8C.1
011A:  BCF    F95.1
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
011C:  MOVFF  29,27
0120:  MOVFF  2A,28
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
0124:  BCF    F9E.0
0126:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0B68:  DECFSZ xB0,W
0B6A:  BRA    0B80
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0B6C:  MOVLW  02
0B6E:  MOVWF  xC1
0B70:  MOVFF  B1,C2
0B74:  RCALL  0852
0B76:  MOVLW  2A
0B78:  MOVWF  FF6
0B7A:  MOVLW  01
0B7C:  MOVWF  FF7
0B7E:  RCALL  0912
....................    if(x==2) 
0B80:  MOVF   xB0,W
0B82:  SUBLW  02
0B84:  BNZ   0B9A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0B86:  MOVLW  02
0B88:  MOVWF  xC1
0B8A:  MOVFF  B1,C2
0B8E:  RCALL  0852
0B90:  MOVLW  3E
0B92:  MOVWF  FF6
0B94:  MOVLW  01
0B96:  MOVWF  FF7
0B98:  RCALL  0912
....................    if(x==3) 
0B9A:  MOVF   xB0,W
0B9C:  SUBLW  03
0B9E:  BNZ   0BB4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0BA0:  MOVLW  02
0BA2:  MOVWF  xC1
0BA4:  MOVFF  B1,C2
0BA8:  RCALL  0852
0BAA:  MOVLW  52
0BAC:  MOVWF  FF6
0BAE:  MOVLW  01
0BB0:  MOVWF  FF7
0BB2:  RCALL  0912
....................    if(x==4) 
0BB4:  MOVF   xB0,W
0BB6:  SUBLW  04
0BB8:  BNZ   0BCE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0BBA:  MOVLW  02
0BBC:  MOVWF  xC1
0BBE:  MOVFF  B1,C2
0BC2:  RCALL  0852
0BC4:  MOVLW  66
0BC6:  MOVWF  FF6
0BC8:  MOVLW  01
0BCA:  MOVWF  FF7
0BCC:  RCALL  0912
....................     
....................    if(x==5) 
0BCE:  MOVF   xB0,W
0BD0:  SUBLW  05
0BD2:  BNZ   0C04
....................    {if(estadoalarma==0) 
0BD4:  BTFSC  17.4
0BD6:  BRA    0BEC
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0BD8:  MOVLW  02
0BDA:  MOVWF  xC1
0BDC:  MOVFF  B1,C2
0BE0:  RCALL  0852
0BE2:  MOVLW  7A
0BE4:  MOVWF  FF6
0BE6:  MOVLW  01
0BE8:  MOVWF  FF7
0BEA:  RCALL  0912
....................    if(estadoalarma==1) 
0BEC:  BTFSS  17.4
0BEE:  BRA    0C04
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0BF0:  MOVLW  02
0BF2:  MOVWF  xC1
0BF4:  MOVFF  B1,C2
0BF8:  RCALL  0852
0BFA:  MOVLW  8E
0BFC:  MOVWF  FF6
0BFE:  MOVLW  01
0C00:  MOVWF  FF7
0C02:  RCALL  0912
....................    } 
.................... } 
0C04:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
1936:  MOVF   xAF,F
1938:  BNZ   1940
....................    { 
....................       Motor_L1_off; 
193A:  BSF    F8B.6
193C:  BCF    F94.6
....................    } 
....................    else 
193E:  BRA    1944
....................    { 
....................       Motor_L1_on; 
1940:  BCF    F8B.6
1942:  BCF    F94.6
....................    } 
.................... } 
1944:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
0800:  RLCF   xB4,W
0802:  MOVWF  00
0804:  RLCF   00,F
0806:  MOVLW  FC
0808:  ANDWF  00,F
080A:  MOVFF  00,01
080E:  MOVF   FC2,W
0810:  ANDLW  C3
0812:  IORWF  00,W
0814:  MOVWF  FC2
0816:  MOVLW  0A
0818:  MOVWF  xC6
081A:  RCALL  06E2
081C:  BSF    FC2.1
081E:  BTFSC  FC2.1
0820:  BRA    081E
0822:  MOVFF  FC4,03
0826:  MOVFF  FC3,C7
082A:  MOVFF  FC4,C8
082E:  RCALL  07CA
0830:  MOVFF  03,B8
0834:  MOVFF  02,B7
0838:  MOVFF  01,B6
083C:  MOVFF  00,B5
0840:  MOVFF  B5,00
0844:  MOVFF  B6,01
0848:  MOVFF  B7,02
084C:  MOVFF  B8,03
.................... } 
0850:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
10E4:  CLRF   xB3
10E6:  CLRF   xB2
10E8:  CLRF   xB1
10EA:  CLRF   xB0
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
10EC:  CLRF   xB4
10EE:  CALL   0800
10F2:  MOVFF  03,99
10F6:  MOVFF  02,98
10FA:  MOVFF  01,97
10FE:  MOVFF  00,96
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1102:  MOVFF  99,C6
1106:  MOVFF  98,C5
110A:  MOVFF  97,C4
110E:  MOVFF  96,C3
1112:  MOVFF  A9,CA
1116:  MOVFF  A8,C9
111A:  MOVFF  A7,C8
111E:  MOVFF  A6,C7
1122:  RCALL  0D20
1124:  MOVFF  00,B4
1128:  MOVFF  01,B5
112C:  MOVFF  02,B6
1130:  MOVFF  03,B7
1134:  BSF    FD8.1
1136:  MOVFF  03,CA
113A:  MOVFF  02,C9
113E:  MOVFF  01,C8
1142:  MOVFF  00,C7
1146:  CLRF   xCE
1148:  CLRF   xCD
114A:  CLRF   xCC
114C:  MOVLW  7F
114E:  MOVWF  xCB
1150:  RCALL  0E7A
1152:  MOVFF  03,9D
1156:  MOVFF  02,9C
115A:  MOVFF  01,9B
115E:  MOVFF  00,9A
....................     
....................    if(Presion<0.0) 
1162:  MOVFF  9D,C6
1166:  MOVFF  9C,C5
116A:  MOVFF  9B,C4
116E:  MOVFF  9A,C3
1172:  CLRF   xCA
1174:  CLRF   xC9
1176:  CLRF   xC8
1178:  CLRF   xC7
117A:  CALL   0932
117E:  BNC   1188
....................    { 
....................       Presion=0.0; 
1180:  CLRF   x9D
1182:  CLRF   x9C
1184:  CLRF   x9B
1186:  CLRF   x9A
....................    } 
....................  
....................    if(r>media-1) 
1188:  MOVLW  01
118A:  SUBWF  xAF,W
118C:  SUBWF  2B,W
118E:  BZ    1194
1190:  BNC   1194
....................    {r=0;} 
1192:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
1194:  MOVF   2B,W
1196:  MULLW  04
1198:  MOVF   FF3,W
119A:  CLRF   03
119C:  ADDLW  46
119E:  MOVWF  FE9
11A0:  MOVLW  00
11A2:  ADDWFC 03,W
11A4:  MOVWF  FEA
11A6:  MOVFF  9A,FEF
11AA:  MOVFF  9B,FEC
11AE:  MOVFF  9C,FEC
11B2:  MOVFF  9D,FEC
11B6:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
11B8:  CLRF   2C
11BA:  MOVLW  01
11BC:  SUBWF  xAF,W
11BE:  SUBWF  2C,W
11C0:  BZ    11C4
11C2:  BC    122E
....................    { 
....................       promediopresion+=PromPresion[q]; 
11C4:  MOVF   2C,W
11C6:  MULLW  04
11C8:  MOVF   FF3,W
11CA:  CLRF   03
11CC:  ADDLW  46
11CE:  MOVWF  FE9
11D0:  MOVLW  00
11D2:  ADDWFC 03,W
11D4:  MOVWF  FEA
11D6:  MOVFF  FEF,00
11DA:  MOVFF  FEC,01
11DE:  MOVFF  FEC,02
11E2:  MOVFF  FEC,03
11E6:  MOVFF  FEA,B5
11EA:  MOVFF  FE9,B4
11EE:  BCF    FD8.1
11F0:  MOVFF  B3,CA
11F4:  MOVFF  B2,C9
11F8:  MOVFF  B1,C8
11FC:  MOVFF  B0,C7
1200:  MOVFF  03,CE
1204:  MOVFF  02,CD
1208:  MOVFF  01,CC
120C:  MOVFF  00,CB
1210:  RCALL  0E7A
1212:  MOVFF  B5,FEA
1216:  MOVFF  B4,FE9
121A:  MOVFF  03,B3
121E:  MOVFF  02,B2
1222:  MOVFF  01,B1
1226:  MOVFF  00,B0
....................    }  
122A:  INCF   2C,F
122C:  BRA    11BA
....................    promediopresion=promediopresion/media;    
122E:  CLRF   xC8
1230:  MOVFF  AF,C7
1234:  CALL   07CA
1238:  MOVFF  B3,C6
123C:  MOVFF  B2,C5
1240:  MOVFF  B1,C4
1244:  MOVFF  B0,C3
1248:  MOVFF  03,CA
124C:  MOVFF  02,C9
1250:  MOVFF  01,C8
1254:  MOVFF  00,C7
1258:  RCALL  0D20
125A:  MOVFF  03,B3
125E:  MOVFF  02,B2
1262:  MOVFF  01,B1
1266:  MOVFF  00,B0
....................     
....................    return promediopresion; 
126A:  MOVFF  B0,00
126E:  MOVFF  B1,01
1272:  MOVFF  B2,02
1276:  MOVFF  B3,03
.................... } 
127A:  RETLW  00
....................  
.................... void Limita(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0)Contrasena[0]=0; 
*
09A8:  BTFSC  39.7
09AA:  BRA    09B2
09AC:  MOVF   39,W
09AE:  SUBLW  09
09B0:  BNC   09B6
09B2:  BTFSS  39.7
09B4:  BRA    09B8
09B6:  CLRF   39
....................    if(Contrasena[1]>9 || Contrasena[1]<0)Contrasena[1]=0; 
09B8:  BTFSC  3A.7
09BA:  BRA    09C2
09BC:  MOVF   3A,W
09BE:  SUBLW  09
09C0:  BNC   09C6
09C2:  BTFSS  3A.7
09C4:  BRA    09C8
09C6:  CLRF   3A
....................    if(Contrasena[2]>9 || Contrasena[2]<0)Contrasena[2]=0; 
09C8:  BTFSC  3B.7
09CA:  BRA    09D2
09CC:  MOVF   3B,W
09CE:  SUBLW  09
09D0:  BNC   09D6
09D2:  BTFSS  3B.7
09D4:  BRA    09D8
09D6:  CLRF   3B
....................    if(Contrasena[3]>9 || Contrasena[3]<0)Contrasena[3]=0; 
09D8:  BTFSC  3C.7
09DA:  BRA    09E2
09DC:  MOVF   3C,W
09DE:  SUBLW  09
09E0:  BNC   09E6
09E2:  BTFSS  3C.7
09E4:  BRA    09E8
09E6:  CLRF   3C
....................    if(tempo_minutos>60)tempo_minutos=20; 
09E8:  MOVF   27,W
09EA:  SUBLW  3C
09EC:  BC    09F2
09EE:  MOVLW  14
09F0:  MOVWF  27
....................    if(tempo_segundos>59)tempo_segundos=0; 
09F2:  MOVF   28,W
09F4:  SUBLW  3B
09F6:  BTFSS  FD8.0
09F8:  CLRF   28
....................    if(segundos>60)segundos=0; 
09FA:  MOVF   21,W
09FC:  SUBLW  3C
09FE:  BTFSS  FD8.0
0A00:  CLRF   21
....................    if(minutos>60)minutos=0; 
0A02:  MOVF   22,W
0A04:  SUBLW  3C
0A06:  BTFSS  FD8.0
0A08:  CLRF   22
....................    if(horas>10000)horas=0; 
0A0A:  MOVF   41,W
0A0C:  SUBLW  26
0A0E:  BC    0A1E
0A10:  XORLW  FF
0A12:  BNZ   0A1A
0A14:  MOVF   40,W
0A16:  SUBLW  10
0A18:  BC    0A1E
0A1A:  CLRF   41
0A1C:  CLRF   40
....................    if(G>1000)G=240; 
0A1E:  CLRF   xC6
0A20:  CLRF   xC5
0A22:  MOVLW  7A
0A24:  MOVWF  xC4
0A26:  MOVLW  88
0A28:  MOVWF  xC3
0A2A:  MOVFF  A9,CA
0A2E:  MOVFF  A8,C9
0A32:  MOVFF  A7,C8
0A36:  MOVFF  A6,C7
0A3A:  RCALL  0932
0A3C:  BNC   0A4A
0A3E:  CLRF   xA9
0A40:  CLRF   xA8
0A42:  MOVLW  70
0A44:  MOVWF  xA7
0A46:  MOVLW  86
0A48:  MOVWF  xA6
....................    if(estadoalarma>10)estadoalarma=1; 
0A4A:  MOVLW  00
0A4C:  BTFSC  17.4
0A4E:  MOVLW  01
0A50:  SUBLW  0A
0A52:  BTFSS  FD8.0
0A54:  BSF    17.4
.................... } 
0A56:  GOTO   1D72 (RETURN)
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void main () 
.................... { 
*
1946:  CLRF   FF8
1948:  BCF    FD0.7
194A:  BSF    07.7
194C:  CLRF   FEA
194E:  CLRF   FE9
1950:  BCF    16.0
1952:  BCF    16.1
1954:  BCF    16.2
1956:  BCF    16.3
1958:  BCF    16.4
195A:  BCF    16.5
195C:  BCF    16.6
195E:  BCF    16.7
1960:  BCF    17.0
1962:  BCF    17.1
1964:  BCF    17.2
1966:  BCF    17.3
1968:  BCF    17.4
196A:  CLRF   18
196C:  MOVLW  06
196E:  MOVWF  19
1970:  MOVLW  02
1972:  MOVWF  1A
1974:  MOVLW  0B
1976:  MOVWF  1B
1978:  MOVLW  02
197A:  MOVWF  1C
197C:  MOVLW  03
197E:  MOVWF  1D
1980:  MOVLW  02
1982:  MOVWF  1E
1984:  MOVWF  1F
1986:  MOVLW  04
1988:  MOVWF  20
198A:  CLRF   21
198C:  CLRF   22
198E:  CLRF   23
1990:  CLRF   24
1992:  CLRF   25
1994:  CLRF   26
1996:  CLRF   27
1998:  CLRF   28
199A:  CLRF   29
199C:  CLRF   2A
199E:  CLRF   2B
19A0:  CLRF   2C
19A2:  CLRF   2D
19A4:  MOVLW  01
19A6:  MOVWF  2E
19A8:  CLRF   2F
19AA:  CLRF   30
19AC:  CLRF   31
19AE:  CLRF   3D
19B0:  CLRF   41
19B2:  CLRF   40
19B4:  CLRF   43
19B6:  CLRF   42
19B8:  CLRF   45
19BA:  CLRF   44
19BC:  CLRF   x99
19BE:  CLRF   x98
19C0:  CLRF   x97
19C2:  CLRF   x96
19C4:  CLRF   x9D
19C6:  CLRF   x9C
19C8:  CLRF   x9B
19CA:  CLRF   x9A
19CC:  CLRF   xA1
19CE:  CLRF   xA0
19D0:  CLRF   x9F
19D2:  CLRF   x9E
19D4:  CLRF   xA5
19D6:  CLRF   xA4
19D8:  CLRF   xA3
19DA:  CLRF   xA2
19DC:  CLRF   xA9
19DE:  CLRF   xA8
19E0:  CLRF   xA7
19E2:  MOVLW  80
19E4:  MOVWF  xA6
19E6:  BSF    17.5
19E8:  BCF    17.6
19EA:  BCF    17.7
19EC:  BCF    xAA.0
19EE:  MOVF   FC1,W
19F0:  ANDLW  C0
19F2:  IORLW  0F
19F4:  MOVWF  FC1
19F6:  MOVLW  07
19F8:  MOVWF  FB4
19FA:  MOVLW  3E
19FC:  MOVWF  32
19FE:  MOVLW  20
1A00:  MOVWF  33
1A02:  MOVLW  5E
1A04:  MOVWF  34
1A06:  CLRF   35
1A08:  CLRF   36
1A0A:  CLRF   37
1A0C:  CLRF   38
1A0E:  CLRF   39
1A10:  CLRF   3A
1A12:  CLRF   3B
1A14:  CLRF   3C
1A16:  CLRF   46
1A18:  CLRF   47
1A1A:  CLRF   48
1A1C:  CLRF   49
1A1E:  CLRF   4A
1A20:  CLRF   4B
1A22:  CLRF   4C
1A24:  CLRF   4D
1A26:  CLRF   4E
1A28:  CLRF   4F
1A2A:  CLRF   50
1A2C:  CLRF   51
1A2E:  CLRF   52
1A30:  CLRF   53
1A32:  CLRF   54
1A34:  CLRF   55
1A36:  CLRF   56
1A38:  CLRF   57
1A3A:  CLRF   58
1A3C:  CLRF   59
1A3E:  CLRF   5A
1A40:  CLRF   5B
1A42:  CLRF   5C
1A44:  CLRF   5D
1A46:  CLRF   5E
1A48:  CLRF   5F
1A4A:  CLRF   x60
1A4C:  CLRF   x61
1A4E:  CLRF   x62
1A50:  CLRF   x63
1A52:  CLRF   x64
1A54:  CLRF   x65
1A56:  CLRF   x66
1A58:  CLRF   x67
1A5A:  CLRF   x68
1A5C:  CLRF   x69
1A5E:  CLRF   x6A
1A60:  CLRF   x6B
1A62:  CLRF   x6C
1A64:  CLRF   x6D
1A66:  CLRF   x6E
1A68:  CLRF   x6F
1A6A:  CLRF   x70
1A6C:  CLRF   x71
1A6E:  CLRF   x72
1A70:  CLRF   x73
1A72:  CLRF   x74
1A74:  CLRF   x75
1A76:  CLRF   x76
1A78:  CLRF   x77
1A7A:  CLRF   x78
1A7C:  CLRF   x79
1A7E:  CLRF   x7A
1A80:  CLRF   x7B
1A82:  CLRF   x7C
1A84:  CLRF   x7D
1A86:  CLRF   x7E
1A88:  CLRF   x7F
1A8A:  CLRF   x80
1A8C:  CLRF   x81
1A8E:  CLRF   x82
1A90:  CLRF   x83
1A92:  CLRF   x84
1A94:  CLRF   x85
1A96:  CLRF   x86
1A98:  CLRF   x87
1A9A:  CLRF   x88
1A9C:  CLRF   x89
1A9E:  CLRF   x8A
1AA0:  CLRF   x8B
1AA2:  CLRF   x8C
1AA4:  CLRF   x8D
1AA6:  CLRF   x8E
1AA8:  CLRF   x8F
1AAA:  CLRF   x90
1AAC:  CLRF   x91
1AAE:  CLRF   x92
1AB0:  CLRF   x93
1AB2:  CLRF   x94
1AB4:  CLRF   x95
....................    lcd_init(); 
1AB6:  CALL   0774
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1ABA:  MOVLW  85
1ABC:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1ABE:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
1AC0:  MOVF   FC1,W
1AC2:  ANDLW  C0
1AC4:  IORLW  0E
1AC6:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1AC8:  BCF    FC0.0
1ACA:  BSF    FC0.1
1ACC:  BCF    FC0.2
1ACE:  BSF    FC0.7
1AD0:  BSF    FC2.0
....................    enable_interrupts(global); 
1AD2:  MOVLW  C0
1AD4:  IORWF  FF2,F
....................    sensores(0); 
1AD6:  CLRF   xB4
1AD8:  CALL   0800
....................    Luz_UV_off; 
1ADC:  BSF    F8C.1
1ADE:  BCF    F95.1
....................    Luz_Blanca_off; 
1AE0:  BSF    F8C.2
1AE2:  BCF    F95.2
....................    Motor_L1_off; 
1AE4:  BSF    F8B.6
1AE6:  BCF    F94.6
....................    lcd_gotoxy(1,1); 
1AE8:  MOVLW  01
1AEA:  MOVWF  xC1
1AEC:  MOVWF  xC2
1AEE:  CALL   0852
....................    printf(lcd_putc," CABINA  DE   FLUJO "); 
1AF2:  MOVLW  A2
1AF4:  MOVWF  FF6
1AF6:  MOVLW  01
1AF8:  MOVWF  FF7
1AFA:  CALL   0912
....................    lcd_gotoxy(1,2); 
1AFE:  MOVLW  01
1B00:  MOVWF  xC1
1B02:  MOVLW  02
1B04:  MOVWF  xC2
1B06:  CALL   0852
....................    printf(lcd_putc,"  LAMINAR VERTICAL  "); 
1B0A:  MOVLW  B8
1B0C:  MOVWF  FF6
1B0E:  MOVLW  01
1B10:  MOVWF  FF7
1B12:  CALL   0912
....................    lcd_gotoxy(1,3); 
1B16:  MOVLW  01
1B18:  MOVWF  xC1
1B1A:  MOVLW  03
1B1C:  MOVWF  xC2
1B1E:  CALL   0852
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1B22:  MOVLW  CE
1B24:  MOVWF  FF6
1B26:  MOVLW  01
1B28:  MOVWF  FF7
1B2A:  CALL   0912
....................    lcd_gotoxy(1,4); 
1B2E:  MOVLW  01
1B30:  MOVWF  xC1
1B32:  MOVLW  04
1B34:  MOVWF  xC2
1B36:  CALL   0852
....................    printf(lcd_putc,"   REF:  JPCFLV120  "); 
1B3A:  MOVLW  E4
1B3C:  MOVWF  FF6
1B3E:  MOVLW  01
1B40:  MOVWF  FF7
1B42:  CALL   0912
....................    delay_ms(2000); 
1B46:  MOVLW  08
1B48:  MOVWF  xAF
1B4A:  MOVLW  FA
1B4C:  MOVWF  xC6
1B4E:  CALL   06E2
1B52:  DECFSZ xAF,F
1B54:  BRA    1B4A
....................    printf(lcd_putc,"\f");    
1B56:  MOVLW  0C
1B58:  MOVWF  xC0
1B5A:  CALL   08B4
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
1B5E:  MOVFF  FF2,AF
1B62:  BCF    FF2.7
1B64:  CLRF   FA9
1B66:  BCF    FA6.6
1B68:  BCF    FA6.7
1B6A:  BSF    FA6.0
1B6C:  MOVF   FA8,W
1B6E:  BTFSC  xAF.7
1B70:  BSF    FF2.7
1B72:  MOVWF  39
....................    delay_ms(20);  
1B74:  MOVLW  14
1B76:  MOVWF  xC6
1B78:  CALL   06E2
....................    contrasena[1]=read_eeprom(1); 
1B7C:  MOVFF  FF2,AF
1B80:  BCF    FF2.7
1B82:  MOVLW  01
1B84:  MOVWF  FA9
1B86:  BCF    FA6.6
1B88:  BCF    FA6.7
1B8A:  BSF    FA6.0
1B8C:  MOVF   FA8,W
1B8E:  BTFSC  xAF.7
1B90:  BSF    FF2.7
1B92:  MOVWF  3A
....................    delay_ms(20); 
1B94:  MOVLW  14
1B96:  MOVWF  xC6
1B98:  CALL   06E2
....................    contrasena[2]=read_eeprom(2); 
1B9C:  MOVFF  FF2,AF
1BA0:  BCF    FF2.7
1BA2:  MOVLW  02
1BA4:  MOVWF  FA9
1BA6:  BCF    FA6.6
1BA8:  BCF    FA6.7
1BAA:  BSF    FA6.0
1BAC:  MOVF   FA8,W
1BAE:  BTFSC  xAF.7
1BB0:  BSF    FF2.7
1BB2:  MOVWF  3B
....................    delay_ms(20);  
1BB4:  MOVLW  14
1BB6:  MOVWF  xC6
1BB8:  CALL   06E2
....................    contrasena[3]=read_eeprom(3); 
1BBC:  MOVFF  FF2,AF
1BC0:  BCF    FF2.7
1BC2:  MOVLW  03
1BC4:  MOVWF  FA9
1BC6:  BCF    FA6.6
1BC8:  BCF    FA6.7
1BCA:  BSF    FA6.0
1BCC:  MOVF   FA8,W
1BCE:  BTFSC  xAF.7
1BD0:  BSF    FF2.7
1BD2:  MOVWF  3C
....................    delay_ms(20); 
1BD4:  MOVLW  14
1BD6:  MOVWF  xC6
1BD8:  CALL   06E2
....................    estadoalarma=read_eeprom(5); 
1BDC:  MOVFF  FF2,AF
1BE0:  BCF    FF2.7
1BE2:  MOVLW  05
1BE4:  MOVWF  FA9
1BE6:  BCF    FA6.6
1BE8:  BCF    FA6.7
1BEA:  BSF    FA6.0
1BEC:  MOVF   FA8,W
1BEE:  BTFSC  xAF.7
1BF0:  BSF    FF2.7
1BF2:  MOVWF  01
1BF4:  BCF    17.4
1BF6:  BTFSC  01.0
1BF8:  BSF    17.4
....................    delay_ms(20); 
1BFA:  MOVLW  14
1BFC:  MOVWF  xC6
1BFE:  CALL   06E2
....................    tempo_minutos=read_eeprom(20); 
1C02:  MOVFF  FF2,AF
1C06:  BCF    FF2.7
1C08:  MOVLW  14
1C0A:  MOVWF  FA9
1C0C:  BCF    FA6.6
1C0E:  BCF    FA6.7
1C10:  BSF    FA6.0
1C12:  MOVF   FA8,W
1C14:  BTFSC  xAF.7
1C16:  BSF    FF2.7
1C18:  MOVWF  27
....................    delay_ms(20); 
1C1A:  MOVLW  14
1C1C:  MOVWF  xC6
1C1E:  CALL   06E2
....................    tempo_segundos=read_eeprom(30); 
1C22:  MOVFF  FF2,AF
1C26:  BCF    FF2.7
1C28:  MOVLW  1E
1C2A:  MOVWF  FA9
1C2C:  BCF    FA6.6
1C2E:  BCF    FA6.7
1C30:  BSF    FA6.0
1C32:  MOVF   FA8,W
1C34:  BTFSC  xAF.7
1C36:  BSF    FF2.7
1C38:  MOVWF  28
....................    delay_ms(20); 
1C3A:  MOVLW  14
1C3C:  MOVWF  xC6
1C3E:  CALL   06E2
....................    tempo_minutos_pro=read_eeprom(20); 
1C42:  MOVFF  FF2,AF
1C46:  BCF    FF2.7
1C48:  MOVLW  14
1C4A:  MOVWF  FA9
1C4C:  BCF    FA6.6
1C4E:  BCF    FA6.7
1C50:  BSF    FA6.0
1C52:  MOVF   FA8,W
1C54:  BTFSC  xAF.7
1C56:  BSF    FF2.7
1C58:  MOVWF  29
....................    delay_ms(20); 
1C5A:  MOVLW  14
1C5C:  MOVWF  xC6
1C5E:  CALL   06E2
....................    tempo_segundos_pro=read_eeprom(30); 
1C62:  MOVFF  FF2,AF
1C66:  BCF    FF2.7
1C68:  MOVLW  1E
1C6A:  MOVWF  FA9
1C6C:  BCF    FA6.6
1C6E:  BCF    FA6.7
1C70:  BSF    FA6.0
1C72:  MOVF   FA8,W
1C74:  BTFSC  xAF.7
1C76:  BSF    FF2.7
1C78:  MOVWF  2A
....................    delay_ms(20); 
1C7A:  MOVLW  14
1C7C:  MOVWF  xC6
1C7E:  CALL   06E2
....................    segundos=read_eeprom(50); 
1C82:  MOVFF  FF2,AF
1C86:  BCF    FF2.7
1C88:  MOVLW  32
1C8A:  MOVWF  FA9
1C8C:  BCF    FA6.6
1C8E:  BCF    FA6.7
1C90:  BSF    FA6.0
1C92:  MOVF   FA8,W
1C94:  BTFSC  xAF.7
1C96:  BSF    FF2.7
1C98:  MOVWF  21
....................    delay_ms(20); 
1C9A:  MOVLW  14
1C9C:  MOVWF  xC6
1C9E:  CALL   06E2
....................    minutos=read_eeprom(51); 
1CA2:  MOVFF  FF2,AF
1CA6:  BCF    FF2.7
1CA8:  MOVLW  33
1CAA:  MOVWF  FA9
1CAC:  BCF    FA6.6
1CAE:  BCF    FA6.7
1CB0:  BSF    FA6.0
1CB2:  MOVF   FA8,W
1CB4:  BTFSC  xAF.7
1CB6:  BSF    FF2.7
1CB8:  MOVWF  22
....................    delay_ms(20); 
1CBA:  MOVLW  14
1CBC:  MOVWF  xC6
1CBE:  CALL   06E2
....................    horasL=read_eeprom(52); 
1CC2:  MOVFF  FF2,AF
1CC6:  BCF    FF2.7
1CC8:  MOVLW  34
1CCA:  MOVWF  FA9
1CCC:  BCF    FA6.6
1CCE:  BCF    FA6.7
1CD0:  BSF    FA6.0
1CD2:  MOVF   FA8,W
1CD4:  BTFSC  xAF.7
1CD6:  BSF    FF2.7
1CD8:  MOVWF  23
....................    delay_ms(20); 
1CDA:  MOVLW  14
1CDC:  MOVWF  xC6
1CDE:  CALL   06E2
....................    horasH=read_eeprom(53); 
1CE2:  MOVFF  FF2,AF
1CE6:  BCF    FF2.7
1CE8:  MOVLW  35
1CEA:  MOVWF  FA9
1CEC:  BCF    FA6.6
1CEE:  BCF    FA6.7
1CF0:  BSF    FA6.0
1CF2:  MOVF   FA8,W
1CF4:  BTFSC  xAF.7
1CF6:  BSF    FF2.7
1CF8:  MOVWF  24
....................    delay_ms(20); 
1CFA:  MOVLW  14
1CFC:  MOVWF  xC6
1CFE:  CALL   06E2
....................    G_l=read_eeprom(60); 
1D02:  MOVFF  FF2,AF
1D06:  BCF    FF2.7
1D08:  MOVLW  3C
1D0A:  MOVWF  FA9
1D0C:  BCF    FA6.6
1D0E:  BCF    FA6.7
1D10:  BSF    FA6.0
1D12:  MOVF   FA8,W
1D14:  BTFSC  xAF.7
1D16:  BSF    FF2.7
1D18:  MOVWF  25
....................    delay_ms(20); 
1D1A:  MOVLW  14
1D1C:  MOVWF  xC6
1D1E:  CALL   06E2
....................    G_h=read_eeprom(61); 
1D22:  MOVFF  FF2,AF
1D26:  BCF    FF2.7
1D28:  MOVLW  3D
1D2A:  MOVWF  FA9
1D2C:  BCF    FA6.6
1D2E:  BCF    FA6.7
1D30:  BSF    FA6.0
1D32:  MOVF   FA8,W
1D34:  BTFSC  xAF.7
1D36:  BSF    FF2.7
1D38:  MOVWF  26
....................    delay_ms(20); 
1D3A:  MOVLW  14
1D3C:  MOVWF  xC6
1D3E:  CALL   06E2
....................    G16=make16(G_h,G_l); 
1D42:  MOVFF  26,43
1D46:  MOVFF  25,42
....................    G=G16; 
1D4A:  MOVFF  43,C8
1D4E:  MOVFF  42,C7
1D52:  CALL   07CA
1D56:  MOVFF  03,A9
1D5A:  MOVFF  02,A8
1D5E:  MOVFF  01,A7
1D62:  MOVFF  00,A6
....................    horas=make16(horasH,horasL); 
1D66:  MOVFF  24,41
1D6A:  MOVFF  23,40
....................    Limita();    
1D6E:  GOTO   09A8
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................  
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1D72:  MOVF   18,F
1D74:  BTFSS  FD8.2
1D76:  BRA    2176
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
1D78:  MOVLW  01
1D7A:  MOVWF  xC1
1D7C:  MOVWF  xC2
1D7E:  CALL   0852
....................          printf(lcd_putc,"     Ingrese        "); 
1D82:  MOVLW  FA
1D84:  MOVWF  FF6
1D86:  MOVLW  01
1D88:  MOVWF  FF7
1D8A:  CALL   0912
....................          lcd_gotoxy(1,2); 
1D8E:  MOVLW  01
1D90:  MOVWF  xC1
1D92:  MOVLW  02
1D94:  MOVWF  xC2
1D96:  CALL   0852
....................          printf(lcd_putc,"    Contraseña      "); 
1D9A:  MOVLW  10
1D9C:  MOVWF  FF6
1D9E:  MOVLW  02
1DA0:  MOVWF  FF7
1DA2:  CALL   0912
....................          lcd_gotoxy(1,3); 
1DA6:  MOVLW  01
1DA8:  MOVWF  xC1
1DAA:  MOVLW  03
1DAC:  MOVWF  xC2
1DAE:  CALL   0852
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1DB2:  MOVLW  26
1DB4:  MOVWF  FF6
1DB6:  MOVLW  02
1DB8:  MOVWF  FF7
1DBA:  MOVLW  0A
1DBC:  MOVWF  xB3
1DBE:  CALL   0A5A
1DC2:  MOVFF  35,AF
1DC6:  MOVLW  1F
1DC8:  MOVWF  xB0
1DCA:  CALL   0AA0
1DCE:  MOVFF  36,AF
1DD2:  MOVLW  1F
1DD4:  MOVWF  xB0
1DD6:  CALL   0AA0
1DDA:  MOVFF  37,AF
1DDE:  MOVLW  1F
1DE0:  MOVWF  xB0
1DE2:  CALL   0AA0
1DE6:  MOVFF  38,AF
1DEA:  MOVLW  1F
1DEC:  MOVWF  xB0
1DEE:  CALL   0AA0
1DF2:  MOVLW  20
1DF4:  MOVWF  xC0
1DF6:  CALL   08B4
1DFA:  MOVLW  20
1DFC:  MOVWF  xC0
1DFE:  CALL   08B4
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1E02:  MOVFF  1B,C1
1E06:  MOVLW  04
1E08:  MOVWF  xC2
1E0A:  CALL   0852
....................          lcd_putc(t[2]); 
1E0E:  MOVFF  34,C0
1E12:  CALL   08B4
....................           
....................          if(unidad>11&&unidad<14){ 
1E16:  MOVF   1B,W
1E18:  SUBLW  0B
1E1A:  BC    1E3A
1E1C:  MOVF   1B,W
1E1E:  SUBLW  0D
1E20:  BNC   1E3A
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1E22:  MOVLW  01
1E24:  SUBWF  1B,W
1E26:  MOVWF  xAF
1E28:  MOVWF  xC1
1E2A:  MOVLW  04
1E2C:  MOVWF  xC2
1E2E:  CALL   0852
....................             lcd_putc(t[1]); 
1E32:  MOVFF  33,C0
1E36:  CALL   08B4
....................          } 
....................           
....................          Cambio=OFF; 
1E3A:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
1E3C:  BSF    F92.5
1E3E:  BTFSC  F80.5
1E40:  BRA    1E74
....................          delay_ms(20); 
1E42:  MOVLW  14
1E44:  MOVWF  xC6
1E46:  CALL   06E2
....................          if(UP){ 
1E4A:  BSF    F92.5
1E4C:  BTFSC  F80.5
1E4E:  BRA    1E72
....................             if(Flanco == 0) { 
1E50:  BTFSC  16.3
1E52:  BRA    1E72
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
1E54:  MOVLW  0B
1E56:  SUBWF  1B,W
1E58:  CLRF   03
1E5A:  ADDLW  35
1E5C:  MOVWF  FE9
1E5E:  MOVLW  00
1E60:  ADDWFC 03,W
1E62:  MOVWF  FEA
1E64:  INCF   FEF,F
1E66:  BSF    16.3
1E68:  MOVLW  1E
1E6A:  MOVWF  xC6
1E6C:  CALL   06E2
1E70:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1E72:  BRA    1E76
....................          Flanco = 0; 
1E74:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
1E76:  BSF    F96.0
1E78:  BTFSC  F84.0
1E7A:  BRA    1EAE
....................          delay_ms(20); 
1E7C:  MOVLW  14
1E7E:  MOVWF  xC6
1E80:  CALL   06E2
....................          if(DOWN){ 
1E84:  BSF    F96.0
1E86:  BTFSC  F84.0
1E88:  BRA    1EAC
....................             if(Flanco2 == 0) { 
1E8A:  BTFSC  16.5
1E8C:  BRA    1EAC
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
1E8E:  MOVLW  0B
1E90:  SUBWF  1B,W
1E92:  CLRF   03
1E94:  ADDLW  35
1E96:  MOVWF  FE9
1E98:  MOVLW  00
1E9A:  ADDWFC 03,W
1E9C:  MOVWF  FEA
1E9E:  DECF   FEF,F
1EA0:  BSF    16.5
1EA2:  MOVLW  1E
1EA4:  MOVWF  xC6
1EA6:  CALL   06E2
1EAA:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1EAC:  BRA    1EB0
....................          Flanco2 = 0; 
1EAE:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
1EB0:  BSF    F96.1
1EB2:  BTFSC  F84.1
1EB4:  BRA    1EE0
....................          delay_ms(20); 
1EB6:  MOVLW  14
1EB8:  MOVWF  xC6
1EBA:  CALL   06E2
....................          if(RIGHT){ 
1EBE:  BSF    F96.1
1EC0:  BTFSC  F84.1
1EC2:  BRA    1EDE
....................             if(Flanco1 == 0) { 
1EC4:  BTFSC  16.4
1EC6:  BRA    1EDE
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
1EC8:  BSF    16.4
1ECA:  INCF   1B,F
1ECC:  MOVLW  1E
1ECE:  MOVWF  xC6
1ED0:  CALL   06E2
1ED4:  MOVLW  0C
1ED6:  MOVWF  xC0
1ED8:  CALL   08B4
1EDC:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1EDE:  BRA    1EE2
....................          Flanco1 = 0; 
1EE0:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
1EE2:  BSF    F96.2
1EE4:  BTFSC  F84.2
1EE6:  BRA    1F12
....................          delay_ms(150); 
1EE8:  MOVLW  96
1EEA:  MOVWF  xC6
1EEC:  CALL   06E2
....................          if(IZQU){ 
1EF0:  BSF    F96.2
1EF2:  BTFSC  F84.2
1EF4:  BRA    1F10
....................             if(Flanco3 == 0){ 
1EF6:  BTFSC  16.6
1EF8:  BRA    1F10
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
1EFA:  BSF    16.6
1EFC:  DECF   1B,F
1EFE:  MOVLW  1E
1F00:  MOVWF  xC6
1F02:  CALL   06E2
1F06:  MOVLW  0C
1F08:  MOVWF  xC0
1F0A:  CALL   08B4
1F0E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1F10:  BRA    1F14
....................         Flanco3 = 0; 
1F12:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1F14:  MOVLW  0B
1F16:  SUBWF  1B,W
1F18:  CLRF   03
1F1A:  ADDLW  35
1F1C:  MOVWF  FE9
1F1E:  MOVLW  00
1F20:  ADDWFC 03,W
1F22:  MOVWF  FEA
1F24:  BTFSC  FEF.7
1F26:  BRA    1F2A
1F28:  BRA    1F3E
....................          clave[unidad-11]=9; 
1F2A:  MOVLW  0B
1F2C:  SUBWF  1B,W
1F2E:  CLRF   03
1F30:  ADDLW  35
1F32:  MOVWF  FE9
1F34:  MOVLW  00
1F36:  ADDWFC 03,W
1F38:  MOVWF  FEA
1F3A:  MOVLW  09
1F3C:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1F3E:  MOVLW  0B
1F40:  SUBWF  1B,W
1F42:  CLRF   03
1F44:  ADDLW  35
1F46:  MOVWF  FE9
1F48:  MOVLW  00
1F4A:  ADDWFC 03,W
1F4C:  MOVWF  FEA
1F4E:  BTFSC  FEF.7
1F50:  BRA    1F6A
1F52:  MOVF   FEF,W
1F54:  SUBLW  09
1F56:  BC    1F6A
....................          clave[unidad-11]=0; 
1F58:  MOVLW  0B
1F5A:  SUBWF  1B,W
1F5C:  CLRF   03
1F5E:  ADDLW  35
1F60:  MOVWF  FE9
1F62:  MOVLW  00
1F64:  ADDWFC 03,W
1F66:  MOVWF  FEA
1F68:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1F6A:  MOVF   1B,W
1F6C:  SUBLW  0A
1F6E:  BNC   1F74
....................          unidad=11; 
1F70:  MOVLW  0B
1F72:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1F74:  MOVF   1B,W
1F76:  SUBLW  0E
1F78:  BTFSC  FD8.0
1F7A:  BRA    2176
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
1F7C:  MOVF   35,W
1F7E:  SUBLW  03
1F80:  BNZ   205C
1F82:  MOVF   36,W
1F84:  SUBLW  08
1F86:  BNZ   205C
1F88:  MOVF   37,W
1F8A:  SUBLW  09
1F8C:  BNZ   205C
1F8E:  MOVF   38,W
1F90:  SUBLW  02
1F92:  BNZ   205C
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1F94:  CLRF   FA9
1F96:  CLRF   FA8
1F98:  BCF    FA6.6
1F9A:  BCF    FA6.7
1F9C:  BSF    FA6.2
1F9E:  MOVF   FF2,W
1FA0:  MOVWF  00
1FA2:  BCF    FF2.7
1FA4:  MOVLB  F
1FA6:  MOVLW  55
1FA8:  MOVWF  FA7
1FAA:  MOVLW  AA
1FAC:  MOVWF  FA7
1FAE:  BSF    FA6.1
1FB0:  BTFSC  FA6.1
1FB2:  BRA    1FB0
1FB4:  BCF    FA6.2
1FB6:  MOVF   00,W
1FB8:  IORWF  FF2,F
1FBA:  MOVLW  14
1FBC:  MOVLB  0
1FBE:  MOVWF  xC6
1FC0:  CALL   06E2
1FC4:  MOVLW  01
1FC6:  MOVWF  FA9
1FC8:  CLRF   FA8
1FCA:  BCF    FA6.6
1FCC:  BCF    FA6.7
1FCE:  BSF    FA6.2
1FD0:  MOVF   FF2,W
1FD2:  MOVWF  00
1FD4:  BCF    FF2.7
1FD6:  MOVLB  F
1FD8:  MOVLW  55
1FDA:  MOVWF  FA7
1FDC:  MOVLW  AA
1FDE:  MOVWF  FA7
1FE0:  BSF    FA6.1
1FE2:  BTFSC  FA6.1
1FE4:  BRA    1FE2
1FE6:  BCF    FA6.2
1FE8:  MOVF   00,W
1FEA:  IORWF  FF2,F
1FEC:  MOVLW  14
1FEE:  MOVLB  0
1FF0:  MOVWF  xC6
1FF2:  CALL   06E2
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1FF6:  MOVLW  02
1FF8:  MOVWF  FA9
1FFA:  CLRF   FA8
1FFC:  BCF    FA6.6
1FFE:  BCF    FA6.7
2000:  BSF    FA6.2
2002:  MOVF   FF2,W
2004:  MOVWF  00
2006:  BCF    FF2.7
2008:  MOVLB  F
200A:  MOVLW  55
200C:  MOVWF  FA7
200E:  MOVLW  AA
2010:  MOVWF  FA7
2012:  BSF    FA6.1
2014:  BTFSC  FA6.1
2016:  BRA    2014
2018:  BCF    FA6.2
201A:  MOVF   00,W
201C:  IORWF  FF2,F
201E:  MOVLW  14
2020:  MOVLB  0
2022:  MOVWF  xC6
2024:  CALL   06E2
2028:  MOVLW  03
202A:  MOVWF  FA9
202C:  CLRF   FA8
202E:  BCF    FA6.6
2030:  BCF    FA6.7
2032:  BSF    FA6.2
2034:  MOVF   FF2,W
2036:  MOVWF  00
2038:  BCF    FF2.7
203A:  MOVLB  F
203C:  MOVLW  55
203E:  MOVWF  FA7
2040:  MOVLW  AA
2042:  MOVWF  FA7
2044:  BSF    FA6.1
2046:  BTFSC  FA6.1
2048:  BRA    2046
204A:  BCF    FA6.2
204C:  MOVF   00,W
204E:  IORWF  FF2,F
2050:  MOVLW  14
2052:  MOVLB  0
2054:  MOVWF  xC6
2056:  CALL   06E2
....................              reset_cpu(); 
205A:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
205C:  MOVF   39,W
205E:  SUBWF  35,W
2060:  BNZ   20FE
2062:  MOVF   3A,W
2064:  SUBWF  36,W
2066:  BNZ   20FE
2068:  MOVF   3B,W
206A:  SUBWF  37,W
206C:  BNZ   20FE
206E:  MOVF   3C,W
2070:  SUBWF  38,W
2072:  BNZ   20FE
....................             lcd_gotoxy(1,1); 
2074:  MOVLW  01
2076:  MOVWF  xC1
2078:  MOVWF  xC2
207A:  CALL   0852
....................             printf(lcd_putc,"                   "); 
207E:  MOVLW  3C
2080:  MOVWF  FF6
2082:  MOVLW  02
2084:  MOVWF  FF7
2086:  CALL   0912
....................             lcd_gotoxy(1,2); 
208A:  MOVLW  01
208C:  MOVWF  xC1
208E:  MOVLW  02
2090:  MOVWF  xC2
2092:  CALL   0852
....................             printf(lcd_putc,"     Contraseña    "); 
2096:  MOVLW  50
2098:  MOVWF  FF6
209A:  MOVLW  02
209C:  MOVWF  FF7
209E:  CALL   0912
....................             lcd_gotoxy(1,3); 
20A2:  MOVLW  01
20A4:  MOVWF  xC1
20A6:  MOVLW  03
20A8:  MOVWF  xC2
20AA:  CALL   0852
....................             printf(lcd_putc,"      Correcta     "); 
20AE:  MOVLW  64
20B0:  MOVWF  FF6
20B2:  MOVLW  02
20B4:  MOVWF  FF7
20B6:  CALL   0912
....................             lcd_gotoxy(1,4); 
20BA:  MOVLW  01
20BC:  MOVWF  xC1
20BE:  MOVLW  04
20C0:  MOVWF  xC2
20C2:  CALL   0852
....................             printf(lcd_putc,"                   "); 
20C6:  MOVLW  78
20C8:  MOVWF  FF6
20CA:  MOVLW  02
20CC:  MOVWF  FF7
20CE:  CALL   0912
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
20D2:  MOVLW  04
20D4:  MOVWF  xAF
20D6:  MOVLW  FA
20D8:  MOVWF  xC6
20DA:  CALL   06E2
20DE:  DECFSZ xAF,F
20E0:  BRA    20D6
20E2:  MOVLW  32
20E4:  MOVWF  18
20E6:  MOVLW  0B
20E8:  MOVWF  1B
20EA:  MOVLW  0C
20EC:  MOVWF  xC0
20EE:  CALL   08B4
20F2:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
20F4:  CLRF   35
20F6:  CLRF   36
20F8:  CLRF   37
20FA:  CLRF   38
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
20FC:  BRA    2176
....................             lcd_gotoxy(1,1); 
20FE:  MOVLW  01
2100:  MOVWF  xC1
2102:  MOVWF  xC2
2104:  CALL   0852
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2108:  MOVLW  01
210A:  MOVWF  xC1
210C:  MOVLW  02
210E:  MOVWF  xC2
2110:  CALL   0852
....................             printf(lcd_putc,"     Contraseña    "); 
2114:  MOVLW  8C
2116:  MOVWF  FF6
2118:  MOVLW  02
211A:  MOVWF  FF7
211C:  CALL   0912
....................             lcd_gotoxy(1,3); 
2120:  MOVLW  01
2122:  MOVWF  xC1
2124:  MOVLW  03
2126:  MOVWF  xC2
2128:  CALL   0852
....................             printf(lcd_putc,"     Incorrecta    "); 
212C:  MOVLW  A0
212E:  MOVWF  FF6
2130:  MOVLW  02
2132:  MOVWF  FF7
2134:  CALL   0912
....................             lcd_gotoxy(1,4); 
2138:  MOVLW  01
213A:  MOVWF  xC1
213C:  MOVLW  04
213E:  MOVWF  xC2
2140:  CALL   0852
....................             printf(lcd_putc,"                   "); 
2144:  MOVLW  B4
2146:  MOVWF  FF6
2148:  MOVLW  02
214A:  MOVWF  FF7
214C:  CALL   0912
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2150:  MOVLW  04
2152:  MOVWF  xAF
2154:  MOVLW  FA
2156:  MOVWF  xC6
2158:  CALL   06E2
215C:  DECFSZ xAF,F
215E:  BRA    2154
2160:  MOVLW  0B
2162:  MOVWF  1B
2164:  MOVLW  0C
2166:  MOVWF  xC0
2168:  CALL   08B4
216C:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
216E:  CLRF   35
2170:  CLRF   36
2172:  CLRF   37
2174:  CLRF   38
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2176:  DECFSZ 18,W
2178:  BRA    23B0
....................       EliminaRuido(); 
217A:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
217E:  MOVLW  01
2180:  MOVWF  xC1
2182:  MOVWF  xC2
2184:  CALL   0852
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2188:  MOVLW  C8
218A:  MOVWF  FF6
218C:  MOVLW  02
218E:  MOVWF  FF7
2190:  CALL   0912
....................          mensajes(1+paso,2); 
2194:  MOVLW  01
2196:  ADDWF  31,W
2198:  MOVWF  xAF
219A:  MOVWF  xB0
219C:  MOVLW  02
219E:  MOVWF  xB1
21A0:  CALL   0B68
....................          mensajes(2+paso,3); 
21A4:  MOVLW  02
21A6:  ADDWF  31,W
21A8:  MOVWF  xAF
21AA:  MOVWF  xB0
21AC:  MOVLW  03
21AE:  MOVWF  xB1
21B0:  CALL   0B68
....................          mensajes(3+paso,4); 
21B4:  MOVLW  03
21B6:  ADDWF  31,W
21B8:  MOVWF  xAF
21BA:  MOVWF  xB0
21BC:  MOVLW  04
21BE:  MOVWF  xB1
21C0:  CALL   0B68
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
21C4:  MOVLW  01
21C6:  MOVWF  xC1
21C8:  MOVFF  1C,C2
21CC:  CALL   0852
....................         lcd_putc(t[0]); 
21D0:  MOVFF  32,C0
21D4:  CALL   08B4
....................  
....................         if(Flecha==2) 
21D8:  MOVF   1C,W
21DA:  SUBLW  02
21DC:  BNZ   2206
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
21DE:  MOVLW  01
21E0:  MOVWF  xC1
21E2:  MOVLW  04
21E4:  MOVWF  xC2
21E6:  CALL   0852
....................             lcd_putc(t[1]); 
21EA:  MOVFF  33,C0
21EE:  CALL   08B4
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
21F2:  MOVLW  01
21F4:  MOVWF  xC1
21F6:  MOVLW  03
21F8:  MOVWF  xC2
21FA:  CALL   0852
....................             lcd_putc(t[1]); 
21FE:  MOVFF  33,C0
2202:  CALL   08B4
....................           } 
....................          
....................         if(Flecha==4) 
2206:  MOVF   1C,W
2208:  SUBLW  04
220A:  BNZ   2234
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
220C:  MOVLW  01
220E:  MOVWF  xC1
2210:  MOVLW  02
2212:  MOVWF  xC2
2214:  CALL   0852
....................             lcd_putc(t[1]); 
2218:  MOVFF  33,C0
221C:  CALL   08B4
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2220:  MOVLW  01
2222:  MOVWF  xC1
2224:  MOVLW  03
2226:  MOVWF  xC2
2228:  CALL   0852
....................             lcd_putc(t[1]); 
222C:  MOVFF  33,C0
2230:  CALL   08B4
....................           } 
....................          
....................         if(Flecha==3) 
2234:  MOVF   1C,W
2236:  SUBLW  03
2238:  BNZ   2262
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
223A:  MOVLW  01
223C:  MOVWF  xC1
223E:  MOVLW  04
2240:  MOVWF  xC2
2242:  CALL   0852
....................             lcd_putc(t[1]); 
2246:  MOVFF  33,C0
224A:  CALL   08B4
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
224E:  MOVLW  01
2250:  MOVWF  xC1
2252:  MOVLW  02
2254:  MOVWF  xC2
2256:  CALL   0852
....................             lcd_putc(t[1]); 
225A:  MOVFF  33,C0
225E:  CALL   08B4
....................           } 
....................          Cambio=OFF; 
2262:  BCF    17.5
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
2264:  BSF    F92.5
2266:  BTFSC  F80.5
2268:  BRA    2294
....................          delay_ms(20); 
226A:  MOVLW  14
226C:  MOVWF  xC6
226E:  CALL   06E2
....................          if(UP){ 
2272:  BSF    F92.5
2274:  BTFSC  F80.5
2276:  BRA    2292
....................             if(Flanco == 0){ 
2278:  BTFSC  16.3
227A:  BRA    2292
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
227C:  DECF   1E,F
227E:  DECF   1C,F
2280:  MOVLW  01
2282:  ADDWF  1C,W
2284:  MOVWF  1D
2286:  BSF    16.3
2288:  MOVLW  1E
228A:  MOVWF  xC6
228C:  CALL   06E2
2290:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2292:  BRA    2296
....................          Flanco = 0; 
2294:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2296:  BSF    F96.0
2298:  BTFSC  F84.0
229A:  BRA    22C6
....................          delay_ms(20); 
229C:  MOVLW  14
229E:  MOVWF  xC6
22A0:  CALL   06E2
....................          if(DOWN){ 
22A4:  BSF    F96.0
22A6:  BTFSC  F84.0
22A8:  BRA    22C4
....................             if(Flanco2 == 0){ 
22AA:  BTFSC  16.5
22AC:  BRA    22C4
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
22AE:  INCF   1E,F
22B0:  INCF   1C,F
22B2:  MOVLW  01
22B4:  SUBWF  1C,W
22B6:  MOVWF  1D
22B8:  BSF    16.5
22BA:  MOVLW  1E
22BC:  MOVWF  xC6
22BE:  CALL   06E2
22C2:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
22C4:  BRA    22C8
....................          Flanco2 = 0; 
22C6:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
22C8:  MOVF   1E,W
22CA:  SUBWF  20,W
22CC:  BC    22DE
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
22CE:  INCF   31,F
22D0:  MOVFF  1E,20
22D4:  MOVLW  02
22D6:  SUBWF  20,W
22D8:  MOVWF  1F
22DA:  MOVLW  04
22DC:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
22DE:  MOVF   1F,W
22E0:  SUBWF  1E,W
22E2:  BC    22F4
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
22E4:  DECF   31,F
22E6:  MOVFF  1E,1F
22EA:  MOVLW  02
22EC:  ADDWF  1F,W
22EE:  MOVWF  20
22F0:  MOVLW  02
22F2:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
22F4:  MOVF   1E,W
22F6:  SUBWF  19,W
22F8:  BC    230C
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
22FA:  MOVFF  1A,1E
22FE:  MOVLW  02
2300:  MOVWF  1C
2302:  CLRF   31
2304:  MOVFF  1E,1F
2308:  ADDWF  1F,W
230A:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
230C:  MOVF   1A,W
230E:  SUBWF  1E,W
2310:  BC    2328
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
2312:  MOVFF  19,1E
2316:  MOVLW  04
2318:  MOVWF  1C
231A:  SUBWF  19,W
231C:  MOVWF  31
231E:  MOVFF  1E,20
2322:  MOVLW  02
2324:  SUBWF  20,W
2326:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
2328:  BTFSC  31.7
232A:  BRA    232E
232C:  BRA    2330
....................          paso=0; 
232E:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
2330:  BSF    F96.1
2332:  BTFSC  F84.1
2334:  BRA    237C
....................          delay_ms(20); 
2336:  MOVLW  14
2338:  MOVWF  xC6
233A:  CALL   06E2
....................          if(RIGHT){ 
233E:  BSF    F96.1
2340:  BTFSC  F84.1
2342:  BRA    2378
....................             if(Flanco1 == 0){ 
2344:  BTFSC  16.4
2346:  BRA    2378
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2348:  BSF    16.4
234A:  MOVFF  1E,18
234E:  MOVLW  03
2350:  MOVWF  1C
2352:  MOVLW  02
2354:  MOVWF  xAF
2356:  MOVLW  96
2358:  MOVWF  xC6
235A:  CALL   06E2
235E:  DECFSZ xAF,F
2360:  BRA    2356
2362:  MOVLW  0C
2364:  MOVWF  xC0
2366:  CALL   08B4
....................                if(Menu==6){ 
236A:  MOVF   18,W
236C:  SUBLW  06
236E:  BNZ   2378
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2370:  CLRF   35
2372:  CLRF   36
2374:  CLRF   37
2376:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2378:  BSF    17.5
....................       }else{ 
237A:  BRA    237E
....................         Flanco1 = 0; 
237C:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
237E:  BSF    F96.2
2380:  BTFSC  F84.2
2382:  BRA    23B0
....................          delay_ms(20); 
2384:  MOVLW  14
2386:  MOVWF  xC6
2388:  CALL   06E2
....................          if(IZQU){ 
238C:  BSF    F96.2
238E:  BTFSC  F84.2
2390:  BRA    23B0
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2392:  MOVLW  02
2394:  MOVWF  xAF
2396:  MOVLW  FA
2398:  MOVWF  xC6
239A:  CALL   06E2
239E:  DECFSZ xAF,F
23A0:  BRA    2396
23A2:  MOVLW  32
23A4:  MOVWF  18
23A6:  MOVLW  0C
23A8:  MOVWF  xC0
23AA:  CALL   08B4
23AE:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
23B0:  MOVF   18,W
23B2:  SUBLW  02
23B4:  BTFSS  FD8.2
23B6:  BRA    260C
....................    EliminaRuido(); 
23B8:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
23BC:  MOVLW  01
23BE:  MOVWF  xC1
23C0:  MOVWF  xC2
23C2:  CALL   0852
....................       printf(lcd_putc,"    Temporizador     "); 
23C6:  MOVLW  DE
23C8:  MOVWF  FF6
23CA:  MOVLW  02
23CC:  MOVWF  FF7
23CE:  CALL   0912
....................       lcd_gotoxy(1,2); 
23D2:  MOVLW  01
23D4:  MOVWF  xC1
23D6:  MOVLW  02
23D8:  MOVWF  xC2
23DA:  CALL   0852
....................       printf(lcd_putc,"       Luz UV        "); 
23DE:  MOVLW  F4
23E0:  MOVWF  FF6
23E2:  MOVLW  02
23E4:  MOVWF  FF7
23E6:  CALL   0912
....................       lcd_gotoxy(6,3); 
23EA:  MOVLW  06
23EC:  MOVWF  xC1
23EE:  MOVLW  03
23F0:  MOVWF  xC2
23F2:  CALL   0852
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
23F6:  MOVFF  29,AF
23FA:  MOVLW  03
23FC:  MOVWF  xB0
23FE:  CALL   0C06
2402:  MOVLW  3A
2404:  MOVWF  xC0
2406:  CALL   08B4
240A:  MOVFF  2A,AF
240E:  MOVLW  01
2410:  MOVWF  xB0
2412:  CALL   0C06
2416:  MOVLW  13
2418:  MOVWF  FF6
241A:  MOVLW  03
241C:  MOVWF  FF7
241E:  MOVLW  08
2420:  MOVWF  xB3
2422:  CALL   0A5A
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2426:  MOVLW  06
2428:  ADDWF  2E,W
242A:  MOVWF  xAF
242C:  MOVWF  xC1
242E:  MOVLW  04
2430:  MOVWF  xC2
2432:  CALL   0852
....................       lcd_putc(t[2]); 
2436:  MOVFF  34,C0
243A:  CALL   08B4
....................        
....................       Cambio=OFF; 
243E:  BCF    17.5
.................... //   } 
....................     
....................    if(UP) 
2440:  BSF    F92.5
2442:  BTFSC  F80.5
2444:  BRA    2492
....................    { 
....................       delay_ms(20); 
2446:  MOVLW  14
2448:  MOVWF  xC6
244A:  CALL   06E2
....................       if(UP){ 
244E:  BSF    F92.5
2450:  BTFSC  F80.5
2452:  BRA    2492
....................          if(unidad2==1) 
2454:  DECFSZ 2E,W
2456:  BRA    2472
....................          { 
....................             if(tempo_minutos_pro<240) 
2458:  MOVF   29,W
245A:  SUBLW  EF
245C:  BNC   2472
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
245E:  MOVLW  05
2460:  ADDWF  29,F
2462:  MOVLW  02
2464:  MOVWF  xAF
2466:  MOVLW  96
2468:  MOVWF  xC6
246A:  CALL   06E2
246E:  DECFSZ xAF,F
2470:  BRA    2466
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2472:  MOVF   2E,W
2474:  SUBLW  04
2476:  BNZ   2490
....................          { 
....................             if(tempo_segundos_pro<59) 
2478:  MOVF   2A,W
247A:  SUBLW  3A
247C:  BNC   2490
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
247E:  INCF   2A,F
2480:  MOVLW  02
2482:  MOVWF  xAF
2484:  MOVLW  96
2486:  MOVWF  xC6
2488:  CALL   06E2
248C:  DECFSZ xAF,F
248E:  BRA    2484
....................             } 
....................          }      
....................       Cambio=ON; 
2490:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2492:  BSF    F96.0
2494:  BTFSC  F84.0
2496:  BRA    24E0
....................    { 
....................       delay_ms(20); 
2498:  MOVLW  14
249A:  MOVWF  xC6
249C:  CALL   06E2
....................       if(DOWN){ 
24A0:  BSF    F96.0
24A2:  BTFSC  F84.0
24A4:  BRA    24E0
....................          if(unidad2==1) 
24A6:  DECFSZ 2E,W
24A8:  BRA    24C2
....................          { 
....................             if(tempo_minutos_pro>0) 
24AA:  MOVF   29,F
24AC:  BZ    24C2
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
24AE:  MOVLW  05
24B0:  SUBWF  29,F
24B2:  MOVLW  02
24B4:  MOVWF  xAF
24B6:  MOVLW  96
24B8:  MOVWF  xC6
24BA:  CALL   06E2
24BE:  DECFSZ xAF,F
24C0:  BRA    24B6
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
24C2:  MOVF   2E,W
24C4:  SUBLW  04
24C6:  BNZ   24DE
....................          { 
....................             if(tempo_segundos_pro>0) 
24C8:  MOVF   2A,F
24CA:  BZ    24DE
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
24CC:  DECF   2A,F
24CE:  MOVLW  02
24D0:  MOVWF  xAF
24D2:  MOVLW  96
24D4:  MOVWF  xC6
24D6:  CALL   06E2
24DA:  DECFSZ xAF,F
24DC:  BRA    24D2
....................             }    
....................          } 
....................       Cambio=ON; 
24DE:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
24E0:  BSF    F96.1
24E2:  BTFSC  F84.1
24E4:  BRA    2522
....................    { 
....................       delay_ms(20); 
24E6:  MOVLW  14
24E8:  MOVWF  xC6
24EA:  CALL   06E2
....................       if(RIGHT){ 
24EE:  BSF    F96.1
24F0:  BTFSC  F84.1
24F2:  BRA    2522
....................          if(unidad2==1) 
24F4:  DECFSZ 2E,W
24F6:  BRA    24FE
....................          { 
....................             unidad2=4; 
24F8:  MOVLW  04
24FA:  MOVWF  2E
....................          } 
....................          else 
24FC:  BRA    2508
....................          { 
....................             if(unidad2==4) 
24FE:  MOVF   2E,W
2500:  SUBLW  04
2502:  BNZ   2508
....................             { 
....................                unidad2=1; 
2504:  MOVLW  01
2506:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
2508:  MOVLW  02
250A:  MOVWF  xAF
250C:  MOVLW  FA
250E:  MOVWF  xC6
2510:  CALL   06E2
2514:  DECFSZ xAF,F
2516:  BRA    250C
....................       printf(lcd_putc,"\f"); 
2518:  MOVLW  0C
251A:  MOVWF  xC0
251C:  CALL   08B4
....................       Cambio=ON; 
2520:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
2522:  BSF    F96.2
2524:  BTFSC  F84.2
2526:  BRA    260C
....................    { 
....................       if(IZQU){ 
2528:  BSF    F96.2
252A:  BTFSC  F84.2
252C:  BRA    260C
....................          delay_ms(200); 
252E:  MOVLW  C8
2530:  MOVWF  xC6
2532:  CALL   06E2
....................          printf(lcd_putc,"\f"); 
2536:  MOVLW  0C
2538:  MOVWF  xC0
253A:  CALL   08B4
....................          lcd_gotoxy(1,2); 
253E:  MOVLW  01
2540:  MOVWF  xC1
2542:  MOVLW  02
2544:  MOVWF  xC2
2546:  CALL   0852
....................          printf(lcd_putc,"Tiempo Almacenado"); 
254A:  MOVLW  1C
254C:  MOVWF  FF6
254E:  MOVLW  03
2550:  MOVWF  FF7
2552:  CALL   0912
....................          lcd_gotoxy(1,3); 
2556:  MOVLW  01
2558:  MOVWF  xC1
255A:  MOVLW  03
255C:  MOVWF  xC2
255E:  CALL   0852
....................          printf(lcd_putc,"  Correctamente  "); 
2562:  MOVLW  2E
2564:  MOVWF  FF6
2566:  MOVLW  03
2568:  MOVWF  FF7
256A:  CALL   0912
....................          write_eeprom(20,tempo_minutos_pro); 
256E:  MOVLW  14
2570:  MOVWF  FA9
2572:  MOVFF  29,FA8
2576:  BCF    FA6.6
2578:  BCF    FA6.7
257A:  BSF    FA6.2
257C:  MOVF   FF2,W
257E:  MOVWF  00
2580:  BCF    FF2.7
2582:  MOVLB  F
2584:  MOVLW  55
2586:  MOVWF  FA7
2588:  MOVLW  AA
258A:  MOVWF  FA7
258C:  BSF    FA6.1
258E:  BTFSC  FA6.1
2590:  BRA    258E
2592:  BCF    FA6.2
2594:  MOVF   00,W
2596:  IORWF  FF2,F
....................          delay_ms(20); 
2598:  MOVLW  14
259A:  MOVLB  0
259C:  MOVWF  xC6
259E:  CALL   06E2
....................          write_eeprom(30,tempo_segundos_pro); 
25A2:  MOVLW  1E
25A4:  MOVWF  FA9
25A6:  MOVFF  2A,FA8
25AA:  BCF    FA6.6
25AC:  BCF    FA6.7
25AE:  BSF    FA6.2
25B0:  MOVF   FF2,W
25B2:  MOVWF  00
25B4:  BCF    FF2.7
25B6:  MOVLB  F
25B8:  MOVLW  55
25BA:  MOVWF  FA7
25BC:  MOVLW  AA
25BE:  MOVWF  FA7
25C0:  BSF    FA6.1
25C2:  BTFSC  FA6.1
25C4:  BRA    25C2
25C6:  BCF    FA6.2
25C8:  MOVF   00,W
25CA:  IORWF  FF2,F
....................          delay_ms(20); 
25CC:  MOVLW  14
25CE:  MOVLB  0
25D0:  MOVWF  xC6
25D2:  CALL   06E2
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
25D6:  MOVFF  29,27
25DA:  MOVFF  2A,28
....................          delay_ms(700); 
25DE:  MOVLW  04
25E0:  MOVWF  xAF
25E2:  MOVLW  AF
25E4:  MOVWF  xC6
25E6:  CALL   06E2
25EA:  DECFSZ xAF,F
25EC:  BRA    25E2
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
25EE:  MOVLW  1E
25F0:  MOVWF  xC6
25F2:  CALL   06E2
25F6:  MOVLW  01
25F8:  MOVWF  18
25FA:  CLRF   31
25FC:  MOVLW  02
25FE:  MOVWF  1C
2600:  MOVWF  1E
2602:  MOVLW  0C
2604:  MOVWF  xC0
2606:  CALL   08B4
....................          Cambio=ON; 
260A:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
260C:  MOVF   18,W
260E:  SUBLW  03
2610:  BTFSS  FD8.2
2612:  BRA    295E
....................       EliminaRuido(); 
2614:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2618:  MOVLW  01
261A:  MOVWF  xC1
261C:  MOVWF  xC2
261E:  CALL   0852
....................          printf(lcd_putc,"     Ingrese        "); 
2622:  MOVLW  40
2624:  MOVWF  FF6
2626:  MOVLW  03
2628:  MOVWF  FF7
262A:  CALL   0912
....................          lcd_gotoxy(1,2); 
262E:  MOVLW  01
2630:  MOVWF  xC1
2632:  MOVLW  02
2634:  MOVWF  xC2
2636:  CALL   0852
....................          printf(lcd_putc,"    Contraseña      "); 
263A:  MOVLW  56
263C:  MOVWF  FF6
263E:  MOVLW  03
2640:  MOVWF  FF7
2642:  CALL   0912
....................          lcd_gotoxy(1,3); 
2646:  MOVLW  01
2648:  MOVWF  xC1
264A:  MOVLW  03
264C:  MOVWF  xC2
264E:  CALL   0852
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2652:  MOVLW  6C
2654:  MOVWF  FF6
2656:  MOVLW  03
2658:  MOVWF  FF7
265A:  MOVLW  0A
265C:  MOVWF  xB3
265E:  CALL   0A5A
2662:  MOVFF  35,AF
2666:  MOVLW  1F
2668:  MOVWF  xB0
266A:  CALL   0AA0
266E:  MOVFF  36,AF
2672:  MOVLW  1F
2674:  MOVWF  xB0
2676:  CALL   0AA0
267A:  MOVFF  37,AF
267E:  MOVLW  1F
2680:  MOVWF  xB0
2682:  CALL   0AA0
2686:  MOVFF  38,AF
268A:  MOVLW  1F
268C:  MOVWF  xB0
268E:  CALL   0AA0
2692:  MOVLW  20
2694:  MOVWF  xC0
2696:  CALL   08B4
269A:  MOVLW  20
269C:  MOVWF  xC0
269E:  CALL   08B4
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
26A2:  MOVFF  1B,C1
26A6:  MOVLW  04
26A8:  MOVWF  xC2
26AA:  CALL   0852
....................          lcd_putc(t[2]); 
26AE:  MOVFF  34,C0
26B2:  CALL   08B4
....................           
....................          if(unidad>11&&unidad<14){ 
26B6:  MOVF   1B,W
26B8:  SUBLW  0B
26BA:  BC    26DA
26BC:  MOVF   1B,W
26BE:  SUBLW  0D
26C0:  BNC   26DA
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
26C2:  MOVLW  01
26C4:  SUBWF  1B,W
26C6:  MOVWF  xAF
26C8:  MOVWF  xC1
26CA:  MOVLW  04
26CC:  MOVWF  xC2
26CE:  CALL   0852
....................             lcd_putc(t[1]); 
26D2:  MOVFF  33,C0
26D6:  CALL   08B4
....................          } 
....................           
....................          Cambio=OFF; 
26DA:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
26DC:  BSF    F92.5
26DE:  BTFSC  F80.5
26E0:  BRA    2714
....................          delay_ms(20); 
26E2:  MOVLW  14
26E4:  MOVWF  xC6
26E6:  CALL   06E2
....................          if(UP){ 
26EA:  BSF    F92.5
26EC:  BTFSC  F80.5
26EE:  BRA    2712
....................             if(Flanco == 0) { 
26F0:  BTFSC  16.3
26F2:  BRA    2712
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
26F4:  MOVLW  0B
26F6:  SUBWF  1B,W
26F8:  CLRF   03
26FA:  ADDLW  35
26FC:  MOVWF  FE9
26FE:  MOVLW  00
2700:  ADDWFC 03,W
2702:  MOVWF  FEA
2704:  INCF   FEF,F
2706:  BSF    16.3
2708:  MOVLW  1E
270A:  MOVWF  xC6
270C:  CALL   06E2
2710:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2712:  BRA    2716
....................          Flanco = 0; 
2714:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2716:  BSF    F96.0
2718:  BTFSC  F84.0
271A:  BRA    274E
....................          delay_ms(20); 
271C:  MOVLW  14
271E:  MOVWF  xC6
2720:  CALL   06E2
....................          if(DOWN){ 
2724:  BSF    F96.0
2726:  BTFSC  F84.0
2728:  BRA    274C
....................             if(Flanco2 == 0) { 
272A:  BTFSC  16.5
272C:  BRA    274C
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
272E:  MOVLW  0B
2730:  SUBWF  1B,W
2732:  CLRF   03
2734:  ADDLW  35
2736:  MOVWF  FE9
2738:  MOVLW  00
273A:  ADDWFC 03,W
273C:  MOVWF  FEA
273E:  DECF   FEF,F
2740:  BSF    16.5
2742:  MOVLW  1E
2744:  MOVWF  xC6
2746:  CALL   06E2
274A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
274C:  BRA    2750
....................          Flanco2 = 0; 
274E:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2750:  BSF    F96.1
2752:  BTFSC  F84.1
2754:  BRA    2780
....................          delay_ms(20); 
2756:  MOVLW  14
2758:  MOVWF  xC6
275A:  CALL   06E2
....................          if(RIGHT){ 
275E:  BSF    F96.1
2760:  BTFSC  F84.1
2762:  BRA    277E
....................             if(Flanco1 == 0) { 
2764:  BTFSC  16.4
2766:  BRA    277E
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2768:  BSF    16.4
276A:  INCF   1B,F
276C:  MOVLW  1E
276E:  MOVWF  xC6
2770:  CALL   06E2
2774:  MOVLW  0C
2776:  MOVWF  xC0
2778:  CALL   08B4
277C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
277E:  BRA    2782
....................          Flanco1 = 0; 
2780:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2782:  BSF    F96.2
2784:  BTFSC  F84.2
2786:  BRA    27B2
....................          delay_ms(150); 
2788:  MOVLW  96
278A:  MOVWF  xC6
278C:  CALL   06E2
....................          if(IZQU){ 
2790:  BSF    F96.2
2792:  BTFSC  F84.2
2794:  BRA    27B0
....................             if(Flanco3 == 0){ 
2796:  BTFSC  16.6
2798:  BRA    27B0
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
279A:  BSF    16.6
279C:  DECF   1B,F
279E:  MOVLW  1E
27A0:  MOVWF  xC6
27A2:  CALL   06E2
27A6:  MOVLW  0C
27A8:  MOVWF  xC0
27AA:  CALL   08B4
27AE:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
27B0:  BRA    27B4
....................         Flanco3 = 0; 
27B2:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
27B4:  MOVLW  0B
27B6:  SUBWF  1B,W
27B8:  CLRF   03
27BA:  ADDLW  35
27BC:  MOVWF  FE9
27BE:  MOVLW  00
27C0:  ADDWFC 03,W
27C2:  MOVWF  FEA
27C4:  BTFSC  FEF.7
27C6:  BRA    27CA
27C8:  BRA    27DE
....................          clave[unidad-11]=9; 
27CA:  MOVLW  0B
27CC:  SUBWF  1B,W
27CE:  CLRF   03
27D0:  ADDLW  35
27D2:  MOVWF  FE9
27D4:  MOVLW  00
27D6:  ADDWFC 03,W
27D8:  MOVWF  FEA
27DA:  MOVLW  09
27DC:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
27DE:  MOVLW  0B
27E0:  SUBWF  1B,W
27E2:  CLRF   03
27E4:  ADDLW  35
27E6:  MOVWF  FE9
27E8:  MOVLW  00
27EA:  ADDWFC 03,W
27EC:  MOVWF  FEA
27EE:  BTFSC  FEF.7
27F0:  BRA    280A
27F2:  MOVF   FEF,W
27F4:  SUBLW  09
27F6:  BC    280A
....................          clave[unidad-11]=0; 
27F8:  MOVLW  0B
27FA:  SUBWF  1B,W
27FC:  CLRF   03
27FE:  ADDLW  35
2800:  MOVWF  FE9
2802:  MOVLW  00
2804:  ADDWFC 03,W
2806:  MOVWF  FEA
2808:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
280A:  MOVF   1B,W
280C:  SUBLW  0A
280E:  BNC   2830
....................          unidad=11; 
2810:  MOVLW  0B
2812:  MOVWF  1B
....................          Menu=1; 
2814:  MOVLW  01
2816:  MOVWF  18
....................          paso=0; 
2818:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
281A:  CLRF   35
281C:  CLRF   36
281E:  CLRF   37
2820:  CLRF   38
2822:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2824:  MOVLW  0B
2826:  MOVWF  1B
2828:  MOVLW  0C
282A:  MOVWF  xC0
282C:  CALL   08B4
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
2830:  MOVF   1B,W
2832:  SUBLW  0E
2834:  BTFSC  FD8.0
2836:  BRA    295E
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
2838:  MOVF   39,W
283A:  SUBWF  35,W
283C:  BNZ   28DA
283E:  MOVF   3A,W
2840:  SUBWF  36,W
2842:  BNZ   28DA
2844:  MOVF   3B,W
2846:  SUBWF  37,W
2848:  BNZ   28DA
284A:  MOVF   3C,W
284C:  SUBWF  38,W
284E:  BNZ   28DA
....................             lcd_gotoxy(1,1); 
2850:  MOVLW  01
2852:  MOVWF  xC1
2854:  MOVWF  xC2
2856:  CALL   0852
....................             printf(lcd_putc,"                    "); 
285A:  MOVLW  82
285C:  MOVWF  FF6
285E:  MOVLW  03
2860:  MOVWF  FF7
2862:  CALL   0912
....................             lcd_gotoxy(1,2); 
2866:  MOVLW  01
2868:  MOVWF  xC1
286A:  MOVLW  02
286C:  MOVWF  xC2
286E:  CALL   0852
....................             printf(lcd_putc,"     Contraseña     "); 
2872:  MOVLW  98
2874:  MOVWF  FF6
2876:  MOVLW  03
2878:  MOVWF  FF7
287A:  CALL   0912
....................             lcd_gotoxy(1,3); 
287E:  MOVLW  01
2880:  MOVWF  xC1
2882:  MOVLW  03
2884:  MOVWF  xC2
2886:  CALL   0852
....................             printf(lcd_putc,"      Correcta      "); 
288A:  MOVLW  AE
288C:  MOVWF  FF6
288E:  MOVLW  03
2890:  MOVWF  FF7
2892:  CALL   0912
....................             lcd_gotoxy(1,4); 
2896:  MOVLW  01
2898:  MOVWF  xC1
289A:  MOVLW  04
289C:  MOVWF  xC2
289E:  CALL   0852
....................             printf(lcd_putc,"                    "); 
28A2:  MOVLW  C4
28A4:  MOVWF  FF6
28A6:  MOVLW  03
28A8:  MOVWF  FF7
28AA:  CALL   0912
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
28AE:  MOVLW  02
28B0:  MOVWF  xAF
28B2:  MOVLW  FA
28B4:  MOVWF  xC6
28B6:  CALL   06E2
28BA:  DECFSZ xAF,F
28BC:  BRA    28B2
28BE:  MOVLW  3D
28C0:  MOVWF  18
28C2:  MOVLW  0B
28C4:  MOVWF  1B
28C6:  MOVLW  0C
28C8:  MOVWF  xC0
28CA:  CALL   08B4
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
28CE:  CLRF   35
28D0:  CLRF   36
28D2:  CLRF   37
28D4:  CLRF   38
28D6:  BSF    17.5
....................          }else{ 
28D8:  BRA    295E
....................             lcd_gotoxy(1,1); 
28DA:  MOVLW  01
28DC:  MOVWF  xC1
28DE:  MOVWF  xC2
28E0:  CALL   0852
....................             printf(lcd_putc,"                    "); 
28E4:  MOVLW  DA
28E6:  MOVWF  FF6
28E8:  MOVLW  03
28EA:  MOVWF  FF7
28EC:  CALL   0912
....................             lcd_gotoxy(1,2); 
28F0:  MOVLW  01
28F2:  MOVWF  xC1
28F4:  MOVLW  02
28F6:  MOVWF  xC2
28F8:  CALL   0852
....................             printf(lcd_putc,"     Contraseña     "); 
28FC:  MOVLW  F0
28FE:  MOVWF  FF6
2900:  MOVLW  03
2902:  MOVWF  FF7
2904:  CALL   0912
....................             lcd_gotoxy(1,3); 
2908:  MOVLW  01
290A:  MOVWF  xC1
290C:  MOVLW  03
290E:  MOVWF  xC2
2910:  CALL   0852
....................             printf(lcd_putc,"     Incorrecta     "); 
2914:  MOVLW  06
2916:  MOVWF  FF6
2918:  MOVLW  04
291A:  MOVWF  FF7
291C:  CALL   0912
....................             lcd_gotoxy(1,4); 
2920:  MOVLW  01
2922:  MOVWF  xC1
2924:  MOVLW  04
2926:  MOVWF  xC2
2928:  CALL   0852
....................             printf(lcd_putc,"                    "); 
292C:  MOVLW  1C
292E:  MOVWF  FF6
2930:  MOVLW  04
2932:  MOVWF  FF7
2934:  CALL   0912
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2938:  MOVLW  02
293A:  MOVWF  xAF
293C:  MOVLW  FA
293E:  MOVWF  xC6
2940:  CALL   06E2
2944:  DECFSZ xAF,F
2946:  BRA    293C
2948:  MOVLW  0B
294A:  MOVWF  1B
294C:  MOVLW  0C
294E:  MOVWF  xC0
2950:  CALL   08B4
2954:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2956:  CLRF   35
2958:  CLRF   36
295A:  CLRF   37
295C:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
295E:  MOVF   18,W
2960:  SUBLW  3D
2962:  BTFSS  FD8.2
2964:  BRA    2CEE
....................       EliminaRuido(); 
2966:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
296A:  MOVLW  01
296C:  MOVWF  xC1
296E:  MOVWF  xC2
2970:  CALL   0852
....................          printf(lcd_putc,"     Ingrese        "); 
2974:  MOVLW  32
2976:  MOVWF  FF6
2978:  MOVLW  04
297A:  MOVWF  FF7
297C:  CALL   0912
....................          lcd_gotoxy(1,2); 
2980:  MOVLW  01
2982:  MOVWF  xC1
2984:  MOVLW  02
2986:  MOVWF  xC2
2988:  CALL   0852
....................          printf(lcd_putc,"  Contraseña Nueva  "); 
298C:  MOVLW  48
298E:  MOVWF  FF6
2990:  MOVLW  04
2992:  MOVWF  FF7
2994:  CALL   0912
....................          lcd_gotoxy(1,3); 
2998:  MOVLW  01
299A:  MOVWF  xC1
299C:  MOVLW  03
299E:  MOVWF  xC2
29A0:  CALL   0852
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
29A4:  MOVLW  5E
29A6:  MOVWF  FF6
29A8:  MOVLW  04
29AA:  MOVWF  FF7
29AC:  MOVLW  0A
29AE:  MOVWF  xB3
29B0:  CALL   0A5A
29B4:  MOVFF  35,AF
29B8:  MOVLW  1F
29BA:  MOVWF  xB0
29BC:  CALL   0AA0
29C0:  MOVFF  36,AF
29C4:  MOVLW  1F
29C6:  MOVWF  xB0
29C8:  CALL   0AA0
29CC:  MOVFF  37,AF
29D0:  MOVLW  1F
29D2:  MOVWF  xB0
29D4:  CALL   0AA0
29D8:  MOVFF  38,AF
29DC:  MOVLW  1F
29DE:  MOVWF  xB0
29E0:  CALL   0AA0
29E4:  MOVLW  20
29E6:  MOVWF  xC0
29E8:  CALL   08B4
29EC:  MOVLW  20
29EE:  MOVWF  xC0
29F0:  CALL   08B4
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
29F4:  MOVFF  1B,C1
29F8:  MOVLW  04
29FA:  MOVWF  xC2
29FC:  CALL   0852
....................          lcd_putc(t[2]); 
2A00:  MOVFF  34,C0
2A04:  CALL   08B4
....................           
....................          if(unidad>11&&unidad<14){ 
2A08:  MOVF   1B,W
2A0A:  SUBLW  0B
2A0C:  BC    2A2C
2A0E:  MOVF   1B,W
2A10:  SUBLW  0D
2A12:  BNC   2A2C
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2A14:  MOVLW  01
2A16:  SUBWF  1B,W
2A18:  MOVWF  xAF
2A1A:  MOVWF  xC1
2A1C:  MOVLW  04
2A1E:  MOVWF  xC2
2A20:  CALL   0852
....................             lcd_putc(t[1]); 
2A24:  MOVFF  33,C0
2A28:  CALL   08B4
....................          } 
....................           
....................          Cambio=OFF; 
2A2C:  BCF    17.5
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
2A2E:  BSF    F92.5
2A30:  BTFSC  F80.5
2A32:  BRA    2A66
....................          delay_ms(20); 
2A34:  MOVLW  14
2A36:  MOVWF  xC6
2A38:  CALL   06E2
....................          if(UP){ 
2A3C:  BSF    F92.5
2A3E:  BTFSC  F80.5
2A40:  BRA    2A64
....................             if(Flanco == 0) { 
2A42:  BTFSC  16.3
2A44:  BRA    2A64
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2A46:  MOVLW  0B
2A48:  SUBWF  1B,W
2A4A:  CLRF   03
2A4C:  ADDLW  35
2A4E:  MOVWF  FE9
2A50:  MOVLW  00
2A52:  ADDWFC 03,W
2A54:  MOVWF  FEA
2A56:  INCF   FEF,F
2A58:  BSF    16.3
2A5A:  MOVLW  1E
2A5C:  MOVWF  xC6
2A5E:  CALL   06E2
2A62:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2A64:  BRA    2A68
....................          Flanco = 0; 
2A66:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2A68:  BSF    F96.0
2A6A:  BTFSC  F84.0
2A6C:  BRA    2AA0
....................          delay_ms(20); 
2A6E:  MOVLW  14
2A70:  MOVWF  xC6
2A72:  CALL   06E2
....................          if(DOWN){ 
2A76:  BSF    F96.0
2A78:  BTFSC  F84.0
2A7A:  BRA    2A9E
....................             if(Flanco2 == 0) { 
2A7C:  BTFSC  16.5
2A7E:  BRA    2A9E
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2A80:  MOVLW  0B
2A82:  SUBWF  1B,W
2A84:  CLRF   03
2A86:  ADDLW  35
2A88:  MOVWF  FE9
2A8A:  MOVLW  00
2A8C:  ADDWFC 03,W
2A8E:  MOVWF  FEA
2A90:  DECF   FEF,F
2A92:  BSF    16.5
2A94:  MOVLW  1E
2A96:  MOVWF  xC6
2A98:  CALL   06E2
2A9C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2A9E:  BRA    2AA2
....................          Flanco2 = 0; 
2AA0:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2AA2:  BSF    F96.1
2AA4:  BTFSC  F84.1
2AA6:  BRA    2ACA
....................          if(RIGHT){ 
2AA8:  BSF    F96.1
2AAA:  BTFSC  F84.1
2AAC:  BRA    2AC8
....................             if(Flanco1 == 0) { 
2AAE:  BTFSC  16.4
2AB0:  BRA    2AC8
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2AB2:  BSF    16.4
2AB4:  INCF   1B,F
2AB6:  MOVLW  1E
2AB8:  MOVWF  xC6
2ABA:  CALL   06E2
2ABE:  MOVLW  0C
2AC0:  MOVWF  xC0
2AC2:  CALL   08B4
2AC6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2AC8:  BRA    2ACC
....................          Flanco1 = 0; 
2ACA:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2ACC:  BSF    F96.2
2ACE:  BTFSC  F84.2
2AD0:  BRA    2AFC
....................          delay_ms(150); 
2AD2:  MOVLW  96
2AD4:  MOVWF  xC6
2AD6:  CALL   06E2
....................          if(IZQU){ 
2ADA:  BSF    F96.2
2ADC:  BTFSC  F84.2
2ADE:  BRA    2AFA
....................             if(Flanco3 == 0){ 
2AE0:  BTFSC  16.6
2AE2:  BRA    2AFA
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2AE4:  BSF    16.6
2AE6:  DECF   1B,F
2AE8:  MOVLW  1E
2AEA:  MOVWF  xC6
2AEC:  CALL   06E2
2AF0:  MOVLW  0C
2AF2:  MOVWF  xC0
2AF4:  CALL   08B4
2AF8:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2AFA:  BRA    2AFE
....................         Flanco3 = 0; 
2AFC:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2AFE:  MOVLW  0B
2B00:  SUBWF  1B,W
2B02:  CLRF   03
2B04:  ADDLW  35
2B06:  MOVWF  FE9
2B08:  MOVLW  00
2B0A:  ADDWFC 03,W
2B0C:  MOVWF  FEA
2B0E:  BTFSC  FEF.7
2B10:  BRA    2B14
2B12:  BRA    2B28
....................          clave[unidad-11]=9; 
2B14:  MOVLW  0B
2B16:  SUBWF  1B,W
2B18:  CLRF   03
2B1A:  ADDLW  35
2B1C:  MOVWF  FE9
2B1E:  MOVLW  00
2B20:  ADDWFC 03,W
2B22:  MOVWF  FEA
2B24:  MOVLW  09
2B26:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2B28:  MOVLW  0B
2B2A:  SUBWF  1B,W
2B2C:  CLRF   03
2B2E:  ADDLW  35
2B30:  MOVWF  FE9
2B32:  MOVLW  00
2B34:  ADDWFC 03,W
2B36:  MOVWF  FEA
2B38:  BTFSC  FEF.7
2B3A:  BRA    2B54
2B3C:  MOVF   FEF,W
2B3E:  SUBLW  09
2B40:  BC    2B54
....................          clave[unidad-11]=0; 
2B42:  MOVLW  0B
2B44:  SUBWF  1B,W
2B46:  CLRF   03
2B48:  ADDLW  35
2B4A:  MOVWF  FE9
2B4C:  MOVLW  00
2B4E:  ADDWFC 03,W
2B50:  MOVWF  FEA
2B52:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2B54:  MOVF   1B,W
2B56:  SUBLW  0A
2B58:  BNC   2B78
....................          unidad=11; 
2B5A:  MOVLW  0B
2B5C:  MOVWF  1B
....................          Menu=1; 
2B5E:  MOVLW  01
2B60:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2B62:  CLRF   35
2B64:  CLRF   36
2B66:  CLRF   37
2B68:  CLRF   38
2B6A:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2B6C:  MOVLW  0B
2B6E:  MOVWF  1B
2B70:  MOVLW  0C
2B72:  MOVWF  xC0
2B74:  CALL   08B4
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
2B78:  MOVF   1B,W
2B7A:  SUBLW  0E
2B7C:  BTFSC  FD8.0
2B7E:  BRA    2CEE
....................          lcd_gotoxy(1,1); 
2B80:  MOVLW  01
2B82:  MOVWF  xC1
2B84:  MOVWF  xC2
2B86:  CALL   0852
....................          printf(lcd_putc,"                    "); 
2B8A:  MOVLW  74
2B8C:  MOVWF  FF6
2B8E:  MOVLW  04
2B90:  MOVWF  FF7
2B92:  CALL   0912
....................          lcd_gotoxy(1,2); 
2B96:  MOVLW  01
2B98:  MOVWF  xC1
2B9A:  MOVLW  02
2B9C:  MOVWF  xC2
2B9E:  CALL   0852
....................          printf(lcd_putc,"     Contraseña     "); 
2BA2:  MOVLW  8A
2BA4:  MOVWF  FF6
2BA6:  MOVLW  04
2BA8:  MOVWF  FF7
2BAA:  CALL   0912
....................          lcd_gotoxy(1,3); 
2BAE:  MOVLW  01
2BB0:  MOVWF  xC1
2BB2:  MOVLW  03
2BB4:  MOVWF  xC2
2BB6:  CALL   0852
....................          printf(lcd_putc,"     Almacenada     "); 
2BBA:  MOVLW  A0
2BBC:  MOVWF  FF6
2BBE:  MOVLW  04
2BC0:  MOVWF  FF7
2BC2:  CALL   0912
....................          lcd_gotoxy(1,4); 
2BC6:  MOVLW  01
2BC8:  MOVWF  xC1
2BCA:  MOVLW  04
2BCC:  MOVWF  xC2
2BCE:  CALL   0852
....................          printf(lcd_putc,"                    "); 
2BD2:  MOVLW  B6
2BD4:  MOVWF  FF6
2BD6:  MOVLW  04
2BD8:  MOVWF  FF7
2BDA:  CALL   0912
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2BDE:  CLRF   FA9
2BE0:  MOVFF  35,FA8
2BE4:  BCF    FA6.6
2BE6:  BCF    FA6.7
2BE8:  BSF    FA6.2
2BEA:  MOVF   FF2,W
2BEC:  MOVWF  00
2BEE:  BCF    FF2.7
2BF0:  MOVLB  F
2BF2:  MOVLW  55
2BF4:  MOVWF  FA7
2BF6:  MOVLW  AA
2BF8:  MOVWF  FA7
2BFA:  BSF    FA6.1
2BFC:  BTFSC  FA6.1
2BFE:  BRA    2BFC
2C00:  BCF    FA6.2
2C02:  MOVF   00,W
2C04:  IORWF  FF2,F
2C06:  MOVLW  14
2C08:  MOVLB  0
2C0A:  MOVWF  xC6
2C0C:  CALL   06E2
2C10:  MOVLW  01
2C12:  MOVWF  FA9
2C14:  MOVFF  36,FA8
2C18:  BCF    FA6.6
2C1A:  BCF    FA6.7
2C1C:  BSF    FA6.2
2C1E:  MOVF   FF2,W
2C20:  MOVWF  00
2C22:  BCF    FF2.7
2C24:  MOVLB  F
2C26:  MOVLW  55
2C28:  MOVWF  FA7
2C2A:  MOVLW  AA
2C2C:  MOVWF  FA7
2C2E:  BSF    FA6.1
2C30:  BTFSC  FA6.1
2C32:  BRA    2C30
2C34:  BCF    FA6.2
2C36:  MOVF   00,W
2C38:  IORWF  FF2,F
2C3A:  MOVLW  14
2C3C:  MOVLB  0
2C3E:  MOVWF  xC6
2C40:  CALL   06E2
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2C44:  MOVLW  02
2C46:  MOVWF  FA9
2C48:  MOVFF  37,FA8
2C4C:  BCF    FA6.6
2C4E:  BCF    FA6.7
2C50:  BSF    FA6.2
2C52:  MOVF   FF2,W
2C54:  MOVWF  00
2C56:  BCF    FF2.7
2C58:  MOVLB  F
2C5A:  MOVLW  55
2C5C:  MOVWF  FA7
2C5E:  MOVLW  AA
2C60:  MOVWF  FA7
2C62:  BSF    FA6.1
2C64:  BTFSC  FA6.1
2C66:  BRA    2C64
2C68:  BCF    FA6.2
2C6A:  MOVF   00,W
2C6C:  IORWF  FF2,F
2C6E:  MOVLW  14
2C70:  MOVLB  0
2C72:  MOVWF  xC6
2C74:  CALL   06E2
2C78:  MOVLW  03
2C7A:  MOVWF  FA9
2C7C:  MOVFF  38,FA8
2C80:  BCF    FA6.6
2C82:  BCF    FA6.7
2C84:  BSF    FA6.2
2C86:  MOVF   FF2,W
2C88:  MOVWF  00
2C8A:  BCF    FF2.7
2C8C:  MOVLB  F
2C8E:  MOVLW  55
2C90:  MOVWF  FA7
2C92:  MOVLW  AA
2C94:  MOVWF  FA7
2C96:  BSF    FA6.1
2C98:  BTFSC  FA6.1
2C9A:  BRA    2C98
2C9C:  BCF    FA6.2
2C9E:  MOVF   00,W
2CA0:  IORWF  FF2,F
2CA2:  MOVLW  14
2CA4:  MOVLB  0
2CA6:  MOVWF  xC6
2CA8:  CALL   06E2
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2CAC:  MOVLW  02
2CAE:  MOVWF  xAF
2CB0:  MOVLW  FA
2CB2:  MOVWF  xC6
2CB4:  CALL   06E2
2CB8:  DECFSZ xAF,F
2CBA:  BRA    2CB0
2CBC:  MOVLW  01
2CBE:  MOVWF  18
2CC0:  CLRF   31
2CC2:  MOVLW  02
2CC4:  MOVWF  1C
2CC6:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
2CC8:  MOVFF  35,39
2CCC:  MOVFF  36,3A
2CD0:  MOVFF  37,3B
2CD4:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2CD8:  CLRF   35
2CDA:  CLRF   36
2CDC:  CLRF   37
2CDE:  CLRF   38
2CE0:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
2CE2:  MOVLW  0B
2CE4:  MOVWF  1B
2CE6:  MOVLW  0C
2CE8:  MOVWF  xC0
2CEA:  CALL   08B4
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
2CEE:  MOVF   18,W
2CF0:  SUBLW  04
2CF2:  BTFSS  FD8.2
2CF4:  BRA    2ED6
....................    EliminaRuido(); 
2CF6:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2CFA:  MOVLW  01
2CFC:  MOVWF  xC1
2CFE:  MOVWF  xC2
2D00:  CALL   0852
....................       printf(lcd_putc,"  Duracion Actual   "); 
2D04:  MOVLW  CC
2D06:  MOVWF  FF6
2D08:  MOVLW  04
2D0A:  MOVWF  FF7
2D0C:  CALL   0912
....................       lcd_gotoxy(1,2); 
2D10:  MOVLW  01
2D12:  MOVWF  xC1
2D14:  MOVLW  02
2D16:  MOVWF  xC2
2D18:  CALL   0852
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2D1C:  MOVLW  E2
2D1E:  MOVWF  FF6
2D20:  MOVLW  04
2D22:  MOVWF  FF7
2D24:  MOVLW  0B
2D26:  MOVWF  xB3
2D28:  CALL   0A5A
2D2C:  MOVLW  08
2D2E:  MOVWF  FE9
2D30:  MOVFF  41,B0
2D34:  MOVFF  40,AF
2D38:  GOTO   0C6C
2D3C:  MOVLW  20
2D3E:  MOVWF  xC0
2D40:  CALL   08B4
2D44:  MOVLW  20
2D46:  MOVWF  xC0
2D48:  CALL   08B4
2D4C:  MOVLW  20
2D4E:  MOVWF  xC0
2D50:  CALL   08B4
....................       lcd_gotoxy(1,4); 
2D54:  MOVLW  01
2D56:  MOVWF  xC1
2D58:  MOVLW  04
2D5A:  MOVWF  xC2
2D5C:  CALL   0852
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
2D60:  MOVLW  F6
2D62:  MOVWF  FF6
2D64:  MOVLW  04
2D66:  MOVWF  FF7
2D68:  CALL   0912
....................        
....................       Cambio=OFF; 
2D6C:  BCF    17.5
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
2D6E:  BSF    F92.5
2D70:  BTFSC  F80.5
2D72:  BRA    2E92
2D74:  BSF    F96.1
2D76:  BTFSC  F84.1
2D78:  BRA    2E92
....................          delay_ms(20); 
2D7A:  MOVLW  14
2D7C:  MOVWF  xC6
2D7E:  CALL   06E2
....................          if(UP && RIGHT){ 
2D82:  BSF    F92.5
2D84:  BTFSC  F80.5
2D86:  BRA    2E92
2D88:  BSF    F96.1
2D8A:  BTFSC  F84.1
2D8C:  BRA    2E92
....................             delay_ms(200); 
2D8E:  MOVLW  C8
2D90:  MOVWF  xC6
2D92:  CALL   06E2
....................             printf(lcd_putc,"\f"); 
2D96:  MOVLW  0C
2D98:  MOVWF  xC0
2D9A:  CALL   08B4
....................             lcd_gotoxy(1,2); 
2D9E:  MOVLW  01
2DA0:  MOVWF  xC1
2DA2:  MOVLW  02
2DA4:  MOVWF  xC2
2DA6:  CALL   0852
....................             printf(lcd_putc," Reset de tiempo "); 
2DAA:  MOVLW  0C
2DAC:  MOVWF  FF6
2DAE:  MOVLW  05
2DB0:  MOVWF  FF7
2DB2:  CALL   0912
....................             lcd_gotoxy(1,3); 
2DB6:  MOVLW  01
2DB8:  MOVWF  xC1
2DBA:  MOVLW  03
2DBC:  MOVWF  xC2
2DBE:  CALL   0852
....................             printf(lcd_putc,"     Exitoso     "); 
2DC2:  MOVLW  1E
2DC4:  MOVWF  FF6
2DC6:  MOVLW  05
2DC8:  MOVWF  FF7
2DCA:  CALL   0912
....................             write_eeprom(50,0); 
2DCE:  MOVLW  32
2DD0:  MOVWF  FA9
2DD2:  CLRF   FA8
2DD4:  BCF    FA6.6
2DD6:  BCF    FA6.7
2DD8:  BSF    FA6.2
2DDA:  MOVF   FF2,W
2DDC:  MOVWF  00
2DDE:  BCF    FF2.7
2DE0:  MOVLB  F
2DE2:  MOVLW  55
2DE4:  MOVWF  FA7
2DE6:  MOVLW  AA
2DE8:  MOVWF  FA7
2DEA:  BSF    FA6.1
2DEC:  BTFSC  FA6.1
2DEE:  BRA    2DEC
2DF0:  BCF    FA6.2
2DF2:  MOVF   00,W
2DF4:  IORWF  FF2,F
....................             delay_ms(20); 
2DF6:  MOVLW  14
2DF8:  MOVLB  0
2DFA:  MOVWF  xC6
2DFC:  CALL   06E2
....................             write_eeprom(51,0); 
2E00:  MOVLW  33
2E02:  MOVWF  FA9
2E04:  CLRF   FA8
2E06:  BCF    FA6.6
2E08:  BCF    FA6.7
2E0A:  BSF    FA6.2
2E0C:  MOVF   FF2,W
2E0E:  MOVWF  00
2E10:  BCF    FF2.7
2E12:  MOVLB  F
2E14:  MOVLW  55
2E16:  MOVWF  FA7
2E18:  MOVLW  AA
2E1A:  MOVWF  FA7
2E1C:  BSF    FA6.1
2E1E:  BTFSC  FA6.1
2E20:  BRA    2E1E
2E22:  BCF    FA6.2
2E24:  MOVF   00,W
2E26:  IORWF  FF2,F
....................             delay_ms(20); 
2E28:  MOVLW  14
2E2A:  MOVLB  0
2E2C:  MOVWF  xC6
2E2E:  CALL   06E2
....................             write_eeprom(52,0); 
2E32:  MOVLW  34
2E34:  MOVWF  FA9
2E36:  CLRF   FA8
2E38:  BCF    FA6.6
2E3A:  BCF    FA6.7
2E3C:  BSF    FA6.2
2E3E:  MOVF   FF2,W
2E40:  MOVWF  00
2E42:  BCF    FF2.7
2E44:  MOVLB  F
2E46:  MOVLW  55
2E48:  MOVWF  FA7
2E4A:  MOVLW  AA
2E4C:  MOVWF  FA7
2E4E:  BSF    FA6.1
2E50:  BTFSC  FA6.1
2E52:  BRA    2E50
2E54:  BCF    FA6.2
2E56:  MOVF   00,W
2E58:  IORWF  FF2,F
....................             delay_ms(700); 
2E5A:  MOVLW  04
2E5C:  MOVLB  0
2E5E:  MOVWF  xAF
2E60:  MOVLW  AF
2E62:  MOVWF  xC6
2E64:  CALL   06E2
2E68:  DECFSZ xAF,F
2E6A:  BRA    2E60
....................             segundos=0;minutos=0;horas=0; 
2E6C:  CLRF   21
2E6E:  CLRF   22
2E70:  CLRF   41
2E72:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2E74:  MOVLW  1E
2E76:  MOVWF  xC6
2E78:  CALL   06E2
2E7C:  MOVLW  01
2E7E:  MOVWF  18
2E80:  CLRF   31
2E82:  MOVLW  02
2E84:  MOVWF  1C
2E86:  MOVWF  1E
2E88:  MOVLW  0C
2E8A:  MOVWF  xC0
2E8C:  CALL   08B4
....................             Cambio=ON; 
2E90:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
2E92:  BSF    F96.2
2E94:  BTFSC  F84.2
2E96:  BRA    2ED4
....................          delay_ms(20); 
2E98:  MOVLW  14
2E9A:  MOVWF  xC6
2E9C:  CALL   06E2
....................          if(IZQU){ 
2EA0:  BSF    F96.2
2EA2:  BTFSC  F84.2
2EA4:  BRA    2ED2
....................             if(Flanco3 == 0){ 
2EA6:  BTFSC  16.6
2EA8:  BRA    2ED2
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
2EAA:  BSF    16.6
2EAC:  MOVLW  02
2EAE:  MOVWF  xAF
2EB0:  MOVLW  FA
2EB2:  MOVWF  xC6
2EB4:  CALL   06E2
2EB8:  DECFSZ xAF,F
2EBA:  BRA    2EB0
2EBC:  MOVLW  01
2EBE:  MOVWF  18
2EC0:  CLRF   31
2EC2:  MOVLW  02
2EC4:  MOVWF  1C
2EC6:  MOVWF  1E
2EC8:  MOVLW  0C
2ECA:  MOVWF  xC0
2ECC:  CALL   08B4
2ED0:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2ED2:  BRA    2ED6
....................          Flanco3 = 0; 
2ED4:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
2ED6:  MOVF   18,W
2ED8:  SUBLW  05
2EDA:  BTFSS  FD8.2
2EDC:  BRA    3132
....................       EliminaRuido(); 
2EDE:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2EE2:  MOVLW  01
2EE4:  MOVWF  xC1
2EE6:  MOVWF  xC2
2EE8:  CALL   0852
....................          printf(lcd_putc,"  Zero Point Config "); 
2EEC:  MOVLW  30
2EEE:  MOVWF  FF6
2EF0:  MOVLW  05
2EF2:  MOVWF  FF7
2EF4:  CALL   0912
....................          lcd_gotoxy(1,2); 
2EF8:  MOVLW  01
2EFA:  MOVWF  xC1
2EFC:  MOVLW  02
2EFE:  MOVWF  xC2
2F00:  CALL   0852
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2F04:  MOVLW  05
2F06:  MOVWF  xAF
2F08:  CALL   10E4
2F0C:  MOVFF  00,AF
2F10:  MOVFF  01,B0
2F14:  MOVFF  02,B1
2F18:  MOVFF  03,B2
2F1C:  MOVFF  03,C6
2F20:  MOVFF  02,C5
2F24:  MOVFF  01,C4
2F28:  MOVFF  00,C3
2F2C:  MOVLW  D7
2F2E:  MOVWF  xCA
2F30:  MOVLW  A3
2F32:  MOVWF  xC9
2F34:  CLRF   xC8
2F36:  MOVLW  81
2F38:  MOVWF  xC7
2F3A:  CALL   127C
2F3E:  MOVFF  00,AF
2F42:  MOVFF  01,B0
2F46:  MOVFF  02,B1
2F4A:  MOVFF  03,B2
2F4E:  MOVLW  46
2F50:  MOVWF  FF6
2F52:  MOVLW  05
2F54:  MOVWF  FF7
2F56:  MOVLW  09
2F58:  MOVWF  xB3
2F5A:  CALL   0A5A
2F5E:  MOVLW  02
2F60:  MOVWF  FE9
2F62:  MOVFF  B2,B6
2F66:  MOVFF  B1,B5
2F6A:  MOVFF  B0,B4
2F6E:  MOVFF  AF,B3
2F72:  MOVWF  xB7
2F74:  CALL   1428
2F78:  MOVLW  54
2F7A:  MOVWF  FF6
2F7C:  MOVLW  05
2F7E:  MOVWF  FF7
2F80:  MOVLW  07
2F82:  MOVWF  xB3
2F84:  CALL   0A5A
....................          lcd_gotoxy(1,3); 
2F88:  MOVLW  01
2F8A:  MOVWF  xC1
2F8C:  MOVLW  03
2F8E:  MOVWF  xC2
2F90:  CALL   0852
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
2F94:  CLRF   xB4
2F96:  CALL   0800
2F9A:  MOVFF  00,AF
2F9E:  MOVFF  01,B0
2FA2:  MOVFF  02,B1
2FA6:  MOVFF  03,B2
2FAA:  MOVLW  5C
2FAC:  MOVWF  FF6
2FAE:  MOVLW  05
2FB0:  MOVWF  FF7
2FB2:  MOVLW  08
2FB4:  MOVWF  xB3
2FB6:  CALL   0A5A
2FBA:  MOVLW  01
2FBC:  MOVWF  FE9
2FBE:  MOVFF  B2,B6
2FC2:  MOVFF  B1,B5
2FC6:  MOVFF  B0,B4
2FCA:  MOVFF  AF,B3
2FCE:  CLRF   xB7
2FD0:  CALL   1428
....................          lcd_gotoxy(1,4); 
2FD4:  MOVLW  01
2FD6:  MOVWF  xC1
2FD8:  MOVLW  04
2FDA:  MOVWF  xC2
2FDC:  CALL   0852
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
2FE0:  MOVLW  6A
2FE2:  MOVWF  FF6
2FE4:  MOVLW  05
2FE6:  MOVWF  FF7
2FE8:  MOVLW  07
2FEA:  MOVWF  xB3
2FEC:  CALL   0A5A
2FF0:  MOVLW  01
2FF2:  MOVWF  FE9
2FF4:  MOVFF  A9,B6
2FF8:  MOVFF  A8,B5
2FFC:  MOVFF  A7,B4
3000:  MOVFF  A6,B3
3004:  CLRF   xB7
3006:  CALL   1428
....................           
....................          Cambio=OFF; 
300A:  BCF    17.5
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
300C:  BSF    F96.1
300E:  BTFSC  F84.1
3010:  BRA    30F2
....................          delay_ms(20); 
3012:  MOVLW  14
3014:  MOVWF  xC6
3016:  CALL   06E2
....................          if(RIGHT){ 
301A:  BSF    F96.1
301C:  BTFSC  F84.1
301E:  BRA    30F0
....................             if(Flanco1 == 0){ 
3020:  BTFSC  16.4
3022:  BRA    30F0
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3024:  MOVLW  01
3026:  MOVWF  18
3028:  CLRF   31
302A:  MOVLW  02
302C:  MOVWF  1C
302E:  MOVWF  1E
3030:  MOVLW  0B
3032:  MOVWF  1B
3034:  MOVLW  02
3036:  MOVWF  xAF
3038:  MOVLW  FA
303A:  MOVWF  xC6
303C:  CALL   06E2
3040:  DECFSZ xAF,F
3042:  BRA    3038
3044:  MOVLW  0C
3046:  MOVWF  xC0
3048:  CALL   08B4
....................                G=sensores(0); 
304C:  CLRF   xB4
304E:  CALL   0800
3052:  MOVFF  03,A9
3056:  MOVFF  02,A8
305A:  MOVFF  01,A7
305E:  MOVFF  00,A6
....................                G16=(int16)G; 
3062:  MOVFF  A9,C6
3066:  MOVFF  A8,C5
306A:  MOVFF  A7,C4
306E:  MOVFF  A6,C3
3072:  CALL   15AE
3076:  MOVFF  02,43
307A:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
307E:  MOVFF  42,25
3082:  MOVFF  43,26
....................                 
....................                write_eeprom(60,G_l); 
3086:  MOVLW  3C
3088:  MOVWF  FA9
308A:  MOVFF  25,FA8
308E:  BCF    FA6.6
3090:  BCF    FA6.7
3092:  BSF    FA6.2
3094:  MOVF   FF2,W
3096:  MOVWF  00
3098:  BCF    FF2.7
309A:  MOVLB  F
309C:  MOVLW  55
309E:  MOVWF  FA7
30A0:  MOVLW  AA
30A2:  MOVWF  FA7
30A4:  BSF    FA6.1
30A6:  BTFSC  FA6.1
30A8:  BRA    30A6
30AA:  BCF    FA6.2
30AC:  MOVF   00,W
30AE:  IORWF  FF2,F
....................                delay_ms(20); 
30B0:  MOVLW  14
30B2:  MOVLB  0
30B4:  MOVWF  xC6
30B6:  CALL   06E2
....................                write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
30BA:  MOVLW  3D
30BC:  MOVWF  FA9
30BE:  MOVFF  26,FA8
30C2:  BCF    FA6.6
30C4:  BCF    FA6.7
30C6:  BSF    FA6.2
30C8:  MOVF   FF2,W
30CA:  MOVWF  00
30CC:  BCF    FF2.7
30CE:  MOVLB  F
30D0:  MOVLW  55
30D2:  MOVWF  FA7
30D4:  MOVLW  AA
30D6:  MOVWF  FA7
30D8:  BSF    FA6.1
30DA:  BTFSC  FA6.1
30DC:  BRA    30DA
30DE:  BCF    FA6.2
30E0:  MOVF   00,W
30E2:  IORWF  FF2,F
....................                delay_ms(20); 
30E4:  MOVLW  14
30E6:  MOVLB  0
30E8:  MOVWF  xC6
30EA:  CALL   06E2
....................                Cambio=ON; 
30EE:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
30F0:  BRA    30F4
....................          Flanco1 = 0; 
30F2:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
30F4:  BSF    F96.2
30F6:  BTFSC  F84.2
30F8:  BRA    3130
....................          delay_ms(20); 
30FA:  MOVLW  14
30FC:  MOVWF  xC6
30FE:  CALL   06E2
....................          if(IZQU){ 
3102:  BSF    F96.2
3104:  BTFSC  F84.2
3106:  BRA    312E
....................             if(Flanco3 == 0){ 
3108:  BTFSC  16.6
310A:  BRA    312E
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
310C:  MOVLW  01
310E:  MOVWF  18
3110:  CLRF   31
3112:  MOVLW  02
3114:  MOVWF  1C
3116:  MOVWF  1E
3118:  MOVLW  0B
311A:  MOVWF  1B
311C:  MOVLW  1E
311E:  MOVWF  xC6
3120:  CALL   06E2
3124:  MOVLW  0C
3126:  MOVWF  xC0
3128:  CALL   08B4
....................                Cambio=ON; 
312C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
312E:  BRA    3132
....................          Flanco3 = 0; 
3130:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
3132:  MOVF   18,W
3134:  SUBLW  06
3136:  BTFSS  FD8.2
3138:  BRA    3260
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
313A:  BTG    17.4
313C:  BSF    16.4
313E:  MOVLW  01
3140:  MOVWF  18
3142:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
3144:  BTFSS  17.4
3146:  BRA    31A8
....................             {estadoalarma=1; 
3148:  BSF    17.4
....................                lcd_gotoxy(1,1); 
314A:  MOVLW  01
314C:  MOVWF  xC1
314E:  MOVWF  xC2
3150:  CALL   0852
....................                printf(lcd_putc,"                    "); 
3154:  MOVLW  78
3156:  MOVWF  FF6
3158:  MOVLW  05
315A:  MOVWF  FF7
315C:  CALL   0912
....................                lcd_gotoxy(1,2); 
3160:  MOVLW  01
3162:  MOVWF  xC1
3164:  MOVLW  02
3166:  MOVWF  xC2
3168:  CALL   0852
....................                printf(lcd_putc,"        Activo      "); 
316C:  MOVLW  8E
316E:  MOVWF  FF6
3170:  MOVLW  05
3172:  MOVWF  FF7
3174:  CALL   0912
....................                lcd_gotoxy(1,3); 
3178:  MOVLW  01
317A:  MOVWF  xC1
317C:  MOVLW  03
317E:  MOVWF  xC2
3180:  CALL   0852
....................                printf(lcd_putc,"        Alarma      "); 
3184:  MOVLW  A4
3186:  MOVWF  FF6
3188:  MOVLW  05
318A:  MOVWF  FF7
318C:  CALL   0912
....................                lcd_gotoxy(1,4); 
3190:  MOVLW  01
3192:  MOVWF  xC1
3194:  MOVLW  04
3196:  MOVWF  xC2
3198:  CALL   0852
....................                printf(lcd_putc,"                    ");} 
319C:  MOVLW  BA
319E:  MOVWF  FF6
31A0:  MOVLW  05
31A2:  MOVWF  FF7
31A4:  CALL   0912
....................                 
....................             if(estadoalarma==0) 
31A8:  BTFSC  17.4
31AA:  BRA    320C
....................             {estadoalarma=0; 
31AC:  BCF    17.4
....................                lcd_gotoxy(1,1); 
31AE:  MOVLW  01
31B0:  MOVWF  xC1
31B2:  MOVWF  xC2
31B4:  CALL   0852
....................                printf(lcd_putc,"                    "); 
31B8:  MOVLW  D0
31BA:  MOVWF  FF6
31BC:  MOVLW  05
31BE:  MOVWF  FF7
31C0:  CALL   0912
....................                lcd_gotoxy(1,2); 
31C4:  MOVLW  01
31C6:  MOVWF  xC1
31C8:  MOVLW  02
31CA:  MOVWF  xC2
31CC:  CALL   0852
....................                printf(lcd_putc,"      Desactivo     "); 
31D0:  MOVLW  E6
31D2:  MOVWF  FF6
31D4:  MOVLW  05
31D6:  MOVWF  FF7
31D8:  CALL   0912
....................                lcd_gotoxy(1,3); 
31DC:  MOVLW  01
31DE:  MOVWF  xC1
31E0:  MOVLW  03
31E2:  MOVWF  xC2
31E4:  CALL   0852
....................                printf(lcd_putc,"       Alarma       "); 
31E8:  MOVLW  FC
31EA:  MOVWF  FF6
31EC:  MOVLW  05
31EE:  MOVWF  FF7
31F0:  CALL   0912
....................                lcd_gotoxy(1,4); 
31F4:  MOVLW  01
31F6:  MOVWF  xC1
31F8:  MOVLW  04
31FA:  MOVWF  xC2
31FC:  CALL   0852
....................                printf(lcd_putc,"                    ");} 
3200:  MOVLW  12
3202:  MOVWF  FF6
3204:  MOVLW  06
3206:  MOVWF  FF7
3208:  CALL   0912
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
320C:  MOVLW  00
320E:  BTFSC  17.4
3210:  MOVLW  01
3212:  MOVWF  xAF
3214:  MOVLW  05
3216:  MOVWF  FA9
3218:  MOVFF  AF,FA8
321C:  BCF    FA6.6
321E:  BCF    FA6.7
3220:  BSF    FA6.2
3222:  MOVF   FF2,W
3224:  MOVWF  00
3226:  BCF    FF2.7
3228:  MOVLB  F
322A:  MOVLW  55
322C:  MOVWF  FA7
322E:  MOVLW  AA
3230:  MOVWF  FA7
3232:  BSF    FA6.1
3234:  BTFSC  FA6.1
3236:  BRA    3234
3238:  BCF    FA6.2
323A:  MOVF   00,W
323C:  IORWF  FF2,F
323E:  MOVLW  04
3240:  MOVLB  0
3242:  MOVWF  xAF
3244:  MOVLW  FA
3246:  MOVWF  xC6
3248:  CALL   06E2
324C:  DECFSZ xAF,F
324E:  BRA    3244
3250:  MOVLW  02
3252:  MOVWF  1C
3254:  MOVWF  1E
3256:  MOVLW  0C
3258:  MOVWF  xC0
325A:  CALL   08B4
....................             Cambio=ON; 
325E:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
3260:  MOVF   18,W
3262:  SUBLW  32
3264:  BTFSS  FD8.2
3266:  BRA    3898
....................    if(Lectura==1) 
3268:  BTFSS  17.0
326A:  BRA    348E
....................    { 
....................       Lectura=0; 
326C:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
326E:  MOVLW  05
3270:  MOVWF  xAF
3272:  CALL   10E4
3276:  MOVFF  03,A5
327A:  MOVFF  02,A4
327E:  MOVFF  01,A3
3282:  MOVFF  00,A2
....................       lcd_gotoxy(1,1); 
3286:  MOVLW  01
3288:  MOVWF  xC1
328A:  MOVWF  xC2
328C:  CALL   0852
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
3290:  MOVFF  A5,C6
3294:  MOVFF  A4,C5
3298:  MOVFF  A3,C4
329C:  MOVFF  A2,C3
32A0:  MOVLW  D7
32A2:  MOVWF  xCA
32A4:  MOVLW  A3
32A6:  MOVWF  xC9
32A8:  CLRF   xC8
32AA:  MOVLW  81
32AC:  MOVWF  xC7
32AE:  CALL   127C
32B2:  MOVFF  00,AF
32B6:  MOVFF  01,B0
32BA:  MOVFF  02,B1
32BE:  MOVFF  03,B2
32C2:  MOVLW  28
32C4:  MOVWF  FF6
32C6:  MOVLW  06
32C8:  MOVWF  FF7
32CA:  MOVLW  08
32CC:  MOVWF  xB3
32CE:  CALL   0A5A
32D2:  MOVLW  02
32D4:  MOVWF  FE9
32D6:  MOVFF  B2,B6
32DA:  MOVFF  B1,B5
32DE:  MOVFF  B0,B4
32E2:  MOVFF  AF,B3
32E6:  MOVWF  xB7
32E8:  CALL   1428
32EC:  MOVLW  35
32EE:  MOVWF  FF6
32F0:  MOVLW  06
32F2:  MOVWF  FF7
32F4:  MOVLW  07
32F6:  MOVWF  xB3
32F8:  CALL   0A5A
....................       Saturacion=(CaidaPresion/0.37)*11; 
32FC:  MOVFF  A5,C6
3300:  MOVFF  A4,C5
3304:  MOVFF  A3,C4
3308:  MOVFF  A2,C3
330C:  MOVLW  A4
330E:  MOVWF  xCA
3310:  MOVLW  70
3312:  MOVWF  xC9
3314:  MOVLW  3D
3316:  MOVWF  xC8
3318:  MOVLW  7D
331A:  MOVWF  xC7
331C:  CALL   0D20
3320:  MOVFF  00,AF
3324:  MOVFF  01,B0
3328:  MOVFF  02,B1
332C:  MOVFF  03,B2
3330:  MOVFF  03,C6
3334:  MOVFF  02,C5
3338:  MOVFF  01,C4
333C:  MOVFF  00,C3
3340:  CLRF   xCA
3342:  CLRF   xC9
3344:  MOVLW  30
3346:  MOVWF  xC8
3348:  MOVLW  82
334A:  MOVWF  xC7
334C:  CALL   127C
3350:  MOVFF  03,A1
3354:  MOVFF  02,A0
3358:  MOVFF  01,9F
335C:  MOVFF  00,9E
....................        
....................       if(Saturacion>11) 
3360:  CLRF   xC6
3362:  CLRF   xC5
3364:  MOVLW  30
3366:  MOVWF  xC4
3368:  MOVLW  82
336A:  MOVWF  xC3
336C:  MOVFF  A1,CA
3370:  MOVFF  A0,C9
3374:  MOVFF  9F,C8
3378:  MOVFF  9E,C7
337C:  CALL   0932
3380:  BNC   338E
....................       { 
....................          Saturacion=11; 
3382:  CLRF   xA1
3384:  CLRF   xA0
3386:  MOVLW  30
3388:  MOVWF  x9F
338A:  MOVLW  82
338C:  MOVWF  x9E
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
338E:  CLRF   2D
3390:  MOVFF  A1,B2
3394:  MOVFF  A0,B1
3398:  MOVFF  9F,B0
339C:  MOVFF  9E,AF
33A0:  CALL   1920
33A4:  MOVFF  00,AF
33A8:  MOVFF  01,B0
33AC:  MOVFF  02,B1
33B0:  MOVFF  03,B2
33B4:  CLRF   xC8
33B6:  MOVFF  2D,C7
33BA:  CALL   07CA
33BE:  MOVFF  03,C6
33C2:  MOVFF  02,C5
33C6:  MOVFF  01,C4
33CA:  MOVFF  00,C3
33CE:  MOVFF  B2,CA
33D2:  MOVFF  B1,C9
33D6:  MOVFF  B0,C8
33DA:  MOVFF  AF,C7
33DE:  CALL   0932
33E2:  BNC   3400
....................       { 
....................          lcd_gotoxy(i+8,2); 
33E4:  MOVLW  08
33E6:  ADDWF  2D,W
33E8:  MOVWF  xAF
33EA:  MOVWF  xC1
33EC:  MOVLW  02
33EE:  MOVWF  xC2
33F0:  CALL   0852
....................          printf(lcd_putc,"Ñ"); 
33F4:  MOVLW  D1
33F6:  MOVWF  xC0
33F8:  CALL   08B4
....................       } 
33FC:  INCF   2D,F
33FE:  BRA    3390
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3400:  MOVFF  A1,B2
3404:  MOVFF  A0,B1
3408:  MOVFF  9F,B0
340C:  MOVFF  9E,AF
3410:  CALL   1920
3414:  MOVFF  03,C6
3418:  MOVFF  02,C5
341C:  MOVFF  01,C4
3420:  MOVFF  00,C3
3424:  CALL   15AE
3428:  MOVFF  01,2D
342C:  MOVF   2D,W
342E:  SUBLW  0A
3430:  BNC   344E
....................       { 
....................          lcd_gotoxy(i+8,2); 
3432:  MOVLW  08
3434:  ADDWF  2D,W
3436:  MOVWF  xAF
3438:  MOVWF  xC1
343A:  MOVLW  02
343C:  MOVWF  xC2
343E:  CALL   0852
....................          printf(lcd_putc," "); 
3442:  MOVLW  20
3444:  MOVWF  xC0
3446:  CALL   08B4
....................       } 
344A:  INCF   2D,F
344C:  BRA    342C
....................        
....................       lcd_gotoxy(9,3); 
344E:  MOVLW  09
3450:  MOVWF  xC1
3452:  MOVLW  03
3454:  MOVWF  xC2
3456:  CALL   0852
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
345A:  MOVLW  3E
345C:  MOVWF  FF6
345E:  MOVLW  06
3460:  MOVWF  FF7
3462:  MOVLW  06
3464:  MOVWF  xB3
3466:  CALL   0A5A
346A:  MOVFF  27,AF
346E:  MOVLW  03
3470:  MOVWF  xB0
3472:  CALL   0C06
3476:  MOVLW  3A
3478:  MOVWF  xC0
347A:  CALL   08B4
347E:  MOVFF  28,AF
3482:  MOVLW  01
3484:  MOVWF  xB0
3486:  CALL   0C06
....................       EliminaRuido(); 
348A:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
348E:  BTFSS  16.7
3490:  BRA    352A
....................    { 
....................       if(estadoalarma==1) 
3492:  BTFSS  17.4
3494:  BRA    3520
....................       { 
....................          printf(lcd_putc,"\f"); 
3496:  MOVLW  0C
3498:  MOVWF  xC0
349A:  CALL   08B4
....................          lcd_gotoxy(1,2); 
349E:  MOVLW  01
34A0:  MOVWF  xC1
34A2:  MOVLW  02
34A4:  MOVWF  xC2
34A6:  CALL   0852
....................          printf(lcd_putc,"  Temporizador  de  "); 
34AA:  MOVLW  4E
34AC:  MOVWF  FF6
34AE:  MOVLW  06
34B0:  MOVWF  FF7
34B2:  CALL   0912
....................          lcd_gotoxy(1,3); 
34B6:  MOVLW  01
34B8:  MOVWF  xC1
34BA:  MOVLW  03
34BC:  MOVWF  xC2
34BE:  CALL   0852
....................          printf(lcd_putc," Luz UV  Finalizado "); 
34C2:  MOVLW  64
34C4:  MOVWF  FF6
34C6:  MOVLW  06
34C8:  MOVWF  FF7
34CA:  CALL   0912
....................          lcd_gotoxy(1,4); 
34CE:  MOVLW  01
34D0:  MOVWF  xC1
34D2:  MOVLW  04
34D4:  MOVWF  xC2
34D6:  CALL   0852
....................          printf(lcd_putc,"                    "); 
34DA:  MOVLW  7A
34DC:  MOVWF  FF6
34DE:  MOVLW  06
34E0:  MOVWF  FF7
34E2:  CALL   0912
....................          lcd_gotoxy(1,1); 
34E6:  MOVLW  01
34E8:  MOVWF  xC1
34EA:  MOVWF  xC2
34EC:  CALL   0852
....................          printf(lcd_putc,"                    "); 
34F0:  MOVLW  90
34F2:  MOVWF  FF6
34F4:  MOVLW  06
34F6:  MOVWF  FF7
34F8:  CALL   0912
....................          for(i=0;i<5;i++) 
34FC:  CLRF   2D
34FE:  MOVF   2D,W
3500:  SUBLW  04
3502:  BNC   3520
....................          { 
....................             Buzzer_on; 
3504:  BSF    F8C.0
3506:  BCF    F95.0
....................             delay_ms(200); 
3508:  MOVLW  C8
350A:  MOVWF  xC6
350C:  CALL   06E2
....................             Buzzer_off; 
3510:  BCF    F8C.0
3512:  BCF    F95.0
....................             delay_ms(200); 
3514:  MOVLW  C8
3516:  MOVWF  xC6
3518:  CALL   06E2
....................          } 
351C:  INCF   2D,F
351E:  BRA    34FE
....................       } 
....................       tiempo_cumplido=0; 
3520:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
3522:  MOVLW  0C
3524:  MOVWF  xC0
3526:  CALL   08B4
....................    } 
....................     
....................    if(CaidaPresion>=0.37) 
352A:  MOVLW  A4
352C:  MOVWF  xC6
352E:  MOVLW  70
3530:  MOVWF  xC5
3532:  MOVLW  3D
3534:  MOVWF  xC4
3536:  MOVLW  7D
3538:  MOVWF  xC3
353A:  MOVFF  A5,CA
353E:  MOVFF  A4,C9
3542:  MOVFF  A3,C8
3546:  MOVFF  A2,C7
354A:  CALL   0932
354E:  BC    3552
3550:  BNZ   3558
....................    {  
....................       ActivaBuzzer=1; 
3552:  MOVLW  01
3554:  MOVWF  3D
....................    } 
....................    else 
3556:  BRA    355E
....................    { 
....................       ActivaBuzzer=0; 
3558:  CLRF   3D
....................       Buzzer_off; 
355A:  BCF    F8C.0
355C:  BCF    F95.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
355E:  MOVLW  01
3560:  MOVWF  xC1
3562:  MOVLW  02
3564:  MOVWF  xC2
3566:  CALL   0852
....................       printf(lcd_putc,"Filtro:"); 
356A:  MOVLW  A6
356C:  MOVWF  FF6
356E:  MOVLW  06
3570:  MOVWF  FF7
3572:  CALL   0912
....................        
....................       if(estadomv==1) 
3576:  BTFSS  16.2
3578:  BRA    3594
....................       { 
....................          lcd_gotoxy(1,4); 
357A:  MOVLW  01
357C:  MOVWF  xC1
357E:  MOVLW  04
3580:  MOVWF  xC2
3582:  CALL   0852
....................          printf(lcd_putc,"Motor:ON ");       
3586:  MOVLW  AE
3588:  MOVWF  FF6
358A:  MOVLW  06
358C:  MOVWF  FF7
358E:  CALL   0912
....................       } 
....................       else 
3592:  BRA    35AC
....................       { 
....................          lcd_gotoxy(1,4); 
3594:  MOVLW  01
3596:  MOVWF  xC1
3598:  MOVLW  04
359A:  MOVWF  xC2
359C:  CALL   0852
....................          printf(lcd_putc,"Motor:OFF"); 
35A0:  MOVLW  B8
35A2:  MOVWF  FF6
35A4:  MOVLW  06
35A6:  MOVWF  FF7
35A8:  CALL   0912
....................       } 
....................        
....................       if(estadouv==1) 
35AC:  BTFSS  16.0
35AE:  BRA    35CA
....................       { 
....................          lcd_gotoxy(13,4); 
35B0:  MOVLW  0D
35B2:  MOVWF  xC1
35B4:  MOVLW  04
35B6:  MOVWF  xC2
35B8:  CALL   0852
....................          printf(lcd_putc,"UV:ON "); 
35BC:  MOVLW  C2
35BE:  MOVWF  FF6
35C0:  MOVLW  06
35C2:  MOVWF  FF7
35C4:  CALL   0912
....................       } 
....................       else 
35C8:  BRA    35E2
....................       {          
....................          lcd_gotoxy(13,4); 
35CA:  MOVLW  0D
35CC:  MOVWF  xC1
35CE:  MOVLW  04
35D0:  MOVWF  xC2
35D2:  CALL   0852
....................          printf(lcd_putc,"UV:OFF"); 
35D6:  MOVLW  CA
35D8:  MOVWF  FF6
35DA:  MOVLW  06
35DC:  MOVWF  FF7
35DE:  CALL   0912
....................       } 
....................        
....................       if(estadofl==1) 
35E2:  BTFSS  16.1
35E4:  BRA    3600
....................       { 
....................          lcd_gotoxy(1,3); 
35E6:  MOVLW  01
35E8:  MOVWF  xC1
35EA:  MOVLW  03
35EC:  MOVWF  xC2
35EE:  CALL   0852
....................          printf(lcd_putc,"Luz:ON "); 
35F2:  MOVLW  D2
35F4:  MOVWF  FF6
35F6:  MOVLW  06
35F8:  MOVWF  FF7
35FA:  CALL   0912
....................       } 
....................       else 
35FE:  BRA    3618
....................       { 
....................          lcd_gotoxy(1,3); 
3600:  MOVLW  01
3602:  MOVWF  xC1
3604:  MOVLW  03
3606:  MOVWF  xC2
3608:  CALL   0852
....................          printf(lcd_putc,"Luz:OFF"); 
360C:  MOVLW  DA
360E:  MOVWF  FF6
3610:  MOVLW  06
3612:  MOVWF  FF7
3614:  CALL   0912
....................       }  
....................       Cambio=OFF; 
3618:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
361A:  BTFSS  16.2
361C:  BRA    3640
....................       velocidades(1); 
361E:  MOVLW  01
3620:  MOVWF  xAF
3622:  CALL   1936
....................       if(flagmv==0){ 
3626:  BTFSC  17.6
3628:  BRA    363E
....................          lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
362A:  CALL   0774
362E:  MOVLW  C8
3630:  MOVWF  xC6
3632:  CALL   06E2
3636:  CALL   0774
363A:  BSF    17.6
363C:  BSF    17.5
....................       } 
....................    }else{ 
363E:  BRA    365E
....................       velocidades(0);     
3640:  CLRF   xAF
3642:  CALL   1936
....................       if(flagmv==1){ 
3646:  BTFSS  17.6
3648:  BRA    365E
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
364A:  CALL   0774
364E:  MOVLW  C8
3650:  MOVWF  xC6
3652:  CALL   06E2
3656:  CALL   0774
365A:  BCF    17.6
365C:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(estadouv==1) 
365E:  BTFSS  16.0
3660:  BRA    3694
....................    { 
....................       estadomv=0; 
3662:  BCF    16.2
....................       velocidades(0); 
3664:  CLRF   xAF
3666:  CALL   1936
....................       estadofl=0; 
366A:  BCF    16.1
....................       Luz_Blanca_off; 
366C:  BSF    F8C.2
366E:  BCF    F95.2
....................       Luz_UV_on; 
3670:  BCF    F8C.1
3672:  BCF    F95.1
....................       tiempo_cumplido=0; 
3674:  BCF    16.7
....................       if(flaguv==0) 
3676:  BTFSC  17.1
3678:  BRA    3692
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
367A:  CALL   0774
367E:  MOVLW  C8
3680:  MOVWF  xC6
3682:  CALL   06E2
3686:  CALL   0774
368A:  BSF    17.1
368C:  MOVLW  01
368E:  MOVWF  30
3690:  BSF    17.5
....................       } 
....................    } 
....................    else 
3692:  BRA    36B6
....................    { 
....................       estadouv=0; 
3694:  BCF    16.0
....................       Luz_UV_off; 
3696:  BSF    F8C.1
3698:  BCF    F95.1
....................       if(flaguv==1) 
369A:  BTFSS  17.1
369C:  BRA    36B6
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
369E:  CALL   0774
36A2:  MOVLW  C8
36A4:  MOVWF  xC6
36A6:  CALL   06E2
36AA:  CALL   0774
36AE:  BCF    17.1
36B0:  MOVLW  01
36B2:  MOVWF  30
36B4:  BSF    17.5
....................       } 
....................    } 
....................        
....................    if(estadofl==1) 
36B6:  BTFSS  16.1
36B8:  BRA    36D8
....................    { 
....................       Luz_Blanca_on; 
36BA:  BCF    F8C.2
36BC:  BCF    F95.2
....................       if(flagfl==0) 
36BE:  BTFSC  17.2
36C0:  BRA    36D6
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
36C2:  CALL   0774
36C6:  MOVLW  C8
36C8:  MOVWF  xC6
36CA:  CALL   06E2
36CE:  CALL   0774
36D2:  BSF    17.2
36D4:  BSF    17.5
....................       } 
....................    } 
....................    else 
36D6:  BRA    36F4
....................    { 
....................       Luz_Blanca_off; 
36D8:  BSF    F8C.2
36DA:  BCF    F95.2
....................       if(flagfl==1) 
36DC:  BTFSS  17.2
36DE:  BRA    36F4
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
36E0:  CALL   0774
36E4:  MOVLW  C8
36E6:  MOVWF  xC6
36E8:  CALL   06E2
36EC:  CALL   0774
36F0:  BCF    17.2
36F2:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia arriba 
36F4:  BSF    F96.0
36F6:  BTFSC  F84.0
36F8:  BRA    3724
....................    { 
....................       delay_ms(20); 
36FA:  MOVLW  14
36FC:  MOVWF  xC6
36FE:  CALL   06E2
....................       if(DOWN){ 
3702:  BSF    F96.0
3704:  BTFSC  F84.0
3706:  BRA    3722
....................          if(Flanco == 0) 
3708:  BTFSC  16.3
370A:  BRA    3722
....................          { 
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
370C:  BTG    16.1
370E:  BSF    16.3
3710:  MOVLW  02
3712:  MOVWF  xAF
3714:  MOVLW  96
3716:  MOVWF  xC6
3718:  CALL   06E2
371C:  DECFSZ xAF,F
371E:  BRA    3714
3720:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3722:  BRA    3726
....................    { 
....................       Flanco = 0; 
3724:  BCF    16.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3726:  BSF    F96.1
3728:  BTFSC  F84.1
372A:  BRA    3756
....................    { 
....................       delay_ms(20); 
372C:  MOVLW  14
372E:  MOVWF  xC6
3730:  CALL   06E2
....................       if(RIGHT){ 
3734:  BSF    F96.1
3736:  BTFSC  F84.1
3738:  BRA    3754
....................          if(Flanco1 == 0) 
373A:  BTFSC  16.4
373C:  BRA    3754
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
373E:  BTG    16.2
3740:  BSF    16.4
3742:  MOVLW  02
3744:  MOVWF  xAF
3746:  MOVLW  96
3748:  MOVWF  xC6
374A:  CALL   06E2
374E:  DECFSZ xAF,F
3750:  BRA    3746
3752:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3754:  BRA    3758
....................    { 
....................       Flanco1 = 0; 
3756:  BCF    16.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
3758:  BSF    F96.2
375A:  BTFSC  F84.2
375C:  BRA    3778
....................    { 
....................       delay_ms(20); 
375E:  MOVLW  14
3760:  MOVWF  xC6
3762:  CALL   06E2
....................       if(IZQU){ 
3766:  BSF    F96.2
3768:  BTFSC  F84.2
376A:  BRA    3778
....................          delay_ms(150);  
376C:  MOVLW  96
376E:  MOVWF  xC6
3770:  CALL   06E2
....................          estadouv=!estadouv; 
3774:  BTG    16.0
....................          Cambio=ON; 
3776:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3778:  BSF    F92.5
377A:  BTFSC  F80.5
377C:  BRA    37BA
....................    { 
....................       delay_ms(20); 
377E:  MOVLW  14
3780:  MOVWF  xC6
3782:  CALL   06E2
....................       if(UP){ 
3786:  BSF    F92.5
3788:  BTFSC  F80.5
378A:  BRA    37BA
....................          delay_ms(200); 
378C:  MOVLW  C8
378E:  MOVWF  xC6
3790:  CALL   06E2
....................          printf(lcd_putc,"\f"); 
3794:  MOVLW  0C
3796:  MOVWF  xC0
3798:  CALL   08B4
....................          delay_ms(300); 
379C:  MOVLW  02
379E:  MOVWF  xAF
37A0:  MOVLW  96
37A2:  MOVWF  xC6
37A4:  CALL   06E2
37A8:  DECFSZ xAF,F
37AA:  BRA    37A0
....................          Menu=1;  
37AC:  MOVLW  01
37AE:  MOVWF  18
....................          paso=0; 
37B0:  CLRF   31
....................          Flecha=2; 
37B2:  MOVLW  02
37B4:  MOVWF  1C
....................          Flecha2=2; 
37B6:  MOVWF  1E
....................          Cambio=ON; 
37B8:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(guardaruv==1) 
37BA:  DECFSZ 30,W
37BC:  BRA    3880
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
37BE:  MOVLW  32
37C0:  MOVWF  FA9
37C2:  MOVFF  21,FA8
37C6:  BCF    FA6.6
37C8:  BCF    FA6.7
37CA:  BSF    FA6.2
37CC:  MOVF   FF2,W
37CE:  MOVWF  00
37D0:  BCF    FF2.7
37D2:  MOVLB  F
37D4:  MOVLW  55
37D6:  MOVWF  FA7
37D8:  MOVLW  AA
37DA:  MOVWF  FA7
37DC:  BSF    FA6.1
37DE:  BTFSC  FA6.1
37E0:  BRA    37DE
37E2:  BCF    FA6.2
37E4:  MOVF   00,W
37E6:  IORWF  FF2,F
37E8:  MOVLW  33
37EA:  MOVWF  FA9
37EC:  MOVFF  22,FA8
37F0:  BCF    FA6.6
37F2:  BCF    FA6.7
37F4:  BSF    FA6.2
37F6:  MOVF   FF2,W
37F8:  MOVWF  00
37FA:  BCF    FF2.7
37FC:  MOVLW  55
37FE:  MOVWF  FA7
3800:  MOVLW  AA
3802:  MOVWF  FA7
3804:  BSF    FA6.1
3806:  BTFSC  FA6.1
3808:  BRA    3806
380A:  BCF    FA6.2
380C:  MOVF   00,W
380E:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
3810:  MOVFF  40,23
....................       horasH=make8(horas,1); 
3814:  MOVFF  41,24
....................       write_eeprom(52,horasL); 
3818:  MOVLW  34
381A:  MOVWF  FA9
381C:  MOVFF  23,FA8
3820:  BCF    FA6.6
3822:  BCF    FA6.7
3824:  BSF    FA6.2
3826:  MOVFF  FF2,00
382A:  BCF    FF2.7
382C:  MOVLW  55
382E:  MOVWF  FA7
3830:  MOVLW  AA
3832:  MOVWF  FA7
3834:  BSF    FA6.1
3836:  BTFSC  FA6.1
3838:  BRA    3836
383A:  BCF    FA6.2
383C:  MOVF   00,W
383E:  IORWF  FF2,F
....................       delay_ms(20); 
3840:  MOVLW  14
3842:  MOVLB  0
3844:  MOVWF  xC6
3846:  CALL   06E2
....................       write_eeprom(53,horasH); 
384A:  MOVLW  35
384C:  MOVWF  FA9
384E:  MOVFF  24,FA8
3852:  BCF    FA6.6
3854:  BCF    FA6.7
3856:  BSF    FA6.2
3858:  MOVF   FF2,W
385A:  MOVWF  00
385C:  BCF    FF2.7
385E:  MOVLB  F
3860:  MOVLW  55
3862:  MOVWF  FA7
3864:  MOVLW  AA
3866:  MOVWF  FA7
3868:  BSF    FA6.1
386A:  BTFSC  FA6.1
386C:  BRA    386A
386E:  BCF    FA6.2
3870:  MOVF   00,W
3872:  IORWF  FF2,F
....................       delay_ms(20); 
3874:  MOVLW  14
3876:  MOVLB  0
3878:  MOVWF  xC6
387A:  CALL   06E2
....................       guardaruv=0; 
387E:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
3880:  MOVF   21,W
3882:  SUBLW  3B
3884:  BC    388A
....................    { 
....................       segundos=0;minutos++; 
3886:  CLRF   21
3888:  INCF   22,F
....................    } 
....................    if(minutos==60) 
388A:  MOVF   22,W
388C:  SUBLW  3C
388E:  BNZ   3898
....................    { 
....................       minutos=0;horas++; 
3890:  CLRF   22
3892:  INCF   40,F
3894:  BTFSC  FD8.2
3896:  INCF   41,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
3898:  MOVF   2F,W
389A:  SUBLW  3B
389C:  BC    38B2
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
389E:  CALL   0774
38A2:  MOVLW  C8
38A4:  MOVWF  xC6
38A6:  CALL   06E2
38AA:  CALL   0774
....................       tiemporeset=0; 
38AE:  CLRF   2F
....................       Cambio=ON; 
38B0:  BSF    17.5
....................    }    
....................    } 
38B2:  GOTO   1D72
.................... } 
....................  
38B6:  SLEEP 

Configuration Fuses:
   Word  1: C220   XTPLL IESO FCMEN PLL1 CPUDIV1 USBDIV
   Word  2: 1E3F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
