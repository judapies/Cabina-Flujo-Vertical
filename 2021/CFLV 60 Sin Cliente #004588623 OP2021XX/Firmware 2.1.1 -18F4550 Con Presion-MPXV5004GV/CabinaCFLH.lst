CCS PCH C Compiler, Version 4.104, 5967               29-abr.-21 15:22

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Vertical\2021\CFLV 60 Distriquimicos Aldir #0045885XX OP202180\Firmware 2.1.1 -18F4620 Con Presion-MPXV5004GV\CabinaCFLH.lst

               ROM used: 19908 bytes (61%)
                         Largest free fragment is 12858
               RAM used: 228 (11%) at main() level
                         265 (13%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   29E2
*
0008:  GOTO   00A6
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   0426
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
00A6:  MOVWF  16
00A8:  MOVFF  FD8,17
00AC:  MOVFF  FE0,18
00B0:  MOVLB  0
00B2:  MOVFF  FE9,1E
00B6:  MOVFF  FEA,19
00BA:  MOVFF  FE1,1A
00BE:  MOVFF  FE2,1B
00C2:  MOVFF  FD9,1C
00C6:  MOVFF  FDA,1D
00CA:  MOVFF  FF3,24
00CE:  MOVFF  FF4,25
00D2:  MOVFF  FFA,26
00D6:  MOVFF  00,20
00DA:  MOVFF  01,21
00DE:  MOVFF  02,22
00E2:  MOVFF  03,23
00E6:  BTFSS  FF2.5
00E8:  GOTO   00F2
00EC:  BTFSC  FF2.2
00EE:  GOTO   03F4
00F2:  BTFSS  FF2.4
00F4:  GOTO   00FE
00F8:  BTFSC  FF2.1
00FA:  GOTO   0248
00FE:  MOVFF  20,00
0102:  MOVFF  21,01
0106:  MOVFF  22,02
010A:  MOVFF  23,03
010E:  MOVFF  1E,FE9
0112:  MOVFF  19,FEA
0116:  BSF    19.7
0118:  MOVFF  1A,FE1
011C:  MOVFF  1B,FE2
0120:  MOVFF  1C,FD9
0124:  MOVFF  1D,FDA
0128:  MOVFF  24,FF3
012C:  MOVFF  25,FF4
0130:  MOVFF  26,FFA
0134:  MOVF   16,W
0136:  MOVFF  18,FE0
013A:  MOVFF  17,FD8
013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOBROWNOUT,NOPUT,NOCPD,NOSTVREN,NOWRT,NOWRTD,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOLPT1OSC,NOXINST,NOICPRT// PLL1 para 4 MHz 
.................... #use delay(clock=16000000) 
*
0BEC:  CLRF   FEA
0BEE:  MOVLW  F7
0BF0:  MOVWF  FE9
0BF2:  MOVF   FEF,W
0BF4:  BZ    0C12
0BF6:  MOVLW  05
0BF8:  MOVWF  01
0BFA:  CLRF   00
0BFC:  DECFSZ 00,F
0BFE:  BRA    0BFC
0C00:  DECFSZ 01,F
0C02:  BRA    0BFA
0C04:  MOVLW  2E
0C06:  MOVWF  00
0C08:  DECFSZ 00,F
0C0A:  BRA    0C08
0C0C:  BRA    0C0E
0C0E:  DECFSZ FEF,F
0C10:  BRA    0BF6
0C12:  RETLW  00
.................... //#fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR,NOBROWNOUT 
.................... //#use delay(clock=20000000) 
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
2692:  BCF    xF3.0
....................    y = x; 
2694:  MOVFF  E7,EC
2698:  MOVFF  E6,EB
269C:  MOVFF  E5,EA
26A0:  MOVFF  E4,E9
....................  
....................    if (x < 0) 
26A4:  MOVFF  E7,F7
26A8:  MOVFF  E6,F6
26AC:  MOVFF  E5,F5
26B0:  MOVFF  E4,F4
26B4:  CLRF   xFB
26B6:  CLRF   xFA
26B8:  CLRF   xF9
26BA:  CLRF   xF8
26BC:  CALL   10EA
26C0:  BNC   26CA
....................    { 
....................       s = 1; 
26C2:  BSF    xF3.0
....................       y = -y; 
26C4:  MOVF   xEA,W
26C6:  XORLW  80
26C8:  MOVWF  xEA
....................    } 
....................  
....................    if (y <= 32768.0) 
26CA:  MOVFF  EC,F7
26CE:  MOVFF  EB,F6
26D2:  MOVFF  EA,F5
26D6:  MOVFF  E9,F4
26DA:  CLRF   xFB
26DC:  CLRF   xFA
26DE:  CLRF   xF9
26E0:  MOVLW  8E
26E2:  MOVWF  xF8
26E4:  CALL   10EA
26E8:  BC    26EC
26EA:  BNZ   271C
....................   res = (float32)(unsigned int16)y; 
26EC:  MOVFF  EC,F7
26F0:  MOVFF  EB,F6
26F4:  MOVFF  EA,F5
26F8:  MOVFF  E9,F4
26FC:  RCALL  265A
26FE:  MOVFF  02,F9
2702:  MOVFF  01,F8
2706:  CALL   0D16
270A:  MOVFF  03,F0
270E:  MOVFF  02,EF
2712:  MOVFF  01,EE
2716:  MOVFF  00,ED
....................  
....................  else if (y < 10000000.0) 
271A:  BRA    28A6
271C:  MOVFF  EC,F7
2720:  MOVFF  EB,F6
2724:  MOVFF  EA,F5
2728:  MOVFF  E9,F4
272C:  MOVLW  80
272E:  MOVWF  xFB
2730:  MOVLW  96
2732:  MOVWF  xFA
2734:  MOVLW  18
2736:  MOVWF  xF9
2738:  MOVLW  96
273A:  MOVWF  xF8
273C:  CALL   10EA
2740:  BTFSS  FD8.0
2742:  BRA    2896
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
2744:  MOVFF  EC,F7
2748:  MOVFF  EB,F6
274C:  MOVFF  EA,F5
2750:  MOVFF  E9,F4
2754:  CLRF   xFB
2756:  CLRF   xFA
2758:  CLRF   xF9
275A:  MOVLW  8E
275C:  MOVWF  xF8
275E:  CALL   1D04
2762:  MOVFF  03,F7
2766:  MOVFF  02,F6
276A:  MOVFF  01,F5
276E:  MOVFF  00,F4
2772:  RCALL  265A
2774:  MOVFF  02,F2
2778:  MOVFF  01,F1
....................       y = 32768.0*(y/32768.0 - (float32)l); 
277C:  MOVFF  EC,F7
2780:  MOVFF  EB,F6
2784:  MOVFF  EA,F5
2788:  MOVFF  E9,F4
278C:  CLRF   xFB
278E:  CLRF   xFA
2790:  CLRF   xF9
2792:  MOVLW  8E
2794:  MOVWF  xF8
2796:  CALL   1D04
279A:  MOVFF  00,F4
279E:  MOVFF  01,F5
27A2:  MOVFF  02,F6
27A6:  MOVFF  03,F7
27AA:  MOVFF  F2,F9
27AE:  MOVFF  F1,F8
27B2:  CALL   0D16
27B6:  BSF    FD8.1
27B8:  MOVFF  F7,FB
27BC:  MOVFF  F6,FA
27C0:  MOVFF  F5,F9
27C4:  MOVFF  F4,F8
27C8:  MOVFF  03,FF
27CC:  MOVFF  02,FE
27D0:  MOVFF  01,FD
27D4:  MOVFF  00,FC
27D8:  CALL   1EAC
27DC:  CLRF   xF7
27DE:  CLRF   xF6
27E0:  CLRF   xF5
27E2:  MOVLW  8E
27E4:  MOVWF  xF4
27E6:  MOVFF  03,FB
27EA:  MOVFF  02,FA
27EE:  MOVFF  01,F9
27F2:  MOVFF  00,F8
27F6:  RCALL  212E
27F8:  MOVFF  03,EC
27FC:  MOVFF  02,EB
2800:  MOVFF  01,EA
2804:  MOVFF  00,E9
....................   res = 32768.0*(float32)l; 
2808:  MOVFF  F2,F9
280C:  MOVFF  F1,F8
2810:  CALL   0D16
2814:  CLRF   xF7
2816:  CLRF   xF6
2818:  CLRF   xF5
281A:  MOVLW  8E
281C:  MOVWF  xF4
281E:  MOVFF  03,FB
2822:  MOVFF  02,FA
2826:  MOVFF  01,F9
282A:  MOVFF  00,F8
282E:  RCALL  212E
2830:  MOVFF  03,F0
2834:  MOVFF  02,EF
2838:  MOVFF  01,EE
283C:  MOVFF  00,ED
....................   res += (float32)(unsigned int16)y; 
2840:  MOVFF  EC,F7
2844:  MOVFF  EB,F6
2848:  MOVFF  EA,F5
284C:  MOVFF  E9,F4
2850:  RCALL  265A
2852:  MOVFF  02,F9
2856:  MOVFF  01,F8
285A:  CALL   0D16
285E:  BCF    FD8.1
2860:  MOVFF  F0,FB
2864:  MOVFF  EF,FA
2868:  MOVFF  EE,F9
286C:  MOVFF  ED,F8
2870:  MOVFF  03,FF
2874:  MOVFF  02,FE
2878:  MOVFF  01,FD
287C:  MOVFF  00,FC
2880:  CALL   1EAC
2884:  MOVFF  03,F0
2888:  MOVFF  02,EF
288C:  MOVFF  01,EE
2890:  MOVFF  00,ED
....................  } 
....................  
....................  else 
2894:  BRA    28A6
....................   res = y; 
2896:  MOVFF  EC,F0
289A:  MOVFF  EB,EF
289E:  MOVFF  EA,EE
28A2:  MOVFF  E9,ED
....................  
....................  y = y - (float32)(unsigned int16)y; 
28A6:  MOVFF  EC,F7
28AA:  MOVFF  EB,F6
28AE:  MOVFF  EA,F5
28B2:  MOVFF  E9,F4
28B6:  RCALL  265A
28B8:  MOVFF  02,F9
28BC:  MOVFF  01,F8
28C0:  CALL   0D16
28C4:  BSF    FD8.1
28C6:  MOVFF  EC,FB
28CA:  MOVFF  EB,FA
28CE:  MOVFF  EA,F9
28D2:  MOVFF  E9,F8
28D6:  MOVFF  03,FF
28DA:  MOVFF  02,FE
28DE:  MOVFF  01,FD
28E2:  MOVFF  00,FC
28E6:  CALL   1EAC
28EA:  MOVFF  03,EC
28EE:  MOVFF  02,EB
28F2:  MOVFF  01,EA
28F6:  MOVFF  00,E9
....................  
....................  if (s) 
28FA:  BTFSS  xF3.0
28FC:  BRA    2904
....................   res = -res; 
28FE:  MOVF   xEE,W
2900:  XORLW  80
2902:  MOVWF  xEE
....................  
....................  if (y != 0) 
2904:  MOVFF  EC,F7
2908:  MOVFF  EB,F6
290C:  MOVFF  EA,F5
2910:  MOVFF  E9,F4
2914:  CLRF   xFB
2916:  CLRF   xFA
2918:  CLRF   xF9
291A:  CLRF   xF8
291C:  CALL   10EA
2920:  BZ    2992
....................  { 
....................   if (s == 1 && n == 0) 
2922:  BTFSS  xF3.0
2924:  BRA    295A
2926:  MOVF   xE8,F
2928:  BNZ   295A
....................    res -= 1.0; 
292A:  BSF    FD8.1
292C:  MOVFF  F0,FB
2930:  MOVFF  EF,FA
2934:  MOVFF  EE,F9
2938:  MOVFF  ED,F8
293C:  CLRF   xFF
293E:  CLRF   xFE
2940:  CLRF   xFD
2942:  MOVLW  7F
2944:  MOVWF  xFC
2946:  CALL   1EAC
294A:  MOVFF  03,F0
294E:  MOVFF  02,EF
2952:  MOVFF  01,EE
2956:  MOVFF  00,ED
....................  
....................   if (s == 0 && n == 1) 
295A:  BTFSC  xF3.0
295C:  BRA    2992
295E:  DECFSZ xE8,W
2960:  BRA    2992
....................    res += 1.0; 
2962:  BCF    FD8.1
2964:  MOVFF  F0,FB
2968:  MOVFF  EF,FA
296C:  MOVFF  EE,F9
2970:  MOVFF  ED,F8
2974:  CLRF   xFF
2976:  CLRF   xFE
2978:  CLRF   xFD
297A:  MOVLW  7F
297C:  MOVWF  xFC
297E:  CALL   1EAC
2982:  MOVFF  03,F0
2986:  MOVFF  02,EF
298A:  MOVFF  01,EE
298E:  MOVFF  00,ED
....................  } 
....................  if (x == 0) 
2992:  MOVFF  E7,F7
2996:  MOVFF  E6,F6
299A:  MOVFF  E5,F5
299E:  MOVFF  E4,F4
29A2:  CLRF   xFB
29A4:  CLRF   xFA
29A6:  CLRF   xF9
29A8:  CLRF   xF8
29AA:  CALL   10EA
29AE:  BNZ   29B8
....................     res = 0; 
29B0:  CLRF   xF0
29B2:  CLRF   xEF
29B4:  CLRF   xEE
29B6:  CLRF   xED
....................  
....................  return (res); 
29B8:  MOVFF  ED,00
29BC:  MOVFF  EE,01
29C0:  MOVFF  EF,02
29C4:  MOVFF  F0,03
.................... } 
29C8:  GOTO   29E0 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
29CC:  MOVFF  E3,E7
29D0:  MOVFF  E2,E6
29D4:  MOVFF  E1,E5
29D8:  MOVFF  E0,E4
29DC:  CLRF   xE8
29DE:  BRA    2692
.................... } 
29E0:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0C14:  SWAPF  xF8,W
0C16:  ANDLW  F0
0C18:  MOVWF  00
0C1A:  MOVLW  0F
0C1C:  ANDWF  F83,W
0C1E:  IORWF  00,W
0C20:  MOVWF  F83
....................       delay_cycles(30);//30 
0C22:  MOVLW  09
0C24:  MOVWF  00
0C26:  DECFSZ 00,F
0C28:  BRA    0C26
0C2A:  BRA    0C2C
....................       lcd.enable = 1; 
0C2C:  BSF    F83.3
....................       delay_us(55);//55 
0C2E:  MOVLW  49
0C30:  MOVWF  00
0C32:  DECFSZ 00,F
0C34:  BRA    0C32
....................       lcd.enable = 0; 
0C36:  BCF    F83.3
.................... } 
0C38:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0C3A:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0C3C:  MOVLW  01
0C3E:  MOVWF  xF7
0C40:  RCALL  0BEC
....................       lcd.rs = address; 
0C42:  BTFSS  xF5.0
0C44:  BCF    F83.1
0C46:  BTFSC  xF5.0
0C48:  BSF    F83.1
....................       delay_cycles(30);//30 
0C4A:  MOVLW  09
0C4C:  MOVWF  00
0C4E:  DECFSZ 00,F
0C50:  BRA    0C4E
0C52:  BRA    0C54
....................       lcd.rw = 0; 
0C54:  BCF    F83.2
....................       delay_cycles(30);//30 
0C56:  MOVLW  09
0C58:  MOVWF  00
0C5A:  DECFSZ 00,F
0C5C:  BRA    0C5A
0C5E:  BRA    0C60
....................       lcd.enable = 0; 
0C60:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
0C62:  SWAPF  xF6,W
0C64:  MOVWF  xF7
0C66:  MOVLW  0F
0C68:  ANDWF  xF7,F
0C6A:  MOVFF  F7,F8
0C6E:  RCALL  0C14
....................       lcd_send_nibble(n & 0xf); 
0C70:  MOVF   xF6,W
0C72:  ANDLW  0F
0C74:  MOVWF  xF7
0C76:  MOVWF  xF8
0C78:  RCALL  0C14
.................... } 
0C7A:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0C7C:  MOVLW  00
0C7E:  MOVWF  F95
....................     lcd.rs = 0; 
0C80:  BCF    F83.1
....................     lcd.rw = 0; 
0C82:  BCF    F83.2
....................     lcd.enable = 0; 
0C84:  BCF    F83.3
....................     delay_ms(15); 
0C86:  MOVLW  0F
0C88:  MOVWF  xF7
0C8A:  RCALL  0BEC
....................     for(i=1;i<=3;++i) { 
0C8C:  MOVLW  01
0C8E:  MOVWF  xE0
0C90:  MOVF   xE0,W
0C92:  SUBLW  03
0C94:  BNC   0CA6
....................        lcd_send_nibble(3); 
0C96:  MOVLW  03
0C98:  MOVWF  xF8
0C9A:  RCALL  0C14
....................        delay_ms(5); 
0C9C:  MOVLW  05
0C9E:  MOVWF  xF7
0CA0:  RCALL  0BEC
....................     } 
0CA2:  INCF   xE0,F
0CA4:  BRA    0C90
....................     lcd_send_nibble(2); 
0CA6:  MOVLW  02
0CA8:  MOVWF  xF8
0CAA:  RCALL  0C14
....................     for(i=0;i<=3;++i) 
0CAC:  CLRF   xE0
0CAE:  MOVF   xE0,W
0CB0:  SUBLW  03
0CB2:  BNC   0CD8
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0CB4:  CLRF   03
0CB6:  MOVF   xE0,W
0CB8:  MOVFF  FF2,E1
0CBC:  BCF    FF2.6
0CBE:  BCF    FF2.7
0CC0:  CALL   0140
0CC4:  BTFSC  xE1.6
0CC6:  BSF    FF2.6
0CC8:  BTFSC  xE1.7
0CCA:  BSF    FF2.7
0CCC:  MOVWF  xE1
0CCE:  CLRF   xF5
0CD0:  MOVWF  xF6
0CD2:  RCALL  0C3A
0CD4:  INCF   xE0,F
0CD6:  BRA    0CAE
.................... } 
0CD8:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
16CC:  MOVLW  01
16CE:  SUBWF  xF3,W
16D0:  ADDLW  FC
16D2:  BC    16F2
16D4:  ADDLW  04
16D6:  GOTO   1704
....................      case 1 : address=0x80;break; 
16DA:  MOVLW  80
16DC:  MOVWF  xF4
16DE:  BRA    16F2
....................      case 2 : address=0xc0;break; 
16E0:  MOVLW  C0
16E2:  MOVWF  xF4
16E4:  BRA    16F2
....................      case 3 : address=0x94;break; 
16E6:  MOVLW  94
16E8:  MOVWF  xF4
16EA:  BRA    16F2
....................      case 4 : address=0xd4;break; 
16EC:  MOVLW  D4
16EE:  MOVWF  xF4
16F0:  BRA    16F2
....................    } 
....................    address+=x-1; 
16F2:  MOVLW  01
16F4:  SUBWF  xF2,W
16F6:  ADDWF  xF4,F
....................    lcd_send_byte(0,address); 
16F8:  CLRF   xF5
16FA:  MOVFF  F4,F6
16FE:  CALL   0C3A
.................... } 
1702:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
1736:  MOVF   xF1,W
1738:  SUBLW  F1
173A:  BNZ   1740
....................    { 
....................       c=238; 
173C:  MOVLW  EE
173E:  MOVWF  xF1
....................    } 
....................    if(c=='Ñ') 
1740:  MOVF   xF1,W
1742:  SUBLW  D1
1744:  BNZ   174A
....................    { 
....................       c=255; 
1746:  MOVLW  FF
1748:  MOVWF  xF1
....................    } 
....................     
....................    switch (c) { 
174A:  MOVF   xF1,W
174C:  XORLW  0C
174E:  BZ    175A
1750:  XORLW  06
1752:  BZ    1772
1754:  XORLW  02
1756:  BZ    1780
1758:  BRA    178C
....................      case '\f'   : lcd_send_byte(0,1); 
175A:  CLRF   xF5
175C:  MOVLW  01
175E:  MOVWF  xF6
1760:  CALL   0C3A
....................                    lcdline=1; 
1764:  MOVLW  01
1766:  MOVWF  28
....................                    delay_ms(2); 
1768:  MOVLW  02
176A:  MOVWF  xF7
176C:  CALL   0BEC
....................                                            break; 
1770:  BRA    179A
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
1772:  INCF   28,F
1774:  MOVLW  01
1776:  MOVWF  xF2
1778:  MOVFF  28,F3
177C:  RCALL  16CC
177E:  BRA    179A
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
1780:  CLRF   xF5
1782:  MOVLW  10
1784:  MOVWF  xF6
1786:  CALL   0C3A
178A:  BRA    179A
....................      default     : lcd_send_byte(1,c);     break; 
178C:  MOVLW  01
178E:  MOVWF  xF5
1790:  MOVFF  F1,F6
1794:  CALL   0C3A
1798:  BRA    179A
....................    } 
.................... } 
179A:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,motor=0,luz=0,velocidadInicial=10; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,tup=0,tdown=0,tright=0,tleft=0,segundosTrabajo=0,horasTrabajo=0; 
.................... short Cruce=OFF; 
....................  
.................... int8 VelMotor=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
1BF6:  DECFSZ xE1,W
1BF8:  BRA    1C0E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1BFA:  MOVLW  02
1BFC:  MOVWF  xF2
1BFE:  MOVFF  E2,F3
1C02:  RCALL  16CC
1C04:  MOVLW  64
1C06:  MOVWF  FF6
1C08:  MOVLW  01
1C0A:  MOVWF  FF7
1C0C:  RCALL  179C
....................    if(x==2) 
1C0E:  MOVF   xE1,W
1C10:  SUBLW  02
1C12:  BNZ   1C28
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1C14:  MOVLW  02
1C16:  MOVWF  xF2
1C18:  MOVFF  E2,F3
1C1C:  RCALL  16CC
1C1E:  MOVLW  78
1C20:  MOVWF  FF6
1C22:  MOVLW  01
1C24:  MOVWF  FF7
1C26:  RCALL  179C
....................    if(x==3) 
1C28:  MOVF   xE1,W
1C2A:  SUBLW  03
1C2C:  BNZ   1C42
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1C2E:  MOVLW  02
1C30:  MOVWF  xF2
1C32:  MOVFF  E2,F3
1C36:  RCALL  16CC
1C38:  MOVLW  8C
1C3A:  MOVWF  FF6
1C3C:  MOVLW  01
1C3E:  MOVWF  FF7
1C40:  RCALL  179C
....................    if(x==4) 
1C42:  MOVF   xE1,W
1C44:  SUBLW  04
1C46:  BNZ   1C5C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1C48:  MOVLW  02
1C4A:  MOVWF  xF2
1C4C:  MOVFF  E2,F3
1C50:  RCALL  16CC
1C52:  MOVLW  A0
1C54:  MOVWF  FF6
1C56:  MOVLW  01
1C58:  MOVWF  FF7
1C5A:  RCALL  179C
....................     
....................    if(x==5) 
1C5C:  MOVF   xE1,W
1C5E:  SUBLW  05
1C60:  BNZ   1C92
....................    {if(estadoalarma==0) 
1C62:  BTFSC  2A.4
1C64:  BRA    1C7A
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1C66:  MOVLW  02
1C68:  MOVWF  xF2
1C6A:  MOVFF  E2,F3
1C6E:  RCALL  16CC
1C70:  MOVLW  B4
1C72:  MOVWF  FF6
1C74:  MOVLW  01
1C76:  MOVWF  FF7
1C78:  RCALL  179C
....................    if(estadoalarma==1) 
1C7A:  BTFSS  2A.4
1C7C:  BRA    1C92
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1C7E:  MOVLW  02
1C80:  MOVWF  xF2
1C82:  MOVFF  E2,F3
1C86:  RCALL  16CC
1C88:  MOVLW  C8
1C8A:  MOVWF  FF6
1C8C:  MOVLW  01
1C8E:  MOVWF  FF7
1C90:  RCALL  179C
....................    } 
....................     
....................    if(x==6) 
1C92:  MOVF   xE1,W
1C94:  SUBLW  06
1C96:  BNZ   1CAC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
1C98:  MOVLW  02
1C9A:  MOVWF  xF2
1C9C:  MOVFF  E2,F3
1CA0:  RCALL  16CC
1CA2:  MOVLW  DC
1CA4:  MOVWF  FF6
1CA6:  MOVLW  01
1CA8:  MOVWF  FF7
1CAA:  RCALL  179C
.................... } 
1CAC:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
1CAE:  RLCF   xF1,W
1CB0:  MOVWF  00
1CB2:  RLCF   00,F
1CB4:  MOVLW  FC
1CB6:  ANDWF  00,F
1CB8:  MOVFF  00,01
1CBC:  MOVF   FC2,W
1CBE:  ANDLW  C3
1CC0:  IORWF  00,W
1CC2:  MOVWF  FC2
1CC4:  MOVLW  0A
1CC6:  MOVWF  xF7
1CC8:  CALL   0BEC
1CCC:  BSF    FC2.1
1CCE:  BTFSC  FC2.1
1CD0:  BRA    1CCE
1CD2:  MOVFF  FC4,03
1CD6:  MOVFF  FC3,F8
1CDA:  MOVFF  FC4,F9
1CDE:  CALL   0D16
1CE2:  MOVFF  03,F5
1CE6:  MOVFF  02,F4
1CEA:  MOVFF  01,F3
1CEE:  MOVFF  00,F2
1CF2:  MOVFF  F2,00
1CF6:  MOVFF  F3,01
1CFA:  MOVFF  F4,02
1CFE:  MOVFF  F5,03
.................... } 
1D02:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
2220:  CLRF   xE4
2222:  CLRF   xE3
2224:  CLRF   xE2
2226:  CLRF   xE1
2228:  CLRF   xE8
222A:  CLRF   xE7
222C:  CLRF   xE6
222E:  CLRF   xE5
2230:  CLRF   xEC
2232:  CLRF   xEB
2234:  CLRF   xEA
2236:  CLRF   xE9
2238:  CLRF   xF0
223A:  CLRF   xEF
223C:  CLRF   xEE
223E:  CLRF   xED
....................    float promediopresion=0.0; 
....................    float VG=0.0,VS=0.0,G2=0.0; 
....................     
....................    V1=sensores(0);  
2240:  CLRF   xF1
2242:  RCALL  1CAE
2244:  MOVFF  03,B1
2248:  MOVFF  02,B0
224C:  MOVFF  01,AF
2250:  MOVFF  00,AE
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
2254:  MOVFF  B1,F7
2258:  MOVFF  B0,F6
225C:  MOVFF  AF,F5
2260:  MOVFF  AE,F4
2264:  MOVFF  C1,FB
2268:  MOVFF  C0,FA
226C:  MOVFF  BF,F9
2270:  MOVFF  BE,F8
2274:  RCALL  1D04
2276:  MOVFF  00,F1
227A:  MOVFF  01,F2
227E:  MOVFF  02,F3
2282:  MOVFF  03,F4
2286:  BSF    FD8.1
2288:  MOVFF  03,FB
228C:  MOVFF  02,FA
2290:  MOVFF  01,F9
2294:  MOVFF  00,F8
2298:  CLRF   xFF
229A:  CLRF   xFE
229C:  CLRF   xFD
229E:  MOVLW  7F
22A0:  MOVWF  xFC
22A2:  RCALL  1EAC
22A4:  MOVFF  03,B5
22A8:  MOVFF  02,B4
22AC:  MOVFF  01,B3
22B0:  MOVFF  00,B2
....................    //VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    //G2=G; 
....................    //VG = (G2*5.0)/1023.0; 
....................    //Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
....................     
....................    if(Presion>0) 
22B4:  CLRF   xF7
22B6:  CLRF   xF6
22B8:  CLRF   xF5
22BA:  CLRF   xF4
22BC:  MOVFF  B5,FB
22C0:  MOVFF  B4,FA
22C4:  MOVFF  B3,F9
22C8:  MOVFF  B2,F8
22CC:  CALL   10EA
22D0:  BNC   22DA
....................       Presion=0.0; 
22D2:  CLRF   xB5
22D4:  CLRF   xB4
22D6:  CLRF   xB3
22D8:  CLRF   xB2
....................    
....................    if(Presion<0.0){ 
22DA:  MOVFF  B5,F7
22DE:  MOVFF  B4,F6
22E2:  MOVFF  B3,F5
22E6:  MOVFF  B2,F4
22EA:  CLRF   xFB
22EC:  CLRF   xFA
22EE:  CLRF   xF9
22F0:  CLRF   xF8
22F2:  CALL   10EA
22F6:  BNC   2326
....................       Presion=Presion*-1; 
22F8:  MOVFF  B5,F7
22FC:  MOVFF  B4,F6
2300:  MOVFF  B3,F5
2304:  MOVFF  B2,F4
2308:  CLRF   xFB
230A:  CLRF   xFA
230C:  MOVLW  80
230E:  MOVWF  xF9
2310:  MOVLW  7F
2312:  MOVWF  xF8
2314:  RCALL  212E
2316:  MOVFF  03,B5
231A:  MOVFF  02,B4
231E:  MOVFF  01,B3
2322:  MOVFF  00,B2
....................    } 
....................  
....................    if(r>media-1) 
2326:  MOVLW  01
2328:  SUBWF  xE0,W
232A:  SUBWF  3E,W
232C:  BZ    2332
232E:  BNC   2332
....................    {r=0;} 
2330:  CLRF   3E
....................    PromPresion[r]=Presion;r++; 
2332:  MOVF   3E,W
2334:  MULLW  04
2336:  MOVF   FF3,W
2338:  CLRF   03
233A:  ADDLW  5E
233C:  MOVWF  FE9
233E:  MOVLW  00
2340:  ADDWFC 03,W
2342:  MOVWF  FEA
2344:  MOVFF  B2,FEF
2348:  MOVFF  B3,FEC
234C:  MOVFF  B4,FEC
2350:  MOVFF  B5,FEC
2354:  INCF   3E,F
....................           
....................    for(q=0;q<=(media-1);q++) 
2356:  CLRF   3F
2358:  MOVLW  01
235A:  SUBWF  xE0,W
235C:  SUBWF  3F,W
235E:  BZ    2362
2360:  BC    23CC
....................    { 
....................       promediopresion+=PromPresion[q]; 
2362:  MOVF   3F,W
2364:  MULLW  04
2366:  MOVF   FF3,W
2368:  CLRF   03
236A:  ADDLW  5E
236C:  MOVWF  FE9
236E:  MOVLW  00
2370:  ADDWFC 03,W
2372:  MOVWF  FEA
2374:  MOVFF  FEF,00
2378:  MOVFF  FEC,01
237C:  MOVFF  FEC,02
2380:  MOVFF  FEC,03
2384:  MOVFF  FEA,F2
2388:  MOVFF  FE9,F1
238C:  BCF    FD8.1
238E:  MOVFF  E4,FB
2392:  MOVFF  E3,FA
2396:  MOVFF  E2,F9
239A:  MOVFF  E1,F8
239E:  MOVFF  03,FF
23A2:  MOVFF  02,FE
23A6:  MOVFF  01,FD
23AA:  MOVFF  00,FC
23AE:  RCALL  1EAC
23B0:  MOVFF  F2,FEA
23B4:  MOVFF  F1,FE9
23B8:  MOVFF  03,E4
23BC:  MOVFF  02,E3
23C0:  MOVFF  01,E2
23C4:  MOVFF  00,E1
....................    }  
23C8:  INCF   3F,F
23CA:  BRA    2358
....................    promediopresion=promediopresion/media;    
23CC:  CLRF   xF9
23CE:  MOVFF  E0,F8
23D2:  CALL   0D16
23D6:  MOVFF  E4,F7
23DA:  MOVFF  E3,F6
23DE:  MOVFF  E2,F5
23E2:  MOVFF  E1,F4
23E6:  MOVFF  03,FB
23EA:  MOVFF  02,FA
23EE:  MOVFF  01,F9
23F2:  MOVFF  00,F8
23F6:  RCALL  1D04
23F8:  MOVFF  03,E4
23FC:  MOVFF  02,E3
2400:  MOVFF  01,E2
2404:  MOVFF  00,E1
....................     
....................    return promediopresion; 
2408:  MOVFF  E1,00
240C:  MOVFF  E2,01
2410:  MOVFF  E3,02
2414:  MOVFF  E4,03
.................... } 
2418:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0CDA:  MOVLW  C8
0CDC:  MOVWF  xF7
0CDE:  RCALL  0BEC
....................    lcd_init(); 
0CE0:  RCALL  0C7C
....................    set_tris_a(0XFF); 
0CE2:  MOVLW  FF
0CE4:  MOVWF  F92
....................    set_tris_e(0XFF); 
0CE6:  MOVWF  F96
....................    enable_interrupts(global); 
0CE8:  MOVLW  C0
0CEA:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
0CEC:  BSF    FF2.4
0CEE:  BSF    FF1.6
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
0CF0:  MOVLW  C7
0CF2:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0CF4:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0CF6:  MOVLW  85
0CF8:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0CFA:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0CFC:  MOVF   FC1,W
0CFE:  ANDLW  C0
0D00:  IORLW  0E
0D02:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0D04:  BCF    FC0.0
0D06:  BSF    FC0.1
0D08:  BCF    FC0.2
0D0A:  BSF    FC0.7
0D0C:  BSF    FC2.0
....................    enable_interrupts(global); 
0D0E:  MOVLW  C0
0D10:  IORWF  FF2,F
.................... } 
0D12:  GOTO   2B94 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
17BC:  MOVLW  01
17BE:  MOVWF  xF2
17C0:  MOVWF  xF3
17C2:  RCALL  16CC
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
17C4:  MOVLW  F0
17C6:  MOVWF  FF6
17C8:  MOVLW  01
17CA:  MOVWF  FF7
17CC:  RCALL  179C
....................    lcd_gotoxy(1,2); 
17CE:  MOVLW  01
17D0:  MOVWF  xF2
17D2:  MOVLW  02
17D4:  MOVWF  xF3
17D6:  RCALL  16CC
....................    printf(lcd_putc,"      VERTICAL      "); 
17D8:  MOVLW  06
17DA:  MOVWF  FF6
17DC:  MOVLW  02
17DE:  MOVWF  FF7
17E0:  RCALL  179C
....................    lcd_gotoxy(1,3); 
17E2:  MOVLW  01
17E4:  MOVWF  xF2
17E6:  MOVLW  03
17E8:  MOVWF  xF3
17EA:  RCALL  16CC
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
17EC:  MOVLW  1C
17EE:  MOVWF  FF6
17F0:  MOVLW  02
17F2:  MOVWF  FF7
17F4:  RCALL  179C
....................    lcd_gotoxy(1,4); 
17F6:  MOVLW  01
17F8:  MOVWF  xF2
17FA:  MOVLW  04
17FC:  MOVWF  xF3
17FE:  RCALL  16CC
....................    printf(lcd_putc,"     REF:JPCV24     "); 
1800:  MOVLW  32
1802:  MOVWF  FF6
1804:  MOVLW  02
1806:  MOVWF  FF7
1808:  RCALL  179C
....................    delay_ms(2000); 
180A:  MOVLW  08
180C:  MOVWF  xE0
180E:  MOVLW  FA
1810:  MOVWF  xF7
1812:  CALL   0BEC
1816:  DECFSZ xE0,F
1818:  BRA    180E
....................    printf(lcd_putc,"\f"); 
181A:  MOVLW  0C
181C:  MOVWF  xF1
181E:  RCALL  1736
.................... } 
1820:  GOTO   2BA6 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0D4C:  MOVFF  FF2,E0
0D50:  BCF    FF2.6
0D52:  BCF    FF2.7
0D54:  CLRF   FA9
0D56:  BCF    FA6.6
0D58:  BCF    FA6.7
0D5A:  BSF    FA6.0
0D5C:  MOVF   FA8,W
0D5E:  BTFSC  xE0.6
0D60:  BSF    FF2.6
0D62:  BTFSC  xE0.7
0D64:  BSF    FF2.7
0D66:  MOVWF  4F
....................    delay_ms(20);  
0D68:  MOVLW  14
0D6A:  MOVWF  xF7
0D6C:  RCALL  0BEC
....................    contrasena[1]=read_eeprom(1); 
0D6E:  MOVFF  FF2,E0
0D72:  BCF    FF2.6
0D74:  BCF    FF2.7
0D76:  MOVLW  01
0D78:  MOVWF  FA9
0D7A:  BCF    FA6.6
0D7C:  BCF    FA6.7
0D7E:  BSF    FA6.0
0D80:  MOVF   FA8,W
0D82:  BTFSC  xE0.6
0D84:  BSF    FF2.6
0D86:  BTFSC  xE0.7
0D88:  BSF    FF2.7
0D8A:  MOVWF  50
....................    delay_ms(20); 
0D8C:  MOVLW  14
0D8E:  MOVWF  xF7
0D90:  RCALL  0BEC
....................    contrasena[2]=read_eeprom(2); 
0D92:  MOVFF  FF2,E0
0D96:  BCF    FF2.6
0D98:  BCF    FF2.7
0D9A:  MOVLW  02
0D9C:  MOVWF  FA9
0D9E:  BCF    FA6.6
0DA0:  BCF    FA6.7
0DA2:  BSF    FA6.0
0DA4:  MOVF   FA8,W
0DA6:  BTFSC  xE0.6
0DA8:  BSF    FF2.6
0DAA:  BTFSC  xE0.7
0DAC:  BSF    FF2.7
0DAE:  MOVWF  51
....................    delay_ms(20);  
0DB0:  MOVLW  14
0DB2:  MOVWF  xF7
0DB4:  RCALL  0BEC
....................    contrasena[3]=read_eeprom(3); 
0DB6:  MOVFF  FF2,E0
0DBA:  BCF    FF2.6
0DBC:  BCF    FF2.7
0DBE:  MOVLW  03
0DC0:  MOVWF  FA9
0DC2:  BCF    FA6.6
0DC4:  BCF    FA6.7
0DC6:  BSF    FA6.0
0DC8:  MOVF   FA8,W
0DCA:  BTFSC  xE0.6
0DCC:  BSF    FF2.6
0DCE:  BTFSC  xE0.7
0DD0:  BSF    FF2.7
0DD2:  MOVWF  52
....................    delay_ms(20); 
0DD4:  MOVLW  14
0DD6:  MOVWF  xF7
0DD8:  RCALL  0BEC
....................    estadoalarma=read_eeprom(4); 
0DDA:  MOVFF  FF2,E0
0DDE:  BCF    FF2.6
0DE0:  BCF    FF2.7
0DE2:  MOVLW  04
0DE4:  MOVWF  FA9
0DE6:  BCF    FA6.6
0DE8:  BCF    FA6.7
0DEA:  BSF    FA6.0
0DEC:  MOVF   FA8,W
0DEE:  BTFSC  xE0.6
0DF0:  BSF    FF2.6
0DF2:  BTFSC  xE0.7
0DF4:  BSF    FF2.7
0DF6:  MOVWF  01
0DF8:  BCF    2A.4
0DFA:  BTFSC  01.0
0DFC:  BSF    2A.4
....................    delay_ms(20); 
0DFE:  MOVLW  14
0E00:  MOVWF  xF7
0E02:  RCALL  0BEC
....................    tempo_minutos=read_eeprom(5); 
0E04:  MOVFF  FF2,E0
0E08:  BCF    FF2.6
0E0A:  BCF    FF2.7
0E0C:  MOVLW  05
0E0E:  MOVWF  FA9
0E10:  BCF    FA6.6
0E12:  BCF    FA6.7
0E14:  BSF    FA6.0
0E16:  MOVF   FA8,W
0E18:  BTFSC  xE0.6
0E1A:  BSF    FF2.6
0E1C:  BTFSC  xE0.7
0E1E:  BSF    FF2.7
0E20:  MOVWF  3A
....................    delay_ms(20); 
0E22:  MOVLW  14
0E24:  MOVWF  xF7
0E26:  RCALL  0BEC
....................    tempo_segundos=read_eeprom(6); 
0E28:  MOVFF  FF2,E0
0E2C:  BCF    FF2.6
0E2E:  BCF    FF2.7
0E30:  MOVLW  06
0E32:  MOVWF  FA9
0E34:  BCF    FA6.6
0E36:  BCF    FA6.7
0E38:  BSF    FA6.0
0E3A:  MOVF   FA8,W
0E3C:  BTFSC  xE0.6
0E3E:  BSF    FF2.6
0E40:  BTFSC  xE0.7
0E42:  BSF    FF2.7
0E44:  MOVWF  3B
....................    delay_ms(20); 
0E46:  MOVLW  14
0E48:  MOVWF  xF7
0E4A:  RCALL  0BEC
....................    segundos=read_eeprom(7); 
0E4C:  MOVFF  FF2,E0
0E50:  BCF    FF2.6
0E52:  BCF    FF2.7
0E54:  MOVLW  07
0E56:  MOVWF  FA9
0E58:  BCF    FA6.6
0E5A:  BCF    FA6.7
0E5C:  BSF    FA6.0
0E5E:  MOVF   FA8,W
0E60:  BTFSC  xE0.6
0E62:  BSF    FF2.6
0E64:  BTFSC  xE0.7
0E66:  BSF    FF2.7
0E68:  MOVWF  34
....................    delay_ms(20); 
0E6A:  MOVLW  14
0E6C:  MOVWF  xF7
0E6E:  RCALL  0BEC
....................    minutos=read_eeprom(8); 
0E70:  MOVFF  FF2,E0
0E74:  BCF    FF2.6
0E76:  BCF    FF2.7
0E78:  MOVLW  08
0E7A:  MOVWF  FA9
0E7C:  BCF    FA6.6
0E7E:  BCF    FA6.7
0E80:  BSF    FA6.0
0E82:  MOVF   FA8,W
0E84:  BTFSC  xE0.6
0E86:  BSF    FF2.6
0E88:  BTFSC  xE0.7
0E8A:  BSF    FF2.7
0E8C:  MOVWF  35
....................    delay_ms(20); 
0E8E:  MOVLW  14
0E90:  MOVWF  xF7
0E92:  RCALL  0BEC
....................    horasL=read_eeprom(9); 
0E94:  MOVFF  FF2,E0
0E98:  BCF    FF2.6
0E9A:  BCF    FF2.7
0E9C:  MOVLW  09
0E9E:  MOVWF  FA9
0EA0:  BCF    FA6.6
0EA2:  BCF    FA6.7
0EA4:  BSF    FA6.0
0EA6:  MOVF   FA8,W
0EA8:  BTFSC  xE0.6
0EAA:  BSF    FF2.6
0EAC:  BTFSC  xE0.7
0EAE:  BSF    FF2.7
0EB0:  MOVWF  36
....................    delay_ms(20); 
0EB2:  MOVLW  14
0EB4:  MOVWF  xF7
0EB6:  RCALL  0BEC
....................    horasH=read_eeprom(10); 
0EB8:  MOVFF  FF2,E0
0EBC:  BCF    FF2.6
0EBE:  BCF    FF2.7
0EC0:  MOVLW  0A
0EC2:  MOVWF  FA9
0EC4:  BCF    FA6.6
0EC6:  BCF    FA6.7
0EC8:  BSF    FA6.0
0ECA:  MOVF   FA8,W
0ECC:  BTFSC  xE0.6
0ECE:  BSF    FF2.6
0ED0:  BTFSC  xE0.7
0ED2:  BSF    FF2.7
0ED4:  MOVWF  37
....................    delay_ms(20); 
0ED6:  MOVLW  14
0ED8:  MOVWF  xF7
0EDA:  RCALL  0BEC
....................    G_l=read_eeprom(11); 
0EDC:  MOVFF  FF2,E0
0EE0:  BCF    FF2.6
0EE2:  BCF    FF2.7
0EE4:  MOVLW  0B
0EE6:  MOVWF  FA9
0EE8:  BCF    FA6.6
0EEA:  BCF    FA6.7
0EEC:  BSF    FA6.0
0EEE:  MOVF   FA8,W
0EF0:  BTFSC  xE0.6
0EF2:  BSF    FF2.6
0EF4:  BTFSC  xE0.7
0EF6:  BSF    FF2.7
0EF8:  MOVWF  38
....................    delay_ms(20); 
0EFA:  MOVLW  14
0EFC:  MOVWF  xF7
0EFE:  RCALL  0BEC
....................    G_h=read_eeprom(12); 
0F00:  MOVFF  FF2,E0
0F04:  BCF    FF2.6
0F06:  BCF    FF2.7
0F08:  MOVLW  0C
0F0A:  MOVWF  FA9
0F0C:  BCF    FA6.6
0F0E:  BCF    FA6.7
0F10:  BSF    FA6.0
0F12:  MOVF   FA8,W
0F14:  BTFSC  xE0.6
0F16:  BSF    FF2.6
0F18:  BTFSC  xE0.7
0F1A:  BSF    FF2.7
0F1C:  MOVWF  39
....................    delay_ms(20); 
0F1E:  MOVLW  14
0F20:  MOVWF  xF7
0F22:  RCALL  0BEC
....................    Vel1=read_eeprom(13); 
0F24:  MOVFF  FF2,E0
0F28:  BCF    FF2.6
0F2A:  BCF    FF2.7
0F2C:  MOVLW  0D
0F2E:  MOVWF  FA9
0F30:  BCF    FA6.6
0F32:  BCF    FA6.7
0F34:  BSF    FA6.0
0F36:  MOVF   FA8,W
0F38:  BTFSC  xE0.6
0F3A:  BSF    FF2.6
0F3C:  BTFSC  xE0.7
0F3E:  BSF    FF2.7
0F40:  MOVWF  57
....................    delay_ms(20); 
0F42:  MOVLW  14
0F44:  MOVWF  xF7
0F46:  RCALL  0BEC
....................    codigoSubir=read_eeprom(15); 
0F48:  MOVFF  FF2,E0
0F4C:  BCF    FF2.6
0F4E:  BCF    FF2.7
0F50:  MOVLW  0F
0F52:  MOVWF  FA9
0F54:  BCF    FA6.6
0F56:  BCF    FA6.7
0F58:  BSF    FA6.0
0F5A:  MOVF   FA8,W
0F5C:  BTFSC  xE0.6
0F5E:  BSF    FF2.6
0F60:  BTFSC  xE0.7
0F62:  BSF    FF2.7
0F64:  MOVWF  54
....................    delay_ms(20); 
0F66:  MOVLW  14
0F68:  MOVWF  xF7
0F6A:  RCALL  0BEC
....................    codigoBajar=read_eeprom(16); 
0F6C:  MOVFF  FF2,E0
0F70:  BCF    FF2.6
0F72:  BCF    FF2.7
0F74:  MOVLW  10
0F76:  MOVWF  FA9
0F78:  BCF    FA6.6
0F7A:  BCF    FA6.7
0F7C:  BSF    FA6.0
0F7E:  MOVF   FA8,W
0F80:  BTFSC  xE0.6
0F82:  BSF    FF2.6
0F84:  BTFSC  xE0.7
0F86:  BSF    FF2.7
0F88:  MOVWF  55
....................    delay_ms(20); 
0F8A:  MOVLW  14
0F8C:  MOVWF  xF7
0F8E:  RCALL  0BEC
....................    codigoDetener=read_eeprom(17); 
0F90:  MOVFF  FF2,E0
0F94:  BCF    FF2.6
0F96:  BCF    FF2.7
0F98:  MOVLW  11
0F9A:  MOVWF  FA9
0F9C:  BCF    FA6.6
0F9E:  BCF    FA6.7
0FA0:  BSF    FA6.0
0FA2:  MOVF   FA8,W
0FA4:  BTFSC  xE0.6
0FA6:  BSF    FF2.6
0FA8:  BTFSC  xE0.7
0FAA:  BSF    FF2.7
0FAC:  MOVWF  56
....................    delay_ms(20); 
0FAE:  MOVLW  14
0FB0:  MOVWF  xF7
0FB2:  RCALL  0BEC
....................    G16=make16(G_h,G_l); 
0FB4:  MOVFF  39,5D
0FB8:  MOVFF  38,5C
....................    G=G16; 
0FBC:  MOVFF  5D,F9
0FC0:  MOVFF  5C,F8
0FC4:  RCALL  0D16
0FC6:  MOVFF  03,C1
0FCA:  MOVFF  02,C0
0FCE:  MOVFF  01,BF
0FD2:  MOVFF  00,BE
....................    horasTrabajo=make16(read_eeprom(19),read_eeprom(18)); 
0FD6:  MOVFF  FF2,E0
0FDA:  BCF    FF2.6
0FDC:  BCF    FF2.7
0FDE:  MOVLW  13
0FE0:  MOVWF  FA9
0FE2:  BCF    FA6.6
0FE4:  BCF    FA6.7
0FE6:  BSF    FA6.0
0FE8:  MOVF   FA8,W
0FEA:  BTFSC  xE0.6
0FEC:  BSF    FF2.6
0FEE:  BTFSC  xE0.7
0FF0:  BSF    FF2.7
0FF2:  MOVWF  xE1
0FF4:  MOVFF  FF2,E2
0FF8:  BCF    FF2.6
0FFA:  BCF    FF2.7
0FFC:  MOVLW  12
0FFE:  MOVWF  FA9
1000:  BCF    FA6.6
1002:  BCF    FA6.7
1004:  BSF    FA6.0
1006:  MOVF   FA8,W
1008:  BTFSC  xE2.6
100A:  BSF    FF2.6
100C:  BTFSC  xE2.7
100E:  BSF    FF2.7
1010:  MOVWF  xE3
1012:  MOVFF  E1,D0
1016:  MOVFF  E3,CF
....................    delay_ms(20); 
101A:  MOVLW  14
101C:  MOVWF  xF7
101E:  RCALL  0BEC
....................    segundosTrabajo=make16(read_eeprom(21),read_eeprom(20)); 
1020:  MOVFF  FF2,E0
1024:  BCF    FF2.6
1026:  BCF    FF2.7
1028:  MOVLW  15
102A:  MOVWF  FA9
102C:  BCF    FA6.6
102E:  BCF    FA6.7
1030:  BSF    FA6.0
1032:  MOVF   FA8,W
1034:  BTFSC  xE0.6
1036:  BSF    FF2.6
1038:  BTFSC  xE0.7
103A:  BSF    FF2.7
103C:  MOVWF  xE1
103E:  MOVFF  FF2,E2
1042:  BCF    FF2.6
1044:  BCF    FF2.7
1046:  MOVLW  14
1048:  MOVWF  FA9
104A:  BCF    FA6.6
104C:  BCF    FA6.7
104E:  BSF    FA6.0
1050:  MOVF   FA8,W
1052:  BTFSC  xE2.6
1054:  BSF    FF2.6
1056:  BTFSC  xE2.7
1058:  BSF    FF2.7
105A:  MOVWF  xE3
105C:  MOVFF  E1,CE
1060:  MOVFF  E3,CD
....................    delay_ms(20); 
1064:  MOVLW  14
1066:  MOVWF  xF7
1068:  RCALL  0BEC
....................    motor=read_eeprom(22); 
106A:  MOVFF  FF2,E0
106E:  BCF    FF2.6
1070:  BCF    FF2.7
1072:  MOVLW  16
1074:  MOVWF  FA9
1076:  BCF    FA6.6
1078:  BCF    FA6.7
107A:  BSF    FA6.0
107C:  MOVF   FA8,W
107E:  BTFSC  xE0.6
1080:  BSF    FF2.6
1082:  BTFSC  xE0.7
1084:  BSF    FF2.7
1086:  MOVWF  44
....................    delay_ms(20); 
1088:  MOVLW  14
108A:  MOVWF  xF7
108C:  RCALL  0BEC
....................    luz=read_eeprom(23); 
108E:  MOVFF  FF2,E0
1092:  BCF    FF2.6
1094:  BCF    FF2.7
1096:  MOVLW  17
1098:  MOVWF  FA9
109A:  BCF    FA6.6
109C:  BCF    FA6.7
109E:  BSF    FA6.0
10A0:  MOVF   FA8,W
10A2:  BTFSC  xE0.6
10A4:  BSF    FF2.6
10A6:  BTFSC  xE0.7
10A8:  BSF    FF2.7
10AA:  MOVWF  45
....................    delay_ms(20); 
10AC:  MOVLW  14
10AE:  MOVWF  xF7
10B0:  RCALL  0BEC
....................    velocidadInicial=read_eeprom(24); 
10B2:  MOVFF  FF2,E0
10B6:  BCF    FF2.6
10B8:  BCF    FF2.7
10BA:  MOVLW  18
10BC:  MOVWF  FA9
10BE:  BCF    FA6.6
10C0:  BCF    FA6.7
10C2:  BSF    FA6.0
10C4:  MOVF   FA8,W
10C6:  BTFSC  xE0.6
10C8:  BSF    FF2.6
10CA:  BTFSC  xE0.7
10CC:  BSF    FF2.7
10CE:  MOVWF  46
....................    delay_ms(20); 
10D0:  MOVLW  14
10D2:  MOVWF  xF7
10D4:  RCALL  0BEC
....................    horas=make16(horasH,horasL); 
10D6:  MOVFF  37,5B
10DA:  MOVFF  36,5A
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
10DE:  MOVFF  3A,3C
10E2:  MOVFF  3B,3D
.................... } 
10E6:  GOTO   2B98 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
1160:  BTFSC  4F.7
1162:  BRA    116A
1164:  MOVF   4F,W
1166:  SUBLW  09
1168:  BNC   1170
116A:  BTFSC  4F.7
116C:  BRA    1170
116E:  BRA    11A2
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
1170:  CLRF   4F
1172:  CLRF   FA9
1174:  CLRF   FA8
1176:  BCF    FA6.6
1178:  BCF    FA6.7
117A:  BSF    FA6.2
117C:  MOVF   FF2,W
117E:  MOVWF  00
1180:  BCF    FF2.6
1182:  BCF    FF2.7
1184:  MOVLB  F
1186:  MOVLW  55
1188:  MOVWF  FA7
118A:  MOVLW  AA
118C:  MOVWF  FA7
118E:  BSF    FA6.1
1190:  BTFSC  FA6.1
1192:  BRA    1190
1194:  BCF    FA6.2
1196:  MOVF   00,W
1198:  IORWF  FF2,F
119A:  MOVLW  14
119C:  MOVLB  0
119E:  MOVWF  xF7
11A0:  RCALL  0BEC
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
11A2:  BTFSC  50.7
11A4:  BRA    11AC
11A6:  MOVF   50,W
11A8:  SUBLW  09
11AA:  BNC   11B2
11AC:  BTFSC  50.7
11AE:  BRA    11B2
11B0:  BRA    11E6
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
11B2:  CLRF   50
11B4:  MOVLW  01
11B6:  MOVWF  FA9
11B8:  CLRF   FA8
11BA:  BCF    FA6.6
11BC:  BCF    FA6.7
11BE:  BSF    FA6.2
11C0:  MOVF   FF2,W
11C2:  MOVWF  00
11C4:  BCF    FF2.6
11C6:  BCF    FF2.7
11C8:  MOVLB  F
11CA:  MOVLW  55
11CC:  MOVWF  FA7
11CE:  MOVLW  AA
11D0:  MOVWF  FA7
11D2:  BSF    FA6.1
11D4:  BTFSC  FA6.1
11D6:  BRA    11D4
11D8:  BCF    FA6.2
11DA:  MOVF   00,W
11DC:  IORWF  FF2,F
11DE:  MOVLW  14
11E0:  MOVLB  0
11E2:  MOVWF  xF7
11E4:  RCALL  0BEC
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
11E6:  BTFSC  51.7
11E8:  BRA    11F0
11EA:  MOVF   51,W
11EC:  SUBLW  09
11EE:  BNC   11F6
11F0:  BTFSC  51.7
11F2:  BRA    11F6
11F4:  BRA    122A
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
11F6:  CLRF   51
11F8:  MOVLW  02
11FA:  MOVWF  FA9
11FC:  CLRF   FA8
11FE:  BCF    FA6.6
1200:  BCF    FA6.7
1202:  BSF    FA6.2
1204:  MOVF   FF2,W
1206:  MOVWF  00
1208:  BCF    FF2.6
120A:  BCF    FF2.7
120C:  MOVLB  F
120E:  MOVLW  55
1210:  MOVWF  FA7
1212:  MOVLW  AA
1214:  MOVWF  FA7
1216:  BSF    FA6.1
1218:  BTFSC  FA6.1
121A:  BRA    1218
121C:  BCF    FA6.2
121E:  MOVF   00,W
1220:  IORWF  FF2,F
1222:  MOVLW  14
1224:  MOVLB  0
1226:  MOVWF  xF7
1228:  RCALL  0BEC
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
122A:  BTFSC  52.7
122C:  BRA    1234
122E:  MOVF   52,W
1230:  SUBLW  09
1232:  BNC   123A
1234:  BTFSC  52.7
1236:  BRA    123A
1238:  BRA    126E
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
123A:  CLRF   52
123C:  MOVLW  03
123E:  MOVWF  FA9
1240:  CLRF   FA8
1242:  BCF    FA6.6
1244:  BCF    FA6.7
1246:  BSF    FA6.2
1248:  MOVF   FF2,W
124A:  MOVWF  00
124C:  BCF    FF2.6
124E:  BCF    FF2.7
1250:  MOVLB  F
1252:  MOVLW  55
1254:  MOVWF  FA7
1256:  MOVLW  AA
1258:  MOVWF  FA7
125A:  BSF    FA6.1
125C:  BTFSC  FA6.1
125E:  BRA    125C
1260:  BCF    FA6.2
1262:  MOVF   00,W
1264:  IORWF  FF2,F
1266:  MOVLW  14
1268:  MOVLB  0
126A:  MOVWF  xF7
126C:  RCALL  0BEC
....................    } 
....................    if(estadoalarma>1){ 
126E:  MOVLW  00
1270:  BTFSC  2A.4
1272:  MOVLW  01
1274:  SUBLW  01
1276:  BC    12AE
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
1278:  BSF    2A.4
127A:  MOVLW  04
127C:  MOVWF  FA9
127E:  MOVLW  01
1280:  MOVWF  FA8
1282:  BCF    FA6.6
1284:  BCF    FA6.7
1286:  BSF    FA6.2
1288:  MOVF   FF2,W
128A:  MOVWF  00
128C:  BCF    FF2.6
128E:  BCF    FF2.7
1290:  MOVLB  F
1292:  MOVLW  55
1294:  MOVWF  FA7
1296:  MOVLW  AA
1298:  MOVWF  FA7
129A:  BSF    FA6.1
129C:  BTFSC  FA6.1
129E:  BRA    129C
12A0:  BCF    FA6.2
12A2:  MOVF   00,W
12A4:  IORWF  FF2,F
12A6:  MOVLW  14
12A8:  MOVLB  0
12AA:  MOVWF  xF7
12AC:  RCALL  0BEC
....................    } 
....................    if(tempo_minutos>200){ 
12AE:  MOVF   3A,W
12B0:  SUBLW  C8
12B2:  BC    12EC
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
12B4:  MOVLW  14
12B6:  MOVWF  3A
12B8:  MOVLW  05
12BA:  MOVWF  FA9
12BC:  MOVLW  14
12BE:  MOVWF  FA8
12C0:  BCF    FA6.6
12C2:  BCF    FA6.7
12C4:  BSF    FA6.2
12C6:  MOVF   FF2,W
12C8:  MOVWF  00
12CA:  BCF    FF2.6
12CC:  BCF    FF2.7
12CE:  MOVLB  F
12D0:  MOVLW  55
12D2:  MOVWF  FA7
12D4:  MOVLW  AA
12D6:  MOVWF  FA7
12D8:  BSF    FA6.1
12DA:  BTFSC  FA6.1
12DC:  BRA    12DA
12DE:  BCF    FA6.2
12E0:  MOVF   00,W
12E2:  IORWF  FF2,F
12E4:  MOVLW  14
12E6:  MOVLB  0
12E8:  MOVWF  xF7
12EA:  RCALL  0BEC
....................    } 
....................    if(tempo_segundos>59){ 
12EC:  MOVF   3B,W
12EE:  SUBLW  3B
12F0:  BC    1326
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
12F2:  CLRF   3B
12F4:  MOVLW  06
12F6:  MOVWF  FA9
12F8:  CLRF   FA8
12FA:  BCF    FA6.6
12FC:  BCF    FA6.7
12FE:  BSF    FA6.2
1300:  MOVF   FF2,W
1302:  MOVWF  00
1304:  BCF    FF2.6
1306:  BCF    FF2.7
1308:  MOVLB  F
130A:  MOVLW  55
130C:  MOVWF  FA7
130E:  MOVLW  AA
1310:  MOVWF  FA7
1312:  BSF    FA6.1
1314:  BTFSC  FA6.1
1316:  BRA    1314
1318:  BCF    FA6.2
131A:  MOVF   00,W
131C:  IORWF  FF2,F
131E:  MOVLW  14
1320:  MOVLB  0
1322:  MOVWF  xF7
1324:  RCALL  0BEC
....................    } 
....................    if(segundos>60){ 
1326:  MOVF   34,W
1328:  SUBLW  3C
132A:  BC    1360
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
132C:  CLRF   34
132E:  MOVLW  07
1330:  MOVWF  FA9
1332:  CLRF   FA8
1334:  BCF    FA6.6
1336:  BCF    FA6.7
1338:  BSF    FA6.2
133A:  MOVF   FF2,W
133C:  MOVWF  00
133E:  BCF    FF2.6
1340:  BCF    FF2.7
1342:  MOVLB  F
1344:  MOVLW  55
1346:  MOVWF  FA7
1348:  MOVLW  AA
134A:  MOVWF  FA7
134C:  BSF    FA6.1
134E:  BTFSC  FA6.1
1350:  BRA    134E
1352:  BCF    FA6.2
1354:  MOVF   00,W
1356:  IORWF  FF2,F
1358:  MOVLW  14
135A:  MOVLB  0
135C:  MOVWF  xF7
135E:  RCALL  0BEC
....................    } 
....................    if(minutos>60){ 
1360:  MOVF   35,W
1362:  SUBLW  3C
1364:  BC    139A
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
1366:  CLRF   35
1368:  MOVLW  08
136A:  MOVWF  FA9
136C:  CLRF   FA8
136E:  BCF    FA6.6
1370:  BCF    FA6.7
1372:  BSF    FA6.2
1374:  MOVF   FF2,W
1376:  MOVWF  00
1378:  BCF    FF2.6
137A:  BCF    FF2.7
137C:  MOVLB  F
137E:  MOVLW  55
1380:  MOVWF  FA7
1382:  MOVLW  AA
1384:  MOVWF  FA7
1386:  BSF    FA6.1
1388:  BTFSC  FA6.1
138A:  BRA    1388
138C:  BCF    FA6.2
138E:  MOVF   00,W
1390:  IORWF  FF2,F
1392:  MOVLW  14
1394:  MOVLB  0
1396:  MOVWF  xF7
1398:  RCALL  0BEC
....................    } 
....................    if(horas>10000){ 
139A:  MOVF   5B,W
139C:  SUBLW  26
139E:  BC    1416
13A0:  XORLW  FF
13A2:  BNZ   13AA
13A4:  MOVF   5A,W
13A6:  SUBLW  10
13A8:  BC    1416
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
13AA:  CLRF   5B
13AC:  CLRF   5A
13AE:  MOVLW  09
13B0:  MOVWF  FA9
13B2:  MOVLW  0A
13B4:  MOVWF  FA8
13B6:  BCF    FA6.6
13B8:  BCF    FA6.7
13BA:  BSF    FA6.2
13BC:  MOVF   FF2,W
13BE:  MOVWF  00
13C0:  BCF    FF2.6
13C2:  BCF    FF2.7
13C4:  MOVLB  F
13C6:  MOVLW  55
13C8:  MOVWF  FA7
13CA:  MOVLW  AA
13CC:  MOVWF  FA7
13CE:  BSF    FA6.1
13D0:  BTFSC  FA6.1
13D2:  BRA    13D0
13D4:  BCF    FA6.2
13D6:  MOVF   00,W
13D8:  IORWF  FF2,F
13DA:  MOVLW  14
13DC:  MOVLB  0
13DE:  MOVWF  xF7
13E0:  RCALL  0BEC
13E2:  MOVLW  0A
13E4:  MOVWF  FA9
13E6:  CLRF   FA8
13E8:  BCF    FA6.6
13EA:  BCF    FA6.7
13EC:  BSF    FA6.2
13EE:  MOVF   FF2,W
13F0:  MOVWF  00
13F2:  BCF    FF2.6
13F4:  BCF    FF2.7
13F6:  MOVLB  F
13F8:  MOVLW  55
13FA:  MOVWF  FA7
13FC:  MOVLW  AA
13FE:  MOVWF  FA7
1400:  BSF    FA6.1
1402:  BTFSC  FA6.1
1404:  BRA    1402
1406:  BCF    FA6.2
1408:  MOVF   00,W
140A:  IORWF  FF2,F
140C:  MOVLW  14
140E:  MOVLB  0
1410:  MOVWF  xF7
1412:  CALL   0BEC
....................    } 
....................    if(G<150 || G>300){ 
1416:  MOVFF  C1,F7
141A:  MOVFF  C0,F6
141E:  MOVFF  BF,F5
1422:  MOVFF  BE,F4
1426:  CLRF   xFB
1428:  CLRF   xFA
142A:  MOVLW  16
142C:  MOVWF  xF9
142E:  MOVLW  86
1430:  MOVWF  xF8
1432:  RCALL  10EA
1434:  BC    1456
1436:  CLRF   xF7
1438:  CLRF   xF6
143A:  MOVLW  16
143C:  MOVWF  xF5
143E:  MOVLW  87
1440:  MOVWF  xF4
1442:  MOVFF  C1,FB
1446:  MOVFF  C0,FA
144A:  MOVFF  BF,F9
144E:  MOVFF  BE,F8
1452:  RCALL  10EA
1454:  BNC   14CC
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
1456:  CLRF   xC1
1458:  CLRF   xC0
145A:  MOVLW  5C
145C:  MOVWF  xBF
145E:  MOVLW  86
1460:  MOVWF  xBE
1462:  MOVLW  0B
1464:  MOVWF  FA9
1466:  MOVLW  DC
1468:  MOVWF  FA8
146A:  BCF    FA6.6
146C:  BCF    FA6.7
146E:  BSF    FA6.2
1470:  MOVF   FF2,W
1472:  MOVWF  00
1474:  BCF    FF2.6
1476:  BCF    FF2.7
1478:  MOVLB  F
147A:  MOVLW  55
147C:  MOVWF  FA7
147E:  MOVLW  AA
1480:  MOVWF  FA7
1482:  BSF    FA6.1
1484:  BTFSC  FA6.1
1486:  BRA    1484
1488:  BCF    FA6.2
148A:  MOVF   00,W
148C:  IORWF  FF2,F
148E:  MOVLW  14
1490:  MOVLB  0
1492:  MOVWF  xF7
1494:  CALL   0BEC
1498:  MOVLW  0C
149A:  MOVWF  FA9
149C:  CLRF   FA8
149E:  BCF    FA6.6
14A0:  BCF    FA6.7
14A2:  BSF    FA6.2
14A4:  MOVF   FF2,W
14A6:  MOVWF  00
14A8:  BCF    FF2.6
14AA:  BCF    FF2.7
14AC:  MOVLB  F
14AE:  MOVLW  55
14B0:  MOVWF  FA7
14B2:  MOVLW  AA
14B4:  MOVWF  FA7
14B6:  BSF    FA6.1
14B8:  BTFSC  FA6.1
14BA:  BRA    14B8
14BC:  BCF    FA6.2
14BE:  MOVF   00,W
14C0:  IORWF  FF2,F
14C2:  MOVLW  14
14C4:  MOVLB  0
14C6:  MOVWF  xF7
14C8:  CALL   0BEC
....................    } 
....................    if(Vel1>20 || Vel1<1){ 
14CC:  MOVF   57,W
14CE:  SUBLW  14
14D0:  BNC   14D6
14D2:  MOVF   57,F
14D4:  BNZ   1510
....................       Vel1=10;write_eeprom(13,10);delay_ms(20); 
14D6:  MOVLW  0A
14D8:  MOVWF  57
14DA:  MOVLW  0D
14DC:  MOVWF  FA9
14DE:  MOVLW  0A
14E0:  MOVWF  FA8
14E2:  BCF    FA6.6
14E4:  BCF    FA6.7
14E6:  BSF    FA6.2
14E8:  MOVF   FF2,W
14EA:  MOVWF  00
14EC:  BCF    FF2.6
14EE:  BCF    FF2.7
14F0:  MOVLB  F
14F2:  MOVLW  55
14F4:  MOVWF  FA7
14F6:  MOVLW  AA
14F8:  MOVWF  FA7
14FA:  BSF    FA6.1
14FC:  BTFSC  FA6.1
14FE:  BRA    14FC
1500:  BCF    FA6.2
1502:  MOVF   00,W
1504:  IORWF  FF2,F
1506:  MOVLW  14
1508:  MOVLB  0
150A:  MOVWF  xF7
150C:  CALL   0BEC
....................    } 
....................    if(horasTrabajo>60000){ 
1510:  MOVF   xD0,W
1512:  SUBLW  E9
1514:  BC    158C
1516:  XORLW  FF
1518:  BNZ   1520
151A:  MOVF   xCF,W
151C:  SUBLW  60
151E:  BC    158C
....................       horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
1520:  CLRF   xD0
1522:  CLRF   xCF
1524:  MOVLW  13
1526:  MOVWF  FA9
1528:  CLRF   FA8
152A:  BCF    FA6.6
152C:  BCF    FA6.7
152E:  BSF    FA6.2
1530:  MOVF   FF2,W
1532:  MOVWF  00
1534:  BCF    FF2.6
1536:  BCF    FF2.7
1538:  MOVLB  F
153A:  MOVLW  55
153C:  MOVWF  FA7
153E:  MOVLW  AA
1540:  MOVWF  FA7
1542:  BSF    FA6.1
1544:  BTFSC  FA6.1
1546:  BRA    1544
1548:  BCF    FA6.2
154A:  MOVF   00,W
154C:  IORWF  FF2,F
154E:  MOVLW  14
1550:  MOVLB  0
1552:  MOVWF  xF7
1554:  CALL   0BEC
1558:  MOVLW  12
155A:  MOVWF  FA9
155C:  CLRF   FA8
155E:  BCF    FA6.6
1560:  BCF    FA6.7
1562:  BSF    FA6.2
1564:  MOVF   FF2,W
1566:  MOVWF  00
1568:  BCF    FF2.6
156A:  BCF    FF2.7
156C:  MOVLB  F
156E:  MOVLW  55
1570:  MOVWF  FA7
1572:  MOVLW  AA
1574:  MOVWF  FA7
1576:  BSF    FA6.1
1578:  BTFSC  FA6.1
157A:  BRA    1578
157C:  BCF    FA6.2
157E:  MOVF   00,W
1580:  IORWF  FF2,F
1582:  MOVLW  14
1584:  MOVLB  0
1586:  MOVWF  xF7
1588:  CALL   0BEC
....................    } 
....................    if(segundosTrabajo>3600){ 
158C:  MOVF   xCE,W
158E:  SUBLW  0D
1590:  BC    1608
1592:  XORLW  FF
1594:  BNZ   159C
1596:  MOVF   xCD,W
1598:  SUBLW  10
159A:  BC    1608
....................       segundosTrabajo=0;write_eeprom(20,0);delay_ms(20);write_eeprom(21,0);delay_ms(20); 
159C:  CLRF   xCE
159E:  CLRF   xCD
15A0:  MOVLW  14
15A2:  MOVWF  FA9
15A4:  CLRF   FA8
15A6:  BCF    FA6.6
15A8:  BCF    FA6.7
15AA:  BSF    FA6.2
15AC:  MOVF   FF2,W
15AE:  MOVWF  00
15B0:  BCF    FF2.6
15B2:  BCF    FF2.7
15B4:  MOVLB  F
15B6:  MOVLW  55
15B8:  MOVWF  FA7
15BA:  MOVLW  AA
15BC:  MOVWF  FA7
15BE:  BSF    FA6.1
15C0:  BTFSC  FA6.1
15C2:  BRA    15C0
15C4:  BCF    FA6.2
15C6:  MOVF   00,W
15C8:  IORWF  FF2,F
15CA:  MOVLW  14
15CC:  MOVLB  0
15CE:  MOVWF  xF7
15D0:  CALL   0BEC
15D4:  MOVLW  15
15D6:  MOVWF  FA9
15D8:  CLRF   FA8
15DA:  BCF    FA6.6
15DC:  BCF    FA6.7
15DE:  BSF    FA6.2
15E0:  MOVF   FF2,W
15E2:  MOVWF  00
15E4:  BCF    FF2.6
15E6:  BCF    FF2.7
15E8:  MOVLB  F
15EA:  MOVLW  55
15EC:  MOVWF  FA7
15EE:  MOVLW  AA
15F0:  MOVWF  FA7
15F2:  BSF    FA6.1
15F4:  BTFSC  FA6.1
15F6:  BRA    15F4
15F8:  BCF    FA6.2
15FA:  MOVF   00,W
15FC:  IORWF  FF2,F
15FE:  MOVLW  14
1600:  MOVLB  0
1602:  MOVWF  xF7
1604:  CALL   0BEC
....................    } 
....................    if(motor>1){ 
1608:  MOVF   44,W
160A:  SUBLW  01
160C:  BC    1648
....................       motor=1;write_eeprom(22,1);delay_ms(20); 
160E:  MOVLW  01
1610:  MOVWF  44
1612:  MOVLW  16
1614:  MOVWF  FA9
1616:  MOVLW  01
1618:  MOVWF  FA8
161A:  BCF    FA6.6
161C:  BCF    FA6.7
161E:  BSF    FA6.2
1620:  MOVF   FF2,W
1622:  MOVWF  00
1624:  BCF    FF2.6
1626:  BCF    FF2.7
1628:  MOVLB  F
162A:  MOVLW  55
162C:  MOVWF  FA7
162E:  MOVLW  AA
1630:  MOVWF  FA7
1632:  BSF    FA6.1
1634:  BTFSC  FA6.1
1636:  BRA    1634
1638:  BCF    FA6.2
163A:  MOVF   00,W
163C:  IORWF  FF2,F
163E:  MOVLW  14
1640:  MOVLB  0
1642:  MOVWF  xF7
1644:  CALL   0BEC
....................    } 
....................    if(luz>1){ 
1648:  MOVF   45,W
164A:  SUBLW  01
164C:  BC    1688
....................       luz=1;write_eeprom(23,1);delay_ms(20); 
164E:  MOVLW  01
1650:  MOVWF  45
1652:  MOVLW  17
1654:  MOVWF  FA9
1656:  MOVLW  01
1658:  MOVWF  FA8
165A:  BCF    FA6.6
165C:  BCF    FA6.7
165E:  BSF    FA6.2
1660:  MOVF   FF2,W
1662:  MOVWF  00
1664:  BCF    FF2.6
1666:  BCF    FF2.7
1668:  MOVLB  F
166A:  MOVLW  55
166C:  MOVWF  FA7
166E:  MOVLW  AA
1670:  MOVWF  FA7
1672:  BSF    FA6.1
1674:  BTFSC  FA6.1
1676:  BRA    1674
1678:  BCF    FA6.2
167A:  MOVF   00,W
167C:  IORWF  FF2,F
167E:  MOVLW  14
1680:  MOVLB  0
1682:  MOVWF  xF7
1684:  CALL   0BEC
....................    } 
....................    if(velocidadInicial>15){ 
1688:  MOVF   46,W
168A:  SUBLW  0F
168C:  BC    16C8
....................       velocidadInicial=10;write_eeprom(24,10);delay_ms(20); 
168E:  MOVLW  0A
1690:  MOVWF  46
1692:  MOVLW  18
1694:  MOVWF  FA9
1696:  MOVLW  0A
1698:  MOVWF  FA8
169A:  BCF    FA6.6
169C:  BCF    FA6.7
169E:  BSF    FA6.2
16A0:  MOVF   FF2,W
16A2:  MOVWF  00
16A4:  BCF    FF2.6
16A6:  BCF    FF2.7
16A8:  MOVLB  F
16AA:  MOVLW  55
16AC:  MOVWF  FA7
16AE:  MOVLW  AA
16B0:  MOVWF  FA7
16B2:  BSF    FA6.1
16B4:  BTFSC  FA6.1
16B6:  BRA    16B4
16B8:  BCF    FA6.2
16BA:  MOVF   00,W
16BC:  IORWF  FF2,F
16BE:  MOVLW  14
16C0:  MOVLB  0
16C2:  MOVWF  xF7
16C4:  CALL   0BEC
....................    } 
.................... } 
16C8:  GOTO   2B9C (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
....................    if(VIDRIOUUP || !VIDRIODN){ 
....................       O1_on;O2_off; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoBajar=OFF; 
....................    } 
.................... } 
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
....................    if(!VIDRIOUUP || VIDRIODN){ 
....................       O1_off;O2_on; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoSubir=OFF; 
....................    } 
.................... } 
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
.................... } 
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
.................... void cuentaTiempoTrabajoFiltro(){ 
....................    //**Contador de Tiempo de Trabajo del filtro**// 
....................    if(segundosTrabajo>=3600){ // Tiempo de Trabajo 
*
1982:  MOVF   xCE,W
1984:  SUBLW  0D
1986:  BTFSC  FD8.0
1988:  BRA    1A92
198A:  XORLW  FF
198C:  BNZ   1996
198E:  MOVF   xCD,W
1990:  SUBLW  0F
1992:  BTFSC  FD8.0
1994:  BRA    1A92
....................       segundosTrabajo=0; //Minutos Trabajo realmente son segundos. 
1996:  CLRF   xCE
1998:  CLRF   xCD
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
199A:  MOVFF  CD,E0
199E:  MOVLW  14
19A0:  MOVWF  FA9
19A2:  MOVFF  E0,FA8
19A6:  BCF    FA6.6
19A8:  BCF    FA6.7
19AA:  BSF    FA6.2
19AC:  MOVF   FF2,W
19AE:  MOVWF  00
19B0:  BCF    FF2.6
19B2:  BCF    FF2.7
19B4:  MOVLB  F
19B6:  MOVLW  55
19B8:  MOVWF  FA7
19BA:  MOVLW  AA
19BC:  MOVWF  FA7
19BE:  BSF    FA6.1
19C0:  BTFSC  FA6.1
19C2:  BRA    19C0
19C4:  BCF    FA6.2
19C6:  MOVF   00,W
19C8:  IORWF  FF2,F
....................       delay_ms(20); 
19CA:  MOVLW  14
19CC:  MOVLB  0
19CE:  MOVWF  xF7
19D0:  CALL   0BEC
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
19D4:  MOVFF  CE,E0
19D8:  MOVLW  15
19DA:  MOVWF  FA9
19DC:  MOVFF  E0,FA8
19E0:  BCF    FA6.6
19E2:  BCF    FA6.7
19E4:  BSF    FA6.2
19E6:  MOVF   FF2,W
19E8:  MOVWF  00
19EA:  BCF    FF2.6
19EC:  BCF    FF2.7
19EE:  MOVLB  F
19F0:  MOVLW  55
19F2:  MOVWF  FA7
19F4:  MOVLW  AA
19F6:  MOVWF  FA7
19F8:  BSF    FA6.1
19FA:  BTFSC  FA6.1
19FC:  BRA    19FA
19FE:  BCF    FA6.2
1A00:  MOVF   00,W
1A02:  IORWF  FF2,F
....................       delay_ms(20); 
1A04:  MOVLW  14
1A06:  MOVLB  0
1A08:  MOVWF  xF7
1A0A:  CALL   0BEC
....................       horasTrabajo++; 
1A0E:  INCF   xCF,F
1A10:  BTFSC  FD8.2
1A12:  INCF   xD0,F
....................       write_eeprom(18,make8(horasTrabajo,0)); 
1A14:  MOVFF  CF,E0
1A18:  MOVLW  12
1A1A:  MOVWF  FA9
1A1C:  MOVFF  E0,FA8
1A20:  BCF    FA6.6
1A22:  BCF    FA6.7
1A24:  BSF    FA6.2
1A26:  MOVF   FF2,W
1A28:  MOVWF  00
1A2A:  BCF    FF2.6
1A2C:  BCF    FF2.7
1A2E:  MOVLB  F
1A30:  MOVLW  55
1A32:  MOVWF  FA7
1A34:  MOVLW  AA
1A36:  MOVWF  FA7
1A38:  BSF    FA6.1
1A3A:  BTFSC  FA6.1
1A3C:  BRA    1A3A
1A3E:  BCF    FA6.2
1A40:  MOVF   00,W
1A42:  IORWF  FF2,F
....................       delay_ms(20); 
1A44:  MOVLW  14
1A46:  MOVLB  0
1A48:  MOVWF  xF7
1A4A:  CALL   0BEC
....................       write_eeprom(19,make8(horasTrabajo,1)); 
1A4E:  MOVFF  D0,E0
1A52:  MOVLW  13
1A54:  MOVWF  FA9
1A56:  MOVFF  E0,FA8
1A5A:  BCF    FA6.6
1A5C:  BCF    FA6.7
1A5E:  BSF    FA6.2
1A60:  MOVF   FF2,W
1A62:  MOVWF  00
1A64:  BCF    FF2.6
1A66:  BCF    FF2.7
1A68:  MOVLB  F
1A6A:  MOVLW  55
1A6C:  MOVWF  FA7
1A6E:  MOVLW  AA
1A70:  MOVWF  FA7
1A72:  BSF    FA6.1
1A74:  BTFSC  FA6.1
1A76:  BRA    1A74
1A78:  BCF    FA6.2
1A7A:  MOVF   00,W
1A7C:  IORWF  FF2,F
....................       delay_ms(20); 
1A7E:  MOVLW  14
1A80:  MOVLB  0
1A82:  MOVWF  xF7
1A84:  CALL   0BEC
....................       delay_ms(20); 
1A88:  MOVLW  14
1A8A:  MOVWF  xF7
1A8C:  CALL   0BEC
....................    }else if(segundosTrabajo==900 || segundosTrabajo==1800 || segundosTrabajo==2700 ){ 
1A90:  BRA    1B2A
1A92:  MOVF   xCD,W
1A94:  SUBLW  84
1A96:  BNZ   1A9E
1A98:  MOVF   xCE,W
1A9A:  SUBLW  03
1A9C:  BZ    1AB6
1A9E:  MOVF   xCD,W
1AA0:  SUBLW  08
1AA2:  BNZ   1AAA
1AA4:  MOVF   xCE,W
1AA6:  SUBLW  07
1AA8:  BZ    1AB6
1AAA:  MOVF   xCD,W
1AAC:  SUBLW  8C
1AAE:  BNZ   1B2A
1AB0:  MOVF   xCE,W
1AB2:  SUBLW  0A
1AB4:  BNZ   1B2A
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
1AB6:  MOVFF  CD,E0
1ABA:  MOVLW  14
1ABC:  MOVWF  FA9
1ABE:  MOVFF  E0,FA8
1AC2:  BCF    FA6.6
1AC4:  BCF    FA6.7
1AC6:  BSF    FA6.2
1AC8:  MOVF   FF2,W
1ACA:  MOVWF  00
1ACC:  BCF    FF2.6
1ACE:  BCF    FF2.7
1AD0:  MOVLB  F
1AD2:  MOVLW  55
1AD4:  MOVWF  FA7
1AD6:  MOVLW  AA
1AD8:  MOVWF  FA7
1ADA:  BSF    FA6.1
1ADC:  BTFSC  FA6.1
1ADE:  BRA    1ADC
1AE0:  BCF    FA6.2
1AE2:  MOVF   00,W
1AE4:  IORWF  FF2,F
....................       delay_ms(20); 
1AE6:  MOVLW  14
1AE8:  MOVLB  0
1AEA:  MOVWF  xF7
1AEC:  CALL   0BEC
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
1AF0:  MOVFF  CE,E0
1AF4:  MOVLW  15
1AF6:  MOVWF  FA9
1AF8:  MOVFF  E0,FA8
1AFC:  BCF    FA6.6
1AFE:  BCF    FA6.7
1B00:  BSF    FA6.2
1B02:  MOVF   FF2,W
1B04:  MOVWF  00
1B06:  BCF    FF2.6
1B08:  BCF    FF2.7
1B0A:  MOVLB  F
1B0C:  MOVLW  55
1B0E:  MOVWF  FA7
1B10:  MOVLW  AA
1B12:  MOVWF  FA7
1B14:  BSF    FA6.1
1B16:  BTFSC  FA6.1
1B18:  BRA    1B16
1B1A:  BCF    FA6.2
1B1C:  MOVF   00,W
1B1E:  IORWF  FF2,F
....................       delay_ms(20); 
1B20:  MOVLW  14
1B22:  MOVLB  0
1B24:  MOVWF  xF7
1B26:  CALL   0BEC
....................    } 
.................... //----------------------------------------// 
.................... } 
1B2A:  GOTO   2F26 (RETURN)
....................  
.................... void clearSalidasSinUsar(){ 
....................    output_bit(PIN_A3,0); 
....................    //output_bit(PIN_C3,0);//Solo para PIC Diferente a 18F4550 
....................    //output_bit(PIN_C4,0); 
....................    //output_bit(PIN_C5,0); 
....................    output_bit(PIN_C6,0); 
....................    output_bit(PIN_C7,0); 
....................    output_bit(PIN_B5,0); 
.................... }  
....................  
....................  
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
0248:  BSF    xC2.1
....................     
....................    if(VelMotor==19){ 
024A:  MOVF   xD1,W
024C:  SUBLW  13
024E:  BNZ   0260
....................       set_timer0(232);       
0250:  CLRF   FD7
0252:  MOVLW  E8
0254:  MOVWF  FD6
....................       Motor_off;  
0256:  BCF    F8B.2
0258:  BCF    F94.2
....................       Motor2_off;  
025A:  BCF    F8B.1
025C:  BCF    F94.1
....................    }else if(VelMotor==18){ 
025E:  BRA    03E8
0260:  MOVF   xD1,W
0262:  SUBLW  12
0264:  BNZ   0276
....................       set_timer0(228);       
0266:  CLRF   FD7
0268:  MOVLW  E4
026A:  MOVWF  FD6
....................       Motor_off;  
026C:  BCF    F8B.2
026E:  BCF    F94.2
....................       Motor2_off;  
0270:  BCF    F8B.1
0272:  BCF    F94.1
....................    }else if(VelMotor==17){ 
0274:  BRA    03E8
0276:  MOVF   xD1,W
0278:  SUBLW  11
027A:  BNZ   028C
....................       set_timer0(224);       
027C:  CLRF   FD7
027E:  MOVLW  E0
0280:  MOVWF  FD6
....................       Motor_off;  
0282:  BCF    F8B.2
0284:  BCF    F94.2
....................       Motor2_off;  
0286:  BCF    F8B.1
0288:  BCF    F94.1
....................    }else if(VelMotor==16){ 
028A:  BRA    03E8
028C:  MOVF   xD1,W
028E:  SUBLW  10
0290:  BNZ   02A2
....................       set_timer0(220); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
0292:  CLRF   FD7
0294:  MOVLW  DC
0296:  MOVWF  FD6
....................       Motor_off;  
0298:  BCF    F8B.2
029A:  BCF    F94.2
....................       Motor2_off;  
029C:  BCF    F8B.1
029E:  BCF    F94.1
....................    }else if(VelMotor==15){ 
02A0:  BRA    03E8
02A2:  MOVF   xD1,W
02A4:  SUBLW  0F
02A6:  BNZ   02B8
....................       set_timer0(216);       
02A8:  CLRF   FD7
02AA:  MOVLW  D8
02AC:  MOVWF  FD6
....................       Motor_off;  
02AE:  BCF    F8B.2
02B0:  BCF    F94.2
....................       Motor2_off;  
02B2:  BCF    F8B.1
02B4:  BCF    F94.1
....................    }else if(VelMotor==14){ 
02B6:  BRA    03E8
02B8:  MOVF   xD1,W
02BA:  SUBLW  0E
02BC:  BNZ   02CE
....................       set_timer0(212);       
02BE:  CLRF   FD7
02C0:  MOVLW  D4
02C2:  MOVWF  FD6
....................       Motor_off;  
02C4:  BCF    F8B.2
02C6:  BCF    F94.2
....................       Motor2_off;  
02C8:  BCF    F8B.1
02CA:  BCF    F94.1
....................    }else if(VelMotor==13){ 
02CC:  BRA    03E8
02CE:  MOVF   xD1,W
02D0:  SUBLW  0D
02D2:  BNZ   02E4
....................       set_timer0(208);       
02D4:  CLRF   FD7
02D6:  MOVLW  D0
02D8:  MOVWF  FD6
....................       Motor_off;  
02DA:  BCF    F8B.2
02DC:  BCF    F94.2
....................       Motor2_off;  
02DE:  BCF    F8B.1
02E0:  BCF    F94.1
....................    }else if(VelMotor==12){ 
02E2:  BRA    03E8
02E4:  MOVF   xD1,W
02E6:  SUBLW  0C
02E8:  BNZ   02FA
....................       set_timer0(204);       
02EA:  CLRF   FD7
02EC:  MOVLW  CC
02EE:  MOVWF  FD6
....................       Motor_off;  
02F0:  BCF    F8B.2
02F2:  BCF    F94.2
....................       Motor2_off;  
02F4:  BCF    F8B.1
02F6:  BCF    F94.1
....................    }else if(VelMotor==11){ 
02F8:  BRA    03E8
02FA:  MOVF   xD1,W
02FC:  SUBLW  0B
02FE:  BNZ   0310
....................       set_timer0(200);       
0300:  CLRF   FD7
0302:  MOVLW  C8
0304:  MOVWF  FD6
....................       Motor_off;  
0306:  BCF    F8B.2
0308:  BCF    F94.2
....................       Motor2_off;  
030A:  BCF    F8B.1
030C:  BCF    F94.1
....................    }else if(VelMotor==10){ 
030E:  BRA    03E8
0310:  MOVF   xD1,W
0312:  SUBLW  0A
0314:  BNZ   0326
....................       set_timer0(196);       
0316:  CLRF   FD7
0318:  MOVLW  C4
031A:  MOVWF  FD6
....................       Motor_off;  
031C:  BCF    F8B.2
031E:  BCF    F94.2
....................       Motor2_off;  
0320:  BCF    F8B.1
0322:  BCF    F94.1
....................    }else if(VelMotor==9){ 
0324:  BRA    03E8
0326:  MOVF   xD1,W
0328:  SUBLW  09
032A:  BNZ   033C
....................       set_timer0(192);       
032C:  CLRF   FD7
032E:  MOVLW  C0
0330:  MOVWF  FD6
....................       Motor_off;  
0332:  BCF    F8B.2
0334:  BCF    F94.2
....................       Motor2_off;  
0336:  BCF    F8B.1
0338:  BCF    F94.1
....................    }else if(VelMotor==8){ 
033A:  BRA    03E8
033C:  MOVF   xD1,W
033E:  SUBLW  08
0340:  BNZ   0352
....................       set_timer0(188);       
0342:  CLRF   FD7
0344:  MOVLW  BC
0346:  MOVWF  FD6
....................       Motor_off;  
0348:  BCF    F8B.2
034A:  BCF    F94.2
....................       Motor2_off;  
034C:  BCF    F8B.1
034E:  BCF    F94.1
....................    }else if(VelMotor==7){ 
0350:  BRA    03E8
0352:  MOVF   xD1,W
0354:  SUBLW  07
0356:  BNZ   0368
....................       set_timer0(184);       
0358:  CLRF   FD7
035A:  MOVLW  B8
035C:  MOVWF  FD6
....................       Motor_off;  
035E:  BCF    F8B.2
0360:  BCF    F94.2
....................       Motor2_off;  
0362:  BCF    F8B.1
0364:  BCF    F94.1
....................    }else if(VelMotor==6){ 
0366:  BRA    03E8
0368:  MOVF   xD1,W
036A:  SUBLW  06
036C:  BNZ   037E
....................       set_timer0(180);       
036E:  CLRF   FD7
0370:  MOVLW  B4
0372:  MOVWF  FD6
....................       Motor_off;  
0374:  BCF    F8B.2
0376:  BCF    F94.2
....................       Motor2_off;  
0378:  BCF    F8B.1
037A:  BCF    F94.1
....................    }else if(VelMotor==5){ 
037C:  BRA    03E8
037E:  MOVF   xD1,W
0380:  SUBLW  05
0382:  BNZ   0394
....................       set_timer0(176);       
0384:  CLRF   FD7
0386:  MOVLW  B0
0388:  MOVWF  FD6
....................       Motor_off;  
038A:  BCF    F8B.2
038C:  BCF    F94.2
....................       Motor2_off;  
038E:  BCF    F8B.1
0390:  BCF    F94.1
....................    }else if(VelMotor==4){ 
0392:  BRA    03E8
0394:  MOVF   xD1,W
0396:  SUBLW  04
0398:  BNZ   03AA
....................       set_timer0(172);       
039A:  CLRF   FD7
039C:  MOVLW  AC
039E:  MOVWF  FD6
....................       Motor_off;  
03A0:  BCF    F8B.2
03A2:  BCF    F94.2
....................       Motor2_off;  
03A4:  BCF    F8B.1
03A6:  BCF    F94.1
....................    }else if(VelMotor==3){ 
03A8:  BRA    03E8
03AA:  MOVF   xD1,W
03AC:  SUBLW  03
03AE:  BNZ   03C0
....................       set_timer0(168); 
03B0:  CLRF   FD7
03B2:  MOVLW  A8
03B4:  MOVWF  FD6
....................       Motor_off;  
03B6:  BCF    F8B.2
03B8:  BCF    F94.2
....................       Motor2_off;  
03BA:  BCF    F8B.1
03BC:  BCF    F94.1
....................    }else if(VelMotor==2){ 
03BE:  BRA    03E8
03C0:  MOVF   xD1,W
03C2:  SUBLW  02
03C4:  BNZ   03D6
....................       set_timer0(164); 
03C6:  CLRF   FD7
03C8:  MOVLW  A4
03CA:  MOVWF  FD6
....................       Motor_off;  
03CC:  BCF    F8B.2
03CE:  BCF    F94.2
....................       Motor2_off;  
03D0:  BCF    F8B.1
03D2:  BCF    F94.1
....................    }else if(VelMotor==1){ 
03D4:  BRA    03E8
03D6:  DECFSZ xD1,W
03D8:  BRA    03E8
....................       set_timer0(160); 
03DA:  CLRF   FD7
03DC:  MOVLW  A0
03DE:  MOVWF  FD6
....................       Motor_off;  
03E0:  BCF    F8B.2
03E2:  BCF    F94.2
....................       Motor2_off;  
03E4:  BCF    F8B.1
03E6:  BCF    F94.1
....................    } 
....................    pulsos++;    
03E8:  INCF   xC3,F
03EA:  BTFSC  FD8.2
03EC:  INCF   xC4,F
.................... } 
....................  
03EE:  BCF    FF2.1
03F0:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<20){ 
03F4:  MOVF   xD1,F
03F6:  BZ    0420
03F8:  MOVF   xD1,W
03FA:  SUBLW  13
03FC:  BNC   0420
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
03FE:  BTFSS  xC2.1
0400:  BRA    0414
....................       Motor_on; 
0402:  BSF    F8B.2
0404:  BCF    F94.2
....................       Motor2_on;  
0406:  BSF    F8B.1
0408:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
040A:  CLRF   FD7
040C:  MOVLW  FD
040E:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
0410:  BCF    xC2.1
....................    } else {            //The triac has been triggered, cut the pulse 
0412:  BRA    0420
....................       Motor_off; 
0414:  BCF    F8B.2
0416:  BCF    F94.2
....................       Motor2_off;  
0418:  BCF    F8B.1
041A:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
041C:  CLRF   FD7
041E:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
.................... //#int_TIMER2 
0420:  BCF    FF2.2
0422:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer2(231);//100.25uS 
....................    set_timer1(45536);//5ms 
0426:  MOVLW  B1
0428:  MOVWF  FCF
042A:  MOVLW  E0
042C:  MOVWF  FCE
....................    tiempos++; 
042E:  INCF   58,F
0430:  BTFSC  FD8.2
0432:  INCF   59,F
....................    if(UP) 
0434:  BSF    F92.5
0436:  BTFSC  F80.5
0438:  BRA    0442
....................          tup++; 
043A:  INCF   xC5,F
043C:  BTFSC  FD8.2
043E:  INCF   xC6,F
....................       else 
0440:  BRA    0446
....................          tup=0; 
0442:  CLRF   xC6
0444:  CLRF   xC5
....................           
....................       if(DOWN) 
0446:  BSF    F96.0
0448:  BTFSC  F84.0
044A:  BRA    0454
....................          tdown++; 
044C:  INCF   xC7,F
044E:  BTFSC  FD8.2
0450:  INCF   xC8,F
....................       else 
0452:  BRA    0458
....................          tdown=0; 
0454:  CLRF   xC8
0456:  CLRF   xC7
....................           
....................       if(RIGHT) 
0458:  BSF    F96.1
045A:  BTFSC  F84.1
045C:  BRA    0466
....................          tright++; 
045E:  INCF   xC9,F
0460:  BTFSC  FD8.2
0462:  INCF   xCA,F
....................       else 
0464:  BRA    046A
....................          tright=0; 
0466:  CLRF   xCA
0468:  CLRF   xC9
....................        
....................       if(IZQU) 
046A:  BSF    F96.2
046C:  BTFSC  F84.2
046E:  BRA    0478
....................          tleft++; 
0470:  INCF   xCB,F
0472:  BTFSC  FD8.2
0474:  INCF   xCC,F
....................       else 
0476:  BRA    047C
....................          tleft=0; 
0478:  CLRF   xCC
047A:  CLRF   xCB
....................      
....................    //if(tiempos>=10000){ 
....................    //if(tiempos>=9710){//1s 
....................    if(tiempos>=200){//1s 
047C:  MOVF   59,F
047E:  BNZ   0486
0480:  MOVF   58,W
0482:  SUBLW  C7
0484:  BC    04E2
....................       output_toggle(PIN_A3); 
0486:  BCF    F92.3
0488:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
048A:  CLRF   59
048C:  CLRF   58
048E:  INCF   42,F
0490:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
0492:  DECFSZ 53,W
0494:  BRA    04AA
....................          if(estadobuzzer==0){ 
0496:  BTFSC  2A.3
0498:  BRA    04A0
....................             Buzzer_off; 
049A:  BCF    F8B.0
049C:  BCF    F94.0
....................          }else{ 
049E:  BRA    04A8
....................             if(estadoalarma==1) 
04A0:  BTFSS  2A.4
04A2:  BRA    04A8
....................                Buzzer_on; 
04A4:  BSF    F8B.0
04A6:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
04A8:  BTG    2A.3
....................       } 
....................       if(estadomv==1) 
04AA:  BTFSS  29.2
04AC:  BRA    04B4
....................          segundosTrabajo++; 
04AE:  INCF   xCD,F
04B0:  BTFSC  FD8.2
04B2:  INCF   xCE,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
04B4:  BTFSS  29.0
04B6:  BRA    04E2
....................          segundos++; 
04B8:  INCF   34,F
....................          if(tiempo_cumplido==0){ 
04BA:  BTFSC  29.7
04BC:  BRA    04E2
....................             if(tempo_segundos>0){ 
04BE:  MOVF   3B,F
04C0:  BZ    04C6
....................                tempo_segundos--; 
04C2:  DECF   3B,F
....................             }else{ 
04C4:  BRA    04E2
....................                if(tempo_minutos>0){ 
04C6:  MOVF   3A,F
04C8:  BZ    04D2
....................                   tempo_minutos--; 
04CA:  DECF   3A,F
....................                   tempo_segundos=59; 
04CC:  MOVLW  3B
04CE:  MOVWF  3B
....................                }else{ 
04D0:  BRA    04E2
....................                   tiempo_cumplido=1; 
04D2:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
04D4:  BCF    29.0
04D6:  BSF    F8A.3
04D8:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
04DA:  MOVFF  3C,3A
04DE:  MOVFF  3D,3B
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
04E2:  BCF    F9E.0
04E4:  GOTO   0064
.................... void main () 
.................... { 
*
29E2:  CLRF   FF8
29E4:  BSF    FF1.2
29E6:  BCF    F9F.0
29E8:  BSF    FD0.7
29EA:  BSF    07.7
29EC:  CLRF   FEA
29EE:  CLRF   FE9
29F0:  BCF    29.0
29F2:  BCF    29.1
29F4:  BCF    29.2
29F6:  BCF    29.3
29F8:  BCF    29.4
29FA:  BCF    29.5
29FC:  BCF    29.6
29FE:  BCF    29.7
2A00:  BCF    2A.0
2A02:  BCF    2A.1
2A04:  BCF    2A.2
2A06:  BCF    2A.3
2A08:  BCF    2A.4
2A0A:  BCF    2A.5
2A0C:  BCF    2A.6
2A0E:  CLRF   2B
2A10:  MOVLW  07
2A12:  MOVWF  2C
2A14:  MOVLW  02
2A16:  MOVWF  2D
2A18:  MOVLW  0B
2A1A:  MOVWF  2E
2A1C:  MOVLW  02
2A1E:  MOVWF  2F
2A20:  MOVLW  03
2A22:  MOVWF  30
2A24:  MOVLW  02
2A26:  MOVWF  31
2A28:  MOVWF  32
2A2A:  MOVLW  04
2A2C:  MOVWF  33
2A2E:  CLRF   34
2A30:  CLRF   35
2A32:  CLRF   36
2A34:  CLRF   37
2A36:  CLRF   38
2A38:  CLRF   39
2A3A:  CLRF   3A
2A3C:  CLRF   3B
2A3E:  CLRF   3C
2A40:  CLRF   3D
2A42:  CLRF   3E
2A44:  CLRF   3F
2A46:  CLRF   40
2A48:  MOVLW  01
2A4A:  MOVWF  41
2A4C:  CLRF   42
2A4E:  CLRF   43
2A50:  CLRF   44
2A52:  CLRF   45
2A54:  MOVLW  0A
2A56:  MOVWF  46
2A58:  CLRF   47
2A5A:  CLRF   53
2A5C:  CLRF   54
2A5E:  CLRF   55
2A60:  CLRF   56
2A62:  MOVLW  04
2A64:  MOVWF  57
2A66:  CLRF   5B
2A68:  CLRF   5A
2A6A:  CLRF   5D
2A6C:  CLRF   5C
2A6E:  CLRF   xB1
2A70:  CLRF   xB0
2A72:  CLRF   xAF
2A74:  CLRF   xAE
2A76:  CLRF   xB5
2A78:  CLRF   xB4
2A7A:  CLRF   xB3
2A7C:  CLRF   xB2
2A7E:  CLRF   xB9
2A80:  CLRF   xB8
2A82:  CLRF   xB7
2A84:  CLRF   xB6
2A86:  CLRF   xBD
2A88:  CLRF   xBC
2A8A:  CLRF   xBB
2A8C:  CLRF   xBA
2A8E:  CLRF   xC1
2A90:  CLRF   xC0
2A92:  CLRF   xBF
2A94:  MOVLW  80
2A96:  MOVWF  xBE
2A98:  BSF    2A.7
2A9A:  BCF    xC2.0
2A9C:  CLRF   xC4
2A9E:  CLRF   xC3
2AA0:  CLRF   xC6
2AA2:  CLRF   xC5
2AA4:  CLRF   xC8
2AA6:  CLRF   xC7
2AA8:  CLRF   xCA
2AAA:  CLRF   xC9
2AAC:  CLRF   xCC
2AAE:  CLRF   xCB
2AB0:  CLRF   xCE
2AB2:  CLRF   xCD
2AB4:  CLRF   xD0
2AB6:  CLRF   xCF
2AB8:  BCF    xC2.1
2ABA:  CLRF   xD1
2ABC:  CLRF   xDB
2ABE:  CLRF   xDA
2AC0:  MOVF   FC1,W
2AC2:  ANDLW  C0
2AC4:  IORLW  0F
2AC6:  MOVWF  FC1
2AC8:  MOVLW  07
2ACA:  MOVWF  FB4
2ACC:  MOVLW  3E
2ACE:  MOVWF  48
2AD0:  MOVLW  20
2AD2:  MOVWF  49
2AD4:  MOVLW  5E
2AD6:  MOVWF  4A
2AD8:  CLRF   4B
2ADA:  CLRF   4C
2ADC:  CLRF   4D
2ADE:  CLRF   4E
2AE0:  CLRF   4F
2AE2:  CLRF   50
2AE4:  CLRF   51
2AE6:  CLRF   52
2AE8:  CLRF   5E
2AEA:  CLRF   5F
2AEC:  CLRF   x60
2AEE:  CLRF   x61
2AF0:  CLRF   x62
2AF2:  CLRF   x63
2AF4:  CLRF   x64
2AF6:  CLRF   x65
2AF8:  CLRF   x66
2AFA:  CLRF   x67
2AFC:  CLRF   x68
2AFE:  CLRF   x69
2B00:  CLRF   x6A
2B02:  CLRF   x6B
2B04:  CLRF   x6C
2B06:  CLRF   x6D
2B08:  CLRF   x6E
2B0A:  CLRF   x6F
2B0C:  CLRF   x70
2B0E:  CLRF   x71
2B10:  CLRF   x72
2B12:  CLRF   x73
2B14:  CLRF   x74
2B16:  CLRF   x75
2B18:  CLRF   x76
2B1A:  CLRF   x77
2B1C:  CLRF   x78
2B1E:  CLRF   x79
2B20:  CLRF   x7A
2B22:  CLRF   x7B
2B24:  CLRF   x7C
2B26:  CLRF   x7D
2B28:  CLRF   x7E
2B2A:  CLRF   x7F
2B2C:  CLRF   x80
2B2E:  CLRF   x81
2B30:  CLRF   x82
2B32:  CLRF   x83
2B34:  CLRF   x84
2B36:  CLRF   x85
2B38:  CLRF   x86
2B3A:  CLRF   x87
2B3C:  CLRF   x88
2B3E:  CLRF   x89
2B40:  CLRF   x8A
2B42:  CLRF   x8B
2B44:  CLRF   x8C
2B46:  CLRF   x8D
2B48:  CLRF   x8E
2B4A:  CLRF   x8F
2B4C:  CLRF   x90
2B4E:  CLRF   x91
2B50:  CLRF   x92
2B52:  CLRF   x93
2B54:  CLRF   x94
2B56:  CLRF   x95
2B58:  CLRF   x96
2B5A:  CLRF   x97
2B5C:  CLRF   x98
2B5E:  CLRF   x99
2B60:  CLRF   x9A
2B62:  CLRF   x9B
2B64:  CLRF   x9C
2B66:  CLRF   x9D
2B68:  CLRF   x9E
2B6A:  CLRF   x9F
2B6C:  CLRF   xA0
2B6E:  CLRF   xA1
2B70:  CLRF   xA2
2B72:  CLRF   xA3
2B74:  CLRF   xA4
2B76:  CLRF   xA5
2B78:  CLRF   xA6
2B7A:  CLRF   xA7
2B7C:  CLRF   xA8
2B7E:  CLRF   xA9
2B80:  CLRF   xAA
2B82:  CLRF   xAB
2B84:  CLRF   xAC
2B86:  CLRF   xAD
....................    Motor_off; 
2B88:  BCF    F8B.2
2B8A:  BCF    F94.2
....................    Motor2_off; 
2B8C:  BCF    F8B.1
2B8E:  BCF    F94.1
....................    ConfigInterrupciones(); 
2B90:  GOTO   0CDA
....................    //MensajeBienvenida(); 
....................    LeeEEPROM();  
2B94:  GOTO   0D4C
....................    LimitaValores(); 
2B98:  GOTO   1160
....................    if(motor!=1){ 
2B9C:  DECFSZ 44,W
2B9E:  BRA    2BA2
2BA0:  BRA    2BA8
....................       MensajeBienvenida();  
2BA2:  GOTO   17BC
....................    }else{ 
2BA6:  BRA    2BBA
....................       if(luz==1) 
2BA8:  DECFSZ 45,W
2BAA:  BRA    2BAE
....................          estadofl=1; 
2BAC:  BSF    29.1
....................       if(luz==0) 
2BAE:  MOVF   45,F
2BB0:  BNZ   2BB4
....................          estadofl=0; 
2BB2:  BCF    29.1
....................       estadomv=1; 
2BB4:  BSF    29.2
....................       Menu=50; 
2BB6:  MOVLW  32
2BB8:  MOVWF  2B
....................    } 
....................    Motor_off; 
2BBA:  BCF    F8B.2
2BBC:  BCF    F94.2
....................    Motor2_off; 
2BBE:  BCF    F8B.1
2BC0:  BCF    F94.1
....................     
....................    if(UP && DOWN && RIGHT){ 
2BC2:  BSF    F92.5
2BC4:  BTFSC  F80.5
2BC6:  BRA    2D42
2BC8:  BSF    F96.0
2BCA:  BTFSC  F84.0
2BCC:  BRA    2D42
2BCE:  BSF    F96.1
2BD0:  BTFSC  F84.1
2BD2:  BRA    2D42
....................       for(;;){ 
....................          if(velocidadInicial>15) 
2BD4:  MOVF   46,W
2BD6:  SUBLW  0F
2BD8:  BC    2BDE
....................             velocidadInicial=15; 
2BDA:  MOVLW  0F
2BDC:  MOVWF  46
....................          if(velocidadInicial<1) 
2BDE:  MOVF   46,F
2BE0:  BNZ   2BE6
....................             velocidadInicial=1; 
2BE2:  MOVLW  01
2BE4:  MOVWF  46
....................         
....................          lcd_gotoxy(1,1); 
2BE6:  MOVLW  01
2BE8:  MOVWF  xF2
2BEA:  MOVWF  xF3
2BEC:  CALL   16CC
....................          printf(lcd_putc,"Seleccione Velocidad"); 
2BF0:  MOVLW  E8
2BF2:  MOVWF  FF6
2BF4:  MOVLW  04
2BF6:  MOVWF  FF7
2BF8:  CALL   179C
....................          lcd_gotoxy(1,2); 
2BFC:  MOVLW  01
2BFE:  MOVWF  xF2
2C00:  MOVLW  02
2C02:  MOVWF  xF3
2C04:  CALL   16CC
....................          printf(lcd_putc,"Inicial   Ventilador"); 
2C08:  MOVLW  FE
2C0A:  MOVWF  FF6
2C0C:  MOVLW  04
2C0E:  MOVWF  FF7
2C10:  CALL   179C
....................          lcd_gotoxy(1,3); 
2C14:  MOVLW  01
2C16:  MOVWF  xF2
2C18:  MOVLW  03
2C1A:  MOVWF  xF3
2C1C:  CALL   16CC
....................          printf(lcd_putc,"     Vel: %02u       ",velocidadInicial); 
2C20:  MOVLW  14
2C22:  MOVWF  FF6
2C24:  MOVLW  05
2C26:  MOVWF  FF7
2C28:  MOVLW  0A
2C2A:  MOVWF  xE4
2C2C:  CALL   1824
2C30:  MOVFF  46,E0
2C34:  MOVLW  01
2C36:  MOVWF  xE1
2C38:  CALL   186A
2C3C:  MOVLW  22
2C3E:  MOVWF  FF6
2C40:  MOVLW  05
2C42:  MOVWF  FF7
2C44:  MOVLW  07
2C46:  MOVWF  xE4
2C48:  CALL   1824
....................          lcd_gotoxy(1,4); 
2C4C:  MOVLW  01
2C4E:  MOVWF  xF2
2C50:  MOVLW  04
2C52:  MOVWF  xF3
2C54:  CALL   16CC
....................          printf(lcd_putc,"                    ");       
2C58:  MOVLW  2A
2C5A:  MOVWF  FF6
2C5C:  MOVLW  05
2C5E:  MOVWF  FF7
2C60:  CALL   179C
....................           
....................          if(UP){   
2C64:  BSF    F92.5
2C66:  BTFSC  F80.5
2C68:  BRA    2C74
....................             delay_ms(200);velocidadInicial++; 
2C6A:  MOVLW  C8
2C6C:  MOVWF  xF7
2C6E:  CALL   0BEC
2C72:  INCF   46,F
....................          } 
....................                 
....................          if(DOWN && Vel1>0)//Si oprime hacia abajo 
2C74:  BSF    F96.0
2C76:  BTFSC  F84.0
2C78:  BRA    2C88
2C7A:  MOVF   57,F
2C7C:  BZ    2C88
....................          {   
....................             delay_ms(200);velocidadInicial--; 
2C7E:  MOVLW  C8
2C80:  MOVWF  xF7
2C82:  CALL   0BEC
2C86:  DECF   46,F
....................          } 
....................           
....................          if(IZQU)//Si oprime boton de Toma. 
2C88:  BSF    F96.2
2C8A:  BTFSC  F84.2
2C8C:  BRA    2D40
....................          {                   
....................             write_eeprom(24,velocidadInicial);//Guardar valor de Setpoint en eeprom 
2C8E:  MOVLW  18
2C90:  MOVWF  FA9
2C92:  MOVFF  46,FA8
2C96:  BCF    FA6.6
2C98:  BCF    FA6.7
2C9A:  BSF    FA6.2
2C9C:  MOVF   FF2,W
2C9E:  MOVWF  00
2CA0:  BCF    FF2.6
2CA2:  BCF    FF2.7
2CA4:  MOVLB  F
2CA6:  MOVLW  55
2CA8:  MOVWF  FA7
2CAA:  MOVLW  AA
2CAC:  MOVWF  FA7
2CAE:  BSF    FA6.1
2CB0:  BTFSC  FA6.1
2CB2:  BRA    2CB0
2CB4:  BCF    FA6.2
2CB6:  MOVF   00,W
2CB8:  IORWF  FF2,F
....................             delay_ms(20); 
2CBA:  MOVLW  14
2CBC:  MOVLB  0
2CBE:  MOVWF  xF7
2CC0:  CALL   0BEC
....................             lcd_gotoxy(1,1); 
2CC4:  MOVLW  01
2CC6:  MOVWF  xF2
2CC8:  MOVWF  xF3
2CCA:  CALL   16CC
....................             printf(lcd_putc,"                    "); 
2CCE:  MOVLW  40
2CD0:  MOVWF  FF6
2CD2:  MOVLW  05
2CD4:  MOVWF  FF7
2CD6:  CALL   179C
....................             lcd_gotoxy(1,2); 
2CDA:  MOVLW  01
2CDC:  MOVWF  xF2
2CDE:  MOVLW  02
2CE0:  MOVWF  xF3
2CE2:  CALL   16CC
....................             printf(lcd_putc,"     Velocidad      "); 
2CE6:  MOVLW  56
2CE8:  MOVWF  FF6
2CEA:  MOVLW  05
2CEC:  MOVWF  FF7
2CEE:  CALL   179C
....................             lcd_gotoxy(1,3); 
2CF2:  MOVLW  01
2CF4:  MOVWF  xF2
2CF6:  MOVLW  03
2CF8:  MOVWF  xF3
2CFA:  CALL   16CC
....................             printf(lcd_putc,"      Almacenada    "); 
2CFE:  MOVLW  6C
2D00:  MOVWF  FF6
2D02:  MOVLW  05
2D04:  MOVWF  FF7
2D06:  CALL   179C
....................             lcd_gotoxy(1,4); 
2D0A:  MOVLW  01
2D0C:  MOVWF  xF2
2D0E:  MOVLW  04
2D10:  MOVWF  xF3
2D12:  CALL   16CC
....................             printf(lcd_putc,"                    ");  
2D16:  MOVLW  82
2D18:  MOVWF  FF6
2D1A:  MOVLW  05
2D1C:  MOVWF  FF7
2D1E:  CALL   179C
....................             delay_ms(1000); 
2D22:  MOVLW  04
2D24:  MOVWF  xE0
2D26:  MOVLW  FA
2D28:  MOVWF  xF7
2D2A:  CALL   0BEC
2D2E:  DECFSZ xE0,F
2D30:  BRA    2D26
....................             printf(lcd_putc,"\f"); 
2D32:  MOVLW  0C
2D34:  MOVWF  xF1
2D36:  CALL   1736
....................             lcd_init(); 
2D3A:  CALL   0C7C
....................             reset_cpu(); 
2D3E:  RESET
....................          } 
....................       } 
2D40:  BRA    2BD4
....................    } 
....................     
....................    if(UP && RIGHT){ 
2D42:  BSF    F92.5
2D44:  BTFSC  F80.5
2D46:  BRA    2F22
2D48:  BSF    F96.1
2D4A:  BTFSC  F84.1
2D4C:  BRA    2F22
....................       for(;;){ 
....................          lcd_gotoxy(1,1); 
2D4E:  MOVLW  01
2D50:  MOVWF  xF2
2D52:  MOVWF  xF3
2D54:  CALL   16CC
....................          printf(lcd_putc,"  Tiempo de Trabajo  "); 
2D58:  MOVLW  98
2D5A:  MOVWF  FF6
2D5C:  MOVLW  05
2D5E:  MOVWF  FF7
2D60:  CALL   179C
....................          lcd_gotoxy(1,2); 
2D64:  MOVLW  01
2D66:  MOVWF  xF2
2D68:  MOVLW  02
2D6A:  MOVWF  xF3
2D6C:  CALL   16CC
....................          printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2D70:  MOVLW  AE
2D72:  MOVWF  FF6
2D74:  MOVLW  05
2D76:  MOVWF  FF7
2D78:  MOVLW  0B
2D7A:  MOVWF  xE4
2D7C:  CALL   1824
2D80:  MOVLW  08
2D82:  MOVWF  FE9
2D84:  MOVFF  5B,E1
2D88:  MOVFF  5A,E0
2D8C:  CALL   18D0
2D90:  MOVLW  20
2D92:  MOVWF  xF1
2D94:  CALL   1736
2D98:  MOVLW  20
2D9A:  MOVWF  xF1
2D9C:  CALL   1736
2DA0:  MOVLW  20
2DA2:  MOVWF  xF1
2DA4:  CALL   1736
....................          lcd_gotoxy(1,4); 
2DA8:  MOVLW  01
2DAA:  MOVWF  xF2
2DAC:  MOVLW  04
2DAE:  MOVWF  xF3
2DB0:  CALL   16CC
....................          printf(lcd_putc," RESET= Oprima < "); 
2DB4:  MOVLW  C2
2DB6:  MOVWF  FF6
2DB8:  MOVLW  05
2DBA:  MOVWF  FF7
2DBC:  CALL   179C
....................           
....................          if(IZQU){ 
2DC0:  BSF    F96.2
2DC2:  BTFSC  F84.2
2DC4:  BRA    2F20
....................          delay_ms(100); 
2DC6:  MOVLW  64
2DC8:  MOVWF  xF7
2DCA:  CALL   0BEC
....................             if(IZQU){ 
2DCE:  BSF    F96.2
2DD0:  BTFSC  F84.2
2DD2:  BRA    2F20
....................                write_eeprom(20,0); 
2DD4:  MOVLW  14
2DD6:  MOVWF  FA9
2DD8:  CLRF   FA8
2DDA:  BCF    FA6.6
2DDC:  BCF    FA6.7
2DDE:  BSF    FA6.2
2DE0:  MOVF   FF2,W
2DE2:  MOVWF  00
2DE4:  BCF    FF2.6
2DE6:  BCF    FF2.7
2DE8:  MOVLB  F
2DEA:  MOVLW  55
2DEC:  MOVWF  FA7
2DEE:  MOVLW  AA
2DF0:  MOVWF  FA7
2DF2:  BSF    FA6.1
2DF4:  BTFSC  FA6.1
2DF6:  BRA    2DF4
2DF8:  BCF    FA6.2
2DFA:  MOVF   00,W
2DFC:  IORWF  FF2,F
....................                delay_ms(20); 
2DFE:  MOVLW  14
2E00:  MOVLB  0
2E02:  MOVWF  xF7
2E04:  CALL   0BEC
....................                write_eeprom(21,0); 
2E08:  MOVLW  15
2E0A:  MOVWF  FA9
2E0C:  CLRF   FA8
2E0E:  BCF    FA6.6
2E10:  BCF    FA6.7
2E12:  BSF    FA6.2
2E14:  MOVF   FF2,W
2E16:  MOVWF  00
2E18:  BCF    FF2.6
2E1A:  BCF    FF2.7
2E1C:  MOVLB  F
2E1E:  MOVLW  55
2E20:  MOVWF  FA7
2E22:  MOVLW  AA
2E24:  MOVWF  FA7
2E26:  BSF    FA6.1
2E28:  BTFSC  FA6.1
2E2A:  BRA    2E28
2E2C:  BCF    FA6.2
2E2E:  MOVF   00,W
2E30:  IORWF  FF2,F
....................                delay_ms(20); 
2E32:  MOVLW  14
2E34:  MOVLB  0
2E36:  MOVWF  xF7
2E38:  CALL   0BEC
....................                write_eeprom(18,0); 
2E3C:  MOVLW  12
2E3E:  MOVWF  FA9
2E40:  CLRF   FA8
2E42:  BCF    FA6.6
2E44:  BCF    FA6.7
2E46:  BSF    FA6.2
2E48:  MOVF   FF2,W
2E4A:  MOVWF  00
2E4C:  BCF    FF2.6
2E4E:  BCF    FF2.7
2E50:  MOVLB  F
2E52:  MOVLW  55
2E54:  MOVWF  FA7
2E56:  MOVLW  AA
2E58:  MOVWF  FA7
2E5A:  BSF    FA6.1
2E5C:  BTFSC  FA6.1
2E5E:  BRA    2E5C
2E60:  BCF    FA6.2
2E62:  MOVF   00,W
2E64:  IORWF  FF2,F
....................                delay_ms(20); 
2E66:  MOVLW  14
2E68:  MOVLB  0
2E6A:  MOVWF  xF7
2E6C:  CALL   0BEC
....................                write_eeprom(19,0); 
2E70:  MOVLW  13
2E72:  MOVWF  FA9
2E74:  CLRF   FA8
2E76:  BCF    FA6.6
2E78:  BCF    FA6.7
2E7A:  BSF    FA6.2
2E7C:  MOVF   FF2,W
2E7E:  MOVWF  00
2E80:  BCF    FF2.6
2E82:  BCF    FF2.7
2E84:  MOVLB  F
2E86:  MOVLW  55
2E88:  MOVWF  FA7
2E8A:  MOVLW  AA
2E8C:  MOVWF  FA7
2E8E:  BSF    FA6.1
2E90:  BTFSC  FA6.1
2E92:  BRA    2E90
2E94:  BCF    FA6.2
2E96:  MOVF   00,W
2E98:  IORWF  FF2,F
....................                delay_ms(20); 
2E9A:  MOVLW  14
2E9C:  MOVLB  0
2E9E:  MOVWF  xF7
2EA0:  CALL   0BEC
....................                lcd_gotoxy(1,1); 
2EA4:  MOVLW  01
2EA6:  MOVWF  xF2
2EA8:  MOVWF  xF3
2EAA:  CALL   16CC
....................                printf(lcd_putc,"                    "); 
2EAE:  MOVLW  D4
2EB0:  MOVWF  FF6
2EB2:  MOVLW  05
2EB4:  MOVWF  FF7
2EB6:  CALL   179C
....................                lcd_gotoxy(1,2); 
2EBA:  MOVLW  01
2EBC:  MOVWF  xF2
2EBE:  MOVLW  02
2EC0:  MOVWF  xF3
2EC2:  CALL   16CC
....................                printf(lcd_putc,"  Borrando  Tiempo  "); 
2EC6:  MOVLW  EA
2EC8:  MOVWF  FF6
2ECA:  MOVLW  05
2ECC:  MOVWF  FF7
2ECE:  CALL   179C
....................                lcd_gotoxy(1,3); 
2ED2:  MOVLW  01
2ED4:  MOVWF  xF2
2ED6:  MOVLW  03
2ED8:  MOVWF  xF3
2EDA:  CALL   16CC
....................                printf(lcd_putc,"    de Trabajo      "); 
2EDE:  MOVLW  00
2EE0:  MOVWF  FF6
2EE2:  MOVLW  06
2EE4:  MOVWF  FF7
2EE6:  CALL   179C
....................                lcd_gotoxy(1,4); 
2EEA:  MOVLW  01
2EEC:  MOVWF  xF2
2EEE:  MOVLW  04
2EF0:  MOVWF  xF3
2EF2:  CALL   16CC
....................                printf(lcd_putc,"                    ");  
2EF6:  MOVLW  16
2EF8:  MOVWF  FF6
2EFA:  MOVLW  06
2EFC:  MOVWF  FF7
2EFE:  CALL   179C
....................                delay_ms(1000); 
2F02:  MOVLW  04
2F04:  MOVWF  xE0
2F06:  MOVLW  FA
2F08:  MOVWF  xF7
2F0A:  CALL   0BEC
2F0E:  DECFSZ xE0,F
2F10:  BRA    2F06
....................                printf(lcd_putc,"\f"); 
2F12:  MOVLW  0C
2F14:  MOVWF  xF1
2F16:  CALL   1736
....................                lcd_init(); 
2F1A:  CALL   0C7C
....................                reset_cpu(); 
2F1E:  RESET
....................             } 
....................          } 
....................       } 
2F20:  BRA    2D4E
....................    } 
....................  
....................    while(true){ 
....................    //leeControlRemoto(); 
....................    cuentaTiempoTrabajoFiltro(); 
2F22:  GOTO   1982
....................    if(VelMotor==20){ 
2F26:  MOVF   xD1,W
2F28:  SUBLW  14
2F2A:  BNZ   2F38
....................       Motor_on; 
2F2C:  BSF    F8B.2
2F2E:  BCF    F94.2
....................       Motor2_on;  
2F30:  BSF    F8B.1
2F32:  BCF    F94.1
....................       set_timer0(0); 
2F34:  CLRF   FD7
2F36:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
2F38:  MOVF   xD1,F
2F3A:  BNZ   2F48
....................       Motor_off; 
2F3C:  BCF    F8B.2
2F3E:  BCF    F94.2
....................       Motor2_off;  
2F40:  BCF    F8B.1
2F42:  BCF    F94.1
....................       set_timer0(0); 
2F44:  CLRF   FD7
2F46:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2F48:  MOVF   2B,F
2F4A:  BTFSS  FD8.2
2F4C:  BRA    3358
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2F4E:  MOVLW  01
2F50:  MOVWF  xF2
2F52:  MOVWF  xF3
2F54:  CALL   16CC
....................          printf(lcd_putc,"     Ingrese        "); 
2F58:  MOVLW  2C
2F5A:  MOVWF  FF6
2F5C:  MOVLW  06
2F5E:  MOVWF  FF7
2F60:  CALL   179C
....................          lcd_gotoxy(1,2); 
2F64:  MOVLW  01
2F66:  MOVWF  xF2
2F68:  MOVLW  02
2F6A:  MOVWF  xF3
2F6C:  CALL   16CC
....................          printf(lcd_putc,"    Contraseña      "); 
2F70:  MOVLW  42
2F72:  MOVWF  FF6
2F74:  MOVLW  06
2F76:  MOVWF  FF7
2F78:  CALL   179C
....................          lcd_gotoxy(1,3); 
2F7C:  MOVLW  01
2F7E:  MOVWF  xF2
2F80:  MOVLW  03
2F82:  MOVWF  xF3
2F84:  CALL   16CC
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2F88:  MOVLW  58
2F8A:  MOVWF  FF6
2F8C:  MOVLW  06
2F8E:  MOVWF  FF7
2F90:  MOVLW  0A
2F92:  MOVWF  xE4
2F94:  CALL   1824
2F98:  MOVFF  4B,E0
2F9C:  MOVLW  1F
2F9E:  MOVWF  xE1
2FA0:  CALL   1B2E
2FA4:  MOVFF  4C,E0
2FA8:  MOVLW  1F
2FAA:  MOVWF  xE1
2FAC:  CALL   1B2E
2FB0:  MOVFF  4D,E0
2FB4:  MOVLW  1F
2FB6:  MOVWF  xE1
2FB8:  CALL   1B2E
2FBC:  MOVFF  4E,E0
2FC0:  MOVLW  1F
2FC2:  MOVWF  xE1
2FC4:  CALL   1B2E
2FC8:  MOVLW  20
2FCA:  MOVWF  xF1
2FCC:  CALL   1736
2FD0:  MOVLW  20
2FD2:  MOVWF  xF1
2FD4:  CALL   1736
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2FD8:  MOVFF  2E,F2
2FDC:  MOVLW  04
2FDE:  MOVWF  xF3
2FE0:  CALL   16CC
....................          lcd_putc(t[2]); 
2FE4:  MOVFF  4A,F1
2FE8:  CALL   1736
....................           
....................          if(unidad>11&&unidad<14){ 
2FEC:  MOVF   2E,W
2FEE:  SUBLW  0B
2FF0:  BC    3010
2FF2:  MOVF   2E,W
2FF4:  SUBLW  0D
2FF6:  BNC   3010
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2FF8:  MOVLW  01
2FFA:  SUBWF  2E,W
2FFC:  MOVWF  xE0
2FFE:  MOVWF  xF2
3000:  MOVLW  04
3002:  MOVWF  xF3
3004:  CALL   16CC
....................             lcd_putc(t[1]); 
3008:  MOVFF  49,F1
300C:  CALL   1736
....................          } 
....................           
....................          Cambio=OFF; 
3010:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
3012:  BSF    F92.5
3014:  BTFSC  F80.5
3016:  BRA    304A
....................          delay_ms(20); 
3018:  MOVLW  14
301A:  MOVWF  xF7
301C:  CALL   0BEC
....................          if(UP){ 
3020:  BSF    F92.5
3022:  BTFSC  F80.5
3024:  BRA    3048
....................             if(Flanco == 0) { 
3026:  BTFSC  29.3
3028:  BRA    3048
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
302A:  MOVLW  0B
302C:  SUBWF  2E,W
302E:  CLRF   03
3030:  ADDLW  4B
3032:  MOVWF  FE9
3034:  MOVLW  00
3036:  ADDWFC 03,W
3038:  MOVWF  FEA
303A:  INCF   FEF,F
303C:  BSF    29.3
303E:  MOVLW  1E
3040:  MOVWF  xF7
3042:  CALL   0BEC
3046:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3048:  BRA    304C
....................          Flanco = 0; 
304A:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
304C:  BSF    F96.0
304E:  BTFSC  F84.0
3050:  BRA    3084
....................          delay_ms(20); 
3052:  MOVLW  14
3054:  MOVWF  xF7
3056:  CALL   0BEC
....................          if(DOWN){ 
305A:  BSF    F96.0
305C:  BTFSC  F84.0
305E:  BRA    3082
....................             if(Flanco2 == 0) { 
3060:  BTFSC  29.5
3062:  BRA    3082
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3064:  MOVLW  0B
3066:  SUBWF  2E,W
3068:  CLRF   03
306A:  ADDLW  4B
306C:  MOVWF  FE9
306E:  MOVLW  00
3070:  ADDWFC 03,W
3072:  MOVWF  FEA
3074:  DECF   FEF,F
3076:  BSF    29.5
3078:  MOVLW  1E
307A:  MOVWF  xF7
307C:  CALL   0BEC
3080:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3082:  BRA    3086
....................          Flanco2 = 0; 
3084:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3086:  BSF    F96.1
3088:  BTFSC  F84.1
308A:  BRA    30B6
....................          delay_ms(20); 
308C:  MOVLW  14
308E:  MOVWF  xF7
3090:  CALL   0BEC
....................          if(RIGHT){ 
3094:  BSF    F96.1
3096:  BTFSC  F84.1
3098:  BRA    30B4
....................             if(Flanco1 == 0) { 
309A:  BTFSC  29.4
309C:  BRA    30B4
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
309E:  BSF    29.4
30A0:  INCF   2E,F
30A2:  MOVLW  1E
30A4:  MOVWF  xF7
30A6:  CALL   0BEC
30AA:  MOVLW  0C
30AC:  MOVWF  xF1
30AE:  CALL   1736
30B2:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
30B4:  BRA    30B8
....................          Flanco1 = 0; 
30B6:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
30B8:  BSF    F96.2
30BA:  BTFSC  F84.2
30BC:  BRA    30E8
....................          delay_ms(150); 
30BE:  MOVLW  96
30C0:  MOVWF  xF7
30C2:  CALL   0BEC
....................          if(IZQU){ 
30C6:  BSF    F96.2
30C8:  BTFSC  F84.2
30CA:  BRA    30E6
....................             if(Flanco3 == 0){ 
30CC:  BTFSC  29.6
30CE:  BRA    30E6
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
30D0:  BSF    29.6
30D2:  DECF   2E,F
30D4:  MOVLW  1E
30D6:  MOVWF  xF7
30D8:  CALL   0BEC
30DC:  MOVLW  0C
30DE:  MOVWF  xF1
30E0:  CALL   1736
30E4:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
30E6:  BRA    30EA
....................         Flanco3 = 0; 
30E8:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
30EA:  MOVLW  0B
30EC:  SUBWF  2E,W
30EE:  CLRF   03
30F0:  ADDLW  4B
30F2:  MOVWF  FE9
30F4:  MOVLW  00
30F6:  ADDWFC 03,W
30F8:  MOVWF  FEA
30FA:  BTFSC  FEF.7
30FC:  BRA    3100
30FE:  BRA    3114
....................          clave[unidad-11]=9; 
3100:  MOVLW  0B
3102:  SUBWF  2E,W
3104:  CLRF   03
3106:  ADDLW  4B
3108:  MOVWF  FE9
310A:  MOVLW  00
310C:  ADDWFC 03,W
310E:  MOVWF  FEA
3110:  MOVLW  09
3112:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3114:  MOVLW  0B
3116:  SUBWF  2E,W
3118:  CLRF   03
311A:  ADDLW  4B
311C:  MOVWF  FE9
311E:  MOVLW  00
3120:  ADDWFC 03,W
3122:  MOVWF  FEA
3124:  BTFSC  FEF.7
3126:  BRA    3140
3128:  MOVF   FEF,W
312A:  SUBLW  09
312C:  BC    3140
....................          clave[unidad-11]=0; 
312E:  MOVLW  0B
3130:  SUBWF  2E,W
3132:  CLRF   03
3134:  ADDLW  4B
3136:  MOVWF  FE9
3138:  MOVLW  00
313A:  ADDWFC 03,W
313C:  MOVWF  FEA
313E:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3140:  MOVF   2E,W
3142:  SUBLW  0A
3144:  BNC   314A
....................          unidad=11; 
3146:  MOVLW  0B
3148:  MOVWF  2E
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
314A:  MOVF   2E,W
314C:  SUBLW  0E
314E:  BTFSC  FD8.0
3150:  BRA    3358
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
3152:  MOVF   4B,W
3154:  SUBLW  03
3156:  BNZ   323A
3158:  MOVF   4C,W
315A:  SUBLW  08
315C:  BNZ   323A
315E:  MOVF   4D,W
3160:  SUBLW  09
3162:  BNZ   323A
3164:  MOVF   4E,W
3166:  SUBLW  02
3168:  BNZ   323A
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
316A:  CLRF   FA9
316C:  CLRF   FA8
316E:  BCF    FA6.6
3170:  BCF    FA6.7
3172:  BSF    FA6.2
3174:  MOVF   FF2,W
3176:  MOVWF  00
3178:  BCF    FF2.6
317A:  BCF    FF2.7
317C:  MOVLB  F
317E:  MOVLW  55
3180:  MOVWF  FA7
3182:  MOVLW  AA
3184:  MOVWF  FA7
3186:  BSF    FA6.1
3188:  BTFSC  FA6.1
318A:  BRA    3188
318C:  BCF    FA6.2
318E:  MOVF   00,W
3190:  IORWF  FF2,F
3192:  MOVLW  14
3194:  MOVLB  0
3196:  MOVWF  xF7
3198:  CALL   0BEC
319C:  MOVLW  01
319E:  MOVWF  FA9
31A0:  CLRF   FA8
31A2:  BCF    FA6.6
31A4:  BCF    FA6.7
31A6:  BSF    FA6.2
31A8:  MOVF   FF2,W
31AA:  MOVWF  00
31AC:  BCF    FF2.6
31AE:  BCF    FF2.7
31B0:  MOVLB  F
31B2:  MOVLW  55
31B4:  MOVWF  FA7
31B6:  MOVLW  AA
31B8:  MOVWF  FA7
31BA:  BSF    FA6.1
31BC:  BTFSC  FA6.1
31BE:  BRA    31BC
31C0:  BCF    FA6.2
31C2:  MOVF   00,W
31C4:  IORWF  FF2,F
31C6:  MOVLW  14
31C8:  MOVLB  0
31CA:  MOVWF  xF7
31CC:  CALL   0BEC
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
31D0:  MOVLW  02
31D2:  MOVWF  FA9
31D4:  CLRF   FA8
31D6:  BCF    FA6.6
31D8:  BCF    FA6.7
31DA:  BSF    FA6.2
31DC:  MOVF   FF2,W
31DE:  MOVWF  00
31E0:  BCF    FF2.6
31E2:  BCF    FF2.7
31E4:  MOVLB  F
31E6:  MOVLW  55
31E8:  MOVWF  FA7
31EA:  MOVLW  AA
31EC:  MOVWF  FA7
31EE:  BSF    FA6.1
31F0:  BTFSC  FA6.1
31F2:  BRA    31F0
31F4:  BCF    FA6.2
31F6:  MOVF   00,W
31F8:  IORWF  FF2,F
31FA:  MOVLW  14
31FC:  MOVLB  0
31FE:  MOVWF  xF7
3200:  CALL   0BEC
3204:  MOVLW  03
3206:  MOVWF  FA9
3208:  CLRF   FA8
320A:  BCF    FA6.6
320C:  BCF    FA6.7
320E:  BSF    FA6.2
3210:  MOVF   FF2,W
3212:  MOVWF  00
3214:  BCF    FF2.6
3216:  BCF    FF2.7
3218:  MOVLB  F
321A:  MOVLW  55
321C:  MOVWF  FA7
321E:  MOVLW  AA
3220:  MOVWF  FA7
3222:  BSF    FA6.1
3224:  BTFSC  FA6.1
3226:  BRA    3224
3228:  BCF    FA6.2
322A:  MOVF   00,W
322C:  IORWF  FF2,F
322E:  MOVLW  14
3230:  MOVLB  0
3232:  MOVWF  xF7
3234:  CALL   0BEC
....................              reset_cpu(); 
3238:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
323A:  MOVF   4F,W
323C:  SUBWF  4B,W
323E:  BNZ   32DE
3240:  MOVF   50,W
3242:  SUBWF  4C,W
3244:  BNZ   32DE
3246:  MOVF   51,W
3248:  SUBWF  4D,W
324A:  BNZ   32DE
324C:  MOVF   52,W
324E:  SUBWF  4E,W
3250:  BNZ   32DE
....................             lcd_gotoxy(1,1); 
3252:  MOVLW  01
3254:  MOVWF  xF2
3256:  MOVWF  xF3
3258:  CALL   16CC
....................             printf(lcd_putc,"                   "); 
325C:  MOVLW  6E
325E:  MOVWF  FF6
3260:  MOVLW  06
3262:  MOVWF  FF7
3264:  CALL   179C
....................             lcd_gotoxy(1,2); 
3268:  MOVLW  01
326A:  MOVWF  xF2
326C:  MOVLW  02
326E:  MOVWF  xF3
3270:  CALL   16CC
....................             printf(lcd_putc,"     Contraseña    "); 
3274:  MOVLW  82
3276:  MOVWF  FF6
3278:  MOVLW  06
327A:  MOVWF  FF7
327C:  CALL   179C
....................             lcd_gotoxy(1,3); 
3280:  MOVLW  01
3282:  MOVWF  xF2
3284:  MOVLW  03
3286:  MOVWF  xF3
3288:  CALL   16CC
....................             printf(lcd_putc,"      Correcta     "); 
328C:  MOVLW  96
328E:  MOVWF  FF6
3290:  MOVLW  06
3292:  MOVWF  FF7
3294:  CALL   179C
....................             lcd_gotoxy(1,4); 
3298:  MOVLW  01
329A:  MOVWF  xF2
329C:  MOVLW  04
329E:  MOVWF  xF3
32A0:  CALL   16CC
....................             printf(lcd_putc,"                   "); 
32A4:  MOVLW  AA
32A6:  MOVWF  FF6
32A8:  MOVLW  06
32AA:  MOVWF  FF7
32AC:  CALL   179C
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
32B0:  MOVLW  04
32B2:  MOVWF  xE0
32B4:  MOVLW  FA
32B6:  MOVWF  xF7
32B8:  CALL   0BEC
32BC:  DECFSZ xE0,F
32BE:  BRA    32B4
32C0:  MOVLW  32
32C2:  MOVWF  2B
32C4:  MOVLW  0B
32C6:  MOVWF  2E
32C8:  MOVLW  0C
32CA:  MOVWF  xF1
32CC:  CALL   1736
32D0:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
32D2:  CLRF   4B
32D4:  CLRF   4C
32D6:  CLRF   4D
32D8:  CLRF   4E
32DA:  BSF    2A.7
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
32DC:  BRA    3358
....................             lcd_gotoxy(1,1); 
32DE:  MOVLW  01
32E0:  MOVWF  xF2
32E2:  MOVWF  xF3
32E4:  CALL   16CC
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
32E8:  MOVLW  01
32EA:  MOVWF  xF2
32EC:  MOVLW  02
32EE:  MOVWF  xF3
32F0:  CALL   16CC
....................             printf(lcd_putc,"     Contraseña    "); 
32F4:  MOVLW  BE
32F6:  MOVWF  FF6
32F8:  MOVLW  06
32FA:  MOVWF  FF7
32FC:  CALL   179C
....................             lcd_gotoxy(1,3); 
3300:  MOVLW  01
3302:  MOVWF  xF2
3304:  MOVLW  03
3306:  MOVWF  xF3
3308:  CALL   16CC
....................             printf(lcd_putc,"     Incorrecta    "); 
330C:  MOVLW  D2
330E:  MOVWF  FF6
3310:  MOVLW  06
3312:  MOVWF  FF7
3314:  CALL   179C
....................             lcd_gotoxy(1,4); 
3318:  MOVLW  01
331A:  MOVWF  xF2
331C:  MOVLW  04
331E:  MOVWF  xF3
3320:  CALL   16CC
....................             printf(lcd_putc,"                   "); 
3324:  MOVLW  E6
3326:  MOVWF  FF6
3328:  MOVLW  06
332A:  MOVWF  FF7
332C:  CALL   179C
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
3330:  MOVLW  04
3332:  MOVWF  xE0
3334:  MOVLW  FA
3336:  MOVWF  xF7
3338:  CALL   0BEC
333C:  DECFSZ xE0,F
333E:  BRA    3334
3340:  MOVLW  0B
3342:  MOVWF  2E
3344:  MOVLW  0C
3346:  MOVWF  xF1
3348:  CALL   1736
334C:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
334E:  CLRF   4B
3350:  CLRF   4C
3352:  CLRF   4D
3354:  CLRF   4E
3356:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
3358:  DECFSZ 2B,W
335A:  BRA    3592
....................       EliminaRuido(); 
335C:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3360:  MOVLW  01
3362:  MOVWF  xF2
3364:  MOVWF  xF3
3366:  CALL   16CC
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
336A:  MOVLW  FA
336C:  MOVWF  FF6
336E:  MOVLW  06
3370:  MOVWF  FF7
3372:  CALL   179C
....................          mensajes(1+paso,2); 
3376:  MOVLW  01
3378:  ADDWF  47,W
337A:  MOVWF  xE0
337C:  MOVWF  xE1
337E:  MOVLW  02
3380:  MOVWF  xE2
3382:  CALL   1BF6
....................          mensajes(2+paso,3); 
3386:  MOVLW  02
3388:  ADDWF  47,W
338A:  MOVWF  xE0
338C:  MOVWF  xE1
338E:  MOVLW  03
3390:  MOVWF  xE2
3392:  CALL   1BF6
....................          mensajes(3+paso,4); 
3396:  MOVLW  03
3398:  ADDWF  47,W
339A:  MOVWF  xE0
339C:  MOVWF  xE1
339E:  MOVLW  04
33A0:  MOVWF  xE2
33A2:  CALL   1BF6
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
33A6:  MOVLW  01
33A8:  MOVWF  xF2
33AA:  MOVFF  2F,F3
33AE:  CALL   16CC
....................         lcd_putc(t[0]); 
33B2:  MOVFF  48,F1
33B6:  CALL   1736
....................  
....................         if(Flecha==2) 
33BA:  MOVF   2F,W
33BC:  SUBLW  02
33BE:  BNZ   33E8
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
33C0:  MOVLW  01
33C2:  MOVWF  xF2
33C4:  MOVLW  04
33C6:  MOVWF  xF3
33C8:  CALL   16CC
....................             lcd_putc(t[1]); 
33CC:  MOVFF  49,F1
33D0:  CALL   1736
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
33D4:  MOVLW  01
33D6:  MOVWF  xF2
33D8:  MOVLW  03
33DA:  MOVWF  xF3
33DC:  CALL   16CC
....................             lcd_putc(t[1]); 
33E0:  MOVFF  49,F1
33E4:  CALL   1736
....................           } 
....................          
....................         if(Flecha==4) 
33E8:  MOVF   2F,W
33EA:  SUBLW  04
33EC:  BNZ   3416
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
33EE:  MOVLW  01
33F0:  MOVWF  xF2
33F2:  MOVLW  02
33F4:  MOVWF  xF3
33F6:  CALL   16CC
....................             lcd_putc(t[1]); 
33FA:  MOVFF  49,F1
33FE:  CALL   1736
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
3402:  MOVLW  01
3404:  MOVWF  xF2
3406:  MOVLW  03
3408:  MOVWF  xF3
340A:  CALL   16CC
....................             lcd_putc(t[1]); 
340E:  MOVFF  49,F1
3412:  CALL   1736
....................           } 
....................          
....................         if(Flecha==3) 
3416:  MOVF   2F,W
3418:  SUBLW  03
341A:  BNZ   3444
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
341C:  MOVLW  01
341E:  MOVWF  xF2
3420:  MOVLW  04
3422:  MOVWF  xF3
3424:  CALL   16CC
....................             lcd_putc(t[1]); 
3428:  MOVFF  49,F1
342C:  CALL   1736
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
3430:  MOVLW  01
3432:  MOVWF  xF2
3434:  MOVLW  02
3436:  MOVWF  xF3
3438:  CALL   16CC
....................             lcd_putc(t[1]); 
343C:  MOVFF  49,F1
3440:  CALL   1736
....................           } 
....................          Cambio=OFF; 
3444:  BCF    2A.7
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
3446:  BSF    F92.5
3448:  BTFSC  F80.5
344A:  BRA    3476
....................          delay_ms(20); 
344C:  MOVLW  14
344E:  MOVWF  xF7
3450:  CALL   0BEC
....................          if(UP){ 
3454:  BSF    F92.5
3456:  BTFSC  F80.5
3458:  BRA    3474
....................             if(Flanco == 0){ 
345A:  BTFSC  29.3
345C:  BRA    3474
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
345E:  DECF   31,F
3460:  DECF   2F,F
3462:  MOVLW  01
3464:  ADDWF  2F,W
3466:  MOVWF  30
3468:  BSF    29.3
346A:  MOVLW  1E
346C:  MOVWF  xF7
346E:  CALL   0BEC
3472:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3474:  BRA    3478
....................          Flanco = 0; 
3476:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3478:  BSF    F96.0
347A:  BTFSC  F84.0
347C:  BRA    34A8
....................          delay_ms(20); 
347E:  MOVLW  14
3480:  MOVWF  xF7
3482:  CALL   0BEC
....................          if(DOWN){ 
3486:  BSF    F96.0
3488:  BTFSC  F84.0
348A:  BRA    34A6
....................             if(Flanco2 == 0){ 
348C:  BTFSC  29.5
348E:  BRA    34A6
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3490:  INCF   31,F
3492:  INCF   2F,F
3494:  MOVLW  01
3496:  SUBWF  2F,W
3498:  MOVWF  30
349A:  BSF    29.5
349C:  MOVLW  1E
349E:  MOVWF  xF7
34A0:  CALL   0BEC
34A4:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
34A6:  BRA    34AA
....................          Flanco2 = 0; 
34A8:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
34AA:  MOVF   31,W
34AC:  SUBWF  33,W
34AE:  BC    34C0
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
34B0:  INCF   47,F
34B2:  MOVFF  31,33
34B6:  MOVLW  02
34B8:  SUBWF  33,W
34BA:  MOVWF  32
34BC:  MOVLW  04
34BE:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
34C0:  MOVF   32,W
34C2:  SUBWF  31,W
34C4:  BC    34D6
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
34C6:  DECF   47,F
34C8:  MOVFF  31,32
34CC:  MOVLW  02
34CE:  ADDWF  32,W
34D0:  MOVWF  33
34D2:  MOVLW  02
34D4:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
34D6:  MOVF   31,W
34D8:  SUBWF  2C,W
34DA:  BC    34EE
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
34DC:  MOVFF  2D,31
34E0:  MOVLW  02
34E2:  MOVWF  2F
34E4:  CLRF   47
34E6:  MOVFF  31,32
34EA:  ADDWF  32,W
34EC:  MOVWF  33
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
34EE:  MOVF   2D,W
34F0:  SUBWF  31,W
34F2:  BC    350A
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
34F4:  MOVFF  2C,31
34F8:  MOVLW  04
34FA:  MOVWF  2F
34FC:  SUBWF  2C,W
34FE:  MOVWF  47
3500:  MOVFF  31,33
3504:  MOVLW  02
3506:  SUBWF  33,W
3508:  MOVWF  32
....................       } 
....................          
....................       if(paso<0) 
350A:  BTFSC  47.7
350C:  BRA    3510
350E:  BRA    3512
....................          paso=0; 
3510:  CLRF   47
....................           
....................       if(RIGHT){// Si oprime derecha 
3512:  BSF    F96.1
3514:  BTFSC  F84.1
3516:  BRA    355E
....................          delay_ms(20); 
3518:  MOVLW  14
351A:  MOVWF  xF7
351C:  CALL   0BEC
....................          if(RIGHT){ 
3520:  BSF    F96.1
3522:  BTFSC  F84.1
3524:  BRA    355A
....................             if(Flanco1 == 0){ 
3526:  BTFSC  29.4
3528:  BRA    355A
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
352A:  BSF    29.4
352C:  MOVFF  31,2B
3530:  MOVLW  03
3532:  MOVWF  2F
3534:  MOVLW  02
3536:  MOVWF  xE0
3538:  MOVLW  96
353A:  MOVWF  xF7
353C:  CALL   0BEC
3540:  DECFSZ xE0,F
3542:  BRA    3538
3544:  MOVLW  0C
3546:  MOVWF  xF1
3548:  CALL   1736
....................                if(Menu==6){ 
354C:  MOVF   2B,W
354E:  SUBLW  06
3550:  BNZ   355A
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3552:  CLRF   4B
3554:  CLRF   4C
3556:  CLRF   4D
3558:  CLRF   4E
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
355A:  BSF    2A.7
....................       }else{ 
355C:  BRA    3560
....................         Flanco1 = 0; 
355E:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
3560:  BSF    F96.2
3562:  BTFSC  F84.2
3564:  BRA    3592
....................          delay_ms(20); 
3566:  MOVLW  14
3568:  MOVWF  xF7
356A:  CALL   0BEC
....................          if(IZQU){ 
356E:  BSF    F96.2
3570:  BTFSC  F84.2
3572:  BRA    3592
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
3574:  MOVLW  02
3576:  MOVWF  xE0
3578:  MOVLW  FA
357A:  MOVWF  xF7
357C:  CALL   0BEC
3580:  DECFSZ xE0,F
3582:  BRA    3578
3584:  MOVLW  32
3586:  MOVWF  2B
3588:  MOVLW  0C
358A:  MOVWF  xF1
358C:  CALL   1736
3590:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
3592:  MOVF   2B,W
3594:  SUBLW  02
3596:  BTFSS  FD8.2
3598:  BRA    37F2
....................    EliminaRuido(); 
359A:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
359E:  MOVLW  01
35A0:  MOVWF  xF2
35A2:  MOVWF  xF3
35A4:  CALL   16CC
....................       printf(lcd_putc,"    Temporizador     "); 
35A8:  MOVLW  10
35AA:  MOVWF  FF6
35AC:  MOVLW  07
35AE:  MOVWF  FF7
35B0:  CALL   179C
....................       lcd_gotoxy(1,2); 
35B4:  MOVLW  01
35B6:  MOVWF  xF2
35B8:  MOVLW  02
35BA:  MOVWF  xF3
35BC:  CALL   16CC
....................       printf(lcd_putc,"       Luz UV        "); 
35C0:  MOVLW  26
35C2:  MOVWF  FF6
35C4:  MOVLW  07
35C6:  MOVWF  FF7
35C8:  CALL   179C
....................       lcd_gotoxy(6,3); 
35CC:  MOVLW  06
35CE:  MOVWF  xF2
35D0:  MOVLW  03
35D2:  MOVWF  xF3
35D4:  CALL   16CC
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
35D8:  MOVFF  3C,E0
35DC:  MOVLW  03
35DE:  MOVWF  xE1
35E0:  CALL   186A
35E4:  MOVLW  3A
35E6:  MOVWF  xF1
35E8:  CALL   1736
35EC:  MOVFF  3D,E0
35F0:  MOVLW  01
35F2:  MOVWF  xE1
35F4:  CALL   186A
35F8:  MOVLW  45
35FA:  MOVWF  FF6
35FC:  MOVLW  07
35FE:  MOVWF  FF7
3600:  MOVLW  08
3602:  MOVWF  xE4
3604:  CALL   1824
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
3608:  MOVLW  06
360A:  ADDWF  41,W
360C:  MOVWF  xE0
360E:  MOVWF  xF2
3610:  MOVLW  04
3612:  MOVWF  xF3
3614:  CALL   16CC
....................       lcd_putc(t[2]); 
3618:  MOVFF  4A,F1
361C:  CALL   1736
....................        
....................       Cambio=OFF; 
3620:  BCF    2A.7
.................... //   } 
....................     
....................    if(UP) 
3622:  BSF    F92.5
3624:  BTFSC  F80.5
3626:  BRA    3674
....................    { 
....................       delay_ms(20); 
3628:  MOVLW  14
362A:  MOVWF  xF7
362C:  CALL   0BEC
....................       if(UP){ 
3630:  BSF    F92.5
3632:  BTFSC  F80.5
3634:  BRA    3674
....................          if(unidad2==1) 
3636:  DECFSZ 41,W
3638:  BRA    3654
....................          { 
....................             if(tempo_minutos_pro<240) 
363A:  MOVF   3C,W
363C:  SUBLW  EF
363E:  BNC   3654
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
3640:  MOVLW  05
3642:  ADDWF  3C,F
3644:  MOVLW  02
3646:  MOVWF  xE0
3648:  MOVLW  96
364A:  MOVWF  xF7
364C:  CALL   0BEC
3650:  DECFSZ xE0,F
3652:  BRA    3648
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
3654:  MOVF   41,W
3656:  SUBLW  04
3658:  BNZ   3672
....................          { 
....................             if(tempo_segundos_pro<59) 
365A:  MOVF   3D,W
365C:  SUBLW  3A
365E:  BNC   3672
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
3660:  INCF   3D,F
3662:  MOVLW  02
3664:  MOVWF  xE0
3666:  MOVLW  96
3668:  MOVWF  xF7
366A:  CALL   0BEC
366E:  DECFSZ xE0,F
3670:  BRA    3666
....................             } 
....................          }      
....................       Cambio=ON; 
3672:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(DOWN) 
3674:  BSF    F96.0
3676:  BTFSC  F84.0
3678:  BRA    36C2
....................    { 
....................       delay_ms(20); 
367A:  MOVLW  14
367C:  MOVWF  xF7
367E:  CALL   0BEC
....................       if(DOWN){ 
3682:  BSF    F96.0
3684:  BTFSC  F84.0
3686:  BRA    36C2
....................          if(unidad2==1) 
3688:  DECFSZ 41,W
368A:  BRA    36A4
....................          { 
....................             if(tempo_minutos_pro>0) 
368C:  MOVF   3C,F
368E:  BZ    36A4
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
3690:  MOVLW  05
3692:  SUBWF  3C,F
3694:  MOVLW  02
3696:  MOVWF  xE0
3698:  MOVLW  96
369A:  MOVWF  xF7
369C:  CALL   0BEC
36A0:  DECFSZ xE0,F
36A2:  BRA    3698
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
36A4:  MOVF   41,W
36A6:  SUBLW  04
36A8:  BNZ   36C0
....................          { 
....................             if(tempo_segundos_pro>0) 
36AA:  MOVF   3D,F
36AC:  BZ    36C0
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
36AE:  DECF   3D,F
36B0:  MOVLW  02
36B2:  MOVWF  xE0
36B4:  MOVLW  96
36B6:  MOVWF  xF7
36B8:  CALL   0BEC
36BC:  DECFSZ xE0,F
36BE:  BRA    36B4
....................             }    
....................          } 
....................       Cambio=ON; 
36C0:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
36C2:  BSF    F96.1
36C4:  BTFSC  F84.1
36C6:  BRA    3704
....................    { 
....................       delay_ms(20); 
36C8:  MOVLW  14
36CA:  MOVWF  xF7
36CC:  CALL   0BEC
....................       if(RIGHT){ 
36D0:  BSF    F96.1
36D2:  BTFSC  F84.1
36D4:  BRA    3704
....................          if(unidad2==1) 
36D6:  DECFSZ 41,W
36D8:  BRA    36E0
....................          { 
....................             unidad2=4; 
36DA:  MOVLW  04
36DC:  MOVWF  41
....................          } 
....................          else 
36DE:  BRA    36EA
....................          { 
....................             if(unidad2==4) 
36E0:  MOVF   41,W
36E2:  SUBLW  04
36E4:  BNZ   36EA
....................             { 
....................                unidad2=1; 
36E6:  MOVLW  01
36E8:  MOVWF  41
....................             } 
....................          } 
....................       delay_ms(500); 
36EA:  MOVLW  02
36EC:  MOVWF  xE0
36EE:  MOVLW  FA
36F0:  MOVWF  xF7
36F2:  CALL   0BEC
36F6:  DECFSZ xE0,F
36F8:  BRA    36EE
....................       printf(lcd_putc,"\f"); 
36FA:  MOVLW  0C
36FC:  MOVWF  xF1
36FE:  CALL   1736
....................       Cambio=ON; 
3702:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(IZQU) 
3704:  BSF    F96.2
3706:  BTFSC  F84.2
3708:  BRA    37F2
....................    { 
....................       if(IZQU){ 
370A:  BSF    F96.2
370C:  BTFSC  F84.2
370E:  BRA    37F2
....................          delay_ms(200); 
3710:  MOVLW  C8
3712:  MOVWF  xF7
3714:  CALL   0BEC
....................          printf(lcd_putc,"\f"); 
3718:  MOVLW  0C
371A:  MOVWF  xF1
371C:  CALL   1736
....................          lcd_gotoxy(1,2); 
3720:  MOVLW  01
3722:  MOVWF  xF2
3724:  MOVLW  02
3726:  MOVWF  xF3
3728:  CALL   16CC
....................          printf(lcd_putc,"Tiempo Almacenado"); 
372C:  MOVLW  4E
372E:  MOVWF  FF6
3730:  MOVLW  07
3732:  MOVWF  FF7
3734:  CALL   179C
....................          lcd_gotoxy(1,3); 
3738:  MOVLW  01
373A:  MOVWF  xF2
373C:  MOVLW  03
373E:  MOVWF  xF3
3740:  CALL   16CC
....................          printf(lcd_putc,"  Correctamente  "); 
3744:  MOVLW  60
3746:  MOVWF  FF6
3748:  MOVLW  07
374A:  MOVWF  FF7
374C:  CALL   179C
....................          write_eeprom(5,tempo_minutos_pro); 
3750:  MOVLW  05
3752:  MOVWF  FA9
3754:  MOVFF  3C,FA8
3758:  BCF    FA6.6
375A:  BCF    FA6.7
375C:  BSF    FA6.2
375E:  MOVF   FF2,W
3760:  MOVWF  00
3762:  BCF    FF2.6
3764:  BCF    FF2.7
3766:  MOVLB  F
3768:  MOVLW  55
376A:  MOVWF  FA7
376C:  MOVLW  AA
376E:  MOVWF  FA7
3770:  BSF    FA6.1
3772:  BTFSC  FA6.1
3774:  BRA    3772
3776:  BCF    FA6.2
3778:  MOVF   00,W
377A:  IORWF  FF2,F
....................          delay_ms(20); 
377C:  MOVLW  14
377E:  MOVLB  0
3780:  MOVWF  xF7
3782:  CALL   0BEC
....................          write_eeprom(6,tempo_segundos_pro); 
3786:  MOVLW  06
3788:  MOVWF  FA9
378A:  MOVFF  3D,FA8
378E:  BCF    FA6.6
3790:  BCF    FA6.7
3792:  BSF    FA6.2
3794:  MOVF   FF2,W
3796:  MOVWF  00
3798:  BCF    FF2.6
379A:  BCF    FF2.7
379C:  MOVLB  F
379E:  MOVLW  55
37A0:  MOVWF  FA7
37A2:  MOVLW  AA
37A4:  MOVWF  FA7
37A6:  BSF    FA6.1
37A8:  BTFSC  FA6.1
37AA:  BRA    37A8
37AC:  BCF    FA6.2
37AE:  MOVF   00,W
37B0:  IORWF  FF2,F
....................          delay_ms(20); 
37B2:  MOVLW  14
37B4:  MOVLB  0
37B6:  MOVWF  xF7
37B8:  CALL   0BEC
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
37BC:  MOVFF  3C,3A
37C0:  MOVFF  3D,3B
....................          delay_ms(700); 
37C4:  MOVLW  04
37C6:  MOVWF  xE0
37C8:  MOVLW  AF
37CA:  MOVWF  xF7
37CC:  CALL   0BEC
37D0:  DECFSZ xE0,F
37D2:  BRA    37C8
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
37D4:  MOVLW  1E
37D6:  MOVWF  xF7
37D8:  CALL   0BEC
37DC:  MOVLW  01
37DE:  MOVWF  2B
37E0:  CLRF   47
37E2:  MOVLW  02
37E4:  MOVWF  2F
37E6:  MOVWF  31
37E8:  MOVLW  0C
37EA:  MOVWF  xF1
37EC:  CALL   1736
....................          Cambio=ON; 
37F0:  BSF    2A.7
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
37F2:  MOVF   2B,W
37F4:  SUBLW  03
37F6:  BTFSS  FD8.2
37F8:  BRA    3B44
....................       EliminaRuido(); 
37FA:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
37FE:  MOVLW  01
3800:  MOVWF  xF2
3802:  MOVWF  xF3
3804:  CALL   16CC
....................          printf(lcd_putc,"     Ingrese        "); 
3808:  MOVLW  72
380A:  MOVWF  FF6
380C:  MOVLW  07
380E:  MOVWF  FF7
3810:  CALL   179C
....................          lcd_gotoxy(1,2); 
3814:  MOVLW  01
3816:  MOVWF  xF2
3818:  MOVLW  02
381A:  MOVWF  xF3
381C:  CALL   16CC
....................          printf(lcd_putc,"    Contraseña      "); 
3820:  MOVLW  88
3822:  MOVWF  FF6
3824:  MOVLW  07
3826:  MOVWF  FF7
3828:  CALL   179C
....................          lcd_gotoxy(1,3); 
382C:  MOVLW  01
382E:  MOVWF  xF2
3830:  MOVLW  03
3832:  MOVWF  xF3
3834:  CALL   16CC
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3838:  MOVLW  9E
383A:  MOVWF  FF6
383C:  MOVLW  07
383E:  MOVWF  FF7
3840:  MOVLW  0A
3842:  MOVWF  xE4
3844:  CALL   1824
3848:  MOVFF  4B,E0
384C:  MOVLW  1F
384E:  MOVWF  xE1
3850:  CALL   1B2E
3854:  MOVFF  4C,E0
3858:  MOVLW  1F
385A:  MOVWF  xE1
385C:  CALL   1B2E
3860:  MOVFF  4D,E0
3864:  MOVLW  1F
3866:  MOVWF  xE1
3868:  CALL   1B2E
386C:  MOVFF  4E,E0
3870:  MOVLW  1F
3872:  MOVWF  xE1
3874:  CALL   1B2E
3878:  MOVLW  20
387A:  MOVWF  xF1
387C:  CALL   1736
3880:  MOVLW  20
3882:  MOVWF  xF1
3884:  CALL   1736
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3888:  MOVFF  2E,F2
388C:  MOVLW  04
388E:  MOVWF  xF3
3890:  CALL   16CC
....................          lcd_putc(t[2]); 
3894:  MOVFF  4A,F1
3898:  CALL   1736
....................           
....................          if(unidad>11&&unidad<14){ 
389C:  MOVF   2E,W
389E:  SUBLW  0B
38A0:  BC    38C0
38A2:  MOVF   2E,W
38A4:  SUBLW  0D
38A6:  BNC   38C0
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
38A8:  MOVLW  01
38AA:  SUBWF  2E,W
38AC:  MOVWF  xE0
38AE:  MOVWF  xF2
38B0:  MOVLW  04
38B2:  MOVWF  xF3
38B4:  CALL   16CC
....................             lcd_putc(t[1]); 
38B8:  MOVFF  49,F1
38BC:  CALL   1736
....................          } 
....................           
....................          Cambio=OFF; 
38C0:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
38C2:  BSF    F92.5
38C4:  BTFSC  F80.5
38C6:  BRA    38FA
....................          delay_ms(20); 
38C8:  MOVLW  14
38CA:  MOVWF  xF7
38CC:  CALL   0BEC
....................          if(UP){ 
38D0:  BSF    F92.5
38D2:  BTFSC  F80.5
38D4:  BRA    38F8
....................             if(Flanco == 0) { 
38D6:  BTFSC  29.3
38D8:  BRA    38F8
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
38DA:  MOVLW  0B
38DC:  SUBWF  2E,W
38DE:  CLRF   03
38E0:  ADDLW  4B
38E2:  MOVWF  FE9
38E4:  MOVLW  00
38E6:  ADDWFC 03,W
38E8:  MOVWF  FEA
38EA:  INCF   FEF,F
38EC:  BSF    29.3
38EE:  MOVLW  1E
38F0:  MOVWF  xF7
38F2:  CALL   0BEC
38F6:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
38F8:  BRA    38FC
....................          Flanco = 0; 
38FA:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
38FC:  BSF    F96.0
38FE:  BTFSC  F84.0
3900:  BRA    3934
....................          delay_ms(20); 
3902:  MOVLW  14
3904:  MOVWF  xF7
3906:  CALL   0BEC
....................          if(DOWN){ 
390A:  BSF    F96.0
390C:  BTFSC  F84.0
390E:  BRA    3932
....................             if(Flanco2 == 0) { 
3910:  BTFSC  29.5
3912:  BRA    3932
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3914:  MOVLW  0B
3916:  SUBWF  2E,W
3918:  CLRF   03
391A:  ADDLW  4B
391C:  MOVWF  FE9
391E:  MOVLW  00
3920:  ADDWFC 03,W
3922:  MOVWF  FEA
3924:  DECF   FEF,F
3926:  BSF    29.5
3928:  MOVLW  1E
392A:  MOVWF  xF7
392C:  CALL   0BEC
3930:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3932:  BRA    3936
....................          Flanco2 = 0; 
3934:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3936:  BSF    F96.1
3938:  BTFSC  F84.1
393A:  BRA    3966
....................          delay_ms(20); 
393C:  MOVLW  14
393E:  MOVWF  xF7
3940:  CALL   0BEC
....................          if(RIGHT){ 
3944:  BSF    F96.1
3946:  BTFSC  F84.1
3948:  BRA    3964
....................             if(Flanco1 == 0) { 
394A:  BTFSC  29.4
394C:  BRA    3964
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
394E:  BSF    29.4
3950:  INCF   2E,F
3952:  MOVLW  1E
3954:  MOVWF  xF7
3956:  CALL   0BEC
395A:  MOVLW  0C
395C:  MOVWF  xF1
395E:  CALL   1736
3962:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3964:  BRA    3968
....................          Flanco1 = 0; 
3966:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3968:  BSF    F96.2
396A:  BTFSC  F84.2
396C:  BRA    3998
....................          delay_ms(150); 
396E:  MOVLW  96
3970:  MOVWF  xF7
3972:  CALL   0BEC
....................          if(IZQU){ 
3976:  BSF    F96.2
3978:  BTFSC  F84.2
397A:  BRA    3996
....................             if(Flanco3 == 0){ 
397C:  BTFSC  29.6
397E:  BRA    3996
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3980:  BSF    29.6
3982:  DECF   2E,F
3984:  MOVLW  1E
3986:  MOVWF  xF7
3988:  CALL   0BEC
398C:  MOVLW  0C
398E:  MOVWF  xF1
3990:  CALL   1736
3994:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3996:  BRA    399A
....................         Flanco3 = 0; 
3998:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
399A:  MOVLW  0B
399C:  SUBWF  2E,W
399E:  CLRF   03
39A0:  ADDLW  4B
39A2:  MOVWF  FE9
39A4:  MOVLW  00
39A6:  ADDWFC 03,W
39A8:  MOVWF  FEA
39AA:  BTFSC  FEF.7
39AC:  BRA    39B0
39AE:  BRA    39C4
....................          clave[unidad-11]=9; 
39B0:  MOVLW  0B
39B2:  SUBWF  2E,W
39B4:  CLRF   03
39B6:  ADDLW  4B
39B8:  MOVWF  FE9
39BA:  MOVLW  00
39BC:  ADDWFC 03,W
39BE:  MOVWF  FEA
39C0:  MOVLW  09
39C2:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
39C4:  MOVLW  0B
39C6:  SUBWF  2E,W
39C8:  CLRF   03
39CA:  ADDLW  4B
39CC:  MOVWF  FE9
39CE:  MOVLW  00
39D0:  ADDWFC 03,W
39D2:  MOVWF  FEA
39D4:  BTFSC  FEF.7
39D6:  BRA    39F0
39D8:  MOVF   FEF,W
39DA:  SUBLW  09
39DC:  BC    39F0
....................          clave[unidad-11]=0; 
39DE:  MOVLW  0B
39E0:  SUBWF  2E,W
39E2:  CLRF   03
39E4:  ADDLW  4B
39E6:  MOVWF  FE9
39E8:  MOVLW  00
39EA:  ADDWFC 03,W
39EC:  MOVWF  FEA
39EE:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
39F0:  MOVF   2E,W
39F2:  SUBLW  0A
39F4:  BNC   3A16
....................          unidad=11; 
39F6:  MOVLW  0B
39F8:  MOVWF  2E
....................          Menu=1; 
39FA:  MOVLW  01
39FC:  MOVWF  2B
....................          paso=0; 
39FE:  CLRF   47
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3A00:  CLRF   4B
3A02:  CLRF   4C
3A04:  CLRF   4D
3A06:  CLRF   4E
3A08:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
3A0A:  MOVLW  0B
3A0C:  MOVWF  2E
3A0E:  MOVLW  0C
3A10:  MOVWF  xF1
3A12:  CALL   1736
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3A16:  MOVF   2E,W
3A18:  SUBLW  0E
3A1A:  BTFSC  FD8.0
3A1C:  BRA    3B44
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
3A1E:  MOVF   4F,W
3A20:  SUBWF  4B,W
3A22:  BNZ   3AC0
3A24:  MOVF   50,W
3A26:  SUBWF  4C,W
3A28:  BNZ   3AC0
3A2A:  MOVF   51,W
3A2C:  SUBWF  4D,W
3A2E:  BNZ   3AC0
3A30:  MOVF   52,W
3A32:  SUBWF  4E,W
3A34:  BNZ   3AC0
....................             lcd_gotoxy(1,1); 
3A36:  MOVLW  01
3A38:  MOVWF  xF2
3A3A:  MOVWF  xF3
3A3C:  CALL   16CC
....................             printf(lcd_putc,"                    "); 
3A40:  MOVLW  B4
3A42:  MOVWF  FF6
3A44:  MOVLW  07
3A46:  MOVWF  FF7
3A48:  CALL   179C
....................             lcd_gotoxy(1,2); 
3A4C:  MOVLW  01
3A4E:  MOVWF  xF2
3A50:  MOVLW  02
3A52:  MOVWF  xF3
3A54:  CALL   16CC
....................             printf(lcd_putc,"     Contraseña     "); 
3A58:  MOVLW  CA
3A5A:  MOVWF  FF6
3A5C:  MOVLW  07
3A5E:  MOVWF  FF7
3A60:  CALL   179C
....................             lcd_gotoxy(1,3); 
3A64:  MOVLW  01
3A66:  MOVWF  xF2
3A68:  MOVLW  03
3A6A:  MOVWF  xF3
3A6C:  CALL   16CC
....................             printf(lcd_putc,"      Correcta      "); 
3A70:  MOVLW  E0
3A72:  MOVWF  FF6
3A74:  MOVLW  07
3A76:  MOVWF  FF7
3A78:  CALL   179C
....................             lcd_gotoxy(1,4); 
3A7C:  MOVLW  01
3A7E:  MOVWF  xF2
3A80:  MOVLW  04
3A82:  MOVWF  xF3
3A84:  CALL   16CC
....................             printf(lcd_putc,"                    "); 
3A88:  MOVLW  F6
3A8A:  MOVWF  FF6
3A8C:  MOVLW  07
3A8E:  MOVWF  FF7
3A90:  CALL   179C
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
3A94:  MOVLW  02
3A96:  MOVWF  xE0
3A98:  MOVLW  FA
3A9A:  MOVWF  xF7
3A9C:  CALL   0BEC
3AA0:  DECFSZ xE0,F
3AA2:  BRA    3A98
3AA4:  MOVLW  3D
3AA6:  MOVWF  2B
3AA8:  MOVLW  0B
3AAA:  MOVWF  2E
3AAC:  MOVLW  0C
3AAE:  MOVWF  xF1
3AB0:  CALL   1736
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3AB4:  CLRF   4B
3AB6:  CLRF   4C
3AB8:  CLRF   4D
3ABA:  CLRF   4E
3ABC:  BSF    2A.7
....................          }else{ 
3ABE:  BRA    3B44
....................             lcd_gotoxy(1,1); 
3AC0:  MOVLW  01
3AC2:  MOVWF  xF2
3AC4:  MOVWF  xF3
3AC6:  CALL   16CC
....................             printf(lcd_putc,"                    "); 
3ACA:  MOVLW  0C
3ACC:  MOVWF  FF6
3ACE:  MOVLW  08
3AD0:  MOVWF  FF7
3AD2:  CALL   179C
....................             lcd_gotoxy(1,2); 
3AD6:  MOVLW  01
3AD8:  MOVWF  xF2
3ADA:  MOVLW  02
3ADC:  MOVWF  xF3
3ADE:  CALL   16CC
....................             printf(lcd_putc,"     Contraseña     "); 
3AE2:  MOVLW  22
3AE4:  MOVWF  FF6
3AE6:  MOVLW  08
3AE8:  MOVWF  FF7
3AEA:  CALL   179C
....................             lcd_gotoxy(1,3); 
3AEE:  MOVLW  01
3AF0:  MOVWF  xF2
3AF2:  MOVLW  03
3AF4:  MOVWF  xF3
3AF6:  CALL   16CC
....................             printf(lcd_putc,"     Incorrecta     "); 
3AFA:  MOVLW  38
3AFC:  MOVWF  FF6
3AFE:  MOVLW  08
3B00:  MOVWF  FF7
3B02:  CALL   179C
....................             lcd_gotoxy(1,4); 
3B06:  MOVLW  01
3B08:  MOVWF  xF2
3B0A:  MOVLW  04
3B0C:  MOVWF  xF3
3B0E:  CALL   16CC
....................             printf(lcd_putc,"                    "); 
3B12:  MOVLW  4E
3B14:  MOVWF  FF6
3B16:  MOVLW  08
3B18:  MOVWF  FF7
3B1A:  CALL   179C
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
3B1E:  MOVLW  02
3B20:  MOVWF  xE0
3B22:  MOVLW  FA
3B24:  MOVWF  xF7
3B26:  CALL   0BEC
3B2A:  DECFSZ xE0,F
3B2C:  BRA    3B22
3B2E:  MOVLW  0B
3B30:  MOVWF  2E
3B32:  MOVLW  0C
3B34:  MOVWF  xF1
3B36:  CALL   1736
3B3A:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3B3C:  CLRF   4B
3B3E:  CLRF   4C
3B40:  CLRF   4D
3B42:  CLRF   4E
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3B44:  MOVF   2B,W
3B46:  SUBLW  3D
3B48:  BTFSS  FD8.2
3B4A:  BRA    3EDC
....................       EliminaRuido(); 
3B4C:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3B50:  MOVLW  01
3B52:  MOVWF  xF2
3B54:  MOVWF  xF3
3B56:  CALL   16CC
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
3B5A:  MOVLW  64
3B5C:  MOVWF  FF6
3B5E:  MOVLW  08
3B60:  MOVWF  FF7
3B62:  CALL   179C
....................          lcd_gotoxy(1,2); 
3B66:  MOVLW  01
3B68:  MOVWF  xF2
3B6A:  MOVLW  02
3B6C:  MOVWF  xF3
3B6E:  CALL   16CC
....................          printf(lcd_putc,"     Contraseña     "); 
3B72:  MOVLW  7A
3B74:  MOVWF  FF6
3B76:  MOVLW  08
3B78:  MOVWF  FF7
3B7A:  CALL   179C
....................          lcd_gotoxy(1,3); 
3B7E:  MOVLW  01
3B80:  MOVWF  xF2
3B82:  MOVLW  03
3B84:  MOVWF  xF3
3B86:  CALL   16CC
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3B8A:  MOVLW  90
3B8C:  MOVWF  FF6
3B8E:  MOVLW  08
3B90:  MOVWF  FF7
3B92:  MOVLW  0A
3B94:  MOVWF  xE4
3B96:  CALL   1824
3B9A:  MOVFF  4B,E0
3B9E:  MOVLW  1F
3BA0:  MOVWF  xE1
3BA2:  CALL   1B2E
3BA6:  MOVFF  4C,E0
3BAA:  MOVLW  1F
3BAC:  MOVWF  xE1
3BAE:  CALL   1B2E
3BB2:  MOVFF  4D,E0
3BB6:  MOVLW  1F
3BB8:  MOVWF  xE1
3BBA:  CALL   1B2E
3BBE:  MOVFF  4E,E0
3BC2:  MOVLW  1F
3BC4:  MOVWF  xE1
3BC6:  CALL   1B2E
3BCA:  MOVLW  20
3BCC:  MOVWF  xF1
3BCE:  CALL   1736
3BD2:  MOVLW  20
3BD4:  MOVWF  xF1
3BD6:  CALL   1736
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3BDA:  MOVFF  2E,F2
3BDE:  MOVLW  04
3BE0:  MOVWF  xF3
3BE2:  CALL   16CC
....................          lcd_putc(t[2]); 
3BE6:  MOVFF  4A,F1
3BEA:  CALL   1736
....................           
....................          if(unidad>11&&unidad<14){ 
3BEE:  MOVF   2E,W
3BF0:  SUBLW  0B
3BF2:  BC    3C12
3BF4:  MOVF   2E,W
3BF6:  SUBLW  0D
3BF8:  BNC   3C12
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3BFA:  MOVLW  01
3BFC:  SUBWF  2E,W
3BFE:  MOVWF  xE0
3C00:  MOVWF  xF2
3C02:  MOVLW  04
3C04:  MOVWF  xF3
3C06:  CALL   16CC
....................             lcd_putc(t[1]); 
3C0A:  MOVFF  49,F1
3C0E:  CALL   1736
....................          } 
....................           
....................          Cambio=OFF; 
3C12:  BCF    2A.7
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
3C14:  BSF    F92.5
3C16:  BTFSC  F80.5
3C18:  BRA    3C4C
....................          delay_ms(20); 
3C1A:  MOVLW  14
3C1C:  MOVWF  xF7
3C1E:  CALL   0BEC
....................          if(UP){ 
3C22:  BSF    F92.5
3C24:  BTFSC  F80.5
3C26:  BRA    3C4A
....................             if(Flanco == 0) { 
3C28:  BTFSC  29.3
3C2A:  BRA    3C4A
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3C2C:  MOVLW  0B
3C2E:  SUBWF  2E,W
3C30:  CLRF   03
3C32:  ADDLW  4B
3C34:  MOVWF  FE9
3C36:  MOVLW  00
3C38:  ADDWFC 03,W
3C3A:  MOVWF  FEA
3C3C:  INCF   FEF,F
3C3E:  BSF    29.3
3C40:  MOVLW  1E
3C42:  MOVWF  xF7
3C44:  CALL   0BEC
3C48:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3C4A:  BRA    3C4E
....................          Flanco = 0; 
3C4C:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3C4E:  BSF    F96.0
3C50:  BTFSC  F84.0
3C52:  BRA    3C86
....................          delay_ms(20); 
3C54:  MOVLW  14
3C56:  MOVWF  xF7
3C58:  CALL   0BEC
....................          if(DOWN){ 
3C5C:  BSF    F96.0
3C5E:  BTFSC  F84.0
3C60:  BRA    3C84
....................             if(Flanco2 == 0) { 
3C62:  BTFSC  29.5
3C64:  BRA    3C84
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3C66:  MOVLW  0B
3C68:  SUBWF  2E,W
3C6A:  CLRF   03
3C6C:  ADDLW  4B
3C6E:  MOVWF  FE9
3C70:  MOVLW  00
3C72:  ADDWFC 03,W
3C74:  MOVWF  FEA
3C76:  DECF   FEF,F
3C78:  BSF    29.5
3C7A:  MOVLW  1E
3C7C:  MOVWF  xF7
3C7E:  CALL   0BEC
3C82:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3C84:  BRA    3C88
....................          Flanco2 = 0; 
3C86:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3C88:  BSF    F96.1
3C8A:  BTFSC  F84.1
3C8C:  BRA    3CB0
....................          if(RIGHT){ 
3C8E:  BSF    F96.1
3C90:  BTFSC  F84.1
3C92:  BRA    3CAE
....................             if(Flanco1 == 0) { 
3C94:  BTFSC  29.4
3C96:  BRA    3CAE
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3C98:  BSF    29.4
3C9A:  INCF   2E,F
3C9C:  MOVLW  1E
3C9E:  MOVWF  xF7
3CA0:  CALL   0BEC
3CA4:  MOVLW  0C
3CA6:  MOVWF  xF1
3CA8:  CALL   1736
3CAC:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3CAE:  BRA    3CB2
....................          Flanco1 = 0; 
3CB0:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3CB2:  BSF    F96.2
3CB4:  BTFSC  F84.2
3CB6:  BRA    3CE2
....................          delay_ms(150); 
3CB8:  MOVLW  96
3CBA:  MOVWF  xF7
3CBC:  CALL   0BEC
....................          if(IZQU){ 
3CC0:  BSF    F96.2
3CC2:  BTFSC  F84.2
3CC4:  BRA    3CE0
....................             if(Flanco3 == 0){ 
3CC6:  BTFSC  29.6
3CC8:  BRA    3CE0
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3CCA:  BSF    29.6
3CCC:  DECF   2E,F
3CCE:  MOVLW  1E
3CD0:  MOVWF  xF7
3CD2:  CALL   0BEC
3CD6:  MOVLW  0C
3CD8:  MOVWF  xF1
3CDA:  CALL   1736
3CDE:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3CE0:  BRA    3CE4
....................         Flanco3 = 0; 
3CE2:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3CE4:  MOVLW  0B
3CE6:  SUBWF  2E,W
3CE8:  CLRF   03
3CEA:  ADDLW  4B
3CEC:  MOVWF  FE9
3CEE:  MOVLW  00
3CF0:  ADDWFC 03,W
3CF2:  MOVWF  FEA
3CF4:  BTFSC  FEF.7
3CF6:  BRA    3CFA
3CF8:  BRA    3D0E
....................          clave[unidad-11]=9; 
3CFA:  MOVLW  0B
3CFC:  SUBWF  2E,W
3CFE:  CLRF   03
3D00:  ADDLW  4B
3D02:  MOVWF  FE9
3D04:  MOVLW  00
3D06:  ADDWFC 03,W
3D08:  MOVWF  FEA
3D0A:  MOVLW  09
3D0C:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3D0E:  MOVLW  0B
3D10:  SUBWF  2E,W
3D12:  CLRF   03
3D14:  ADDLW  4B
3D16:  MOVWF  FE9
3D18:  MOVLW  00
3D1A:  ADDWFC 03,W
3D1C:  MOVWF  FEA
3D1E:  BTFSC  FEF.7
3D20:  BRA    3D3A
3D22:  MOVF   FEF,W
3D24:  SUBLW  09
3D26:  BC    3D3A
....................          clave[unidad-11]=0; 
3D28:  MOVLW  0B
3D2A:  SUBWF  2E,W
3D2C:  CLRF   03
3D2E:  ADDLW  4B
3D30:  MOVWF  FE9
3D32:  MOVLW  00
3D34:  ADDWFC 03,W
3D36:  MOVWF  FEA
3D38:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3D3A:  MOVF   2E,W
3D3C:  SUBLW  0A
3D3E:  BNC   3D5E
....................          unidad=11; 
3D40:  MOVLW  0B
3D42:  MOVWF  2E
....................          Menu=1; 
3D44:  MOVLW  01
3D46:  MOVWF  2B
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3D48:  CLRF   4B
3D4A:  CLRF   4C
3D4C:  CLRF   4D
3D4E:  CLRF   4E
3D50:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
3D52:  MOVLW  0B
3D54:  MOVWF  2E
3D56:  MOVLW  0C
3D58:  MOVWF  xF1
3D5A:  CALL   1736
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
3D5E:  MOVF   2E,W
3D60:  SUBLW  0E
3D62:  BTFSC  FD8.0
3D64:  BRA    3EDC
....................          lcd_gotoxy(1,1); 
3D66:  MOVLW  01
3D68:  MOVWF  xF2
3D6A:  MOVWF  xF3
3D6C:  CALL   16CC
....................          printf(lcd_putc,"                    "); 
3D70:  MOVLW  A6
3D72:  MOVWF  FF6
3D74:  MOVLW  08
3D76:  MOVWF  FF7
3D78:  CALL   179C
....................          lcd_gotoxy(1,2); 
3D7C:  MOVLW  01
3D7E:  MOVWF  xF2
3D80:  MOVLW  02
3D82:  MOVWF  xF3
3D84:  CALL   16CC
....................          printf(lcd_putc,"     Contraseña     "); 
3D88:  MOVLW  BC
3D8A:  MOVWF  FF6
3D8C:  MOVLW  08
3D8E:  MOVWF  FF7
3D90:  CALL   179C
....................          lcd_gotoxy(1,3); 
3D94:  MOVLW  01
3D96:  MOVWF  xF2
3D98:  MOVLW  03
3D9A:  MOVWF  xF3
3D9C:  CALL   16CC
....................          printf(lcd_putc,"     Almacenada     "); 
3DA0:  MOVLW  D2
3DA2:  MOVWF  FF6
3DA4:  MOVLW  08
3DA6:  MOVWF  FF7
3DA8:  CALL   179C
....................          lcd_gotoxy(1,4); 
3DAC:  MOVLW  01
3DAE:  MOVWF  xF2
3DB0:  MOVLW  04
3DB2:  MOVWF  xF3
3DB4:  CALL   16CC
....................          printf(lcd_putc,"                    "); 
3DB8:  MOVLW  E8
3DBA:  MOVWF  FF6
3DBC:  MOVLW  08
3DBE:  MOVWF  FF7
3DC0:  CALL   179C
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3DC4:  CLRF   FA9
3DC6:  MOVFF  4B,FA8
3DCA:  BCF    FA6.6
3DCC:  BCF    FA6.7
3DCE:  BSF    FA6.2
3DD0:  MOVF   FF2,W
3DD2:  MOVWF  00
3DD4:  BCF    FF2.6
3DD6:  BCF    FF2.7
3DD8:  MOVLB  F
3DDA:  MOVLW  55
3DDC:  MOVWF  FA7
3DDE:  MOVLW  AA
3DE0:  MOVWF  FA7
3DE2:  BSF    FA6.1
3DE4:  BTFSC  FA6.1
3DE6:  BRA    3DE4
3DE8:  BCF    FA6.2
3DEA:  MOVF   00,W
3DEC:  IORWF  FF2,F
3DEE:  MOVLW  14
3DF0:  MOVLB  0
3DF2:  MOVWF  xF7
3DF4:  CALL   0BEC
3DF8:  MOVLW  01
3DFA:  MOVWF  FA9
3DFC:  MOVFF  4C,FA8
3E00:  BCF    FA6.6
3E02:  BCF    FA6.7
3E04:  BSF    FA6.2
3E06:  MOVF   FF2,W
3E08:  MOVWF  00
3E0A:  BCF    FF2.6
3E0C:  BCF    FF2.7
3E0E:  MOVLB  F
3E10:  MOVLW  55
3E12:  MOVWF  FA7
3E14:  MOVLW  AA
3E16:  MOVWF  FA7
3E18:  BSF    FA6.1
3E1A:  BTFSC  FA6.1
3E1C:  BRA    3E1A
3E1E:  BCF    FA6.2
3E20:  MOVF   00,W
3E22:  IORWF  FF2,F
3E24:  MOVLW  14
3E26:  MOVLB  0
3E28:  MOVWF  xF7
3E2A:  CALL   0BEC
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3E2E:  MOVLW  02
3E30:  MOVWF  FA9
3E32:  MOVFF  4D,FA8
3E36:  BCF    FA6.6
3E38:  BCF    FA6.7
3E3A:  BSF    FA6.2
3E3C:  MOVF   FF2,W
3E3E:  MOVWF  00
3E40:  BCF    FF2.6
3E42:  BCF    FF2.7
3E44:  MOVLB  F
3E46:  MOVLW  55
3E48:  MOVWF  FA7
3E4A:  MOVLW  AA
3E4C:  MOVWF  FA7
3E4E:  BSF    FA6.1
3E50:  BTFSC  FA6.1
3E52:  BRA    3E50
3E54:  BCF    FA6.2
3E56:  MOVF   00,W
3E58:  IORWF  FF2,F
3E5A:  MOVLW  14
3E5C:  MOVLB  0
3E5E:  MOVWF  xF7
3E60:  CALL   0BEC
3E64:  MOVLW  03
3E66:  MOVWF  FA9
3E68:  MOVFF  4E,FA8
3E6C:  BCF    FA6.6
3E6E:  BCF    FA6.7
3E70:  BSF    FA6.2
3E72:  MOVF   FF2,W
3E74:  MOVWF  00
3E76:  BCF    FF2.6
3E78:  BCF    FF2.7
3E7A:  MOVLB  F
3E7C:  MOVLW  55
3E7E:  MOVWF  FA7
3E80:  MOVLW  AA
3E82:  MOVWF  FA7
3E84:  BSF    FA6.1
3E86:  BTFSC  FA6.1
3E88:  BRA    3E86
3E8A:  BCF    FA6.2
3E8C:  MOVF   00,W
3E8E:  IORWF  FF2,F
3E90:  MOVLW  14
3E92:  MOVLB  0
3E94:  MOVWF  xF7
3E96:  CALL   0BEC
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3E9A:  MOVLW  02
3E9C:  MOVWF  xE0
3E9E:  MOVLW  FA
3EA0:  MOVWF  xF7
3EA2:  CALL   0BEC
3EA6:  DECFSZ xE0,F
3EA8:  BRA    3E9E
3EAA:  MOVLW  01
3EAC:  MOVWF  2B
3EAE:  CLRF   47
3EB0:  MOVLW  02
3EB2:  MOVWF  2F
3EB4:  MOVWF  31
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3EB6:  MOVFF  4B,4F
3EBA:  MOVFF  4C,50
3EBE:  MOVFF  4D,51
3EC2:  MOVFF  4E,52
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3EC6:  CLRF   4B
3EC8:  CLRF   4C
3ECA:  CLRF   4D
3ECC:  CLRF   4E
3ECE:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f");          
3ED0:  MOVLW  0B
3ED2:  MOVWF  2E
3ED4:  MOVLW  0C
3ED6:  MOVWF  xF1
3ED8:  CALL   1736
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3EDC:  MOVF   2B,W
3EDE:  SUBLW  04
3EE0:  BTFSS  FD8.2
3EE2:  BRA    40FE
....................    EliminaRuido(); 
3EE4:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3EE8:  MOVLW  01
3EEA:  MOVWF  xF2
3EEC:  MOVWF  xF3
3EEE:  CALL   16CC
....................       printf(lcd_putc,"  Duracion Actual   "); 
3EF2:  MOVLW  FE
3EF4:  MOVWF  FF6
3EF6:  MOVLW  08
3EF8:  MOVWF  FF7
3EFA:  CALL   179C
....................       lcd_gotoxy(1,2); 
3EFE:  MOVLW  01
3F00:  MOVWF  xF2
3F02:  MOVLW  02
3F04:  MOVWF  xF3
3F06:  CALL   16CC
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
3F0A:  MOVLW  14
3F0C:  MOVWF  FF6
3F0E:  MOVLW  09
3F10:  MOVWF  FF7
3F12:  MOVLW  0B
3F14:  MOVWF  xE4
3F16:  CALL   1824
3F1A:  MOVLW  08
3F1C:  MOVWF  FE9
3F1E:  MOVFF  5B,E1
3F22:  MOVFF  5A,E0
3F26:  CALL   18D0
3F2A:  MOVLW  20
3F2C:  MOVWF  xF1
3F2E:  CALL   1736
3F32:  MOVLW  20
3F34:  MOVWF  xF1
3F36:  CALL   1736
3F3A:  MOVLW  20
3F3C:  MOVWF  xF1
3F3E:  CALL   1736
....................       lcd_gotoxy(1,4); 
3F42:  MOVLW  01
3F44:  MOVWF  xF2
3F46:  MOVLW  04
3F48:  MOVWF  xF3
3F4A:  CALL   16CC
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3F4E:  MOVLW  28
3F50:  MOVWF  FF6
3F52:  MOVLW  09
3F54:  MOVWF  FF7
3F56:  CALL   179C
....................        
....................       Cambio=OFF; 
3F5A:  BCF    2A.7
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3F5C:  BSF    F92.5
3F5E:  BTFSC  F80.5
3F60:  BRA    40BA
3F62:  BSF    F96.1
3F64:  BTFSC  F84.1
3F66:  BRA    40BA
....................          delay_ms(20); 
3F68:  MOVLW  14
3F6A:  MOVWF  xF7
3F6C:  CALL   0BEC
....................          if(UP && RIGHT){ 
3F70:  BSF    F92.5
3F72:  BTFSC  F80.5
3F74:  BRA    40BA
3F76:  BSF    F96.1
3F78:  BTFSC  F84.1
3F7A:  BRA    40BA
....................             delay_ms(200); 
3F7C:  MOVLW  C8
3F7E:  MOVWF  xF7
3F80:  CALL   0BEC
....................             printf(lcd_putc,"\f"); 
3F84:  MOVLW  0C
3F86:  MOVWF  xF1
3F88:  CALL   1736
....................             lcd_gotoxy(1,2); 
3F8C:  MOVLW  01
3F8E:  MOVWF  xF2
3F90:  MOVLW  02
3F92:  MOVWF  xF3
3F94:  CALL   16CC
....................             printf(lcd_putc," Reset de tiempo "); 
3F98:  MOVLW  3E
3F9A:  MOVWF  FF6
3F9C:  MOVLW  09
3F9E:  MOVWF  FF7
3FA0:  CALL   179C
....................             lcd_gotoxy(1,3); 
3FA4:  MOVLW  01
3FA6:  MOVWF  xF2
3FA8:  MOVLW  03
3FAA:  MOVWF  xF3
3FAC:  CALL   16CC
....................             printf(lcd_putc,"     Exitoso     "); 
3FB0:  MOVLW  50
3FB2:  MOVWF  FF6
3FB4:  MOVLW  09
3FB6:  MOVWF  FF7
3FB8:  CALL   179C
....................             write_eeprom(7,0); 
3FBC:  MOVLW  07
3FBE:  MOVWF  FA9
3FC0:  CLRF   FA8
3FC2:  BCF    FA6.6
3FC4:  BCF    FA6.7
3FC6:  BSF    FA6.2
3FC8:  MOVF   FF2,W
3FCA:  MOVWF  00
3FCC:  BCF    FF2.6
3FCE:  BCF    FF2.7
3FD0:  MOVLB  F
3FD2:  MOVLW  55
3FD4:  MOVWF  FA7
3FD6:  MOVLW  AA
3FD8:  MOVWF  FA7
3FDA:  BSF    FA6.1
3FDC:  BTFSC  FA6.1
3FDE:  BRA    3FDC
3FE0:  BCF    FA6.2
3FE2:  MOVF   00,W
3FE4:  IORWF  FF2,F
....................             delay_ms(20); 
3FE6:  MOVLW  14
3FE8:  MOVLB  0
3FEA:  MOVWF  xF7
3FEC:  CALL   0BEC
....................             write_eeprom(8,0); 
3FF0:  MOVLW  08
3FF2:  MOVWF  FA9
3FF4:  CLRF   FA8
3FF6:  BCF    FA6.6
3FF8:  BCF    FA6.7
3FFA:  BSF    FA6.2
3FFC:  MOVF   FF2,W
3FFE:  MOVWF  00
4000:  BCF    FF2.6
4002:  BCF    FF2.7
4004:  MOVLB  F
4006:  MOVLW  55
4008:  MOVWF  FA7
400A:  MOVLW  AA
400C:  MOVWF  FA7
400E:  BSF    FA6.1
4010:  BTFSC  FA6.1
4012:  BRA    4010
4014:  BCF    FA6.2
4016:  MOVF   00,W
4018:  IORWF  FF2,F
....................             delay_ms(20); 
401A:  MOVLW  14
401C:  MOVLB  0
401E:  MOVWF  xF7
4020:  CALL   0BEC
....................             write_eeprom(9,0); 
4024:  MOVLW  09
4026:  MOVWF  FA9
4028:  CLRF   FA8
402A:  BCF    FA6.6
402C:  BCF    FA6.7
402E:  BSF    FA6.2
4030:  MOVF   FF2,W
4032:  MOVWF  00
4034:  BCF    FF2.6
4036:  BCF    FF2.7
4038:  MOVLB  F
403A:  MOVLW  55
403C:  MOVWF  FA7
403E:  MOVLW  AA
4040:  MOVWF  FA7
4042:  BSF    FA6.1
4044:  BTFSC  FA6.1
4046:  BRA    4044
4048:  BCF    FA6.2
404A:  MOVF   00,W
404C:  IORWF  FF2,F
....................             delay_ms(20); 
404E:  MOVLW  14
4050:  MOVLB  0
4052:  MOVWF  xF7
4054:  CALL   0BEC
....................             write_eeprom(10,0); 
4058:  MOVLW  0A
405A:  MOVWF  FA9
405C:  CLRF   FA8
405E:  BCF    FA6.6
4060:  BCF    FA6.7
4062:  BSF    FA6.2
4064:  MOVF   FF2,W
4066:  MOVWF  00
4068:  BCF    FF2.6
406A:  BCF    FF2.7
406C:  MOVLB  F
406E:  MOVLW  55
4070:  MOVWF  FA7
4072:  MOVLW  AA
4074:  MOVWF  FA7
4076:  BSF    FA6.1
4078:  BTFSC  FA6.1
407A:  BRA    4078
407C:  BCF    FA6.2
407E:  MOVF   00,W
4080:  IORWF  FF2,F
....................             delay_ms(700); 
4082:  MOVLW  04
4084:  MOVLB  0
4086:  MOVWF  xE0
4088:  MOVLW  AF
408A:  MOVWF  xF7
408C:  CALL   0BEC
4090:  DECFSZ xE0,F
4092:  BRA    4088
....................             segundos=0;minutos=0;horas=0; 
4094:  CLRF   34
4096:  CLRF   35
4098:  CLRF   5B
409A:  CLRF   5A
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
409C:  MOVLW  1E
409E:  MOVWF  xF7
40A0:  CALL   0BEC
40A4:  MOVLW  01
40A6:  MOVWF  2B
40A8:  CLRF   47
40AA:  MOVLW  02
40AC:  MOVWF  2F
40AE:  MOVWF  31
40B0:  MOVLW  0C
40B2:  MOVWF  xF1
40B4:  CALL   1736
....................             Cambio=ON; 
40B8:  BSF    2A.7
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
40BA:  BSF    F96.2
40BC:  BTFSC  F84.2
40BE:  BRA    40FC
....................          delay_ms(20); 
40C0:  MOVLW  14
40C2:  MOVWF  xF7
40C4:  CALL   0BEC
....................          if(IZQU){ 
40C8:  BSF    F96.2
40CA:  BTFSC  F84.2
40CC:  BRA    40FA
....................             if(Flanco3 == 0){ 
40CE:  BTFSC  29.6
40D0:  BRA    40FA
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
40D2:  BSF    29.6
40D4:  MOVLW  02
40D6:  MOVWF  xE0
40D8:  MOVLW  FA
40DA:  MOVWF  xF7
40DC:  CALL   0BEC
40E0:  DECFSZ xE0,F
40E2:  BRA    40D8
40E4:  MOVLW  01
40E6:  MOVWF  2B
40E8:  CLRF   47
40EA:  MOVLW  02
40EC:  MOVWF  2F
40EE:  MOVWF  31
40F0:  MOVLW  0C
40F2:  MOVWF  xF1
40F4:  CALL   1736
40F8:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
40FA:  BRA    40FE
....................          Flanco3 = 0; 
40FC:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
40FE:  MOVF   2B,W
4100:  SUBLW  05
4102:  BTFSS  FD8.2
4104:  BRA    435E
....................       EliminaRuido(); 
4106:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
410A:  MOVLW  01
410C:  MOVWF  xF2
410E:  MOVWF  xF3
4110:  CALL   16CC
....................          printf(lcd_putc,"  Zero Point Config "); 
4114:  MOVLW  62
4116:  MOVWF  FF6
4118:  MOVLW  09
411A:  MOVWF  FF7
411C:  CALL   179C
....................          lcd_gotoxy(1,2); 
4120:  MOVLW  01
4122:  MOVWF  xF2
4124:  MOVLW  02
4126:  MOVWF  xF3
4128:  CALL   16CC
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
412C:  MOVLW  05
412E:  MOVWF  xE0
4130:  CALL   2220
4134:  MOVFF  00,E0
4138:  MOVFF  01,E1
413C:  MOVFF  02,E2
4140:  MOVFF  03,E3
4144:  MOVFF  03,F7
4148:  MOVFF  02,F6
414C:  MOVFF  01,F5
4150:  MOVFF  00,F4
4154:  MOVLW  D7
4156:  MOVWF  xFB
4158:  MOVLW  A3
415A:  MOVWF  xFA
415C:  CLRF   xF9
415E:  MOVLW  81
4160:  MOVWF  xF8
4162:  CALL   212E
4166:  MOVFF  00,E0
416A:  MOVFF  01,E1
416E:  MOVFF  02,E2
4172:  MOVFF  03,E3
4176:  MOVLW  78
4178:  MOVWF  FF6
417A:  MOVLW  09
417C:  MOVWF  FF7
417E:  MOVLW  09
4180:  MOVWF  xE4
4182:  CALL   1824
4186:  MOVLW  02
4188:  MOVWF  FE9
418A:  MOVFF  E3,E7
418E:  MOVFF  E2,E6
4192:  MOVFF  E1,E5
4196:  MOVFF  E0,E4
419A:  MOVWF  xE8
419C:  CALL   24D4
41A0:  MOVLW  86
41A2:  MOVWF  FF6
41A4:  MOVLW  09
41A6:  MOVWF  FF7
41A8:  MOVLW  07
41AA:  MOVWF  xE4
41AC:  CALL   1824
....................          lcd_gotoxy(1,3); 
41B0:  MOVLW  01
41B2:  MOVWF  xF2
41B4:  MOVLW  03
41B6:  MOVWF  xF3
41B8:  CALL   16CC
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
41BC:  CLRF   xF1
41BE:  CALL   1CAE
41C2:  MOVFF  00,E0
41C6:  MOVFF  01,E1
41CA:  MOVFF  02,E2
41CE:  MOVFF  03,E3
41D2:  MOVLW  8E
41D4:  MOVWF  FF6
41D6:  MOVLW  09
41D8:  MOVWF  FF7
41DA:  MOVLW  08
41DC:  MOVWF  xE4
41DE:  CALL   1824
41E2:  MOVLW  01
41E4:  MOVWF  FE9
41E6:  MOVFF  E3,E7
41EA:  MOVFF  E2,E6
41EE:  MOVFF  E1,E5
41F2:  MOVFF  E0,E4
41F6:  CLRF   xE8
41F8:  CALL   24D4
....................          lcd_gotoxy(1,4); 
41FC:  MOVLW  01
41FE:  MOVWF  xF2
4200:  MOVLW  04
4202:  MOVWF  xF3
4204:  CALL   16CC
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
4208:  MOVLW  9C
420A:  MOVWF  FF6
420C:  MOVLW  09
420E:  MOVWF  FF7
4210:  MOVLW  07
4212:  MOVWF  xE4
4214:  CALL   1824
4218:  MOVLW  01
421A:  MOVWF  FE9
421C:  MOVFF  C1,E7
4220:  MOVFF  C0,E6
4224:  MOVFF  BF,E5
4228:  MOVFF  BE,E4
422C:  CLRF   xE8
422E:  CALL   24D4
....................           
....................          Cambio=OFF; 
4232:  BCF    2A.7
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
4234:  BSF    F96.1
4236:  BTFSC  F84.1
4238:  BRA    431E
....................          delay_ms(20); 
423A:  MOVLW  14
423C:  MOVWF  xF7
423E:  CALL   0BEC
....................          if(RIGHT){ 
4242:  BSF    F96.1
4244:  BTFSC  F84.1
4246:  BRA    431C
....................             if(Flanco1 == 0){ 
4248:  BTFSC  29.4
424A:  BRA    431C
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
424C:  MOVLW  01
424E:  MOVWF  2B
4250:  CLRF   47
4252:  MOVLW  02
4254:  MOVWF  2F
4256:  MOVWF  31
4258:  MOVLW  0B
425A:  MOVWF  2E
425C:  MOVLW  02
425E:  MOVWF  xE0
4260:  MOVLW  FA
4262:  MOVWF  xF7
4264:  CALL   0BEC
4268:  DECFSZ xE0,F
426A:  BRA    4260
426C:  MOVLW  0C
426E:  MOVWF  xF1
4270:  CALL   1736
....................                G=sensores(0); 
4274:  CLRF   xF1
4276:  CALL   1CAE
427A:  MOVFF  03,C1
427E:  MOVFF  02,C0
4282:  MOVFF  01,BF
4286:  MOVFF  00,BE
....................                G16=(int16)G; 
428A:  MOVFF  C1,F7
428E:  MOVFF  C0,F6
4292:  MOVFF  BF,F5
4296:  MOVFF  BE,F4
429A:  CALL   265A
429E:  MOVFF  02,5D
42A2:  MOVFF  01,5C
....................                G_l=G16; G_h=(G16>>8); 
42A6:  MOVFF  5C,38
42AA:  MOVFF  5D,39
....................                 
....................                write_eeprom(11,G_l); 
42AE:  MOVLW  0B
42B0:  MOVWF  FA9
42B2:  MOVFF  38,FA8
42B6:  BCF    FA6.6
42B8:  BCF    FA6.7
42BA:  BSF    FA6.2
42BC:  MOVF   FF2,W
42BE:  MOVWF  00
42C0:  BCF    FF2.6
42C2:  BCF    FF2.7
42C4:  MOVLB  F
42C6:  MOVLW  55
42C8:  MOVWF  FA7
42CA:  MOVLW  AA
42CC:  MOVWF  FA7
42CE:  BSF    FA6.1
42D0:  BTFSC  FA6.1
42D2:  BRA    42D0
42D4:  BCF    FA6.2
42D6:  MOVF   00,W
42D8:  IORWF  FF2,F
....................                delay_ms(20); 
42DA:  MOVLW  14
42DC:  MOVLB  0
42DE:  MOVWF  xF7
42E0:  CALL   0BEC
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
42E4:  MOVLW  0C
42E6:  MOVWF  FA9
42E8:  MOVFF  39,FA8
42EC:  BCF    FA6.6
42EE:  BCF    FA6.7
42F0:  BSF    FA6.2
42F2:  MOVF   FF2,W
42F4:  MOVWF  00
42F6:  BCF    FF2.6
42F8:  BCF    FF2.7
42FA:  MOVLB  F
42FC:  MOVLW  55
42FE:  MOVWF  FA7
4300:  MOVLW  AA
4302:  MOVWF  FA7
4304:  BSF    FA6.1
4306:  BTFSC  FA6.1
4308:  BRA    4306
430A:  BCF    FA6.2
430C:  MOVF   00,W
430E:  IORWF  FF2,F
....................                delay_ms(20); 
4310:  MOVLW  14
4312:  MOVLB  0
4314:  MOVWF  xF7
4316:  CALL   0BEC
....................                Cambio=ON; 
431A:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
431C:  BRA    4320
....................          Flanco1 = 0; 
431E:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
4320:  BSF    F96.2
4322:  BTFSC  F84.2
4324:  BRA    435C
....................          delay_ms(20); 
4326:  MOVLW  14
4328:  MOVWF  xF7
432A:  CALL   0BEC
....................          if(IZQU){ 
432E:  BSF    F96.2
4330:  BTFSC  F84.2
4332:  BRA    435A
....................             if(Flanco3 == 0){ 
4334:  BTFSC  29.6
4336:  BRA    435A
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4338:  MOVLW  01
433A:  MOVWF  2B
433C:  CLRF   47
433E:  MOVLW  02
4340:  MOVWF  2F
4342:  MOVWF  31
4344:  MOVLW  0B
4346:  MOVWF  2E
4348:  MOVLW  1E
434A:  MOVWF  xF7
434C:  CALL   0BEC
4350:  MOVLW  0C
4352:  MOVWF  xF1
4354:  CALL   1736
....................                Cambio=ON; 
4358:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
435A:  BRA    435E
....................          Flanco3 = 0; 
435C:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
435E:  MOVF   2B,W
4360:  SUBLW  06
4362:  BTFSS  FD8.2
4364:  BRA    448E
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
4366:  BTG    2A.4
4368:  BSF    29.4
436A:  MOVLW  01
436C:  MOVWF  2B
436E:  CLRF   47
....................                        
....................             if(estadoalarma==1) 
4370:  BTFSS  2A.4
4372:  BRA    43D4
....................             {estadoalarma=1; 
4374:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
4376:  MOVLW  01
4378:  MOVWF  xF2
437A:  MOVWF  xF3
437C:  CALL   16CC
....................                printf(lcd_putc,"                    "); 
4380:  MOVLW  AA
4382:  MOVWF  FF6
4384:  MOVLW  09
4386:  MOVWF  FF7
4388:  CALL   179C
....................                lcd_gotoxy(1,2); 
438C:  MOVLW  01
438E:  MOVWF  xF2
4390:  MOVLW  02
4392:  MOVWF  xF3
4394:  CALL   16CC
....................                printf(lcd_putc,"        Activo      "); 
4398:  MOVLW  C0
439A:  MOVWF  FF6
439C:  MOVLW  09
439E:  MOVWF  FF7
43A0:  CALL   179C
....................                lcd_gotoxy(1,3); 
43A4:  MOVLW  01
43A6:  MOVWF  xF2
43A8:  MOVLW  03
43AA:  MOVWF  xF3
43AC:  CALL   16CC
....................                printf(lcd_putc,"        Alarma      "); 
43B0:  MOVLW  D6
43B2:  MOVWF  FF6
43B4:  MOVLW  09
43B6:  MOVWF  FF7
43B8:  CALL   179C
....................                lcd_gotoxy(1,4); 
43BC:  MOVLW  01
43BE:  MOVWF  xF2
43C0:  MOVLW  04
43C2:  MOVWF  xF3
43C4:  CALL   16CC
....................                printf(lcd_putc,"                    ");} 
43C8:  MOVLW  EC
43CA:  MOVWF  FF6
43CC:  MOVLW  09
43CE:  MOVWF  FF7
43D0:  CALL   179C
....................                 
....................             if(estadoalarma==0) 
43D4:  BTFSC  2A.4
43D6:  BRA    4438
....................             {estadoalarma=0; 
43D8:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
43DA:  MOVLW  01
43DC:  MOVWF  xF2
43DE:  MOVWF  xF3
43E0:  CALL   16CC
....................                printf(lcd_putc,"                    "); 
43E4:  MOVLW  02
43E6:  MOVWF  FF6
43E8:  MOVLW  0A
43EA:  MOVWF  FF7
43EC:  CALL   179C
....................                lcd_gotoxy(1,2); 
43F0:  MOVLW  01
43F2:  MOVWF  xF2
43F4:  MOVLW  02
43F6:  MOVWF  xF3
43F8:  CALL   16CC
....................                printf(lcd_putc,"      Desactivo     "); 
43FC:  MOVLW  18
43FE:  MOVWF  FF6
4400:  MOVLW  0A
4402:  MOVWF  FF7
4404:  CALL   179C
....................                lcd_gotoxy(1,3); 
4408:  MOVLW  01
440A:  MOVWF  xF2
440C:  MOVLW  03
440E:  MOVWF  xF3
4410:  CALL   16CC
....................                printf(lcd_putc,"       Alarma       "); 
4414:  MOVLW  2E
4416:  MOVWF  FF6
4418:  MOVLW  0A
441A:  MOVWF  FF7
441C:  CALL   179C
....................                lcd_gotoxy(1,4); 
4420:  MOVLW  01
4422:  MOVWF  xF2
4424:  MOVLW  04
4426:  MOVWF  xF3
4428:  CALL   16CC
....................                printf(lcd_putc,"                    ");} 
442C:  MOVLW  44
442E:  MOVWF  FF6
4430:  MOVLW  0A
4432:  MOVWF  FF7
4434:  CALL   179C
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4438:  MOVLW  00
443A:  BTFSC  2A.4
443C:  MOVLW  01
443E:  MOVWF  xE0
4440:  MOVLW  04
4442:  MOVWF  FA9
4444:  MOVFF  E0,FA8
4448:  BCF    FA6.6
444A:  BCF    FA6.7
444C:  BSF    FA6.2
444E:  MOVF   FF2,W
4450:  MOVWF  00
4452:  BCF    FF2.6
4454:  BCF    FF2.7
4456:  MOVLB  F
4458:  MOVLW  55
445A:  MOVWF  FA7
445C:  MOVLW  AA
445E:  MOVWF  FA7
4460:  BSF    FA6.1
4462:  BTFSC  FA6.1
4464:  BRA    4462
4466:  BCF    FA6.2
4468:  MOVF   00,W
446A:  IORWF  FF2,F
446C:  MOVLW  04
446E:  MOVLB  0
4470:  MOVWF  xE0
4472:  MOVLW  FA
4474:  MOVWF  xF7
4476:  CALL   0BEC
447A:  DECFSZ xE0,F
447C:  BRA    4472
447E:  MOVLW  02
4480:  MOVWF  2F
4482:  MOVWF  31
4484:  MOVLW  0C
4486:  MOVWF  xF1
4488:  CALL   1736
....................             Cambio=ON; 
448C:  BSF    2A.7
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
448E:  MOVF   2B,W
4490:  SUBLW  07
4492:  BTFSS  FD8.2
4494:  BRA    462C
....................       if(Vel1>20) 
4496:  MOVF   57,W
4498:  SUBLW  14
449A:  BC    44A0
....................          Vel1=20; 
449C:  MOVLW  14
449E:  MOVWF  57
....................       if(Vel1<1) 
44A0:  MOVF   57,F
44A2:  BNZ   44A8
....................          Vel1=1; 
44A4:  MOVLW  01
44A6:  MOVWF  57
....................        
....................       lcd_gotoxy(1,1); 
44A8:  MOVLW  01
44AA:  MOVWF  xF2
44AC:  MOVWF  xF3
44AE:  CALL   16CC
....................       printf(lcd_putc,"Seleccione Velocidad"); 
44B2:  MOVLW  5A
44B4:  MOVWF  FF6
44B6:  MOVLW  0A
44B8:  MOVWF  FF7
44BA:  CALL   179C
....................       lcd_gotoxy(1,2); 
44BE:  MOVLW  01
44C0:  MOVWF  xF2
44C2:  MOVLW  02
44C4:  MOVWF  xF3
44C6:  CALL   16CC
....................       printf(lcd_putc,"   del Ventilador   "); 
44CA:  MOVLW  70
44CC:  MOVWF  FF6
44CE:  MOVLW  0A
44D0:  MOVWF  FF7
44D2:  CALL   179C
....................       lcd_gotoxy(1,3); 
44D6:  MOVLW  01
44D8:  MOVWF  xF2
44DA:  MOVLW  03
44DC:  MOVWF  xF3
44DE:  CALL   16CC
....................       printf(lcd_putc,"     Vel: %02u       ",Vel1); 
44E2:  MOVLW  86
44E4:  MOVWF  FF6
44E6:  MOVLW  0A
44E8:  MOVWF  FF7
44EA:  MOVLW  0A
44EC:  MOVWF  xE4
44EE:  CALL   1824
44F2:  MOVFF  57,E0
44F6:  MOVLW  01
44F8:  MOVWF  xE1
44FA:  CALL   186A
44FE:  MOVLW  94
4500:  MOVWF  FF6
4502:  MOVLW  0A
4504:  MOVWF  FF7
4506:  MOVLW  07
4508:  MOVWF  xE4
450A:  CALL   1824
....................       lcd_gotoxy(1,4); 
450E:  MOVLW  01
4510:  MOVWF  xF2
4512:  MOVLW  04
4514:  MOVWF  xF3
4516:  CALL   16CC
....................       printf(lcd_putc,"                    ");       
451A:  MOVLW  9C
451C:  MOVWF  FF6
451E:  MOVLW  0A
4520:  MOVWF  FF7
4522:  CALL   179C
....................        
....................       if(UP && Vel1<20)//Si oprime hacia arriba 
4526:  BSF    F92.5
4528:  BTFSC  F80.5
452A:  BRA    453C
452C:  MOVF   57,W
452E:  SUBLW  13
4530:  BNC   453C
....................       {   
....................          delay_ms(200);Vel1++; 
4532:  MOVLW  C8
4534:  MOVWF  xF7
4536:  CALL   0BEC
453A:  INCF   57,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
453C:  BSF    F96.0
453E:  BTFSC  F84.0
4540:  BRA    4550
4542:  MOVF   57,F
4544:  BZ    4550
....................       {   
....................          delay_ms(200);Vel1--; 
4546:  MOVLW  C8
4548:  MOVWF  xF7
454A:  CALL   0BEC
454E:  DECF   57,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
4550:  BSF    F96.1
4552:  BTFSC  F84.1
4554:  BRA    455A
....................       {            
....................          VelMotor=Vel1; 
4556:  MOVFF  57,D1
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
455A:  BSF    F96.2
455C:  BTFSC  F84.2
455E:  BRA    462C
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4560:  MOVLW  64
4562:  MOVWF  xF7
4564:  CALL   0BEC
4568:  MOVLW  02
456A:  MOVWF  2F
456C:  MOVWF  31
456E:  MOVLW  0C
4570:  MOVWF  xF1
4572:  CALL   1736
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
4576:  MOVLW  0D
4578:  MOVWF  FA9
457A:  MOVFF  57,FA8
457E:  BCF    FA6.6
4580:  BCF    FA6.7
4582:  BSF    FA6.2
4584:  MOVF   FF2,W
4586:  MOVWF  00
4588:  BCF    FF2.6
458A:  BCF    FF2.7
458C:  MOVLB  F
458E:  MOVLW  55
4590:  MOVWF  FA7
4592:  MOVLW  AA
4594:  MOVWF  FA7
4596:  BSF    FA6.1
4598:  BTFSC  FA6.1
459A:  BRA    4598
459C:  BCF    FA6.2
459E:  MOVF   00,W
45A0:  IORWF  FF2,F
....................          delay_ms(20); 
45A2:  MOVLW  14
45A4:  MOVLB  0
45A6:  MOVWF  xF7
45A8:  CALL   0BEC
....................          lcd_gotoxy(1,1); 
45AC:  MOVLW  01
45AE:  MOVWF  xF2
45B0:  MOVWF  xF3
45B2:  CALL   16CC
....................          printf(lcd_putc,"                    "); 
45B6:  MOVLW  B2
45B8:  MOVWF  FF6
45BA:  MOVLW  0A
45BC:  MOVWF  FF7
45BE:  CALL   179C
....................          lcd_gotoxy(1,2); 
45C2:  MOVLW  01
45C4:  MOVWF  xF2
45C6:  MOVLW  02
45C8:  MOVWF  xF3
45CA:  CALL   16CC
....................          printf(lcd_putc,"     Velocidad      "); 
45CE:  MOVLW  C8
45D0:  MOVWF  FF6
45D2:  MOVLW  0A
45D4:  MOVWF  FF7
45D6:  CALL   179C
....................          lcd_gotoxy(1,3); 
45DA:  MOVLW  01
45DC:  MOVWF  xF2
45DE:  MOVLW  03
45E0:  MOVWF  xF3
45E2:  CALL   16CC
....................          printf(lcd_putc,"      Almacenada    "); 
45E6:  MOVLW  DE
45E8:  MOVWF  FF6
45EA:  MOVLW  0A
45EC:  MOVWF  FF7
45EE:  CALL   179C
....................          lcd_gotoxy(1,4); 
45F2:  MOVLW  01
45F4:  MOVWF  xF2
45F6:  MOVLW  04
45F8:  MOVWF  xF3
45FA:  CALL   16CC
....................          printf(lcd_putc,"                    ");  
45FE:  MOVLW  F4
4600:  MOVWF  FF6
4602:  MOVLW  0A
4604:  MOVWF  FF7
4606:  CALL   179C
....................          delay_ms(1000); 
460A:  MOVLW  04
460C:  MOVWF  xE0
460E:  MOVLW  FA
4610:  MOVWF  xF7
4612:  CALL   0BEC
4616:  DECFSZ xE0,F
4618:  BRA    460E
....................          printf(lcd_putc,"\f"); 
461A:  MOVLW  0C
461C:  MOVWF  xF1
461E:  CALL   1736
....................          lcd_init(); 
4622:  CALL   0C7C
....................          Menu=1; paso=0; 
4626:  MOVLW  01
4628:  MOVWF  2B
462A:  CLRF   47
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
462C:  MOVF   2B,W
462E:  SUBLW  32
4630:  BTFSS  FD8.2
4632:  GOTO   4DA2
....................    if(Lectura==1){ 
4636:  BTFSS  2A.0
4638:  BRA    496C
....................       Lectura=0; 
463A:  BCF    2A.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
463C:  MOVLW  08
463E:  MOVWF  xE0
4640:  CALL   2220
4644:  MOVFF  03,BD
4648:  MOVFF  02,BC
464C:  MOVFF  01,BB
4650:  MOVFF  00,BA
....................       CaidaPresion=CaidaPresion*4.02; 
4654:  MOVFF  BD,F7
4658:  MOVFF  BC,F6
465C:  MOVFF  BB,F5
4660:  MOVFF  BA,F4
4664:  MOVLW  D7
4666:  MOVWF  xFB
4668:  MOVLW  A3
466A:  MOVWF  xFA
466C:  CLRF   xF9
466E:  MOVLW  81
4670:  MOVWF  xF8
4672:  CALL   212E
4676:  MOVFF  03,BD
467A:  MOVFF  02,BC
467E:  MOVFF  01,BB
4682:  MOVFF  00,BA
....................       if(CaidaPresion<0.1 && estadomv==1){ 
4686:  MOVFF  BD,F7
468A:  MOVFF  BC,F6
468E:  MOVFF  BB,F5
4692:  MOVFF  BA,F4
4696:  MOVLW  CD
4698:  MOVWF  xFB
469A:  MOVLW  CC
469C:  MOVWF  xFA
469E:  MOVLW  4C
46A0:  MOVWF  xF9
46A2:  MOVLW  7B
46A4:  MOVWF  xF8
46A6:  CALL   10EA
46AA:  BNC   46CC
46AC:  BTFSS  29.2
46AE:  BRA    46CC
....................          lcd_gotoxy(1,1); 
46B0:  MOVLW  01
46B2:  MOVWF  xF2
46B4:  MOVWF  xF3
46B6:  CALL   16CC
....................          printf(lcd_putc,"!Verifique Flujo!  ");  
46BA:  MOVLW  0A
46BC:  MOVWF  FF6
46BE:  MOVLW  0B
46C0:  MOVWF  FF7
46C2:  CALL   179C
....................          ActivaBuzzer=1; 
46C6:  MOVLW  01
46C8:  MOVWF  53
....................       }else if(CaidaPresion>=1.0){ 
46CA:  BRA    4754
46CC:  CLRF   xF7
46CE:  CLRF   xF6
46D0:  CLRF   xF5
46D2:  MOVLW  7F
46D4:  MOVWF  xF4
46D6:  MOVFF  BD,FB
46DA:  MOVFF  BC,FA
46DE:  MOVFF  BB,F9
46E2:  MOVFF  BA,F8
46E6:  CALL   10EA
46EA:  BC    46EE
46EC:  BNZ   470A
....................          lcd_gotoxy(1,1); 
46EE:  MOVLW  01
46F0:  MOVWF  xF2
46F2:  MOVWF  xF3
46F4:  CALL   16CC
....................          printf(lcd_putc,"!Verifique Filtro!");  
46F8:  MOVLW  1E
46FA:  MOVWF  FF6
46FC:  MOVLW  0B
46FE:  MOVWF  FF7
4700:  CALL   179C
....................          ActivaBuzzer=1; 
4704:  MOVLW  01
4706:  MOVWF  53
....................       }else{ 
4708:  BRA    4754
....................          lcd_gotoxy(1,1); 
470A:  MOVLW  01
470C:  MOVWF  xF2
470E:  MOVWF  xF3
4710:  CALL   16CC
....................          printf(lcd_putc,"JPCR DP:%3.2f inH2O ",CaidaPresion);   
4714:  MOVLW  32
4716:  MOVWF  FF6
4718:  MOVLW  0B
471A:  MOVWF  FF7
471C:  MOVLW  08
471E:  MOVWF  xE4
4720:  CALL   1824
4724:  MOVLW  02
4726:  MOVWF  FE9
4728:  MOVFF  BD,E7
472C:  MOVFF  BC,E6
4730:  MOVFF  BB,E5
4734:  MOVFF  BA,E4
4738:  MOVWF  xE8
473A:  CALL   24D4
473E:  MOVLW  3F
4740:  MOVWF  FF6
4742:  MOVLW  0B
4744:  MOVWF  FF7
4746:  MOVLW  07
4748:  MOVWF  xE4
474A:  CALL   1824
....................          Buzzer_off; 
474E:  BCF    F8B.0
4750:  BCF    F94.0
....................          ActivaBuzzer=0; 
4752:  CLRF   53
....................       } 
....................       //Saturacion=11*(((float)Vel1-(float)velocidadInicial)/(20.0-(float)velocidadInicial)); 
....................       Saturacion=(CaidaPresion/1.0)*11; 
4754:  MOVFF  BD,F7
4758:  MOVFF  BC,F6
475C:  MOVFF  BB,F5
4760:  MOVFF  BA,F4
4764:  CLRF   xFB
4766:  CLRF   xFA
4768:  CLRF   xF9
476A:  MOVLW  7F
476C:  MOVWF  xF8
476E:  CALL   1D04
4772:  MOVFF  00,E0
4776:  MOVFF  01,E1
477A:  MOVFF  02,E2
477E:  MOVFF  03,E3
4782:  MOVFF  03,F7
4786:  MOVFF  02,F6
478A:  MOVFF  01,F5
478E:  MOVFF  00,F4
4792:  CLRF   xFB
4794:  CLRF   xFA
4796:  MOVLW  30
4798:  MOVWF  xF9
479A:  MOVLW  82
479C:  MOVWF  xF8
479E:  CALL   212E
47A2:  MOVFF  03,B9
47A6:  MOVFF  02,B8
47AA:  MOVFF  01,B7
47AE:  MOVFF  00,B6
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
47B2:  CLRF   40
47B4:  MOVFF  B9,E3
47B8:  MOVFF  B8,E2
47BC:  MOVFF  B7,E1
47C0:  MOVFF  B6,E0
47C4:  CALL   29CC
47C8:  MOVFF  00,E0
47CC:  MOVFF  01,E1
47D0:  MOVFF  02,E2
47D4:  MOVFF  03,E3
47D8:  CLRF   xF9
47DA:  MOVFF  40,F8
47DE:  CALL   0D16
47E2:  MOVFF  03,F7
47E6:  MOVFF  02,F6
47EA:  MOVFF  01,F5
47EE:  MOVFF  00,F4
47F2:  MOVFF  E3,FB
47F6:  MOVFF  E2,FA
47FA:  MOVFF  E1,F9
47FE:  MOVFF  E0,F8
4802:  CALL   10EA
4806:  BNC   4824
....................       { 
....................          lcd_gotoxy(i+8,2); 
4808:  MOVLW  08
480A:  ADDWF  40,W
480C:  MOVWF  xE0
480E:  MOVWF  xF2
4810:  MOVLW  02
4812:  MOVWF  xF3
4814:  CALL   16CC
....................          printf(lcd_putc,"Ñ"); 
4818:  MOVLW  D1
481A:  MOVWF  xF1
481C:  CALL   1736
....................       } 
4820:  INCF   40,F
4822:  BRA    47B4
....................        
....................       for(i=floor(Saturacion);i<11;i++){ 
4824:  MOVFF  B9,E3
4828:  MOVFF  B8,E2
482C:  MOVFF  B7,E1
4830:  MOVFF  B6,E0
4834:  CALL   29CC
4838:  MOVFF  03,F7
483C:  MOVFF  02,F6
4840:  MOVFF  01,F5
4844:  MOVFF  00,F4
4848:  CALL   265A
484C:  MOVFF  01,40
4850:  MOVF   40,W
4852:  SUBLW  0A
4854:  BNC   4872
....................          lcd_gotoxy(i+8,2); 
4856:  MOVLW  08
4858:  ADDWF  40,W
485A:  MOVWF  xE0
485C:  MOVWF  xF2
485E:  MOVLW  02
4860:  MOVWF  xF3
4862:  CALL   16CC
....................          printf(lcd_putc," "); 
4866:  MOVLW  20
4868:  MOVWF  xF1
486A:  CALL   1736
....................       } 
486E:  INCF   40,F
4870:  BRA    4850
....................        
....................       lcd_gotoxy(9,3); 
4872:  MOVLW  09
4874:  MOVWF  xF2
4876:  MOVLW  03
4878:  MOVWF  xF3
487A:  CALL   16CC
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
487E:  MOVLW  48
4880:  MOVWF  FF6
4882:  MOVLW  0B
4884:  MOVWF  FF7
4886:  MOVLW  06
4888:  MOVWF  xE4
488A:  CALL   1824
488E:  MOVFF  3A,E0
4892:  MOVLW  03
4894:  MOVWF  xE1
4896:  CALL   186A
489A:  MOVLW  3A
489C:  MOVWF  xF1
489E:  CALL   1736
48A2:  MOVFF  3B,E0
48A6:  MOVLW  01
48A8:  MOVWF  xE1
48AA:  CALL   186A
....................       EliminaRuido(); 
48AE:  CALL   0004
....................     
....................       lcd_gotoxy(1,2); 
48B2:  MOVLW  01
48B4:  MOVWF  xF2
48B6:  MOVLW  02
48B8:  MOVWF  xF3
48BA:  CALL   16CC
....................       printf(lcd_putc,"Filtro:"); 
48BE:  MOVLW  58
48C0:  MOVWF  FF6
48C2:  MOVLW  0B
48C4:  MOVWF  FF7
48C6:  CALL   179C
....................        
....................       if(estadomv==1){ 
48CA:  BTFSS  29.2
48CC:  BRA    48E8
....................          lcd_gotoxy(1,4); 
48CE:  MOVLW  01
48D0:  MOVWF  xF2
48D2:  MOVLW  04
48D4:  MOVWF  xF3
48D6:  CALL   16CC
....................          printf(lcd_putc,"Motor:ON ");       
48DA:  MOVLW  60
48DC:  MOVWF  FF6
48DE:  MOVLW  0B
48E0:  MOVWF  FF7
48E2:  CALL   179C
....................       }else{ 
48E6:  BRA    4900
....................          lcd_gotoxy(1,4); 
48E8:  MOVLW  01
48EA:  MOVWF  xF2
48EC:  MOVLW  04
48EE:  MOVWF  xF3
48F0:  CALL   16CC
....................          printf(lcd_putc,"Motor:OFF"); 
48F4:  MOVLW  6A
48F6:  MOVWF  FF6
48F8:  MOVLW  0B
48FA:  MOVWF  FF7
48FC:  CALL   179C
....................       } 
....................        
....................       if(estadofl==1){ 
4900:  BTFSS  29.1
4902:  BRA    491E
....................          lcd_gotoxy(1,3); 
4904:  MOVLW  01
4906:  MOVWF  xF2
4908:  MOVLW  03
490A:  MOVWF  xF3
490C:  CALL   16CC
....................          printf(lcd_putc,"Luz:ON "); 
4910:  MOVLW  74
4912:  MOVWF  FF6
4914:  MOVLW  0B
4916:  MOVWF  FF7
4918:  CALL   179C
....................       }else{ 
491C:  BRA    4936
....................          lcd_gotoxy(1,3); 
491E:  MOVLW  01
4920:  MOVWF  xF2
4922:  MOVLW  03
4924:  MOVWF  xF3
4926:  CALL   16CC
....................          printf(lcd_putc,"Luz:OFF"); 
492A:  MOVLW  7C
492C:  MOVWF  FF6
492E:  MOVLW  0B
4930:  MOVWF  FF7
4932:  CALL   179C
....................       }  
....................        
....................       if(estadouv==1) 
4936:  BTFSS  29.0
4938:  BRA    4954
....................       { 
....................          lcd_gotoxy(13,4); 
493A:  MOVLW  0D
493C:  MOVWF  xF2
493E:  MOVLW  04
4940:  MOVWF  xF3
4942:  CALL   16CC
....................          printf(lcd_putc,"UV:ON "); 
4946:  MOVLW  84
4948:  MOVWF  FF6
494A:  MOVLW  0B
494C:  MOVWF  FF7
494E:  CALL   179C
....................       } 
....................       else 
4952:  BRA    496C
....................       {          
....................          lcd_gotoxy(13,4); 
4954:  MOVLW  0D
4956:  MOVWF  xF2
4958:  MOVLW  04
495A:  MOVWF  xF3
495C:  CALL   16CC
....................          printf(lcd_putc,"UV:OFF"); 
4960:  MOVLW  8C
4962:  MOVWF  FF6
4964:  MOVLW  0B
4966:  MOVWF  FF7
4968:  CALL   179C
....................       } 
....................    } 
....................      
....................    if(tiempo_cumplido==1){ 
496C:  BTFSS  29.7
496E:  BRA    4A08
....................       if(estadoalarma==1){ 
4970:  BTFSS  2A.4
4972:  BRA    49FE
....................          printf(lcd_putc,"\f"); 
4974:  MOVLW  0C
4976:  MOVWF  xF1
4978:  CALL   1736
....................          lcd_gotoxy(1,2); 
497C:  MOVLW  01
497E:  MOVWF  xF2
4980:  MOVLW  02
4982:  MOVWF  xF3
4984:  CALL   16CC
....................          printf(lcd_putc,"  Temporizador  de  "); 
4988:  MOVLW  94
498A:  MOVWF  FF6
498C:  MOVLW  0B
498E:  MOVWF  FF7
4990:  CALL   179C
....................          lcd_gotoxy(1,3); 
4994:  MOVLW  01
4996:  MOVWF  xF2
4998:  MOVLW  03
499A:  MOVWF  xF3
499C:  CALL   16CC
....................          printf(lcd_putc," Luz UV  Finalizado "); 
49A0:  MOVLW  AA
49A2:  MOVWF  FF6
49A4:  MOVLW  0B
49A6:  MOVWF  FF7
49A8:  CALL   179C
....................          lcd_gotoxy(1,4); 
49AC:  MOVLW  01
49AE:  MOVWF  xF2
49B0:  MOVLW  04
49B2:  MOVWF  xF3
49B4:  CALL   16CC
....................          printf(lcd_putc,"                    "); 
49B8:  MOVLW  C0
49BA:  MOVWF  FF6
49BC:  MOVLW  0B
49BE:  MOVWF  FF7
49C0:  CALL   179C
....................          lcd_gotoxy(1,1); 
49C4:  MOVLW  01
49C6:  MOVWF  xF2
49C8:  MOVWF  xF3
49CA:  CALL   16CC
....................          printf(lcd_putc,"                    "); 
49CE:  MOVLW  D6
49D0:  MOVWF  FF6
49D2:  MOVLW  0B
49D4:  MOVWF  FF7
49D6:  CALL   179C
....................          for(i=0;i<5;i++) 
49DA:  CLRF   40
49DC:  MOVF   40,W
49DE:  SUBLW  04
49E0:  BNC   49FE
....................          { 
....................             Buzzer_on; 
49E2:  BSF    F8B.0
49E4:  BCF    F94.0
....................             delay_ms(200); 
49E6:  MOVLW  C8
49E8:  MOVWF  xF7
49EA:  CALL   0BEC
....................             Buzzer_off; 
49EE:  BCF    F8B.0
49F0:  BCF    F94.0
....................             delay_ms(200); 
49F2:  MOVLW  C8
49F4:  MOVWF  xF7
49F6:  CALL   0BEC
....................          } 
49FA:  INCF   40,F
49FC:  BRA    49DC
....................       } 
....................       tiempo_cumplido=0; 
49FE:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
4A00:  MOVLW  0C
4A02:  MOVWF  xF1
4A04:  CALL   1736
....................    }    
....................        
....................    if(estadofl==1){ 
4A08:  BTFSS  29.1
4A0A:  BRA    4A2A
....................       Luz_Blanca_on; 
4A0C:  BCF    F8A.4
4A0E:  BCF    F93.4
....................       if(flagfl==0){ 
4A10:  BTFSC  2A.2
4A12:  BRA    4A28
....................          lcd_init();delay_ms(200);lcd_init(); 
4A14:  CALL   0C7C
4A18:  MOVLW  C8
4A1A:  MOVWF  xF7
4A1C:  CALL   0BEC
4A20:  CALL   0C7C
....................          flagfl=1;Cambio=ON; 
4A24:  BSF    2A.2
4A26:  BSF    2A.7
....................       } 
....................    }else{ 
4A28:  BRA    4A46
....................       Luz_Blanca_off; 
4A2A:  BSF    F8A.4
4A2C:  BCF    F93.4
....................       if(flagfl==1){ 
4A2E:  BTFSS  2A.2
4A30:  BRA    4A46
....................          lcd_init();delay_ms(200);lcd_init(); 
4A32:  CALL   0C7C
4A36:  MOVLW  C8
4A38:  MOVWF  xF7
4A3A:  CALL   0BEC
4A3E:  CALL   0C7C
....................          flagfl=0;Cambio=ON; 
4A42:  BCF    2A.2
4A44:  BSF    2A.7
....................       } 
....................    } 
....................       Cambio=OFF; 
4A46:  BCF    2A.7
....................     
....................    if(estadomv==1){  
4A48:  BTFSS  29.2
4A4A:  BRA    4A76
....................       if(flagmv==0){ 
4A4C:  BTFSC  xC2.0
4A4E:  BRA    4A70
....................          VelMotor=6; 
4A50:  MOVLW  06
4A52:  MOVWF  xD1
....................          lcd_init();delay_ms(200);lcd_init(); 
4A54:  CALL   0C7C
4A58:  MOVLW  C8
4A5A:  MOVWF  xF7
4A5C:  CALL   0BEC
4A60:  CALL   0C7C
....................          flagmv=1;Cambio=ON;delay_ms(200); 
4A64:  BSF    xC2.0
4A66:  BSF    2A.7
4A68:  MOVLW  C8
4A6A:  MOVWF  xF7
4A6C:  CALL   0BEC
....................       } 
....................       VelMotor=Vel1; 
4A70:  MOVFF  57,D1
....................    }else{ 
4A74:  BRA    4A90
....................       VelMotor=0; 
4A76:  CLRF   xD1
....................       if(flagmv==1){ 
4A78:  BTFSS  xC2.0
4A7A:  BRA    4A90
....................          lcd_init();delay_ms(200);lcd_init(); 
4A7C:  CALL   0C7C
4A80:  MOVLW  C8
4A82:  MOVWF  xF7
4A84:  CALL   0BEC
4A88:  CALL   0C7C
....................          flagmv=0;Cambio=ON; 
4A8C:  BCF    xC2.0
4A8E:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
4A90:  BTFSS  29.1
4A92:  BRA    4AB2
....................    { 
....................       Luz_Blanca_on; 
4A94:  BCF    F8A.4
4A96:  BCF    F93.4
....................       if(flagfl==0) 
4A98:  BTFSC  2A.2
4A9A:  BRA    4AB0
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4A9C:  CALL   0C7C
4AA0:  MOVLW  C8
4AA2:  MOVWF  xF7
4AA4:  CALL   0BEC
4AA8:  CALL   0C7C
....................          flagfl=1;Cambio=ON; 
4AAC:  BSF    2A.2
4AAE:  BSF    2A.7
....................       } 
....................    } 
....................    else 
4AB0:  BRA    4ACE
....................    { 
....................       Luz_Blanca_off; 
4AB2:  BSF    F8A.4
4AB4:  BCF    F93.4
....................       if(flagfl==1) 
4AB6:  BTFSS  2A.2
4AB8:  BRA    4ACE
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4ABA:  CALL   0C7C
4ABE:  MOVLW  C8
4AC0:  MOVWF  xF7
4AC2:  CALL   0BEC
4AC6:  CALL   0C7C
....................          flagfl=0;Cambio=ON; 
4ACA:  BCF    2A.2
4ACC:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
4ACE:  BTFSS  29.0
4AD0:  BRA    4B7C
....................       Luz_UV_on; 
4AD2:  BCF    F8A.3
4AD4:  BCF    F93.3
....................       tiempo_cumplido=0;       
4AD6:  BCF    29.7
....................       estadomv=0; 
4AD8:  BCF    29.2
....................       VelMotor=0; 
4ADA:  CLRF   xD1
....................       estadofl=0; 
4ADC:  BCF    29.1
....................       Luz_Blanca_off; 
4ADE:  BSF    F8A.4
4AE0:  BCF    F93.4
....................       if(flaguv==0){ 
4AE2:  BTFSC  2A.1
4AE4:  BRA    4B7A
....................          lcd_init();delay_ms(200);lcd_init(); 
4AE6:  CALL   0C7C
4AEA:  MOVLW  C8
4AEC:  MOVWF  xF7
4AEE:  CALL   0BEC
4AF2:  CALL   0C7C
....................          flaguv=1;guardaruv=1;Cambio=ON; 
4AF6:  BSF    2A.1
4AF8:  MOVLW  01
4AFA:  MOVWF  43
4AFC:  BSF    2A.7
....................          write_eeprom(22,estadomv);delay_ms(20); 
4AFE:  MOVLW  00
4B00:  BTFSC  29.2
4B02:  MOVLW  01
4B04:  MOVWF  xE0
4B06:  MOVLW  16
4B08:  MOVWF  FA9
4B0A:  MOVFF  E0,FA8
4B0E:  BCF    FA6.6
4B10:  BCF    FA6.7
4B12:  BSF    FA6.2
4B14:  MOVF   FF2,W
4B16:  MOVWF  00
4B18:  BCF    FF2.6
4B1A:  BCF    FF2.7
4B1C:  MOVLB  F
4B1E:  MOVLW  55
4B20:  MOVWF  FA7
4B22:  MOVLW  AA
4B24:  MOVWF  FA7
4B26:  BSF    FA6.1
4B28:  BTFSC  FA6.1
4B2A:  BRA    4B28
4B2C:  BCF    FA6.2
4B2E:  MOVF   00,W
4B30:  IORWF  FF2,F
4B32:  MOVLW  14
4B34:  MOVLB  0
4B36:  MOVWF  xF7
4B38:  CALL   0BEC
....................          write_eeprom(23,estadofl);delay_ms(20); 
4B3C:  MOVLW  00
4B3E:  BTFSC  29.1
4B40:  MOVLW  01
4B42:  MOVWF  xE0
4B44:  MOVLW  17
4B46:  MOVWF  FA9
4B48:  MOVFF  E0,FA8
4B4C:  BCF    FA6.6
4B4E:  BCF    FA6.7
4B50:  BSF    FA6.2
4B52:  MOVF   FF2,W
4B54:  MOVWF  00
4B56:  BCF    FF2.6
4B58:  BCF    FF2.7
4B5A:  MOVLB  F
4B5C:  MOVLW  55
4B5E:  MOVWF  FA7
4B60:  MOVLW  AA
4B62:  MOVWF  FA7
4B64:  BSF    FA6.1
4B66:  BTFSC  FA6.1
4B68:  BRA    4B66
4B6A:  BCF    FA6.2
4B6C:  MOVF   00,W
4B6E:  IORWF  FF2,F
4B70:  MOVLW  14
4B72:  MOVLB  0
4B74:  MOVWF  xF7
4B76:  CALL   0BEC
....................       } 
....................    }else{ 
4B7A:  BRA    4B9E
....................       estadouv=0; 
4B7C:  BCF    29.0
....................       Luz_UV_off; 
4B7E:  BSF    F8A.3
4B80:  BCF    F93.3
....................       if(flaguv==1){ 
4B82:  BTFSS  2A.1
4B84:  BRA    4B9E
....................          lcd_init();delay_ms(200);lcd_init(); 
4B86:  CALL   0C7C
4B8A:  MOVLW  C8
4B8C:  MOVWF  xF7
4B8E:  CALL   0BEC
4B92:  CALL   0C7C
....................          flaguv=0;guardaruv=1;Cambio=ON; 
4B96:  BCF    2A.1
4B98:  MOVLW  01
4B9A:  MOVWF  43
4B9C:  BSF    2A.7
....................       } 
....................    } 
....................        
....................    if(tdown>=60){ //Si oprimio tecla abajo por 300ms o mas 
4B9E:  MOVF   xC8,F
4BA0:  BNZ   4BA8
4BA2:  MOVF   xC7,W
4BA4:  SUBLW  3B
4BA6:  BC    4BFA
....................       if(!Flanco){ 
4BA8:  BTFSC  29.3
4BAA:  BRA    4BF8
....................          estadofl=!estadofl;Flanco = 1;write_eeprom(23,estadofl);delay_ms(300);Cambio=ON; 
4BAC:  BTG    29.1
4BAE:  BSF    29.3
4BB0:  MOVLW  00
4BB2:  BTFSC  29.1
4BB4:  MOVLW  01
4BB6:  MOVWF  xE0
4BB8:  MOVLW  17
4BBA:  MOVWF  FA9
4BBC:  MOVFF  E0,FA8
4BC0:  BCF    FA6.6
4BC2:  BCF    FA6.7
4BC4:  BSF    FA6.2
4BC6:  MOVF   FF2,W
4BC8:  MOVWF  00
4BCA:  BCF    FF2.6
4BCC:  BCF    FF2.7
4BCE:  MOVLB  F
4BD0:  MOVLW  55
4BD2:  MOVWF  FA7
4BD4:  MOVLW  AA
4BD6:  MOVWF  FA7
4BD8:  BSF    FA6.1
4BDA:  BTFSC  FA6.1
4BDC:  BRA    4BDA
4BDE:  BCF    FA6.2
4BE0:  MOVF   00,W
4BE2:  IORWF  FF2,F
4BE4:  MOVLW  02
4BE6:  MOVLB  0
4BE8:  MOVWF  xE0
4BEA:  MOVLW  96
4BEC:  MOVWF  xF7
4BEE:  CALL   0BEC
4BF2:  DECFSZ xE0,F
4BF4:  BRA    4BEA
4BF6:  BSF    2A.7
....................       } 
....................    }else{ 
4BF8:  BRA    4BFC
....................       Flanco=0; 
4BFA:  BCF    29.3
....................    } 
....................     
....................    if(tright>=60){ //Si oprimio tecla derecha por 300ms o mas 
4BFC:  MOVF   xCA,F
4BFE:  BNZ   4C06
4C00:  MOVF   xC9,W
4C02:  SUBLW  3B
4C04:  BC    4C58
....................       if(!Flanco2){ 
4C06:  BTFSC  29.5
4C08:  BRA    4C56
....................          estadomv=!estadomv;Flanco2 = 1;write_eeprom(22,estadomv);delay_ms(300);Cambio=ON; 
4C0A:  BTG    29.2
4C0C:  BSF    29.5
4C0E:  MOVLW  00
4C10:  BTFSC  29.2
4C12:  MOVLW  01
4C14:  MOVWF  xE0
4C16:  MOVLW  16
4C18:  MOVWF  FA9
4C1A:  MOVFF  E0,FA8
4C1E:  BCF    FA6.6
4C20:  BCF    FA6.7
4C22:  BSF    FA6.2
4C24:  MOVF   FF2,W
4C26:  MOVWF  00
4C28:  BCF    FF2.6
4C2A:  BCF    FF2.7
4C2C:  MOVLB  F
4C2E:  MOVLW  55
4C30:  MOVWF  FA7
4C32:  MOVLW  AA
4C34:  MOVWF  FA7
4C36:  BSF    FA6.1
4C38:  BTFSC  FA6.1
4C3A:  BRA    4C38
4C3C:  BCF    FA6.2
4C3E:  MOVF   00,W
4C40:  IORWF  FF2,F
4C42:  MOVLW  02
4C44:  MOVLB  0
4C46:  MOVWF  xE0
4C48:  MOVLW  96
4C4A:  MOVWF  xF7
4C4C:  CALL   0BEC
4C50:  DECFSZ xE0,F
4C52:  BRA    4C48
4C54:  BSF    2A.7
....................       } 
....................    }else{ 
4C56:  BRA    4C5A
....................       Flanco2=0; 
4C58:  BCF    29.5
....................    } 
....................     
....................    if(tleft>=60){ //Si oprimio tecla izquierda por 300ms o mas 
4C5A:  MOVF   xCC,F
4C5C:  BNZ   4C64
4C5E:  MOVF   xCB,W
4C60:  SUBLW  3B
4C62:  BC    4C78
....................       if(!Flanco3){ 
4C64:  BTFSC  29.6
4C66:  BRA    4C76
....................          delay_ms(150);  
4C68:  MOVLW  96
4C6A:  MOVWF  xF7
4C6C:  CALL   0BEC
....................          estadouv=!estadouv; 
4C70:  BTG    29.0
....................          Cambio=ON; 
4C72:  BSF    2A.7
....................          Flanco3=1; 
4C74:  BSF    29.6
....................       } 
....................    }else{ 
4C76:  BRA    4C7A
....................       Flanco3=0; 
4C78:  BCF    29.6
....................    } 
....................     
....................    if(tup>=60){ //Si oprimio tecla arriba por 300ms o mas 
4C7A:  MOVF   xC6,F
4C7C:  BNZ   4C84
4C7E:  MOVF   xC5,W
4C80:  SUBLW  3B
4C82:  BC    4CBA
....................       if(!Flanco1){ 
4C84:  BTFSC  29.4
4C86:  BRA    4CB8
....................          delay_ms(200); 
4C88:  MOVLW  C8
4C8A:  MOVWF  xF7
4C8C:  CALL   0BEC
....................          printf(lcd_putc,"\f"); 
4C90:  MOVLW  0C
4C92:  MOVWF  xF1
4C94:  CALL   1736
....................          delay_ms(300); 
4C98:  MOVLW  02
4C9A:  MOVWF  xE0
4C9C:  MOVLW  96
4C9E:  MOVWF  xF7
4CA0:  CALL   0BEC
4CA4:  DECFSZ xE0,F
4CA6:  BRA    4C9C
....................          Menu=1;  
4CA8:  MOVLW  01
4CAA:  MOVWF  2B
....................          paso=0; 
4CAC:  CLRF   47
....................          Flecha=2; 
4CAE:  MOVLW  02
4CB0:  MOVWF  2F
....................          Flecha2=2; 
4CB2:  MOVWF  31
....................          Cambio=ON; 
4CB4:  BSF    2A.7
....................          Flanco1=1; 
4CB6:  BSF    29.4
....................       } 
....................    }else{ 
4CB8:  BRA    4CBC
....................       Flanco1=0; 
4CBA:  BCF    29.4
....................    } 
....................        
....................    if(guardaruv==1) 
4CBC:  DECFSZ 43,W
4CBE:  BRA    4D8A
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
4CC0:  MOVLW  07
4CC2:  MOVWF  FA9
4CC4:  MOVFF  34,FA8
4CC8:  BCF    FA6.6
4CCA:  BCF    FA6.7
4CCC:  BSF    FA6.2
4CCE:  MOVF   FF2,W
4CD0:  MOVWF  00
4CD2:  BCF    FF2.6
4CD4:  BCF    FF2.7
4CD6:  MOVLB  F
4CD8:  MOVLW  55
4CDA:  MOVWF  FA7
4CDC:  MOVLW  AA
4CDE:  MOVWF  FA7
4CE0:  BSF    FA6.1
4CE2:  BTFSC  FA6.1
4CE4:  BRA    4CE2
4CE6:  BCF    FA6.2
4CE8:  MOVF   00,W
4CEA:  IORWF  FF2,F
4CEC:  MOVLW  08
4CEE:  MOVWF  FA9
4CF0:  MOVFF  35,FA8
4CF4:  BCF    FA6.6
4CF6:  BCF    FA6.7
4CF8:  BSF    FA6.2
4CFA:  MOVF   FF2,W
4CFC:  MOVWF  00
4CFE:  BCF    FF2.6
4D00:  BCF    FF2.7
4D02:  MOVLW  55
4D04:  MOVWF  FA7
4D06:  MOVLW  AA
4D08:  MOVWF  FA7
4D0A:  BSF    FA6.1
4D0C:  BTFSC  FA6.1
4D0E:  BRA    4D0C
4D10:  BCF    FA6.2
4D12:  MOVF   00,W
4D14:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
4D16:  MOVFF  5A,36
....................       horasH=make8(horas,1); 
4D1A:  MOVFF  5B,37
....................       write_eeprom(9,horasL); 
4D1E:  MOVLW  09
4D20:  MOVWF  FA9
4D22:  MOVFF  36,FA8
4D26:  BCF    FA6.6
4D28:  BCF    FA6.7
4D2A:  BSF    FA6.2
4D2C:  MOVFF  FF2,00
4D30:  BCF    FF2.6
4D32:  BCF    FF2.7
4D34:  MOVLW  55
4D36:  MOVWF  FA7
4D38:  MOVLW  AA
4D3A:  MOVWF  FA7
4D3C:  BSF    FA6.1
4D3E:  BTFSC  FA6.1
4D40:  BRA    4D3E
4D42:  BCF    FA6.2
4D44:  MOVF   00,W
4D46:  IORWF  FF2,F
....................       delay_ms(20); 
4D48:  MOVLW  14
4D4A:  MOVLB  0
4D4C:  MOVWF  xF7
4D4E:  CALL   0BEC
....................       write_eeprom(10,horasH); 
4D52:  MOVLW  0A
4D54:  MOVWF  FA9
4D56:  MOVFF  37,FA8
4D5A:  BCF    FA6.6
4D5C:  BCF    FA6.7
4D5E:  BSF    FA6.2
4D60:  MOVF   FF2,W
4D62:  MOVWF  00
4D64:  BCF    FF2.6
4D66:  BCF    FF2.7
4D68:  MOVLB  F
4D6A:  MOVLW  55
4D6C:  MOVWF  FA7
4D6E:  MOVLW  AA
4D70:  MOVWF  FA7
4D72:  BSF    FA6.1
4D74:  BTFSC  FA6.1
4D76:  BRA    4D74
4D78:  BCF    FA6.2
4D7A:  MOVF   00,W
4D7C:  IORWF  FF2,F
....................       delay_ms(20); 
4D7E:  MOVLW  14
4D80:  MOVLB  0
4D82:  MOVWF  xF7
4D84:  CALL   0BEC
....................       guardaruv=0; 
4D88:  CLRF   43
....................    } 
....................     
....................    if(segundos>=60) 
4D8A:  MOVF   34,W
4D8C:  SUBLW  3B
4D8E:  BC    4D94
....................    { 
....................       segundos=0;minutos++; 
4D90:  CLRF   34
4D92:  INCF   35,F
....................    } 
....................    if(minutos==60) 
4D94:  MOVF   35,W
4D96:  SUBLW  3C
4D98:  BNZ   4DA2
....................    { 
....................       minutos=0;horas++; 
4D9A:  CLRF   35
4D9C:  INCF   5A,F
4D9E:  BTFSC  FD8.2
4DA0:  INCF   5B,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
4DA2:  MOVF   42,W
4DA4:  SUBLW  3B
4DA6:  BC    4DC0
....................    { 
....................       printf(lcd_putc,"\f"); 
4DA8:  MOVLW  0C
4DAA:  MOVWF  xF1
4DAC:  CALL   1736
....................       lcd_init(); 
4DB0:  CALL   0C7C
....................       delay_ms(200); 
4DB4:  MOVLW  C8
4DB6:  MOVWF  xF7
4DB8:  CALL   0BEC
....................       tiemporeset=0; 
4DBC:  CLRF   42
....................       Cambio=ON; 
4DBE:  BSF    2A.7
....................    }    
....................    } 
4DC0:  GOTO   2F22
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
4DC4:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0E3C   NOIESO NOFCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E39   NOBROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0100   NOPBADEN CCP2C1 NOMCLR NOLPT1OSC
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
