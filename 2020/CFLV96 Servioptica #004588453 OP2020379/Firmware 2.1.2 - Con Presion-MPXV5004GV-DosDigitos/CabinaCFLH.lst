CCS PCH C Compiler, Version 4.104, 5967               24-dic.-20 09:05

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Vertical\2020\CFLV96 Servioptica #004588453 OP2020379\Firmware 2.1.2 - Con Presion-MPXV5004GV-DosDigitos\CabinaCFLH.lst

               ROM used: 24176 bytes (74%)
                         Largest free fragment is 8590
               RAM used: 310 (20%) at main() level
                         347 (23%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   2F1C
*
0008:  GOTO   00A6
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   0426
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
00A6:  MOVWF  16
00A8:  MOVFF  FD8,17
00AC:  MOVFF  FE0,18
00B0:  MOVLB  0
00B2:  MOVFF  FE9,1E
00B6:  MOVFF  FEA,19
00BA:  MOVFF  FE1,1A
00BE:  MOVFF  FE2,1B
00C2:  MOVFF  FD9,1C
00C6:  MOVFF  FDA,1D
00CA:  MOVFF  FF3,24
00CE:  MOVFF  FF4,25
00D2:  MOVFF  FFA,26
00D6:  MOVFF  00,20
00DA:  MOVFF  01,21
00DE:  MOVFF  02,22
00E2:  MOVFF  03,23
00E6:  BTFSS  FF2.5
00E8:  GOTO   00F2
00EC:  BTFSC  FF2.2
00EE:  GOTO   03F4
00F2:  BTFSS  FF2.4
00F4:  GOTO   00FE
00F8:  BTFSC  FF2.1
00FA:  GOTO   0248
00FE:  MOVFF  20,00
0102:  MOVFF  21,01
0106:  MOVFF  22,02
010A:  MOVFF  23,03
010E:  MOVFF  1E,FE9
0112:  MOVFF  19,FEA
0116:  BSF    19.7
0118:  MOVFF  1A,FE1
011C:  MOVFF  1B,FE2
0120:  MOVFF  1C,FD9
0124:  MOVFF  1D,FDA
0128:  MOVFF  24,FF3
012C:  MOVFF  25,FF4
0130:  MOVFF  26,FFA
0134:  MOVF   16,W
0136:  MOVFF  18,FE0
013A:  MOVFF  17,FD8
013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOBROWNOUT,NOPUT,NOCPD,NOSTVREN,NOWRT,NOWRTD,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOLPT1OSC,NOXINST,NOICPRT// PLL1 para 4 MHz 
.................... //#use delay(clock=20000000) 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR,NOBROWNOUT 
.................... #use delay(clock=20000000) 
*
0CA2:  MOVLW  01
0CA4:  MOVWF  FEA
0CA6:  MOVLW  49
0CA8:  MOVWF  FE9
0CAA:  MOVF   FEF,W
0CAC:  BZ    0CC8
0CAE:  MOVLW  06
0CB0:  MOVWF  01
0CB2:  CLRF   00
0CB4:  DECFSZ 00,F
0CB6:  BRA    0CB4
0CB8:  DECFSZ 01,F
0CBA:  BRA    0CB2
0CBC:  MOVLW  7B
0CBE:  MOVWF  00
0CC0:  DECFSZ 00,F
0CC2:  BRA    0CC0
0CC4:  DECFSZ FEF,F
0CC6:  BRA    0CAE
0CC8:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
2B8A:  MOVLB  1
2B8C:  BCF    x45.0
....................    y = x; 
2B8E:  MOVFF  139,13E
2B92:  MOVFF  138,13D
2B96:  MOVFF  137,13C
2B9A:  MOVFF  136,13B
....................  
....................    if (x < 0) 
2B9E:  MOVFF  139,149
2BA2:  MOVFF  138,148
2BA6:  MOVFF  137,147
2BAA:  MOVFF  136,146
2BAE:  CLRF   x4D
2BB0:  CLRF   x4C
2BB2:  CLRF   x4B
2BB4:  CLRF   x4A
2BB6:  MOVLB  0
2BB8:  CALL   14E4
2BBC:  BNC   2BC8
....................    { 
....................       s = 1; 
2BBE:  MOVLB  1
2BC0:  BSF    x45.0
....................       y = -y; 
2BC2:  MOVF   x3C,W
2BC4:  XORLW  80
2BC6:  MOVWF  x3C
....................    } 
....................  
....................    if (y <= 32768.0) 
2BC8:  MOVFF  13E,149
2BCC:  MOVFF  13D,148
2BD0:  MOVFF  13C,147
2BD4:  MOVFF  13B,146
2BD8:  MOVLB  1
2BDA:  CLRF   x4D
2BDC:  CLRF   x4C
2BDE:  CLRF   x4B
2BE0:  MOVLW  8E
2BE2:  MOVWF  x4A
2BE4:  MOVLB  0
2BE6:  CALL   14E4
2BEA:  BC    2BEE
2BEC:  BNZ   2C20
....................   res = (float32)(unsigned int16)y; 
2BEE:  MOVFF  13E,149
2BF2:  MOVFF  13D,148
2BF6:  MOVFF  13C,147
2BFA:  MOVFF  13B,146
2BFE:  CALL   23B4
2C02:  MOVFF  02,14B
2C06:  MOVFF  01,14A
2C0A:  CALL   0E06
2C0E:  MOVFF  03,142
2C12:  MOVFF  02,141
2C16:  MOVFF  01,140
2C1A:  MOVFF  00,13F
....................  
....................  else if (y < 10000000.0) 
2C1E:  BRA    2DC6
2C20:  MOVFF  13E,149
2C24:  MOVFF  13D,148
2C28:  MOVFF  13C,147
2C2C:  MOVFF  13B,146
2C30:  MOVLW  80
2C32:  MOVLB  1
2C34:  MOVWF  x4D
2C36:  MOVLW  96
2C38:  MOVWF  x4C
2C3A:  MOVLW  18
2C3C:  MOVWF  x4B
2C3E:  MOVLW  96
2C40:  MOVWF  x4A
2C42:  MOVLB  0
2C44:  CALL   14E4
2C48:  BTFSS  FD8.0
2C4A:  BRA    2DB6
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
2C4C:  MOVFF  13E,149
2C50:  MOVFF  13D,148
2C54:  MOVFF  13C,147
2C58:  MOVFF  13B,146
2C5C:  MOVLB  1
2C5E:  CLRF   x4D
2C60:  CLRF   x4C
2C62:  CLRF   x4B
2C64:  MOVLW  8E
2C66:  MOVWF  x4A
2C68:  MOVLB  0
2C6A:  CALL   0E3C
2C6E:  MOVFF  03,149
2C72:  MOVFF  02,148
2C76:  MOVFF  01,147
2C7A:  MOVFF  00,146
2C7E:  CALL   23B4
2C82:  MOVFF  02,144
2C86:  MOVFF  01,143
....................       y = 32768.0*(y/32768.0 - (float32)l); 
2C8A:  MOVFF  13E,149
2C8E:  MOVFF  13D,148
2C92:  MOVFF  13C,147
2C96:  MOVFF  13B,146
2C9A:  MOVLB  1
2C9C:  CLRF   x4D
2C9E:  CLRF   x4C
2CA0:  CLRF   x4B
2CA2:  MOVLW  8E
2CA4:  MOVWF  x4A
2CA6:  MOVLB  0
2CA8:  CALL   0E3C
2CAC:  MOVFF  00,146
2CB0:  MOVFF  01,147
2CB4:  MOVFF  02,148
2CB8:  MOVFF  03,149
2CBC:  MOVFF  144,14B
2CC0:  MOVFF  143,14A
2CC4:  CALL   0E06
2CC8:  BSF    FD8.1
2CCA:  MOVFF  149,14D
2CCE:  MOVFF  148,14C
2CD2:  MOVFF  147,14B
2CD6:  MOVFF  146,14A
2CDA:  MOVFF  03,151
2CDE:  MOVFF  02,150
2CE2:  MOVFF  01,14F
2CE6:  MOVFF  00,14E
2CEA:  CALL   1E44
2CEE:  MOVLB  1
2CF0:  CLRF   x49
2CF2:  CLRF   x48
2CF4:  CLRF   x47
2CF6:  MOVLW  8E
2CF8:  MOVWF  x46
2CFA:  MOVFF  03,14D
2CFE:  MOVFF  02,14C
2D02:  MOVFF  01,14B
2D06:  MOVFF  00,14A
2D0A:  MOVLB  0
2D0C:  CALL   20BC
2D10:  MOVFF  03,13E
2D14:  MOVFF  02,13D
2D18:  MOVFF  01,13C
2D1C:  MOVFF  00,13B
....................   res = 32768.0*(float32)l; 
2D20:  MOVFF  144,14B
2D24:  MOVFF  143,14A
2D28:  CALL   0E06
2D2C:  MOVLB  1
2D2E:  CLRF   x49
2D30:  CLRF   x48
2D32:  CLRF   x47
2D34:  MOVLW  8E
2D36:  MOVWF  x46
2D38:  MOVFF  03,14D
2D3C:  MOVFF  02,14C
2D40:  MOVFF  01,14B
2D44:  MOVFF  00,14A
2D48:  MOVLB  0
2D4A:  CALL   20BC
2D4E:  MOVFF  03,142
2D52:  MOVFF  02,141
2D56:  MOVFF  01,140
2D5A:  MOVFF  00,13F
....................   res += (float32)(unsigned int16)y; 
2D5E:  MOVFF  13E,149
2D62:  MOVFF  13D,148
2D66:  MOVFF  13C,147
2D6A:  MOVFF  13B,146
2D6E:  CALL   23B4
2D72:  MOVFF  02,14B
2D76:  MOVFF  01,14A
2D7A:  CALL   0E06
2D7E:  BCF    FD8.1
2D80:  MOVFF  142,14D
2D84:  MOVFF  141,14C
2D88:  MOVFF  140,14B
2D8C:  MOVFF  13F,14A
2D90:  MOVFF  03,151
2D94:  MOVFF  02,150
2D98:  MOVFF  01,14F
2D9C:  MOVFF  00,14E
2DA0:  CALL   1E44
2DA4:  MOVFF  03,142
2DA8:  MOVFF  02,141
2DAC:  MOVFF  01,140
2DB0:  MOVFF  00,13F
....................  } 
....................  
....................  else 
2DB4:  BRA    2DC6
....................   res = y; 
2DB6:  MOVFF  13E,142
2DBA:  MOVFF  13D,141
2DBE:  MOVFF  13C,140
2DC2:  MOVFF  13B,13F
....................  
....................  y = y - (float32)(unsigned int16)y; 
2DC6:  MOVFF  13E,149
2DCA:  MOVFF  13D,148
2DCE:  MOVFF  13C,147
2DD2:  MOVFF  13B,146
2DD6:  CALL   23B4
2DDA:  MOVFF  02,14B
2DDE:  MOVFF  01,14A
2DE2:  CALL   0E06
2DE6:  BSF    FD8.1
2DE8:  MOVFF  13E,14D
2DEC:  MOVFF  13D,14C
2DF0:  MOVFF  13C,14B
2DF4:  MOVFF  13B,14A
2DF8:  MOVFF  03,151
2DFC:  MOVFF  02,150
2E00:  MOVFF  01,14F
2E04:  MOVFF  00,14E
2E08:  CALL   1E44
2E0C:  MOVFF  03,13E
2E10:  MOVFF  02,13D
2E14:  MOVFF  01,13C
2E18:  MOVFF  00,13B
....................  
....................  if (s) 
2E1C:  MOVLB  1
2E1E:  BTFSS  x45.0
2E20:  BRA    2E28
....................   res = -res; 
2E22:  MOVF   x40,W
2E24:  XORLW  80
2E26:  MOVWF  x40
....................  
....................  if (y != 0) 
2E28:  MOVFF  13E,149
2E2C:  MOVFF  13D,148
2E30:  MOVFF  13C,147
2E34:  MOVFF  13B,146
2E38:  CLRF   x4D
2E3A:  CLRF   x4C
2E3C:  CLRF   x4B
2E3E:  CLRF   x4A
2E40:  MOVLB  0
2E42:  CALL   14E4
2E46:  BZ    2EC0
....................  { 
....................   if (s == 1 && n == 0) 
2E48:  MOVLB  1
2E4A:  BTFSS  x45.0
2E4C:  BRA    2E86
2E4E:  MOVF   x3A,F
2E50:  BNZ   2E86
....................    res -= 1.0; 
2E52:  BSF    FD8.1
2E54:  MOVFF  142,14D
2E58:  MOVFF  141,14C
2E5C:  MOVFF  140,14B
2E60:  MOVFF  13F,14A
2E64:  CLRF   x51
2E66:  CLRF   x50
2E68:  CLRF   x4F
2E6A:  MOVLW  7F
2E6C:  MOVWF  x4E
2E6E:  MOVLB  0
2E70:  CALL   1E44
2E74:  MOVFF  03,142
2E78:  MOVFF  02,141
2E7C:  MOVFF  01,140
2E80:  MOVFF  00,13F
2E84:  MOVLB  1
....................  
....................   if (s == 0 && n == 1) 
2E86:  BTFSC  x45.0
2E88:  BRA    2EC2
2E8A:  DECFSZ x3A,W
2E8C:  BRA    2EC2
....................    res += 1.0; 
2E8E:  BCF    FD8.1
2E90:  MOVFF  142,14D
2E94:  MOVFF  141,14C
2E98:  MOVFF  140,14B
2E9C:  MOVFF  13F,14A
2EA0:  CLRF   x51
2EA2:  CLRF   x50
2EA4:  CLRF   x4F
2EA6:  MOVLW  7F
2EA8:  MOVWF  x4E
2EAA:  MOVLB  0
2EAC:  CALL   1E44
2EB0:  MOVFF  03,142
2EB4:  MOVFF  02,141
2EB8:  MOVFF  01,140
2EBC:  MOVFF  00,13F
2EC0:  MOVLB  1
....................  } 
....................  if (x == 0) 
2EC2:  MOVFF  139,149
2EC6:  MOVFF  138,148
2ECA:  MOVFF  137,147
2ECE:  MOVFF  136,146
2ED2:  CLRF   x4D
2ED4:  CLRF   x4C
2ED6:  CLRF   x4B
2ED8:  CLRF   x4A
2EDA:  MOVLB  0
2EDC:  CALL   14E4
2EE0:  BNZ   2EEE
....................     res = 0; 
2EE2:  MOVLB  1
2EE4:  CLRF   x42
2EE6:  CLRF   x41
2EE8:  CLRF   x40
2EEA:  CLRF   x3F
2EEC:  MOVLB  0
....................  
....................  return (res); 
2EEE:  MOVFF  13F,00
2EF2:  MOVFF  140,01
2EF6:  MOVFF  141,02
2EFA:  MOVFF  142,03
.................... } 
2EFE:  GOTO   2F1A (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
2F02:  MOVFF  135,139
2F06:  MOVFF  134,138
2F0A:  MOVFF  133,137
2F0E:  MOVFF  132,136
2F12:  MOVLB  1
2F14:  CLRF   x3A
2F16:  MOVLB  0
2F18:  BRA    2B8A
.................... } 
2F1A:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0CCA:  MOVLB  1
0CCC:  SWAPF  x4A,W
0CCE:  ANDLW  F0
0CD0:  MOVWF  00
0CD2:  MOVLW  0F
0CD4:  ANDWF  F83,W
0CD6:  IORWF  00,W
0CD8:  MOVWF  F83
....................       delay_cycles(30);//30 
0CDA:  MOVLW  09
0CDC:  MOVWF  00
0CDE:  DECFSZ 00,F
0CE0:  BRA    0CDE
0CE2:  BRA    0CE4
....................       lcd.enable = 1; 
0CE4:  BSF    F83.3
....................       delay_us(55);//55 
0CE6:  MOVLW  5B
0CE8:  MOVWF  00
0CEA:  DECFSZ 00,F
0CEC:  BRA    0CEA
0CEE:  NOP   
....................       lcd.enable = 0; 
0CF0:  BCF    F83.3
.................... } 
0CF2:  MOVLB  0
0CF4:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0CF6:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0CF8:  MOVLW  01
0CFA:  MOVLB  1
0CFC:  MOVWF  x49
0CFE:  MOVLB  0
0D00:  RCALL  0CA2
....................       lcd.rs = address; 
0D02:  MOVLB  1
0D04:  BTFSS  x47.0
0D06:  BCF    F83.1
0D08:  BTFSC  x47.0
0D0A:  BSF    F83.1
....................       delay_cycles(30);//30 
0D0C:  MOVLW  09
0D0E:  MOVWF  00
0D10:  DECFSZ 00,F
0D12:  BRA    0D10
0D14:  BRA    0D16
....................       lcd.rw = 0; 
0D16:  BCF    F83.2
....................       delay_cycles(30);//30 
0D18:  MOVLW  09
0D1A:  MOVWF  00
0D1C:  DECFSZ 00,F
0D1E:  BRA    0D1C
0D20:  BRA    0D22
....................       lcd.enable = 0; 
0D22:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
0D24:  SWAPF  x48,W
0D26:  MOVWF  x49
0D28:  MOVLW  0F
0D2A:  ANDWF  x49,F
0D2C:  MOVFF  149,14A
0D30:  MOVLB  0
0D32:  RCALL  0CCA
....................       lcd_send_nibble(n & 0xf); 
0D34:  MOVLB  1
0D36:  MOVF   x48,W
0D38:  ANDLW  0F
0D3A:  MOVWF  x49
0D3C:  MOVWF  x4A
0D3E:  MOVLB  0
0D40:  RCALL  0CCA
.................... } 
0D42:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0D44:  MOVLW  00
0D46:  MOVWF  F95
....................     lcd.rs = 0; 
0D48:  BCF    F83.1
....................     lcd.rw = 0; 
0D4A:  BCF    F83.2
....................     lcd.enable = 0; 
0D4C:  BCF    F83.3
....................     delay_ms(15); 
0D4E:  MOVLW  0F
0D50:  MOVLB  1
0D52:  MOVWF  x49
0D54:  MOVLB  0
0D56:  RCALL  0CA2
....................     for(i=1;i<=3;++i) { 
0D58:  MOVLW  01
0D5A:  MOVLB  1
0D5C:  MOVWF  x32
0D5E:  MOVF   x32,W
0D60:  SUBLW  03
0D62:  BNC   0D7C
....................        lcd_send_nibble(3); 
0D64:  MOVLW  03
0D66:  MOVWF  x4A
0D68:  MOVLB  0
0D6A:  RCALL  0CCA
....................        delay_ms(5); 
0D6C:  MOVLW  05
0D6E:  MOVLB  1
0D70:  MOVWF  x49
0D72:  MOVLB  0
0D74:  RCALL  0CA2
....................     } 
0D76:  MOVLB  1
0D78:  INCF   x32,F
0D7A:  BRA    0D5E
....................     lcd_send_nibble(2); 
0D7C:  MOVLW  02
0D7E:  MOVWF  x4A
0D80:  MOVLB  0
0D82:  RCALL  0CCA
....................     for(i=0;i<=3;++i) 
0D84:  MOVLB  1
0D86:  CLRF   x32
0D88:  MOVF   x32,W
0D8A:  SUBLW  03
0D8C:  BNC   0DBA
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0D8E:  CLRF   03
0D90:  MOVF   x32,W
0D92:  MOVFF  FF2,133
0D96:  BCF    FF2.6
0D98:  BCF    FF2.7
0D9A:  MOVLB  0
0D9C:  CALL   0140
0DA0:  MOVLB  1
0DA2:  BTFSC  x33.6
0DA4:  BSF    FF2.6
0DA6:  BTFSC  x33.7
0DA8:  BSF    FF2.7
0DAA:  MOVWF  x33
0DAC:  CLRF   x47
0DAE:  MOVWF  x48
0DB0:  MOVLB  0
0DB2:  RCALL  0CF6
0DB4:  MOVLB  1
0DB6:  INCF   x32,F
0DB8:  BRA    0D88
.................... } 
0DBA:  MOVLB  0
0DBC:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
1C54:  MOVLW  01
1C56:  MOVLB  1
1C58:  SUBWF  x45,W
1C5A:  ADDLW  FC
1C5C:  BC    1C88
1C5E:  ADDLW  04
1C60:  MOVLB  0
1C62:  GOTO   1C9C
....................      case 1 : address=0x80;break; 
1C66:  MOVLW  80
1C68:  MOVLB  1
1C6A:  MOVWF  x46
1C6C:  BRA    1C88
....................      case 2 : address=0xc0;break; 
1C6E:  MOVLW  C0
1C70:  MOVLB  1
1C72:  MOVWF  x46
1C74:  BRA    1C88
....................      case 3 : address=0x94;break; 
1C76:  MOVLW  94
1C78:  MOVLB  1
1C7A:  MOVWF  x46
1C7C:  BRA    1C88
....................      case 4 : address=0xd4;break; 
1C7E:  MOVLW  D4
1C80:  MOVLB  1
1C82:  MOVWF  x46
1C84:  BRA    1C88
1C86:  MOVLB  1
....................    } 
....................    address+=x-1; 
1C88:  MOVLW  01
1C8A:  SUBWF  x44,W
1C8C:  ADDWF  x46,F
....................    lcd_send_byte(0,address); 
1C8E:  CLRF   x47
1C90:  MOVFF  146,148
1C94:  MOVLB  0
1C96:  CALL   0CF6
.................... } 
1C9A:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
1CCE:  MOVLB  1
1CD0:  MOVF   x43,W
1CD2:  SUBLW  F1
1CD4:  BNZ   1CDA
....................    { 
....................       c=238; 
1CD6:  MOVLW  EE
1CD8:  MOVWF  x43
....................    } 
....................    if(c=='Ñ') 
1CDA:  MOVF   x43,W
1CDC:  SUBLW  D1
1CDE:  BNZ   1CE4
....................    { 
....................       c=255; 
1CE0:  MOVLW  FF
1CE2:  MOVWF  x43
....................    } 
....................     
....................    switch (c) { 
1CE4:  MOVF   x43,W
1CE6:  XORLW  0C
1CE8:  MOVLB  0
1CEA:  BZ    1CF6
1CEC:  XORLW  06
1CEE:  BZ    1D16
1CF0:  XORLW  02
1CF2:  BZ    1D28
1CF4:  BRA    1D38
....................      case '\f'   : lcd_send_byte(0,1); 
1CF6:  MOVLB  1
1CF8:  CLRF   x47
1CFA:  MOVLW  01
1CFC:  MOVWF  x48
1CFE:  MOVLB  0
1D00:  CALL   0CF6
....................                    lcdline=1; 
1D04:  MOVLW  01
1D06:  MOVWF  28
....................                    delay_ms(2); 
1D08:  MOVLW  02
1D0A:  MOVLB  1
1D0C:  MOVWF  x49
1D0E:  MOVLB  0
1D10:  CALL   0CA2
....................                                            break; 
1D14:  BRA    1D4A
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
1D16:  INCF   28,F
1D18:  MOVLW  01
1D1A:  MOVLB  1
1D1C:  MOVWF  x44
1D1E:  MOVFF  28,145
1D22:  MOVLB  0
1D24:  RCALL  1C54
1D26:  BRA    1D4A
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
1D28:  MOVLB  1
1D2A:  CLRF   x47
1D2C:  MOVLW  10
1D2E:  MOVWF  x48
1D30:  MOVLB  0
1D32:  CALL   0CF6
1D36:  BRA    1D4A
....................      default     : lcd_send_byte(1,c);     break; 
1D38:  MOVLW  01
1D3A:  MOVLB  1
1D3C:  MOVWF  x47
1D3E:  MOVFF  143,148
1D42:  MOVLB  0
1D44:  CALL   0CF6
1D48:  BRA    1D4A
....................    } 
.................... } 
1D4A:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B4,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B4,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B3,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B3,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,motor=0,luz=0,velocidadInicial=10; 
.................... signed int8   paso=0,OpcionMenu=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,Vel1=4,Media=40; 
.................... int16 tiempos,horas=0,G16=0,tEncendido=0; 
.................... float PromPresion[20]; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0,DownFlow=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,tup=0,tdown=0,tright=0,tleft=0,segundosTrabajo=0,horasTrabajo=0,Temporal1=0; 
.................... short Cruce=OFF; 
.................... float p1=8.0175,p2=-52.32,p3=135.13,p4=-65.076,p5=-24.203; 
....................  
.................... int8 VelMotor=0,Entero=0,Decimal1=0; 
.................... float zero_fabrica=199.0,x_uno=0.0,densidad=1.2,Temp=0.0,TempK=0.0,Pa=0.0,Psv=0.0,f=0.0,Xv=0.0,Z1=0.0,Pr=0.0,Temporal=0.0,HR=0,Temporal2=0.0; 
....................  
.................... int1 BITS[32]; 
.................... Int1 NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
.................... /* 
.................... typedef struct{ 
....................    float zero_actual; 
....................    float Diferencia; 
....................    int16 adc; 
....................    int8 negativo ; 
....................    float Velocidad; 
....................    int8 l; 
....................    int8 h; 
....................    float Flujo;    
....................    float Ajuste; 
....................    float promedio[80];    
.................... }SensorFlujo; 
....................  
.................... SensorFlujo Flujo[5]; 
.................... */ 
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
2A96:  MOVLB  1
2A98:  DECFSZ x33,W
2A9A:  BRA    2AB8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
2A9C:  MOVLW  02
2A9E:  MOVWF  x44
2AA0:  MOVFF  134,145
2AA4:  MOVLB  0
2AA6:  CALL   1C54
2AAA:  MOVLW  64
2AAC:  MOVWF  FF6
2AAE:  MOVLW  01
2AB0:  MOVWF  FF7
2AB2:  CALL   1D4C
2AB6:  MOVLB  1
....................    if(x==2) 
2AB8:  MOVF   x33,W
2ABA:  SUBLW  02
2ABC:  BNZ   2ADA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
2ABE:  MOVLW  02
2AC0:  MOVWF  x44
2AC2:  MOVFF  134,145
2AC6:  MOVLB  0
2AC8:  CALL   1C54
2ACC:  MOVLW  78
2ACE:  MOVWF  FF6
2AD0:  MOVLW  01
2AD2:  MOVWF  FF7
2AD4:  CALL   1D4C
2AD8:  MOVLB  1
....................    if(x==3) 
2ADA:  MOVF   x33,W
2ADC:  SUBLW  03
2ADE:  BNZ   2AFC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
2AE0:  MOVLW  02
2AE2:  MOVWF  x44
2AE4:  MOVFF  134,145
2AE8:  MOVLB  0
2AEA:  CALL   1C54
2AEE:  MOVLW  8C
2AF0:  MOVWF  FF6
2AF2:  MOVLW  01
2AF4:  MOVWF  FF7
2AF6:  CALL   1D4C
2AFA:  MOVLB  1
....................    if(x==4) 
2AFC:  MOVF   x33,W
2AFE:  SUBLW  04
2B00:  BNZ   2B1E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero Presion ");} 
2B02:  MOVLW  02
2B04:  MOVWF  x44
2B06:  MOVFF  134,145
2B0A:  MOVLB  0
2B0C:  CALL   1C54
2B10:  MOVLW  A0
2B12:  MOVWF  FF6
2B14:  MOVLW  01
2B16:  MOVWF  FF7
2B18:  CALL   1D4C
2B1C:  MOVLB  1
....................     
....................    if(x==5) 
2B1E:  MOVF   x33,W
2B20:  SUBLW  05
2B22:  BNZ   2B64
....................    {if(estadoalarma==0) 
2B24:  BTFSC  2A.4
2B26:  BRA    2B44
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
2B28:  MOVLW  02
2B2A:  MOVWF  x44
2B2C:  MOVFF  134,145
2B30:  MOVLB  0
2B32:  CALL   1C54
2B36:  MOVLW  B4
2B38:  MOVWF  FF6
2B3A:  MOVLW  01
2B3C:  MOVWF  FF7
2B3E:  CALL   1D4C
2B42:  MOVLB  1
....................    if(estadoalarma==1) 
2B44:  BTFSS  2A.4
2B46:  BRA    2B64
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
2B48:  MOVLW  02
2B4A:  MOVWF  x44
2B4C:  MOVFF  134,145
2B50:  MOVLB  0
2B52:  CALL   1C54
2B56:  MOVLW  C8
2B58:  MOVWF  FF6
2B5A:  MOVLW  01
2B5C:  MOVWF  FF7
2B5E:  CALL   1D4C
2B62:  MOVLB  1
....................    } 
....................     
....................    if(x==6) 
2B64:  MOVF   x33,W
2B66:  SUBLW  06
2B68:  BNZ   2B86
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
2B6A:  MOVLW  02
2B6C:  MOVWF  x44
2B6E:  MOVFF  134,145
2B72:  MOVLB  0
2B74:  CALL   1C54
2B78:  MOVLW  DC
2B7A:  MOVWF  FF6
2B7C:  MOVLW  01
2B7E:  MOVWF  FF7
2B80:  CALL   1D4C
2B84:  MOVLB  1
.................... } 
2B86:  MOVLB  0
2B88:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1DEC:  MOVLB  1
1DEE:  RLCF   x37,W
1DF0:  MOVWF  00
1DF2:  RLCF   00,F
1DF4:  MOVLW  FC
1DF6:  ANDWF  00,F
1DF8:  MOVFF  00,01
1DFC:  MOVF   FC2,W
1DFE:  ANDLW  C3
1E00:  IORWF  00,W
1E02:  MOVWF  FC2
1E04:  MOVLW  0A
1E06:  MOVWF  x49
1E08:  MOVLB  0
1E0A:  CALL   0CA2
1E0E:  BSF    FC2.1
1E10:  BTFSC  FC2.1
1E12:  BRA    1E10
1E14:  MOVFF  FC4,14B
1E18:  MOVFF  FC3,14A
1E1C:  MOVLB  0
1E1E:  CALL   0E06
1E22:  MOVFF  03,13B
1E26:  MOVFF  02,13A
1E2A:  MOVFF  01,139
1E2E:  MOVFF  00,138
1E32:  MOVFF  138,00
1E36:  MOVFF  139,01
1E3A:  MOVFF  13A,02
1E3E:  MOVFF  13B,03
.................... } 
1E42:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
21B2:  MOVLB  1
21B4:  CLRF   x36
21B6:  CLRF   x35
21B8:  CLRF   x34
21BA:  CLRF   x33
....................    float promediopresion=0.0;    
....................     
....................    V1=sensores(0);  
21BC:  CLRF   x37
21BE:  MOVLB  0
21C0:  RCALL  1DEC
21C2:  MOVFF  03,B5
21C6:  MOVFF  02,B4
21CA:  MOVFF  01,B3
21CE:  MOVFF  00,B2
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
21D2:  MOVFF  B5,149
21D6:  MOVFF  B4,148
21DA:  MOVFF  B3,147
21DE:  MOVFF  B2,146
21E2:  MOVFF  C9,14D
21E6:  MOVFF  C8,14C
21EA:  MOVFF  C7,14B
21EE:  MOVFF  C6,14A
21F2:  CALL   0E3C
21F6:  MOVFF  00,137
21FA:  MOVFF  01,138
21FE:  MOVFF  02,139
2202:  MOVFF  03,13A
2206:  BSF    FD8.1
2208:  MOVFF  03,14D
220C:  MOVFF  02,14C
2210:  MOVFF  01,14B
2214:  MOVFF  00,14A
2218:  MOVLB  1
221A:  CLRF   x51
221C:  CLRF   x50
221E:  CLRF   x4F
2220:  MOVLW  7F
2222:  MOVWF  x4E
2224:  MOVLB  0
2226:  RCALL  1E44
2228:  MOVFF  03,B9
222C:  MOVFF  02,B8
2230:  MOVFF  01,B7
2234:  MOVFF  00,B6
....................    //VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    //G2=G; 
....................    //VG = (G2*5.0)/1023.0; 
....................    //Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
....................     
....................    if(Presion>0) 
2238:  MOVLB  1
223A:  CLRF   x49
223C:  CLRF   x48
223E:  CLRF   x47
2240:  CLRF   x46
2242:  MOVFF  B9,14D
2246:  MOVFF  B8,14C
224A:  MOVFF  B7,14B
224E:  MOVFF  B6,14A
2252:  MOVLB  0
2254:  CALL   14E4
2258:  BNC   2262
....................       Presion=0.0; 
225A:  CLRF   xB9
225C:  CLRF   xB8
225E:  CLRF   xB7
2260:  CLRF   xB6
....................    
....................    if(Presion<0.0){ 
2262:  MOVFF  B9,149
2266:  MOVFF  B8,148
226A:  MOVFF  B7,147
226E:  MOVFF  B6,146
2272:  MOVLB  1
2274:  CLRF   x4D
2276:  CLRF   x4C
2278:  CLRF   x4B
227A:  CLRF   x4A
227C:  MOVLB  0
227E:  CALL   14E4
2282:  BNC   22B6
....................       Presion=Presion*-1; 
2284:  MOVFF  B9,149
2288:  MOVFF  B8,148
228C:  MOVFF  B7,147
2290:  MOVFF  B6,146
2294:  MOVLB  1
2296:  CLRF   x4D
2298:  CLRF   x4C
229A:  MOVLW  80
229C:  MOVWF  x4B
229E:  MOVLW  7F
22A0:  MOVWF  x4A
22A2:  MOVLB  0
22A4:  RCALL  20BC
22A6:  MOVFF  03,B9
22AA:  MOVFF  02,B8
22AE:  MOVFF  01,B7
22B2:  MOVFF  00,B6
....................    } 
....................  
....................    if(r>media-1) 
22B6:  MOVLW  01
22B8:  MOVLB  1
22BA:  SUBWF  x32,W
22BC:  SUBWF  3E,W
22BE:  BZ    22C4
22C0:  BNC   22C4
....................    {r=0;} 
22C2:  CLRF   3E
....................    PromPresion[r]=Presion;r++; 
22C4:  MOVF   3E,W
22C6:  MULLW  04
22C8:  MOVF   FF3,W
22CA:  CLRF   03
22CC:  ADDLW  62
22CE:  MOVWF  FE9
22D0:  MOVLW  00
22D2:  ADDWFC 03,W
22D4:  MOVWF  FEA
22D6:  MOVFF  B6,FEF
22DA:  MOVFF  B7,FEC
22DE:  MOVFF  B8,FEC
22E2:  MOVFF  B9,FEC
22E6:  INCF   3E,F
....................           
....................    for(q=0;q<=(media-1);q++) 
22E8:  CLRF   3F
22EA:  MOVLW  01
22EC:  SUBWF  x32,W
22EE:  SUBWF  3F,W
22F0:  BZ    22F4
22F2:  BC    2362
....................    { 
....................       promediopresion+=PromPresion[q]; 
22F4:  MOVF   3F,W
22F6:  MULLW  04
22F8:  MOVF   FF3,W
22FA:  CLRF   03
22FC:  ADDLW  62
22FE:  MOVWF  FE9
2300:  MOVLW  00
2302:  ADDWFC 03,W
2304:  MOVWF  FEA
2306:  MOVFF  FEF,00
230A:  MOVFF  FEC,01
230E:  MOVFF  FEC,02
2312:  MOVFF  FEC,03
2316:  MOVFF  FEA,138
231A:  MOVFF  FE9,137
231E:  BCF    FD8.1
2320:  MOVFF  136,14D
2324:  MOVFF  135,14C
2328:  MOVFF  134,14B
232C:  MOVFF  133,14A
2330:  MOVFF  03,151
2334:  MOVFF  02,150
2338:  MOVFF  01,14F
233C:  MOVFF  00,14E
2340:  MOVLB  0
2342:  RCALL  1E44
2344:  MOVFF  138,FEA
2348:  MOVFF  137,FE9
234C:  MOVFF  03,136
2350:  MOVFF  02,135
2354:  MOVFF  01,134
2358:  MOVFF  00,133
....................    }  
235C:  INCF   3F,F
235E:  MOVLB  1
2360:  BRA    22EA
....................    promediopresion=promediopresion/media;    
2362:  CLRF   x4B
2364:  MOVFF  132,14A
2368:  MOVLB  0
236A:  CALL   0E06
236E:  MOVFF  136,149
2372:  MOVFF  135,148
2376:  MOVFF  134,147
237A:  MOVFF  133,146
237E:  MOVFF  03,14D
2382:  MOVFF  02,14C
2386:  MOVFF  01,14B
238A:  MOVFF  00,14A
238E:  CALL   0E3C
2392:  MOVFF  03,136
2396:  MOVFF  02,135
239A:  MOVFF  01,134
239E:  MOVFF  00,133
....................     
....................    return promediopresion; 
23A2:  MOVFF  133,00
23A6:  MOVFF  134,01
23AA:  MOVFF  135,02
23AE:  MOVFF  136,03
.................... } 
23B2:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0DBE:  MOVLW  C8
0DC0:  MOVLB  1
0DC2:  MOVWF  x49
0DC4:  MOVLB  0
0DC6:  RCALL  0CA2
....................    lcd_init(); 
0DC8:  RCALL  0D44
....................    set_tris_a(0XFF); 
0DCA:  MOVLW  FF
0DCC:  MOVWF  F92
....................    set_tris_e(0XFF); 
0DCE:  BSF    F96.1
0DD0:  BSF    F96.1
0DD2:  BSF    F96.1
0DD4:  BSF    F96.1
....................    enable_interrupts(global); 
0DD6:  MOVLW  C0
0DD8:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
0DDA:  BSF    FF2.4
0DDC:  BSF    FF1.6
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
0DDE:  MOVLW  C7
0DE0:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0DE2:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0DE4:  MOVLW  85
0DE6:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0DE8:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0DEA:  MOVF   FC1,W
0DEC:  ANDLW  C0
0DEE:  IORLW  0E
0DF0:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0DF2:  MOVF   FC0,W
0DF4:  ANDLW  C0
0DF6:  IORLW  02
0DF8:  MOVWF  FC0
0DFA:  BSF    FC0.7
0DFC:  BSF    FC2.0
....................    enable_interrupts(global); 
0DFE:  MOVLW  C0
0E00:  IORWF  FF2,F
.................... } 
0E02:  GOTO   3116 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
1D6C:  MOVLW  01
1D6E:  MOVLB  1
1D70:  MOVWF  x44
1D72:  MOVWF  x45
1D74:  MOVLB  0
1D76:  RCALL  1C54
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
1D78:  MOVLW  F0
1D7A:  MOVWF  FF6
1D7C:  MOVLW  01
1D7E:  MOVWF  FF7
1D80:  RCALL  1D4C
....................    lcd_gotoxy(1,2); 
1D82:  MOVLW  01
1D84:  MOVLB  1
1D86:  MOVWF  x44
1D88:  MOVLW  02
1D8A:  MOVWF  x45
1D8C:  MOVLB  0
1D8E:  RCALL  1C54
....................    printf(lcd_putc,"      VERTICAL      "); 
1D90:  MOVLW  06
1D92:  MOVWF  FF6
1D94:  MOVLW  02
1D96:  MOVWF  FF7
1D98:  RCALL  1D4C
....................    lcd_gotoxy(1,3); 
1D9A:  MOVLW  01
1D9C:  MOVLB  1
1D9E:  MOVWF  x44
1DA0:  MOVLW  03
1DA2:  MOVWF  x45
1DA4:  MOVLB  0
1DA6:  RCALL  1C54
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
1DA8:  MOVLW  1C
1DAA:  MOVWF  FF6
1DAC:  MOVLW  02
1DAE:  MOVWF  FF7
1DB0:  RCALL  1D4C
....................    lcd_gotoxy(1,4); 
1DB2:  MOVLW  01
1DB4:  MOVLB  1
1DB6:  MOVWF  x44
1DB8:  MOVLW  04
1DBA:  MOVWF  x45
1DBC:  MOVLB  0
1DBE:  RCALL  1C54
....................    printf(lcd_putc,"   REF:JPCV96-MOD   "); 
1DC0:  MOVLW  32
1DC2:  MOVWF  FF6
1DC4:  MOVLW  02
1DC6:  MOVWF  FF7
1DC8:  RCALL  1D4C
....................    delay_ms(2000); 
1DCA:  MOVLW  08
1DCC:  MOVLB  1
1DCE:  MOVWF  x32
1DD0:  MOVLW  FA
1DD2:  MOVWF  x49
1DD4:  MOVLB  0
1DD6:  CALL   0CA2
1DDA:  MOVLB  1
1DDC:  DECFSZ x32,F
1DDE:  BRA    1DD0
....................    printf(lcd_putc,"\f"); 
1DE0:  MOVLW  0C
1DE2:  MOVWF  x43
1DE4:  MOVLB  0
1DE6:  RCALL  1CCE
.................... } 
1DE8:  GOTO   3128 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0F9A:  MOVFF  FF2,132
0F9E:  BCF    FF2.6
0FA0:  BCF    FF2.7
0FA2:  CLRF   FA9
0FA4:  BCF    FA6.6
0FA6:  BCF    FA6.7
0FA8:  BSF    FA6.0
0FAA:  MOVF   FA8,W
0FAC:  MOVLB  1
0FAE:  BTFSC  x32.6
0FB0:  BSF    FF2.6
0FB2:  BTFSC  x32.7
0FB4:  BSF    FF2.7
0FB6:  MOVWF  50
....................    delay_ms(20);  
0FB8:  MOVLW  14
0FBA:  MOVWF  x49
0FBC:  MOVLB  0
0FBE:  RCALL  0CA2
....................    contrasena[1]=read_eeprom(1); 
0FC0:  MOVFF  FF2,132
0FC4:  BCF    FF2.6
0FC6:  BCF    FF2.7
0FC8:  MOVLW  01
0FCA:  MOVWF  FA9
0FCC:  BCF    FA6.6
0FCE:  BCF    FA6.7
0FD0:  BSF    FA6.0
0FD2:  MOVF   FA8,W
0FD4:  MOVLB  1
0FD6:  BTFSC  x32.6
0FD8:  BSF    FF2.6
0FDA:  BTFSC  x32.7
0FDC:  BSF    FF2.7
0FDE:  MOVWF  51
....................    delay_ms(20); 
0FE0:  MOVLW  14
0FE2:  MOVWF  x49
0FE4:  MOVLB  0
0FE6:  RCALL  0CA2
....................    contrasena[2]=read_eeprom(2); 
0FE8:  MOVFF  FF2,132
0FEC:  BCF    FF2.6
0FEE:  BCF    FF2.7
0FF0:  MOVLW  02
0FF2:  MOVWF  FA9
0FF4:  BCF    FA6.6
0FF6:  BCF    FA6.7
0FF8:  BSF    FA6.0
0FFA:  MOVF   FA8,W
0FFC:  MOVLB  1
0FFE:  BTFSC  x32.6
1000:  BSF    FF2.6
1002:  BTFSC  x32.7
1004:  BSF    FF2.7
1006:  MOVWF  52
....................    delay_ms(20);  
1008:  MOVLW  14
100A:  MOVWF  x49
100C:  MOVLB  0
100E:  RCALL  0CA2
....................    contrasena[3]=read_eeprom(3); 
1010:  MOVFF  FF2,132
1014:  BCF    FF2.6
1016:  BCF    FF2.7
1018:  MOVLW  03
101A:  MOVWF  FA9
101C:  BCF    FA6.6
101E:  BCF    FA6.7
1020:  BSF    FA6.0
1022:  MOVF   FA8,W
1024:  MOVLB  1
1026:  BTFSC  x32.6
1028:  BSF    FF2.6
102A:  BTFSC  x32.7
102C:  BSF    FF2.7
102E:  MOVWF  53
....................    delay_ms(20); 
1030:  MOVLW  14
1032:  MOVWF  x49
1034:  MOVLB  0
1036:  RCALL  0CA2
....................    estadoalarma=read_eeprom(4); 
1038:  MOVFF  FF2,132
103C:  BCF    FF2.6
103E:  BCF    FF2.7
1040:  MOVLW  04
1042:  MOVWF  FA9
1044:  BCF    FA6.6
1046:  BCF    FA6.7
1048:  BSF    FA6.0
104A:  MOVF   FA8,W
104C:  MOVLB  1
104E:  BTFSC  x32.6
1050:  BSF    FF2.6
1052:  BTFSC  x32.7
1054:  BSF    FF2.7
1056:  MOVWF  01
1058:  BCF    2A.4
105A:  BTFSC  01.0
105C:  BSF    2A.4
....................    delay_ms(20); 
105E:  MOVLW  14
1060:  MOVWF  x49
1062:  MOVLB  0
1064:  RCALL  0CA2
....................    tempo_minutos=read_eeprom(5); 
1066:  MOVFF  FF2,132
106A:  BCF    FF2.6
106C:  BCF    FF2.7
106E:  MOVLW  05
1070:  MOVWF  FA9
1072:  BCF    FA6.6
1074:  BCF    FA6.7
1076:  BSF    FA6.0
1078:  MOVF   FA8,W
107A:  MOVLB  1
107C:  BTFSC  x32.6
107E:  BSF    FF2.6
1080:  BTFSC  x32.7
1082:  BSF    FF2.7
1084:  MOVWF  3A
....................    delay_ms(20); 
1086:  MOVLW  14
1088:  MOVWF  x49
108A:  MOVLB  0
108C:  RCALL  0CA2
....................    tempo_segundos=read_eeprom(6); 
108E:  MOVFF  FF2,132
1092:  BCF    FF2.6
1094:  BCF    FF2.7
1096:  MOVLW  06
1098:  MOVWF  FA9
109A:  BCF    FA6.6
109C:  BCF    FA6.7
109E:  BSF    FA6.0
10A0:  MOVF   FA8,W
10A2:  MOVLB  1
10A4:  BTFSC  x32.6
10A6:  BSF    FF2.6
10A8:  BTFSC  x32.7
10AA:  BSF    FF2.7
10AC:  MOVWF  3B
....................    delay_ms(20); 
10AE:  MOVLW  14
10B0:  MOVWF  x49
10B2:  MOVLB  0
10B4:  RCALL  0CA2
....................    segundos=read_eeprom(7); 
10B6:  MOVFF  FF2,132
10BA:  BCF    FF2.6
10BC:  BCF    FF2.7
10BE:  MOVLW  07
10C0:  MOVWF  FA9
10C2:  BCF    FA6.6
10C4:  BCF    FA6.7
10C6:  BSF    FA6.0
10C8:  MOVF   FA8,W
10CA:  MOVLB  1
10CC:  BTFSC  x32.6
10CE:  BSF    FF2.6
10D0:  BTFSC  x32.7
10D2:  BSF    FF2.7
10D4:  MOVWF  34
....................    delay_ms(20); 
10D6:  MOVLW  14
10D8:  MOVWF  x49
10DA:  MOVLB  0
10DC:  RCALL  0CA2
....................    minutos=read_eeprom(8); 
10DE:  MOVFF  FF2,132
10E2:  BCF    FF2.6
10E4:  BCF    FF2.7
10E6:  MOVLW  08
10E8:  MOVWF  FA9
10EA:  BCF    FA6.6
10EC:  BCF    FA6.7
10EE:  BSF    FA6.0
10F0:  MOVF   FA8,W
10F2:  MOVLB  1
10F4:  BTFSC  x32.6
10F6:  BSF    FF2.6
10F8:  BTFSC  x32.7
10FA:  BSF    FF2.7
10FC:  MOVWF  35
....................    delay_ms(20); 
10FE:  MOVLW  14
1100:  MOVWF  x49
1102:  MOVLB  0
1104:  RCALL  0CA2
....................    horasL=read_eeprom(9); 
1106:  MOVFF  FF2,132
110A:  BCF    FF2.6
110C:  BCF    FF2.7
110E:  MOVLW  09
1110:  MOVWF  FA9
1112:  BCF    FA6.6
1114:  BCF    FA6.7
1116:  BSF    FA6.0
1118:  MOVF   FA8,W
111A:  MOVLB  1
111C:  BTFSC  x32.6
111E:  BSF    FF2.6
1120:  BTFSC  x32.7
1122:  BSF    FF2.7
1124:  MOVWF  36
....................    delay_ms(20); 
1126:  MOVLW  14
1128:  MOVWF  x49
112A:  MOVLB  0
112C:  RCALL  0CA2
....................    horasH=read_eeprom(10); 
112E:  MOVFF  FF2,132
1132:  BCF    FF2.6
1134:  BCF    FF2.7
1136:  MOVLW  0A
1138:  MOVWF  FA9
113A:  BCF    FA6.6
113C:  BCF    FA6.7
113E:  BSF    FA6.0
1140:  MOVF   FA8,W
1142:  MOVLB  1
1144:  BTFSC  x32.6
1146:  BSF    FF2.6
1148:  BTFSC  x32.7
114A:  BSF    FF2.7
114C:  MOVWF  37
....................    delay_ms(20); 
114E:  MOVLW  14
1150:  MOVWF  x49
1152:  MOVLB  0
1154:  RCALL  0CA2
....................    G_l=read_eeprom(11); 
1156:  MOVFF  FF2,132
115A:  BCF    FF2.6
115C:  BCF    FF2.7
115E:  MOVLW  0B
1160:  MOVWF  FA9
1162:  BCF    FA6.6
1164:  BCF    FA6.7
1166:  BSF    FA6.0
1168:  MOVF   FA8,W
116A:  MOVLB  1
116C:  BTFSC  x32.6
116E:  BSF    FF2.6
1170:  BTFSC  x32.7
1172:  BSF    FF2.7
1174:  MOVWF  38
....................    delay_ms(20); 
1176:  MOVLW  14
1178:  MOVWF  x49
117A:  MOVLB  0
117C:  RCALL  0CA2
....................    G_h=read_eeprom(12); 
117E:  MOVFF  FF2,132
1182:  BCF    FF2.6
1184:  BCF    FF2.7
1186:  MOVLW  0C
1188:  MOVWF  FA9
118A:  BCF    FA6.6
118C:  BCF    FA6.7
118E:  BSF    FA6.0
1190:  MOVF   FA8,W
1192:  MOVLB  1
1194:  BTFSC  x32.6
1196:  BSF    FF2.6
1198:  BTFSC  x32.7
119A:  BSF    FF2.7
119C:  MOVWF  39
....................    delay_ms(20); 
119E:  MOVLW  14
11A0:  MOVWF  x49
11A2:  MOVLB  0
11A4:  RCALL  0CA2
....................    Vel1=read_eeprom(13); 
11A6:  MOVFF  FF2,132
11AA:  BCF    FF2.6
11AC:  BCF    FF2.7
11AE:  MOVLW  0D
11B0:  MOVWF  FA9
11B2:  BCF    FA6.6
11B4:  BCF    FA6.7
11B6:  BSF    FA6.0
11B8:  MOVF   FA8,W
11BA:  MOVLB  1
11BC:  BTFSC  x32.6
11BE:  BSF    FF2.6
11C0:  BTFSC  x32.7
11C2:  BSF    FF2.7
11C4:  MOVWF  58
....................    delay_ms(20); 
11C6:  MOVLW  14
11C8:  MOVWF  x49
11CA:  MOVLB  0
11CC:  RCALL  0CA2
....................    codigoSubir=read_eeprom(15); 
11CE:  MOVFF  FF2,132
11D2:  BCF    FF2.6
11D4:  BCF    FF2.7
11D6:  MOVLW  0F
11D8:  MOVWF  FA9
11DA:  BCF    FA6.6
11DC:  BCF    FA6.7
11DE:  BSF    FA6.0
11E0:  MOVF   FA8,W
11E2:  MOVLB  1
11E4:  BTFSC  x32.6
11E6:  BSF    FF2.6
11E8:  BTFSC  x32.7
11EA:  BSF    FF2.7
11EC:  MOVWF  55
....................    delay_ms(20); 
11EE:  MOVLW  14
11F0:  MOVWF  x49
11F2:  MOVLB  0
11F4:  RCALL  0CA2
....................    codigoBajar=read_eeprom(16); 
11F6:  MOVFF  FF2,132
11FA:  BCF    FF2.6
11FC:  BCF    FF2.7
11FE:  MOVLW  10
1200:  MOVWF  FA9
1202:  BCF    FA6.6
1204:  BCF    FA6.7
1206:  BSF    FA6.0
1208:  MOVF   FA8,W
120A:  MOVLB  1
120C:  BTFSC  x32.6
120E:  BSF    FF2.6
1210:  BTFSC  x32.7
1212:  BSF    FF2.7
1214:  MOVWF  56
....................    delay_ms(20); 
1216:  MOVLW  14
1218:  MOVWF  x49
121A:  MOVLB  0
121C:  RCALL  0CA2
....................    codigoDetener=read_eeprom(17); 
121E:  MOVFF  FF2,132
1222:  BCF    FF2.6
1224:  BCF    FF2.7
1226:  MOVLW  11
1228:  MOVWF  FA9
122A:  BCF    FA6.6
122C:  BCF    FA6.7
122E:  BSF    FA6.0
1230:  MOVF   FA8,W
1232:  MOVLB  1
1234:  BTFSC  x32.6
1236:  BSF    FF2.6
1238:  BTFSC  x32.7
123A:  BSF    FF2.7
123C:  MOVWF  57
....................    delay_ms(20); 
123E:  MOVLW  14
1240:  MOVWF  x49
1242:  MOVLB  0
1244:  RCALL  0CA2
....................    G16=make16(G_h,G_l); 
1246:  MOVFF  39,5F
124A:  MOVFF  38,5E
....................    G=G16; 
124E:  MOVFF  5F,14B
1252:  MOVFF  5E,14A
1256:  RCALL  0E06
1258:  MOVFF  03,C9
125C:  MOVFF  02,C8
1260:  MOVFF  01,C7
1264:  MOVFF  00,C6
....................    horasTrabajo=make16(read_eeprom(19),read_eeprom(18)); 
1268:  MOVFF  FF2,132
126C:  BCF    FF2.6
126E:  BCF    FF2.7
1270:  MOVLW  13
1272:  MOVWF  FA9
1274:  BCF    FA6.6
1276:  BCF    FA6.7
1278:  BSF    FA6.0
127A:  MOVF   FA8,W
127C:  MOVLB  1
127E:  BTFSC  x32.6
1280:  BSF    FF2.6
1282:  BTFSC  x32.7
1284:  BSF    FF2.7
1286:  MOVWF  x33
1288:  MOVFF  FF2,134
128C:  BCF    FF2.6
128E:  BCF    FF2.7
1290:  MOVLW  12
1292:  MOVWF  FA9
1294:  BCF    FA6.6
1296:  BCF    FA6.7
1298:  BSF    FA6.0
129A:  MOVF   FA8,W
129C:  BTFSC  x34.6
129E:  BSF    FF2.6
12A0:  BTFSC  x34.7
12A2:  BSF    FF2.7
12A4:  MOVWF  x35
12A6:  MOVFF  133,D8
12AA:  MOVFF  135,D7
....................    delay_ms(20); 
12AE:  MOVLW  14
12B0:  MOVWF  x49
12B2:  MOVLB  0
12B4:  RCALL  0CA2
....................    segundosTrabajo=make16(read_eeprom(21),read_eeprom(20)); 
12B6:  MOVFF  FF2,132
12BA:  BCF    FF2.6
12BC:  BCF    FF2.7
12BE:  MOVLW  15
12C0:  MOVWF  FA9
12C2:  BCF    FA6.6
12C4:  BCF    FA6.7
12C6:  BSF    FA6.0
12C8:  MOVF   FA8,W
12CA:  MOVLB  1
12CC:  BTFSC  x32.6
12CE:  BSF    FF2.6
12D0:  BTFSC  x32.7
12D2:  BSF    FF2.7
12D4:  MOVWF  x33
12D6:  MOVFF  FF2,134
12DA:  BCF    FF2.6
12DC:  BCF    FF2.7
12DE:  MOVLW  14
12E0:  MOVWF  FA9
12E2:  BCF    FA6.6
12E4:  BCF    FA6.7
12E6:  BSF    FA6.0
12E8:  MOVF   FA8,W
12EA:  BTFSC  x34.6
12EC:  BSF    FF2.6
12EE:  BTFSC  x34.7
12F0:  BSF    FF2.7
12F2:  MOVWF  x35
12F4:  MOVFF  133,D6
12F8:  MOVFF  135,D5
....................    delay_ms(20); 
12FC:  MOVLW  14
12FE:  MOVWF  x49
1300:  MOVLB  0
1302:  RCALL  0CA2
....................    motor=read_eeprom(22); 
1304:  MOVFF  FF2,132
1308:  BCF    FF2.6
130A:  BCF    FF2.7
130C:  MOVLW  16
130E:  MOVWF  FA9
1310:  BCF    FA6.6
1312:  BCF    FA6.7
1314:  BSF    FA6.0
1316:  MOVF   FA8,W
1318:  MOVLB  1
131A:  BTFSC  x32.6
131C:  BSF    FF2.6
131E:  BTFSC  x32.7
1320:  BSF    FF2.7
1322:  MOVWF  44
....................    delay_ms(20); 
1324:  MOVLW  14
1326:  MOVWF  x49
1328:  MOVLB  0
132A:  RCALL  0CA2
....................    luz=read_eeprom(23); 
132C:  MOVFF  FF2,132
1330:  BCF    FF2.6
1332:  BCF    FF2.7
1334:  MOVLW  17
1336:  MOVWF  FA9
1338:  BCF    FA6.6
133A:  BCF    FA6.7
133C:  BSF    FA6.0
133E:  MOVF   FA8,W
1340:  MOVLB  1
1342:  BTFSC  x32.6
1344:  BSF    FF2.6
1346:  BTFSC  x32.7
1348:  BSF    FF2.7
134A:  MOVWF  45
....................    delay_ms(20); 
134C:  MOVLW  14
134E:  MOVWF  x49
1350:  MOVLB  0
1352:  RCALL  0CA2
....................    velocidadInicial=read_eeprom(24); 
1354:  MOVFF  FF2,132
1358:  BCF    FF2.6
135A:  BCF    FF2.7
135C:  MOVLW  18
135E:  MOVWF  FA9
1360:  BCF    FA6.6
1362:  BCF    FA6.7
1364:  BSF    FA6.0
1366:  MOVF   FA8,W
1368:  MOVLB  1
136A:  BTFSC  x32.6
136C:  BSF    FF2.6
136E:  BTFSC  x32.7
1370:  BSF    FF2.7
1372:  MOVWF  46
....................    delay_ms(20); 
1374:  MOVLW  14
1376:  MOVWF  x49
1378:  MOVLB  0
137A:  RCALL  0CA2
....................    delay_ms(10); 
137C:  MOVLW  0A
137E:  MOVLB  1
1380:  MOVWF  x49
1382:  MOVLB  0
1384:  RCALL  0CA2
....................    Entero=read_eeprom(25); 
1386:  MOVFF  FF2,132
138A:  BCF    FF2.6
138C:  BCF    FF2.7
138E:  MOVLW  19
1390:  MOVWF  FA9
1392:  BCF    FA6.6
1394:  BCF    FA6.7
1396:  BSF    FA6.0
1398:  MOVF   FA8,W
139A:  MOVLB  1
139C:  BTFSC  x32.6
139E:  BSF    FF2.6
13A0:  BTFSC  x32.7
13A2:  BSF    FF2.7
13A4:  MOVLB  0
13A6:  MOVWF  xF0
....................    delay_ms(10); 
13A8:  MOVLW  0A
13AA:  MOVLB  1
13AC:  MOVWF  x49
13AE:  MOVLB  0
13B0:  RCALL  0CA2
....................    Temporal=read_eeprom(26); 
13B2:  MOVFF  FF2,132
13B6:  BCF    FF2.6
13B8:  BCF    FF2.7
13BA:  MOVLW  1A
13BC:  MOVWF  FA9
13BE:  BCF    FA6.6
13C0:  BCF    FA6.7
13C2:  BSF    FA6.0
13C4:  MOVF   FA8,W
13C6:  MOVLB  1
13C8:  BTFSC  x32.6
13CA:  BSF    FF2.6
13CC:  BTFSC  x32.7
13CE:  BSF    FF2.7
13D0:  CLRF   x4B
13D2:  MOVWF  x4A
13D4:  MOVLB  0
13D6:  RCALL  0E06
13D8:  MOVFF  03,121
13DC:  MOVFF  02,120
13E0:  MOVFF  01,11F
13E4:  MOVFF  00,11E
....................    delay_ms(10); 
13E8:  MOVLW  0A
13EA:  MOVLB  1
13EC:  MOVWF  x49
13EE:  MOVLB  0
13F0:  RCALL  0CA2
....................    Temporal=Temporal/100.0; 
13F2:  MOVFF  121,149
13F6:  MOVFF  120,148
13FA:  MOVFF  11F,147
13FE:  MOVFF  11E,146
1402:  MOVLB  1
1404:  CLRF   x4D
1406:  CLRF   x4C
1408:  MOVLW  48
140A:  MOVWF  x4B
140C:  MOVLW  85
140E:  MOVWF  x4A
1410:  MOVLB  0
1412:  RCALL  0E3C
1414:  MOVFF  03,121
1418:  MOVFF  02,120
141C:  MOVFF  01,11F
1420:  MOVFF  00,11E
....................    //Flujo[1].Ajuste=Entero+Temporal; 
....................    //delay_ms(10); 
....................    //Flujo[1].zero_actual=make16(read_eeprom(28),read_eeprom(27)); 
....................    //delay_ms(10); 
....................     
....................    Pr=read_eeprom(29); 
1424:  MOVFF  FF2,132
1428:  BCF    FF2.6
142A:  BCF    FF2.7
142C:  MOVLW  1D
142E:  MOVWF  FA9
1430:  BCF    FA6.6
1432:  BCF    FA6.7
1434:  BSF    FA6.0
1436:  MOVF   FA8,W
1438:  MOVLB  1
143A:  BTFSC  x32.6
143C:  BSF    FF2.6
143E:  BTFSC  x32.7
1440:  BSF    FF2.7
1442:  CLRF   x4B
1444:  MOVWF  x4A
1446:  MOVLB  0
1448:  RCALL  0E06
144A:  MOVFF  03,11D
144E:  MOVFF  02,11C
1452:  MOVFF  01,11B
1456:  MOVFF  00,11A
....................    delay_ms(10); 
145A:  MOVLW  0A
145C:  MOVLB  1
145E:  MOVWF  x49
1460:  MOVLB  0
1462:  RCALL  0CA2
....................    HR=read_eeprom(30); 
1464:  MOVFF  FF2,132
1468:  BCF    FF2.6
146A:  BCF    FF2.7
146C:  MOVLW  1E
146E:  MOVWF  FA9
1470:  BCF    FA6.6
1472:  BCF    FA6.7
1474:  BSF    FA6.0
1476:  MOVF   FA8,W
1478:  MOVLB  1
147A:  BTFSC  x32.6
147C:  BSF    FF2.6
147E:  BTFSC  x32.7
1480:  BSF    FF2.7
1482:  CLRF   x4B
1484:  MOVWF  x4A
1486:  MOVLB  0
1488:  RCALL  0E06
148A:  MOVFF  03,125
148E:  MOVFF  02,124
1492:  MOVFF  01,123
1496:  MOVFF  00,122
....................    delay_ms(10); 
149A:  MOVLW  0A
149C:  MOVLB  1
149E:  MOVWF  x49
14A0:  MOVLB  0
14A2:  CALL   0CA2
....................    Media=read_eeprom(31); 
14A6:  MOVFF  FF2,132
14AA:  BCF    FF2.6
14AC:  BCF    FF2.7
14AE:  MOVLW  1F
14B0:  MOVWF  FA9
14B2:  BCF    FA6.6
14B4:  BCF    FA6.7
14B6:  BSF    FA6.0
14B8:  MOVF   FA8,W
14BA:  MOVLB  1
14BC:  BTFSC  x32.6
14BE:  BSF    FF2.6
14C0:  BTFSC  x32.7
14C2:  BSF    FF2.7
14C4:  MOVWF  59
....................    delay_ms(10); 
14C6:  MOVLW  0A
14C8:  MOVWF  x49
14CA:  MOVLB  0
14CC:  CALL   0CA2
....................     
....................    horas=make16(horasH,horasL); 
14D0:  MOVFF  37,5D
14D4:  MOVFF  36,5C
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
14D8:  MOVFF  3A,3C
14DC:  MOVFF  3B,3D
.................... } 
14E0:  GOTO   311A (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
155E:  BTFSC  50.7
1560:  BRA    1568
1562:  MOVF   50,W
1564:  SUBLW  09
1566:  BNC   156E
1568:  BTFSC  50.7
156A:  BRA    156E
156C:  BRA    15A4
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
156E:  CLRF   50
1570:  CLRF   FA9
1572:  CLRF   FA8
1574:  BCF    FA6.6
1576:  BCF    FA6.7
1578:  BSF    FA6.2
157A:  MOVF   FF2,W
157C:  MOVWF  00
157E:  BCF    FF2.6
1580:  BCF    FF2.7
1582:  MOVLB  F
1584:  MOVLW  55
1586:  MOVWF  FA7
1588:  MOVLW  AA
158A:  MOVWF  FA7
158C:  BSF    FA6.1
158E:  BTFSC  FA6.1
1590:  BRA    158E
1592:  BCF    FA6.2
1594:  MOVF   00,W
1596:  IORWF  FF2,F
1598:  MOVLW  14
159A:  MOVLB  1
159C:  MOVWF  x49
159E:  MOVLB  0
15A0:  CALL   0CA2
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
15A4:  BTFSC  51.7
15A6:  BRA    15AE
15A8:  MOVF   51,W
15AA:  SUBLW  09
15AC:  BNC   15B4
15AE:  BTFSC  51.7
15B0:  BRA    15B4
15B2:  BRA    15EC
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
15B4:  CLRF   51
15B6:  MOVLW  01
15B8:  MOVWF  FA9
15BA:  CLRF   FA8
15BC:  BCF    FA6.6
15BE:  BCF    FA6.7
15C0:  BSF    FA6.2
15C2:  MOVF   FF2,W
15C4:  MOVWF  00
15C6:  BCF    FF2.6
15C8:  BCF    FF2.7
15CA:  MOVLB  F
15CC:  MOVLW  55
15CE:  MOVWF  FA7
15D0:  MOVLW  AA
15D2:  MOVWF  FA7
15D4:  BSF    FA6.1
15D6:  BTFSC  FA6.1
15D8:  BRA    15D6
15DA:  BCF    FA6.2
15DC:  MOVF   00,W
15DE:  IORWF  FF2,F
15E0:  MOVLW  14
15E2:  MOVLB  1
15E4:  MOVWF  x49
15E6:  MOVLB  0
15E8:  CALL   0CA2
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
15EC:  BTFSC  52.7
15EE:  BRA    15F6
15F0:  MOVF   52,W
15F2:  SUBLW  09
15F4:  BNC   15FC
15F6:  BTFSC  52.7
15F8:  BRA    15FC
15FA:  BRA    1634
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
15FC:  CLRF   52
15FE:  MOVLW  02
1600:  MOVWF  FA9
1602:  CLRF   FA8
1604:  BCF    FA6.6
1606:  BCF    FA6.7
1608:  BSF    FA6.2
160A:  MOVF   FF2,W
160C:  MOVWF  00
160E:  BCF    FF2.6
1610:  BCF    FF2.7
1612:  MOVLB  F
1614:  MOVLW  55
1616:  MOVWF  FA7
1618:  MOVLW  AA
161A:  MOVWF  FA7
161C:  BSF    FA6.1
161E:  BTFSC  FA6.1
1620:  BRA    161E
1622:  BCF    FA6.2
1624:  MOVF   00,W
1626:  IORWF  FF2,F
1628:  MOVLW  14
162A:  MOVLB  1
162C:  MOVWF  x49
162E:  MOVLB  0
1630:  CALL   0CA2
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
1634:  BTFSC  53.7
1636:  BRA    163E
1638:  MOVF   53,W
163A:  SUBLW  09
163C:  BNC   1644
163E:  BTFSC  53.7
1640:  BRA    1644
1642:  BRA    167C
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
1644:  CLRF   53
1646:  MOVLW  03
1648:  MOVWF  FA9
164A:  CLRF   FA8
164C:  BCF    FA6.6
164E:  BCF    FA6.7
1650:  BSF    FA6.2
1652:  MOVF   FF2,W
1654:  MOVWF  00
1656:  BCF    FF2.6
1658:  BCF    FF2.7
165A:  MOVLB  F
165C:  MOVLW  55
165E:  MOVWF  FA7
1660:  MOVLW  AA
1662:  MOVWF  FA7
1664:  BSF    FA6.1
1666:  BTFSC  FA6.1
1668:  BRA    1666
166A:  BCF    FA6.2
166C:  MOVF   00,W
166E:  IORWF  FF2,F
1670:  MOVLW  14
1672:  MOVLB  1
1674:  MOVWF  x49
1676:  MOVLB  0
1678:  CALL   0CA2
....................    } 
....................    if(estadoalarma>1){ 
167C:  MOVLW  00
167E:  BTFSC  2A.4
1680:  MOVLW  01
1682:  SUBLW  01
1684:  BC    16C0
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
1686:  BSF    2A.4
1688:  MOVLW  04
168A:  MOVWF  FA9
168C:  MOVLW  01
168E:  MOVWF  FA8
1690:  BCF    FA6.6
1692:  BCF    FA6.7
1694:  BSF    FA6.2
1696:  MOVF   FF2,W
1698:  MOVWF  00
169A:  BCF    FF2.6
169C:  BCF    FF2.7
169E:  MOVLB  F
16A0:  MOVLW  55
16A2:  MOVWF  FA7
16A4:  MOVLW  AA
16A6:  MOVWF  FA7
16A8:  BSF    FA6.1
16AA:  BTFSC  FA6.1
16AC:  BRA    16AA
16AE:  BCF    FA6.2
16B0:  MOVF   00,W
16B2:  IORWF  FF2,F
16B4:  MOVLW  14
16B6:  MOVLB  1
16B8:  MOVWF  x49
16BA:  MOVLB  0
16BC:  CALL   0CA2
....................    } 
....................    if(tempo_minutos>200){ 
16C0:  MOVF   3A,W
16C2:  SUBLW  C8
16C4:  BC    1702
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
16C6:  MOVLW  14
16C8:  MOVWF  3A
16CA:  MOVLW  05
16CC:  MOVWF  FA9
16CE:  MOVLW  14
16D0:  MOVWF  FA8
16D2:  BCF    FA6.6
16D4:  BCF    FA6.7
16D6:  BSF    FA6.2
16D8:  MOVF   FF2,W
16DA:  MOVWF  00
16DC:  BCF    FF2.6
16DE:  BCF    FF2.7
16E0:  MOVLB  F
16E2:  MOVLW  55
16E4:  MOVWF  FA7
16E6:  MOVLW  AA
16E8:  MOVWF  FA7
16EA:  BSF    FA6.1
16EC:  BTFSC  FA6.1
16EE:  BRA    16EC
16F0:  BCF    FA6.2
16F2:  MOVF   00,W
16F4:  IORWF  FF2,F
16F6:  MOVLW  14
16F8:  MOVLB  1
16FA:  MOVWF  x49
16FC:  MOVLB  0
16FE:  CALL   0CA2
....................    } 
....................    if(tempo_segundos>59){ 
1702:  MOVF   3B,W
1704:  SUBLW  3B
1706:  BC    1740
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
1708:  CLRF   3B
170A:  MOVLW  06
170C:  MOVWF  FA9
170E:  CLRF   FA8
1710:  BCF    FA6.6
1712:  BCF    FA6.7
1714:  BSF    FA6.2
1716:  MOVF   FF2,W
1718:  MOVWF  00
171A:  BCF    FF2.6
171C:  BCF    FF2.7
171E:  MOVLB  F
1720:  MOVLW  55
1722:  MOVWF  FA7
1724:  MOVLW  AA
1726:  MOVWF  FA7
1728:  BSF    FA6.1
172A:  BTFSC  FA6.1
172C:  BRA    172A
172E:  BCF    FA6.2
1730:  MOVF   00,W
1732:  IORWF  FF2,F
1734:  MOVLW  14
1736:  MOVLB  1
1738:  MOVWF  x49
173A:  MOVLB  0
173C:  CALL   0CA2
....................    } 
....................    if(segundos>60){ 
1740:  MOVF   34,W
1742:  SUBLW  3C
1744:  BC    177E
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
1746:  CLRF   34
1748:  MOVLW  07
174A:  MOVWF  FA9
174C:  CLRF   FA8
174E:  BCF    FA6.6
1750:  BCF    FA6.7
1752:  BSF    FA6.2
1754:  MOVF   FF2,W
1756:  MOVWF  00
1758:  BCF    FF2.6
175A:  BCF    FF2.7
175C:  MOVLB  F
175E:  MOVLW  55
1760:  MOVWF  FA7
1762:  MOVLW  AA
1764:  MOVWF  FA7
1766:  BSF    FA6.1
1768:  BTFSC  FA6.1
176A:  BRA    1768
176C:  BCF    FA6.2
176E:  MOVF   00,W
1770:  IORWF  FF2,F
1772:  MOVLW  14
1774:  MOVLB  1
1776:  MOVWF  x49
1778:  MOVLB  0
177A:  CALL   0CA2
....................    } 
....................    if(minutos>60){ 
177E:  MOVF   35,W
1780:  SUBLW  3C
1782:  BC    17BC
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
1784:  CLRF   35
1786:  MOVLW  08
1788:  MOVWF  FA9
178A:  CLRF   FA8
178C:  BCF    FA6.6
178E:  BCF    FA6.7
1790:  BSF    FA6.2
1792:  MOVF   FF2,W
1794:  MOVWF  00
1796:  BCF    FF2.6
1798:  BCF    FF2.7
179A:  MOVLB  F
179C:  MOVLW  55
179E:  MOVWF  FA7
17A0:  MOVLW  AA
17A2:  MOVWF  FA7
17A4:  BSF    FA6.1
17A6:  BTFSC  FA6.1
17A8:  BRA    17A6
17AA:  BCF    FA6.2
17AC:  MOVF   00,W
17AE:  IORWF  FF2,F
17B0:  MOVLW  14
17B2:  MOVLB  1
17B4:  MOVWF  x49
17B6:  MOVLB  0
17B8:  CALL   0CA2
....................    } 
....................    if(horas>10000){ 
17BC:  MOVF   5D,W
17BE:  SUBLW  26
17C0:  BC    183E
17C2:  XORLW  FF
17C4:  BNZ   17CC
17C6:  MOVF   5C,W
17C8:  SUBLW  10
17CA:  BC    183E
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
17CC:  CLRF   5D
17CE:  CLRF   5C
17D0:  MOVLW  09
17D2:  MOVWF  FA9
17D4:  MOVLW  0A
17D6:  MOVWF  FA8
17D8:  BCF    FA6.6
17DA:  BCF    FA6.7
17DC:  BSF    FA6.2
17DE:  MOVF   FF2,W
17E0:  MOVWF  00
17E2:  BCF    FF2.6
17E4:  BCF    FF2.7
17E6:  MOVLB  F
17E8:  MOVLW  55
17EA:  MOVWF  FA7
17EC:  MOVLW  AA
17EE:  MOVWF  FA7
17F0:  BSF    FA6.1
17F2:  BTFSC  FA6.1
17F4:  BRA    17F2
17F6:  BCF    FA6.2
17F8:  MOVF   00,W
17FA:  IORWF  FF2,F
17FC:  MOVLW  14
17FE:  MOVLB  1
1800:  MOVWF  x49
1802:  MOVLB  0
1804:  CALL   0CA2
1808:  MOVLW  0A
180A:  MOVWF  FA9
180C:  CLRF   FA8
180E:  BCF    FA6.6
1810:  BCF    FA6.7
1812:  BSF    FA6.2
1814:  MOVF   FF2,W
1816:  MOVWF  00
1818:  BCF    FF2.6
181A:  BCF    FF2.7
181C:  MOVLB  F
181E:  MOVLW  55
1820:  MOVWF  FA7
1822:  MOVLW  AA
1824:  MOVWF  FA7
1826:  BSF    FA6.1
1828:  BTFSC  FA6.1
182A:  BRA    1828
182C:  BCF    FA6.2
182E:  MOVF   00,W
1830:  IORWF  FF2,F
1832:  MOVLW  14
1834:  MOVLB  1
1836:  MOVWF  x49
1838:  MOVLB  0
183A:  CALL   0CA2
....................    } 
....................    if(G<150 || G>300){ 
183E:  MOVFF  C9,149
1842:  MOVFF  C8,148
1846:  MOVFF  C7,147
184A:  MOVFF  C6,146
184E:  MOVLB  1
1850:  CLRF   x4D
1852:  CLRF   x4C
1854:  MOVLW  16
1856:  MOVWF  x4B
1858:  MOVLW  86
185A:  MOVWF  x4A
185C:  MOVLB  0
185E:  RCALL  14E4
1860:  BC    1886
1862:  MOVLB  1
1864:  CLRF   x49
1866:  CLRF   x48
1868:  MOVLW  16
186A:  MOVWF  x47
186C:  MOVLW  87
186E:  MOVWF  x46
1870:  MOVFF  C9,14D
1874:  MOVFF  C8,14C
1878:  MOVFF  C7,14B
187C:  MOVFF  C6,14A
1880:  MOVLB  0
1882:  RCALL  14E4
1884:  BNC   1900
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
1886:  CLRF   xC9
1888:  CLRF   xC8
188A:  MOVLW  5C
188C:  MOVWF  xC7
188E:  MOVLW  86
1890:  MOVWF  xC6
1892:  MOVLW  0B
1894:  MOVWF  FA9
1896:  MOVLW  DC
1898:  MOVWF  FA8
189A:  BCF    FA6.6
189C:  BCF    FA6.7
189E:  BSF    FA6.2
18A0:  MOVF   FF2,W
18A2:  MOVWF  00
18A4:  BCF    FF2.6
18A6:  BCF    FF2.7
18A8:  MOVLB  F
18AA:  MOVLW  55
18AC:  MOVWF  FA7
18AE:  MOVLW  AA
18B0:  MOVWF  FA7
18B2:  BSF    FA6.1
18B4:  BTFSC  FA6.1
18B6:  BRA    18B4
18B8:  BCF    FA6.2
18BA:  MOVF   00,W
18BC:  IORWF  FF2,F
18BE:  MOVLW  14
18C0:  MOVLB  1
18C2:  MOVWF  x49
18C4:  MOVLB  0
18C6:  CALL   0CA2
18CA:  MOVLW  0C
18CC:  MOVWF  FA9
18CE:  CLRF   FA8
18D0:  BCF    FA6.6
18D2:  BCF    FA6.7
18D4:  BSF    FA6.2
18D6:  MOVF   FF2,W
18D8:  MOVWF  00
18DA:  BCF    FF2.6
18DC:  BCF    FF2.7
18DE:  MOVLB  F
18E0:  MOVLW  55
18E2:  MOVWF  FA7
18E4:  MOVLW  AA
18E6:  MOVWF  FA7
18E8:  BSF    FA6.1
18EA:  BTFSC  FA6.1
18EC:  BRA    18EA
18EE:  BCF    FA6.2
18F0:  MOVF   00,W
18F2:  IORWF  FF2,F
18F4:  MOVLW  14
18F6:  MOVLB  1
18F8:  MOVWF  x49
18FA:  MOVLB  0
18FC:  CALL   0CA2
....................    } 
....................    if(Vel1>20 || Vel1<1){ 
1900:  MOVF   58,W
1902:  SUBLW  14
1904:  BNC   190A
1906:  MOVF   58,F
1908:  BNZ   1946
....................       Vel1=10;write_eeprom(13,10);delay_ms(20); 
190A:  MOVLW  0A
190C:  MOVWF  58
190E:  MOVLW  0D
1910:  MOVWF  FA9
1912:  MOVLW  0A
1914:  MOVWF  FA8
1916:  BCF    FA6.6
1918:  BCF    FA6.7
191A:  BSF    FA6.2
191C:  MOVF   FF2,W
191E:  MOVWF  00
1920:  BCF    FF2.6
1922:  BCF    FF2.7
1924:  MOVLB  F
1926:  MOVLW  55
1928:  MOVWF  FA7
192A:  MOVLW  AA
192C:  MOVWF  FA7
192E:  BSF    FA6.1
1930:  BTFSC  FA6.1
1932:  BRA    1930
1934:  BCF    FA6.2
1936:  MOVF   00,W
1938:  IORWF  FF2,F
193A:  MOVLW  14
193C:  MOVLB  1
193E:  MOVWF  x49
1940:  MOVLB  0
1942:  CALL   0CA2
....................    } 
....................    if(horasTrabajo>60000){ 
1946:  MOVF   xD8,W
1948:  SUBLW  E9
194A:  BC    19C6
194C:  XORLW  FF
194E:  BNZ   1956
1950:  MOVF   xD7,W
1952:  SUBLW  60
1954:  BC    19C6
....................       horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
1956:  CLRF   xD8
1958:  CLRF   xD7
195A:  MOVLW  13
195C:  MOVWF  FA9
195E:  CLRF   FA8
1960:  BCF    FA6.6
1962:  BCF    FA6.7
1964:  BSF    FA6.2
1966:  MOVF   FF2,W
1968:  MOVWF  00
196A:  BCF    FF2.6
196C:  BCF    FF2.7
196E:  MOVLB  F
1970:  MOVLW  55
1972:  MOVWF  FA7
1974:  MOVLW  AA
1976:  MOVWF  FA7
1978:  BSF    FA6.1
197A:  BTFSC  FA6.1
197C:  BRA    197A
197E:  BCF    FA6.2
1980:  MOVF   00,W
1982:  IORWF  FF2,F
1984:  MOVLW  14
1986:  MOVLB  1
1988:  MOVWF  x49
198A:  MOVLB  0
198C:  CALL   0CA2
1990:  MOVLW  12
1992:  MOVWF  FA9
1994:  CLRF   FA8
1996:  BCF    FA6.6
1998:  BCF    FA6.7
199A:  BSF    FA6.2
199C:  MOVF   FF2,W
199E:  MOVWF  00
19A0:  BCF    FF2.6
19A2:  BCF    FF2.7
19A4:  MOVLB  F
19A6:  MOVLW  55
19A8:  MOVWF  FA7
19AA:  MOVLW  AA
19AC:  MOVWF  FA7
19AE:  BSF    FA6.1
19B0:  BTFSC  FA6.1
19B2:  BRA    19B0
19B4:  BCF    FA6.2
19B6:  MOVF   00,W
19B8:  IORWF  FF2,F
19BA:  MOVLW  14
19BC:  MOVLB  1
19BE:  MOVWF  x49
19C0:  MOVLB  0
19C2:  CALL   0CA2
....................    } 
....................    if(segundosTrabajo>3600){ 
19C6:  MOVF   xD6,W
19C8:  SUBLW  0D
19CA:  BC    1A46
19CC:  XORLW  FF
19CE:  BNZ   19D6
19D0:  MOVF   xD5,W
19D2:  SUBLW  10
19D4:  BC    1A46
....................       segundosTrabajo=0;write_eeprom(20,0);delay_ms(20);write_eeprom(21,0);delay_ms(20); 
19D6:  CLRF   xD6
19D8:  CLRF   xD5
19DA:  MOVLW  14
19DC:  MOVWF  FA9
19DE:  CLRF   FA8
19E0:  BCF    FA6.6
19E2:  BCF    FA6.7
19E4:  BSF    FA6.2
19E6:  MOVF   FF2,W
19E8:  MOVWF  00
19EA:  BCF    FF2.6
19EC:  BCF    FF2.7
19EE:  MOVLB  F
19F0:  MOVLW  55
19F2:  MOVWF  FA7
19F4:  MOVLW  AA
19F6:  MOVWF  FA7
19F8:  BSF    FA6.1
19FA:  BTFSC  FA6.1
19FC:  BRA    19FA
19FE:  BCF    FA6.2
1A00:  MOVF   00,W
1A02:  IORWF  FF2,F
1A04:  MOVLW  14
1A06:  MOVLB  1
1A08:  MOVWF  x49
1A0A:  MOVLB  0
1A0C:  CALL   0CA2
1A10:  MOVLW  15
1A12:  MOVWF  FA9
1A14:  CLRF   FA8
1A16:  BCF    FA6.6
1A18:  BCF    FA6.7
1A1A:  BSF    FA6.2
1A1C:  MOVF   FF2,W
1A1E:  MOVWF  00
1A20:  BCF    FF2.6
1A22:  BCF    FF2.7
1A24:  MOVLB  F
1A26:  MOVLW  55
1A28:  MOVWF  FA7
1A2A:  MOVLW  AA
1A2C:  MOVWF  FA7
1A2E:  BSF    FA6.1
1A30:  BTFSC  FA6.1
1A32:  BRA    1A30
1A34:  BCF    FA6.2
1A36:  MOVF   00,W
1A38:  IORWF  FF2,F
1A3A:  MOVLW  14
1A3C:  MOVLB  1
1A3E:  MOVWF  x49
1A40:  MOVLB  0
1A42:  CALL   0CA2
....................    } 
....................    if(motor>1){ 
1A46:  MOVF   44,W
1A48:  SUBLW  01
1A4A:  BC    1A88
....................       motor=1;write_eeprom(22,1);delay_ms(20); 
1A4C:  MOVLW  01
1A4E:  MOVWF  44
1A50:  MOVLW  16
1A52:  MOVWF  FA9
1A54:  MOVLW  01
1A56:  MOVWF  FA8
1A58:  BCF    FA6.6
1A5A:  BCF    FA6.7
1A5C:  BSF    FA6.2
1A5E:  MOVF   FF2,W
1A60:  MOVWF  00
1A62:  BCF    FF2.6
1A64:  BCF    FF2.7
1A66:  MOVLB  F
1A68:  MOVLW  55
1A6A:  MOVWF  FA7
1A6C:  MOVLW  AA
1A6E:  MOVWF  FA7
1A70:  BSF    FA6.1
1A72:  BTFSC  FA6.1
1A74:  BRA    1A72
1A76:  BCF    FA6.2
1A78:  MOVF   00,W
1A7A:  IORWF  FF2,F
1A7C:  MOVLW  14
1A7E:  MOVLB  1
1A80:  MOVWF  x49
1A82:  MOVLB  0
1A84:  CALL   0CA2
....................    } 
....................    if(luz>1){ 
1A88:  MOVF   45,W
1A8A:  SUBLW  01
1A8C:  BC    1ACA
....................       luz=1;write_eeprom(23,1);delay_ms(20); 
1A8E:  MOVLW  01
1A90:  MOVWF  45
1A92:  MOVLW  17
1A94:  MOVWF  FA9
1A96:  MOVLW  01
1A98:  MOVWF  FA8
1A9A:  BCF    FA6.6
1A9C:  BCF    FA6.7
1A9E:  BSF    FA6.2
1AA0:  MOVF   FF2,W
1AA2:  MOVWF  00
1AA4:  BCF    FF2.6
1AA6:  BCF    FF2.7
1AA8:  MOVLB  F
1AAA:  MOVLW  55
1AAC:  MOVWF  FA7
1AAE:  MOVLW  AA
1AB0:  MOVWF  FA7
1AB2:  BSF    FA6.1
1AB4:  BTFSC  FA6.1
1AB6:  BRA    1AB4
1AB8:  BCF    FA6.2
1ABA:  MOVF   00,W
1ABC:  IORWF  FF2,F
1ABE:  MOVLW  14
1AC0:  MOVLB  1
1AC2:  MOVWF  x49
1AC4:  MOVLB  0
1AC6:  CALL   0CA2
....................    } 
....................    if(velocidadInicial>15){ 
1ACA:  MOVF   46,W
1ACC:  SUBLW  0F
1ACE:  BC    1B0C
....................       velocidadInicial=10;write_eeprom(24,10);delay_ms(20); 
1AD0:  MOVLW  0A
1AD2:  MOVWF  46
1AD4:  MOVLW  18
1AD6:  MOVWF  FA9
1AD8:  MOVLW  0A
1ADA:  MOVWF  FA8
1ADC:  BCF    FA6.6
1ADE:  BCF    FA6.7
1AE0:  BSF    FA6.2
1AE2:  MOVF   FF2,W
1AE4:  MOVWF  00
1AE6:  BCF    FF2.6
1AE8:  BCF    FF2.7
1AEA:  MOVLB  F
1AEC:  MOVLW  55
1AEE:  MOVWF  FA7
1AF0:  MOVLW  AA
1AF2:  MOVWF  FA7
1AF4:  BSF    FA6.1
1AF6:  BTFSC  FA6.1
1AF8:  BRA    1AF6
1AFA:  BCF    FA6.2
1AFC:  MOVF   00,W
1AFE:  IORWF  FF2,F
1B00:  MOVLW  14
1B02:  MOVLB  1
1B04:  MOVWF  x49
1B06:  MOVLB  0
1B08:  CALL   0CA2
....................    } 
....................    /* 
....................    if(Flujo[1].Ajuste>10.0 || Flujo[1].Ajuste==0.0){ 
....................       Flujo[1].Ajuste=1.5;write_eeprom(25,1);write_eeprom(26,50); 
....................    } 
....................    if(Flujo[1].zero_actual>280 ||Flujo[1].zero_actual<180 ){ 
....................       Flujo[1].zero_actual=203;write_eeprom(27,203);write_eeprom(28,0); 
....................    } 
....................    */ 
....................    if(Pr>110 || Pr<60){ 
1B0C:  MOVLB  1
1B0E:  CLRF   x49
1B10:  CLRF   x48
1B12:  MOVLW  5C
1B14:  MOVWF  x47
1B16:  MOVLW  85
1B18:  MOVWF  x46
1B1A:  MOVFF  11D,14D
1B1E:  MOVFF  11C,14C
1B22:  MOVFF  11B,14B
1B26:  MOVFF  11A,14A
1B2A:  MOVLB  0
1B2C:  RCALL  14E4
1B2E:  BC    1B54
1B30:  MOVFF  11D,149
1B34:  MOVFF  11C,148
1B38:  MOVFF  11B,147
1B3C:  MOVFF  11A,146
1B40:  MOVLB  1
1B42:  CLRF   x4D
1B44:  CLRF   x4C
1B46:  MOVLW  70
1B48:  MOVWF  x4B
1B4A:  MOVLW  84
1B4C:  MOVWF  x4A
1B4E:  MOVLB  0
1B50:  RCALL  14E4
1B52:  BNC   1B8E
....................       Pr=71;write_eeprom(29,71); 
1B54:  MOVLB  1
1B56:  CLRF   x1D
1B58:  CLRF   x1C
1B5A:  MOVLW  0E
1B5C:  MOVWF  x1B
1B5E:  MOVLW  85
1B60:  MOVWF  x1A
1B62:  MOVLW  1D
1B64:  MOVWF  FA9
1B66:  MOVLW  47
1B68:  MOVWF  FA8
1B6A:  BCF    FA6.6
1B6C:  BCF    FA6.7
1B6E:  BSF    FA6.2
1B70:  MOVF   FF2,W
1B72:  MOVWF  00
1B74:  BCF    FF2.6
1B76:  BCF    FF2.7
1B78:  MOVLB  F
1B7A:  MOVLW  55
1B7C:  MOVWF  FA7
1B7E:  MOVLW  AA
1B80:  MOVWF  FA7
1B82:  BSF    FA6.1
1B84:  BTFSC  FA6.1
1B86:  BRA    1B84
1B88:  BCF    FA6.2
1B8A:  MOVF   00,W
1B8C:  IORWF  FF2,F
....................    } 
....................    if(HR>100 || HR<20){ 
1B8E:  MOVLB  1
1B90:  CLRF   x49
1B92:  CLRF   x48
1B94:  MOVLW  48
1B96:  MOVWF  x47
1B98:  MOVLW  85
1B9A:  MOVWF  x46
1B9C:  MOVFF  125,14D
1BA0:  MOVFF  124,14C
1BA4:  MOVFF  123,14B
1BA8:  MOVFF  122,14A
1BAC:  MOVLB  0
1BAE:  RCALL  14E4
1BB0:  BC    1BD6
1BB2:  MOVFF  125,149
1BB6:  MOVFF  124,148
1BBA:  MOVFF  123,147
1BBE:  MOVFF  122,146
1BC2:  MOVLB  1
1BC4:  CLRF   x4D
1BC6:  CLRF   x4C
1BC8:  MOVLW  20
1BCA:  MOVWF  x4B
1BCC:  MOVLW  83
1BCE:  MOVWF  x4A
1BD0:  MOVLB  0
1BD2:  RCALL  14E4
1BD4:  BNC   1C12
....................       HR=60;write_eeprom(30,60); 
1BD6:  MOVLB  1
1BD8:  CLRF   x25
1BDA:  CLRF   x24
1BDC:  MOVLW  70
1BDE:  MOVWF  x23
1BE0:  MOVLW  84
1BE2:  MOVWF  x22
1BE4:  MOVLW  1E
1BE6:  MOVWF  FA9
1BE8:  MOVLW  3C
1BEA:  MOVWF  FA8
1BEC:  BCF    FA6.6
1BEE:  BCF    FA6.7
1BF0:  BSF    FA6.2
1BF2:  MOVF   FF2,W
1BF4:  MOVWF  00
1BF6:  BCF    FF2.6
1BF8:  BCF    FF2.7
1BFA:  MOVLB  F
1BFC:  MOVLW  55
1BFE:  MOVWF  FA7
1C00:  MOVLW  AA
1C02:  MOVWF  FA7
1C04:  BSF    FA6.1
1C06:  BTFSC  FA6.1
1C08:  BRA    1C06
1C0A:  BCF    FA6.2
1C0C:  MOVF   00,W
1C0E:  IORWF  FF2,F
1C10:  MOVLB  0
....................    } 
....................    if(Media>80 || Media<10){ 
1C12:  MOVF   59,W
1C14:  SUBLW  50
1C16:  BNC   1C1E
1C18:  MOVF   59,W
1C1A:  SUBLW  09
1C1C:  BNC   1C4E
....................       Media=40;write_eeprom(31,40); 
1C1E:  MOVLW  28
1C20:  MOVWF  59
1C22:  MOVLW  1F
1C24:  MOVWF  FA9
1C26:  MOVLW  28
1C28:  MOVWF  FA8
1C2A:  BCF    FA6.6
1C2C:  BCF    FA6.7
1C2E:  BSF    FA6.2
1C30:  MOVF   FF2,W
1C32:  MOVWF  00
1C34:  BCF    FF2.6
1C36:  BCF    FF2.7
1C38:  MOVLB  F
1C3A:  MOVLW  55
1C3C:  MOVWF  FA7
1C3E:  MOVLW  AA
1C40:  MOVWF  FA7
1C42:  BSF    FA6.1
1C44:  BTFSC  FA6.1
1C46:  BRA    1C44
1C48:  BCF    FA6.2
1C4A:  MOVF   00,W
1C4C:  IORWF  FF2,F
1C4E:  MOVLB  0
....................    } 
.................... } 
1C50:  GOTO   311E (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
....................    if(VIDRIOUUP || !VIDRIODN){ 
....................       O1_on;O2_off; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoBajar=OFF; 
....................    } 
.................... } 
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
....................    if(!VIDRIOUUP || VIDRIODN){ 
....................       O1_off;O2_on; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoSubir=OFF; 
....................    } 
.................... } 
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
.................... } 
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
.................... void cuentaTiempoTrabajoFiltro(){ 
....................    //**Contador de Tiempo de Trabajo del filtro**// 
....................    if(segundosTrabajo>=3600){ // Tiempo de Trabajo 
*
27F4:  MOVF   xD6,W
27F6:  SUBLW  0D
27F8:  BTFSC  FD8.0
27FA:  BRA    2910
27FC:  XORLW  FF
27FE:  BNZ   2808
2800:  MOVF   xD5,W
2802:  SUBLW  0F
2804:  BTFSC  FD8.0
2806:  BRA    2910
....................       segundosTrabajo=0; //Minutos Trabajo realmente son segundos. 
2808:  CLRF   xD6
280A:  CLRF   xD5
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
280C:  MOVFF  D5,132
2810:  MOVLW  14
2812:  MOVWF  FA9
2814:  MOVFF  132,FA8
2818:  BCF    FA6.6
281A:  BCF    FA6.7
281C:  BSF    FA6.2
281E:  MOVF   FF2,W
2820:  MOVWF  00
2822:  BCF    FF2.6
2824:  BCF    FF2.7
2826:  MOVLB  F
2828:  MOVLW  55
282A:  MOVWF  FA7
282C:  MOVLW  AA
282E:  MOVWF  FA7
2830:  BSF    FA6.1
2832:  BTFSC  FA6.1
2834:  BRA    2832
2836:  BCF    FA6.2
2838:  MOVF   00,W
283A:  IORWF  FF2,F
....................       delay_ms(20); 
283C:  MOVLW  14
283E:  MOVLB  1
2840:  MOVWF  x49
2842:  MOVLB  0
2844:  CALL   0CA2
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
2848:  MOVFF  D6,132
284C:  MOVLW  15
284E:  MOVWF  FA9
2850:  MOVFF  132,FA8
2854:  BCF    FA6.6
2856:  BCF    FA6.7
2858:  BSF    FA6.2
285A:  MOVF   FF2,W
285C:  MOVWF  00
285E:  BCF    FF2.6
2860:  BCF    FF2.7
2862:  MOVLB  F
2864:  MOVLW  55
2866:  MOVWF  FA7
2868:  MOVLW  AA
286A:  MOVWF  FA7
286C:  BSF    FA6.1
286E:  BTFSC  FA6.1
2870:  BRA    286E
2872:  BCF    FA6.2
2874:  MOVF   00,W
2876:  IORWF  FF2,F
....................       delay_ms(20); 
2878:  MOVLW  14
287A:  MOVLB  1
287C:  MOVWF  x49
287E:  MOVLB  0
2880:  CALL   0CA2
....................       horasTrabajo++; 
2884:  INCF   xD7,F
2886:  BTFSC  FD8.2
2888:  INCF   xD8,F
....................       write_eeprom(18,make8(horasTrabajo,0)); 
288A:  MOVFF  D7,132
288E:  MOVLW  12
2890:  MOVWF  FA9
2892:  MOVFF  132,FA8
2896:  BCF    FA6.6
2898:  BCF    FA6.7
289A:  BSF    FA6.2
289C:  MOVF   FF2,W
289E:  MOVWF  00
28A0:  BCF    FF2.6
28A2:  BCF    FF2.7
28A4:  MOVLB  F
28A6:  MOVLW  55
28A8:  MOVWF  FA7
28AA:  MOVLW  AA
28AC:  MOVWF  FA7
28AE:  BSF    FA6.1
28B0:  BTFSC  FA6.1
28B2:  BRA    28B0
28B4:  BCF    FA6.2
28B6:  MOVF   00,W
28B8:  IORWF  FF2,F
....................       delay_ms(20); 
28BA:  MOVLW  14
28BC:  MOVLB  1
28BE:  MOVWF  x49
28C0:  MOVLB  0
28C2:  CALL   0CA2
....................       write_eeprom(19,make8(horasTrabajo,1)); 
28C6:  MOVFF  D8,132
28CA:  MOVLW  13
28CC:  MOVWF  FA9
28CE:  MOVFF  132,FA8
28D2:  BCF    FA6.6
28D4:  BCF    FA6.7
28D6:  BSF    FA6.2
28D8:  MOVF   FF2,W
28DA:  MOVWF  00
28DC:  BCF    FF2.6
28DE:  BCF    FF2.7
28E0:  MOVLB  F
28E2:  MOVLW  55
28E4:  MOVWF  FA7
28E6:  MOVLW  AA
28E8:  MOVWF  FA7
28EA:  BSF    FA6.1
28EC:  BTFSC  FA6.1
28EE:  BRA    28EC
28F0:  BCF    FA6.2
28F2:  MOVF   00,W
28F4:  IORWF  FF2,F
....................       delay_ms(20); 
28F6:  MOVLW  14
28F8:  MOVLB  1
28FA:  MOVWF  x49
28FC:  MOVLB  0
28FE:  CALL   0CA2
....................       delay_ms(20); 
2902:  MOVLW  14
2904:  MOVLB  1
2906:  MOVWF  x49
2908:  MOVLB  0
290A:  CALL   0CA2
....................    }else if(segundosTrabajo==900 || segundosTrabajo==1800 || segundosTrabajo==2700 ){ 
290E:  BRA    29AC
2910:  MOVF   xD5,W
2912:  SUBLW  84
2914:  BNZ   291C
2916:  MOVF   xD6,W
2918:  SUBLW  03
291A:  BZ    2934
291C:  MOVF   xD5,W
291E:  SUBLW  08
2920:  BNZ   2928
2922:  MOVF   xD6,W
2924:  SUBLW  07
2926:  BZ    2934
2928:  MOVF   xD5,W
292A:  SUBLW  8C
292C:  BNZ   29AC
292E:  MOVF   xD6,W
2930:  SUBLW  0A
2932:  BNZ   29AC
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
2934:  MOVFF  D5,132
2938:  MOVLW  14
293A:  MOVWF  FA9
293C:  MOVFF  132,FA8
2940:  BCF    FA6.6
2942:  BCF    FA6.7
2944:  BSF    FA6.2
2946:  MOVF   FF2,W
2948:  MOVWF  00
294A:  BCF    FF2.6
294C:  BCF    FF2.7
294E:  MOVLB  F
2950:  MOVLW  55
2952:  MOVWF  FA7
2954:  MOVLW  AA
2956:  MOVWF  FA7
2958:  BSF    FA6.1
295A:  BTFSC  FA6.1
295C:  BRA    295A
295E:  BCF    FA6.2
2960:  MOVF   00,W
2962:  IORWF  FF2,F
....................       delay_ms(20); 
2964:  MOVLW  14
2966:  MOVLB  1
2968:  MOVWF  x49
296A:  MOVLB  0
296C:  CALL   0CA2
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
2970:  MOVFF  D6,132
2974:  MOVLW  15
2976:  MOVWF  FA9
2978:  MOVFF  132,FA8
297C:  BCF    FA6.6
297E:  BCF    FA6.7
2980:  BSF    FA6.2
2982:  MOVF   FF2,W
2984:  MOVWF  00
2986:  BCF    FF2.6
2988:  BCF    FF2.7
298A:  MOVLB  F
298C:  MOVLW  55
298E:  MOVWF  FA7
2990:  MOVLW  AA
2992:  MOVWF  FA7
2994:  BSF    FA6.1
2996:  BTFSC  FA6.1
2998:  BRA    2996
299A:  BCF    FA6.2
299C:  MOVF   00,W
299E:  IORWF  FF2,F
....................       delay_ms(20); 
29A0:  MOVLW  14
29A2:  MOVLB  1
29A4:  MOVWF  x49
29A6:  MOVLB  0
29A8:  CALL   0CA2
....................    } 
.................... //----------------------------------------// 
.................... } 
29AC:  GOTO   3B5C (RETURN)
....................  
.................... void clearSalidasSinUsar(){ 
....................    output_bit(PIN_A3,0); 
....................    //output_bit(PIN_C3,0);//Solo para PIC Diferente a 18F4550 
....................    //output_bit(PIN_C4,0); 
....................    //output_bit(PIN_C5,0); 
....................    output_bit(PIN_C6,0); 
....................    output_bit(PIN_C7,0); 
....................    output_bit(PIN_B5,0); 
.................... }  
.................... /* 
.................... Float LeerFlujo(int8 media,int8 canal){ 
....................     float dif=0.0; 
....................     Flujo[canal].adc=sensores(canal); 
....................      
....................     dif=zero_fabrica-Flujo[canal].zero_actual; 
....................     x_uno=Flujo[canal].adc+dif; 
....................     x_uno=(x_uno/1023)*5;     
....................     Flujo[canal].Velocidad=(pow(x_uno,4)*p1)+(pow(x_uno,3)*p2)+(pow(x_uno,2)*p3)+(x_uno*p4)+p5;     
....................      
....................     if(Flujo[canal].Velocidad<0.0) 
....................       Flujo[canal].Velocidad=0.0; 
....................       
....................      if(Flujo[canal].l>media-1) 
....................        {Flujo[canal].l=0;} 
....................       
....................      Flujo[canal].promedio[Flujo[canal].l]=Flujo[canal].Velocidad; 
....................      Flujo[canal].l++; 
....................      Flujo[canal].Flujo=0; 
....................       
....................      for(q=0;q<=(media-1);q++){ 
....................         Flujo[canal].Flujo+=Flujo[canal].promedio[q]; 
....................      }  
....................      Flujo[canal].Flujo=(Flujo[canal].Flujo/media)*Flujo[canal].Ajuste;  
....................       
....................      Flujo[canal].Flujo=Flujo[canal].Flujo/(densidad*0.0052810296*3600);//0.0052810296=Area con tubo de 8.2cm 
....................      return Flujo[canal].Flujo; 
.................... } 
....................  
.................... void calculaDensidad(){ 
....................    Temp=20; 
....................    TempK=Temp+273.15; 
....................    Pa=Pr*1000; 
....................     
....................    Psv=exp((0.000012378847*pow(TempK,2))+(-0.019121316*TempK)+33.93711047+(-6343.1645/TempK)); 
....................    f=1.00062+(0.0000000314*Pa)+(0.00000056*Temp); 
....................    Xv=(HR/100)*f*(Psv/Pa); 
....................    Z1=1-((Pa/TempK)*(0.00000158123+(-0.000000029331*Temp)+(0.00000000011043*pow(Temp,2))+((0.000005707+(-0.00000002051*Temp))*Xv)+((0.0001989+(-0.000002376*Temp)))*pow(Xv,2)))+((pow(Pa,2)/pow(TempK,2))*(0.0000000000183+(-0.00000000765*pow(Xv,2)))); 
....................    densidad=((Pa*0.028963512440)/(Z1*TempK*8.314472))*(1-(Xv*(1-(0.018015/0.028963512440)))); 
.................... }*/ 
....................  
....................  
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
0248:  BSF    xCA.1
....................     
....................    if(VelMotor==19){ 
024A:  MOVF   xEF,W
024C:  SUBLW  13
024E:  BNZ   0260
....................       set_timer0(237);       
0250:  CLRF   FD7
0252:  MOVLW  ED
0254:  MOVWF  FD6
....................       Motor_off;  
0256:  BCF    F8B.2
0258:  BCF    F94.2
....................       Motor2_off;  
025A:  BCF    F8B.1
025C:  BCF    F94.1
....................    }else if(VelMotor==18){ 
025E:  BRA    03E8
0260:  MOVF   xEF,W
0262:  SUBLW  12
0264:  BNZ   0276
....................       set_timer0(234);       
0266:  CLRF   FD7
0268:  MOVLW  EA
026A:  MOVWF  FD6
....................       Motor_off;  
026C:  BCF    F8B.2
026E:  BCF    F94.2
....................       Motor2_off;  
0270:  BCF    F8B.1
0272:  BCF    F94.1
....................    }else if(VelMotor==17){ 
0274:  BRA    03E8
0276:  MOVF   xEF,W
0278:  SUBLW  11
027A:  BNZ   028C
....................       set_timer0(231);       
027C:  CLRF   FD7
027E:  MOVLW  E7
0280:  MOVWF  FD6
....................       Motor_off;  
0282:  BCF    F8B.2
0284:  BCF    F94.2
....................       Motor2_off;  
0286:  BCF    F8B.1
0288:  BCF    F94.1
....................    }else if(VelMotor==16){ 
028A:  BRA    03E8
028C:  MOVF   xEF,W
028E:  SUBLW  10
0290:  BNZ   02A2
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
0292:  CLRF   FD7
0294:  MOVLW  E4
0296:  MOVWF  FD6
....................       Motor_off;  
0298:  BCF    F8B.2
029A:  BCF    F94.2
....................       Motor2_off;  
029C:  BCF    F8B.1
029E:  BCF    F94.1
....................    }else if(VelMotor==15){ 
02A0:  BRA    03E8
02A2:  MOVF   xEF,W
02A4:  SUBLW  0F
02A6:  BNZ   02B8
....................       set_timer0(225);       
02A8:  CLRF   FD7
02AA:  MOVLW  E1
02AC:  MOVWF  FD6
....................       Motor_off;  
02AE:  BCF    F8B.2
02B0:  BCF    F94.2
....................       Motor2_off;  
02B2:  BCF    F8B.1
02B4:  BCF    F94.1
....................    }else if(VelMotor==14){ 
02B6:  BRA    03E8
02B8:  MOVF   xEF,W
02BA:  SUBLW  0E
02BC:  BNZ   02CE
....................       set_timer0(222);       
02BE:  CLRF   FD7
02C0:  MOVLW  DE
02C2:  MOVWF  FD6
....................       Motor_off;  
02C4:  BCF    F8B.2
02C6:  BCF    F94.2
....................       Motor2_off;  
02C8:  BCF    F8B.1
02CA:  BCF    F94.1
....................    }else if(VelMotor==13){ 
02CC:  BRA    03E8
02CE:  MOVF   xEF,W
02D0:  SUBLW  0D
02D2:  BNZ   02E4
....................       set_timer0(219);       
02D4:  CLRF   FD7
02D6:  MOVLW  DB
02D8:  MOVWF  FD6
....................       Motor_off;  
02DA:  BCF    F8B.2
02DC:  BCF    F94.2
....................       Motor2_off;  
02DE:  BCF    F8B.1
02E0:  BCF    F94.1
....................    }else if(VelMotor==12){ 
02E2:  BRA    03E8
02E4:  MOVF   xEF,W
02E6:  SUBLW  0C
02E8:  BNZ   02FA
....................       set_timer0(216);       
02EA:  CLRF   FD7
02EC:  MOVLW  D8
02EE:  MOVWF  FD6
....................       Motor_off;  
02F0:  BCF    F8B.2
02F2:  BCF    F94.2
....................       Motor2_off;  
02F4:  BCF    F8B.1
02F6:  BCF    F94.1
....................    }else if(VelMotor==11){ 
02F8:  BRA    03E8
02FA:  MOVF   xEF,W
02FC:  SUBLW  0B
02FE:  BNZ   0310
....................       set_timer0(213);       
0300:  CLRF   FD7
0302:  MOVLW  D5
0304:  MOVWF  FD6
....................       Motor_off;  
0306:  BCF    F8B.2
0308:  BCF    F94.2
....................       Motor2_off;  
030A:  BCF    F8B.1
030C:  BCF    F94.1
....................    }else if(VelMotor==10){ 
030E:  BRA    03E8
0310:  MOVF   xEF,W
0312:  SUBLW  0A
0314:  BNZ   0326
....................       set_timer0(210);       
0316:  CLRF   FD7
0318:  MOVLW  D2
031A:  MOVWF  FD6
....................       Motor_off;  
031C:  BCF    F8B.2
031E:  BCF    F94.2
....................       Motor2_off;  
0320:  BCF    F8B.1
0322:  BCF    F94.1
....................    }else if(VelMotor==9){ 
0324:  BRA    03E8
0326:  MOVF   xEF,W
0328:  SUBLW  09
032A:  BNZ   033C
....................       set_timer0(207);       
032C:  CLRF   FD7
032E:  MOVLW  CF
0330:  MOVWF  FD6
....................       Motor_off;  
0332:  BCF    F8B.2
0334:  BCF    F94.2
....................       Motor2_off;  
0336:  BCF    F8B.1
0338:  BCF    F94.1
....................    }else if(VelMotor==8){ 
033A:  BRA    03E8
033C:  MOVF   xEF,W
033E:  SUBLW  08
0340:  BNZ   0352
....................       set_timer0(204);       
0342:  CLRF   FD7
0344:  MOVLW  CC
0346:  MOVWF  FD6
....................       Motor_off;  
0348:  BCF    F8B.2
034A:  BCF    F94.2
....................       Motor2_off;  
034C:  BCF    F8B.1
034E:  BCF    F94.1
....................    }else if(VelMotor==7){ 
0350:  BRA    03E8
0352:  MOVF   xEF,W
0354:  SUBLW  07
0356:  BNZ   0368
....................       set_timer0(201);       
0358:  CLRF   FD7
035A:  MOVLW  C9
035C:  MOVWF  FD6
....................       Motor_off;  
035E:  BCF    F8B.2
0360:  BCF    F94.2
....................       Motor2_off;  
0362:  BCF    F8B.1
0364:  BCF    F94.1
....................    }else if(VelMotor==6){ 
0366:  BRA    03E8
0368:  MOVF   xEF,W
036A:  SUBLW  06
036C:  BNZ   037E
....................       set_timer0(198);       
036E:  CLRF   FD7
0370:  MOVLW  C6
0372:  MOVWF  FD6
....................       Motor_off;  
0374:  BCF    F8B.2
0376:  BCF    F94.2
....................       Motor2_off;  
0378:  BCF    F8B.1
037A:  BCF    F94.1
....................    }else if(VelMotor==5){ 
037C:  BRA    03E8
037E:  MOVF   xEF,W
0380:  SUBLW  05
0382:  BNZ   0394
....................       set_timer0(195);       
0384:  CLRF   FD7
0386:  MOVLW  C3
0388:  MOVWF  FD6
....................       Motor_off;  
038A:  BCF    F8B.2
038C:  BCF    F94.2
....................       Motor2_off;  
038E:  BCF    F8B.1
0390:  BCF    F94.1
....................    }else if(VelMotor==4){ 
0392:  BRA    03E8
0394:  MOVF   xEF,W
0396:  SUBLW  04
0398:  BNZ   03AA
....................       set_timer0(192);       
039A:  CLRF   FD7
039C:  MOVLW  C0
039E:  MOVWF  FD6
....................       Motor_off;  
03A0:  BCF    F8B.2
03A2:  BCF    F94.2
....................       Motor2_off;  
03A4:  BCF    F8B.1
03A6:  BCF    F94.1
....................    }else if(VelMotor==3){ 
03A8:  BRA    03E8
03AA:  MOVF   xEF,W
03AC:  SUBLW  03
03AE:  BNZ   03C0
....................       set_timer0(189); 
03B0:  CLRF   FD7
03B2:  MOVLW  BD
03B4:  MOVWF  FD6
....................       Motor_off;  
03B6:  BCF    F8B.2
03B8:  BCF    F94.2
....................       Motor2_off;  
03BA:  BCF    F8B.1
03BC:  BCF    F94.1
....................    }else if(VelMotor==2){ 
03BE:  BRA    03E8
03C0:  MOVF   xEF,W
03C2:  SUBLW  02
03C4:  BNZ   03D6
....................       set_timer0(186); 
03C6:  CLRF   FD7
03C8:  MOVLW  BA
03CA:  MOVWF  FD6
....................       Motor_off;  
03CC:  BCF    F8B.2
03CE:  BCF    F94.2
....................       Motor2_off;  
03D0:  BCF    F8B.1
03D2:  BCF    F94.1
....................    }else if(VelMotor==1){ 
03D4:  BRA    03E8
03D6:  DECFSZ xEF,W
03D8:  BRA    03E8
....................       set_timer0(183); 
03DA:  CLRF   FD7
03DC:  MOVLW  B7
03DE:  MOVWF  FD6
....................       Motor_off;  
03E0:  BCF    F8B.2
03E2:  BCF    F94.2
....................       Motor2_off;  
03E4:  BCF    F8B.1
03E6:  BCF    F94.1
....................    } 
....................    pulsos++;    
03E8:  INCF   xCB,F
03EA:  BTFSC  FD8.2
03EC:  INCF   xCC,F
.................... } 
....................  
03EE:  BCF    FF2.1
03F0:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<20){ 
03F4:  MOVF   xEF,F
03F6:  BZ    0420
03F8:  MOVF   xEF,W
03FA:  SUBLW  13
03FC:  BNC   0420
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
03FE:  BTFSS  xCA.1
0400:  BRA    0414
....................       Motor_on; 
0402:  BSF    F8B.2
0404:  BCF    F94.2
....................       Motor2_on;  
0406:  BSF    F8B.1
0408:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
040A:  CLRF   FD7
040C:  MOVLW  FD
040E:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
0410:  BCF    xCA.1
....................    } else {            //The triac has been triggered, cut the pulse 
0412:  BRA    0420
....................       Motor_off; 
0414:  BCF    F8B.2
0416:  BCF    F94.2
....................       Motor2_off;  
0418:  BCF    F8B.1
041A:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
041C:  CLRF   FD7
041E:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
.................... //#int_TIMER2 
0420:  BCF    FF2.2
0422:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer2(231);//100.25uS 
....................    set_timer1(40536);//5ms 
0426:  MOVLW  9E
0428:  MOVWF  FCF
042A:  MOVLW  58
042C:  MOVWF  FCE
....................    tiempos++; 
042E:  INCF   5A,F
0430:  BTFSC  FD8.2
0432:  INCF   5B,F
....................    if(UP) 
0434:  BSF    F92.5
0436:  BTFSC  F80.5
0438:  BRA    0442
....................          tup++; 
043A:  INCF   xCD,F
043C:  BTFSC  FD8.2
043E:  INCF   xCE,F
....................       else 
0440:  BRA    0446
....................          tup=0; 
0442:  CLRF   xCE
0444:  CLRF   xCD
....................           
....................       if(DOWN) 
0446:  BSF    F96.0
0448:  BTFSC  F84.0
044A:  BRA    0454
....................          tdown++; 
044C:  INCF   xCF,F
044E:  BTFSC  FD8.2
0450:  INCF   xD0,F
....................       else 
0452:  BRA    0458
....................          tdown=0; 
0454:  CLRF   xD0
0456:  CLRF   xCF
....................           
....................       if(RIGHT) 
0458:  BSF    F96.1
045A:  BTFSC  F84.1
045C:  BRA    0466
....................          tright++; 
045E:  INCF   xD1,F
0460:  BTFSC  FD8.2
0462:  INCF   xD2,F
....................       else 
0464:  BRA    046A
....................          tright=0; 
0466:  CLRF   xD2
0468:  CLRF   xD1
....................        
....................       if(IZQU) 
046A:  BSF    F96.2
046C:  BTFSC  F84.2
046E:  BRA    0478
....................          tleft++; 
0470:  INCF   xD3,F
0472:  BTFSC  FD8.2
0474:  INCF   xD4,F
....................       else 
0476:  BRA    047C
....................          tleft=0; 
0478:  CLRF   xD4
047A:  CLRF   xD3
....................      
....................    //if(tiempos>=10000){ 
....................    //if(tiempos>=9710){//1s 
....................    if(tiempos>=200){//1s 
047C:  MOVF   5B,F
047E:  BNZ   0486
0480:  MOVF   5A,W
0482:  SUBLW  C7
0484:  BC    04F2
....................       output_toggle(PIN_A3); 
0486:  BCF    F92.3
0488:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
048A:  CLRF   5B
048C:  CLRF   5A
048E:  INCF   42,F
0490:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
0492:  DECFSZ 54,W
0494:  BRA    04AA
....................          if(estadobuzzer==0){ 
0496:  BTFSC  2A.3
0498:  BRA    04A0
....................             Buzzer_off; 
049A:  BCF    F8B.0
049C:  BCF    F94.0
....................          }else{ 
049E:  BRA    04A8
....................             if(estadoalarma==1) 
04A0:  BTFSS  2A.4
04A2:  BRA    04A8
....................                Buzzer_on; 
04A4:  BSF    F8B.0
04A6:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
04A8:  BTG    2A.3
....................       } 
....................       if(estadomv==1){ 
04AA:  BTFSS  29.2
04AC:  BRA    04C4
....................          segundosTrabajo++; 
04AE:  INCF   xD5,F
04B0:  BTFSC  FD8.2
04B2:  INCF   xD6,F
....................          if(tEncendido<60){ 
04B4:  MOVF   61,F
04B6:  BNZ   04C4
04B8:  MOVF   60,W
04BA:  SUBLW  3B
04BC:  BNC   04C4
....................             tEncendido++; 
04BE:  INCF   60,F
04C0:  BTFSC  FD8.2
04C2:  INCF   61,F
....................          } 
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
04C4:  BTFSS  29.0
04C6:  BRA    04F2
....................          segundos++; 
04C8:  INCF   34,F
....................          if(tiempo_cumplido==0){ 
04CA:  BTFSC  29.7
04CC:  BRA    04F2
....................             if(tempo_segundos>0){ 
04CE:  MOVF   3B,F
04D0:  BZ    04D6
....................                tempo_segundos--; 
04D2:  DECF   3B,F
....................             }else{ 
04D4:  BRA    04F2
....................                if(tempo_minutos>0){ 
04D6:  MOVF   3A,F
04D8:  BZ    04E2
....................                   tempo_minutos--; 
04DA:  DECF   3A,F
....................                   tempo_segundos=59; 
04DC:  MOVLW  3B
04DE:  MOVWF  3B
....................                }else{ 
04E0:  BRA    04F2
....................                   tiempo_cumplido=1; 
04E2:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
04E4:  BCF    29.0
04E6:  BSF    F8A.4
04E8:  BCF    F93.4
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
04EA:  MOVFF  3C,3A
04EE:  MOVFF  3D,3B
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
04F2:  BCF    F9E.0
04F4:  GOTO   0064
.................... void main () 
.................... { 
*
2F1C:  CLRF   FF8
2F1E:  BSF    FF1.2
2F20:  BCF    F9F.0
2F22:  BSF    FD0.7
2F24:  BSF    07.7
2F26:  CLRF   FEA
2F28:  CLRF   FE9
2F2A:  BCF    29.0
2F2C:  BCF    29.1
2F2E:  BCF    29.2
2F30:  BCF    29.3
2F32:  BCF    29.4
2F34:  BCF    29.5
2F36:  BCF    29.6
2F38:  BCF    29.7
2F3A:  BCF    2A.0
2F3C:  BCF    2A.1
2F3E:  BCF    2A.2
2F40:  BCF    2A.3
2F42:  BCF    2A.4
2F44:  BCF    2A.5
2F46:  BCF    2A.6
2F48:  CLRF   2B
2F4A:  MOVLW  07
2F4C:  MOVWF  2C
2F4E:  MOVLW  02
2F50:  MOVWF  2D
2F52:  MOVLW  0B
2F54:  MOVWF  2E
2F56:  MOVLW  02
2F58:  MOVWF  2F
2F5A:  MOVLW  03
2F5C:  MOVWF  30
2F5E:  MOVLW  02
2F60:  MOVWF  31
2F62:  MOVWF  32
2F64:  MOVLW  04
2F66:  MOVWF  33
2F68:  CLRF   34
2F6A:  CLRF   35
2F6C:  CLRF   36
2F6E:  CLRF   37
2F70:  CLRF   38
2F72:  CLRF   39
2F74:  CLRF   3A
2F76:  CLRF   3B
2F78:  CLRF   3C
2F7A:  CLRF   3D
2F7C:  CLRF   3E
2F7E:  CLRF   3F
2F80:  CLRF   40
2F82:  MOVLW  01
2F84:  MOVWF  41
2F86:  CLRF   42
2F88:  CLRF   43
2F8A:  CLRF   44
2F8C:  CLRF   45
2F8E:  MOVLW  0A
2F90:  MOVWF  46
2F92:  CLRF   47
2F94:  CLRF   48
2F96:  CLRF   54
2F98:  CLRF   55
2F9A:  CLRF   56
2F9C:  CLRF   57
2F9E:  MOVLW  04
2FA0:  MOVWF  58
2FA2:  MOVLW  28
2FA4:  MOVWF  59
2FA6:  CLRF   5D
2FA8:  CLRF   5C
2FAA:  CLRF   5F
2FAC:  CLRF   5E
2FAE:  CLRF   61
2FB0:  CLRF   60
2FB2:  CLRF   xB5
2FB4:  CLRF   xB4
2FB6:  CLRF   xB3
2FB8:  CLRF   xB2
2FBA:  CLRF   xB9
2FBC:  CLRF   xB8
2FBE:  CLRF   xB7
2FC0:  CLRF   xB6
2FC2:  CLRF   xBD
2FC4:  CLRF   xBC
2FC6:  CLRF   xBB
2FC8:  CLRF   xBA
2FCA:  CLRF   xC1
2FCC:  CLRF   xC0
2FCE:  CLRF   xBF
2FD0:  CLRF   xBE
2FD2:  CLRF   xC5
2FD4:  CLRF   xC4
2FD6:  CLRF   xC3
2FD8:  CLRF   xC2
2FDA:  CLRF   xC9
2FDC:  CLRF   xC8
2FDE:  CLRF   xC7
2FE0:  MOVLW  80
2FE2:  MOVWF  xC6
2FE4:  BSF    2A.7
2FE6:  BCF    xCA.0
2FE8:  CLRF   xCC
2FEA:  CLRF   xCB
2FEC:  CLRF   xCE
2FEE:  CLRF   xCD
2FF0:  CLRF   xD0
2FF2:  CLRF   xCF
2FF4:  CLRF   xD2
2FF6:  CLRF   xD1
2FF8:  CLRF   xD4
2FFA:  CLRF   xD3
2FFC:  CLRF   xD6
2FFE:  CLRF   xD5
3000:  CLRF   xD8
3002:  CLRF   xD7
3004:  CLRF   xDA
3006:  CLRF   xD9
3008:  BCF    xCA.1
300A:  MOVLW  AE
300C:  MOVWF  xDE
300E:  MOVLW  47
3010:  MOVWF  xDD
3012:  CLRF   xDC
3014:  MOVLW  82
3016:  MOVWF  xDB
3018:  MOVLW  AE
301A:  MOVWF  xE2
301C:  MOVLW  47
301E:  MOVWF  xE1
3020:  MOVLW  D1
3022:  MOVWF  xE0
3024:  MOVLW  84
3026:  MOVWF  xDF
3028:  MOVLW  48
302A:  MOVWF  xE6
302C:  MOVLW  21
302E:  MOVWF  xE5
3030:  MOVLW  07
3032:  MOVWF  xE4
3034:  MOVLW  86
3036:  MOVWF  xE3
3038:  MOVLW  E9
303A:  MOVWF  xEA
303C:  MOVLW  26
303E:  MOVWF  xE9
3040:  MOVLW  82
3042:  MOVWF  xE8
3044:  MOVLW  85
3046:  MOVWF  xE7
3048:  MOVLW  BE
304A:  MOVWF  xEE
304C:  MOVLW  9F
304E:  MOVWF  xED
3050:  MOVLW  C1
3052:  MOVWF  xEC
3054:  MOVLW  83
3056:  MOVWF  xEB
3058:  CLRF   xEF
305A:  CLRF   xF0
305C:  CLRF   xF1
305E:  CLRF   xF5
3060:  CLRF   xF4
3062:  MOVLW  47
3064:  MOVWF  xF3
3066:  MOVLW  86
3068:  MOVWF  xF2
306A:  CLRF   xF9
306C:  CLRF   xF8
306E:  CLRF   xF7
3070:  CLRF   xF6
3072:  MOVLW  9A
3074:  MOVWF  xFD
3076:  MOVLW  99
3078:  MOVWF  xFC
307A:  MOVLW  19
307C:  MOVWF  xFB
307E:  MOVLW  7F
3080:  MOVWF  xFA
3082:  MOVLB  1
3084:  CLRF   x01
3086:  CLRF   x00
3088:  MOVLB  0
308A:  CLRF   xFF
308C:  CLRF   xFE
308E:  MOVLB  1
3090:  CLRF   x05
3092:  CLRF   x04
3094:  CLRF   x03
3096:  CLRF   x02
3098:  CLRF   x09
309A:  CLRF   x08
309C:  CLRF   x07
309E:  CLRF   x06
30A0:  CLRF   x0D
30A2:  CLRF   x0C
30A4:  CLRF   x0B
30A6:  CLRF   x0A
30A8:  CLRF   x11
30AA:  CLRF   x10
30AC:  CLRF   x0F
30AE:  CLRF   x0E
30B0:  CLRF   x15
30B2:  CLRF   x14
30B4:  CLRF   x13
30B6:  CLRF   x12
30B8:  CLRF   x19
30BA:  CLRF   x18
30BC:  CLRF   x17
30BE:  CLRF   x16
30C0:  CLRF   x1D
30C2:  CLRF   x1C
30C4:  CLRF   x1B
30C6:  CLRF   x1A
30C8:  CLRF   x21
30CA:  CLRF   x20
30CC:  CLRF   x1F
30CE:  CLRF   x1E
30D0:  CLRF   x25
30D2:  CLRF   x24
30D4:  CLRF   x23
30D6:  CLRF   x22
30D8:  CLRF   x29
30DA:  CLRF   x28
30DC:  CLRF   x27
30DE:  CLRF   x26
30E0:  MOVF   FC1,W
30E2:  ANDLW  C0
30E4:  IORLW  0F
30E6:  MOVWF  FC1
30E8:  MOVLW  07
30EA:  MOVWF  FB4
30EC:  MOVLW  3E
30EE:  MOVWF  49
30F0:  MOVLW  20
30F2:  MOVWF  4A
30F4:  MOVLW  5E
30F6:  MOVWF  4B
30F8:  CLRF   4C
30FA:  CLRF   4D
30FC:  CLRF   4E
30FE:  CLRF   4F
3100:  CLRF   50
3102:  CLRF   51
3104:  CLRF   52
3106:  CLRF   53
....................    Motor_off; 
3108:  BCF    F8B.2
310A:  BCF    F94.2
....................    Motor2_off; 
310C:  BCF    F8B.1
310E:  BCF    F94.1
....................    ConfigInterrupciones(); 
3110:  MOVLB  0
3112:  GOTO   0DBE
....................    //MensajeBienvenida(); 
....................    LeeEEPROM();  
3116:  GOTO   0F9A
....................    LimitaValores(); 
311A:  GOTO   155E
....................    if(motor!=1){ 
311E:  DECFSZ 44,W
3120:  BRA    3124
3122:  BRA    312A
....................       MensajeBienvenida();  
3124:  GOTO   1D6C
....................    }else{ 
3128:  BRA    313C
....................       if(luz==1) 
312A:  DECFSZ 45,W
312C:  BRA    3130
....................          estadofl=1; 
312E:  BSF    29.1
....................       if(luz==0) 
3130:  MOVF   45,F
3132:  BNZ   3136
....................          estadofl=0; 
3134:  BCF    29.1
....................       estadomv=1; 
3136:  BSF    29.2
....................       Menu=50; 
3138:  MOVLW  32
313A:  MOVWF  2B
....................    } 
....................    Motor_off; 
313C:  BCF    F8B.2
313E:  BCF    F94.2
....................    Motor2_off; 
3140:  BCF    F8B.1
3142:  BCF    F94.1
....................    //calculaDensidad(); 
....................    for(i=0;i<Media;i++){ 
3144:  CLRF   40
3146:  MOVF   59,W
3148:  SUBWF  40,W
314A:  BC    316C
....................       //DownFlow=LeerFlujo(Media,1); 
....................       CaidaPresion=Leer_Sensor_Presion(8); 
314C:  MOVLW  08
314E:  MOVLB  1
3150:  MOVWF  x32
3152:  MOVLB  0
3154:  CALL   21B2
3158:  MOVFF  03,C1
315C:  MOVFF  02,C0
3160:  MOVFF  01,BF
3164:  MOVFF  00,BE
....................    } 
3168:  INCF   40,F
316A:  BRA    3146
....................     
....................    if(UP && DOWN && RIGHT){ 
316C:  BSF    F92.5
316E:  BTFSC  F80.5
3170:  GOTO   3938
3174:  BSF    F96.0
3176:  BTFSC  F84.0
3178:  GOTO   3938
317C:  BSF    F96.1
317E:  BTFSC  F84.1
3180:  GOTO   3938
....................       printf(lcd_putc,"\f"); 
3184:  MOVLW  0C
3186:  MOVLB  1
3188:  MOVWF  x43
318A:  MOVLB  0
318C:  CALL   1CCE
....................       lcd_gotoxy(1,1); 
3190:  MOVLW  01
3192:  MOVLB  1
3194:  MOVWF  x44
3196:  MOVWF  x45
3198:  MOVLB  0
319A:  CALL   1C54
....................       printf(lcd_putc,"Cargando....."); 
319E:  MOVLW  F8
31A0:  MOVWF  FF6
31A2:  MOVLW  04
31A4:  MOVWF  FF7
31A6:  CALL   1D4C
....................       delay_ms(2000); 
31AA:  MOVLW  08
31AC:  MOVLB  1
31AE:  MOVWF  x32
31B0:  MOVLW  FA
31B2:  MOVWF  x49
31B4:  MOVLB  0
31B6:  CALL   0CA2
31BA:  MOVLB  1
31BC:  DECFSZ x32,F
31BE:  BRA    31B0
....................       for(;;){ 
....................          lcd_gotoxy(1,1); 
31C0:  MOVLW  01
31C2:  MOVWF  x44
31C4:  MOVWF  x45
31C6:  MOVLB  0
31C8:  CALL   1C54
....................          printf(lcd_putc,"Ajuste de Parametros"); 
31CC:  MOVLW  06
31CE:  MOVWF  FF6
31D0:  MOVLW  05
31D2:  MOVWF  FF7
31D4:  CALL   1D4C
....................           
....................          if(RIGHT){ 
31D8:  BSF    F96.1
31DA:  BTFSC  F84.1
31DC:  BRA    3206
....................             delay_ms(500); 
31DE:  MOVLW  02
31E0:  MOVLB  1
31E2:  MOVWF  x32
31E4:  MOVLW  FA
31E6:  MOVWF  x49
31E8:  MOVLB  0
31EA:  CALL   0CA2
31EE:  MOVLB  1
31F0:  DECFSZ x32,F
31F2:  BRA    31E4
....................             if(RIGHT){ 
31F4:  BSF    F96.1
31F6:  BTFSC  F84.1
31F8:  BRA    3208
....................                OpcionMenu++; 
31FA:  INCF   48,F
....................                printf(lcd_putc,"\f"); 
31FC:  MOVLW  0C
31FE:  MOVWF  x43
3200:  MOVLB  0
3202:  CALL   1CCE
3206:  MOVLB  1
....................             } 
....................          } 
....................           
....................          if(IZQU){ 
3208:  BSF    F96.2
320A:  BTFSC  F84.2
320C:  BRA    3236
....................             delay_ms(500); 
320E:  MOVLW  02
3210:  MOVWF  x32
3212:  MOVLW  FA
3214:  MOVWF  x49
3216:  MOVLB  0
3218:  CALL   0CA2
321C:  MOVLB  1
321E:  DECFSZ x32,F
3220:  BRA    3212
....................             if(IZQU){ 
3222:  BSF    F96.2
3224:  BTFSC  F84.2
3226:  BRA    3236
....................                OpcionMenu--; 
3228:  DECF   48,F
....................                printf(lcd_putc,"\f"); 
322A:  MOVLW  0C
322C:  MOVWF  x43
322E:  MOVLB  0
3230:  CALL   1CCE
3234:  MOVLB  1
....................             } 
....................          } 
....................           
....................          if(OpcionMenu<0) 
3236:  BTFSC  48.7
3238:  BRA    323C
323A:  BRA    3240
....................             OpcionMenu=5; 
323C:  MOVLW  05
323E:  MOVWF  48
....................          if(OpcionMenu>5) 
3240:  BTFSC  48.7
3242:  BRA    324C
3244:  MOVF   48,W
3246:  SUBLW  05
3248:  BC    324C
....................             OpcionMenu=0;    
324A:  CLRF   48
....................          
....................          if(IZQU && RIGHT)//Si oprime boton de Toma. 
324C:  BSF    F96.2
324E:  BTFSC  F84.2
3250:  BRA    3412
3252:  BSF    F96.1
3254:  BTFSC  F84.1
3256:  BRA    3412
....................          {                   
....................             write_eeprom(24,velocidadInicial);//Guardar valor de Setpoint en eeprom 
3258:  MOVLW  18
325A:  MOVWF  FA9
325C:  MOVFF  46,FA8
3260:  BCF    FA6.6
3262:  BCF    FA6.7
3264:  BSF    FA6.2
3266:  MOVF   FF2,W
3268:  MOVWF  00
326A:  BCF    FF2.6
326C:  BCF    FF2.7
326E:  MOVLB  F
3270:  MOVLW  55
3272:  MOVWF  FA7
3274:  MOVLW  AA
3276:  MOVWF  FA7
3278:  BSF    FA6.1
327A:  BTFSC  FA6.1
327C:  BRA    327A
327E:  BCF    FA6.2
3280:  MOVF   00,W
3282:  IORWF  FF2,F
....................             delay_ms(20); 
3284:  MOVLW  14
3286:  MOVLB  1
3288:  MOVWF  x49
328A:  MOVLB  0
328C:  CALL   0CA2
....................             /* 
....................             Temporal=Flujo[1].Ajuste; 
....................             Entero=(int)Flujo[1].Ajuste; 
....................             Temporal=Temporal-Entero; 
....................             Temporal2=Temporal*100.0; 
....................             Decimal1=(int8)Temporal2; 
....................             write_eeprom(25,Entero); 
....................             delay_ms(20); 
....................             write_eeprom(26,Decimal1); 
....................             delay_ms(20); 
....................             */ 
....................             write_eeprom(29,(int8)Pr); 
3290:  MOVFF  11D,149
3294:  MOVFF  11C,148
3298:  MOVFF  11B,147
329C:  MOVFF  11A,146
32A0:  CALL   23B4
32A4:  MOVFF  01,132
32A8:  MOVLW  1D
32AA:  MOVWF  FA9
32AC:  MOVFF  132,FA8
32B0:  BCF    FA6.6
32B2:  BCF    FA6.7
32B4:  BSF    FA6.2
32B6:  MOVF   FF2,W
32B8:  MOVWF  00
32BA:  BCF    FF2.6
32BC:  BCF    FF2.7
32BE:  MOVLB  F
32C0:  MOVLW  55
32C2:  MOVWF  FA7
32C4:  MOVLW  AA
32C6:  MOVWF  FA7
32C8:  BSF    FA6.1
32CA:  BTFSC  FA6.1
32CC:  BRA    32CA
32CE:  BCF    FA6.2
32D0:  MOVF   00,W
32D2:  IORWF  FF2,F
....................             delay_ms(20); 
32D4:  MOVLW  14
32D6:  MOVLB  1
32D8:  MOVWF  x49
32DA:  MOVLB  0
32DC:  CALL   0CA2
....................             write_eeprom(30,(int8)HR); 
32E0:  MOVFF  125,149
32E4:  MOVFF  124,148
32E8:  MOVFF  123,147
32EC:  MOVFF  122,146
32F0:  CALL   23B4
32F4:  MOVFF  01,132
32F8:  MOVLW  1E
32FA:  MOVWF  FA9
32FC:  MOVFF  132,FA8
3300:  BCF    FA6.6
3302:  BCF    FA6.7
3304:  BSF    FA6.2
3306:  MOVF   FF2,W
3308:  MOVWF  00
330A:  BCF    FF2.6
330C:  BCF    FF2.7
330E:  MOVLB  F
3310:  MOVLW  55
3312:  MOVWF  FA7
3314:  MOVLW  AA
3316:  MOVWF  FA7
3318:  BSF    FA6.1
331A:  BTFSC  FA6.1
331C:  BRA    331A
331E:  BCF    FA6.2
3320:  MOVF   00,W
3322:  IORWF  FF2,F
....................             delay_ms(20); 
3324:  MOVLW  14
3326:  MOVLB  1
3328:  MOVWF  x49
332A:  MOVLB  0
332C:  CALL   0CA2
....................             write_eeprom(31,Media); 
3330:  MOVLW  1F
3332:  MOVWF  FA9
3334:  MOVFF  59,FA8
3338:  BCF    FA6.6
333A:  BCF    FA6.7
333C:  BSF    FA6.2
333E:  MOVF   FF2,W
3340:  MOVWF  00
3342:  BCF    FF2.6
3344:  BCF    FF2.7
3346:  MOVLB  F
3348:  MOVLW  55
334A:  MOVWF  FA7
334C:  MOVLW  AA
334E:  MOVWF  FA7
3350:  BSF    FA6.1
3352:  BTFSC  FA6.1
3354:  BRA    3352
3356:  BCF    FA6.2
3358:  MOVF   00,W
335A:  IORWF  FF2,F
....................             delay_ms(20); 
335C:  MOVLW  14
335E:  MOVLB  1
3360:  MOVWF  x49
3362:  MOVLB  0
3364:  CALL   0CA2
....................             Buzzer_on;delay_ms(500);Buzzer_off; 
3368:  BSF    F8B.0
336A:  BCF    F94.0
336C:  MOVLW  02
336E:  MOVLB  1
3370:  MOVWF  x32
3372:  MOVLW  FA
3374:  MOVWF  x49
3376:  MOVLB  0
3378:  CALL   0CA2
337C:  MOVLB  1
337E:  DECFSZ x32,F
3380:  BRA    3372
3382:  BCF    F8B.0
3384:  BCF    F94.0
....................             lcd_gotoxy(1,1); 
3386:  MOVLW  01
3388:  MOVWF  x44
338A:  MOVWF  x45
338C:  MOVLB  0
338E:  CALL   1C54
....................             printf(lcd_putc,"                    "); 
3392:  MOVLW  1C
3394:  MOVWF  FF6
3396:  MOVLW  05
3398:  MOVWF  FF7
339A:  CALL   1D4C
....................             lcd_gotoxy(1,2); 
339E:  MOVLW  01
33A0:  MOVLB  1
33A2:  MOVWF  x44
33A4:  MOVLW  02
33A6:  MOVWF  x45
33A8:  MOVLB  0
33AA:  CALL   1C54
....................             printf(lcd_putc,"    Almacenando      "); 
33AE:  MOVLW  32
33B0:  MOVWF  FF6
33B2:  MOVLW  05
33B4:  MOVWF  FF7
33B6:  CALL   1D4C
....................             lcd_gotoxy(1,3); 
33BA:  MOVLW  01
33BC:  MOVLB  1
33BE:  MOVWF  x44
33C0:  MOVLW  03
33C2:  MOVWF  x45
33C4:  MOVLB  0
33C6:  CALL   1C54
....................             printf(lcd_putc,"     Parametros     "); 
33CA:  MOVLW  48
33CC:  MOVWF  FF6
33CE:  MOVLW  05
33D0:  MOVWF  FF7
33D2:  CALL   1D4C
....................             lcd_gotoxy(1,4); 
33D6:  MOVLW  01
33D8:  MOVLB  1
33DA:  MOVWF  x44
33DC:  MOVLW  04
33DE:  MOVWF  x45
33E0:  MOVLB  0
33E2:  CALL   1C54
....................             printf(lcd_putc,"                    ");  
33E6:  MOVLW  5E
33E8:  MOVWF  FF6
33EA:  MOVLW  05
33EC:  MOVWF  FF7
33EE:  CALL   1D4C
....................             Buzzer_on;delay_ms(500);Buzzer_off; 
33F2:  BSF    F8B.0
33F4:  BCF    F94.0
33F6:  MOVLW  02
33F8:  MOVLB  1
33FA:  MOVWF  x32
33FC:  MOVLW  FA
33FE:  MOVWF  x49
3400:  MOVLB  0
3402:  CALL   0CA2
3406:  MOVLB  1
3408:  DECFSZ x32,F
340A:  BRA    33FC
340C:  BCF    F8B.0
340E:  BCF    F94.0
....................             reset_cpu(); 
3410:  RESET
....................          } 
....................           
....................          if(OpcionMenu==0){ 
3412:  MOVF   48,F
3414:  BNZ   34BA
....................             if(velocidadInicial>15) 
3416:  MOVF   46,W
3418:  SUBLW  0F
341A:  BC    3420
....................                velocidadInicial=15; 
341C:  MOVLW  0F
341E:  MOVWF  46
....................             if(velocidadInicial<1) 
3420:  MOVF   46,F
3422:  BNZ   3428
....................                velocidadInicial=1; 
3424:  MOVLW  01
3426:  MOVWF  46
....................            
....................             lcd_gotoxy(1,2); 
3428:  MOVLW  01
342A:  MOVWF  x44
342C:  MOVLW  02
342E:  MOVWF  x45
3430:  MOVLB  0
3432:  CALL   1C54
....................             printf(lcd_putc,"Inicial   Ventilador"); 
3436:  MOVLW  74
3438:  MOVWF  FF6
343A:  MOVLW  05
343C:  MOVWF  FF7
343E:  CALL   1D4C
....................             lcd_gotoxy(1,3); 
3442:  MOVLW  01
3444:  MOVLB  1
3446:  MOVWF  x44
3448:  MOVLW  03
344A:  MOVWF  x45
344C:  MOVLB  0
344E:  CALL   1C54
....................             printf(lcd_putc,"     Vel: %02u       ",velocidadInicial);   
3452:  MOVLW  8A
3454:  MOVWF  FF6
3456:  MOVLW  05
3458:  MOVWF  FF7
345A:  MOVLW  0A
345C:  MOVLB  1
345E:  MOVWF  x36
3460:  MOVLB  0
3462:  CALL   23F0
3466:  MOVFF  46,132
346A:  MOVLW  01
346C:  MOVLB  1
346E:  MOVWF  x33
3470:  MOVLB  0
3472:  CALL   2444
3476:  MOVLW  98
3478:  MOVWF  FF6
347A:  MOVLW  05
347C:  MOVWF  FF7
347E:  MOVLW  07
3480:  MOVLB  1
3482:  MOVWF  x36
3484:  MOVLB  0
3486:  CALL   23F0
....................           
....................             if(UP){   
348A:  BSF    F92.5
348C:  BTFSC  F80.5
348E:  BRA    349E
....................                delay_ms(200);velocidadInicial++; 
3490:  MOVLW  C8
3492:  MOVLB  1
3494:  MOVWF  x49
3496:  MOVLB  0
3498:  CALL   0CA2
349C:  INCF   46,F
....................             } 
....................                    
....................             if(DOWN && Vel1>0){//Si oprime hacia abajo   
349E:  BSF    F96.0
34A0:  BTFSC  F84.0
34A2:  BRA    34B6
34A4:  MOVF   58,F
34A6:  BZ    34B6
....................                delay_ms(200);velocidadInicial--; 
34A8:  MOVLW  C8
34AA:  MOVLB  1
34AC:  MOVWF  x49
34AE:  MOVLB  0
34B0:  CALL   0CA2
34B4:  DECF   46,F
....................             } 
....................          }else if(OpcionMenu==1){ 
34B6:  BRA    3932
34B8:  MOVLB  1
34BA:  DECFSZ 48,W
34BC:  BRA    3626
....................             if(Pr>120) 
34BE:  CLRF   x49
34C0:  CLRF   x48
34C2:  MOVLW  70
34C4:  MOVWF  x47
34C6:  MOVLW  85
34C8:  MOVWF  x46
34CA:  MOVFF  11D,14D
34CE:  MOVFF  11C,14C
34D2:  MOVFF  11B,14B
34D6:  MOVFF  11A,14A
34DA:  MOVLB  0
34DC:  CALL   14E4
34E0:  BNC   34F0
....................                Pr=60; 
34E2:  MOVLB  1
34E4:  CLRF   x1D
34E6:  CLRF   x1C
34E8:  MOVLW  70
34EA:  MOVWF  x1B
34EC:  MOVLW  84
34EE:  MOVWF  x1A
....................             if(Pr<60) 
34F0:  MOVFF  11D,149
34F4:  MOVFF  11C,148
34F8:  MOVFF  11B,147
34FC:  MOVFF  11A,146
3500:  MOVLB  1
3502:  CLRF   x4D
3504:  CLRF   x4C
3506:  MOVLW  70
3508:  MOVWF  x4B
350A:  MOVLW  84
350C:  MOVWF  x4A
350E:  MOVLB  0
3510:  CALL   14E4
3514:  BNC   3524
....................                Pr=120; 
3516:  MOVLB  1
3518:  CLRF   x1D
351A:  CLRF   x1C
351C:  MOVLW  70
351E:  MOVWF  x1B
3520:  MOVLW  85
3522:  MOVWF  x1A
....................            
....................             lcd_gotoxy(1,2); 
3524:  MOVLW  01
3526:  MOVLB  1
3528:  MOVWF  x44
352A:  MOVLW  02
352C:  MOVWF  x45
352E:  MOVLB  0
3530:  CALL   1C54
....................             printf(lcd_putc,"Presion Atmosferica "); 
3534:  MOVLW  A0
3536:  MOVWF  FF6
3538:  MOVLW  05
353A:  MOVWF  FF7
353C:  CALL   1D4C
....................             lcd_gotoxy(1,3); 
3540:  MOVLW  01
3542:  MOVLB  1
3544:  MOVWF  x44
3546:  MOVLW  03
3548:  MOVWF  x45
354A:  MOVLB  0
354C:  CALL   1C54
....................             printf(lcd_putc,"     Pr: %2.0f       ",Pr); 
3550:  MOVLW  B6
3552:  MOVWF  FF6
3554:  MOVLW  05
3556:  MOVWF  FF7
3558:  MOVLW  09
355A:  MOVLB  1
355C:  MOVWF  x36
355E:  MOVLB  0
3560:  CALL   23F0
3564:  MOVLW  01
3566:  MOVWF  FE9
3568:  MOVFF  11D,139
356C:  MOVFF  11C,138
3570:  MOVFF  11B,137
3574:  MOVFF  11A,136
3578:  MOVLB  1
357A:  CLRF   x3A
357C:  MOVLB  0
357E:  CALL   2584
3582:  MOVLW  C4
3584:  MOVWF  FF6
3586:  MOVLW  05
3588:  MOVWF  FF7
358A:  MOVLW  07
358C:  MOVLB  1
358E:  MOVWF  x36
3590:  MOVLB  0
3592:  CALL   23F0
....................           
....................             if(UP){   
3596:  BSF    F92.5
3598:  BTFSC  F80.5
359A:  BRA    35DC
....................                delay_ms(200);Pr+=1.0; 
359C:  MOVLW  C8
359E:  MOVLB  1
35A0:  MOVWF  x49
35A2:  MOVLB  0
35A4:  CALL   0CA2
35A8:  BCF    FD8.1
35AA:  MOVFF  11D,14D
35AE:  MOVFF  11C,14C
35B2:  MOVFF  11B,14B
35B6:  MOVFF  11A,14A
35BA:  MOVLB  1
35BC:  CLRF   x51
35BE:  CLRF   x50
35C0:  CLRF   x4F
35C2:  MOVLW  7F
35C4:  MOVWF  x4E
35C6:  MOVLB  0
35C8:  CALL   1E44
35CC:  MOVFF  03,11D
35D0:  MOVFF  02,11C
35D4:  MOVFF  01,11B
35D8:  MOVFF  00,11A
....................             } 
....................                    
....................             if(DOWN){//Si oprime hacia abajo   
35DC:  BSF    F96.0
35DE:  BTFSC  F84.0
35E0:  BRA    3622
....................                delay_ms(200);Pr-=1.0; 
35E2:  MOVLW  C8
35E4:  MOVLB  1
35E6:  MOVWF  x49
35E8:  MOVLB  0
35EA:  CALL   0CA2
35EE:  BSF    FD8.1
35F0:  MOVFF  11D,14D
35F4:  MOVFF  11C,14C
35F8:  MOVFF  11B,14B
35FC:  MOVFF  11A,14A
3600:  MOVLB  1
3602:  CLRF   x51
3604:  CLRF   x50
3606:  CLRF   x4F
3608:  MOVLW  7F
360A:  MOVWF  x4E
360C:  MOVLB  0
360E:  CALL   1E44
3612:  MOVFF  03,11D
3616:  MOVFF  02,11C
361A:  MOVFF  01,11B
361E:  MOVFF  00,11A
....................             } 
....................          }else if(OpcionMenu==2){ 
3622:  BRA    3932
3624:  MOVLB  1
3626:  MOVF   48,W
3628:  SUBLW  02
362A:  BNZ   3656
....................             /*if(Flujo[1].Ajuste>10.0) 
....................                Flujo[1].Ajuste=0.1; 
....................             if(Flujo[1].Ajuste<0.1) 
....................                Flujo[1].Ajuste=10.0; 
....................             */ 
....................             lcd_gotoxy(1,2); 
362C:  MOVLW  01
362E:  MOVWF  x44
3630:  MOVLW  02
3632:  MOVWF  x45
3634:  MOVLB  0
3636:  CALL   1C54
....................             printf(lcd_putc,"Ajuste Sensor Flujo "); 
363A:  MOVLW  CC
363C:  MOVWF  FF6
363E:  MOVLW  05
3640:  MOVWF  FF7
3642:  CALL   1D4C
....................             //lcd_gotoxy(1,3); 
....................             //printf(lcd_putc,"   Ajuste: %2.1f     ",Flujo[1].Ajuste); 
....................           
....................             if(UP){   
3646:  BSF    F92.5
3648:  BTFSC  F80.5
364A:  BRA    364C
....................                //delay_ms(200);Flujo[1].Ajuste+=0.1; 
....................             } 
....................                    
....................             if(DOWN){//Si oprime hacia abajo   
364C:  BSF    F96.0
364E:  BTFSC  F84.0
3650:  BRA    3652
....................                //delay_ms(200);Flujo[1].Ajuste-=0.1; 
....................             } 
....................          }else if(OpcionMenu==3){           
3652:  BRA    3932
3654:  MOVLB  1
3656:  MOVF   48,W
3658:  SUBLW  03
365A:  BNZ   36A0
....................             lcd_gotoxy(1,2); 
365C:  MOVLW  01
365E:  MOVWF  x44
3660:  MOVLW  02
3662:  MOVWF  x45
3664:  MOVLB  0
3666:  CALL   1C54
....................             printf(lcd_putc,"Punto Cero Flujo     "); 
366A:  MOVLW  E2
366C:  MOVWF  FF6
366E:  MOVLW  05
3670:  MOVWF  FF7
3672:  CALL   1D4C
....................             //lcd_gotoxy(1,3); 
....................             //printf(lcd_putc,"   Cero: %2.0f     ",Flujo[1].zero_actual);     
....................           
....................             if(UP){   
3676:  BSF    F92.5
3678:  BTFSC  F80.5
367A:  BRA    369C
....................                /*Flujo[1].zero_actual=sensores(1); 
....................                Flujo[1].adc=sensores(1); 
....................        
....................                Temporal1=(int16)Flujo[1].zero_actual; 
....................                write_eeprom(27,make8(Temporal1,0)); 
....................                delay_ms(20); 
....................                write_eeprom(28,make8(Temporal1,1));//Guardar valor de Setpoint en eeprom 
....................                delay_ms(20);*/ 
....................                Buzzer_on;delay_ms(500);Buzzer_off; 
367C:  BSF    F8B.0
367E:  BCF    F94.0
3680:  MOVLW  02
3682:  MOVLB  1
3684:  MOVWF  x32
3686:  MOVLW  FA
3688:  MOVWF  x49
368A:  MOVLB  0
368C:  CALL   0CA2
3690:  MOVLB  1
3692:  DECFSZ x32,F
3694:  BRA    3686
3696:  BCF    F8B.0
3698:  BCF    F94.0
369A:  MOVLB  0
....................             } 
....................          }else if(OpcionMenu==4){ 
369C:  BRA    3932
369E:  MOVLB  1
36A0:  MOVF   48,W
36A2:  SUBLW  04
36A4:  BTFSS  FD8.2
36A6:  BRA    3828
....................             if(HR>100) 
36A8:  CLRF   x49
36AA:  CLRF   x48
36AC:  MOVLW  48
36AE:  MOVWF  x47
36B0:  MOVLW  85
36B2:  MOVWF  x46
36B4:  MOVFF  125,14D
36B8:  MOVFF  124,14C
36BC:  MOVFF  123,14B
36C0:  MOVFF  122,14A
36C4:  MOVLB  0
36C6:  CALL   14E4
36CA:  BNC   36DA
....................                HR=40; 
36CC:  MOVLB  1
36CE:  CLRF   x25
36D0:  CLRF   x24
36D2:  MOVLW  20
36D4:  MOVWF  x23
36D6:  MOVLW  84
36D8:  MOVWF  x22
....................             if(HR<40) 
36DA:  MOVFF  125,149
36DE:  MOVFF  124,148
36E2:  MOVFF  123,147
36E6:  MOVFF  122,146
36EA:  MOVLB  1
36EC:  CLRF   x4D
36EE:  CLRF   x4C
36F0:  MOVLW  20
36F2:  MOVWF  x4B
36F4:  MOVLW  84
36F6:  MOVWF  x4A
36F8:  MOVLB  0
36FA:  CALL   14E4
36FE:  BNC   370E
....................                HR=100; 
3700:  MOVLB  1
3702:  CLRF   x25
3704:  CLRF   x24
3706:  MOVLW  48
3708:  MOVWF  x23
370A:  MOVLW  85
370C:  MOVWF  x22
....................            
....................             lcd_gotoxy(1,2); 
370E:  MOVLW  01
3710:  MOVLB  1
3712:  MOVWF  x44
3714:  MOVLW  02
3716:  MOVWF  x45
3718:  MOVLB  0
371A:  CALL   1C54
....................             printf(lcd_putc,"Humedad Relativa     "); 
371E:  MOVLW  F8
3720:  MOVWF  FF6
3722:  MOVLW  05
3724:  MOVWF  FF7
3726:  CALL   1D4C
....................             lcd_gotoxy(1,3); 
372A:  MOVLW  01
372C:  MOVLB  1
372E:  MOVWF  x44
3730:  MOVLW  03
3732:  MOVWF  x45
3734:  MOVLB  0
3736:  CALL   1C54
....................             printf(lcd_putc,"     HR: %2.0f %%    ",HR);   
373A:  MOVLW  0E
373C:  MOVWF  FF6
373E:  MOVLW  06
3740:  MOVWF  FF7
3742:  MOVLW  09
3744:  MOVLB  1
3746:  MOVWF  x36
3748:  MOVLB  0
374A:  CALL   23F0
374E:  MOVLW  01
3750:  MOVWF  FE9
3752:  MOVFF  125,139
3756:  MOVFF  124,138
375A:  MOVFF  123,137
375E:  MOVFF  122,136
3762:  MOVLB  1
3764:  CLRF   x3A
3766:  MOVLB  0
3768:  CALL   2584
376C:  MOVLW  20
376E:  MOVLB  1
3770:  MOVWF  x43
3772:  MOVLB  0
3774:  CALL   1CCE
3778:  MOVLW  25
377A:  MOVLB  1
377C:  MOVWF  x43
377E:  MOVLB  0
3780:  CALL   1CCE
3784:  MOVLW  1F
3786:  MOVWF  FF6
3788:  MOVLW  06
378A:  MOVWF  FF7
378C:  MOVLW  04
378E:  MOVLB  1
3790:  MOVWF  x36
3792:  MOVLB  0
3794:  CALL   23F0
....................           
....................             if(UP){   
3798:  BSF    F92.5
379A:  BTFSC  F80.5
379C:  BRA    37DE
....................                delay_ms(200);HR+=1.0; 
379E:  MOVLW  C8
37A0:  MOVLB  1
37A2:  MOVWF  x49
37A4:  MOVLB  0
37A6:  CALL   0CA2
37AA:  BCF    FD8.1
37AC:  MOVFF  125,14D
37B0:  MOVFF  124,14C
37B4:  MOVFF  123,14B
37B8:  MOVFF  122,14A
37BC:  MOVLB  1
37BE:  CLRF   x51
37C0:  CLRF   x50
37C2:  CLRF   x4F
37C4:  MOVLW  7F
37C6:  MOVWF  x4E
37C8:  MOVLB  0
37CA:  CALL   1E44
37CE:  MOVFF  03,125
37D2:  MOVFF  02,124
37D6:  MOVFF  01,123
37DA:  MOVFF  00,122
....................             } 
....................                    
....................             if(DOWN){//Si oprime hacia abajo   
37DE:  BSF    F96.0
37E0:  BTFSC  F84.0
37E2:  BRA    3824
....................                delay_ms(200);HR-=1.0; 
37E4:  MOVLW  C8
37E6:  MOVLB  1
37E8:  MOVWF  x49
37EA:  MOVLB  0
37EC:  CALL   0CA2
37F0:  BSF    FD8.1
37F2:  MOVFF  125,14D
37F6:  MOVFF  124,14C
37FA:  MOVFF  123,14B
37FE:  MOVFF  122,14A
3802:  MOVLB  1
3804:  CLRF   x51
3806:  CLRF   x50
3808:  CLRF   x4F
380A:  MOVLW  7F
380C:  MOVWF  x4E
380E:  MOVLB  0
3810:  CALL   1E44
3814:  MOVFF  03,125
3818:  MOVFF  02,124
381C:  MOVFF  01,123
3820:  MOVFF  00,122
....................             } 
....................          }else if(OpcionMenu==5){ 
3824:  BRA    3932
3826:  MOVLB  1
3828:  MOVF   48,W
382A:  SUBLW  05
382C:  BTFSS  FD8.2
382E:  BRA    3934
....................             if(Media>80) 
3830:  MOVF   59,W
3832:  SUBLW  50
3834:  BC    383A
....................                Media=10; 
3836:  MOVLW  0A
3838:  MOVWF  59
....................             if(Media<10) 
383A:  MOVF   59,W
383C:  SUBLW  09
383E:  BNC   3844
....................                Media=80; 
3840:  MOVLW  50
3842:  MOVWF  59
....................            
....................             lcd_gotoxy(1,2); 
3844:  MOVLW  01
3846:  MOVWF  x44
3848:  MOVLW  02
384A:  MOVWF  x45
384C:  MOVLB  0
384E:  CALL   1C54
....................             printf(lcd_putc,"      Media Movil    "); 
3852:  MOVLW  24
3854:  MOVWF  FF6
3856:  MOVLW  06
3858:  MOVWF  FF7
385A:  CALL   1D4C
....................             lcd_gotoxy(1,3); 
385E:  MOVLW  01
3860:  MOVLB  1
3862:  MOVWF  x44
3864:  MOVLW  03
3866:  MOVWF  x45
3868:  MOVLB  0
386A:  CALL   1C54
....................             printf(lcd_putc,"    Media: %02u    ",Media);   
386E:  MOVLW  3A
3870:  MOVWF  FF6
3872:  MOVLW  06
3874:  MOVWF  FF7
3876:  MOVLW  0B
3878:  MOVLB  1
387A:  MOVWF  x36
387C:  MOVLB  0
387E:  CALL   23F0
3882:  MOVFF  59,132
3886:  MOVLW  01
3888:  MOVLB  1
388A:  MOVWF  x33
388C:  MOVLB  0
388E:  CALL   2444
3892:  MOVLW  49
3894:  MOVWF  FF6
3896:  MOVLW  06
3898:  MOVWF  FF7
389A:  MOVLW  04
389C:  MOVLB  1
389E:  MOVWF  x36
38A0:  MOVLB  0
38A2:  CALL   23F0
....................           
....................             if(UP){   
38A6:  BSF    F92.5
38A8:  BTFSC  F80.5
38AA:  BRA    38EC
....................                delay_ms(200);HR+=1.0; 
38AC:  MOVLW  C8
38AE:  MOVLB  1
38B0:  MOVWF  x49
38B2:  MOVLB  0
38B4:  CALL   0CA2
38B8:  BCF    FD8.1
38BA:  MOVFF  125,14D
38BE:  MOVFF  124,14C
38C2:  MOVFF  123,14B
38C6:  MOVFF  122,14A
38CA:  MOVLB  1
38CC:  CLRF   x51
38CE:  CLRF   x50
38D0:  CLRF   x4F
38D2:  MOVLW  7F
38D4:  MOVWF  x4E
38D6:  MOVLB  0
38D8:  CALL   1E44
38DC:  MOVFF  03,125
38E0:  MOVFF  02,124
38E4:  MOVFF  01,123
38E8:  MOVFF  00,122
....................             } 
....................                    
....................             if(DOWN){//Si oprime hacia abajo   
38EC:  BSF    F96.0
38EE:  BTFSC  F84.0
38F0:  BRA    3932
....................                delay_ms(200);HR-=1.0; 
38F2:  MOVLW  C8
38F4:  MOVLB  1
38F6:  MOVWF  x49
38F8:  MOVLB  0
38FA:  CALL   0CA2
38FE:  BSF    FD8.1
3900:  MOVFF  125,14D
3904:  MOVFF  124,14C
3908:  MOVFF  123,14B
390C:  MOVFF  122,14A
3910:  MOVLB  1
3912:  CLRF   x51
3914:  CLRF   x50
3916:  CLRF   x4F
3918:  MOVLW  7F
391A:  MOVWF  x4E
391C:  MOVLB  0
391E:  CALL   1E44
3922:  MOVFF  03,125
3926:  MOVFF  02,124
392A:  MOVFF  01,123
392E:  MOVFF  00,122
3932:  MOVLB  1
....................             } 
....................          } 
....................       } 
3934:  BRA    31C0
3936:  MOVLB  0
....................    } 
....................     
....................    if(UP && RIGHT){ 
3938:  BSF    F92.5
393A:  BTFSC  F80.5
393C:  BRA    3B58
393E:  BSF    F96.1
3940:  BTFSC  F84.1
3942:  BRA    3B58
....................       for(;;){ 
....................          lcd_gotoxy(1,1); 
3944:  MOVLW  01
3946:  MOVLB  1
3948:  MOVWF  x44
394A:  MOVWF  x45
394C:  MOVLB  0
394E:  CALL   1C54
....................          printf(lcd_putc,"  Tiempo de Trabajo  "); 
3952:  MOVLW  4E
3954:  MOVWF  FF6
3956:  MOVLW  06
3958:  MOVWF  FF7
395A:  CALL   1D4C
....................          lcd_gotoxy(1,2); 
395E:  MOVLW  01
3960:  MOVLB  1
3962:  MOVWF  x44
3964:  MOVLW  02
3966:  MOVWF  x45
3968:  MOVLB  0
396A:  CALL   1C54
....................          printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
396E:  MOVLW  64
3970:  MOVWF  FF6
3972:  MOVLW  06
3974:  MOVWF  FF7
3976:  MOVLW  0B
3978:  MOVLB  1
397A:  MOVWF  x36
397C:  MOVLB  0
397E:  CALL   23F0
3982:  MOVLW  08
3984:  MOVWF  FE9
3986:  MOVFF  5D,133
398A:  MOVFF  5C,132
398E:  CALL   2736
3992:  MOVLW  20
3994:  MOVLB  1
3996:  MOVWF  x43
3998:  MOVLB  0
399A:  CALL   1CCE
399E:  MOVLW  20
39A0:  MOVLB  1
39A2:  MOVWF  x43
39A4:  MOVLB  0
39A6:  CALL   1CCE
39AA:  MOVLW  20
39AC:  MOVLB  1
39AE:  MOVWF  x43
39B0:  MOVLB  0
39B2:  CALL   1CCE
....................          lcd_gotoxy(1,4); 
39B6:  MOVLW  01
39B8:  MOVLB  1
39BA:  MOVWF  x44
39BC:  MOVLW  04
39BE:  MOVWF  x45
39C0:  MOVLB  0
39C2:  CALL   1C54
....................          printf(lcd_putc," RESET= Oprima < "); 
39C6:  MOVLW  78
39C8:  MOVWF  FF6
39CA:  MOVLW  06
39CC:  MOVWF  FF7
39CE:  CALL   1D4C
....................           
....................          if(IZQU){ 
39D2:  BSF    F96.2
39D4:  BTFSC  F84.2
39D6:  BRA    3B56
....................          delay_ms(100); 
39D8:  MOVLW  64
39DA:  MOVLB  1
39DC:  MOVWF  x49
39DE:  MOVLB  0
39E0:  CALL   0CA2
....................             if(IZQU){ 
39E4:  BSF    F96.2
39E6:  BTFSC  F84.2
39E8:  BRA    3B56
....................                write_eeprom(20,0); 
39EA:  MOVLW  14
39EC:  MOVWF  FA9
39EE:  CLRF   FA8
39F0:  BCF    FA6.6
39F2:  BCF    FA6.7
39F4:  BSF    FA6.2
39F6:  MOVF   FF2,W
39F8:  MOVWF  00
39FA:  BCF    FF2.6
39FC:  BCF    FF2.7
39FE:  MOVLB  F
3A00:  MOVLW  55
3A02:  MOVWF  FA7
3A04:  MOVLW  AA
3A06:  MOVWF  FA7
3A08:  BSF    FA6.1
3A0A:  BTFSC  FA6.1
3A0C:  BRA    3A0A
3A0E:  BCF    FA6.2
3A10:  MOVF   00,W
3A12:  IORWF  FF2,F
....................                delay_ms(20); 
3A14:  MOVLW  14
3A16:  MOVLB  1
3A18:  MOVWF  x49
3A1A:  MOVLB  0
3A1C:  CALL   0CA2
....................                write_eeprom(21,0); 
3A20:  MOVLW  15
3A22:  MOVWF  FA9
3A24:  CLRF   FA8
3A26:  BCF    FA6.6
3A28:  BCF    FA6.7
3A2A:  BSF    FA6.2
3A2C:  MOVF   FF2,W
3A2E:  MOVWF  00
3A30:  BCF    FF2.6
3A32:  BCF    FF2.7
3A34:  MOVLB  F
3A36:  MOVLW  55
3A38:  MOVWF  FA7
3A3A:  MOVLW  AA
3A3C:  MOVWF  FA7
3A3E:  BSF    FA6.1
3A40:  BTFSC  FA6.1
3A42:  BRA    3A40
3A44:  BCF    FA6.2
3A46:  MOVF   00,W
3A48:  IORWF  FF2,F
....................                delay_ms(20); 
3A4A:  MOVLW  14
3A4C:  MOVLB  1
3A4E:  MOVWF  x49
3A50:  MOVLB  0
3A52:  CALL   0CA2
....................                write_eeprom(18,0); 
3A56:  MOVLW  12
3A58:  MOVWF  FA9
3A5A:  CLRF   FA8
3A5C:  BCF    FA6.6
3A5E:  BCF    FA6.7
3A60:  BSF    FA6.2
3A62:  MOVF   FF2,W
3A64:  MOVWF  00
3A66:  BCF    FF2.6
3A68:  BCF    FF2.7
3A6A:  MOVLB  F
3A6C:  MOVLW  55
3A6E:  MOVWF  FA7
3A70:  MOVLW  AA
3A72:  MOVWF  FA7
3A74:  BSF    FA6.1
3A76:  BTFSC  FA6.1
3A78:  BRA    3A76
3A7A:  BCF    FA6.2
3A7C:  MOVF   00,W
3A7E:  IORWF  FF2,F
....................                delay_ms(20); 
3A80:  MOVLW  14
3A82:  MOVLB  1
3A84:  MOVWF  x49
3A86:  MOVLB  0
3A88:  CALL   0CA2
....................                write_eeprom(19,0); 
3A8C:  MOVLW  13
3A8E:  MOVWF  FA9
3A90:  CLRF   FA8
3A92:  BCF    FA6.6
3A94:  BCF    FA6.7
3A96:  BSF    FA6.2
3A98:  MOVF   FF2,W
3A9A:  MOVWF  00
3A9C:  BCF    FF2.6
3A9E:  BCF    FF2.7
3AA0:  MOVLB  F
3AA2:  MOVLW  55
3AA4:  MOVWF  FA7
3AA6:  MOVLW  AA
3AA8:  MOVWF  FA7
3AAA:  BSF    FA6.1
3AAC:  BTFSC  FA6.1
3AAE:  BRA    3AAC
3AB0:  BCF    FA6.2
3AB2:  MOVF   00,W
3AB4:  IORWF  FF2,F
....................                delay_ms(20); 
3AB6:  MOVLW  14
3AB8:  MOVLB  1
3ABA:  MOVWF  x49
3ABC:  MOVLB  0
3ABE:  CALL   0CA2
....................                lcd_gotoxy(1,1); 
3AC2:  MOVLW  01
3AC4:  MOVLB  1
3AC6:  MOVWF  x44
3AC8:  MOVWF  x45
3ACA:  MOVLB  0
3ACC:  CALL   1C54
....................                printf(lcd_putc,"                    "); 
3AD0:  MOVLW  8A
3AD2:  MOVWF  FF6
3AD4:  MOVLW  06
3AD6:  MOVWF  FF7
3AD8:  CALL   1D4C
....................                lcd_gotoxy(1,2); 
3ADC:  MOVLW  01
3ADE:  MOVLB  1
3AE0:  MOVWF  x44
3AE2:  MOVLW  02
3AE4:  MOVWF  x45
3AE6:  MOVLB  0
3AE8:  CALL   1C54
....................                printf(lcd_putc,"  Borrando  Tiempo  "); 
3AEC:  MOVLW  A0
3AEE:  MOVWF  FF6
3AF0:  MOVLW  06
3AF2:  MOVWF  FF7
3AF4:  CALL   1D4C
....................                lcd_gotoxy(1,3); 
3AF8:  MOVLW  01
3AFA:  MOVLB  1
3AFC:  MOVWF  x44
3AFE:  MOVLW  03
3B00:  MOVWF  x45
3B02:  MOVLB  0
3B04:  CALL   1C54
....................                printf(lcd_putc,"    de Trabajo      "); 
3B08:  MOVLW  B6
3B0A:  MOVWF  FF6
3B0C:  MOVLW  06
3B0E:  MOVWF  FF7
3B10:  CALL   1D4C
....................                lcd_gotoxy(1,4); 
3B14:  MOVLW  01
3B16:  MOVLB  1
3B18:  MOVWF  x44
3B1A:  MOVLW  04
3B1C:  MOVWF  x45
3B1E:  MOVLB  0
3B20:  CALL   1C54
....................                printf(lcd_putc,"                    ");  
3B24:  MOVLW  CC
3B26:  MOVWF  FF6
3B28:  MOVLW  06
3B2A:  MOVWF  FF7
3B2C:  CALL   1D4C
....................                delay_ms(1000); 
3B30:  MOVLW  04
3B32:  MOVLB  1
3B34:  MOVWF  x32
3B36:  MOVLW  FA
3B38:  MOVWF  x49
3B3A:  MOVLB  0
3B3C:  CALL   0CA2
3B40:  MOVLB  1
3B42:  DECFSZ x32,F
3B44:  BRA    3B36
....................                printf(lcd_putc,"\f"); 
3B46:  MOVLW  0C
3B48:  MOVWF  x43
3B4A:  MOVLB  0
3B4C:  CALL   1CCE
....................                lcd_init(); 
3B50:  CALL   0D44
....................                reset_cpu(); 
3B54:  RESET
....................             } 
....................          } 
....................       } 
3B56:  BRA    3944
....................    } 
....................  
....................    while(true){ 
....................    //leeControlRemoto(); 
....................    cuentaTiempoTrabajoFiltro(); 
3B58:  GOTO   27F4
....................    if(VelMotor==20){ 
3B5C:  MOVF   xEF,W
3B5E:  SUBLW  14
3B60:  BNZ   3B6E
....................       Motor_on; 
3B62:  BSF    F8B.2
3B64:  BCF    F94.2
....................       Motor2_on;  
3B66:  BSF    F8B.1
3B68:  BCF    F94.1
....................       set_timer0(0); 
3B6A:  CLRF   FD7
3B6C:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
3B6E:  MOVF   xEF,F
3B70:  BNZ   3B7E
....................       Motor_off; 
3B72:  BCF    F8B.2
3B74:  BCF    F94.2
....................       Motor2_off;  
3B76:  BCF    F8B.1
3B78:  BCF    F94.1
....................       set_timer0(0); 
3B7A:  CLRF   FD7
3B7C:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
3B7E:  MOVF   2B,F
3B80:  BTFSS  FD8.2
3B82:  BRA    4020
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3B84:  MOVLW  01
3B86:  MOVLB  1
3B88:  MOVWF  x44
3B8A:  MOVWF  x45
3B8C:  MOVLB  0
3B8E:  CALL   1C54
....................          printf(lcd_putc,"     Ingrese        "); 
3B92:  MOVLW  E2
3B94:  MOVWF  FF6
3B96:  MOVLW  06
3B98:  MOVWF  FF7
3B9A:  CALL   1D4C
....................          lcd_gotoxy(1,2); 
3B9E:  MOVLW  01
3BA0:  MOVLB  1
3BA2:  MOVWF  x44
3BA4:  MOVLW  02
3BA6:  MOVWF  x45
3BA8:  MOVLB  0
3BAA:  CALL   1C54
....................          printf(lcd_putc,"    Contraseña      "); 
3BAE:  MOVLW  F8
3BB0:  MOVWF  FF6
3BB2:  MOVLW  06
3BB4:  MOVWF  FF7
3BB6:  CALL   1D4C
....................          lcd_gotoxy(1,3); 
3BBA:  MOVLW  01
3BBC:  MOVLB  1
3BBE:  MOVWF  x44
3BC0:  MOVLW  03
3BC2:  MOVWF  x45
3BC4:  MOVLB  0
3BC6:  CALL   1C54
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3BCA:  MOVLW  0E
3BCC:  MOVWF  FF6
3BCE:  MOVLW  07
3BD0:  MOVWF  FF7
3BD2:  MOVLW  0A
3BD4:  MOVLB  1
3BD6:  MOVWF  x36
3BD8:  MOVLB  0
3BDA:  CALL   23F0
3BDE:  MOVFF  4C,132
3BE2:  MOVLW  1F
3BE4:  MOVLB  1
3BE6:  MOVWF  x33
3BE8:  MOVLB  0
3BEA:  CALL   29B0
3BEE:  MOVFF  4D,132
3BF2:  MOVLW  1F
3BF4:  MOVLB  1
3BF6:  MOVWF  x33
3BF8:  MOVLB  0
3BFA:  CALL   29B0
3BFE:  MOVFF  4E,132
3C02:  MOVLW  1F
3C04:  MOVLB  1
3C06:  MOVWF  x33
3C08:  MOVLB  0
3C0A:  CALL   29B0
3C0E:  MOVFF  4F,132
3C12:  MOVLW  1F
3C14:  MOVLB  1
3C16:  MOVWF  x33
3C18:  MOVLB  0
3C1A:  CALL   29B0
3C1E:  MOVLW  20
3C20:  MOVLB  1
3C22:  MOVWF  x43
3C24:  MOVLB  0
3C26:  CALL   1CCE
3C2A:  MOVLW  20
3C2C:  MOVLB  1
3C2E:  MOVWF  x43
3C30:  MOVLB  0
3C32:  CALL   1CCE
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3C36:  MOVFF  2E,144
3C3A:  MOVLW  04
3C3C:  MOVLB  1
3C3E:  MOVWF  x45
3C40:  MOVLB  0
3C42:  CALL   1C54
....................          lcd_putc(t[2]); 
3C46:  MOVFF  4B,143
3C4A:  CALL   1CCE
....................           
....................          if(unidad>11&&unidad<14){ 
3C4E:  MOVF   2E,W
3C50:  SUBLW  0B
3C52:  BC    3C76
3C54:  MOVF   2E,W
3C56:  SUBLW  0D
3C58:  BNC   3C76
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3C5A:  MOVLW  01
3C5C:  SUBWF  2E,W
3C5E:  MOVLB  1
3C60:  MOVWF  x32
3C62:  MOVWF  x44
3C64:  MOVLW  04
3C66:  MOVWF  x45
3C68:  MOVLB  0
3C6A:  CALL   1C54
....................             lcd_putc(t[1]); 
3C6E:  MOVFF  4A,143
3C72:  CALL   1CCE
....................          } 
....................           
....................          Cambio=OFF; 
3C76:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
3C78:  BSF    F92.5
3C7A:  BTFSC  F80.5
3C7C:  BRA    3CB8
....................          delay_ms(20); 
3C7E:  MOVLW  14
3C80:  MOVLB  1
3C82:  MOVWF  x49
3C84:  MOVLB  0
3C86:  CALL   0CA2
....................          if(UP){ 
3C8A:  BSF    F92.5
3C8C:  BTFSC  F80.5
3C8E:  BRA    3CB6
....................             if(Flanco == 0) { 
3C90:  BTFSC  29.3
3C92:  BRA    3CB6
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3C94:  MOVLW  0B
3C96:  SUBWF  2E,W
3C98:  CLRF   03
3C9A:  ADDLW  4C
3C9C:  MOVWF  FE9
3C9E:  MOVLW  00
3CA0:  ADDWFC 03,W
3CA2:  MOVWF  FEA
3CA4:  INCF   FEF,F
3CA6:  BSF    29.3
3CA8:  MOVLW  1E
3CAA:  MOVLB  1
3CAC:  MOVWF  x49
3CAE:  MOVLB  0
3CB0:  CALL   0CA2
3CB4:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3CB6:  BRA    3CBA
....................          Flanco = 0; 
3CB8:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3CBA:  BSF    F96.0
3CBC:  BTFSC  F84.0
3CBE:  BRA    3CFA
....................          delay_ms(20); 
3CC0:  MOVLW  14
3CC2:  MOVLB  1
3CC4:  MOVWF  x49
3CC6:  MOVLB  0
3CC8:  CALL   0CA2
....................          if(DOWN){ 
3CCC:  BSF    F96.0
3CCE:  BTFSC  F84.0
3CD0:  BRA    3CF8
....................             if(Flanco2 == 0) { 
3CD2:  BTFSC  29.5
3CD4:  BRA    3CF8
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3CD6:  MOVLW  0B
3CD8:  SUBWF  2E,W
3CDA:  CLRF   03
3CDC:  ADDLW  4C
3CDE:  MOVWF  FE9
3CE0:  MOVLW  00
3CE2:  ADDWFC 03,W
3CE4:  MOVWF  FEA
3CE6:  DECF   FEF,F
3CE8:  BSF    29.5
3CEA:  MOVLW  1E
3CEC:  MOVLB  1
3CEE:  MOVWF  x49
3CF0:  MOVLB  0
3CF2:  CALL   0CA2
3CF6:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3CF8:  BRA    3CFC
....................          Flanco2 = 0; 
3CFA:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3CFC:  BSF    F96.1
3CFE:  BTFSC  F84.1
3D00:  BRA    3D38
....................          delay_ms(20); 
3D02:  MOVLW  14
3D04:  MOVLB  1
3D06:  MOVWF  x49
3D08:  MOVLB  0
3D0A:  CALL   0CA2
....................          if(RIGHT){ 
3D0E:  BSF    F96.1
3D10:  BTFSC  F84.1
3D12:  BRA    3D36
....................             if(Flanco1 == 0) { 
3D14:  BTFSC  29.4
3D16:  BRA    3D36
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3D18:  BSF    29.4
3D1A:  INCF   2E,F
3D1C:  MOVLW  1E
3D1E:  MOVLB  1
3D20:  MOVWF  x49
3D22:  MOVLB  0
3D24:  CALL   0CA2
3D28:  MOVLW  0C
3D2A:  MOVLB  1
3D2C:  MOVWF  x43
3D2E:  MOVLB  0
3D30:  CALL   1CCE
3D34:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3D36:  BRA    3D3A
....................          Flanco1 = 0; 
3D38:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3D3A:  BSF    F96.2
3D3C:  BTFSC  F84.2
3D3E:  BRA    3D76
....................          delay_ms(150); 
3D40:  MOVLW  96
3D42:  MOVLB  1
3D44:  MOVWF  x49
3D46:  MOVLB  0
3D48:  CALL   0CA2
....................          if(IZQU){ 
3D4C:  BSF    F96.2
3D4E:  BTFSC  F84.2
3D50:  BRA    3D74
....................             if(Flanco3 == 0){ 
3D52:  BTFSC  29.6
3D54:  BRA    3D74
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3D56:  BSF    29.6
3D58:  DECF   2E,F
3D5A:  MOVLW  1E
3D5C:  MOVLB  1
3D5E:  MOVWF  x49
3D60:  MOVLB  0
3D62:  CALL   0CA2
3D66:  MOVLW  0C
3D68:  MOVLB  1
3D6A:  MOVWF  x43
3D6C:  MOVLB  0
3D6E:  CALL   1CCE
3D72:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3D74:  BRA    3D78
....................         Flanco3 = 0; 
3D76:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3D78:  MOVLW  0B
3D7A:  SUBWF  2E,W
3D7C:  CLRF   03
3D7E:  ADDLW  4C
3D80:  MOVWF  FE9
3D82:  MOVLW  00
3D84:  ADDWFC 03,W
3D86:  MOVWF  FEA
3D88:  BTFSC  FEF.7
3D8A:  BRA    3D8E
3D8C:  BRA    3DA2
....................          clave[unidad-11]=9; 
3D8E:  MOVLW  0B
3D90:  SUBWF  2E,W
3D92:  CLRF   03
3D94:  ADDLW  4C
3D96:  MOVWF  FE9
3D98:  MOVLW  00
3D9A:  ADDWFC 03,W
3D9C:  MOVWF  FEA
3D9E:  MOVLW  09
3DA0:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3DA2:  MOVLW  0B
3DA4:  SUBWF  2E,W
3DA6:  CLRF   03
3DA8:  ADDLW  4C
3DAA:  MOVWF  FE9
3DAC:  MOVLW  00
3DAE:  ADDWFC 03,W
3DB0:  MOVWF  FEA
3DB2:  BTFSC  FEF.7
3DB4:  BRA    3DCE
3DB6:  MOVF   FEF,W
3DB8:  SUBLW  09
3DBA:  BC    3DCE
....................          clave[unidad-11]=0; 
3DBC:  MOVLW  0B
3DBE:  SUBWF  2E,W
3DC0:  CLRF   03
3DC2:  ADDLW  4C
3DC4:  MOVWF  FE9
3DC6:  MOVLW  00
3DC8:  ADDWFC 03,W
3DCA:  MOVWF  FEA
3DCC:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3DCE:  MOVF   2E,W
3DD0:  SUBLW  0A
3DD2:  BNC   3DD8
....................          unidad=11; 
3DD4:  MOVLW  0B
3DD6:  MOVWF  2E
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
3DD8:  MOVF   2E,W
3DDA:  SUBLW  0E
3DDC:  BTFSC  FD8.0
3DDE:  BRA    4020
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
3DE0:  MOVF   4C,W
3DE2:  SUBLW  03
3DE4:  BTFSS  FD8.2
3DE6:  BRA    3ED2
3DE8:  MOVF   4D,W
3DEA:  SUBLW  08
3DEC:  BNZ   3ED2
3DEE:  MOVF   4E,W
3DF0:  SUBLW  09
3DF2:  BNZ   3ED2
3DF4:  MOVF   4F,W
3DF6:  SUBLW  02
3DF8:  BNZ   3ED2
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
3DFA:  CLRF   FA9
3DFC:  CLRF   FA8
3DFE:  BCF    FA6.6
3E00:  BCF    FA6.7
3E02:  BSF    FA6.2
3E04:  MOVF   FF2,W
3E06:  MOVWF  00
3E08:  BCF    FF2.6
3E0A:  BCF    FF2.7
3E0C:  MOVLB  F
3E0E:  MOVLW  55
3E10:  MOVWF  FA7
3E12:  MOVLW  AA
3E14:  MOVWF  FA7
3E16:  BSF    FA6.1
3E18:  BTFSC  FA6.1
3E1A:  BRA    3E18
3E1C:  BCF    FA6.2
3E1E:  MOVF   00,W
3E20:  IORWF  FF2,F
3E22:  MOVLW  14
3E24:  MOVLB  1
3E26:  MOVWF  x49
3E28:  MOVLB  0
3E2A:  CALL   0CA2
3E2E:  MOVLW  01
3E30:  MOVWF  FA9
3E32:  CLRF   FA8
3E34:  BCF    FA6.6
3E36:  BCF    FA6.7
3E38:  BSF    FA6.2
3E3A:  MOVF   FF2,W
3E3C:  MOVWF  00
3E3E:  BCF    FF2.6
3E40:  BCF    FF2.7
3E42:  MOVLB  F
3E44:  MOVLW  55
3E46:  MOVWF  FA7
3E48:  MOVLW  AA
3E4A:  MOVWF  FA7
3E4C:  BSF    FA6.1
3E4E:  BTFSC  FA6.1
3E50:  BRA    3E4E
3E52:  BCF    FA6.2
3E54:  MOVF   00,W
3E56:  IORWF  FF2,F
3E58:  MOVLW  14
3E5A:  MOVLB  1
3E5C:  MOVWF  x49
3E5E:  MOVLB  0
3E60:  CALL   0CA2
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
3E64:  MOVLW  02
3E66:  MOVWF  FA9
3E68:  CLRF   FA8
3E6A:  BCF    FA6.6
3E6C:  BCF    FA6.7
3E6E:  BSF    FA6.2
3E70:  MOVF   FF2,W
3E72:  MOVWF  00
3E74:  BCF    FF2.6
3E76:  BCF    FF2.7
3E78:  MOVLB  F
3E7A:  MOVLW  55
3E7C:  MOVWF  FA7
3E7E:  MOVLW  AA
3E80:  MOVWF  FA7
3E82:  BSF    FA6.1
3E84:  BTFSC  FA6.1
3E86:  BRA    3E84
3E88:  BCF    FA6.2
3E8A:  MOVF   00,W
3E8C:  IORWF  FF2,F
3E8E:  MOVLW  14
3E90:  MOVLB  1
3E92:  MOVWF  x49
3E94:  MOVLB  0
3E96:  CALL   0CA2
3E9A:  MOVLW  03
3E9C:  MOVWF  FA9
3E9E:  CLRF   FA8
3EA0:  BCF    FA6.6
3EA2:  BCF    FA6.7
3EA4:  BSF    FA6.2
3EA6:  MOVF   FF2,W
3EA8:  MOVWF  00
3EAA:  BCF    FF2.6
3EAC:  BCF    FF2.7
3EAE:  MOVLB  F
3EB0:  MOVLW  55
3EB2:  MOVWF  FA7
3EB4:  MOVLW  AA
3EB6:  MOVWF  FA7
3EB8:  BSF    FA6.1
3EBA:  BTFSC  FA6.1
3EBC:  BRA    3EBA
3EBE:  BCF    FA6.2
3EC0:  MOVF   00,W
3EC2:  IORWF  FF2,F
3EC4:  MOVLW  14
3EC6:  MOVLB  1
3EC8:  MOVWF  x49
3ECA:  MOVLB  0
3ECC:  CALL   0CA2
....................              reset_cpu(); 
3ED0:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
3ED2:  MOVF   50,W
3ED4:  SUBWF  4C,W
3ED6:  BNZ   3F8E
3ED8:  MOVF   51,W
3EDA:  SUBWF  4D,W
3EDC:  BNZ   3F8E
3EDE:  MOVF   52,W
3EE0:  SUBWF  4E,W
3EE2:  BNZ   3F8E
3EE4:  MOVF   53,W
3EE6:  SUBWF  4F,W
3EE8:  BNZ   3F8E
....................             lcd_gotoxy(1,1); 
3EEA:  MOVLW  01
3EEC:  MOVLB  1
3EEE:  MOVWF  x44
3EF0:  MOVWF  x45
3EF2:  MOVLB  0
3EF4:  CALL   1C54
....................             printf(lcd_putc,"                   "); 
3EF8:  MOVLW  24
3EFA:  MOVWF  FF6
3EFC:  MOVLW  07
3EFE:  MOVWF  FF7
3F00:  CALL   1D4C
....................             lcd_gotoxy(1,2); 
3F04:  MOVLW  01
3F06:  MOVLB  1
3F08:  MOVWF  x44
3F0A:  MOVLW  02
3F0C:  MOVWF  x45
3F0E:  MOVLB  0
3F10:  CALL   1C54
....................             printf(lcd_putc,"     Contraseña    "); 
3F14:  MOVLW  38
3F16:  MOVWF  FF6
3F18:  MOVLW  07
3F1A:  MOVWF  FF7
3F1C:  CALL   1D4C
....................             lcd_gotoxy(1,3); 
3F20:  MOVLW  01
3F22:  MOVLB  1
3F24:  MOVWF  x44
3F26:  MOVLW  03
3F28:  MOVWF  x45
3F2A:  MOVLB  0
3F2C:  CALL   1C54
....................             printf(lcd_putc,"      Correcta     "); 
3F30:  MOVLW  4C
3F32:  MOVWF  FF6
3F34:  MOVLW  07
3F36:  MOVWF  FF7
3F38:  CALL   1D4C
....................             lcd_gotoxy(1,4); 
3F3C:  MOVLW  01
3F3E:  MOVLB  1
3F40:  MOVWF  x44
3F42:  MOVLW  04
3F44:  MOVWF  x45
3F46:  MOVLB  0
3F48:  CALL   1C54
....................             printf(lcd_putc,"                   "); 
3F4C:  MOVLW  60
3F4E:  MOVWF  FF6
3F50:  MOVLW  07
3F52:  MOVWF  FF7
3F54:  CALL   1D4C
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
3F58:  MOVLW  04
3F5A:  MOVLB  1
3F5C:  MOVWF  x32
3F5E:  MOVLW  FA
3F60:  MOVWF  x49
3F62:  MOVLB  0
3F64:  CALL   0CA2
3F68:  MOVLB  1
3F6A:  DECFSZ x32,F
3F6C:  BRA    3F5E
3F6E:  MOVLW  32
3F70:  MOVWF  2B
3F72:  MOVLW  0B
3F74:  MOVWF  2E
3F76:  MOVLW  0C
3F78:  MOVWF  x43
3F7A:  MOVLB  0
3F7C:  CALL   1CCE
3F80:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON;//calculaDensidad(); 
3F82:  CLRF   4C
3F84:  CLRF   4D
3F86:  CLRF   4E
3F88:  CLRF   4F
3F8A:  BSF    2A.7
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
3F8C:  BRA    4020
....................             lcd_gotoxy(1,1); 
3F8E:  MOVLW  01
3F90:  MOVLB  1
3F92:  MOVWF  x44
3F94:  MOVWF  x45
3F96:  MOVLB  0
3F98:  CALL   1C54
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
3F9C:  MOVLW  01
3F9E:  MOVLB  1
3FA0:  MOVWF  x44
3FA2:  MOVLW  02
3FA4:  MOVWF  x45
3FA6:  MOVLB  0
3FA8:  CALL   1C54
....................             printf(lcd_putc,"     Contraseña    "); 
3FAC:  MOVLW  74
3FAE:  MOVWF  FF6
3FB0:  MOVLW  07
3FB2:  MOVWF  FF7
3FB4:  CALL   1D4C
....................             lcd_gotoxy(1,3); 
3FB8:  MOVLW  01
3FBA:  MOVLB  1
3FBC:  MOVWF  x44
3FBE:  MOVLW  03
3FC0:  MOVWF  x45
3FC2:  MOVLB  0
3FC4:  CALL   1C54
....................             printf(lcd_putc,"     Incorrecta    "); 
3FC8:  MOVLW  88
3FCA:  MOVWF  FF6
3FCC:  MOVLW  07
3FCE:  MOVWF  FF7
3FD0:  CALL   1D4C
....................             lcd_gotoxy(1,4); 
3FD4:  MOVLW  01
3FD6:  MOVLB  1
3FD8:  MOVWF  x44
3FDA:  MOVLW  04
3FDC:  MOVWF  x45
3FDE:  MOVLB  0
3FE0:  CALL   1C54
....................             printf(lcd_putc,"                   "); 
3FE4:  MOVLW  9C
3FE6:  MOVWF  FF6
3FE8:  MOVLW  07
3FEA:  MOVWF  FF7
3FEC:  CALL   1D4C
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
3FF0:  MOVLW  04
3FF2:  MOVLB  1
3FF4:  MOVWF  x32
3FF6:  MOVLW  FA
3FF8:  MOVWF  x49
3FFA:  MOVLB  0
3FFC:  CALL   0CA2
4000:  MOVLB  1
4002:  DECFSZ x32,F
4004:  BRA    3FF6
4006:  MOVLW  0B
4008:  MOVWF  2E
400A:  MOVLW  0C
400C:  MOVWF  x43
400E:  MOVLB  0
4010:  CALL   1CCE
4014:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
4016:  CLRF   4C
4018:  CLRF   4D
401A:  CLRF   4E
401C:  CLRF   4F
401E:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
4020:  DECFSZ 2B,W
4022:  BRA    42AE
....................       EliminaRuido(); 
4024:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
4028:  MOVLW  01
402A:  MOVLB  1
402C:  MOVWF  x44
402E:  MOVWF  x45
4030:  MOVLB  0
4032:  CALL   1C54
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
4036:  MOVLW  B0
4038:  MOVWF  FF6
403A:  MOVLW  07
403C:  MOVWF  FF7
403E:  CALL   1D4C
....................          mensajes(1+paso,2); 
4042:  MOVLW  01
4044:  ADDWF  47,W
4046:  MOVLB  1
4048:  MOVWF  x32
404A:  MOVWF  x33
404C:  MOVLW  02
404E:  MOVWF  x34
4050:  MOVLB  0
4052:  CALL   2A96
....................          mensajes(2+paso,3); 
4056:  MOVLW  02
4058:  ADDWF  47,W
405A:  MOVLB  1
405C:  MOVWF  x32
405E:  MOVWF  x33
4060:  MOVLW  03
4062:  MOVWF  x34
4064:  MOVLB  0
4066:  CALL   2A96
....................          mensajes(3+paso,4); 
406A:  MOVLW  03
406C:  ADDWF  47,W
406E:  MOVLB  1
4070:  MOVWF  x32
4072:  MOVWF  x33
4074:  MOVLW  04
4076:  MOVWF  x34
4078:  MOVLB  0
407A:  CALL   2A96
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
407E:  MOVLW  01
4080:  MOVLB  1
4082:  MOVWF  x44
4084:  MOVFF  2F,145
4088:  MOVLB  0
408A:  CALL   1C54
....................         lcd_putc(t[0]); 
408E:  MOVFF  49,143
4092:  CALL   1CCE
....................  
....................         if(Flecha==2) 
4096:  MOVF   2F,W
4098:  SUBLW  02
409A:  BNZ   40CC
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
409C:  MOVLW  01
409E:  MOVLB  1
40A0:  MOVWF  x44
40A2:  MOVLW  04
40A4:  MOVWF  x45
40A6:  MOVLB  0
40A8:  CALL   1C54
....................             lcd_putc(t[1]); 
40AC:  MOVFF  4A,143
40B0:  CALL   1CCE
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
40B4:  MOVLW  01
40B6:  MOVLB  1
40B8:  MOVWF  x44
40BA:  MOVLW  03
40BC:  MOVWF  x45
40BE:  MOVLB  0
40C0:  CALL   1C54
....................             lcd_putc(t[1]); 
40C4:  MOVFF  4A,143
40C8:  CALL   1CCE
....................           } 
....................          
....................         if(Flecha==4) 
40CC:  MOVF   2F,W
40CE:  SUBLW  04
40D0:  BNZ   4102
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
40D2:  MOVLW  01
40D4:  MOVLB  1
40D6:  MOVWF  x44
40D8:  MOVLW  02
40DA:  MOVWF  x45
40DC:  MOVLB  0
40DE:  CALL   1C54
....................             lcd_putc(t[1]); 
40E2:  MOVFF  4A,143
40E6:  CALL   1CCE
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
40EA:  MOVLW  01
40EC:  MOVLB  1
40EE:  MOVWF  x44
40F0:  MOVLW  03
40F2:  MOVWF  x45
40F4:  MOVLB  0
40F6:  CALL   1C54
....................             lcd_putc(t[1]); 
40FA:  MOVFF  4A,143
40FE:  CALL   1CCE
....................           } 
....................          
....................         if(Flecha==3) 
4102:  MOVF   2F,W
4104:  SUBLW  03
4106:  BNZ   4138
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
4108:  MOVLW  01
410A:  MOVLB  1
410C:  MOVWF  x44
410E:  MOVLW  04
4110:  MOVWF  x45
4112:  MOVLB  0
4114:  CALL   1C54
....................             lcd_putc(t[1]); 
4118:  MOVFF  4A,143
411C:  CALL   1CCE
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
4120:  MOVLW  01
4122:  MOVLB  1
4124:  MOVWF  x44
4126:  MOVLW  02
4128:  MOVWF  x45
412A:  MOVLB  0
412C:  CALL   1C54
....................             lcd_putc(t[1]); 
4130:  MOVFF  4A,143
4134:  CALL   1CCE
....................           } 
....................          Cambio=OFF; 
4138:  BCF    2A.7
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
413A:  BSF    F92.5
413C:  BTFSC  F80.5
413E:  BRA    4172
....................          delay_ms(20); 
4140:  MOVLW  14
4142:  MOVLB  1
4144:  MOVWF  x49
4146:  MOVLB  0
4148:  CALL   0CA2
....................          if(UP){ 
414C:  BSF    F92.5
414E:  BTFSC  F80.5
4150:  BRA    4170
....................             if(Flanco == 0){ 
4152:  BTFSC  29.3
4154:  BRA    4170
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
4156:  DECF   31,F
4158:  DECF   2F,F
415A:  MOVLW  01
415C:  ADDWF  2F,W
415E:  MOVWF  30
4160:  BSF    29.3
4162:  MOVLW  1E
4164:  MOVLB  1
4166:  MOVWF  x49
4168:  MOVLB  0
416A:  CALL   0CA2
416E:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4170:  BRA    4174
....................          Flanco = 0; 
4172:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
4174:  BSF    F96.0
4176:  BTFSC  F84.0
4178:  BRA    41AC
....................          delay_ms(20); 
417A:  MOVLW  14
417C:  MOVLB  1
417E:  MOVWF  x49
4180:  MOVLB  0
4182:  CALL   0CA2
....................          if(DOWN){ 
4186:  BSF    F96.0
4188:  BTFSC  F84.0
418A:  BRA    41AA
....................             if(Flanco2 == 0){ 
418C:  BTFSC  29.5
418E:  BRA    41AA
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
4190:  INCF   31,F
4192:  INCF   2F,F
4194:  MOVLW  01
4196:  SUBWF  2F,W
4198:  MOVWF  30
419A:  BSF    29.5
419C:  MOVLW  1E
419E:  MOVLB  1
41A0:  MOVWF  x49
41A2:  MOVLB  0
41A4:  CALL   0CA2
41A8:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
41AA:  BRA    41AE
....................          Flanco2 = 0; 
41AC:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
41AE:  MOVF   31,W
41B0:  SUBWF  33,W
41B2:  BC    41C4
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
41B4:  INCF   47,F
41B6:  MOVFF  31,33
41BA:  MOVLW  02
41BC:  SUBWF  33,W
41BE:  MOVWF  32
41C0:  MOVLW  04
41C2:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
41C4:  MOVF   32,W
41C6:  SUBWF  31,W
41C8:  BC    41DA
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
41CA:  DECF   47,F
41CC:  MOVFF  31,32
41D0:  MOVLW  02
41D2:  ADDWF  32,W
41D4:  MOVWF  33
41D6:  MOVLW  02
41D8:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
41DA:  MOVF   31,W
41DC:  SUBWF  2C,W
41DE:  BC    41F2
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
41E0:  MOVFF  2D,31
41E4:  MOVLW  02
41E6:  MOVWF  2F
41E8:  CLRF   47
41EA:  MOVFF  31,32
41EE:  ADDWF  32,W
41F0:  MOVWF  33
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
41F2:  MOVF   2D,W
41F4:  SUBWF  31,W
41F6:  BC    420E
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
41F8:  MOVFF  2C,31
41FC:  MOVLW  04
41FE:  MOVWF  2F
4200:  SUBWF  2C,W
4202:  MOVWF  47
4204:  MOVFF  31,33
4208:  MOVLW  02
420A:  SUBWF  33,W
420C:  MOVWF  32
....................       } 
....................          
....................       if(paso<0) 
420E:  BTFSC  47.7
4210:  BRA    4214
4212:  BRA    4216
....................          paso=0; 
4214:  CLRF   47
....................           
....................       if(RIGHT){// Si oprime derecha 
4216:  BSF    F96.1
4218:  BTFSC  F84.1
421A:  BRA    426E
....................          delay_ms(20); 
421C:  MOVLW  14
421E:  MOVLB  1
4220:  MOVWF  x49
4222:  MOVLB  0
4224:  CALL   0CA2
....................          if(RIGHT){ 
4228:  BSF    F96.1
422A:  BTFSC  F84.1
422C:  BRA    426A
....................             if(Flanco1 == 0){ 
422E:  BTFSC  29.4
4230:  BRA    426A
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
4232:  BSF    29.4
4234:  MOVFF  31,2B
4238:  MOVLW  03
423A:  MOVWF  2F
423C:  MOVLW  02
423E:  MOVLB  1
4240:  MOVWF  x32
4242:  MOVLW  96
4244:  MOVWF  x49
4246:  MOVLB  0
4248:  CALL   0CA2
424C:  MOVLB  1
424E:  DECFSZ x32,F
4250:  BRA    4242
4252:  MOVLW  0C
4254:  MOVWF  x43
4256:  MOVLB  0
4258:  CALL   1CCE
....................                if(Menu==6){ 
425C:  MOVF   2B,W
425E:  SUBLW  06
4260:  BNZ   426A
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
4262:  CLRF   4C
4264:  CLRF   4D
4266:  CLRF   4E
4268:  CLRF   4F
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
426A:  BSF    2A.7
....................       }else{ 
426C:  BRA    4270
....................         Flanco1 = 0; 
426E:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
4270:  BSF    F96.2
4272:  BTFSC  F84.2
4274:  BRA    42AE
....................          delay_ms(20); 
4276:  MOVLW  14
4278:  MOVLB  1
427A:  MOVWF  x49
427C:  MOVLB  0
427E:  CALL   0CA2
....................          if(IZQU){ 
4282:  BSF    F96.2
4284:  BTFSC  F84.2
4286:  BRA    42AE
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
4288:  MOVLW  02
428A:  MOVLB  1
428C:  MOVWF  x32
428E:  MOVLW  FA
4290:  MOVWF  x49
4292:  MOVLB  0
4294:  CALL   0CA2
4298:  MOVLB  1
429A:  DECFSZ x32,F
429C:  BRA    428E
429E:  MOVLW  32
42A0:  MOVWF  2B
42A2:  MOVLW  0C
42A4:  MOVWF  x43
42A6:  MOVLB  0
42A8:  CALL   1CCE
42AC:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
42AE:  MOVF   2B,W
42B0:  SUBLW  02
42B2:  BTFSS  FD8.2
42B4:  BRA    4582
....................    EliminaRuido(); 
42B6:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
42BA:  MOVLW  01
42BC:  MOVLB  1
42BE:  MOVWF  x44
42C0:  MOVWF  x45
42C2:  MOVLB  0
42C4:  CALL   1C54
....................       printf(lcd_putc,"    Temporizador     "); 
42C8:  MOVLW  C6
42CA:  MOVWF  FF6
42CC:  MOVLW  07
42CE:  MOVWF  FF7
42D0:  CALL   1D4C
....................       lcd_gotoxy(1,2); 
42D4:  MOVLW  01
42D6:  MOVLB  1
42D8:  MOVWF  x44
42DA:  MOVLW  02
42DC:  MOVWF  x45
42DE:  MOVLB  0
42E0:  CALL   1C54
....................       printf(lcd_putc,"       Luz UV        "); 
42E4:  MOVLW  DC
42E6:  MOVWF  FF6
42E8:  MOVLW  07
42EA:  MOVWF  FF7
42EC:  CALL   1D4C
....................       lcd_gotoxy(6,3); 
42F0:  MOVLW  06
42F2:  MOVLB  1
42F4:  MOVWF  x44
42F6:  MOVLW  03
42F8:  MOVWF  x45
42FA:  MOVLB  0
42FC:  CALL   1C54
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
4300:  MOVFF  3C,132
4304:  MOVLW  03
4306:  MOVLB  1
4308:  MOVWF  x33
430A:  MOVLB  0
430C:  CALL   2444
4310:  MOVLW  3A
4312:  MOVLB  1
4314:  MOVWF  x43
4316:  MOVLB  0
4318:  CALL   1CCE
431C:  MOVFF  3D,132
4320:  MOVLW  01
4322:  MOVLB  1
4324:  MOVWF  x33
4326:  MOVLB  0
4328:  CALL   2444
432C:  MOVLW  FB
432E:  MOVWF  FF6
4330:  MOVLW  07
4332:  MOVWF  FF7
4334:  MOVLW  08
4336:  MOVLB  1
4338:  MOVWF  x36
433A:  MOVLB  0
433C:  CALL   23F0
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
4340:  MOVLW  06
4342:  ADDWF  41,W
4344:  MOVLB  1
4346:  MOVWF  x32
4348:  MOVWF  x44
434A:  MOVLW  04
434C:  MOVWF  x45
434E:  MOVLB  0
4350:  CALL   1C54
....................       lcd_putc(t[2]); 
4354:  MOVFF  4B,143
4358:  CALL   1CCE
....................        
....................       Cambio=OFF; 
435C:  BCF    2A.7
.................... //   } 
....................     
....................    if(UP) 
435E:  BSF    F92.5
4360:  BTFSC  F80.5
4362:  BRA    43C4
....................    { 
....................       delay_ms(20); 
4364:  MOVLW  14
4366:  MOVLB  1
4368:  MOVWF  x49
436A:  MOVLB  0
436C:  CALL   0CA2
....................       if(UP){ 
4370:  BSF    F92.5
4372:  BTFSC  F80.5
4374:  BRA    43C4
....................          if(unidad2==1) 
4376:  DECFSZ 41,W
4378:  BRA    439C
....................          { 
....................             if(tempo_minutos_pro<240) 
437A:  MOVF   3C,W
437C:  SUBLW  EF
437E:  BNC   439C
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
4380:  MOVLW  05
4382:  ADDWF  3C,F
4384:  MOVLW  02
4386:  MOVLB  1
4388:  MOVWF  x32
438A:  MOVLW  96
438C:  MOVWF  x49
438E:  MOVLB  0
4390:  CALL   0CA2
4394:  MOVLB  1
4396:  DECFSZ x32,F
4398:  BRA    438A
439A:  MOVLB  0
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
439C:  MOVF   41,W
439E:  SUBLW  04
43A0:  BNZ   43C2
....................          { 
....................             if(tempo_segundos_pro<59) 
43A2:  MOVF   3D,W
43A4:  SUBLW  3A
43A6:  BNC   43C2
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
43A8:  INCF   3D,F
43AA:  MOVLW  02
43AC:  MOVLB  1
43AE:  MOVWF  x32
43B0:  MOVLW  96
43B2:  MOVWF  x49
43B4:  MOVLB  0
43B6:  CALL   0CA2
43BA:  MOVLB  1
43BC:  DECFSZ x32,F
43BE:  BRA    43B0
43C0:  MOVLB  0
....................             } 
....................          }      
....................       Cambio=ON; 
43C2:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(DOWN) 
43C4:  BSF    F96.0
43C6:  BTFSC  F84.0
43C8:  BRA    4426
....................    { 
....................       delay_ms(20); 
43CA:  MOVLW  14
43CC:  MOVLB  1
43CE:  MOVWF  x49
43D0:  MOVLB  0
43D2:  CALL   0CA2
....................       if(DOWN){ 
43D6:  BSF    F96.0
43D8:  BTFSC  F84.0
43DA:  BRA    4426
....................          if(unidad2==1) 
43DC:  DECFSZ 41,W
43DE:  BRA    4400
....................          { 
....................             if(tempo_minutos_pro>0) 
43E0:  MOVF   3C,F
43E2:  BZ    4400
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
43E4:  MOVLW  05
43E6:  SUBWF  3C,F
43E8:  MOVLW  02
43EA:  MOVLB  1
43EC:  MOVWF  x32
43EE:  MOVLW  96
43F0:  MOVWF  x49
43F2:  MOVLB  0
43F4:  CALL   0CA2
43F8:  MOVLB  1
43FA:  DECFSZ x32,F
43FC:  BRA    43EE
43FE:  MOVLB  0
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
4400:  MOVF   41,W
4402:  SUBLW  04
4404:  BNZ   4424
....................          { 
....................             if(tempo_segundos_pro>0) 
4406:  MOVF   3D,F
4408:  BZ    4424
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
440A:  DECF   3D,F
440C:  MOVLW  02
440E:  MOVLB  1
4410:  MOVWF  x32
4412:  MOVLW  96
4414:  MOVWF  x49
4416:  MOVLB  0
4418:  CALL   0CA2
441C:  MOVLB  1
441E:  DECFSZ x32,F
4420:  BRA    4412
4422:  MOVLB  0
....................             }    
....................          } 
....................       Cambio=ON; 
4424:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
4426:  BSF    F96.1
4428:  BTFSC  F84.1
442A:  BRA    4474
....................    { 
....................       delay_ms(20); 
442C:  MOVLW  14
442E:  MOVLB  1
4430:  MOVWF  x49
4432:  MOVLB  0
4434:  CALL   0CA2
....................       if(RIGHT){ 
4438:  BSF    F96.1
443A:  BTFSC  F84.1
443C:  BRA    4474
....................          if(unidad2==1) 
443E:  DECFSZ 41,W
4440:  BRA    4448
....................          { 
....................             unidad2=4; 
4442:  MOVLW  04
4444:  MOVWF  41
....................          } 
....................          else 
4446:  BRA    4452
....................          { 
....................             if(unidad2==4) 
4448:  MOVF   41,W
444A:  SUBLW  04
444C:  BNZ   4452
....................             { 
....................                unidad2=1; 
444E:  MOVLW  01
4450:  MOVWF  41
....................             } 
....................          } 
....................       delay_ms(500); 
4452:  MOVLW  02
4454:  MOVLB  1
4456:  MOVWF  x32
4458:  MOVLW  FA
445A:  MOVWF  x49
445C:  MOVLB  0
445E:  CALL   0CA2
4462:  MOVLB  1
4464:  DECFSZ x32,F
4466:  BRA    4458
....................       printf(lcd_putc,"\f"); 
4468:  MOVLW  0C
446A:  MOVWF  x43
446C:  MOVLB  0
446E:  CALL   1CCE
....................       Cambio=ON; 
4472:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(IZQU) 
4474:  BSF    F96.2
4476:  BTFSC  F84.2
4478:  BRA    4582
....................    { 
....................       if(IZQU){ 
447A:  BSF    F96.2
447C:  BTFSC  F84.2
447E:  BRA    4582
....................          delay_ms(200); 
4480:  MOVLW  C8
4482:  MOVLB  1
4484:  MOVWF  x49
4486:  MOVLB  0
4488:  CALL   0CA2
....................          printf(lcd_putc,"\f"); 
448C:  MOVLW  0C
448E:  MOVLB  1
4490:  MOVWF  x43
4492:  MOVLB  0
4494:  CALL   1CCE
....................          lcd_gotoxy(1,2); 
4498:  MOVLW  01
449A:  MOVLB  1
449C:  MOVWF  x44
449E:  MOVLW  02
44A0:  MOVWF  x45
44A2:  MOVLB  0
44A4:  CALL   1C54
....................          printf(lcd_putc,"Tiempo Almacenado"); 
44A8:  MOVLW  04
44AA:  MOVWF  FF6
44AC:  MOVLW  08
44AE:  MOVWF  FF7
44B0:  CALL   1D4C
....................          lcd_gotoxy(1,3); 
44B4:  MOVLW  01
44B6:  MOVLB  1
44B8:  MOVWF  x44
44BA:  MOVLW  03
44BC:  MOVWF  x45
44BE:  MOVLB  0
44C0:  CALL   1C54
....................          printf(lcd_putc,"  Correctamente  "); 
44C4:  MOVLW  16
44C6:  MOVWF  FF6
44C8:  MOVLW  08
44CA:  MOVWF  FF7
44CC:  CALL   1D4C
....................          write_eeprom(5,tempo_minutos_pro); 
44D0:  MOVLW  05
44D2:  MOVWF  FA9
44D4:  MOVFF  3C,FA8
44D8:  BCF    FA6.6
44DA:  BCF    FA6.7
44DC:  BSF    FA6.2
44DE:  MOVF   FF2,W
44E0:  MOVWF  00
44E2:  BCF    FF2.6
44E4:  BCF    FF2.7
44E6:  MOVLB  F
44E8:  MOVLW  55
44EA:  MOVWF  FA7
44EC:  MOVLW  AA
44EE:  MOVWF  FA7
44F0:  BSF    FA6.1
44F2:  BTFSC  FA6.1
44F4:  BRA    44F2
44F6:  BCF    FA6.2
44F8:  MOVF   00,W
44FA:  IORWF  FF2,F
....................          delay_ms(20); 
44FC:  MOVLW  14
44FE:  MOVLB  1
4500:  MOVWF  x49
4502:  MOVLB  0
4504:  CALL   0CA2
....................          write_eeprom(6,tempo_segundos_pro); 
4508:  MOVLW  06
450A:  MOVWF  FA9
450C:  MOVFF  3D,FA8
4510:  BCF    FA6.6
4512:  BCF    FA6.7
4514:  BSF    FA6.2
4516:  MOVF   FF2,W
4518:  MOVWF  00
451A:  BCF    FF2.6
451C:  BCF    FF2.7
451E:  MOVLB  F
4520:  MOVLW  55
4522:  MOVWF  FA7
4524:  MOVLW  AA
4526:  MOVWF  FA7
4528:  BSF    FA6.1
452A:  BTFSC  FA6.1
452C:  BRA    452A
452E:  BCF    FA6.2
4530:  MOVF   00,W
4532:  IORWF  FF2,F
....................          delay_ms(20); 
4534:  MOVLW  14
4536:  MOVLB  1
4538:  MOVWF  x49
453A:  MOVLB  0
453C:  CALL   0CA2
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
4540:  MOVFF  3C,3A
4544:  MOVFF  3D,3B
....................          delay_ms(700); 
4548:  MOVLW  04
454A:  MOVLB  1
454C:  MOVWF  x32
454E:  MOVLW  AF
4550:  MOVWF  x49
4552:  MOVLB  0
4554:  CALL   0CA2
4558:  MOVLB  1
455A:  DECFSZ x32,F
455C:  BRA    454E
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
455E:  MOVLW  1E
4560:  MOVWF  x49
4562:  MOVLB  0
4564:  CALL   0CA2
4568:  MOVLW  01
456A:  MOVWF  2B
456C:  CLRF   47
456E:  MOVLW  02
4570:  MOVWF  2F
4572:  MOVWF  31
4574:  MOVLW  0C
4576:  MOVLB  1
4578:  MOVWF  x43
457A:  MOVLB  0
457C:  CALL   1CCE
....................          Cambio=ON; 
4580:  BSF    2A.7
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
4582:  MOVF   2B,W
4584:  SUBLW  03
4586:  BTFSS  FD8.2
4588:  BRA    4960
....................       EliminaRuido(); 
458A:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
458E:  MOVLW  01
4590:  MOVLB  1
4592:  MOVWF  x44
4594:  MOVWF  x45
4596:  MOVLB  0
4598:  CALL   1C54
....................          printf(lcd_putc,"     Ingrese        "); 
459C:  MOVLW  28
459E:  MOVWF  FF6
45A0:  MOVLW  08
45A2:  MOVWF  FF7
45A4:  CALL   1D4C
....................          lcd_gotoxy(1,2); 
45A8:  MOVLW  01
45AA:  MOVLB  1
45AC:  MOVWF  x44
45AE:  MOVLW  02
45B0:  MOVWF  x45
45B2:  MOVLB  0
45B4:  CALL   1C54
....................          printf(lcd_putc,"    Contraseña      "); 
45B8:  MOVLW  3E
45BA:  MOVWF  FF6
45BC:  MOVLW  08
45BE:  MOVWF  FF7
45C0:  CALL   1D4C
....................          lcd_gotoxy(1,3); 
45C4:  MOVLW  01
45C6:  MOVLB  1
45C8:  MOVWF  x44
45CA:  MOVLW  03
45CC:  MOVWF  x45
45CE:  MOVLB  0
45D0:  CALL   1C54
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
45D4:  MOVLW  54
45D6:  MOVWF  FF6
45D8:  MOVLW  08
45DA:  MOVWF  FF7
45DC:  MOVLW  0A
45DE:  MOVLB  1
45E0:  MOVWF  x36
45E2:  MOVLB  0
45E4:  CALL   23F0
45E8:  MOVFF  4C,132
45EC:  MOVLW  1F
45EE:  MOVLB  1
45F0:  MOVWF  x33
45F2:  MOVLB  0
45F4:  CALL   29B0
45F8:  MOVFF  4D,132
45FC:  MOVLW  1F
45FE:  MOVLB  1
4600:  MOVWF  x33
4602:  MOVLB  0
4604:  CALL   29B0
4608:  MOVFF  4E,132
460C:  MOVLW  1F
460E:  MOVLB  1
4610:  MOVWF  x33
4612:  MOVLB  0
4614:  CALL   29B0
4618:  MOVFF  4F,132
461C:  MOVLW  1F
461E:  MOVLB  1
4620:  MOVWF  x33
4622:  MOVLB  0
4624:  CALL   29B0
4628:  MOVLW  20
462A:  MOVLB  1
462C:  MOVWF  x43
462E:  MOVLB  0
4630:  CALL   1CCE
4634:  MOVLW  20
4636:  MOVLB  1
4638:  MOVWF  x43
463A:  MOVLB  0
463C:  CALL   1CCE
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
4640:  MOVFF  2E,144
4644:  MOVLW  04
4646:  MOVLB  1
4648:  MOVWF  x45
464A:  MOVLB  0
464C:  CALL   1C54
....................          lcd_putc(t[2]); 
4650:  MOVFF  4B,143
4654:  CALL   1CCE
....................           
....................          if(unidad>11&&unidad<14){ 
4658:  MOVF   2E,W
465A:  SUBLW  0B
465C:  BC    4680
465E:  MOVF   2E,W
4660:  SUBLW  0D
4662:  BNC   4680
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
4664:  MOVLW  01
4666:  SUBWF  2E,W
4668:  MOVLB  1
466A:  MOVWF  x32
466C:  MOVWF  x44
466E:  MOVLW  04
4670:  MOVWF  x45
4672:  MOVLB  0
4674:  CALL   1C54
....................             lcd_putc(t[1]); 
4678:  MOVFF  4A,143
467C:  CALL   1CCE
....................          } 
....................           
....................          Cambio=OFF; 
4680:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
4682:  BSF    F92.5
4684:  BTFSC  F80.5
4686:  BRA    46C2
....................          delay_ms(20); 
4688:  MOVLW  14
468A:  MOVLB  1
468C:  MOVWF  x49
468E:  MOVLB  0
4690:  CALL   0CA2
....................          if(UP){ 
4694:  BSF    F92.5
4696:  BTFSC  F80.5
4698:  BRA    46C0
....................             if(Flanco == 0) { 
469A:  BTFSC  29.3
469C:  BRA    46C0
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
469E:  MOVLW  0B
46A0:  SUBWF  2E,W
46A2:  CLRF   03
46A4:  ADDLW  4C
46A6:  MOVWF  FE9
46A8:  MOVLW  00
46AA:  ADDWFC 03,W
46AC:  MOVWF  FEA
46AE:  INCF   FEF,F
46B0:  BSF    29.3
46B2:  MOVLW  1E
46B4:  MOVLB  1
46B6:  MOVWF  x49
46B8:  MOVLB  0
46BA:  CALL   0CA2
46BE:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
46C0:  BRA    46C4
....................          Flanco = 0; 
46C2:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
46C4:  BSF    F96.0
46C6:  BTFSC  F84.0
46C8:  BRA    4704
....................          delay_ms(20); 
46CA:  MOVLW  14
46CC:  MOVLB  1
46CE:  MOVWF  x49
46D0:  MOVLB  0
46D2:  CALL   0CA2
....................          if(DOWN){ 
46D6:  BSF    F96.0
46D8:  BTFSC  F84.0
46DA:  BRA    4702
....................             if(Flanco2 == 0) { 
46DC:  BTFSC  29.5
46DE:  BRA    4702
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
46E0:  MOVLW  0B
46E2:  SUBWF  2E,W
46E4:  CLRF   03
46E6:  ADDLW  4C
46E8:  MOVWF  FE9
46EA:  MOVLW  00
46EC:  ADDWFC 03,W
46EE:  MOVWF  FEA
46F0:  DECF   FEF,F
46F2:  BSF    29.5
46F4:  MOVLW  1E
46F6:  MOVLB  1
46F8:  MOVWF  x49
46FA:  MOVLB  0
46FC:  CALL   0CA2
4700:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4702:  BRA    4706
....................          Flanco2 = 0; 
4704:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
4706:  BSF    F96.1
4708:  BTFSC  F84.1
470A:  BRA    4742
....................          delay_ms(20); 
470C:  MOVLW  14
470E:  MOVLB  1
4710:  MOVWF  x49
4712:  MOVLB  0
4714:  CALL   0CA2
....................          if(RIGHT){ 
4718:  BSF    F96.1
471A:  BTFSC  F84.1
471C:  BRA    4740
....................             if(Flanco1 == 0) { 
471E:  BTFSC  29.4
4720:  BRA    4740
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
4722:  BSF    29.4
4724:  INCF   2E,F
4726:  MOVLW  1E
4728:  MOVLB  1
472A:  MOVWF  x49
472C:  MOVLB  0
472E:  CALL   0CA2
4732:  MOVLW  0C
4734:  MOVLB  1
4736:  MOVWF  x43
4738:  MOVLB  0
473A:  CALL   1CCE
473E:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4740:  BRA    4744
....................          Flanco1 = 0; 
4742:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
4744:  BSF    F96.2
4746:  BTFSC  F84.2
4748:  BRA    4780
....................          delay_ms(150); 
474A:  MOVLW  96
474C:  MOVLB  1
474E:  MOVWF  x49
4750:  MOVLB  0
4752:  CALL   0CA2
....................          if(IZQU){ 
4756:  BSF    F96.2
4758:  BTFSC  F84.2
475A:  BRA    477E
....................             if(Flanco3 == 0){ 
475C:  BTFSC  29.6
475E:  BRA    477E
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
4760:  BSF    29.6
4762:  DECF   2E,F
4764:  MOVLW  1E
4766:  MOVLB  1
4768:  MOVWF  x49
476A:  MOVLB  0
476C:  CALL   0CA2
4770:  MOVLW  0C
4772:  MOVLB  1
4774:  MOVWF  x43
4776:  MOVLB  0
4778:  CALL   1CCE
477C:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
477E:  BRA    4782
....................         Flanco3 = 0; 
4780:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
4782:  MOVLW  0B
4784:  SUBWF  2E,W
4786:  CLRF   03
4788:  ADDLW  4C
478A:  MOVWF  FE9
478C:  MOVLW  00
478E:  ADDWFC 03,W
4790:  MOVWF  FEA
4792:  BTFSC  FEF.7
4794:  BRA    4798
4796:  BRA    47AC
....................          clave[unidad-11]=9; 
4798:  MOVLW  0B
479A:  SUBWF  2E,W
479C:  CLRF   03
479E:  ADDLW  4C
47A0:  MOVWF  FE9
47A2:  MOVLW  00
47A4:  ADDWFC 03,W
47A6:  MOVWF  FEA
47A8:  MOVLW  09
47AA:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
47AC:  MOVLW  0B
47AE:  SUBWF  2E,W
47B0:  CLRF   03
47B2:  ADDLW  4C
47B4:  MOVWF  FE9
47B6:  MOVLW  00
47B8:  ADDWFC 03,W
47BA:  MOVWF  FEA
47BC:  BTFSC  FEF.7
47BE:  BRA    47D8
47C0:  MOVF   FEF,W
47C2:  SUBLW  09
47C4:  BC    47D8
....................          clave[unidad-11]=0; 
47C6:  MOVLW  0B
47C8:  SUBWF  2E,W
47CA:  CLRF   03
47CC:  ADDLW  4C
47CE:  MOVWF  FE9
47D0:  MOVLW  00
47D2:  ADDWFC 03,W
47D4:  MOVWF  FEA
47D6:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
47D8:  MOVF   2E,W
47DA:  SUBLW  0A
47DC:  BNC   4802
....................          unidad=11; 
47DE:  MOVLW  0B
47E0:  MOVWF  2E
....................          Menu=1; 
47E2:  MOVLW  01
47E4:  MOVWF  2B
....................          paso=0; 
47E6:  CLRF   47
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
47E8:  CLRF   4C
47EA:  CLRF   4D
47EC:  CLRF   4E
47EE:  CLRF   4F
47F0:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
47F2:  MOVLW  0B
47F4:  MOVWF  2E
47F6:  MOVLW  0C
47F8:  MOVLB  1
47FA:  MOVWF  x43
47FC:  MOVLB  0
47FE:  CALL   1CCE
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
4802:  MOVF   2E,W
4804:  SUBLW  0E
4806:  BTFSC  FD8.0
4808:  BRA    4960
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
480A:  MOVF   50,W
480C:  SUBWF  4C,W
480E:  BNZ   48C4
4810:  MOVF   51,W
4812:  SUBWF  4D,W
4814:  BNZ   48C4
4816:  MOVF   52,W
4818:  SUBWF  4E,W
481A:  BNZ   48C4
481C:  MOVF   53,W
481E:  SUBWF  4F,W
4820:  BNZ   48C4
....................             lcd_gotoxy(1,1); 
4822:  MOVLW  01
4824:  MOVLB  1
4826:  MOVWF  x44
4828:  MOVWF  x45
482A:  MOVLB  0
482C:  CALL   1C54
....................             printf(lcd_putc,"                    "); 
4830:  MOVLW  6A
4832:  MOVWF  FF6
4834:  MOVLW  08
4836:  MOVWF  FF7
4838:  CALL   1D4C
....................             lcd_gotoxy(1,2); 
483C:  MOVLW  01
483E:  MOVLB  1
4840:  MOVWF  x44
4842:  MOVLW  02
4844:  MOVWF  x45
4846:  MOVLB  0
4848:  CALL   1C54
....................             printf(lcd_putc,"     Contraseña     "); 
484C:  MOVLW  80
484E:  MOVWF  FF6
4850:  MOVLW  08
4852:  MOVWF  FF7
4854:  CALL   1D4C
....................             lcd_gotoxy(1,3); 
4858:  MOVLW  01
485A:  MOVLB  1
485C:  MOVWF  x44
485E:  MOVLW  03
4860:  MOVWF  x45
4862:  MOVLB  0
4864:  CALL   1C54
....................             printf(lcd_putc,"      Correcta      "); 
4868:  MOVLW  96
486A:  MOVWF  FF6
486C:  MOVLW  08
486E:  MOVWF  FF7
4870:  CALL   1D4C
....................             lcd_gotoxy(1,4); 
4874:  MOVLW  01
4876:  MOVLB  1
4878:  MOVWF  x44
487A:  MOVLW  04
487C:  MOVWF  x45
487E:  MOVLB  0
4880:  CALL   1C54
....................             printf(lcd_putc,"                    "); 
4884:  MOVLW  AC
4886:  MOVWF  FF6
4888:  MOVLW  08
488A:  MOVWF  FF7
488C:  CALL   1D4C
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
4890:  MOVLW  02
4892:  MOVLB  1
4894:  MOVWF  x32
4896:  MOVLW  FA
4898:  MOVWF  x49
489A:  MOVLB  0
489C:  CALL   0CA2
48A0:  MOVLB  1
48A2:  DECFSZ x32,F
48A4:  BRA    4896
48A6:  MOVLW  3D
48A8:  MOVWF  2B
48AA:  MOVLW  0B
48AC:  MOVWF  2E
48AE:  MOVLW  0C
48B0:  MOVWF  x43
48B2:  MOVLB  0
48B4:  CALL   1CCE
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
48B8:  CLRF   4C
48BA:  CLRF   4D
48BC:  CLRF   4E
48BE:  CLRF   4F
48C0:  BSF    2A.7
....................          }else{ 
48C2:  BRA    4960
....................             lcd_gotoxy(1,1); 
48C4:  MOVLW  01
48C6:  MOVLB  1
48C8:  MOVWF  x44
48CA:  MOVWF  x45
48CC:  MOVLB  0
48CE:  CALL   1C54
....................             printf(lcd_putc,"                    "); 
48D2:  MOVLW  C2
48D4:  MOVWF  FF6
48D6:  MOVLW  08
48D8:  MOVWF  FF7
48DA:  CALL   1D4C
....................             lcd_gotoxy(1,2); 
48DE:  MOVLW  01
48E0:  MOVLB  1
48E2:  MOVWF  x44
48E4:  MOVLW  02
48E6:  MOVWF  x45
48E8:  MOVLB  0
48EA:  CALL   1C54
....................             printf(lcd_putc,"     Contraseña     "); 
48EE:  MOVLW  D8
48F0:  MOVWF  FF6
48F2:  MOVLW  08
48F4:  MOVWF  FF7
48F6:  CALL   1D4C
....................             lcd_gotoxy(1,3); 
48FA:  MOVLW  01
48FC:  MOVLB  1
48FE:  MOVWF  x44
4900:  MOVLW  03
4902:  MOVWF  x45
4904:  MOVLB  0
4906:  CALL   1C54
....................             printf(lcd_putc,"     Incorrecta     "); 
490A:  MOVLW  EE
490C:  MOVWF  FF6
490E:  MOVLW  08
4910:  MOVWF  FF7
4912:  CALL   1D4C
....................             lcd_gotoxy(1,4); 
4916:  MOVLW  01
4918:  MOVLB  1
491A:  MOVWF  x44
491C:  MOVLW  04
491E:  MOVWF  x45
4920:  MOVLB  0
4922:  CALL   1C54
....................             printf(lcd_putc,"                    "); 
4926:  MOVLW  04
4928:  MOVWF  FF6
492A:  MOVLW  09
492C:  MOVWF  FF7
492E:  CALL   1D4C
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
4932:  MOVLW  02
4934:  MOVLB  1
4936:  MOVWF  x32
4938:  MOVLW  FA
493A:  MOVWF  x49
493C:  MOVLB  0
493E:  CALL   0CA2
4942:  MOVLB  1
4944:  DECFSZ x32,F
4946:  BRA    4938
4948:  MOVLW  0B
494A:  MOVWF  2E
494C:  MOVLW  0C
494E:  MOVWF  x43
4950:  MOVLB  0
4952:  CALL   1CCE
4956:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
4958:  CLRF   4C
495A:  CLRF   4D
495C:  CLRF   4E
495E:  CLRF   4F
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
4960:  MOVF   2B,W
4962:  SUBLW  3D
4964:  BTFSS  FD8.2
4966:  BRA    4D70
....................       EliminaRuido(); 
4968:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
496C:  MOVLW  01
496E:  MOVLB  1
4970:  MOVWF  x44
4972:  MOVWF  x45
4974:  MOVLB  0
4976:  CALL   1C54
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
497A:  MOVLW  1A
497C:  MOVWF  FF6
497E:  MOVLW  09
4980:  MOVWF  FF7
4982:  CALL   1D4C
....................          lcd_gotoxy(1,2); 
4986:  MOVLW  01
4988:  MOVLB  1
498A:  MOVWF  x44
498C:  MOVLW  02
498E:  MOVWF  x45
4990:  MOVLB  0
4992:  CALL   1C54
....................          printf(lcd_putc,"     Contraseña     "); 
4996:  MOVLW  30
4998:  MOVWF  FF6
499A:  MOVLW  09
499C:  MOVWF  FF7
499E:  CALL   1D4C
....................          lcd_gotoxy(1,3); 
49A2:  MOVLW  01
49A4:  MOVLB  1
49A6:  MOVWF  x44
49A8:  MOVLW  03
49AA:  MOVWF  x45
49AC:  MOVLB  0
49AE:  CALL   1C54
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
49B2:  MOVLW  46
49B4:  MOVWF  FF6
49B6:  MOVLW  09
49B8:  MOVWF  FF7
49BA:  MOVLW  0A
49BC:  MOVLB  1
49BE:  MOVWF  x36
49C0:  MOVLB  0
49C2:  CALL   23F0
49C6:  MOVFF  4C,132
49CA:  MOVLW  1F
49CC:  MOVLB  1
49CE:  MOVWF  x33
49D0:  MOVLB  0
49D2:  CALL   29B0
49D6:  MOVFF  4D,132
49DA:  MOVLW  1F
49DC:  MOVLB  1
49DE:  MOVWF  x33
49E0:  MOVLB  0
49E2:  CALL   29B0
49E6:  MOVFF  4E,132
49EA:  MOVLW  1F
49EC:  MOVLB  1
49EE:  MOVWF  x33
49F0:  MOVLB  0
49F2:  CALL   29B0
49F6:  MOVFF  4F,132
49FA:  MOVLW  1F
49FC:  MOVLB  1
49FE:  MOVWF  x33
4A00:  MOVLB  0
4A02:  CALL   29B0
4A06:  MOVLW  20
4A08:  MOVLB  1
4A0A:  MOVWF  x43
4A0C:  MOVLB  0
4A0E:  CALL   1CCE
4A12:  MOVLW  20
4A14:  MOVLB  1
4A16:  MOVWF  x43
4A18:  MOVLB  0
4A1A:  CALL   1CCE
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
4A1E:  MOVFF  2E,144
4A22:  MOVLW  04
4A24:  MOVLB  1
4A26:  MOVWF  x45
4A28:  MOVLB  0
4A2A:  CALL   1C54
....................          lcd_putc(t[2]); 
4A2E:  MOVFF  4B,143
4A32:  CALL   1CCE
....................           
....................          if(unidad>11&&unidad<14){ 
4A36:  MOVF   2E,W
4A38:  SUBLW  0B
4A3A:  BC    4A5E
4A3C:  MOVF   2E,W
4A3E:  SUBLW  0D
4A40:  BNC   4A5E
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
4A42:  MOVLW  01
4A44:  SUBWF  2E,W
4A46:  MOVLB  1
4A48:  MOVWF  x32
4A4A:  MOVWF  x44
4A4C:  MOVLW  04
4A4E:  MOVWF  x45
4A50:  MOVLB  0
4A52:  CALL   1C54
....................             lcd_putc(t[1]); 
4A56:  MOVFF  4A,143
4A5A:  CALL   1CCE
....................          } 
....................           
....................          Cambio=OFF; 
4A5E:  BCF    2A.7
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
4A60:  BSF    F92.5
4A62:  BTFSC  F80.5
4A64:  BRA    4AA0
....................          delay_ms(20); 
4A66:  MOVLW  14
4A68:  MOVLB  1
4A6A:  MOVWF  x49
4A6C:  MOVLB  0
4A6E:  CALL   0CA2
....................          if(UP){ 
4A72:  BSF    F92.5
4A74:  BTFSC  F80.5
4A76:  BRA    4A9E
....................             if(Flanco == 0) { 
4A78:  BTFSC  29.3
4A7A:  BRA    4A9E
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
4A7C:  MOVLW  0B
4A7E:  SUBWF  2E,W
4A80:  CLRF   03
4A82:  ADDLW  4C
4A84:  MOVWF  FE9
4A86:  MOVLW  00
4A88:  ADDWFC 03,W
4A8A:  MOVWF  FEA
4A8C:  INCF   FEF,F
4A8E:  BSF    29.3
4A90:  MOVLW  1E
4A92:  MOVLB  1
4A94:  MOVWF  x49
4A96:  MOVLB  0
4A98:  CALL   0CA2
4A9C:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4A9E:  BRA    4AA2
....................          Flanco = 0; 
4AA0:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
4AA2:  BSF    F96.0
4AA4:  BTFSC  F84.0
4AA6:  BRA    4AE2
....................          delay_ms(20); 
4AA8:  MOVLW  14
4AAA:  MOVLB  1
4AAC:  MOVWF  x49
4AAE:  MOVLB  0
4AB0:  CALL   0CA2
....................          if(DOWN){ 
4AB4:  BSF    F96.0
4AB6:  BTFSC  F84.0
4AB8:  BRA    4AE0
....................             if(Flanco2 == 0) { 
4ABA:  BTFSC  29.5
4ABC:  BRA    4AE0
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
4ABE:  MOVLW  0B
4AC0:  SUBWF  2E,W
4AC2:  CLRF   03
4AC4:  ADDLW  4C
4AC6:  MOVWF  FE9
4AC8:  MOVLW  00
4ACA:  ADDWFC 03,W
4ACC:  MOVWF  FEA
4ACE:  DECF   FEF,F
4AD0:  BSF    29.5
4AD2:  MOVLW  1E
4AD4:  MOVLB  1
4AD6:  MOVWF  x49
4AD8:  MOVLB  0
4ADA:  CALL   0CA2
4ADE:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4AE0:  BRA    4AE4
....................          Flanco2 = 0; 
4AE2:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
4AE4:  BSF    F96.1
4AE6:  BTFSC  F84.1
4AE8:  BRA    4B14
....................          if(RIGHT){ 
4AEA:  BSF    F96.1
4AEC:  BTFSC  F84.1
4AEE:  BRA    4B12
....................             if(Flanco1 == 0) { 
4AF0:  BTFSC  29.4
4AF2:  BRA    4B12
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
4AF4:  BSF    29.4
4AF6:  INCF   2E,F
4AF8:  MOVLW  1E
4AFA:  MOVLB  1
4AFC:  MOVWF  x49
4AFE:  MOVLB  0
4B00:  CALL   0CA2
4B04:  MOVLW  0C
4B06:  MOVLB  1
4B08:  MOVWF  x43
4B0A:  MOVLB  0
4B0C:  CALL   1CCE
4B10:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4B12:  BRA    4B16
....................          Flanco1 = 0; 
4B14:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
4B16:  BSF    F96.2
4B18:  BTFSC  F84.2
4B1A:  BRA    4B52
....................          delay_ms(150); 
4B1C:  MOVLW  96
4B1E:  MOVLB  1
4B20:  MOVWF  x49
4B22:  MOVLB  0
4B24:  CALL   0CA2
....................          if(IZQU){ 
4B28:  BSF    F96.2
4B2A:  BTFSC  F84.2
4B2C:  BRA    4B50
....................             if(Flanco3 == 0){ 
4B2E:  BTFSC  29.6
4B30:  BRA    4B50
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
4B32:  BSF    29.6
4B34:  DECF   2E,F
4B36:  MOVLW  1E
4B38:  MOVLB  1
4B3A:  MOVWF  x49
4B3C:  MOVLB  0
4B3E:  CALL   0CA2
4B42:  MOVLW  0C
4B44:  MOVLB  1
4B46:  MOVWF  x43
4B48:  MOVLB  0
4B4A:  CALL   1CCE
4B4E:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4B50:  BRA    4B54
....................         Flanco3 = 0; 
4B52:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
4B54:  MOVLW  0B
4B56:  SUBWF  2E,W
4B58:  CLRF   03
4B5A:  ADDLW  4C
4B5C:  MOVWF  FE9
4B5E:  MOVLW  00
4B60:  ADDWFC 03,W
4B62:  MOVWF  FEA
4B64:  BTFSC  FEF.7
4B66:  BRA    4B6A
4B68:  BRA    4B7E
....................          clave[unidad-11]=9; 
4B6A:  MOVLW  0B
4B6C:  SUBWF  2E,W
4B6E:  CLRF   03
4B70:  ADDLW  4C
4B72:  MOVWF  FE9
4B74:  MOVLW  00
4B76:  ADDWFC 03,W
4B78:  MOVWF  FEA
4B7A:  MOVLW  09
4B7C:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
4B7E:  MOVLW  0B
4B80:  SUBWF  2E,W
4B82:  CLRF   03
4B84:  ADDLW  4C
4B86:  MOVWF  FE9
4B88:  MOVLW  00
4B8A:  ADDWFC 03,W
4B8C:  MOVWF  FEA
4B8E:  BTFSC  FEF.7
4B90:  BRA    4BAA
4B92:  MOVF   FEF,W
4B94:  SUBLW  09
4B96:  BC    4BAA
....................          clave[unidad-11]=0; 
4B98:  MOVLW  0B
4B9A:  SUBWF  2E,W
4B9C:  CLRF   03
4B9E:  ADDLW  4C
4BA0:  MOVWF  FE9
4BA2:  MOVLW  00
4BA4:  ADDWFC 03,W
4BA6:  MOVWF  FEA
4BA8:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
4BAA:  MOVF   2E,W
4BAC:  SUBLW  0A
4BAE:  BNC   4BD2
....................          unidad=11; 
4BB0:  MOVLW  0B
4BB2:  MOVWF  2E
....................          Menu=1; 
4BB4:  MOVLW  01
4BB6:  MOVWF  2B
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
4BB8:  CLRF   4C
4BBA:  CLRF   4D
4BBC:  CLRF   4E
4BBE:  CLRF   4F
4BC0:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
4BC2:  MOVLW  0B
4BC4:  MOVWF  2E
4BC6:  MOVLW  0C
4BC8:  MOVLB  1
4BCA:  MOVWF  x43
4BCC:  MOVLB  0
4BCE:  CALL   1CCE
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
4BD2:  MOVF   2E,W
4BD4:  SUBLW  0E
4BD6:  BTFSC  FD8.0
4BD8:  BRA    4D70
....................          lcd_gotoxy(1,1); 
4BDA:  MOVLW  01
4BDC:  MOVLB  1
4BDE:  MOVWF  x44
4BE0:  MOVWF  x45
4BE2:  MOVLB  0
4BE4:  CALL   1C54
....................          printf(lcd_putc,"                    "); 
4BE8:  MOVLW  5C
4BEA:  MOVWF  FF6
4BEC:  MOVLW  09
4BEE:  MOVWF  FF7
4BF0:  CALL   1D4C
....................          lcd_gotoxy(1,2); 
4BF4:  MOVLW  01
4BF6:  MOVLB  1
4BF8:  MOVWF  x44
4BFA:  MOVLW  02
4BFC:  MOVWF  x45
4BFE:  MOVLB  0
4C00:  CALL   1C54
....................          printf(lcd_putc,"     Contraseña     "); 
4C04:  MOVLW  72
4C06:  MOVWF  FF6
4C08:  MOVLW  09
4C0A:  MOVWF  FF7
4C0C:  CALL   1D4C
....................          lcd_gotoxy(1,3); 
4C10:  MOVLW  01
4C12:  MOVLB  1
4C14:  MOVWF  x44
4C16:  MOVLW  03
4C18:  MOVWF  x45
4C1A:  MOVLB  0
4C1C:  CALL   1C54
....................          printf(lcd_putc,"     Almacenada     "); 
4C20:  MOVLW  88
4C22:  MOVWF  FF6
4C24:  MOVLW  09
4C26:  MOVWF  FF7
4C28:  CALL   1D4C
....................          lcd_gotoxy(1,4); 
4C2C:  MOVLW  01
4C2E:  MOVLB  1
4C30:  MOVWF  x44
4C32:  MOVLW  04
4C34:  MOVWF  x45
4C36:  MOVLB  0
4C38:  CALL   1C54
....................          printf(lcd_putc,"                    "); 
4C3C:  MOVLW  9E
4C3E:  MOVWF  FF6
4C40:  MOVLW  09
4C42:  MOVWF  FF7
4C44:  CALL   1D4C
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
4C48:  CLRF   FA9
4C4A:  MOVFF  4C,FA8
4C4E:  BCF    FA6.6
4C50:  BCF    FA6.7
4C52:  BSF    FA6.2
4C54:  MOVF   FF2,W
4C56:  MOVWF  00
4C58:  BCF    FF2.6
4C5A:  BCF    FF2.7
4C5C:  MOVLB  F
4C5E:  MOVLW  55
4C60:  MOVWF  FA7
4C62:  MOVLW  AA
4C64:  MOVWF  FA7
4C66:  BSF    FA6.1
4C68:  BTFSC  FA6.1
4C6A:  BRA    4C68
4C6C:  BCF    FA6.2
4C6E:  MOVF   00,W
4C70:  IORWF  FF2,F
4C72:  MOVLW  14
4C74:  MOVLB  1
4C76:  MOVWF  x49
4C78:  MOVLB  0
4C7A:  CALL   0CA2
4C7E:  MOVLW  01
4C80:  MOVWF  FA9
4C82:  MOVFF  4D,FA8
4C86:  BCF    FA6.6
4C88:  BCF    FA6.7
4C8A:  BSF    FA6.2
4C8C:  MOVF   FF2,W
4C8E:  MOVWF  00
4C90:  BCF    FF2.6
4C92:  BCF    FF2.7
4C94:  MOVLB  F
4C96:  MOVLW  55
4C98:  MOVWF  FA7
4C9A:  MOVLW  AA
4C9C:  MOVWF  FA7
4C9E:  BSF    FA6.1
4CA0:  BTFSC  FA6.1
4CA2:  BRA    4CA0
4CA4:  BCF    FA6.2
4CA6:  MOVF   00,W
4CA8:  IORWF  FF2,F
4CAA:  MOVLW  14
4CAC:  MOVLB  1
4CAE:  MOVWF  x49
4CB0:  MOVLB  0
4CB2:  CALL   0CA2
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
4CB6:  MOVLW  02
4CB8:  MOVWF  FA9
4CBA:  MOVFF  4E,FA8
4CBE:  BCF    FA6.6
4CC0:  BCF    FA6.7
4CC2:  BSF    FA6.2
4CC4:  MOVF   FF2,W
4CC6:  MOVWF  00
4CC8:  BCF    FF2.6
4CCA:  BCF    FF2.7
4CCC:  MOVLB  F
4CCE:  MOVLW  55
4CD0:  MOVWF  FA7
4CD2:  MOVLW  AA
4CD4:  MOVWF  FA7
4CD6:  BSF    FA6.1
4CD8:  BTFSC  FA6.1
4CDA:  BRA    4CD8
4CDC:  BCF    FA6.2
4CDE:  MOVF   00,W
4CE0:  IORWF  FF2,F
4CE2:  MOVLW  14
4CE4:  MOVLB  1
4CE6:  MOVWF  x49
4CE8:  MOVLB  0
4CEA:  CALL   0CA2
4CEE:  MOVLW  03
4CF0:  MOVWF  FA9
4CF2:  MOVFF  4F,FA8
4CF6:  BCF    FA6.6
4CF8:  BCF    FA6.7
4CFA:  BSF    FA6.2
4CFC:  MOVF   FF2,W
4CFE:  MOVWF  00
4D00:  BCF    FF2.6
4D02:  BCF    FF2.7
4D04:  MOVLB  F
4D06:  MOVLW  55
4D08:  MOVWF  FA7
4D0A:  MOVLW  AA
4D0C:  MOVWF  FA7
4D0E:  BSF    FA6.1
4D10:  BTFSC  FA6.1
4D12:  BRA    4D10
4D14:  BCF    FA6.2
4D16:  MOVF   00,W
4D18:  IORWF  FF2,F
4D1A:  MOVLW  14
4D1C:  MOVLB  1
4D1E:  MOVWF  x49
4D20:  MOVLB  0
4D22:  CALL   0CA2
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
4D26:  MOVLW  02
4D28:  MOVLB  1
4D2A:  MOVWF  x32
4D2C:  MOVLW  FA
4D2E:  MOVWF  x49
4D30:  MOVLB  0
4D32:  CALL   0CA2
4D36:  MOVLB  1
4D38:  DECFSZ x32,F
4D3A:  BRA    4D2C
4D3C:  MOVLW  01
4D3E:  MOVWF  2B
4D40:  CLRF   47
4D42:  MOVLW  02
4D44:  MOVWF  2F
4D46:  MOVWF  31
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
4D48:  MOVFF  4C,50
4D4C:  MOVFF  4D,51
4D50:  MOVFF  4E,52
4D54:  MOVFF  4F,53
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
4D58:  CLRF   4C
4D5A:  CLRF   4D
4D5C:  CLRF   4E
4D5E:  CLRF   4F
4D60:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f");          
4D62:  MOVLW  0B
4D64:  MOVWF  2E
4D66:  MOVLW  0C
4D68:  MOVWF  x43
4D6A:  MOVLB  0
4D6C:  CALL   1CCE
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
4D70:  MOVF   2B,W
4D72:  SUBLW  04
4D74:  BTFSS  FD8.2
4D76:  BRA    4FDE
....................    EliminaRuido(); 
4D78:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
4D7C:  MOVLW  01
4D7E:  MOVLB  1
4D80:  MOVWF  x44
4D82:  MOVWF  x45
4D84:  MOVLB  0
4D86:  CALL   1C54
....................       printf(lcd_putc,"  Duracion Actual   "); 
4D8A:  MOVLW  B4
4D8C:  MOVWF  FF6
4D8E:  MOVLW  09
4D90:  MOVWF  FF7
4D92:  CALL   1D4C
....................       lcd_gotoxy(1,2); 
4D96:  MOVLW  01
4D98:  MOVLB  1
4D9A:  MOVWF  x44
4D9C:  MOVLW  02
4D9E:  MOVWF  x45
4DA0:  MOVLB  0
4DA2:  CALL   1C54
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
4DA6:  MOVLW  CA
4DA8:  MOVWF  FF6
4DAA:  MOVLW  09
4DAC:  MOVWF  FF7
4DAE:  MOVLW  0B
4DB0:  MOVLB  1
4DB2:  MOVWF  x36
4DB4:  MOVLB  0
4DB6:  CALL   23F0
4DBA:  MOVLW  08
4DBC:  MOVWF  FE9
4DBE:  MOVFF  5D,133
4DC2:  MOVFF  5C,132
4DC6:  CALL   2736
4DCA:  MOVLW  20
4DCC:  MOVLB  1
4DCE:  MOVWF  x43
4DD0:  MOVLB  0
4DD2:  CALL   1CCE
4DD6:  MOVLW  20
4DD8:  MOVLB  1
4DDA:  MOVWF  x43
4DDC:  MOVLB  0
4DDE:  CALL   1CCE
4DE2:  MOVLW  20
4DE4:  MOVLB  1
4DE6:  MOVWF  x43
4DE8:  MOVLB  0
4DEA:  CALL   1CCE
....................       lcd_gotoxy(1,4); 
4DEE:  MOVLW  01
4DF0:  MOVLB  1
4DF2:  MOVWF  x44
4DF4:  MOVLW  04
4DF6:  MOVWF  x45
4DF8:  MOVLB  0
4DFA:  CALL   1C54
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
4DFE:  MOVLW  DE
4E00:  MOVWF  FF6
4E02:  MOVLW  09
4E04:  MOVWF  FF7
4E06:  CALL   1D4C
....................        
....................       Cambio=OFF; 
4E0A:  BCF    2A.7
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
4E0C:  BSF    F92.5
4E0E:  BTFSC  F80.5
4E10:  BRA    4F8E
4E12:  BSF    F96.1
4E14:  BTFSC  F84.1
4E16:  BRA    4F8E
....................          delay_ms(20); 
4E18:  MOVLW  14
4E1A:  MOVLB  1
4E1C:  MOVWF  x49
4E1E:  MOVLB  0
4E20:  CALL   0CA2
....................          if(UP && RIGHT){ 
4E24:  BSF    F92.5
4E26:  BTFSC  F80.5
4E28:  BRA    4F8E
4E2A:  BSF    F96.1
4E2C:  BTFSC  F84.1
4E2E:  BRA    4F8E
....................             delay_ms(200); 
4E30:  MOVLW  C8
4E32:  MOVLB  1
4E34:  MOVWF  x49
4E36:  MOVLB  0
4E38:  CALL   0CA2
....................             printf(lcd_putc,"\f"); 
4E3C:  MOVLW  0C
4E3E:  MOVLB  1
4E40:  MOVWF  x43
4E42:  MOVLB  0
4E44:  CALL   1CCE
....................             lcd_gotoxy(1,2); 
4E48:  MOVLW  01
4E4A:  MOVLB  1
4E4C:  MOVWF  x44
4E4E:  MOVLW  02
4E50:  MOVWF  x45
4E52:  MOVLB  0
4E54:  CALL   1C54
....................             printf(lcd_putc," Reset de tiempo "); 
4E58:  MOVLW  F4
4E5A:  MOVWF  FF6
4E5C:  MOVLW  09
4E5E:  MOVWF  FF7
4E60:  CALL   1D4C
....................             lcd_gotoxy(1,3); 
4E64:  MOVLW  01
4E66:  MOVLB  1
4E68:  MOVWF  x44
4E6A:  MOVLW  03
4E6C:  MOVWF  x45
4E6E:  MOVLB  0
4E70:  CALL   1C54
....................             printf(lcd_putc,"     Exitoso     "); 
4E74:  MOVLW  06
4E76:  MOVWF  FF6
4E78:  MOVLW  0A
4E7A:  MOVWF  FF7
4E7C:  CALL   1D4C
....................             write_eeprom(7,0); 
4E80:  MOVLW  07
4E82:  MOVWF  FA9
4E84:  CLRF   FA8
4E86:  BCF    FA6.6
4E88:  BCF    FA6.7
4E8A:  BSF    FA6.2
4E8C:  MOVF   FF2,W
4E8E:  MOVWF  00
4E90:  BCF    FF2.6
4E92:  BCF    FF2.7
4E94:  MOVLB  F
4E96:  MOVLW  55
4E98:  MOVWF  FA7
4E9A:  MOVLW  AA
4E9C:  MOVWF  FA7
4E9E:  BSF    FA6.1
4EA0:  BTFSC  FA6.1
4EA2:  BRA    4EA0
4EA4:  BCF    FA6.2
4EA6:  MOVF   00,W
4EA8:  IORWF  FF2,F
....................             delay_ms(20); 
4EAA:  MOVLW  14
4EAC:  MOVLB  1
4EAE:  MOVWF  x49
4EB0:  MOVLB  0
4EB2:  CALL   0CA2
....................             write_eeprom(8,0); 
4EB6:  MOVLW  08
4EB8:  MOVWF  FA9
4EBA:  CLRF   FA8
4EBC:  BCF    FA6.6
4EBE:  BCF    FA6.7
4EC0:  BSF    FA6.2
4EC2:  MOVF   FF2,W
4EC4:  MOVWF  00
4EC6:  BCF    FF2.6
4EC8:  BCF    FF2.7
4ECA:  MOVLB  F
4ECC:  MOVLW  55
4ECE:  MOVWF  FA7
4ED0:  MOVLW  AA
4ED2:  MOVWF  FA7
4ED4:  BSF    FA6.1
4ED6:  BTFSC  FA6.1
4ED8:  BRA    4ED6
4EDA:  BCF    FA6.2
4EDC:  MOVF   00,W
4EDE:  IORWF  FF2,F
....................             delay_ms(20); 
4EE0:  MOVLW  14
4EE2:  MOVLB  1
4EE4:  MOVWF  x49
4EE6:  MOVLB  0
4EE8:  CALL   0CA2
....................             write_eeprom(9,0); 
4EEC:  MOVLW  09
4EEE:  MOVWF  FA9
4EF0:  CLRF   FA8
4EF2:  BCF    FA6.6
4EF4:  BCF    FA6.7
4EF6:  BSF    FA6.2
4EF8:  MOVF   FF2,W
4EFA:  MOVWF  00
4EFC:  BCF    FF2.6
4EFE:  BCF    FF2.7
4F00:  MOVLB  F
4F02:  MOVLW  55
4F04:  MOVWF  FA7
4F06:  MOVLW  AA
4F08:  MOVWF  FA7
4F0A:  BSF    FA6.1
4F0C:  BTFSC  FA6.1
4F0E:  BRA    4F0C
4F10:  BCF    FA6.2
4F12:  MOVF   00,W
4F14:  IORWF  FF2,F
....................             delay_ms(20); 
4F16:  MOVLW  14
4F18:  MOVLB  1
4F1A:  MOVWF  x49
4F1C:  MOVLB  0
4F1E:  CALL   0CA2
....................             write_eeprom(10,0); 
4F22:  MOVLW  0A
4F24:  MOVWF  FA9
4F26:  CLRF   FA8
4F28:  BCF    FA6.6
4F2A:  BCF    FA6.7
4F2C:  BSF    FA6.2
4F2E:  MOVF   FF2,W
4F30:  MOVWF  00
4F32:  BCF    FF2.6
4F34:  BCF    FF2.7
4F36:  MOVLB  F
4F38:  MOVLW  55
4F3A:  MOVWF  FA7
4F3C:  MOVLW  AA
4F3E:  MOVWF  FA7
4F40:  BSF    FA6.1
4F42:  BTFSC  FA6.1
4F44:  BRA    4F42
4F46:  BCF    FA6.2
4F48:  MOVF   00,W
4F4A:  IORWF  FF2,F
....................             delay_ms(700); 
4F4C:  MOVLW  04
4F4E:  MOVLB  1
4F50:  MOVWF  x32
4F52:  MOVLW  AF
4F54:  MOVWF  x49
4F56:  MOVLB  0
4F58:  CALL   0CA2
4F5C:  MOVLB  1
4F5E:  DECFSZ x32,F
4F60:  BRA    4F52
....................             segundos=0;minutos=0;horas=0; 
4F62:  CLRF   34
4F64:  CLRF   35
4F66:  CLRF   5D
4F68:  CLRF   5C
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4F6A:  MOVLW  1E
4F6C:  MOVWF  x49
4F6E:  MOVLB  0
4F70:  CALL   0CA2
4F74:  MOVLW  01
4F76:  MOVWF  2B
4F78:  CLRF   47
4F7A:  MOVLW  02
4F7C:  MOVWF  2F
4F7E:  MOVWF  31
4F80:  MOVLW  0C
4F82:  MOVLB  1
4F84:  MOVWF  x43
4F86:  MOVLB  0
4F88:  CALL   1CCE
....................             Cambio=ON; 
4F8C:  BSF    2A.7
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
4F8E:  BSF    F96.2
4F90:  BTFSC  F84.2
4F92:  BRA    4FDC
....................          delay_ms(20); 
4F94:  MOVLW  14
4F96:  MOVLB  1
4F98:  MOVWF  x49
4F9A:  MOVLB  0
4F9C:  CALL   0CA2
....................          if(IZQU){ 
4FA0:  BSF    F96.2
4FA2:  BTFSC  F84.2
4FA4:  BRA    4FDA
....................             if(Flanco3 == 0){ 
4FA6:  BTFSC  29.6
4FA8:  BRA    4FDA
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
4FAA:  BSF    29.6
4FAC:  MOVLW  02
4FAE:  MOVLB  1
4FB0:  MOVWF  x32
4FB2:  MOVLW  FA
4FB4:  MOVWF  x49
4FB6:  MOVLB  0
4FB8:  CALL   0CA2
4FBC:  MOVLB  1
4FBE:  DECFSZ x32,F
4FC0:  BRA    4FB2
4FC2:  MOVLW  01
4FC4:  MOVWF  2B
4FC6:  CLRF   47
4FC8:  MOVLW  02
4FCA:  MOVWF  2F
4FCC:  MOVWF  31
4FCE:  MOVLW  0C
4FD0:  MOVWF  x43
4FD2:  MOVLB  0
4FD4:  CALL   1CCE
4FD8:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4FDA:  BRA    4FDE
....................          Flanco3 = 0; 
4FDC:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
4FDE:  MOVF   2B,W
4FE0:  SUBLW  05
4FE2:  BTFSS  FD8.2
4FE4:  BRA    5296
....................       EliminaRuido(); 
4FE6:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
4FEA:  MOVLW  01
4FEC:  MOVLB  1
4FEE:  MOVWF  x44
4FF0:  MOVWF  x45
4FF2:  MOVLB  0
4FF4:  CALL   1C54
....................          printf(lcd_putc,"  Zero Point Config "); 
4FF8:  MOVLW  18
4FFA:  MOVWF  FF6
4FFC:  MOVLW  0A
4FFE:  MOVWF  FF7
5000:  CALL   1D4C
....................          lcd_gotoxy(1,2); 
5004:  MOVLW  01
5006:  MOVLB  1
5008:  MOVWF  x44
500A:  MOVLW  02
500C:  MOVWF  x45
500E:  MOVLB  0
5010:  CALL   1C54
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
5014:  MOVLW  05
5016:  MOVLB  1
5018:  MOVWF  x32
501A:  MOVLB  0
501C:  CALL   21B2
5020:  MOVFF  00,132
5024:  MOVFF  01,133
5028:  MOVFF  02,134
502C:  MOVFF  03,135
5030:  MOVFF  03,149
5034:  MOVFF  02,148
5038:  MOVFF  01,147
503C:  MOVFF  00,146
5040:  MOVLW  D7
5042:  MOVLB  1
5044:  MOVWF  x4D
5046:  MOVLW  A3
5048:  MOVWF  x4C
504A:  CLRF   x4B
504C:  MOVLW  81
504E:  MOVWF  x4A
5050:  MOVLB  0
5052:  CALL   20BC
5056:  MOVFF  00,132
505A:  MOVFF  01,133
505E:  MOVFF  02,134
5062:  MOVFF  03,135
5066:  MOVLW  2E
5068:  MOVWF  FF6
506A:  MOVLW  0A
506C:  MOVWF  FF7
506E:  MOVLW  09
5070:  MOVLB  1
5072:  MOVWF  x36
5074:  MOVLB  0
5076:  CALL   23F0
507A:  MOVLW  02
507C:  MOVWF  FE9
507E:  MOVFF  135,139
5082:  MOVFF  134,138
5086:  MOVFF  133,137
508A:  MOVFF  132,136
508E:  MOVLB  1
5090:  MOVWF  x3A
5092:  MOVLB  0
5094:  CALL   2584
5098:  MOVLW  3C
509A:  MOVWF  FF6
509C:  MOVLW  0A
509E:  MOVWF  FF7
50A0:  MOVLW  07
50A2:  MOVLB  1
50A4:  MOVWF  x36
50A6:  MOVLB  0
50A8:  CALL   23F0
....................          lcd_gotoxy(1,3); 
50AC:  MOVLW  01
50AE:  MOVLB  1
50B0:  MOVWF  x44
50B2:  MOVLW  03
50B4:  MOVWF  x45
50B6:  MOVLB  0
50B8:  CALL   1C54
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
50BC:  MOVLB  1
50BE:  CLRF   x37
50C0:  MOVLB  0
50C2:  CALL   1DEC
50C6:  MOVFF  00,132
50CA:  MOVFF  01,133
50CE:  MOVFF  02,134
50D2:  MOVFF  03,135
50D6:  MOVLW  44
50D8:  MOVWF  FF6
50DA:  MOVLW  0A
50DC:  MOVWF  FF7
50DE:  MOVLW  08
50E0:  MOVLB  1
50E2:  MOVWF  x36
50E4:  MOVLB  0
50E6:  CALL   23F0
50EA:  MOVLW  01
50EC:  MOVWF  FE9
50EE:  MOVFF  135,139
50F2:  MOVFF  134,138
50F6:  MOVFF  133,137
50FA:  MOVFF  132,136
50FE:  MOVLB  1
5100:  CLRF   x3A
5102:  MOVLB  0
5104:  CALL   2584
....................          lcd_gotoxy(1,4); 
5108:  MOVLW  01
510A:  MOVLB  1
510C:  MOVWF  x44
510E:  MOVLW  04
5110:  MOVWF  x45
5112:  MOVLB  0
5114:  CALL   1C54
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
5118:  MOVLW  52
511A:  MOVWF  FF6
511C:  MOVLW  0A
511E:  MOVWF  FF7
5120:  MOVLW  07
5122:  MOVLB  1
5124:  MOVWF  x36
5126:  MOVLB  0
5128:  CALL   23F0
512C:  MOVLW  01
512E:  MOVWF  FE9
5130:  MOVFF  C9,139
5134:  MOVFF  C8,138
5138:  MOVFF  C7,137
513C:  MOVFF  C6,136
5140:  MOVLB  1
5142:  CLRF   x3A
5144:  MOVLB  0
5146:  CALL   2584
....................           
....................          Cambio=OFF; 
514A:  BCF    2A.7
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
514C:  BSF    F96.1
514E:  BTFSC  F84.1
5150:  BRA    524A
....................          delay_ms(20); 
5152:  MOVLW  14
5154:  MOVLB  1
5156:  MOVWF  x49
5158:  MOVLB  0
515A:  CALL   0CA2
....................          if(RIGHT){ 
515E:  BSF    F96.1
5160:  BTFSC  F84.1
5162:  BRA    5248
....................             if(Flanco1 == 0){ 
5164:  BTFSC  29.4
5166:  BRA    5248
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
5168:  MOVLW  01
516A:  MOVWF  2B
516C:  CLRF   47
516E:  MOVLW  02
5170:  MOVWF  2F
5172:  MOVWF  31
5174:  MOVLW  0B
5176:  MOVWF  2E
5178:  MOVLW  02
517A:  MOVLB  1
517C:  MOVWF  x32
517E:  MOVLW  FA
5180:  MOVWF  x49
5182:  MOVLB  0
5184:  CALL   0CA2
5188:  MOVLB  1
518A:  DECFSZ x32,F
518C:  BRA    517E
518E:  MOVLW  0C
5190:  MOVWF  x43
5192:  MOVLB  0
5194:  CALL   1CCE
....................                G=sensores(0); 
5198:  MOVLB  1
519A:  CLRF   x37
519C:  MOVLB  0
519E:  CALL   1DEC
51A2:  MOVFF  03,C9
51A6:  MOVFF  02,C8
51AA:  MOVFF  01,C7
51AE:  MOVFF  00,C6
....................                G16=(int16)G; 
51B2:  MOVFF  C9,149
51B6:  MOVFF  C8,148
51BA:  MOVFF  C7,147
51BE:  MOVFF  C6,146
51C2:  CALL   23B4
51C6:  MOVFF  02,5F
51CA:  MOVFF  01,5E
....................                G_l=G16; G_h=(G16>>8); 
51CE:  MOVFF  5E,38
51D2:  MOVFF  5F,39
....................                 
....................                write_eeprom(11,G_l); 
51D6:  MOVLW  0B
51D8:  MOVWF  FA9
51DA:  MOVFF  38,FA8
51DE:  BCF    FA6.6
51E0:  BCF    FA6.7
51E2:  BSF    FA6.2
51E4:  MOVF   FF2,W
51E6:  MOVWF  00
51E8:  BCF    FF2.6
51EA:  BCF    FF2.7
51EC:  MOVLB  F
51EE:  MOVLW  55
51F0:  MOVWF  FA7
51F2:  MOVLW  AA
51F4:  MOVWF  FA7
51F6:  BSF    FA6.1
51F8:  BTFSC  FA6.1
51FA:  BRA    51F8
51FC:  BCF    FA6.2
51FE:  MOVF   00,W
5200:  IORWF  FF2,F
....................                delay_ms(20); 
5202:  MOVLW  14
5204:  MOVLB  1
5206:  MOVWF  x49
5208:  MOVLB  0
520A:  CALL   0CA2
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
520E:  MOVLW  0C
5210:  MOVWF  FA9
5212:  MOVFF  39,FA8
5216:  BCF    FA6.6
5218:  BCF    FA6.7
521A:  BSF    FA6.2
521C:  MOVF   FF2,W
521E:  MOVWF  00
5220:  BCF    FF2.6
5222:  BCF    FF2.7
5224:  MOVLB  F
5226:  MOVLW  55
5228:  MOVWF  FA7
522A:  MOVLW  AA
522C:  MOVWF  FA7
522E:  BSF    FA6.1
5230:  BTFSC  FA6.1
5232:  BRA    5230
5234:  BCF    FA6.2
5236:  MOVF   00,W
5238:  IORWF  FF2,F
....................                delay_ms(20); 
523A:  MOVLW  14
523C:  MOVLB  1
523E:  MOVWF  x49
5240:  MOVLB  0
5242:  CALL   0CA2
....................                Cambio=ON; 
5246:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
5248:  BRA    524C
....................          Flanco1 = 0; 
524A:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
524C:  BSF    F96.2
524E:  BTFSC  F84.2
5250:  BRA    5294
....................          delay_ms(20); 
5252:  MOVLW  14
5254:  MOVLB  1
5256:  MOVWF  x49
5258:  MOVLB  0
525A:  CALL   0CA2
....................          if(IZQU){ 
525E:  BSF    F96.2
5260:  BTFSC  F84.2
5262:  BRA    5292
....................             if(Flanco3 == 0){ 
5264:  BTFSC  29.6
5266:  BRA    5292
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
5268:  MOVLW  01
526A:  MOVWF  2B
526C:  CLRF   47
526E:  MOVLW  02
5270:  MOVWF  2F
5272:  MOVWF  31
5274:  MOVLW  0B
5276:  MOVWF  2E
5278:  MOVLW  1E
527A:  MOVLB  1
527C:  MOVWF  x49
527E:  MOVLB  0
5280:  CALL   0CA2
5284:  MOVLW  0C
5286:  MOVLB  1
5288:  MOVWF  x43
528A:  MOVLB  0
528C:  CALL   1CCE
....................                Cambio=ON; 
5290:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
5292:  BRA    5296
....................          Flanco3 = 0; 
5294:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
5296:  MOVF   2B,W
5298:  SUBLW  06
529A:  BTFSS  FD8.2
529C:  BRA    53EE
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
529E:  BTG    2A.4
52A0:  BSF    29.4
52A2:  MOVLW  01
52A4:  MOVWF  2B
52A6:  CLRF   47
....................                        
....................             if(estadoalarma==1) 
52A8:  BTFSS  2A.4
52AA:  BRA    531C
....................             {estadoalarma=1; 
52AC:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
52AE:  MOVLW  01
52B0:  MOVLB  1
52B2:  MOVWF  x44
52B4:  MOVWF  x45
52B6:  MOVLB  0
52B8:  CALL   1C54
....................                printf(lcd_putc,"                    "); 
52BC:  MOVLW  60
52BE:  MOVWF  FF6
52C0:  MOVLW  0A
52C2:  MOVWF  FF7
52C4:  CALL   1D4C
....................                lcd_gotoxy(1,2); 
52C8:  MOVLW  01
52CA:  MOVLB  1
52CC:  MOVWF  x44
52CE:  MOVLW  02
52D0:  MOVWF  x45
52D2:  MOVLB  0
52D4:  CALL   1C54
....................                printf(lcd_putc,"        Activo      "); 
52D8:  MOVLW  76
52DA:  MOVWF  FF6
52DC:  MOVLW  0A
52DE:  MOVWF  FF7
52E0:  CALL   1D4C
....................                lcd_gotoxy(1,3); 
52E4:  MOVLW  01
52E6:  MOVLB  1
52E8:  MOVWF  x44
52EA:  MOVLW  03
52EC:  MOVWF  x45
52EE:  MOVLB  0
52F0:  CALL   1C54
....................                printf(lcd_putc,"        Alarma      "); 
52F4:  MOVLW  8C
52F6:  MOVWF  FF6
52F8:  MOVLW  0A
52FA:  MOVWF  FF7
52FC:  CALL   1D4C
....................                lcd_gotoxy(1,4); 
5300:  MOVLW  01
5302:  MOVLB  1
5304:  MOVWF  x44
5306:  MOVLW  04
5308:  MOVWF  x45
530A:  MOVLB  0
530C:  CALL   1C54
....................                printf(lcd_putc,"                    ");} 
5310:  MOVLW  A2
5312:  MOVWF  FF6
5314:  MOVLW  0A
5316:  MOVWF  FF7
5318:  CALL   1D4C
....................                 
....................             if(estadoalarma==0) 
531C:  BTFSC  2A.4
531E:  BRA    5390
....................             {estadoalarma=0; 
5320:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
5322:  MOVLW  01
5324:  MOVLB  1
5326:  MOVWF  x44
5328:  MOVWF  x45
532A:  MOVLB  0
532C:  CALL   1C54
....................                printf(lcd_putc,"                    "); 
5330:  MOVLW  B8
5332:  MOVWF  FF6
5334:  MOVLW  0A
5336:  MOVWF  FF7
5338:  CALL   1D4C
....................                lcd_gotoxy(1,2); 
533C:  MOVLW  01
533E:  MOVLB  1
5340:  MOVWF  x44
5342:  MOVLW  02
5344:  MOVWF  x45
5346:  MOVLB  0
5348:  CALL   1C54
....................                printf(lcd_putc,"      Desactivo     "); 
534C:  MOVLW  CE
534E:  MOVWF  FF6
5350:  MOVLW  0A
5352:  MOVWF  FF7
5354:  CALL   1D4C
....................                lcd_gotoxy(1,3); 
5358:  MOVLW  01
535A:  MOVLB  1
535C:  MOVWF  x44
535E:  MOVLW  03
5360:  MOVWF  x45
5362:  MOVLB  0
5364:  CALL   1C54
....................                printf(lcd_putc,"       Alarma       "); 
5368:  MOVLW  E4
536A:  MOVWF  FF6
536C:  MOVLW  0A
536E:  MOVWF  FF7
5370:  CALL   1D4C
....................                lcd_gotoxy(1,4); 
5374:  MOVLW  01
5376:  MOVLB  1
5378:  MOVWF  x44
537A:  MOVLW  04
537C:  MOVWF  x45
537E:  MOVLB  0
5380:  CALL   1C54
....................                printf(lcd_putc,"                    ");} 
5384:  MOVLW  FA
5386:  MOVWF  FF6
5388:  MOVLW  0A
538A:  MOVWF  FF7
538C:  CALL   1D4C
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
5390:  MOVLW  00
5392:  BTFSC  2A.4
5394:  MOVLW  01
5396:  MOVLB  1
5398:  MOVWF  x32
539A:  MOVLW  04
539C:  MOVWF  FA9
539E:  MOVFF  132,FA8
53A2:  BCF    FA6.6
53A4:  BCF    FA6.7
53A6:  BSF    FA6.2
53A8:  MOVF   FF2,W
53AA:  MOVWF  00
53AC:  BCF    FF2.6
53AE:  BCF    FF2.7
53B0:  MOVLB  F
53B2:  MOVLW  55
53B4:  MOVWF  FA7
53B6:  MOVLW  AA
53B8:  MOVWF  FA7
53BA:  BSF    FA6.1
53BC:  BTFSC  FA6.1
53BE:  BRA    53BC
53C0:  BCF    FA6.2
53C2:  MOVF   00,W
53C4:  IORWF  FF2,F
53C6:  MOVLW  04
53C8:  MOVLB  1
53CA:  MOVWF  x32
53CC:  MOVLW  FA
53CE:  MOVWF  x49
53D0:  MOVLB  0
53D2:  CALL   0CA2
53D6:  MOVLB  1
53D8:  DECFSZ x32,F
53DA:  BRA    53CC
53DC:  MOVLW  02
53DE:  MOVWF  2F
53E0:  MOVWF  31
53E2:  MOVLW  0C
53E4:  MOVWF  x43
53E6:  MOVLB  0
53E8:  CALL   1CCE
....................             Cambio=ON; 
53EC:  BSF    2A.7
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
53EE:  MOVF   2B,W
53F0:  SUBLW  07
53F2:  BTFSS  FD8.2
53F4:  BRA    55D2
....................       if(Vel1>20) 
53F6:  MOVF   58,W
53F8:  SUBLW  14
53FA:  BC    5400
....................          Vel1=20; 
53FC:  MOVLW  14
53FE:  MOVWF  58
....................       if(Vel1<1) 
5400:  MOVF   58,F
5402:  BNZ   5408
....................          Vel1=1; 
5404:  MOVLW  01
5406:  MOVWF  58
....................        
....................       lcd_gotoxy(1,1); 
5408:  MOVLW  01
540A:  MOVLB  1
540C:  MOVWF  x44
540E:  MOVWF  x45
5410:  MOVLB  0
5412:  CALL   1C54
....................       printf(lcd_putc,"Seleccione Velocidad"); 
5416:  MOVLW  10
5418:  MOVWF  FF6
541A:  MOVLW  0B
541C:  MOVWF  FF7
541E:  CALL   1D4C
....................       lcd_gotoxy(1,2); 
5422:  MOVLW  01
5424:  MOVLB  1
5426:  MOVWF  x44
5428:  MOVLW  02
542A:  MOVWF  x45
542C:  MOVLB  0
542E:  CALL   1C54
....................       printf(lcd_putc,"   del Ventilador   "); 
5432:  MOVLW  26
5434:  MOVWF  FF6
5436:  MOVLW  0B
5438:  MOVWF  FF7
543A:  CALL   1D4C
....................       lcd_gotoxy(1,3); 
543E:  MOVLW  01
5440:  MOVLB  1
5442:  MOVWF  x44
5444:  MOVLW  03
5446:  MOVWF  x45
5448:  MOVLB  0
544A:  CALL   1C54
....................       printf(lcd_putc,"     Vel: %02u       ",Vel1); 
544E:  MOVLW  3C
5450:  MOVWF  FF6
5452:  MOVLW  0B
5454:  MOVWF  FF7
5456:  MOVLW  0A
5458:  MOVLB  1
545A:  MOVWF  x36
545C:  MOVLB  0
545E:  CALL   23F0
5462:  MOVFF  58,132
5466:  MOVLW  01
5468:  MOVLB  1
546A:  MOVWF  x33
546C:  MOVLB  0
546E:  CALL   2444
5472:  MOVLW  4A
5474:  MOVWF  FF6
5476:  MOVLW  0B
5478:  MOVWF  FF7
547A:  MOVLW  07
547C:  MOVLB  1
547E:  MOVWF  x36
5480:  MOVLB  0
5482:  CALL   23F0
....................       lcd_gotoxy(1,4); 
5486:  MOVLW  01
5488:  MOVLB  1
548A:  MOVWF  x44
548C:  MOVLW  04
548E:  MOVWF  x45
5490:  MOVLB  0
5492:  CALL   1C54
....................       printf(lcd_putc,"                    ");       
5496:  MOVLW  52
5498:  MOVWF  FF6
549A:  MOVLW  0B
549C:  MOVWF  FF7
549E:  CALL   1D4C
....................        
....................       if(UP && Vel1<20)//Si oprime hacia arriba 
54A2:  BSF    F92.5
54A4:  BTFSC  F80.5
54A6:  BRA    54BC
54A8:  MOVF   58,W
54AA:  SUBLW  13
54AC:  BNC   54BC
....................       {   
....................          delay_ms(200);Vel1++; 
54AE:  MOVLW  C8
54B0:  MOVLB  1
54B2:  MOVWF  x49
54B4:  MOVLB  0
54B6:  CALL   0CA2
54BA:  INCF   58,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
54BC:  BSF    F96.0
54BE:  BTFSC  F84.0
54C0:  BRA    54D4
54C2:  MOVF   58,F
54C4:  BZ    54D4
....................       {   
....................          delay_ms(200);Vel1--; 
54C6:  MOVLW  C8
54C8:  MOVLB  1
54CA:  MOVWF  x49
54CC:  MOVLB  0
54CE:  CALL   0CA2
54D2:  DECF   58,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
54D4:  BSF    F96.1
54D6:  BTFSC  F84.1
54D8:  BRA    54DE
....................       {            
....................          VelMotor=Vel1; 
54DA:  MOVFF  58,EF
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
54DE:  BSF    F96.2
54E0:  BTFSC  F84.2
54E2:  BRA    55D2
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
54E4:  MOVLW  64
54E6:  MOVLB  1
54E8:  MOVWF  x49
54EA:  MOVLB  0
54EC:  CALL   0CA2
54F0:  MOVLW  02
54F2:  MOVWF  2F
54F4:  MOVWF  31
54F6:  MOVLW  0C
54F8:  MOVLB  1
54FA:  MOVWF  x43
54FC:  MOVLB  0
54FE:  CALL   1CCE
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
5502:  MOVLW  0D
5504:  MOVWF  FA9
5506:  MOVFF  58,FA8
550A:  BCF    FA6.6
550C:  BCF    FA6.7
550E:  BSF    FA6.2
5510:  MOVF   FF2,W
5512:  MOVWF  00
5514:  BCF    FF2.6
5516:  BCF    FF2.7
5518:  MOVLB  F
551A:  MOVLW  55
551C:  MOVWF  FA7
551E:  MOVLW  AA
5520:  MOVWF  FA7
5522:  BSF    FA6.1
5524:  BTFSC  FA6.1
5526:  BRA    5524
5528:  BCF    FA6.2
552A:  MOVF   00,W
552C:  IORWF  FF2,F
....................          delay_ms(20); 
552E:  MOVLW  14
5530:  MOVLB  1
5532:  MOVWF  x49
5534:  MOVLB  0
5536:  CALL   0CA2
....................          lcd_gotoxy(1,1); 
553A:  MOVLW  01
553C:  MOVLB  1
553E:  MOVWF  x44
5540:  MOVWF  x45
5542:  MOVLB  0
5544:  CALL   1C54
....................          printf(lcd_putc,"                    "); 
5548:  MOVLW  68
554A:  MOVWF  FF6
554C:  MOVLW  0B
554E:  MOVWF  FF7
5550:  CALL   1D4C
....................          lcd_gotoxy(1,2); 
5554:  MOVLW  01
5556:  MOVLB  1
5558:  MOVWF  x44
555A:  MOVLW  02
555C:  MOVWF  x45
555E:  MOVLB  0
5560:  CALL   1C54
....................          printf(lcd_putc,"     Velocidad      "); 
5564:  MOVLW  7E
5566:  MOVWF  FF6
5568:  MOVLW  0B
556A:  MOVWF  FF7
556C:  CALL   1D4C
....................          lcd_gotoxy(1,3); 
5570:  MOVLW  01
5572:  MOVLB  1
5574:  MOVWF  x44
5576:  MOVLW  03
5578:  MOVWF  x45
557A:  MOVLB  0
557C:  CALL   1C54
....................          printf(lcd_putc,"      Almacenada    "); 
5580:  MOVLW  94
5582:  MOVWF  FF6
5584:  MOVLW  0B
5586:  MOVWF  FF7
5588:  CALL   1D4C
....................          lcd_gotoxy(1,4); 
558C:  MOVLW  01
558E:  MOVLB  1
5590:  MOVWF  x44
5592:  MOVLW  04
5594:  MOVWF  x45
5596:  MOVLB  0
5598:  CALL   1C54
....................          printf(lcd_putc,"                    ");  
559C:  MOVLW  AA
559E:  MOVWF  FF6
55A0:  MOVLW  0B
55A2:  MOVWF  FF7
55A4:  CALL   1D4C
....................          delay_ms(1000); 
55A8:  MOVLW  04
55AA:  MOVLB  1
55AC:  MOVWF  x32
55AE:  MOVLW  FA
55B0:  MOVWF  x49
55B2:  MOVLB  0
55B4:  CALL   0CA2
55B8:  MOVLB  1
55BA:  DECFSZ x32,F
55BC:  BRA    55AE
....................          printf(lcd_putc,"\f"); 
55BE:  MOVLW  0C
55C0:  MOVWF  x43
55C2:  MOVLB  0
55C4:  CALL   1CCE
....................          lcd_init(); 
55C8:  CALL   0D44
....................          Menu=1; paso=0; 
55CC:  MOVLW  01
55CE:  MOVWF  2B
55D0:  CLRF   47
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
55D2:  MOVF   2B,W
55D4:  SUBLW  32
55D6:  BTFSS  FD8.2
55D8:  GOTO   5E46
....................    if(Lectura==1){ 
55DC:  BTFSS  2A.0
55DE:  BRA    5998
....................       Lectura=0; 
55E0:  BCF    2A.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
55E2:  MOVLW  08
55E4:  MOVLB  1
55E6:  MOVWF  x32
55E8:  MOVLB  0
55EA:  CALL   21B2
55EE:  MOVFF  03,C1
55F2:  MOVFF  02,C0
55F6:  MOVFF  01,BF
55FA:  MOVFF  00,BE
....................       CaidaPresion=CaidaPresion*4.02; 
55FE:  MOVFF  C1,149
5602:  MOVFF  C0,148
5606:  MOVFF  BF,147
560A:  MOVFF  BE,146
560E:  MOVLW  D7
5610:  MOVLB  1
5612:  MOVWF  x4D
5614:  MOVLW  A3
5616:  MOVWF  x4C
5618:  CLRF   x4B
561A:  MOVLW  81
561C:  MOVWF  x4A
561E:  MOVLB  0
5620:  CALL   20BC
5624:  MOVFF  03,C1
5628:  MOVFF  02,C0
562C:  MOVFF  01,BF
5630:  MOVFF  00,BE
....................       if(CaidaPresion<0.15 && estadomv==1 && tEncendido>30){ 
5634:  MOVFF  C1,149
5638:  MOVFF  C0,148
563C:  MOVFF  BF,147
5640:  MOVFF  BE,146
5644:  MOVLW  9A
5646:  MOVLB  1
5648:  MOVWF  x4D
564A:  MOVLW  99
564C:  MOVWF  x4C
564E:  MOVLW  19
5650:  MOVWF  x4B
5652:  MOVLW  7C
5654:  MOVWF  x4A
5656:  MOVLB  0
5658:  CALL   14E4
565C:  BNC   568E
565E:  BTFSS  29.2
5660:  BRA    568E
5662:  MOVF   61,F
5664:  BNZ   566C
5666:  MOVF   60,W
5668:  SUBLW  1E
566A:  BC    568E
....................          lcd_gotoxy(1,2); 
566C:  MOVLW  01
566E:  MOVLB  1
5670:  MOVWF  x44
5672:  MOVLW  02
5674:  MOVWF  x45
5676:  MOVLB  0
5678:  CALL   1C54
....................          printf(lcd_putc,"!Verifique Flujo!  ");  
567C:  MOVLW  C0
567E:  MOVWF  FF6
5680:  MOVLW  0B
5682:  MOVWF  FF7
5684:  CALL   1D4C
....................          ActivaBuzzer=1; 
5688:  MOVLW  01
568A:  MOVWF  54
....................       }else if(CaidaPresion>=1.5){ 
568C:  BRA    57CE
568E:  MOVLB  1
5690:  CLRF   x49
5692:  CLRF   x48
5694:  MOVLW  40
5696:  MOVWF  x47
5698:  MOVLW  7F
569A:  MOVWF  x46
569C:  MOVFF  C1,14D
56A0:  MOVFF  C0,14C
56A4:  MOVFF  BF,14B
56A8:  MOVFF  BE,14A
56AC:  MOVLB  0
56AE:  CALL   14E4
56B2:  BC    56B6
56B4:  BNZ   56D8
....................          lcd_gotoxy(1,2); 
56B6:  MOVLW  01
56B8:  MOVLB  1
56BA:  MOVWF  x44
56BC:  MOVLW  02
56BE:  MOVWF  x45
56C0:  MOVLB  0
56C2:  CALL   1C54
....................          printf(lcd_putc,"!Verifique Filtro!");  
56C6:  MOVLW  D4
56C8:  MOVWF  FF6
56CA:  MOVLW  0B
56CC:  MOVWF  FF7
56CE:  CALL   1D4C
....................          ActivaBuzzer=1; 
56D2:  MOVLW  01
56D4:  MOVWF  54
....................       }else{ 
56D6:  BRA    57CE
....................          lcd_gotoxy(1,2); 
56D8:  MOVLW  01
56DA:  MOVLB  1
56DC:  MOVWF  x44
56DE:  MOVLW  02
56E0:  MOVWF  x45
56E2:  MOVLB  0
56E4:  CALL   1C54
....................          printf(lcd_putc,"Filtro:"); 
56E8:  MOVLW  E8
56EA:  MOVWF  FF6
56EC:  MOVLW  0B
56EE:  MOVWF  FF7
56F0:  CALL   1D4C
....................          for(i=0;i<floor(Saturacion);i++){ 
56F4:  CLRF   40
56F6:  MOVFF  BD,135
56FA:  MOVFF  BC,134
56FE:  MOVFF  BB,133
5702:  MOVFF  BA,132
5706:  CALL   2F02
570A:  MOVFF  00,132
570E:  MOVFF  01,133
5712:  MOVFF  02,134
5716:  MOVFF  03,135
571A:  MOVLB  1
571C:  CLRF   x4B
571E:  MOVFF  40,14A
5722:  MOVLB  0
5724:  CALL   0E06
5728:  MOVFF  03,149
572C:  MOVFF  02,148
5730:  MOVFF  01,147
5734:  MOVFF  00,146
5738:  MOVFF  135,14D
573C:  MOVFF  134,14C
5740:  MOVFF  133,14B
5744:  MOVFF  132,14A
5748:  CALL   14E4
574C:  BNC   5772
....................             lcd_gotoxy(i+8,2); 
574E:  MOVLW  08
5750:  ADDWF  40,W
5752:  MOVLB  1
5754:  MOVWF  x32
5756:  MOVWF  x44
5758:  MOVLW  02
575A:  MOVWF  x45
575C:  MOVLB  0
575E:  CALL   1C54
....................             printf(lcd_putc,"Ñ"); 
5762:  MOVLW  D1
5764:  MOVLB  1
5766:  MOVWF  x43
5768:  MOVLB  0
576A:  CALL   1CCE
....................          } 
576E:  INCF   40,F
5770:  BRA    56F6
....................           
....................          for(i=floor(Saturacion);i<11;i++){ 
5772:  MOVFF  BD,135
5776:  MOVFF  BC,134
577A:  MOVFF  BB,133
577E:  MOVFF  BA,132
5782:  CALL   2F02
5786:  MOVFF  03,149
578A:  MOVFF  02,148
578E:  MOVFF  01,147
5792:  MOVFF  00,146
5796:  CALL   23B4
579A:  MOVFF  01,40
579E:  MOVF   40,W
57A0:  SUBLW  0A
57A2:  BNC   57C8
....................             lcd_gotoxy(i+8,2); 
57A4:  MOVLW  08
57A6:  ADDWF  40,W
57A8:  MOVLB  1
57AA:  MOVWF  x32
57AC:  MOVWF  x44
57AE:  MOVLW  02
57B0:  MOVWF  x45
57B2:  MOVLB  0
57B4:  CALL   1C54
....................             printf(lcd_putc," "); 
57B8:  MOVLW  20
57BA:  MOVLB  1
57BC:  MOVWF  x43
57BE:  MOVLB  0
57C0:  CALL   1CCE
....................          }    
57C4:  INCF   40,F
57C6:  BRA    579E
....................          Buzzer_off; 
57C8:  BCF    F8B.0
57CA:  BCF    F94.0
....................          ActivaBuzzer=0; 
57CC:  CLRF   54
....................       } 
....................       //lcd_gotoxy(1,1); 
....................       //printf(lcd_putc,"F:%2.2fm/s P:%3.2finWC",DownFlow,CaidaPresion);   
....................       lcd_gotoxy(1,1); 
57CE:  MOVLW  01
57D0:  MOVLB  1
57D2:  MOVWF  x44
57D4:  MOVWF  x45
57D6:  MOVLB  0
57D8:  CALL   1C54
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",CaidaPresion);   
57DC:  MOVLW  F0
57DE:  MOVWF  FF6
57E0:  MOVLW  0B
57E2:  MOVWF  FF7
57E4:  MOVLW  08
57E6:  MOVLB  1
57E8:  MOVWF  x36
57EA:  MOVLB  0
57EC:  CALL   23F0
57F0:  MOVLW  02
57F2:  MOVWF  FE9
57F4:  MOVFF  C1,139
57F8:  MOVFF  C0,138
57FC:  MOVFF  BF,137
5800:  MOVFF  BE,136
5804:  MOVLB  1
5806:  MOVWF  x3A
5808:  MOVLB  0
580A:  CALL   2584
580E:  MOVLW  FD
5810:  MOVWF  FF6
5812:  MOVLW  0B
5814:  MOVWF  FF7
5816:  MOVLW  07
5818:  MOVLB  1
581A:  MOVWF  x36
581C:  MOVLB  0
581E:  CALL   23F0
....................       //Saturacion=11*(((float)Vel1-(float)velocidadInicial)/(20.0-(float)velocidadInicial)); 
....................       Saturacion=(CaidaPresion/1.5)*11; 
5822:  MOVFF  C1,149
5826:  MOVFF  C0,148
582A:  MOVFF  BF,147
582E:  MOVFF  BE,146
5832:  MOVLB  1
5834:  CLRF   x4D
5836:  CLRF   x4C
5838:  MOVLW  40
583A:  MOVWF  x4B
583C:  MOVLW  7F
583E:  MOVWF  x4A
5840:  MOVLB  0
5842:  CALL   0E3C
5846:  MOVFF  00,132
584A:  MOVFF  01,133
584E:  MOVFF  02,134
5852:  MOVFF  03,135
5856:  MOVFF  03,149
585A:  MOVFF  02,148
585E:  MOVFF  01,147
5862:  MOVFF  00,146
5866:  MOVLB  1
5868:  CLRF   x4D
586A:  CLRF   x4C
586C:  MOVLW  30
586E:  MOVWF  x4B
5870:  MOVLW  82
5872:  MOVWF  x4A
5874:  MOVLB  0
5876:  CALL   20BC
587A:  MOVFF  03,BD
587E:  MOVFF  02,BC
5882:  MOVFF  01,BB
5886:  MOVFF  00,BA
....................        
....................       lcd_gotoxy(9,3); 
588A:  MOVLW  09
588C:  MOVLB  1
588E:  MOVWF  x44
5890:  MOVLW  03
5892:  MOVWF  x45
5894:  MOVLB  0
5896:  CALL   1C54
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
589A:  MOVLW  06
589C:  MOVWF  FF6
589E:  MOVLW  0C
58A0:  MOVWF  FF7
58A2:  MOVLW  06
58A4:  MOVLB  1
58A6:  MOVWF  x36
58A8:  MOVLB  0
58AA:  CALL   23F0
58AE:  MOVFF  3A,132
58B2:  MOVLW  03
58B4:  MOVLB  1
58B6:  MOVWF  x33
58B8:  MOVLB  0
58BA:  CALL   2444
58BE:  MOVLW  3A
58C0:  MOVLB  1
58C2:  MOVWF  x43
58C4:  MOVLB  0
58C6:  CALL   1CCE
58CA:  MOVFF  3B,132
58CE:  MOVLW  01
58D0:  MOVLB  1
58D2:  MOVWF  x33
58D4:  MOVLB  0
58D6:  CALL   2444
....................       EliminaRuido(); 
58DA:  CALL   0004
....................        
....................       if(estadomv==1){ 
58DE:  BTFSS  29.2
58E0:  BRA    5900
....................          lcd_gotoxy(1,4); 
58E2:  MOVLW  01
58E4:  MOVLB  1
58E6:  MOVWF  x44
58E8:  MOVLW  04
58EA:  MOVWF  x45
58EC:  MOVLB  0
58EE:  CALL   1C54
....................          printf(lcd_putc,"Motor:ON ");       
58F2:  MOVLW  16
58F4:  MOVWF  FF6
58F6:  MOVLW  0C
58F8:  MOVWF  FF7
58FA:  CALL   1D4C
....................       }else{ 
58FE:  BRA    591C
....................          lcd_gotoxy(1,4); 
5900:  MOVLW  01
5902:  MOVLB  1
5904:  MOVWF  x44
5906:  MOVLW  04
5908:  MOVWF  x45
590A:  MOVLB  0
590C:  CALL   1C54
....................          printf(lcd_putc,"Motor:OFF"); 
5910:  MOVLW  20
5912:  MOVWF  FF6
5914:  MOVLW  0C
5916:  MOVWF  FF7
5918:  CALL   1D4C
....................       } 
....................        
....................       if(estadofl==1){ 
591C:  BTFSS  29.1
591E:  BRA    593E
....................          lcd_gotoxy(1,3); 
5920:  MOVLW  01
5922:  MOVLB  1
5924:  MOVWF  x44
5926:  MOVLW  03
5928:  MOVWF  x45
592A:  MOVLB  0
592C:  CALL   1C54
....................          printf(lcd_putc,"Luz:ON "); 
5930:  MOVLW  2A
5932:  MOVWF  FF6
5934:  MOVLW  0C
5936:  MOVWF  FF7
5938:  CALL   1D4C
....................       }else{ 
593C:  BRA    595A
....................          lcd_gotoxy(1,3); 
593E:  MOVLW  01
5940:  MOVLB  1
5942:  MOVWF  x44
5944:  MOVLW  03
5946:  MOVWF  x45
5948:  MOVLB  0
594A:  CALL   1C54
....................          printf(lcd_putc,"Luz:OFF"); 
594E:  MOVLW  32
5950:  MOVWF  FF6
5952:  MOVLW  0C
5954:  MOVWF  FF7
5956:  CALL   1D4C
....................       }  
....................        
....................       if(estadouv==1){ 
595A:  BTFSS  29.0
595C:  BRA    597C
....................          lcd_gotoxy(13,4); 
595E:  MOVLW  0D
5960:  MOVLB  1
5962:  MOVWF  x44
5964:  MOVLW  04
5966:  MOVWF  x45
5968:  MOVLB  0
596A:  CALL   1C54
....................          printf(lcd_putc,"UV:ON "); 
596E:  MOVLW  3A
5970:  MOVWF  FF6
5972:  MOVLW  0C
5974:  MOVWF  FF7
5976:  CALL   1D4C
....................       }else{          
597A:  BRA    5998
....................          lcd_gotoxy(13,4); 
597C:  MOVLW  0D
597E:  MOVLB  1
5980:  MOVWF  x44
5982:  MOVLW  04
5984:  MOVWF  x45
5986:  MOVLB  0
5988:  CALL   1C54
....................          printf(lcd_putc,"UV:OFF"); 
598C:  MOVLW  42
598E:  MOVWF  FF6
5990:  MOVLW  0C
5992:  MOVWF  FF7
5994:  CALL   1D4C
....................       } 
....................    } 
....................      
....................    if(tiempo_cumplido==1){ 
5998:  BTFSS  29.7
599A:  BRA    5A54
....................       if(estadoalarma==1){ 
599C:  BTFSS  2A.4
599E:  BRA    5A46
....................          printf(lcd_putc,"\f"); 
59A0:  MOVLW  0C
59A2:  MOVLB  1
59A4:  MOVWF  x43
59A6:  MOVLB  0
59A8:  CALL   1CCE
....................          lcd_gotoxy(1,2); 
59AC:  MOVLW  01
59AE:  MOVLB  1
59B0:  MOVWF  x44
59B2:  MOVLW  02
59B4:  MOVWF  x45
59B6:  MOVLB  0
59B8:  CALL   1C54
....................          printf(lcd_putc,"  Temporizador  de  "); 
59BC:  MOVLW  4A
59BE:  MOVWF  FF6
59C0:  MOVLW  0C
59C2:  MOVWF  FF7
59C4:  CALL   1D4C
....................          lcd_gotoxy(1,3); 
59C8:  MOVLW  01
59CA:  MOVLB  1
59CC:  MOVWF  x44
59CE:  MOVLW  03
59D0:  MOVWF  x45
59D2:  MOVLB  0
59D4:  CALL   1C54
....................          printf(lcd_putc," Luz UV  Finalizado "); 
59D8:  MOVLW  60
59DA:  MOVWF  FF6
59DC:  MOVLW  0C
59DE:  MOVWF  FF7
59E0:  CALL   1D4C
....................          lcd_gotoxy(1,4); 
59E4:  MOVLW  01
59E6:  MOVLB  1
59E8:  MOVWF  x44
59EA:  MOVLW  04
59EC:  MOVWF  x45
59EE:  MOVLB  0
59F0:  CALL   1C54
....................          printf(lcd_putc,"                    "); 
59F4:  MOVLW  76
59F6:  MOVWF  FF6
59F8:  MOVLW  0C
59FA:  MOVWF  FF7
59FC:  CALL   1D4C
....................          lcd_gotoxy(1,1); 
5A00:  MOVLW  01
5A02:  MOVLB  1
5A04:  MOVWF  x44
5A06:  MOVWF  x45
5A08:  MOVLB  0
5A0A:  CALL   1C54
....................          printf(lcd_putc,"                    "); 
5A0E:  MOVLW  8C
5A10:  MOVWF  FF6
5A12:  MOVLW  0C
5A14:  MOVWF  FF7
5A16:  CALL   1D4C
....................          for(i=0;i<5;i++) 
5A1A:  CLRF   40
5A1C:  MOVF   40,W
5A1E:  SUBLW  04
5A20:  BNC   5A46
....................          { 
....................             Buzzer_on; 
5A22:  BSF    F8B.0
5A24:  BCF    F94.0
....................             delay_ms(200); 
5A26:  MOVLW  C8
5A28:  MOVLB  1
5A2A:  MOVWF  x49
5A2C:  MOVLB  0
5A2E:  CALL   0CA2
....................             Buzzer_off; 
5A32:  BCF    F8B.0
5A34:  BCF    F94.0
....................             delay_ms(200); 
5A36:  MOVLW  C8
5A38:  MOVLB  1
5A3A:  MOVWF  x49
5A3C:  MOVLB  0
5A3E:  CALL   0CA2
....................          } 
5A42:  INCF   40,F
5A44:  BRA    5A1C
....................       } 
....................       tiempo_cumplido=0; 
5A46:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
5A48:  MOVLW  0C
5A4A:  MOVLB  1
5A4C:  MOVWF  x43
5A4E:  MOVLB  0
5A50:  CALL   1CCE
....................    }    
....................        
....................    if(estadofl==1){ 
5A54:  BTFSS  29.1
5A56:  BRA    5A7A
....................       Luz_Blanca_on; 
5A58:  BCF    F8A.3
5A5A:  BCF    F93.3
....................       if(flagfl==0){ 
5A5C:  BTFSC  2A.2
5A5E:  BRA    5A78
....................          lcd_init();delay_ms(200);lcd_init(); 
5A60:  CALL   0D44
5A64:  MOVLW  C8
5A66:  MOVLB  1
5A68:  MOVWF  x49
5A6A:  MOVLB  0
5A6C:  CALL   0CA2
5A70:  CALL   0D44
....................          flagfl=1;Cambio=ON; 
5A74:  BSF    2A.2
5A76:  BSF    2A.7
....................       } 
....................    }else{ 
5A78:  BRA    5A9A
....................       Luz_Blanca_off; 
5A7A:  BSF    F8A.3
5A7C:  BCF    F93.3
....................       if(flagfl==1){ 
5A7E:  BTFSS  2A.2
5A80:  BRA    5A9A
....................          lcd_init();delay_ms(200);lcd_init(); 
5A82:  CALL   0D44
5A86:  MOVLW  C8
5A88:  MOVLB  1
5A8A:  MOVWF  x49
5A8C:  MOVLB  0
5A8E:  CALL   0CA2
5A92:  CALL   0D44
....................          flagfl=0;Cambio=ON; 
5A96:  BCF    2A.2
5A98:  BSF    2A.7
....................       } 
....................    } 
....................       Cambio=OFF; 
5A9A:  BCF    2A.7
....................     
....................    if(estadomv==1){  
5A9C:  BTFSS  29.2
5A9E:  BRA    5AD2
....................       if(flagmv==0){ 
5AA0:  BTFSC  xCA.0
5AA2:  BRA    5ACC
....................          VelMotor=6; 
5AA4:  MOVLW  06
5AA6:  MOVWF  xEF
....................          lcd_init();delay_ms(200);lcd_init(); 
5AA8:  CALL   0D44
5AAC:  MOVLW  C8
5AAE:  MOVLB  1
5AB0:  MOVWF  x49
5AB2:  MOVLB  0
5AB4:  CALL   0CA2
5AB8:  CALL   0D44
....................          flagmv=1;Cambio=ON;delay_ms(200); 
5ABC:  BSF    xCA.0
5ABE:  BSF    2A.7
5AC0:  MOVLW  C8
5AC2:  MOVLB  1
5AC4:  MOVWF  x49
5AC6:  MOVLB  0
5AC8:  CALL   0CA2
....................       } 
....................       VelMotor=Vel1; 
5ACC:  MOVFF  58,EF
....................    }else{ 
5AD0:  BRA    5AF4
....................       tEncendido=0; 
5AD2:  CLRF   61
5AD4:  CLRF   60
....................       VelMotor=0; 
5AD6:  CLRF   xEF
....................       if(flagmv==1){ 
5AD8:  BTFSS  xCA.0
5ADA:  BRA    5AF4
....................          lcd_init();delay_ms(200);lcd_init(); 
5ADC:  CALL   0D44
5AE0:  MOVLW  C8
5AE2:  MOVLB  1
5AE4:  MOVWF  x49
5AE6:  MOVLB  0
5AE8:  CALL   0CA2
5AEC:  CALL   0D44
....................          flagmv=0;Cambio=ON; 
5AF0:  BCF    xCA.0
5AF2:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
5AF4:  BTFSS  29.1
5AF6:  BRA    5B1A
....................    { 
....................       Luz_Blanca_on; 
5AF8:  BCF    F8A.3
5AFA:  BCF    F93.3
....................       if(flagfl==0) 
5AFC:  BTFSC  2A.2
5AFE:  BRA    5B18
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
5B00:  CALL   0D44
5B04:  MOVLW  C8
5B06:  MOVLB  1
5B08:  MOVWF  x49
5B0A:  MOVLB  0
5B0C:  CALL   0CA2
5B10:  CALL   0D44
....................          flagfl=1;Cambio=ON; 
5B14:  BSF    2A.2
5B16:  BSF    2A.7
....................       } 
....................    } 
....................    else 
5B18:  BRA    5B3A
....................    { 
....................       Luz_Blanca_off; 
5B1A:  BSF    F8A.3
5B1C:  BCF    F93.3
....................       if(flagfl==1) 
5B1E:  BTFSS  2A.2
5B20:  BRA    5B3A
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
5B22:  CALL   0D44
5B26:  MOVLW  C8
5B28:  MOVLB  1
5B2A:  MOVWF  x49
5B2C:  MOVLB  0
5B2E:  CALL   0CA2
5B32:  CALL   0D44
....................          flagfl=0;Cambio=ON; 
5B36:  BCF    2A.2
5B38:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
5B3A:  BTFSS  29.0
5B3C:  BRA    5BF4
....................       Luz_UV_on; 
5B3E:  BCF    F8A.4
5B40:  BCF    F93.4
....................       tiempo_cumplido=0;       
5B42:  BCF    29.7
....................       estadomv=0; 
5B44:  BCF    29.2
....................       VelMotor=0; 
5B46:  CLRF   xEF
....................       estadofl=0; 
5B48:  BCF    29.1
....................       Luz_Blanca_off; 
5B4A:  BSF    F8A.3
5B4C:  BCF    F93.3
....................       if(flaguv==0){ 
5B4E:  BTFSC  2A.1
5B50:  BRA    5BF2
....................          lcd_init();delay_ms(200);lcd_init(); 
5B52:  CALL   0D44
5B56:  MOVLW  C8
5B58:  MOVLB  1
5B5A:  MOVWF  x49
5B5C:  MOVLB  0
5B5E:  CALL   0CA2
5B62:  CALL   0D44
....................          flaguv=1;guardaruv=1;Cambio=ON; 
5B66:  BSF    2A.1
5B68:  MOVLW  01
5B6A:  MOVWF  43
5B6C:  BSF    2A.7
....................          write_eeprom(22,estadomv);delay_ms(20); 
5B6E:  MOVLW  00
5B70:  BTFSC  29.2
5B72:  MOVLW  01
5B74:  MOVLB  1
5B76:  MOVWF  x32
5B78:  MOVLW  16
5B7A:  MOVWF  FA9
5B7C:  MOVFF  132,FA8
5B80:  BCF    FA6.6
5B82:  BCF    FA6.7
5B84:  BSF    FA6.2
5B86:  MOVF   FF2,W
5B88:  MOVWF  00
5B8A:  BCF    FF2.6
5B8C:  BCF    FF2.7
5B8E:  MOVLB  F
5B90:  MOVLW  55
5B92:  MOVWF  FA7
5B94:  MOVLW  AA
5B96:  MOVWF  FA7
5B98:  BSF    FA6.1
5B9A:  BTFSC  FA6.1
5B9C:  BRA    5B9A
5B9E:  BCF    FA6.2
5BA0:  MOVF   00,W
5BA2:  IORWF  FF2,F
5BA4:  MOVLW  14
5BA6:  MOVLB  1
5BA8:  MOVWF  x49
5BAA:  MOVLB  0
5BAC:  CALL   0CA2
....................          write_eeprom(23,estadofl);delay_ms(20); 
5BB0:  MOVLW  00
5BB2:  BTFSC  29.1
5BB4:  MOVLW  01
5BB6:  MOVLB  1
5BB8:  MOVWF  x32
5BBA:  MOVLW  17
5BBC:  MOVWF  FA9
5BBE:  MOVFF  132,FA8
5BC2:  BCF    FA6.6
5BC4:  BCF    FA6.7
5BC6:  BSF    FA6.2
5BC8:  MOVF   FF2,W
5BCA:  MOVWF  00
5BCC:  BCF    FF2.6
5BCE:  BCF    FF2.7
5BD0:  MOVLB  F
5BD2:  MOVLW  55
5BD4:  MOVWF  FA7
5BD6:  MOVLW  AA
5BD8:  MOVWF  FA7
5BDA:  BSF    FA6.1
5BDC:  BTFSC  FA6.1
5BDE:  BRA    5BDC
5BE0:  BCF    FA6.2
5BE2:  MOVF   00,W
5BE4:  IORWF  FF2,F
5BE6:  MOVLW  14
5BE8:  MOVLB  1
5BEA:  MOVWF  x49
5BEC:  MOVLB  0
5BEE:  CALL   0CA2
....................       } 
....................    }else{ 
5BF2:  BRA    5C1A
....................       estadouv=0; 
5BF4:  BCF    29.0
....................       Luz_UV_off; 
5BF6:  BSF    F8A.4
5BF8:  BCF    F93.4
....................       if(flaguv==1){ 
5BFA:  BTFSS  2A.1
5BFC:  BRA    5C1A
....................          lcd_init();delay_ms(200);lcd_init(); 
5BFE:  CALL   0D44
5C02:  MOVLW  C8
5C04:  MOVLB  1
5C06:  MOVWF  x49
5C08:  MOVLB  0
5C0A:  CALL   0CA2
5C0E:  CALL   0D44
....................          flaguv=0;guardaruv=1;Cambio=ON; 
5C12:  BCF    2A.1
5C14:  MOVLW  01
5C16:  MOVWF  43
5C18:  BSF    2A.7
....................       } 
....................    } 
....................        
....................    if(tdown>=60){ //Si oprimio tecla abajo por 300ms o mas 
5C1A:  MOVF   xD0,F
5C1C:  BNZ   5C24
5C1E:  MOVF   xCF,W
5C20:  SUBLW  3B
5C22:  BC    5C7E
....................       if(!Flanco){ 
5C24:  BTFSC  29.3
5C26:  BRA    5C7C
....................          estadofl=!estadofl;Flanco = 1;write_eeprom(23,estadofl);delay_ms(300);Cambio=ON; 
5C28:  BTG    29.1
5C2A:  BSF    29.3
5C2C:  MOVLW  00
5C2E:  BTFSC  29.1
5C30:  MOVLW  01
5C32:  MOVLB  1
5C34:  MOVWF  x32
5C36:  MOVLW  17
5C38:  MOVWF  FA9
5C3A:  MOVFF  132,FA8
5C3E:  BCF    FA6.6
5C40:  BCF    FA6.7
5C42:  BSF    FA6.2
5C44:  MOVF   FF2,W
5C46:  MOVWF  00
5C48:  BCF    FF2.6
5C4A:  BCF    FF2.7
5C4C:  MOVLB  F
5C4E:  MOVLW  55
5C50:  MOVWF  FA7
5C52:  MOVLW  AA
5C54:  MOVWF  FA7
5C56:  BSF    FA6.1
5C58:  BTFSC  FA6.1
5C5A:  BRA    5C58
5C5C:  BCF    FA6.2
5C5E:  MOVF   00,W
5C60:  IORWF  FF2,F
5C62:  MOVLW  02
5C64:  MOVLB  1
5C66:  MOVWF  x32
5C68:  MOVLW  96
5C6A:  MOVWF  x49
5C6C:  MOVLB  0
5C6E:  CALL   0CA2
5C72:  MOVLB  1
5C74:  DECFSZ x32,F
5C76:  BRA    5C68
5C78:  BSF    2A.7
5C7A:  MOVLB  0
....................       } 
....................    }else{ 
5C7C:  BRA    5C80
....................       Flanco=0; 
5C7E:  BCF    29.3
....................    } 
....................     
....................    if(tright>=60){ //Si oprimio tecla derecha por 300ms o mas 
5C80:  MOVF   xD2,F
5C82:  BNZ   5C8A
5C84:  MOVF   xD1,W
5C86:  SUBLW  3B
5C88:  BC    5CE4
....................       if(!Flanco2){ 
5C8A:  BTFSC  29.5
5C8C:  BRA    5CE2
....................          estadomv=!estadomv;Flanco2 = 1;write_eeprom(22,estadomv);delay_ms(300);Cambio=ON; 
5C8E:  BTG    29.2
5C90:  BSF    29.5
5C92:  MOVLW  00
5C94:  BTFSC  29.2
5C96:  MOVLW  01
5C98:  MOVLB  1
5C9A:  MOVWF  x32
5C9C:  MOVLW  16
5C9E:  MOVWF  FA9
5CA0:  MOVFF  132,FA8
5CA4:  BCF    FA6.6
5CA6:  BCF    FA6.7
5CA8:  BSF    FA6.2
5CAA:  MOVF   FF2,W
5CAC:  MOVWF  00
5CAE:  BCF    FF2.6
5CB0:  BCF    FF2.7
5CB2:  MOVLB  F
5CB4:  MOVLW  55
5CB6:  MOVWF  FA7
5CB8:  MOVLW  AA
5CBA:  MOVWF  FA7
5CBC:  BSF    FA6.1
5CBE:  BTFSC  FA6.1
5CC0:  BRA    5CBE
5CC2:  BCF    FA6.2
5CC4:  MOVF   00,W
5CC6:  IORWF  FF2,F
5CC8:  MOVLW  02
5CCA:  MOVLB  1
5CCC:  MOVWF  x32
5CCE:  MOVLW  96
5CD0:  MOVWF  x49
5CD2:  MOVLB  0
5CD4:  CALL   0CA2
5CD8:  MOVLB  1
5CDA:  DECFSZ x32,F
5CDC:  BRA    5CCE
5CDE:  BSF    2A.7
5CE0:  MOVLB  0
....................       } 
....................    }else{ 
5CE2:  BRA    5CE6
....................       Flanco2=0; 
5CE4:  BCF    29.5
....................    } 
....................     
....................    if(tleft>=60){ //Si oprimio tecla izquierda por 300ms o mas 
5CE6:  MOVF   xD4,F
5CE8:  BNZ   5CF0
5CEA:  MOVF   xD3,W
5CEC:  SUBLW  3B
5CEE:  BC    5D08
....................       if(!Flanco3){ 
5CF0:  BTFSC  29.6
5CF2:  BRA    5D06
....................          delay_ms(150);  
5CF4:  MOVLW  96
5CF6:  MOVLB  1
5CF8:  MOVWF  x49
5CFA:  MOVLB  0
5CFC:  CALL   0CA2
....................          //estadouv=!estadouv; 
....................          estadouv=0; 
5D00:  BCF    29.0
....................          Cambio=ON; 
5D02:  BSF    2A.7
....................          Flanco3=1; 
5D04:  BSF    29.6
....................       } 
....................    }else{ 
5D06:  BRA    5D0A
....................       Flanco3=0; 
5D08:  BCF    29.6
....................    } 
....................     
....................    if(tup>=60){ //Si oprimio tecla arriba por 300ms o mas 
5D0A:  MOVF   xCE,F
5D0C:  BNZ   5D14
5D0E:  MOVF   xCD,W
5D10:  SUBLW  3B
5D12:  BC    5D5A
....................       if(!Flanco1){ 
5D14:  BTFSC  29.4
5D16:  BRA    5D58
....................          delay_ms(200); 
5D18:  MOVLW  C8
5D1A:  MOVLB  1
5D1C:  MOVWF  x49
5D1E:  MOVLB  0
5D20:  CALL   0CA2
....................          printf(lcd_putc,"\f"); 
5D24:  MOVLW  0C
5D26:  MOVLB  1
5D28:  MOVWF  x43
5D2A:  MOVLB  0
5D2C:  CALL   1CCE
....................          delay_ms(300); 
5D30:  MOVLW  02
5D32:  MOVLB  1
5D34:  MOVWF  x32
5D36:  MOVLW  96
5D38:  MOVWF  x49
5D3A:  MOVLB  0
5D3C:  CALL   0CA2
5D40:  MOVLB  1
5D42:  DECFSZ x32,F
5D44:  BRA    5D36
....................          Menu=1;  
5D46:  MOVLW  01
5D48:  MOVWF  2B
....................          paso=0; 
5D4A:  CLRF   47
....................          Flecha=2; 
5D4C:  MOVLW  02
5D4E:  MOVWF  2F
....................          Flecha2=2; 
5D50:  MOVWF  31
....................          Cambio=ON; 
5D52:  BSF    2A.7
....................          Flanco1=1; 
5D54:  BSF    29.4
5D56:  MOVLB  0
....................       } 
....................    }else{ 
5D58:  BRA    5D5C
....................       Flanco1=0; 
5D5A:  BCF    29.4
....................    } 
....................        
....................    if(guardaruv==1) 
5D5C:  DECFSZ 43,W
5D5E:  BRA    5E2E
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
5D60:  MOVLW  07
5D62:  MOVWF  FA9
5D64:  MOVFF  34,FA8
5D68:  BCF    FA6.6
5D6A:  BCF    FA6.7
5D6C:  BSF    FA6.2
5D6E:  MOVF   FF2,W
5D70:  MOVWF  00
5D72:  BCF    FF2.6
5D74:  BCF    FF2.7
5D76:  MOVLB  F
5D78:  MOVLW  55
5D7A:  MOVWF  FA7
5D7C:  MOVLW  AA
5D7E:  MOVWF  FA7
5D80:  BSF    FA6.1
5D82:  BTFSC  FA6.1
5D84:  BRA    5D82
5D86:  BCF    FA6.2
5D88:  MOVF   00,W
5D8A:  IORWF  FF2,F
5D8C:  MOVLW  08
5D8E:  MOVWF  FA9
5D90:  MOVFF  35,FA8
5D94:  BCF    FA6.6
5D96:  BCF    FA6.7
5D98:  BSF    FA6.2
5D9A:  MOVF   FF2,W
5D9C:  MOVWF  00
5D9E:  BCF    FF2.6
5DA0:  BCF    FF2.7
5DA2:  MOVLW  55
5DA4:  MOVWF  FA7
5DA6:  MOVLW  AA
5DA8:  MOVWF  FA7
5DAA:  BSF    FA6.1
5DAC:  BTFSC  FA6.1
5DAE:  BRA    5DAC
5DB0:  BCF    FA6.2
5DB2:  MOVF   00,W
5DB4:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
5DB6:  MOVFF  5C,36
....................       horasH=make8(horas,1); 
5DBA:  MOVFF  5D,37
....................       write_eeprom(9,horasL); 
5DBE:  MOVLW  09
5DC0:  MOVWF  FA9
5DC2:  MOVFF  36,FA8
5DC6:  BCF    FA6.6
5DC8:  BCF    FA6.7
5DCA:  BSF    FA6.2
5DCC:  MOVFF  FF2,00
5DD0:  BCF    FF2.6
5DD2:  BCF    FF2.7
5DD4:  MOVLW  55
5DD6:  MOVWF  FA7
5DD8:  MOVLW  AA
5DDA:  MOVWF  FA7
5DDC:  BSF    FA6.1
5DDE:  BTFSC  FA6.1
5DE0:  BRA    5DDE
5DE2:  BCF    FA6.2
5DE4:  MOVF   00,W
5DE6:  IORWF  FF2,F
....................       delay_ms(20); 
5DE8:  MOVLW  14
5DEA:  MOVLB  1
5DEC:  MOVWF  x49
5DEE:  MOVLB  0
5DF0:  CALL   0CA2
....................       write_eeprom(10,horasH); 
5DF4:  MOVLW  0A
5DF6:  MOVWF  FA9
5DF8:  MOVFF  37,FA8
5DFC:  BCF    FA6.6
5DFE:  BCF    FA6.7
5E00:  BSF    FA6.2
5E02:  MOVF   FF2,W
5E04:  MOVWF  00
5E06:  BCF    FF2.6
5E08:  BCF    FF2.7
5E0A:  MOVLB  F
5E0C:  MOVLW  55
5E0E:  MOVWF  FA7
5E10:  MOVLW  AA
5E12:  MOVWF  FA7
5E14:  BSF    FA6.1
5E16:  BTFSC  FA6.1
5E18:  BRA    5E16
5E1A:  BCF    FA6.2
5E1C:  MOVF   00,W
5E1E:  IORWF  FF2,F
....................       delay_ms(20); 
5E20:  MOVLW  14
5E22:  MOVLB  1
5E24:  MOVWF  x49
5E26:  MOVLB  0
5E28:  CALL   0CA2
....................       guardaruv=0; 
5E2C:  CLRF   43
....................    } 
....................     
....................    if(segundos>=60) 
5E2E:  MOVF   34,W
5E30:  SUBLW  3B
5E32:  BC    5E38
....................    { 
....................       segundos=0;minutos++; 
5E34:  CLRF   34
5E36:  INCF   35,F
....................    } 
....................    if(minutos==60) 
5E38:  MOVF   35,W
5E3A:  SUBLW  3C
5E3C:  BNZ   5E46
....................    { 
....................       minutos=0;horas++; 
5E3E:  CLRF   35
5E40:  INCF   5C,F
5E42:  BTFSC  FD8.2
5E44:  INCF   5D,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
5E46:  MOVF   42,W
5E48:  SUBLW  3B
5E4A:  BC    5E6C
....................    { 
....................       printf(lcd_putc,"\f"); 
5E4C:  MOVLW  0C
5E4E:  MOVLB  1
5E50:  MOVWF  x43
5E52:  MOVLB  0
5E54:  CALL   1CCE
....................       lcd_init(); 
5E58:  CALL   0D44
....................       delay_ms(200); 
5E5C:  MOVLW  C8
5E5E:  MOVLB  1
5E60:  MOVWF  x49
5E62:  MOVLB  0
5E64:  CALL   0CA2
....................       tiemporeset=0; 
5E68:  CLRF   42
....................       Cambio=ON; 
5E6A:  BSF    2A.7
....................    }    
....................    } 
5E6C:  GOTO   3B58
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
5E70:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1A19   NOBROWNOUT NOWDT BORV20 NOPUT WDT8192
   Word  3: 0100   NOPBADEN CCP2C1 NOLPT1OSC NOMCLR
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
