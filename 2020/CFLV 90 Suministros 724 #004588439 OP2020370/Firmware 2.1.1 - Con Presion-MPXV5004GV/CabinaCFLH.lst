CCS PCH C Compiler, Version 4.104, 5967               07-dic.-20 07:09

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Vertical\2020\CFLV 90 Suministros 724 #0045884XX OP2020370\Firmware 2.1.1 - Con Presion-MPXV5004GV\CabinaCFLH.lst

               ROM used: 19916 bytes (61%)
                         Largest free fragment is 12850
               RAM used: 228 (15%) at main() level
                         265 (17%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   29EA
*
0008:  GOTO   00A6
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   0426
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
00A6:  MOVWF  16
00A8:  MOVFF  FD8,17
00AC:  MOVFF  FE0,18
00B0:  MOVLB  0
00B2:  MOVFF  FE9,1E
00B6:  MOVFF  FEA,19
00BA:  MOVFF  FE1,1A
00BE:  MOVFF  FE2,1B
00C2:  MOVFF  FD9,1C
00C6:  MOVFF  FDA,1D
00CA:  MOVFF  FF3,24
00CE:  MOVFF  FF4,25
00D2:  MOVFF  FFA,26
00D6:  MOVFF  00,20
00DA:  MOVFF  01,21
00DE:  MOVFF  02,22
00E2:  MOVFF  03,23
00E6:  BTFSS  FF2.5
00E8:  GOTO   00F2
00EC:  BTFSC  FF2.2
00EE:  GOTO   03F4
00F2:  BTFSS  FF2.4
00F4:  GOTO   00FE
00F8:  BTFSC  FF2.1
00FA:  GOTO   0248
00FE:  MOVFF  20,00
0102:  MOVFF  21,01
0106:  MOVFF  22,02
010A:  MOVFF  23,03
010E:  MOVFF  1E,FE9
0112:  MOVFF  19,FEA
0116:  BSF    19.7
0118:  MOVFF  1A,FE1
011C:  MOVFF  1B,FE2
0120:  MOVFF  1C,FD9
0124:  MOVFF  1D,FDA
0128:  MOVFF  24,FF3
012C:  MOVFF  25,FF4
0130:  MOVFF  26,FFA
0134:  MOVF   16,W
0136:  MOVFF  18,FE0
013A:  MOVFF  17,FD8
013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4520.h> 
.................... //////// Standard Header file for the PIC18F4520 device //////////////// 
.................... #device PIC18F4520 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOBROWNOUT,NOPUT,NOCPD,NOSTVREN,NOWRT,NOWRTD,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOLPT1OSC,NOXINST,NOICPRT// PLL1 para 4 MHz 
.................... //#use delay(clock=20000000) 
.................... #fuses HS,WDT8192,NOPROTECT,NOLVP,NODEBUG,NOSTVREN,NOPUT,NOCPD,NOWRT,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOXINST,NOLPT1OSC,NOMCLR 
.................... #use delay(clock=20000000) 
*
0BEC:  CLRF   FEA
0BEE:  MOVLW  F7
0BF0:  MOVWF  FE9
0BF2:  MOVF   FEF,W
0BF4:  BZ    0C10
0BF6:  MOVLW  06
0BF8:  MOVWF  01
0BFA:  CLRF   00
0BFC:  DECFSZ 00,F
0BFE:  BRA    0BFC
0C00:  DECFSZ 01,F
0C02:  BRA    0BFA
0C04:  MOVLW  7B
0C06:  MOVWF  00
0C08:  DECFSZ 00,F
0C0A:  BRA    0C08
0C0C:  DECFSZ FEF,F
0C0E:  BRA    0BF6
0C10:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
269A:  BCF    xF3.0
....................    y = x; 
269C:  MOVFF  E7,EC
26A0:  MOVFF  E6,EB
26A4:  MOVFF  E5,EA
26A8:  MOVFF  E4,E9
....................  
....................    if (x < 0) 
26AC:  MOVFF  E7,F7
26B0:  MOVFF  E6,F6
26B4:  MOVFF  E5,F5
26B8:  MOVFF  E4,F4
26BC:  CLRF   xFB
26BE:  CLRF   xFA
26C0:  CLRF   xF9
26C2:  CLRF   xF8
26C4:  CALL   10F2
26C8:  BNC   26D2
....................    { 
....................       s = 1; 
26CA:  BSF    xF3.0
....................       y = -y; 
26CC:  MOVF   xEA,W
26CE:  XORLW  80
26D0:  MOVWF  xEA
....................    } 
....................  
....................    if (y <= 32768.0) 
26D2:  MOVFF  EC,F7
26D6:  MOVFF  EB,F6
26DA:  MOVFF  EA,F5
26DE:  MOVFF  E9,F4
26E2:  CLRF   xFB
26E4:  CLRF   xFA
26E6:  CLRF   xF9
26E8:  MOVLW  8E
26EA:  MOVWF  xF8
26EC:  CALL   10F2
26F0:  BC    26F4
26F2:  BNZ   2724
....................   res = (float32)(unsigned int16)y; 
26F4:  MOVFF  EC,F7
26F8:  MOVFF  EB,F6
26FC:  MOVFF  EA,F5
2700:  MOVFF  E9,F4
2704:  RCALL  2662
2706:  MOVFF  02,F9
270A:  MOVFF  01,F8
270E:  CALL   0D1E
2712:  MOVFF  03,F0
2716:  MOVFF  02,EF
271A:  MOVFF  01,EE
271E:  MOVFF  00,ED
....................  
....................  else if (y < 10000000.0) 
2722:  BRA    28AE
2724:  MOVFF  EC,F7
2728:  MOVFF  EB,F6
272C:  MOVFF  EA,F5
2730:  MOVFF  E9,F4
2734:  MOVLW  80
2736:  MOVWF  xFB
2738:  MOVLW  96
273A:  MOVWF  xFA
273C:  MOVLW  18
273E:  MOVWF  xF9
2740:  MOVLW  96
2742:  MOVWF  xF8
2744:  CALL   10F2
2748:  BTFSS  FD8.0
274A:  BRA    289E
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
274C:  MOVFF  EC,F7
2750:  MOVFF  EB,F6
2754:  MOVFF  EA,F5
2758:  MOVFF  E9,F4
275C:  CLRF   xFB
275E:  CLRF   xFA
2760:  CLRF   xF9
2762:  MOVLW  8E
2764:  MOVWF  xF8
2766:  CALL   1D0C
276A:  MOVFF  03,F7
276E:  MOVFF  02,F6
2772:  MOVFF  01,F5
2776:  MOVFF  00,F4
277A:  RCALL  2662
277C:  MOVFF  02,F2
2780:  MOVFF  01,F1
....................       y = 32768.0*(y/32768.0 - (float32)l); 
2784:  MOVFF  EC,F7
2788:  MOVFF  EB,F6
278C:  MOVFF  EA,F5
2790:  MOVFF  E9,F4
2794:  CLRF   xFB
2796:  CLRF   xFA
2798:  CLRF   xF9
279A:  MOVLW  8E
279C:  MOVWF  xF8
279E:  CALL   1D0C
27A2:  MOVFF  00,F4
27A6:  MOVFF  01,F5
27AA:  MOVFF  02,F6
27AE:  MOVFF  03,F7
27B2:  MOVFF  F2,F9
27B6:  MOVFF  F1,F8
27BA:  CALL   0D1E
27BE:  BSF    FD8.1
27C0:  MOVFF  F7,FB
27C4:  MOVFF  F6,FA
27C8:  MOVFF  F5,F9
27CC:  MOVFF  F4,F8
27D0:  MOVFF  03,FF
27D4:  MOVFF  02,FE
27D8:  MOVFF  01,FD
27DC:  MOVFF  00,FC
27E0:  CALL   1EB4
27E4:  CLRF   xF7
27E6:  CLRF   xF6
27E8:  CLRF   xF5
27EA:  MOVLW  8E
27EC:  MOVWF  xF4
27EE:  MOVFF  03,FB
27F2:  MOVFF  02,FA
27F6:  MOVFF  01,F9
27FA:  MOVFF  00,F8
27FE:  RCALL  2136
2800:  MOVFF  03,EC
2804:  MOVFF  02,EB
2808:  MOVFF  01,EA
280C:  MOVFF  00,E9
....................   res = 32768.0*(float32)l; 
2810:  MOVFF  F2,F9
2814:  MOVFF  F1,F8
2818:  CALL   0D1E
281C:  CLRF   xF7
281E:  CLRF   xF6
2820:  CLRF   xF5
2822:  MOVLW  8E
2824:  MOVWF  xF4
2826:  MOVFF  03,FB
282A:  MOVFF  02,FA
282E:  MOVFF  01,F9
2832:  MOVFF  00,F8
2836:  RCALL  2136
2838:  MOVFF  03,F0
283C:  MOVFF  02,EF
2840:  MOVFF  01,EE
2844:  MOVFF  00,ED
....................   res += (float32)(unsigned int16)y; 
2848:  MOVFF  EC,F7
284C:  MOVFF  EB,F6
2850:  MOVFF  EA,F5
2854:  MOVFF  E9,F4
2858:  RCALL  2662
285A:  MOVFF  02,F9
285E:  MOVFF  01,F8
2862:  CALL   0D1E
2866:  BCF    FD8.1
2868:  MOVFF  F0,FB
286C:  MOVFF  EF,FA
2870:  MOVFF  EE,F9
2874:  MOVFF  ED,F8
2878:  MOVFF  03,FF
287C:  MOVFF  02,FE
2880:  MOVFF  01,FD
2884:  MOVFF  00,FC
2888:  CALL   1EB4
288C:  MOVFF  03,F0
2890:  MOVFF  02,EF
2894:  MOVFF  01,EE
2898:  MOVFF  00,ED
....................  } 
....................  
....................  else 
289C:  BRA    28AE
....................   res = y; 
289E:  MOVFF  EC,F0
28A2:  MOVFF  EB,EF
28A6:  MOVFF  EA,EE
28AA:  MOVFF  E9,ED
....................  
....................  y = y - (float32)(unsigned int16)y; 
28AE:  MOVFF  EC,F7
28B2:  MOVFF  EB,F6
28B6:  MOVFF  EA,F5
28BA:  MOVFF  E9,F4
28BE:  RCALL  2662
28C0:  MOVFF  02,F9
28C4:  MOVFF  01,F8
28C8:  CALL   0D1E
28CC:  BSF    FD8.1
28CE:  MOVFF  EC,FB
28D2:  MOVFF  EB,FA
28D6:  MOVFF  EA,F9
28DA:  MOVFF  E9,F8
28DE:  MOVFF  03,FF
28E2:  MOVFF  02,FE
28E6:  MOVFF  01,FD
28EA:  MOVFF  00,FC
28EE:  CALL   1EB4
28F2:  MOVFF  03,EC
28F6:  MOVFF  02,EB
28FA:  MOVFF  01,EA
28FE:  MOVFF  00,E9
....................  
....................  if (s) 
2902:  BTFSS  xF3.0
2904:  BRA    290C
....................   res = -res; 
2906:  MOVF   xEE,W
2908:  XORLW  80
290A:  MOVWF  xEE
....................  
....................  if (y != 0) 
290C:  MOVFF  EC,F7
2910:  MOVFF  EB,F6
2914:  MOVFF  EA,F5
2918:  MOVFF  E9,F4
291C:  CLRF   xFB
291E:  CLRF   xFA
2920:  CLRF   xF9
2922:  CLRF   xF8
2924:  CALL   10F2
2928:  BZ    299A
....................  { 
....................   if (s == 1 && n == 0) 
292A:  BTFSS  xF3.0
292C:  BRA    2962
292E:  MOVF   xE8,F
2930:  BNZ   2962
....................    res -= 1.0; 
2932:  BSF    FD8.1
2934:  MOVFF  F0,FB
2938:  MOVFF  EF,FA
293C:  MOVFF  EE,F9
2940:  MOVFF  ED,F8
2944:  CLRF   xFF
2946:  CLRF   xFE
2948:  CLRF   xFD
294A:  MOVLW  7F
294C:  MOVWF  xFC
294E:  CALL   1EB4
2952:  MOVFF  03,F0
2956:  MOVFF  02,EF
295A:  MOVFF  01,EE
295E:  MOVFF  00,ED
....................  
....................   if (s == 0 && n == 1) 
2962:  BTFSC  xF3.0
2964:  BRA    299A
2966:  DECFSZ xE8,W
2968:  BRA    299A
....................    res += 1.0; 
296A:  BCF    FD8.1
296C:  MOVFF  F0,FB
2970:  MOVFF  EF,FA
2974:  MOVFF  EE,F9
2978:  MOVFF  ED,F8
297C:  CLRF   xFF
297E:  CLRF   xFE
2980:  CLRF   xFD
2982:  MOVLW  7F
2984:  MOVWF  xFC
2986:  CALL   1EB4
298A:  MOVFF  03,F0
298E:  MOVFF  02,EF
2992:  MOVFF  01,EE
2996:  MOVFF  00,ED
....................  } 
....................  if (x == 0) 
299A:  MOVFF  E7,F7
299E:  MOVFF  E6,F6
29A2:  MOVFF  E5,F5
29A6:  MOVFF  E4,F4
29AA:  CLRF   xFB
29AC:  CLRF   xFA
29AE:  CLRF   xF9
29B0:  CLRF   xF8
29B2:  CALL   10F2
29B6:  BNZ   29C0
....................     res = 0; 
29B8:  CLRF   xF0
29BA:  CLRF   xEF
29BC:  CLRF   xEE
29BE:  CLRF   xED
....................  
....................  return (res); 
29C0:  MOVFF  ED,00
29C4:  MOVFF  EE,01
29C8:  MOVFF  EF,02
29CC:  MOVFF  F0,03
.................... } 
29D0:  GOTO   29E8 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
29D4:  MOVFF  E3,E7
29D8:  MOVFF  E2,E6
29DC:  MOVFF  E1,E5
29E0:  MOVFF  E0,E4
29E4:  CLRF   xE8
29E6:  BRA    269A
.................... } 
29E8:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0C12:  SWAPF  xF8,W
0C14:  ANDLW  F0
0C16:  MOVWF  00
0C18:  MOVLW  0F
0C1A:  ANDWF  F83,W
0C1C:  IORWF  00,W
0C1E:  MOVWF  F83
....................       delay_cycles(30);//30 
0C20:  MOVLW  09
0C22:  MOVWF  00
0C24:  DECFSZ 00,F
0C26:  BRA    0C24
0C28:  BRA    0C2A
....................       lcd.enable = 1; 
0C2A:  BSF    F83.3
....................       delay_us(55);//55 
0C2C:  MOVLW  5B
0C2E:  MOVWF  00
0C30:  DECFSZ 00,F
0C32:  BRA    0C30
0C34:  NOP   
....................       lcd.enable = 0; 
0C36:  BCF    F83.3
.................... } 
0C38:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0C3A:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0C3C:  MOVLW  01
0C3E:  MOVWF  xF7
0C40:  RCALL  0BEC
....................       lcd.rs = address; 
0C42:  BTFSS  xF5.0
0C44:  BCF    F83.1
0C46:  BTFSC  xF5.0
0C48:  BSF    F83.1
....................       delay_cycles(30);//30 
0C4A:  MOVLW  09
0C4C:  MOVWF  00
0C4E:  DECFSZ 00,F
0C50:  BRA    0C4E
0C52:  BRA    0C54
....................       lcd.rw = 0; 
0C54:  BCF    F83.2
....................       delay_cycles(30);//30 
0C56:  MOVLW  09
0C58:  MOVWF  00
0C5A:  DECFSZ 00,F
0C5C:  BRA    0C5A
0C5E:  BRA    0C60
....................       lcd.enable = 0; 
0C60:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
0C62:  SWAPF  xF6,W
0C64:  MOVWF  xF7
0C66:  MOVLW  0F
0C68:  ANDWF  xF7,F
0C6A:  MOVFF  F7,F8
0C6E:  RCALL  0C12
....................       lcd_send_nibble(n & 0xf); 
0C70:  MOVF   xF6,W
0C72:  ANDLW  0F
0C74:  MOVWF  xF7
0C76:  MOVWF  xF8
0C78:  RCALL  0C12
.................... } 
0C7A:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0C7C:  MOVLW  00
0C7E:  MOVWF  F95
....................     lcd.rs = 0; 
0C80:  BCF    F83.1
....................     lcd.rw = 0; 
0C82:  BCF    F83.2
....................     lcd.enable = 0; 
0C84:  BCF    F83.3
....................     delay_ms(15); 
0C86:  MOVLW  0F
0C88:  MOVWF  xF7
0C8A:  RCALL  0BEC
....................     for(i=1;i<=3;++i) { 
0C8C:  MOVLW  01
0C8E:  MOVWF  xE0
0C90:  MOVF   xE0,W
0C92:  SUBLW  03
0C94:  BNC   0CA6
....................        lcd_send_nibble(3); 
0C96:  MOVLW  03
0C98:  MOVWF  xF8
0C9A:  RCALL  0C12
....................        delay_ms(5); 
0C9C:  MOVLW  05
0C9E:  MOVWF  xF7
0CA0:  RCALL  0BEC
....................     } 
0CA2:  INCF   xE0,F
0CA4:  BRA    0C90
....................     lcd_send_nibble(2); 
0CA6:  MOVLW  02
0CA8:  MOVWF  xF8
0CAA:  RCALL  0C12
....................     for(i=0;i<=3;++i) 
0CAC:  CLRF   xE0
0CAE:  MOVF   xE0,W
0CB0:  SUBLW  03
0CB2:  BNC   0CD8
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0CB4:  CLRF   03
0CB6:  MOVF   xE0,W
0CB8:  MOVFF  FF2,E1
0CBC:  BCF    FF2.6
0CBE:  BCF    FF2.7
0CC0:  CALL   0140
0CC4:  BTFSC  xE1.6
0CC6:  BSF    FF2.6
0CC8:  BTFSC  xE1.7
0CCA:  BSF    FF2.7
0CCC:  MOVWF  xE1
0CCE:  CLRF   xF5
0CD0:  MOVWF  xF6
0CD2:  RCALL  0C3A
0CD4:  INCF   xE0,F
0CD6:  BRA    0CAE
.................... } 
0CD8:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
16D4:  MOVLW  01
16D6:  SUBWF  xF3,W
16D8:  ADDLW  FC
16DA:  BC    16FA
16DC:  ADDLW  04
16DE:  GOTO   170C
....................      case 1 : address=0x80;break; 
16E2:  MOVLW  80
16E4:  MOVWF  xF4
16E6:  BRA    16FA
....................      case 2 : address=0xc0;break; 
16E8:  MOVLW  C0
16EA:  MOVWF  xF4
16EC:  BRA    16FA
....................      case 3 : address=0x94;break; 
16EE:  MOVLW  94
16F0:  MOVWF  xF4
16F2:  BRA    16FA
....................      case 4 : address=0xd4;break; 
16F4:  MOVLW  D4
16F6:  MOVWF  xF4
16F8:  BRA    16FA
....................    } 
....................    address+=x-1; 
16FA:  MOVLW  01
16FC:  SUBWF  xF2,W
16FE:  ADDWF  xF4,F
....................    lcd_send_byte(0,address); 
1700:  CLRF   xF5
1702:  MOVFF  F4,F6
1706:  CALL   0C3A
.................... } 
170A:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
173E:  MOVF   xF1,W
1740:  SUBLW  F1
1742:  BNZ   1748
....................    { 
....................       c=238; 
1744:  MOVLW  EE
1746:  MOVWF  xF1
....................    } 
....................    if(c=='Ñ') 
1748:  MOVF   xF1,W
174A:  SUBLW  D1
174C:  BNZ   1752
....................    { 
....................       c=255; 
174E:  MOVLW  FF
1750:  MOVWF  xF1
....................    } 
....................     
....................    switch (c) { 
1752:  MOVF   xF1,W
1754:  XORLW  0C
1756:  BZ    1762
1758:  XORLW  06
175A:  BZ    177A
175C:  XORLW  02
175E:  BZ    1788
1760:  BRA    1794
....................      case '\f'   : lcd_send_byte(0,1); 
1762:  CLRF   xF5
1764:  MOVLW  01
1766:  MOVWF  xF6
1768:  CALL   0C3A
....................                    lcdline=1; 
176C:  MOVLW  01
176E:  MOVWF  28
....................                    delay_ms(2); 
1770:  MOVLW  02
1772:  MOVWF  xF7
1774:  CALL   0BEC
....................                                            break; 
1778:  BRA    17A2
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
177A:  INCF   28,F
177C:  MOVLW  01
177E:  MOVWF  xF2
1780:  MOVFF  28,F3
1784:  RCALL  16D4
1786:  BRA    17A2
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
1788:  CLRF   xF5
178A:  MOVLW  10
178C:  MOVWF  xF6
178E:  CALL   0C3A
1792:  BRA    17A2
....................      default     : lcd_send_byte(1,c);     break; 
1794:  MOVLW  01
1796:  MOVWF  xF5
1798:  MOVFF  F1,F6
179C:  CALL   0C3A
17A0:  BRA    17A2
....................    } 
.................... } 
17A2:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,motor=0,luz=0,velocidadInicial=10; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,tup=0,tdown=0,tright=0,tleft=0,segundosTrabajo=0,horasTrabajo=0; 
.................... short Cruce=OFF; 
....................  
.................... int8 VelMotor=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
1BFE:  DECFSZ xE1,W
1C00:  BRA    1C16
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1C02:  MOVLW  02
1C04:  MOVWF  xF2
1C06:  MOVFF  E2,F3
1C0A:  RCALL  16D4
1C0C:  MOVLW  64
1C0E:  MOVWF  FF6
1C10:  MOVLW  01
1C12:  MOVWF  FF7
1C14:  RCALL  17A4
....................    if(x==2) 
1C16:  MOVF   xE1,W
1C18:  SUBLW  02
1C1A:  BNZ   1C30
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1C1C:  MOVLW  02
1C1E:  MOVWF  xF2
1C20:  MOVFF  E2,F3
1C24:  RCALL  16D4
1C26:  MOVLW  78
1C28:  MOVWF  FF6
1C2A:  MOVLW  01
1C2C:  MOVWF  FF7
1C2E:  RCALL  17A4
....................    if(x==3) 
1C30:  MOVF   xE1,W
1C32:  SUBLW  03
1C34:  BNZ   1C4A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1C36:  MOVLW  02
1C38:  MOVWF  xF2
1C3A:  MOVFF  E2,F3
1C3E:  RCALL  16D4
1C40:  MOVLW  8C
1C42:  MOVWF  FF6
1C44:  MOVLW  01
1C46:  MOVWF  FF7
1C48:  RCALL  17A4
....................    if(x==4) 
1C4A:  MOVF   xE1,W
1C4C:  SUBLW  04
1C4E:  BNZ   1C64
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
1C50:  MOVLW  02
1C52:  MOVWF  xF2
1C54:  MOVFF  E2,F3
1C58:  RCALL  16D4
1C5A:  MOVLW  A0
1C5C:  MOVWF  FF6
1C5E:  MOVLW  01
1C60:  MOVWF  FF7
1C62:  RCALL  17A4
....................     
....................    if(x==5) 
1C64:  MOVF   xE1,W
1C66:  SUBLW  05
1C68:  BNZ   1C9A
....................    {if(estadoalarma==0) 
1C6A:  BTFSC  2A.4
1C6C:  BRA    1C82
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1C6E:  MOVLW  02
1C70:  MOVWF  xF2
1C72:  MOVFF  E2,F3
1C76:  RCALL  16D4
1C78:  MOVLW  B4
1C7A:  MOVWF  FF6
1C7C:  MOVLW  01
1C7E:  MOVWF  FF7
1C80:  RCALL  17A4
....................    if(estadoalarma==1) 
1C82:  BTFSS  2A.4
1C84:  BRA    1C9A
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1C86:  MOVLW  02
1C88:  MOVWF  xF2
1C8A:  MOVFF  E2,F3
1C8E:  RCALL  16D4
1C90:  MOVLW  C8
1C92:  MOVWF  FF6
1C94:  MOVLW  01
1C96:  MOVWF  FF7
1C98:  RCALL  17A4
....................    } 
....................     
....................    if(x==6) 
1C9A:  MOVF   xE1,W
1C9C:  SUBLW  06
1C9E:  BNZ   1CB4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
1CA0:  MOVLW  02
1CA2:  MOVWF  xF2
1CA4:  MOVFF  E2,F3
1CA8:  RCALL  16D4
1CAA:  MOVLW  DC
1CAC:  MOVWF  FF6
1CAE:  MOVLW  01
1CB0:  MOVWF  FF7
1CB2:  RCALL  17A4
.................... } 
1CB4:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
1CB6:  RLCF   xF1,W
1CB8:  MOVWF  00
1CBA:  RLCF   00,F
1CBC:  MOVLW  FC
1CBE:  ANDWF  00,F
1CC0:  MOVFF  00,01
1CC4:  MOVF   FC2,W
1CC6:  ANDLW  C3
1CC8:  IORWF  00,W
1CCA:  MOVWF  FC2
1CCC:  MOVLW  0A
1CCE:  MOVWF  xF7
1CD0:  CALL   0BEC
1CD4:  BSF    FC2.1
1CD6:  BTFSC  FC2.1
1CD8:  BRA    1CD6
1CDA:  MOVFF  FC4,03
1CDE:  MOVFF  FC3,F8
1CE2:  MOVFF  FC4,F9
1CE6:  CALL   0D1E
1CEA:  MOVFF  03,F5
1CEE:  MOVFF  02,F4
1CF2:  MOVFF  01,F3
1CF6:  MOVFF  00,F2
1CFA:  MOVFF  F2,00
1CFE:  MOVFF  F3,01
1D02:  MOVFF  F4,02
1D06:  MOVFF  F5,03
.................... } 
1D0A:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
2228:  CLRF   xE4
222A:  CLRF   xE3
222C:  CLRF   xE2
222E:  CLRF   xE1
2230:  CLRF   xE8
2232:  CLRF   xE7
2234:  CLRF   xE6
2236:  CLRF   xE5
2238:  CLRF   xEC
223A:  CLRF   xEB
223C:  CLRF   xEA
223E:  CLRF   xE9
2240:  CLRF   xF0
2242:  CLRF   xEF
2244:  CLRF   xEE
2246:  CLRF   xED
....................    float promediopresion=0.0; 
....................    float VG=0.0,VS=0.0,G2=0.0; 
....................     
....................    V1=sensores(0);  
2248:  CLRF   xF1
224A:  RCALL  1CB6
224C:  MOVFF  03,B1
2250:  MOVFF  02,B0
2254:  MOVFF  01,AF
2258:  MOVFF  00,AE
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
225C:  MOVFF  B1,F7
2260:  MOVFF  B0,F6
2264:  MOVFF  AF,F5
2268:  MOVFF  AE,F4
226C:  MOVFF  C1,FB
2270:  MOVFF  C0,FA
2274:  MOVFF  BF,F9
2278:  MOVFF  BE,F8
227C:  RCALL  1D0C
227E:  MOVFF  00,F1
2282:  MOVFF  01,F2
2286:  MOVFF  02,F3
228A:  MOVFF  03,F4
228E:  BSF    FD8.1
2290:  MOVFF  03,FB
2294:  MOVFF  02,FA
2298:  MOVFF  01,F9
229C:  MOVFF  00,F8
22A0:  CLRF   xFF
22A2:  CLRF   xFE
22A4:  CLRF   xFD
22A6:  MOVLW  7F
22A8:  MOVWF  xFC
22AA:  RCALL  1EB4
22AC:  MOVFF  03,B5
22B0:  MOVFF  02,B4
22B4:  MOVFF  01,B3
22B8:  MOVFF  00,B2
....................    //VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    //G2=G; 
....................    //VG = (G2*5.0)/1023.0; 
....................    //Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
....................     
....................    if(Presion>0) 
22BC:  CLRF   xF7
22BE:  CLRF   xF6
22C0:  CLRF   xF5
22C2:  CLRF   xF4
22C4:  MOVFF  B5,FB
22C8:  MOVFF  B4,FA
22CC:  MOVFF  B3,F9
22D0:  MOVFF  B2,F8
22D4:  CALL   10F2
22D8:  BNC   22E2
....................       Presion=0.0; 
22DA:  CLRF   xB5
22DC:  CLRF   xB4
22DE:  CLRF   xB3
22E0:  CLRF   xB2
....................    
....................    if(Presion<0.0){ 
22E2:  MOVFF  B5,F7
22E6:  MOVFF  B4,F6
22EA:  MOVFF  B3,F5
22EE:  MOVFF  B2,F4
22F2:  CLRF   xFB
22F4:  CLRF   xFA
22F6:  CLRF   xF9
22F8:  CLRF   xF8
22FA:  CALL   10F2
22FE:  BNC   232E
....................       Presion=Presion*-1; 
2300:  MOVFF  B5,F7
2304:  MOVFF  B4,F6
2308:  MOVFF  B3,F5
230C:  MOVFF  B2,F4
2310:  CLRF   xFB
2312:  CLRF   xFA
2314:  MOVLW  80
2316:  MOVWF  xF9
2318:  MOVLW  7F
231A:  MOVWF  xF8
231C:  RCALL  2136
231E:  MOVFF  03,B5
2322:  MOVFF  02,B4
2326:  MOVFF  01,B3
232A:  MOVFF  00,B2
....................    } 
....................  
....................    if(r>media-1) 
232E:  MOVLW  01
2330:  SUBWF  xE0,W
2332:  SUBWF  3E,W
2334:  BZ    233A
2336:  BNC   233A
....................    {r=0;} 
2338:  CLRF   3E
....................    PromPresion[r]=Presion;r++; 
233A:  MOVF   3E,W
233C:  MULLW  04
233E:  MOVF   FF3,W
2340:  CLRF   03
2342:  ADDLW  5E
2344:  MOVWF  FE9
2346:  MOVLW  00
2348:  ADDWFC 03,W
234A:  MOVWF  FEA
234C:  MOVFF  B2,FEF
2350:  MOVFF  B3,FEC
2354:  MOVFF  B4,FEC
2358:  MOVFF  B5,FEC
235C:  INCF   3E,F
....................           
....................    for(q=0;q<=(media-1);q++) 
235E:  CLRF   3F
2360:  MOVLW  01
2362:  SUBWF  xE0,W
2364:  SUBWF  3F,W
2366:  BZ    236A
2368:  BC    23D4
....................    { 
....................       promediopresion+=PromPresion[q]; 
236A:  MOVF   3F,W
236C:  MULLW  04
236E:  MOVF   FF3,W
2370:  CLRF   03
2372:  ADDLW  5E
2374:  MOVWF  FE9
2376:  MOVLW  00
2378:  ADDWFC 03,W
237A:  MOVWF  FEA
237C:  MOVFF  FEF,00
2380:  MOVFF  FEC,01
2384:  MOVFF  FEC,02
2388:  MOVFF  FEC,03
238C:  MOVFF  FEA,F2
2390:  MOVFF  FE9,F1
2394:  BCF    FD8.1
2396:  MOVFF  E4,FB
239A:  MOVFF  E3,FA
239E:  MOVFF  E2,F9
23A2:  MOVFF  E1,F8
23A6:  MOVFF  03,FF
23AA:  MOVFF  02,FE
23AE:  MOVFF  01,FD
23B2:  MOVFF  00,FC
23B6:  RCALL  1EB4
23B8:  MOVFF  F2,FEA
23BC:  MOVFF  F1,FE9
23C0:  MOVFF  03,E4
23C4:  MOVFF  02,E3
23C8:  MOVFF  01,E2
23CC:  MOVFF  00,E1
....................    }  
23D0:  INCF   3F,F
23D2:  BRA    2360
....................    promediopresion=promediopresion/media;    
23D4:  CLRF   xF9
23D6:  MOVFF  E0,F8
23DA:  CALL   0D1E
23DE:  MOVFF  E4,F7
23E2:  MOVFF  E3,F6
23E6:  MOVFF  E2,F5
23EA:  MOVFF  E1,F4
23EE:  MOVFF  03,FB
23F2:  MOVFF  02,FA
23F6:  MOVFF  01,F9
23FA:  MOVFF  00,F8
23FE:  RCALL  1D0C
2400:  MOVFF  03,E4
2404:  MOVFF  02,E3
2408:  MOVFF  01,E2
240C:  MOVFF  00,E1
....................     
....................    return promediopresion; 
2410:  MOVFF  E1,00
2414:  MOVFF  E2,01
2418:  MOVFF  E3,02
241C:  MOVFF  E4,03
.................... } 
2420:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0CDA:  MOVLW  C8
0CDC:  MOVWF  xF7
0CDE:  RCALL  0BEC
....................    lcd_init(); 
0CE0:  RCALL  0C7C
....................    set_tris_a(0XFF); 
0CE2:  MOVLW  FF
0CE4:  MOVWF  F92
....................    set_tris_e(0XFF); 
0CE6:  BSF    F96.1
0CE8:  BSF    F96.1
0CEA:  BSF    F96.1
0CEC:  BSF    F96.1
....................    enable_interrupts(global); 
0CEE:  MOVLW  C0
0CF0:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
0CF2:  BSF    FF2.4
0CF4:  BSF    FF1.6
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
0CF6:  MOVLW  C7
0CF8:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0CFA:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0CFC:  MOVLW  85
0CFE:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0D00:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0D02:  MOVF   FC1,W
0D04:  ANDLW  C0
0D06:  IORLW  0E
0D08:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0D0A:  MOVF   FC0,W
0D0C:  ANDLW  C0
0D0E:  IORLW  02
0D10:  MOVWF  FC0
0D12:  BSF    FC0.7
0D14:  BSF    FC2.0
....................    enable_interrupts(global); 
0D16:  MOVLW  C0
0D18:  IORWF  FF2,F
.................... } 
0D1A:  GOTO   2B9C (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
17C4:  MOVLW  01
17C6:  MOVWF  xF2
17C8:  MOVWF  xF3
17CA:  RCALL  16D4
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
17CC:  MOVLW  F0
17CE:  MOVWF  FF6
17D0:  MOVLW  01
17D2:  MOVWF  FF7
17D4:  RCALL  17A4
....................    lcd_gotoxy(1,2); 
17D6:  MOVLW  01
17D8:  MOVWF  xF2
17DA:  MOVLW  02
17DC:  MOVWF  xF3
17DE:  RCALL  16D4
....................    printf(lcd_putc,"      VERTICAL      "); 
17E0:  MOVLW  06
17E2:  MOVWF  FF6
17E4:  MOVLW  02
17E6:  MOVWF  FF7
17E8:  RCALL  17A4
....................    lcd_gotoxy(1,3); 
17EA:  MOVLW  01
17EC:  MOVWF  xF2
17EE:  MOVLW  03
17F0:  MOVWF  xF3
17F2:  RCALL  16D4
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
17F4:  MOVLW  1C
17F6:  MOVWF  FF6
17F8:  MOVLW  02
17FA:  MOVWF  FF7
17FC:  RCALL  17A4
....................    lcd_gotoxy(1,4); 
17FE:  MOVLW  01
1800:  MOVWF  xF2
1802:  MOVLW  04
1804:  MOVWF  xF3
1806:  RCALL  16D4
....................    printf(lcd_putc,"     REF:JPCV36     "); 
1808:  MOVLW  32
180A:  MOVWF  FF6
180C:  MOVLW  02
180E:  MOVWF  FF7
1810:  RCALL  17A4
....................    delay_ms(2000); 
1812:  MOVLW  08
1814:  MOVWF  xE0
1816:  MOVLW  FA
1818:  MOVWF  xF7
181A:  CALL   0BEC
181E:  DECFSZ xE0,F
1820:  BRA    1816
....................    printf(lcd_putc,"\f"); 
1822:  MOVLW  0C
1824:  MOVWF  xF1
1826:  RCALL  173E
.................... } 
1828:  GOTO   2BAE (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0D54:  MOVFF  FF2,E0
0D58:  BCF    FF2.6
0D5A:  BCF    FF2.7
0D5C:  CLRF   FA9
0D5E:  BCF    FA6.6
0D60:  BCF    FA6.7
0D62:  BSF    FA6.0
0D64:  MOVF   FA8,W
0D66:  BTFSC  xE0.6
0D68:  BSF    FF2.6
0D6A:  BTFSC  xE0.7
0D6C:  BSF    FF2.7
0D6E:  MOVWF  4F
....................    delay_ms(20);  
0D70:  MOVLW  14
0D72:  MOVWF  xF7
0D74:  RCALL  0BEC
....................    contrasena[1]=read_eeprom(1); 
0D76:  MOVFF  FF2,E0
0D7A:  BCF    FF2.6
0D7C:  BCF    FF2.7
0D7E:  MOVLW  01
0D80:  MOVWF  FA9
0D82:  BCF    FA6.6
0D84:  BCF    FA6.7
0D86:  BSF    FA6.0
0D88:  MOVF   FA8,W
0D8A:  BTFSC  xE0.6
0D8C:  BSF    FF2.6
0D8E:  BTFSC  xE0.7
0D90:  BSF    FF2.7
0D92:  MOVWF  50
....................    delay_ms(20); 
0D94:  MOVLW  14
0D96:  MOVWF  xF7
0D98:  RCALL  0BEC
....................    contrasena[2]=read_eeprom(2); 
0D9A:  MOVFF  FF2,E0
0D9E:  BCF    FF2.6
0DA0:  BCF    FF2.7
0DA2:  MOVLW  02
0DA4:  MOVWF  FA9
0DA6:  BCF    FA6.6
0DA8:  BCF    FA6.7
0DAA:  BSF    FA6.0
0DAC:  MOVF   FA8,W
0DAE:  BTFSC  xE0.6
0DB0:  BSF    FF2.6
0DB2:  BTFSC  xE0.7
0DB4:  BSF    FF2.7
0DB6:  MOVWF  51
....................    delay_ms(20);  
0DB8:  MOVLW  14
0DBA:  MOVWF  xF7
0DBC:  RCALL  0BEC
....................    contrasena[3]=read_eeprom(3); 
0DBE:  MOVFF  FF2,E0
0DC2:  BCF    FF2.6
0DC4:  BCF    FF2.7
0DC6:  MOVLW  03
0DC8:  MOVWF  FA9
0DCA:  BCF    FA6.6
0DCC:  BCF    FA6.7
0DCE:  BSF    FA6.0
0DD0:  MOVF   FA8,W
0DD2:  BTFSC  xE0.6
0DD4:  BSF    FF2.6
0DD6:  BTFSC  xE0.7
0DD8:  BSF    FF2.7
0DDA:  MOVWF  52
....................    delay_ms(20); 
0DDC:  MOVLW  14
0DDE:  MOVWF  xF7
0DE0:  RCALL  0BEC
....................    estadoalarma=read_eeprom(4); 
0DE2:  MOVFF  FF2,E0
0DE6:  BCF    FF2.6
0DE8:  BCF    FF2.7
0DEA:  MOVLW  04
0DEC:  MOVWF  FA9
0DEE:  BCF    FA6.6
0DF0:  BCF    FA6.7
0DF2:  BSF    FA6.0
0DF4:  MOVF   FA8,W
0DF6:  BTFSC  xE0.6
0DF8:  BSF    FF2.6
0DFA:  BTFSC  xE0.7
0DFC:  BSF    FF2.7
0DFE:  MOVWF  01
0E00:  BCF    2A.4
0E02:  BTFSC  01.0
0E04:  BSF    2A.4
....................    delay_ms(20); 
0E06:  MOVLW  14
0E08:  MOVWF  xF7
0E0A:  RCALL  0BEC
....................    tempo_minutos=read_eeprom(5); 
0E0C:  MOVFF  FF2,E0
0E10:  BCF    FF2.6
0E12:  BCF    FF2.7
0E14:  MOVLW  05
0E16:  MOVWF  FA9
0E18:  BCF    FA6.6
0E1A:  BCF    FA6.7
0E1C:  BSF    FA6.0
0E1E:  MOVF   FA8,W
0E20:  BTFSC  xE0.6
0E22:  BSF    FF2.6
0E24:  BTFSC  xE0.7
0E26:  BSF    FF2.7
0E28:  MOVWF  3A
....................    delay_ms(20); 
0E2A:  MOVLW  14
0E2C:  MOVWF  xF7
0E2E:  RCALL  0BEC
....................    tempo_segundos=read_eeprom(6); 
0E30:  MOVFF  FF2,E0
0E34:  BCF    FF2.6
0E36:  BCF    FF2.7
0E38:  MOVLW  06
0E3A:  MOVWF  FA9
0E3C:  BCF    FA6.6
0E3E:  BCF    FA6.7
0E40:  BSF    FA6.0
0E42:  MOVF   FA8,W
0E44:  BTFSC  xE0.6
0E46:  BSF    FF2.6
0E48:  BTFSC  xE0.7
0E4A:  BSF    FF2.7
0E4C:  MOVWF  3B
....................    delay_ms(20); 
0E4E:  MOVLW  14
0E50:  MOVWF  xF7
0E52:  RCALL  0BEC
....................    segundos=read_eeprom(7); 
0E54:  MOVFF  FF2,E0
0E58:  BCF    FF2.6
0E5A:  BCF    FF2.7
0E5C:  MOVLW  07
0E5E:  MOVWF  FA9
0E60:  BCF    FA6.6
0E62:  BCF    FA6.7
0E64:  BSF    FA6.0
0E66:  MOVF   FA8,W
0E68:  BTFSC  xE0.6
0E6A:  BSF    FF2.6
0E6C:  BTFSC  xE0.7
0E6E:  BSF    FF2.7
0E70:  MOVWF  34
....................    delay_ms(20); 
0E72:  MOVLW  14
0E74:  MOVWF  xF7
0E76:  RCALL  0BEC
....................    minutos=read_eeprom(8); 
0E78:  MOVFF  FF2,E0
0E7C:  BCF    FF2.6
0E7E:  BCF    FF2.7
0E80:  MOVLW  08
0E82:  MOVWF  FA9
0E84:  BCF    FA6.6
0E86:  BCF    FA6.7
0E88:  BSF    FA6.0
0E8A:  MOVF   FA8,W
0E8C:  BTFSC  xE0.6
0E8E:  BSF    FF2.6
0E90:  BTFSC  xE0.7
0E92:  BSF    FF2.7
0E94:  MOVWF  35
....................    delay_ms(20); 
0E96:  MOVLW  14
0E98:  MOVWF  xF7
0E9A:  RCALL  0BEC
....................    horasL=read_eeprom(9); 
0E9C:  MOVFF  FF2,E0
0EA0:  BCF    FF2.6
0EA2:  BCF    FF2.7
0EA4:  MOVLW  09
0EA6:  MOVWF  FA9
0EA8:  BCF    FA6.6
0EAA:  BCF    FA6.7
0EAC:  BSF    FA6.0
0EAE:  MOVF   FA8,W
0EB0:  BTFSC  xE0.6
0EB2:  BSF    FF2.6
0EB4:  BTFSC  xE0.7
0EB6:  BSF    FF2.7
0EB8:  MOVWF  36
....................    delay_ms(20); 
0EBA:  MOVLW  14
0EBC:  MOVWF  xF7
0EBE:  RCALL  0BEC
....................    horasH=read_eeprom(10); 
0EC0:  MOVFF  FF2,E0
0EC4:  BCF    FF2.6
0EC6:  BCF    FF2.7
0EC8:  MOVLW  0A
0ECA:  MOVWF  FA9
0ECC:  BCF    FA6.6
0ECE:  BCF    FA6.7
0ED0:  BSF    FA6.0
0ED2:  MOVF   FA8,W
0ED4:  BTFSC  xE0.6
0ED6:  BSF    FF2.6
0ED8:  BTFSC  xE0.7
0EDA:  BSF    FF2.7
0EDC:  MOVWF  37
....................    delay_ms(20); 
0EDE:  MOVLW  14
0EE0:  MOVWF  xF7
0EE2:  RCALL  0BEC
....................    G_l=read_eeprom(11); 
0EE4:  MOVFF  FF2,E0
0EE8:  BCF    FF2.6
0EEA:  BCF    FF2.7
0EEC:  MOVLW  0B
0EEE:  MOVWF  FA9
0EF0:  BCF    FA6.6
0EF2:  BCF    FA6.7
0EF4:  BSF    FA6.0
0EF6:  MOVF   FA8,W
0EF8:  BTFSC  xE0.6
0EFA:  BSF    FF2.6
0EFC:  BTFSC  xE0.7
0EFE:  BSF    FF2.7
0F00:  MOVWF  38
....................    delay_ms(20); 
0F02:  MOVLW  14
0F04:  MOVWF  xF7
0F06:  RCALL  0BEC
....................    G_h=read_eeprom(12); 
0F08:  MOVFF  FF2,E0
0F0C:  BCF    FF2.6
0F0E:  BCF    FF2.7
0F10:  MOVLW  0C
0F12:  MOVWF  FA9
0F14:  BCF    FA6.6
0F16:  BCF    FA6.7
0F18:  BSF    FA6.0
0F1A:  MOVF   FA8,W
0F1C:  BTFSC  xE0.6
0F1E:  BSF    FF2.6
0F20:  BTFSC  xE0.7
0F22:  BSF    FF2.7
0F24:  MOVWF  39
....................    delay_ms(20); 
0F26:  MOVLW  14
0F28:  MOVWF  xF7
0F2A:  RCALL  0BEC
....................    Vel1=read_eeprom(13); 
0F2C:  MOVFF  FF2,E0
0F30:  BCF    FF2.6
0F32:  BCF    FF2.7
0F34:  MOVLW  0D
0F36:  MOVWF  FA9
0F38:  BCF    FA6.6
0F3A:  BCF    FA6.7
0F3C:  BSF    FA6.0
0F3E:  MOVF   FA8,W
0F40:  BTFSC  xE0.6
0F42:  BSF    FF2.6
0F44:  BTFSC  xE0.7
0F46:  BSF    FF2.7
0F48:  MOVWF  57
....................    delay_ms(20); 
0F4A:  MOVLW  14
0F4C:  MOVWF  xF7
0F4E:  RCALL  0BEC
....................    codigoSubir=read_eeprom(15); 
0F50:  MOVFF  FF2,E0
0F54:  BCF    FF2.6
0F56:  BCF    FF2.7
0F58:  MOVLW  0F
0F5A:  MOVWF  FA9
0F5C:  BCF    FA6.6
0F5E:  BCF    FA6.7
0F60:  BSF    FA6.0
0F62:  MOVF   FA8,W
0F64:  BTFSC  xE0.6
0F66:  BSF    FF2.6
0F68:  BTFSC  xE0.7
0F6A:  BSF    FF2.7
0F6C:  MOVWF  54
....................    delay_ms(20); 
0F6E:  MOVLW  14
0F70:  MOVWF  xF7
0F72:  RCALL  0BEC
....................    codigoBajar=read_eeprom(16); 
0F74:  MOVFF  FF2,E0
0F78:  BCF    FF2.6
0F7A:  BCF    FF2.7
0F7C:  MOVLW  10
0F7E:  MOVWF  FA9
0F80:  BCF    FA6.6
0F82:  BCF    FA6.7
0F84:  BSF    FA6.0
0F86:  MOVF   FA8,W
0F88:  BTFSC  xE0.6
0F8A:  BSF    FF2.6
0F8C:  BTFSC  xE0.7
0F8E:  BSF    FF2.7
0F90:  MOVWF  55
....................    delay_ms(20); 
0F92:  MOVLW  14
0F94:  MOVWF  xF7
0F96:  RCALL  0BEC
....................    codigoDetener=read_eeprom(17); 
0F98:  MOVFF  FF2,E0
0F9C:  BCF    FF2.6
0F9E:  BCF    FF2.7
0FA0:  MOVLW  11
0FA2:  MOVWF  FA9
0FA4:  BCF    FA6.6
0FA6:  BCF    FA6.7
0FA8:  BSF    FA6.0
0FAA:  MOVF   FA8,W
0FAC:  BTFSC  xE0.6
0FAE:  BSF    FF2.6
0FB0:  BTFSC  xE0.7
0FB2:  BSF    FF2.7
0FB4:  MOVWF  56
....................    delay_ms(20); 
0FB6:  MOVLW  14
0FB8:  MOVWF  xF7
0FBA:  RCALL  0BEC
....................    G16=make16(G_h,G_l); 
0FBC:  MOVFF  39,5D
0FC0:  MOVFF  38,5C
....................    G=G16; 
0FC4:  MOVFF  5D,F9
0FC8:  MOVFF  5C,F8
0FCC:  RCALL  0D1E
0FCE:  MOVFF  03,C1
0FD2:  MOVFF  02,C0
0FD6:  MOVFF  01,BF
0FDA:  MOVFF  00,BE
....................    horasTrabajo=make16(read_eeprom(19),read_eeprom(18)); 
0FDE:  MOVFF  FF2,E0
0FE2:  BCF    FF2.6
0FE4:  BCF    FF2.7
0FE6:  MOVLW  13
0FE8:  MOVWF  FA9
0FEA:  BCF    FA6.6
0FEC:  BCF    FA6.7
0FEE:  BSF    FA6.0
0FF0:  MOVF   FA8,W
0FF2:  BTFSC  xE0.6
0FF4:  BSF    FF2.6
0FF6:  BTFSC  xE0.7
0FF8:  BSF    FF2.7
0FFA:  MOVWF  xE1
0FFC:  MOVFF  FF2,E2
1000:  BCF    FF2.6
1002:  BCF    FF2.7
1004:  MOVLW  12
1006:  MOVWF  FA9
1008:  BCF    FA6.6
100A:  BCF    FA6.7
100C:  BSF    FA6.0
100E:  MOVF   FA8,W
1010:  BTFSC  xE2.6
1012:  BSF    FF2.6
1014:  BTFSC  xE2.7
1016:  BSF    FF2.7
1018:  MOVWF  xE3
101A:  MOVFF  E1,D0
101E:  MOVFF  E3,CF
....................    delay_ms(20); 
1022:  MOVLW  14
1024:  MOVWF  xF7
1026:  RCALL  0BEC
....................    segundosTrabajo=make16(read_eeprom(21),read_eeprom(20)); 
1028:  MOVFF  FF2,E0
102C:  BCF    FF2.6
102E:  BCF    FF2.7
1030:  MOVLW  15
1032:  MOVWF  FA9
1034:  BCF    FA6.6
1036:  BCF    FA6.7
1038:  BSF    FA6.0
103A:  MOVF   FA8,W
103C:  BTFSC  xE0.6
103E:  BSF    FF2.6
1040:  BTFSC  xE0.7
1042:  BSF    FF2.7
1044:  MOVWF  xE1
1046:  MOVFF  FF2,E2
104A:  BCF    FF2.6
104C:  BCF    FF2.7
104E:  MOVLW  14
1050:  MOVWF  FA9
1052:  BCF    FA6.6
1054:  BCF    FA6.7
1056:  BSF    FA6.0
1058:  MOVF   FA8,W
105A:  BTFSC  xE2.6
105C:  BSF    FF2.6
105E:  BTFSC  xE2.7
1060:  BSF    FF2.7
1062:  MOVWF  xE3
1064:  MOVFF  E1,CE
1068:  MOVFF  E3,CD
....................    delay_ms(20); 
106C:  MOVLW  14
106E:  MOVWF  xF7
1070:  RCALL  0BEC
....................    motor=read_eeprom(22); 
1072:  MOVFF  FF2,E0
1076:  BCF    FF2.6
1078:  BCF    FF2.7
107A:  MOVLW  16
107C:  MOVWF  FA9
107E:  BCF    FA6.6
1080:  BCF    FA6.7
1082:  BSF    FA6.0
1084:  MOVF   FA8,W
1086:  BTFSC  xE0.6
1088:  BSF    FF2.6
108A:  BTFSC  xE0.7
108C:  BSF    FF2.7
108E:  MOVWF  44
....................    delay_ms(20); 
1090:  MOVLW  14
1092:  MOVWF  xF7
1094:  RCALL  0BEC
....................    luz=read_eeprom(23); 
1096:  MOVFF  FF2,E0
109A:  BCF    FF2.6
109C:  BCF    FF2.7
109E:  MOVLW  17
10A0:  MOVWF  FA9
10A2:  BCF    FA6.6
10A4:  BCF    FA6.7
10A6:  BSF    FA6.0
10A8:  MOVF   FA8,W
10AA:  BTFSC  xE0.6
10AC:  BSF    FF2.6
10AE:  BTFSC  xE0.7
10B0:  BSF    FF2.7
10B2:  MOVWF  45
....................    delay_ms(20); 
10B4:  MOVLW  14
10B6:  MOVWF  xF7
10B8:  RCALL  0BEC
....................    velocidadInicial=read_eeprom(24); 
10BA:  MOVFF  FF2,E0
10BE:  BCF    FF2.6
10C0:  BCF    FF2.7
10C2:  MOVLW  18
10C4:  MOVWF  FA9
10C6:  BCF    FA6.6
10C8:  BCF    FA6.7
10CA:  BSF    FA6.0
10CC:  MOVF   FA8,W
10CE:  BTFSC  xE0.6
10D0:  BSF    FF2.6
10D2:  BTFSC  xE0.7
10D4:  BSF    FF2.7
10D6:  MOVWF  46
....................    delay_ms(20); 
10D8:  MOVLW  14
10DA:  MOVWF  xF7
10DC:  RCALL  0BEC
....................    horas=make16(horasH,horasL); 
10DE:  MOVFF  37,5B
10E2:  MOVFF  36,5A
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
10E6:  MOVFF  3A,3C
10EA:  MOVFF  3B,3D
.................... } 
10EE:  GOTO   2BA0 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
1168:  BTFSC  4F.7
116A:  BRA    1172
116C:  MOVF   4F,W
116E:  SUBLW  09
1170:  BNC   1178
1172:  BTFSC  4F.7
1174:  BRA    1178
1176:  BRA    11AA
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
1178:  CLRF   4F
117A:  CLRF   FA9
117C:  CLRF   FA8
117E:  BCF    FA6.6
1180:  BCF    FA6.7
1182:  BSF    FA6.2
1184:  MOVF   FF2,W
1186:  MOVWF  00
1188:  BCF    FF2.6
118A:  BCF    FF2.7
118C:  MOVLB  F
118E:  MOVLW  55
1190:  MOVWF  FA7
1192:  MOVLW  AA
1194:  MOVWF  FA7
1196:  BSF    FA6.1
1198:  BTFSC  FA6.1
119A:  BRA    1198
119C:  BCF    FA6.2
119E:  MOVF   00,W
11A0:  IORWF  FF2,F
11A2:  MOVLW  14
11A4:  MOVLB  0
11A6:  MOVWF  xF7
11A8:  RCALL  0BEC
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
11AA:  BTFSC  50.7
11AC:  BRA    11B4
11AE:  MOVF   50,W
11B0:  SUBLW  09
11B2:  BNC   11BA
11B4:  BTFSC  50.7
11B6:  BRA    11BA
11B8:  BRA    11EE
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
11BA:  CLRF   50
11BC:  MOVLW  01
11BE:  MOVWF  FA9
11C0:  CLRF   FA8
11C2:  BCF    FA6.6
11C4:  BCF    FA6.7
11C6:  BSF    FA6.2
11C8:  MOVF   FF2,W
11CA:  MOVWF  00
11CC:  BCF    FF2.6
11CE:  BCF    FF2.7
11D0:  MOVLB  F
11D2:  MOVLW  55
11D4:  MOVWF  FA7
11D6:  MOVLW  AA
11D8:  MOVWF  FA7
11DA:  BSF    FA6.1
11DC:  BTFSC  FA6.1
11DE:  BRA    11DC
11E0:  BCF    FA6.2
11E2:  MOVF   00,W
11E4:  IORWF  FF2,F
11E6:  MOVLW  14
11E8:  MOVLB  0
11EA:  MOVWF  xF7
11EC:  RCALL  0BEC
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
11EE:  BTFSC  51.7
11F0:  BRA    11F8
11F2:  MOVF   51,W
11F4:  SUBLW  09
11F6:  BNC   11FE
11F8:  BTFSC  51.7
11FA:  BRA    11FE
11FC:  BRA    1232
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
11FE:  CLRF   51
1200:  MOVLW  02
1202:  MOVWF  FA9
1204:  CLRF   FA8
1206:  BCF    FA6.6
1208:  BCF    FA6.7
120A:  BSF    FA6.2
120C:  MOVF   FF2,W
120E:  MOVWF  00
1210:  BCF    FF2.6
1212:  BCF    FF2.7
1214:  MOVLB  F
1216:  MOVLW  55
1218:  MOVWF  FA7
121A:  MOVLW  AA
121C:  MOVWF  FA7
121E:  BSF    FA6.1
1220:  BTFSC  FA6.1
1222:  BRA    1220
1224:  BCF    FA6.2
1226:  MOVF   00,W
1228:  IORWF  FF2,F
122A:  MOVLW  14
122C:  MOVLB  0
122E:  MOVWF  xF7
1230:  RCALL  0BEC
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
1232:  BTFSC  52.7
1234:  BRA    123C
1236:  MOVF   52,W
1238:  SUBLW  09
123A:  BNC   1242
123C:  BTFSC  52.7
123E:  BRA    1242
1240:  BRA    1276
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
1242:  CLRF   52
1244:  MOVLW  03
1246:  MOVWF  FA9
1248:  CLRF   FA8
124A:  BCF    FA6.6
124C:  BCF    FA6.7
124E:  BSF    FA6.2
1250:  MOVF   FF2,W
1252:  MOVWF  00
1254:  BCF    FF2.6
1256:  BCF    FF2.7
1258:  MOVLB  F
125A:  MOVLW  55
125C:  MOVWF  FA7
125E:  MOVLW  AA
1260:  MOVWF  FA7
1262:  BSF    FA6.1
1264:  BTFSC  FA6.1
1266:  BRA    1264
1268:  BCF    FA6.2
126A:  MOVF   00,W
126C:  IORWF  FF2,F
126E:  MOVLW  14
1270:  MOVLB  0
1272:  MOVWF  xF7
1274:  RCALL  0BEC
....................    } 
....................    if(estadoalarma>1){ 
1276:  MOVLW  00
1278:  BTFSC  2A.4
127A:  MOVLW  01
127C:  SUBLW  01
127E:  BC    12B6
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
1280:  BSF    2A.4
1282:  MOVLW  04
1284:  MOVWF  FA9
1286:  MOVLW  01
1288:  MOVWF  FA8
128A:  BCF    FA6.6
128C:  BCF    FA6.7
128E:  BSF    FA6.2
1290:  MOVF   FF2,W
1292:  MOVWF  00
1294:  BCF    FF2.6
1296:  BCF    FF2.7
1298:  MOVLB  F
129A:  MOVLW  55
129C:  MOVWF  FA7
129E:  MOVLW  AA
12A0:  MOVWF  FA7
12A2:  BSF    FA6.1
12A4:  BTFSC  FA6.1
12A6:  BRA    12A4
12A8:  BCF    FA6.2
12AA:  MOVF   00,W
12AC:  IORWF  FF2,F
12AE:  MOVLW  14
12B0:  MOVLB  0
12B2:  MOVWF  xF7
12B4:  RCALL  0BEC
....................    } 
....................    if(tempo_minutos>200){ 
12B6:  MOVF   3A,W
12B8:  SUBLW  C8
12BA:  BC    12F4
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
12BC:  MOVLW  14
12BE:  MOVWF  3A
12C0:  MOVLW  05
12C2:  MOVWF  FA9
12C4:  MOVLW  14
12C6:  MOVWF  FA8
12C8:  BCF    FA6.6
12CA:  BCF    FA6.7
12CC:  BSF    FA6.2
12CE:  MOVF   FF2,W
12D0:  MOVWF  00
12D2:  BCF    FF2.6
12D4:  BCF    FF2.7
12D6:  MOVLB  F
12D8:  MOVLW  55
12DA:  MOVWF  FA7
12DC:  MOVLW  AA
12DE:  MOVWF  FA7
12E0:  BSF    FA6.1
12E2:  BTFSC  FA6.1
12E4:  BRA    12E2
12E6:  BCF    FA6.2
12E8:  MOVF   00,W
12EA:  IORWF  FF2,F
12EC:  MOVLW  14
12EE:  MOVLB  0
12F0:  MOVWF  xF7
12F2:  RCALL  0BEC
....................    } 
....................    if(tempo_segundos>59){ 
12F4:  MOVF   3B,W
12F6:  SUBLW  3B
12F8:  BC    132E
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
12FA:  CLRF   3B
12FC:  MOVLW  06
12FE:  MOVWF  FA9
1300:  CLRF   FA8
1302:  BCF    FA6.6
1304:  BCF    FA6.7
1306:  BSF    FA6.2
1308:  MOVF   FF2,W
130A:  MOVWF  00
130C:  BCF    FF2.6
130E:  BCF    FF2.7
1310:  MOVLB  F
1312:  MOVLW  55
1314:  MOVWF  FA7
1316:  MOVLW  AA
1318:  MOVWF  FA7
131A:  BSF    FA6.1
131C:  BTFSC  FA6.1
131E:  BRA    131C
1320:  BCF    FA6.2
1322:  MOVF   00,W
1324:  IORWF  FF2,F
1326:  MOVLW  14
1328:  MOVLB  0
132A:  MOVWF  xF7
132C:  RCALL  0BEC
....................    } 
....................    if(segundos>60){ 
132E:  MOVF   34,W
1330:  SUBLW  3C
1332:  BC    1368
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
1334:  CLRF   34
1336:  MOVLW  07
1338:  MOVWF  FA9
133A:  CLRF   FA8
133C:  BCF    FA6.6
133E:  BCF    FA6.7
1340:  BSF    FA6.2
1342:  MOVF   FF2,W
1344:  MOVWF  00
1346:  BCF    FF2.6
1348:  BCF    FF2.7
134A:  MOVLB  F
134C:  MOVLW  55
134E:  MOVWF  FA7
1350:  MOVLW  AA
1352:  MOVWF  FA7
1354:  BSF    FA6.1
1356:  BTFSC  FA6.1
1358:  BRA    1356
135A:  BCF    FA6.2
135C:  MOVF   00,W
135E:  IORWF  FF2,F
1360:  MOVLW  14
1362:  MOVLB  0
1364:  MOVWF  xF7
1366:  RCALL  0BEC
....................    } 
....................    if(minutos>60){ 
1368:  MOVF   35,W
136A:  SUBLW  3C
136C:  BC    13A2
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
136E:  CLRF   35
1370:  MOVLW  08
1372:  MOVWF  FA9
1374:  CLRF   FA8
1376:  BCF    FA6.6
1378:  BCF    FA6.7
137A:  BSF    FA6.2
137C:  MOVF   FF2,W
137E:  MOVWF  00
1380:  BCF    FF2.6
1382:  BCF    FF2.7
1384:  MOVLB  F
1386:  MOVLW  55
1388:  MOVWF  FA7
138A:  MOVLW  AA
138C:  MOVWF  FA7
138E:  BSF    FA6.1
1390:  BTFSC  FA6.1
1392:  BRA    1390
1394:  BCF    FA6.2
1396:  MOVF   00,W
1398:  IORWF  FF2,F
139A:  MOVLW  14
139C:  MOVLB  0
139E:  MOVWF  xF7
13A0:  RCALL  0BEC
....................    } 
....................    if(horas>10000){ 
13A2:  MOVF   5B,W
13A4:  SUBLW  26
13A6:  BC    141E
13A8:  XORLW  FF
13AA:  BNZ   13B2
13AC:  MOVF   5A,W
13AE:  SUBLW  10
13B0:  BC    141E
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
13B2:  CLRF   5B
13B4:  CLRF   5A
13B6:  MOVLW  09
13B8:  MOVWF  FA9
13BA:  MOVLW  0A
13BC:  MOVWF  FA8
13BE:  BCF    FA6.6
13C0:  BCF    FA6.7
13C2:  BSF    FA6.2
13C4:  MOVF   FF2,W
13C6:  MOVWF  00
13C8:  BCF    FF2.6
13CA:  BCF    FF2.7
13CC:  MOVLB  F
13CE:  MOVLW  55
13D0:  MOVWF  FA7
13D2:  MOVLW  AA
13D4:  MOVWF  FA7
13D6:  BSF    FA6.1
13D8:  BTFSC  FA6.1
13DA:  BRA    13D8
13DC:  BCF    FA6.2
13DE:  MOVF   00,W
13E0:  IORWF  FF2,F
13E2:  MOVLW  14
13E4:  MOVLB  0
13E6:  MOVWF  xF7
13E8:  RCALL  0BEC
13EA:  MOVLW  0A
13EC:  MOVWF  FA9
13EE:  CLRF   FA8
13F0:  BCF    FA6.6
13F2:  BCF    FA6.7
13F4:  BSF    FA6.2
13F6:  MOVF   FF2,W
13F8:  MOVWF  00
13FA:  BCF    FF2.6
13FC:  BCF    FF2.7
13FE:  MOVLB  F
1400:  MOVLW  55
1402:  MOVWF  FA7
1404:  MOVLW  AA
1406:  MOVWF  FA7
1408:  BSF    FA6.1
140A:  BTFSC  FA6.1
140C:  BRA    140A
140E:  BCF    FA6.2
1410:  MOVF   00,W
1412:  IORWF  FF2,F
1414:  MOVLW  14
1416:  MOVLB  0
1418:  MOVWF  xF7
141A:  CALL   0BEC
....................    } 
....................    if(G<150 || G>300){ 
141E:  MOVFF  C1,F7
1422:  MOVFF  C0,F6
1426:  MOVFF  BF,F5
142A:  MOVFF  BE,F4
142E:  CLRF   xFB
1430:  CLRF   xFA
1432:  MOVLW  16
1434:  MOVWF  xF9
1436:  MOVLW  86
1438:  MOVWF  xF8
143A:  RCALL  10F2
143C:  BC    145E
143E:  CLRF   xF7
1440:  CLRF   xF6
1442:  MOVLW  16
1444:  MOVWF  xF5
1446:  MOVLW  87
1448:  MOVWF  xF4
144A:  MOVFF  C1,FB
144E:  MOVFF  C0,FA
1452:  MOVFF  BF,F9
1456:  MOVFF  BE,F8
145A:  RCALL  10F2
145C:  BNC   14D4
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
145E:  CLRF   xC1
1460:  CLRF   xC0
1462:  MOVLW  5C
1464:  MOVWF  xBF
1466:  MOVLW  86
1468:  MOVWF  xBE
146A:  MOVLW  0B
146C:  MOVWF  FA9
146E:  MOVLW  DC
1470:  MOVWF  FA8
1472:  BCF    FA6.6
1474:  BCF    FA6.7
1476:  BSF    FA6.2
1478:  MOVF   FF2,W
147A:  MOVWF  00
147C:  BCF    FF2.6
147E:  BCF    FF2.7
1480:  MOVLB  F
1482:  MOVLW  55
1484:  MOVWF  FA7
1486:  MOVLW  AA
1488:  MOVWF  FA7
148A:  BSF    FA6.1
148C:  BTFSC  FA6.1
148E:  BRA    148C
1490:  BCF    FA6.2
1492:  MOVF   00,W
1494:  IORWF  FF2,F
1496:  MOVLW  14
1498:  MOVLB  0
149A:  MOVWF  xF7
149C:  CALL   0BEC
14A0:  MOVLW  0C
14A2:  MOVWF  FA9
14A4:  CLRF   FA8
14A6:  BCF    FA6.6
14A8:  BCF    FA6.7
14AA:  BSF    FA6.2
14AC:  MOVF   FF2,W
14AE:  MOVWF  00
14B0:  BCF    FF2.6
14B2:  BCF    FF2.7
14B4:  MOVLB  F
14B6:  MOVLW  55
14B8:  MOVWF  FA7
14BA:  MOVLW  AA
14BC:  MOVWF  FA7
14BE:  BSF    FA6.1
14C0:  BTFSC  FA6.1
14C2:  BRA    14C0
14C4:  BCF    FA6.2
14C6:  MOVF   00,W
14C8:  IORWF  FF2,F
14CA:  MOVLW  14
14CC:  MOVLB  0
14CE:  MOVWF  xF7
14D0:  CALL   0BEC
....................    } 
....................    if(Vel1>20 || Vel1<1){ 
14D4:  MOVF   57,W
14D6:  SUBLW  14
14D8:  BNC   14DE
14DA:  MOVF   57,F
14DC:  BNZ   1518
....................       Vel1=10;write_eeprom(13,10);delay_ms(20); 
14DE:  MOVLW  0A
14E0:  MOVWF  57
14E2:  MOVLW  0D
14E4:  MOVWF  FA9
14E6:  MOVLW  0A
14E8:  MOVWF  FA8
14EA:  BCF    FA6.6
14EC:  BCF    FA6.7
14EE:  BSF    FA6.2
14F0:  MOVF   FF2,W
14F2:  MOVWF  00
14F4:  BCF    FF2.6
14F6:  BCF    FF2.7
14F8:  MOVLB  F
14FA:  MOVLW  55
14FC:  MOVWF  FA7
14FE:  MOVLW  AA
1500:  MOVWF  FA7
1502:  BSF    FA6.1
1504:  BTFSC  FA6.1
1506:  BRA    1504
1508:  BCF    FA6.2
150A:  MOVF   00,W
150C:  IORWF  FF2,F
150E:  MOVLW  14
1510:  MOVLB  0
1512:  MOVWF  xF7
1514:  CALL   0BEC
....................    } 
....................    if(horasTrabajo>60000){ 
1518:  MOVF   xD0,W
151A:  SUBLW  E9
151C:  BC    1594
151E:  XORLW  FF
1520:  BNZ   1528
1522:  MOVF   xCF,W
1524:  SUBLW  60
1526:  BC    1594
....................       horasTrabajo=0;write_eeprom(19,0);delay_ms(20);write_eeprom(18,0);delay_ms(20); 
1528:  CLRF   xD0
152A:  CLRF   xCF
152C:  MOVLW  13
152E:  MOVWF  FA9
1530:  CLRF   FA8
1532:  BCF    FA6.6
1534:  BCF    FA6.7
1536:  BSF    FA6.2
1538:  MOVF   FF2,W
153A:  MOVWF  00
153C:  BCF    FF2.6
153E:  BCF    FF2.7
1540:  MOVLB  F
1542:  MOVLW  55
1544:  MOVWF  FA7
1546:  MOVLW  AA
1548:  MOVWF  FA7
154A:  BSF    FA6.1
154C:  BTFSC  FA6.1
154E:  BRA    154C
1550:  BCF    FA6.2
1552:  MOVF   00,W
1554:  IORWF  FF2,F
1556:  MOVLW  14
1558:  MOVLB  0
155A:  MOVWF  xF7
155C:  CALL   0BEC
1560:  MOVLW  12
1562:  MOVWF  FA9
1564:  CLRF   FA8
1566:  BCF    FA6.6
1568:  BCF    FA6.7
156A:  BSF    FA6.2
156C:  MOVF   FF2,W
156E:  MOVWF  00
1570:  BCF    FF2.6
1572:  BCF    FF2.7
1574:  MOVLB  F
1576:  MOVLW  55
1578:  MOVWF  FA7
157A:  MOVLW  AA
157C:  MOVWF  FA7
157E:  BSF    FA6.1
1580:  BTFSC  FA6.1
1582:  BRA    1580
1584:  BCF    FA6.2
1586:  MOVF   00,W
1588:  IORWF  FF2,F
158A:  MOVLW  14
158C:  MOVLB  0
158E:  MOVWF  xF7
1590:  CALL   0BEC
....................    } 
....................    if(segundosTrabajo>3600){ 
1594:  MOVF   xCE,W
1596:  SUBLW  0D
1598:  BC    1610
159A:  XORLW  FF
159C:  BNZ   15A4
159E:  MOVF   xCD,W
15A0:  SUBLW  10
15A2:  BC    1610
....................       segundosTrabajo=0;write_eeprom(20,0);delay_ms(20);write_eeprom(21,0);delay_ms(20); 
15A4:  CLRF   xCE
15A6:  CLRF   xCD
15A8:  MOVLW  14
15AA:  MOVWF  FA9
15AC:  CLRF   FA8
15AE:  BCF    FA6.6
15B0:  BCF    FA6.7
15B2:  BSF    FA6.2
15B4:  MOVF   FF2,W
15B6:  MOVWF  00
15B8:  BCF    FF2.6
15BA:  BCF    FF2.7
15BC:  MOVLB  F
15BE:  MOVLW  55
15C0:  MOVWF  FA7
15C2:  MOVLW  AA
15C4:  MOVWF  FA7
15C6:  BSF    FA6.1
15C8:  BTFSC  FA6.1
15CA:  BRA    15C8
15CC:  BCF    FA6.2
15CE:  MOVF   00,W
15D0:  IORWF  FF2,F
15D2:  MOVLW  14
15D4:  MOVLB  0
15D6:  MOVWF  xF7
15D8:  CALL   0BEC
15DC:  MOVLW  15
15DE:  MOVWF  FA9
15E0:  CLRF   FA8
15E2:  BCF    FA6.6
15E4:  BCF    FA6.7
15E6:  BSF    FA6.2
15E8:  MOVF   FF2,W
15EA:  MOVWF  00
15EC:  BCF    FF2.6
15EE:  BCF    FF2.7
15F0:  MOVLB  F
15F2:  MOVLW  55
15F4:  MOVWF  FA7
15F6:  MOVLW  AA
15F8:  MOVWF  FA7
15FA:  BSF    FA6.1
15FC:  BTFSC  FA6.1
15FE:  BRA    15FC
1600:  BCF    FA6.2
1602:  MOVF   00,W
1604:  IORWF  FF2,F
1606:  MOVLW  14
1608:  MOVLB  0
160A:  MOVWF  xF7
160C:  CALL   0BEC
....................    } 
....................    if(motor>1){ 
1610:  MOVF   44,W
1612:  SUBLW  01
1614:  BC    1650
....................       motor=1;write_eeprom(22,1);delay_ms(20); 
1616:  MOVLW  01
1618:  MOVWF  44
161A:  MOVLW  16
161C:  MOVWF  FA9
161E:  MOVLW  01
1620:  MOVWF  FA8
1622:  BCF    FA6.6
1624:  BCF    FA6.7
1626:  BSF    FA6.2
1628:  MOVF   FF2,W
162A:  MOVWF  00
162C:  BCF    FF2.6
162E:  BCF    FF2.7
1630:  MOVLB  F
1632:  MOVLW  55
1634:  MOVWF  FA7
1636:  MOVLW  AA
1638:  MOVWF  FA7
163A:  BSF    FA6.1
163C:  BTFSC  FA6.1
163E:  BRA    163C
1640:  BCF    FA6.2
1642:  MOVF   00,W
1644:  IORWF  FF2,F
1646:  MOVLW  14
1648:  MOVLB  0
164A:  MOVWF  xF7
164C:  CALL   0BEC
....................    } 
....................    if(luz>1){ 
1650:  MOVF   45,W
1652:  SUBLW  01
1654:  BC    1690
....................       luz=1;write_eeprom(23,1);delay_ms(20); 
1656:  MOVLW  01
1658:  MOVWF  45
165A:  MOVLW  17
165C:  MOVWF  FA9
165E:  MOVLW  01
1660:  MOVWF  FA8
1662:  BCF    FA6.6
1664:  BCF    FA6.7
1666:  BSF    FA6.2
1668:  MOVF   FF2,W
166A:  MOVWF  00
166C:  BCF    FF2.6
166E:  BCF    FF2.7
1670:  MOVLB  F
1672:  MOVLW  55
1674:  MOVWF  FA7
1676:  MOVLW  AA
1678:  MOVWF  FA7
167A:  BSF    FA6.1
167C:  BTFSC  FA6.1
167E:  BRA    167C
1680:  BCF    FA6.2
1682:  MOVF   00,W
1684:  IORWF  FF2,F
1686:  MOVLW  14
1688:  MOVLB  0
168A:  MOVWF  xF7
168C:  CALL   0BEC
....................    } 
....................    if(velocidadInicial>15){ 
1690:  MOVF   46,W
1692:  SUBLW  0F
1694:  BC    16D0
....................       velocidadInicial=10;write_eeprom(24,10);delay_ms(20); 
1696:  MOVLW  0A
1698:  MOVWF  46
169A:  MOVLW  18
169C:  MOVWF  FA9
169E:  MOVLW  0A
16A0:  MOVWF  FA8
16A2:  BCF    FA6.6
16A4:  BCF    FA6.7
16A6:  BSF    FA6.2
16A8:  MOVF   FF2,W
16AA:  MOVWF  00
16AC:  BCF    FF2.6
16AE:  BCF    FF2.7
16B0:  MOVLB  F
16B2:  MOVLW  55
16B4:  MOVWF  FA7
16B6:  MOVLW  AA
16B8:  MOVWF  FA7
16BA:  BSF    FA6.1
16BC:  BTFSC  FA6.1
16BE:  BRA    16BC
16C0:  BCF    FA6.2
16C2:  MOVF   00,W
16C4:  IORWF  FF2,F
16C6:  MOVLW  14
16C8:  MOVLB  0
16CA:  MOVWF  xF7
16CC:  CALL   0BEC
....................    } 
.................... } 
16D0:  GOTO   2BA4 (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
....................    if(VIDRIOUUP || !VIDRIODN){ 
....................       O1_on;O2_off; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoBajar=OFF; 
....................    } 
.................... } 
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
....................    if(!VIDRIOUUP || VIDRIODN){ 
....................       O1_off;O2_on; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoSubir=OFF; 
....................    } 
.................... } 
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
.................... } 
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
.................... void cuentaTiempoTrabajoFiltro(){ 
....................    //**Contador de Tiempo de Trabajo del filtro**// 
....................    if(segundosTrabajo>=3600){ // Tiempo de Trabajo 
*
198A:  MOVF   xCE,W
198C:  SUBLW  0D
198E:  BTFSC  FD8.0
1990:  BRA    1A9A
1992:  XORLW  FF
1994:  BNZ   199E
1996:  MOVF   xCD,W
1998:  SUBLW  0F
199A:  BTFSC  FD8.0
199C:  BRA    1A9A
....................       segundosTrabajo=0; //Minutos Trabajo realmente son segundos. 
199E:  CLRF   xCE
19A0:  CLRF   xCD
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
19A2:  MOVFF  CD,E0
19A6:  MOVLW  14
19A8:  MOVWF  FA9
19AA:  MOVFF  E0,FA8
19AE:  BCF    FA6.6
19B0:  BCF    FA6.7
19B2:  BSF    FA6.2
19B4:  MOVF   FF2,W
19B6:  MOVWF  00
19B8:  BCF    FF2.6
19BA:  BCF    FF2.7
19BC:  MOVLB  F
19BE:  MOVLW  55
19C0:  MOVWF  FA7
19C2:  MOVLW  AA
19C4:  MOVWF  FA7
19C6:  BSF    FA6.1
19C8:  BTFSC  FA6.1
19CA:  BRA    19C8
19CC:  BCF    FA6.2
19CE:  MOVF   00,W
19D0:  IORWF  FF2,F
....................       delay_ms(20); 
19D2:  MOVLW  14
19D4:  MOVLB  0
19D6:  MOVWF  xF7
19D8:  CALL   0BEC
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
19DC:  MOVFF  CE,E0
19E0:  MOVLW  15
19E2:  MOVWF  FA9
19E4:  MOVFF  E0,FA8
19E8:  BCF    FA6.6
19EA:  BCF    FA6.7
19EC:  BSF    FA6.2
19EE:  MOVF   FF2,W
19F0:  MOVWF  00
19F2:  BCF    FF2.6
19F4:  BCF    FF2.7
19F6:  MOVLB  F
19F8:  MOVLW  55
19FA:  MOVWF  FA7
19FC:  MOVLW  AA
19FE:  MOVWF  FA7
1A00:  BSF    FA6.1
1A02:  BTFSC  FA6.1
1A04:  BRA    1A02
1A06:  BCF    FA6.2
1A08:  MOVF   00,W
1A0A:  IORWF  FF2,F
....................       delay_ms(20); 
1A0C:  MOVLW  14
1A0E:  MOVLB  0
1A10:  MOVWF  xF7
1A12:  CALL   0BEC
....................       horasTrabajo++; 
1A16:  INCF   xCF,F
1A18:  BTFSC  FD8.2
1A1A:  INCF   xD0,F
....................       write_eeprom(18,make8(horasTrabajo,0)); 
1A1C:  MOVFF  CF,E0
1A20:  MOVLW  12
1A22:  MOVWF  FA9
1A24:  MOVFF  E0,FA8
1A28:  BCF    FA6.6
1A2A:  BCF    FA6.7
1A2C:  BSF    FA6.2
1A2E:  MOVF   FF2,W
1A30:  MOVWF  00
1A32:  BCF    FF2.6
1A34:  BCF    FF2.7
1A36:  MOVLB  F
1A38:  MOVLW  55
1A3A:  MOVWF  FA7
1A3C:  MOVLW  AA
1A3E:  MOVWF  FA7
1A40:  BSF    FA6.1
1A42:  BTFSC  FA6.1
1A44:  BRA    1A42
1A46:  BCF    FA6.2
1A48:  MOVF   00,W
1A4A:  IORWF  FF2,F
....................       delay_ms(20); 
1A4C:  MOVLW  14
1A4E:  MOVLB  0
1A50:  MOVWF  xF7
1A52:  CALL   0BEC
....................       write_eeprom(19,make8(horasTrabajo,1)); 
1A56:  MOVFF  D0,E0
1A5A:  MOVLW  13
1A5C:  MOVWF  FA9
1A5E:  MOVFF  E0,FA8
1A62:  BCF    FA6.6
1A64:  BCF    FA6.7
1A66:  BSF    FA6.2
1A68:  MOVF   FF2,W
1A6A:  MOVWF  00
1A6C:  BCF    FF2.6
1A6E:  BCF    FF2.7
1A70:  MOVLB  F
1A72:  MOVLW  55
1A74:  MOVWF  FA7
1A76:  MOVLW  AA
1A78:  MOVWF  FA7
1A7A:  BSF    FA6.1
1A7C:  BTFSC  FA6.1
1A7E:  BRA    1A7C
1A80:  BCF    FA6.2
1A82:  MOVF   00,W
1A84:  IORWF  FF2,F
....................       delay_ms(20); 
1A86:  MOVLW  14
1A88:  MOVLB  0
1A8A:  MOVWF  xF7
1A8C:  CALL   0BEC
....................       delay_ms(20); 
1A90:  MOVLW  14
1A92:  MOVWF  xF7
1A94:  CALL   0BEC
....................    }else if(segundosTrabajo==900 || segundosTrabajo==1800 || segundosTrabajo==2700 ){ 
1A98:  BRA    1B32
1A9A:  MOVF   xCD,W
1A9C:  SUBLW  84
1A9E:  BNZ   1AA6
1AA0:  MOVF   xCE,W
1AA2:  SUBLW  03
1AA4:  BZ    1ABE
1AA6:  MOVF   xCD,W
1AA8:  SUBLW  08
1AAA:  BNZ   1AB2
1AAC:  MOVF   xCE,W
1AAE:  SUBLW  07
1AB0:  BZ    1ABE
1AB2:  MOVF   xCD,W
1AB4:  SUBLW  8C
1AB6:  BNZ   1B32
1AB8:  MOVF   xCE,W
1ABA:  SUBLW  0A
1ABC:  BNZ   1B32
....................       write_eeprom(20,make8(segundosTrabajo,0)); 
1ABE:  MOVFF  CD,E0
1AC2:  MOVLW  14
1AC4:  MOVWF  FA9
1AC6:  MOVFF  E0,FA8
1ACA:  BCF    FA6.6
1ACC:  BCF    FA6.7
1ACE:  BSF    FA6.2
1AD0:  MOVF   FF2,W
1AD2:  MOVWF  00
1AD4:  BCF    FF2.6
1AD6:  BCF    FF2.7
1AD8:  MOVLB  F
1ADA:  MOVLW  55
1ADC:  MOVWF  FA7
1ADE:  MOVLW  AA
1AE0:  MOVWF  FA7
1AE2:  BSF    FA6.1
1AE4:  BTFSC  FA6.1
1AE6:  BRA    1AE4
1AE8:  BCF    FA6.2
1AEA:  MOVF   00,W
1AEC:  IORWF  FF2,F
....................       delay_ms(20); 
1AEE:  MOVLW  14
1AF0:  MOVLB  0
1AF2:  MOVWF  xF7
1AF4:  CALL   0BEC
....................       write_eeprom(21,make8(segundosTrabajo,1)); 
1AF8:  MOVFF  CE,E0
1AFC:  MOVLW  15
1AFE:  MOVWF  FA9
1B00:  MOVFF  E0,FA8
1B04:  BCF    FA6.6
1B06:  BCF    FA6.7
1B08:  BSF    FA6.2
1B0A:  MOVF   FF2,W
1B0C:  MOVWF  00
1B0E:  BCF    FF2.6
1B10:  BCF    FF2.7
1B12:  MOVLB  F
1B14:  MOVLW  55
1B16:  MOVWF  FA7
1B18:  MOVLW  AA
1B1A:  MOVWF  FA7
1B1C:  BSF    FA6.1
1B1E:  BTFSC  FA6.1
1B20:  BRA    1B1E
1B22:  BCF    FA6.2
1B24:  MOVF   00,W
1B26:  IORWF  FF2,F
....................       delay_ms(20); 
1B28:  MOVLW  14
1B2A:  MOVLB  0
1B2C:  MOVWF  xF7
1B2E:  CALL   0BEC
....................    } 
.................... //----------------------------------------// 
.................... } 
1B32:  GOTO   2F2E (RETURN)
....................  
.................... void clearSalidasSinUsar(){ 
....................    output_bit(PIN_A3,0); 
....................    //output_bit(PIN_C3,0);//Solo para PIC Diferente a 18F4550 
....................    //output_bit(PIN_C4,0); 
....................    //output_bit(PIN_C5,0); 
....................    output_bit(PIN_C6,0); 
....................    output_bit(PIN_C7,0); 
....................    output_bit(PIN_B5,0); 
.................... }  
....................  
....................  
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
0248:  BSF    xC2.1
....................     
....................    if(VelMotor==19){ 
024A:  MOVF   xD1,W
024C:  SUBLW  13
024E:  BNZ   0260
....................       set_timer0(237);       
0250:  CLRF   FD7
0252:  MOVLW  ED
0254:  MOVWF  FD6
....................       Motor_off;  
0256:  BCF    F8B.2
0258:  BCF    F94.2
....................       Motor2_off;  
025A:  BCF    F8B.1
025C:  BCF    F94.1
....................    }else if(VelMotor==18){ 
025E:  BRA    03E8
0260:  MOVF   xD1,W
0262:  SUBLW  12
0264:  BNZ   0276
....................       set_timer0(234);       
0266:  CLRF   FD7
0268:  MOVLW  EA
026A:  MOVWF  FD6
....................       Motor_off;  
026C:  BCF    F8B.2
026E:  BCF    F94.2
....................       Motor2_off;  
0270:  BCF    F8B.1
0272:  BCF    F94.1
....................    }else if(VelMotor==17){ 
0274:  BRA    03E8
0276:  MOVF   xD1,W
0278:  SUBLW  11
027A:  BNZ   028C
....................       set_timer0(231);       
027C:  CLRF   FD7
027E:  MOVLW  E7
0280:  MOVWF  FD6
....................       Motor_off;  
0282:  BCF    F8B.2
0284:  BCF    F94.2
....................       Motor2_off;  
0286:  BCF    F8B.1
0288:  BCF    F94.1
....................    }else if(VelMotor==16){ 
028A:  BRA    03E8
028C:  MOVF   xD1,W
028E:  SUBLW  10
0290:  BNZ   02A2
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
0292:  CLRF   FD7
0294:  MOVLW  E4
0296:  MOVWF  FD6
....................       Motor_off;  
0298:  BCF    F8B.2
029A:  BCF    F94.2
....................       Motor2_off;  
029C:  BCF    F8B.1
029E:  BCF    F94.1
....................    }else if(VelMotor==15){ 
02A0:  BRA    03E8
02A2:  MOVF   xD1,W
02A4:  SUBLW  0F
02A6:  BNZ   02B8
....................       set_timer0(225);       
02A8:  CLRF   FD7
02AA:  MOVLW  E1
02AC:  MOVWF  FD6
....................       Motor_off;  
02AE:  BCF    F8B.2
02B0:  BCF    F94.2
....................       Motor2_off;  
02B2:  BCF    F8B.1
02B4:  BCF    F94.1
....................    }else if(VelMotor==14){ 
02B6:  BRA    03E8
02B8:  MOVF   xD1,W
02BA:  SUBLW  0E
02BC:  BNZ   02CE
....................       set_timer0(222);       
02BE:  CLRF   FD7
02C0:  MOVLW  DE
02C2:  MOVWF  FD6
....................       Motor_off;  
02C4:  BCF    F8B.2
02C6:  BCF    F94.2
....................       Motor2_off;  
02C8:  BCF    F8B.1
02CA:  BCF    F94.1
....................    }else if(VelMotor==13){ 
02CC:  BRA    03E8
02CE:  MOVF   xD1,W
02D0:  SUBLW  0D
02D2:  BNZ   02E4
....................       set_timer0(219);       
02D4:  CLRF   FD7
02D6:  MOVLW  DB
02D8:  MOVWF  FD6
....................       Motor_off;  
02DA:  BCF    F8B.2
02DC:  BCF    F94.2
....................       Motor2_off;  
02DE:  BCF    F8B.1
02E0:  BCF    F94.1
....................    }else if(VelMotor==12){ 
02E2:  BRA    03E8
02E4:  MOVF   xD1,W
02E6:  SUBLW  0C
02E8:  BNZ   02FA
....................       set_timer0(216);       
02EA:  CLRF   FD7
02EC:  MOVLW  D8
02EE:  MOVWF  FD6
....................       Motor_off;  
02F0:  BCF    F8B.2
02F2:  BCF    F94.2
....................       Motor2_off;  
02F4:  BCF    F8B.1
02F6:  BCF    F94.1
....................    }else if(VelMotor==11){ 
02F8:  BRA    03E8
02FA:  MOVF   xD1,W
02FC:  SUBLW  0B
02FE:  BNZ   0310
....................       set_timer0(213);       
0300:  CLRF   FD7
0302:  MOVLW  D5
0304:  MOVWF  FD6
....................       Motor_off;  
0306:  BCF    F8B.2
0308:  BCF    F94.2
....................       Motor2_off;  
030A:  BCF    F8B.1
030C:  BCF    F94.1
....................    }else if(VelMotor==10){ 
030E:  BRA    03E8
0310:  MOVF   xD1,W
0312:  SUBLW  0A
0314:  BNZ   0326
....................       set_timer0(210);       
0316:  CLRF   FD7
0318:  MOVLW  D2
031A:  MOVWF  FD6
....................       Motor_off;  
031C:  BCF    F8B.2
031E:  BCF    F94.2
....................       Motor2_off;  
0320:  BCF    F8B.1
0322:  BCF    F94.1
....................    }else if(VelMotor==9){ 
0324:  BRA    03E8
0326:  MOVF   xD1,W
0328:  SUBLW  09
032A:  BNZ   033C
....................       set_timer0(207);       
032C:  CLRF   FD7
032E:  MOVLW  CF
0330:  MOVWF  FD6
....................       Motor_off;  
0332:  BCF    F8B.2
0334:  BCF    F94.2
....................       Motor2_off;  
0336:  BCF    F8B.1
0338:  BCF    F94.1
....................    }else if(VelMotor==8){ 
033A:  BRA    03E8
033C:  MOVF   xD1,W
033E:  SUBLW  08
0340:  BNZ   0352
....................       set_timer0(204);       
0342:  CLRF   FD7
0344:  MOVLW  CC
0346:  MOVWF  FD6
....................       Motor_off;  
0348:  BCF    F8B.2
034A:  BCF    F94.2
....................       Motor2_off;  
034C:  BCF    F8B.1
034E:  BCF    F94.1
....................    }else if(VelMotor==7){ 
0350:  BRA    03E8
0352:  MOVF   xD1,W
0354:  SUBLW  07
0356:  BNZ   0368
....................       set_timer0(201);       
0358:  CLRF   FD7
035A:  MOVLW  C9
035C:  MOVWF  FD6
....................       Motor_off;  
035E:  BCF    F8B.2
0360:  BCF    F94.2
....................       Motor2_off;  
0362:  BCF    F8B.1
0364:  BCF    F94.1
....................    }else if(VelMotor==6){ 
0366:  BRA    03E8
0368:  MOVF   xD1,W
036A:  SUBLW  06
036C:  BNZ   037E
....................       set_timer0(198);       
036E:  CLRF   FD7
0370:  MOVLW  C6
0372:  MOVWF  FD6
....................       Motor_off;  
0374:  BCF    F8B.2
0376:  BCF    F94.2
....................       Motor2_off;  
0378:  BCF    F8B.1
037A:  BCF    F94.1
....................    }else if(VelMotor==5){ 
037C:  BRA    03E8
037E:  MOVF   xD1,W
0380:  SUBLW  05
0382:  BNZ   0394
....................       set_timer0(195);       
0384:  CLRF   FD7
0386:  MOVLW  C3
0388:  MOVWF  FD6
....................       Motor_off;  
038A:  BCF    F8B.2
038C:  BCF    F94.2
....................       Motor2_off;  
038E:  BCF    F8B.1
0390:  BCF    F94.1
....................    }else if(VelMotor==4){ 
0392:  BRA    03E8
0394:  MOVF   xD1,W
0396:  SUBLW  04
0398:  BNZ   03AA
....................       set_timer0(192);       
039A:  CLRF   FD7
039C:  MOVLW  C0
039E:  MOVWF  FD6
....................       Motor_off;  
03A0:  BCF    F8B.2
03A2:  BCF    F94.2
....................       Motor2_off;  
03A4:  BCF    F8B.1
03A6:  BCF    F94.1
....................    }else if(VelMotor==3){ 
03A8:  BRA    03E8
03AA:  MOVF   xD1,W
03AC:  SUBLW  03
03AE:  BNZ   03C0
....................       set_timer0(189); 
03B0:  CLRF   FD7
03B2:  MOVLW  BD
03B4:  MOVWF  FD6
....................       Motor_off;  
03B6:  BCF    F8B.2
03B8:  BCF    F94.2
....................       Motor2_off;  
03BA:  BCF    F8B.1
03BC:  BCF    F94.1
....................    }else if(VelMotor==2){ 
03BE:  BRA    03E8
03C0:  MOVF   xD1,W
03C2:  SUBLW  02
03C4:  BNZ   03D6
....................       set_timer0(186); 
03C6:  CLRF   FD7
03C8:  MOVLW  BA
03CA:  MOVWF  FD6
....................       Motor_off;  
03CC:  BCF    F8B.2
03CE:  BCF    F94.2
....................       Motor2_off;  
03D0:  BCF    F8B.1
03D2:  BCF    F94.1
....................    }else if(VelMotor==1){ 
03D4:  BRA    03E8
03D6:  DECFSZ xD1,W
03D8:  BRA    03E8
....................       set_timer0(183); 
03DA:  CLRF   FD7
03DC:  MOVLW  B7
03DE:  MOVWF  FD6
....................       Motor_off;  
03E0:  BCF    F8B.2
03E2:  BCF    F94.2
....................       Motor2_off;  
03E4:  BCF    F8B.1
03E6:  BCF    F94.1
....................    } 
....................    pulsos++;    
03E8:  INCF   xC3,F
03EA:  BTFSC  FD8.2
03EC:  INCF   xC4,F
.................... } 
....................  
03EE:  BCF    FF2.1
03F0:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<20){ 
03F4:  MOVF   xD1,F
03F6:  BZ    0420
03F8:  MOVF   xD1,W
03FA:  SUBLW  13
03FC:  BNC   0420
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
03FE:  BTFSS  xC2.1
0400:  BRA    0414
....................       Motor_on; 
0402:  BSF    F8B.2
0404:  BCF    F94.2
....................       Motor2_on;  
0406:  BSF    F8B.1
0408:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
040A:  CLRF   FD7
040C:  MOVLW  FD
040E:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
0410:  BCF    xC2.1
....................    } else {            //The triac has been triggered, cut the pulse 
0412:  BRA    0420
....................       Motor_off; 
0414:  BCF    F8B.2
0416:  BCF    F94.2
....................       Motor2_off;  
0418:  BCF    F8B.1
041A:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
041C:  CLRF   FD7
041E:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
.................... //#int_TIMER2 
0420:  BCF    FF2.2
0422:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer2(231);//100.25uS 
....................    set_timer1(40536);//5ms 
0426:  MOVLW  9E
0428:  MOVWF  FCF
042A:  MOVLW  58
042C:  MOVWF  FCE
....................    tiempos++; 
042E:  INCF   58,F
0430:  BTFSC  FD8.2
0432:  INCF   59,F
....................    if(UP) 
0434:  BSF    F92.5
0436:  BTFSC  F80.5
0438:  BRA    0442
....................          tup++; 
043A:  INCF   xC5,F
043C:  BTFSC  FD8.2
043E:  INCF   xC6,F
....................       else 
0440:  BRA    0446
....................          tup=0; 
0442:  CLRF   xC6
0444:  CLRF   xC5
....................           
....................       if(DOWN) 
0446:  BSF    F96.0
0448:  BTFSC  F84.0
044A:  BRA    0454
....................          tdown++; 
044C:  INCF   xC7,F
044E:  BTFSC  FD8.2
0450:  INCF   xC8,F
....................       else 
0452:  BRA    0458
....................          tdown=0; 
0454:  CLRF   xC8
0456:  CLRF   xC7
....................           
....................       if(RIGHT) 
0458:  BSF    F96.1
045A:  BTFSC  F84.1
045C:  BRA    0466
....................          tright++; 
045E:  INCF   xC9,F
0460:  BTFSC  FD8.2
0462:  INCF   xCA,F
....................       else 
0464:  BRA    046A
....................          tright=0; 
0466:  CLRF   xCA
0468:  CLRF   xC9
....................        
....................       if(IZQU) 
046A:  BSF    F96.2
046C:  BTFSC  F84.2
046E:  BRA    0478
....................          tleft++; 
0470:  INCF   xCB,F
0472:  BTFSC  FD8.2
0474:  INCF   xCC,F
....................       else 
0476:  BRA    047C
....................          tleft=0; 
0478:  CLRF   xCC
047A:  CLRF   xCB
....................      
....................    //if(tiempos>=10000){ 
....................    //if(tiempos>=9710){//1s 
....................    if(tiempos>=200){//1s 
047C:  MOVF   59,F
047E:  BNZ   0486
0480:  MOVF   58,W
0482:  SUBLW  C7
0484:  BC    04E2
....................       output_toggle(PIN_A3); 
0486:  BCF    F92.3
0488:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
048A:  CLRF   59
048C:  CLRF   58
048E:  INCF   42,F
0490:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
0492:  DECFSZ 53,W
0494:  BRA    04AA
....................          if(estadobuzzer==0){ 
0496:  BTFSC  2A.3
0498:  BRA    04A0
....................             Buzzer_off; 
049A:  BCF    F8B.0
049C:  BCF    F94.0
....................          }else{ 
049E:  BRA    04A8
....................             if(estadoalarma==1) 
04A0:  BTFSS  2A.4
04A2:  BRA    04A8
....................                Buzzer_on; 
04A4:  BSF    F8B.0
04A6:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
04A8:  BTG    2A.3
....................       } 
....................       if(estadomv==1) 
04AA:  BTFSS  29.2
04AC:  BRA    04B4
....................          segundosTrabajo++; 
04AE:  INCF   xCD,F
04B0:  BTFSC  FD8.2
04B2:  INCF   xCE,F
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
04B4:  BTFSS  29.0
04B6:  BRA    04E2
....................          segundos++; 
04B8:  INCF   34,F
....................          if(tiempo_cumplido==0){ 
04BA:  BTFSC  29.7
04BC:  BRA    04E2
....................             if(tempo_segundos>0){ 
04BE:  MOVF   3B,F
04C0:  BZ    04C6
....................                tempo_segundos--; 
04C2:  DECF   3B,F
....................             }else{ 
04C4:  BRA    04E2
....................                if(tempo_minutos>0){ 
04C6:  MOVF   3A,F
04C8:  BZ    04D2
....................                   tempo_minutos--; 
04CA:  DECF   3A,F
....................                   tempo_segundos=59; 
04CC:  MOVLW  3B
04CE:  MOVWF  3B
....................                }else{ 
04D0:  BRA    04E2
....................                   tiempo_cumplido=1; 
04D2:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
04D4:  BCF    29.0
04D6:  BSF    F8A.3
04D8:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
04DA:  MOVFF  3C,3A
04DE:  MOVFF  3D,3B
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
04E2:  BCF    F9E.0
04E4:  GOTO   0064
.................... void main () 
.................... { 
*
29EA:  CLRF   FF8
29EC:  BSF    FF1.2
29EE:  BCF    F9F.0
29F0:  BSF    FD0.7
29F2:  BSF    07.7
29F4:  CLRF   FEA
29F6:  CLRF   FE9
29F8:  BCF    29.0
29FA:  BCF    29.1
29FC:  BCF    29.2
29FE:  BCF    29.3
2A00:  BCF    29.4
2A02:  BCF    29.5
2A04:  BCF    29.6
2A06:  BCF    29.7
2A08:  BCF    2A.0
2A0A:  BCF    2A.1
2A0C:  BCF    2A.2
2A0E:  BCF    2A.3
2A10:  BCF    2A.4
2A12:  BCF    2A.5
2A14:  BCF    2A.6
2A16:  CLRF   2B
2A18:  MOVLW  07
2A1A:  MOVWF  2C
2A1C:  MOVLW  02
2A1E:  MOVWF  2D
2A20:  MOVLW  0B
2A22:  MOVWF  2E
2A24:  MOVLW  02
2A26:  MOVWF  2F
2A28:  MOVLW  03
2A2A:  MOVWF  30
2A2C:  MOVLW  02
2A2E:  MOVWF  31
2A30:  MOVWF  32
2A32:  MOVLW  04
2A34:  MOVWF  33
2A36:  CLRF   34
2A38:  CLRF   35
2A3A:  CLRF   36
2A3C:  CLRF   37
2A3E:  CLRF   38
2A40:  CLRF   39
2A42:  CLRF   3A
2A44:  CLRF   3B
2A46:  CLRF   3C
2A48:  CLRF   3D
2A4A:  CLRF   3E
2A4C:  CLRF   3F
2A4E:  CLRF   40
2A50:  MOVLW  01
2A52:  MOVWF  41
2A54:  CLRF   42
2A56:  CLRF   43
2A58:  CLRF   44
2A5A:  CLRF   45
2A5C:  MOVLW  0A
2A5E:  MOVWF  46
2A60:  CLRF   47
2A62:  CLRF   53
2A64:  CLRF   54
2A66:  CLRF   55
2A68:  CLRF   56
2A6A:  MOVLW  04
2A6C:  MOVWF  57
2A6E:  CLRF   5B
2A70:  CLRF   5A
2A72:  CLRF   5D
2A74:  CLRF   5C
2A76:  CLRF   xB1
2A78:  CLRF   xB0
2A7A:  CLRF   xAF
2A7C:  CLRF   xAE
2A7E:  CLRF   xB5
2A80:  CLRF   xB4
2A82:  CLRF   xB3
2A84:  CLRF   xB2
2A86:  CLRF   xB9
2A88:  CLRF   xB8
2A8A:  CLRF   xB7
2A8C:  CLRF   xB6
2A8E:  CLRF   xBD
2A90:  CLRF   xBC
2A92:  CLRF   xBB
2A94:  CLRF   xBA
2A96:  CLRF   xC1
2A98:  CLRF   xC0
2A9A:  CLRF   xBF
2A9C:  MOVLW  80
2A9E:  MOVWF  xBE
2AA0:  BSF    2A.7
2AA2:  BCF    xC2.0
2AA4:  CLRF   xC4
2AA6:  CLRF   xC3
2AA8:  CLRF   xC6
2AAA:  CLRF   xC5
2AAC:  CLRF   xC8
2AAE:  CLRF   xC7
2AB0:  CLRF   xCA
2AB2:  CLRF   xC9
2AB4:  CLRF   xCC
2AB6:  CLRF   xCB
2AB8:  CLRF   xCE
2ABA:  CLRF   xCD
2ABC:  CLRF   xD0
2ABE:  CLRF   xCF
2AC0:  BCF    xC2.1
2AC2:  CLRF   xD1
2AC4:  CLRF   xDB
2AC6:  CLRF   xDA
2AC8:  MOVF   FC1,W
2ACA:  ANDLW  C0
2ACC:  IORLW  0F
2ACE:  MOVWF  FC1
2AD0:  MOVLW  07
2AD2:  MOVWF  FB4
2AD4:  MOVLW  3E
2AD6:  MOVWF  48
2AD8:  MOVLW  20
2ADA:  MOVWF  49
2ADC:  MOVLW  5E
2ADE:  MOVWF  4A
2AE0:  CLRF   4B
2AE2:  CLRF   4C
2AE4:  CLRF   4D
2AE6:  CLRF   4E
2AE8:  CLRF   4F
2AEA:  CLRF   50
2AEC:  CLRF   51
2AEE:  CLRF   52
2AF0:  CLRF   5E
2AF2:  CLRF   5F
2AF4:  CLRF   60
2AF6:  CLRF   61
2AF8:  CLRF   62
2AFA:  CLRF   63
2AFC:  CLRF   64
2AFE:  CLRF   65
2B00:  CLRF   66
2B02:  CLRF   67
2B04:  CLRF   68
2B06:  CLRF   69
2B08:  CLRF   6A
2B0A:  CLRF   6B
2B0C:  CLRF   6C
2B0E:  CLRF   6D
2B10:  CLRF   6E
2B12:  CLRF   6F
2B14:  CLRF   70
2B16:  CLRF   71
2B18:  CLRF   72
2B1A:  CLRF   73
2B1C:  CLRF   74
2B1E:  CLRF   75
2B20:  CLRF   76
2B22:  CLRF   77
2B24:  CLRF   78
2B26:  CLRF   79
2B28:  CLRF   7A
2B2A:  CLRF   7B
2B2C:  CLRF   7C
2B2E:  CLRF   7D
2B30:  CLRF   7E
2B32:  CLRF   7F
2B34:  CLRF   x80
2B36:  CLRF   x81
2B38:  CLRF   x82
2B3A:  CLRF   x83
2B3C:  CLRF   x84
2B3E:  CLRF   x85
2B40:  CLRF   x86
2B42:  CLRF   x87
2B44:  CLRF   x88
2B46:  CLRF   x89
2B48:  CLRF   x8A
2B4A:  CLRF   x8B
2B4C:  CLRF   x8C
2B4E:  CLRF   x8D
2B50:  CLRF   x8E
2B52:  CLRF   x8F
2B54:  CLRF   x90
2B56:  CLRF   x91
2B58:  CLRF   x92
2B5A:  CLRF   x93
2B5C:  CLRF   x94
2B5E:  CLRF   x95
2B60:  CLRF   x96
2B62:  CLRF   x97
2B64:  CLRF   x98
2B66:  CLRF   x99
2B68:  CLRF   x9A
2B6A:  CLRF   x9B
2B6C:  CLRF   x9C
2B6E:  CLRF   x9D
2B70:  CLRF   x9E
2B72:  CLRF   x9F
2B74:  CLRF   xA0
2B76:  CLRF   xA1
2B78:  CLRF   xA2
2B7A:  CLRF   xA3
2B7C:  CLRF   xA4
2B7E:  CLRF   xA5
2B80:  CLRF   xA6
2B82:  CLRF   xA7
2B84:  CLRF   xA8
2B86:  CLRF   xA9
2B88:  CLRF   xAA
2B8A:  CLRF   xAB
2B8C:  CLRF   xAC
2B8E:  CLRF   xAD
....................    Motor_off; 
2B90:  BCF    F8B.2
2B92:  BCF    F94.2
....................    Motor2_off; 
2B94:  BCF    F8B.1
2B96:  BCF    F94.1
....................    ConfigInterrupciones(); 
2B98:  GOTO   0CDA
....................    //MensajeBienvenida(); 
....................    LeeEEPROM();  
2B9C:  GOTO   0D54
....................    LimitaValores(); 
2BA0:  GOTO   1168
....................    if(motor!=1){ 
2BA4:  DECFSZ 44,W
2BA6:  BRA    2BAA
2BA8:  BRA    2BB0
....................       MensajeBienvenida();  
2BAA:  GOTO   17C4
....................    }else{ 
2BAE:  BRA    2BC2
....................       if(luz==1) 
2BB0:  DECFSZ 45,W
2BB2:  BRA    2BB6
....................          estadofl=1; 
2BB4:  BSF    29.1
....................       if(luz==0) 
2BB6:  MOVF   45,F
2BB8:  BNZ   2BBC
....................          estadofl=0; 
2BBA:  BCF    29.1
....................       estadomv=1; 
2BBC:  BSF    29.2
....................       Menu=50; 
2BBE:  MOVLW  32
2BC0:  MOVWF  2B
....................    } 
....................    Motor_off; 
2BC2:  BCF    F8B.2
2BC4:  BCF    F94.2
....................    Motor2_off; 
2BC6:  BCF    F8B.1
2BC8:  BCF    F94.1
....................     
....................    if(UP && DOWN && RIGHT){ 
2BCA:  BSF    F92.5
2BCC:  BTFSC  F80.5
2BCE:  BRA    2D4A
2BD0:  BSF    F96.0
2BD2:  BTFSC  F84.0
2BD4:  BRA    2D4A
2BD6:  BSF    F96.1
2BD8:  BTFSC  F84.1
2BDA:  BRA    2D4A
....................       for(;;){ 
....................          if(velocidadInicial>15) 
2BDC:  MOVF   46,W
2BDE:  SUBLW  0F
2BE0:  BC    2BE6
....................             velocidadInicial=15; 
2BE2:  MOVLW  0F
2BE4:  MOVWF  46
....................          if(velocidadInicial<1) 
2BE6:  MOVF   46,F
2BE8:  BNZ   2BEE
....................             velocidadInicial=1; 
2BEA:  MOVLW  01
2BEC:  MOVWF  46
....................         
....................          lcd_gotoxy(1,1); 
2BEE:  MOVLW  01
2BF0:  MOVWF  xF2
2BF2:  MOVWF  xF3
2BF4:  CALL   16D4
....................          printf(lcd_putc,"Seleccione Velocidad"); 
2BF8:  MOVLW  E8
2BFA:  MOVWF  FF6
2BFC:  MOVLW  04
2BFE:  MOVWF  FF7
2C00:  CALL   17A4
....................          lcd_gotoxy(1,2); 
2C04:  MOVLW  01
2C06:  MOVWF  xF2
2C08:  MOVLW  02
2C0A:  MOVWF  xF3
2C0C:  CALL   16D4
....................          printf(lcd_putc,"Inicial   Ventilador"); 
2C10:  MOVLW  FE
2C12:  MOVWF  FF6
2C14:  MOVLW  04
2C16:  MOVWF  FF7
2C18:  CALL   17A4
....................          lcd_gotoxy(1,3); 
2C1C:  MOVLW  01
2C1E:  MOVWF  xF2
2C20:  MOVLW  03
2C22:  MOVWF  xF3
2C24:  CALL   16D4
....................          printf(lcd_putc,"     Vel: %02u       ",velocidadInicial); 
2C28:  MOVLW  14
2C2A:  MOVWF  FF6
2C2C:  MOVLW  05
2C2E:  MOVWF  FF7
2C30:  MOVLW  0A
2C32:  MOVWF  xE4
2C34:  CALL   182C
2C38:  MOVFF  46,E0
2C3C:  MOVLW  01
2C3E:  MOVWF  xE1
2C40:  CALL   1872
2C44:  MOVLW  22
2C46:  MOVWF  FF6
2C48:  MOVLW  05
2C4A:  MOVWF  FF7
2C4C:  MOVLW  07
2C4E:  MOVWF  xE4
2C50:  CALL   182C
....................          lcd_gotoxy(1,4); 
2C54:  MOVLW  01
2C56:  MOVWF  xF2
2C58:  MOVLW  04
2C5A:  MOVWF  xF3
2C5C:  CALL   16D4
....................          printf(lcd_putc,"                    ");       
2C60:  MOVLW  2A
2C62:  MOVWF  FF6
2C64:  MOVLW  05
2C66:  MOVWF  FF7
2C68:  CALL   17A4
....................           
....................          if(UP){   
2C6C:  BSF    F92.5
2C6E:  BTFSC  F80.5
2C70:  BRA    2C7C
....................             delay_ms(200);velocidadInicial++; 
2C72:  MOVLW  C8
2C74:  MOVWF  xF7
2C76:  CALL   0BEC
2C7A:  INCF   46,F
....................          } 
....................                 
....................          if(DOWN && Vel1>0)//Si oprime hacia abajo 
2C7C:  BSF    F96.0
2C7E:  BTFSC  F84.0
2C80:  BRA    2C90
2C82:  MOVF   57,F
2C84:  BZ    2C90
....................          {   
....................             delay_ms(200);velocidadInicial--; 
2C86:  MOVLW  C8
2C88:  MOVWF  xF7
2C8A:  CALL   0BEC
2C8E:  DECF   46,F
....................          } 
....................           
....................          if(IZQU)//Si oprime boton de Toma. 
2C90:  BSF    F96.2
2C92:  BTFSC  F84.2
2C94:  BRA    2D48
....................          {                   
....................             write_eeprom(24,velocidadInicial);//Guardar valor de Setpoint en eeprom 
2C96:  MOVLW  18
2C98:  MOVWF  FA9
2C9A:  MOVFF  46,FA8
2C9E:  BCF    FA6.6
2CA0:  BCF    FA6.7
2CA2:  BSF    FA6.2
2CA4:  MOVF   FF2,W
2CA6:  MOVWF  00
2CA8:  BCF    FF2.6
2CAA:  BCF    FF2.7
2CAC:  MOVLB  F
2CAE:  MOVLW  55
2CB0:  MOVWF  FA7
2CB2:  MOVLW  AA
2CB4:  MOVWF  FA7
2CB6:  BSF    FA6.1
2CB8:  BTFSC  FA6.1
2CBA:  BRA    2CB8
2CBC:  BCF    FA6.2
2CBE:  MOVF   00,W
2CC0:  IORWF  FF2,F
....................             delay_ms(20); 
2CC2:  MOVLW  14
2CC4:  MOVLB  0
2CC6:  MOVWF  xF7
2CC8:  CALL   0BEC
....................             lcd_gotoxy(1,1); 
2CCC:  MOVLW  01
2CCE:  MOVWF  xF2
2CD0:  MOVWF  xF3
2CD2:  CALL   16D4
....................             printf(lcd_putc,"                    "); 
2CD6:  MOVLW  40
2CD8:  MOVWF  FF6
2CDA:  MOVLW  05
2CDC:  MOVWF  FF7
2CDE:  CALL   17A4
....................             lcd_gotoxy(1,2); 
2CE2:  MOVLW  01
2CE4:  MOVWF  xF2
2CE6:  MOVLW  02
2CE8:  MOVWF  xF3
2CEA:  CALL   16D4
....................             printf(lcd_putc,"     Velocidad      "); 
2CEE:  MOVLW  56
2CF0:  MOVWF  FF6
2CF2:  MOVLW  05
2CF4:  MOVWF  FF7
2CF6:  CALL   17A4
....................             lcd_gotoxy(1,3); 
2CFA:  MOVLW  01
2CFC:  MOVWF  xF2
2CFE:  MOVLW  03
2D00:  MOVWF  xF3
2D02:  CALL   16D4
....................             printf(lcd_putc,"      Almacenada    "); 
2D06:  MOVLW  6C
2D08:  MOVWF  FF6
2D0A:  MOVLW  05
2D0C:  MOVWF  FF7
2D0E:  CALL   17A4
....................             lcd_gotoxy(1,4); 
2D12:  MOVLW  01
2D14:  MOVWF  xF2
2D16:  MOVLW  04
2D18:  MOVWF  xF3
2D1A:  CALL   16D4
....................             printf(lcd_putc,"                    ");  
2D1E:  MOVLW  82
2D20:  MOVWF  FF6
2D22:  MOVLW  05
2D24:  MOVWF  FF7
2D26:  CALL   17A4
....................             delay_ms(1000); 
2D2A:  MOVLW  04
2D2C:  MOVWF  xE0
2D2E:  MOVLW  FA
2D30:  MOVWF  xF7
2D32:  CALL   0BEC
2D36:  DECFSZ xE0,F
2D38:  BRA    2D2E
....................             printf(lcd_putc,"\f"); 
2D3A:  MOVLW  0C
2D3C:  MOVWF  xF1
2D3E:  CALL   173E
....................             lcd_init(); 
2D42:  CALL   0C7C
....................             reset_cpu(); 
2D46:  RESET
....................          } 
....................       } 
2D48:  BRA    2BDC
....................    } 
....................     
....................    if(UP && RIGHT){ 
2D4A:  BSF    F92.5
2D4C:  BTFSC  F80.5
2D4E:  BRA    2F2A
2D50:  BSF    F96.1
2D52:  BTFSC  F84.1
2D54:  BRA    2F2A
....................       for(;;){ 
....................          lcd_gotoxy(1,1); 
2D56:  MOVLW  01
2D58:  MOVWF  xF2
2D5A:  MOVWF  xF3
2D5C:  CALL   16D4
....................          printf(lcd_putc,"  Tiempo de Trabajo  "); 
2D60:  MOVLW  98
2D62:  MOVWF  FF6
2D64:  MOVLW  05
2D66:  MOVWF  FF7
2D68:  CALL   17A4
....................          lcd_gotoxy(1,2); 
2D6C:  MOVLW  01
2D6E:  MOVWF  xF2
2D70:  MOVLW  02
2D72:  MOVWF  xF3
2D74:  CALL   16D4
....................          printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2D78:  MOVLW  AE
2D7A:  MOVWF  FF6
2D7C:  MOVLW  05
2D7E:  MOVWF  FF7
2D80:  MOVLW  0B
2D82:  MOVWF  xE4
2D84:  CALL   182C
2D88:  MOVLW  08
2D8A:  MOVWF  FE9
2D8C:  MOVFF  5B,E1
2D90:  MOVFF  5A,E0
2D94:  CALL   18D8
2D98:  MOVLW  20
2D9A:  MOVWF  xF1
2D9C:  CALL   173E
2DA0:  MOVLW  20
2DA2:  MOVWF  xF1
2DA4:  CALL   173E
2DA8:  MOVLW  20
2DAA:  MOVWF  xF1
2DAC:  CALL   173E
....................          lcd_gotoxy(1,4); 
2DB0:  MOVLW  01
2DB2:  MOVWF  xF2
2DB4:  MOVLW  04
2DB6:  MOVWF  xF3
2DB8:  CALL   16D4
....................          printf(lcd_putc," RESET= Oprima < "); 
2DBC:  MOVLW  C2
2DBE:  MOVWF  FF6
2DC0:  MOVLW  05
2DC2:  MOVWF  FF7
2DC4:  CALL   17A4
....................           
....................          if(IZQU){ 
2DC8:  BSF    F96.2
2DCA:  BTFSC  F84.2
2DCC:  BRA    2F28
....................          delay_ms(100); 
2DCE:  MOVLW  64
2DD0:  MOVWF  xF7
2DD2:  CALL   0BEC
....................             if(IZQU){ 
2DD6:  BSF    F96.2
2DD8:  BTFSC  F84.2
2DDA:  BRA    2F28
....................                write_eeprom(20,0); 
2DDC:  MOVLW  14
2DDE:  MOVWF  FA9
2DE0:  CLRF   FA8
2DE2:  BCF    FA6.6
2DE4:  BCF    FA6.7
2DE6:  BSF    FA6.2
2DE8:  MOVF   FF2,W
2DEA:  MOVWF  00
2DEC:  BCF    FF2.6
2DEE:  BCF    FF2.7
2DF0:  MOVLB  F
2DF2:  MOVLW  55
2DF4:  MOVWF  FA7
2DF6:  MOVLW  AA
2DF8:  MOVWF  FA7
2DFA:  BSF    FA6.1
2DFC:  BTFSC  FA6.1
2DFE:  BRA    2DFC
2E00:  BCF    FA6.2
2E02:  MOVF   00,W
2E04:  IORWF  FF2,F
....................                delay_ms(20); 
2E06:  MOVLW  14
2E08:  MOVLB  0
2E0A:  MOVWF  xF7
2E0C:  CALL   0BEC
....................                write_eeprom(21,0); 
2E10:  MOVLW  15
2E12:  MOVWF  FA9
2E14:  CLRF   FA8
2E16:  BCF    FA6.6
2E18:  BCF    FA6.7
2E1A:  BSF    FA6.2
2E1C:  MOVF   FF2,W
2E1E:  MOVWF  00
2E20:  BCF    FF2.6
2E22:  BCF    FF2.7
2E24:  MOVLB  F
2E26:  MOVLW  55
2E28:  MOVWF  FA7
2E2A:  MOVLW  AA
2E2C:  MOVWF  FA7
2E2E:  BSF    FA6.1
2E30:  BTFSC  FA6.1
2E32:  BRA    2E30
2E34:  BCF    FA6.2
2E36:  MOVF   00,W
2E38:  IORWF  FF2,F
....................                delay_ms(20); 
2E3A:  MOVLW  14
2E3C:  MOVLB  0
2E3E:  MOVWF  xF7
2E40:  CALL   0BEC
....................                write_eeprom(18,0); 
2E44:  MOVLW  12
2E46:  MOVWF  FA9
2E48:  CLRF   FA8
2E4A:  BCF    FA6.6
2E4C:  BCF    FA6.7
2E4E:  BSF    FA6.2
2E50:  MOVF   FF2,W
2E52:  MOVWF  00
2E54:  BCF    FF2.6
2E56:  BCF    FF2.7
2E58:  MOVLB  F
2E5A:  MOVLW  55
2E5C:  MOVWF  FA7
2E5E:  MOVLW  AA
2E60:  MOVWF  FA7
2E62:  BSF    FA6.1
2E64:  BTFSC  FA6.1
2E66:  BRA    2E64
2E68:  BCF    FA6.2
2E6A:  MOVF   00,W
2E6C:  IORWF  FF2,F
....................                delay_ms(20); 
2E6E:  MOVLW  14
2E70:  MOVLB  0
2E72:  MOVWF  xF7
2E74:  CALL   0BEC
....................                write_eeprom(19,0); 
2E78:  MOVLW  13
2E7A:  MOVWF  FA9
2E7C:  CLRF   FA8
2E7E:  BCF    FA6.6
2E80:  BCF    FA6.7
2E82:  BSF    FA6.2
2E84:  MOVF   FF2,W
2E86:  MOVWF  00
2E88:  BCF    FF2.6
2E8A:  BCF    FF2.7
2E8C:  MOVLB  F
2E8E:  MOVLW  55
2E90:  MOVWF  FA7
2E92:  MOVLW  AA
2E94:  MOVWF  FA7
2E96:  BSF    FA6.1
2E98:  BTFSC  FA6.1
2E9A:  BRA    2E98
2E9C:  BCF    FA6.2
2E9E:  MOVF   00,W
2EA0:  IORWF  FF2,F
....................                delay_ms(20); 
2EA2:  MOVLW  14
2EA4:  MOVLB  0
2EA6:  MOVWF  xF7
2EA8:  CALL   0BEC
....................                lcd_gotoxy(1,1); 
2EAC:  MOVLW  01
2EAE:  MOVWF  xF2
2EB0:  MOVWF  xF3
2EB2:  CALL   16D4
....................                printf(lcd_putc,"                    "); 
2EB6:  MOVLW  D4
2EB8:  MOVWF  FF6
2EBA:  MOVLW  05
2EBC:  MOVWF  FF7
2EBE:  CALL   17A4
....................                lcd_gotoxy(1,2); 
2EC2:  MOVLW  01
2EC4:  MOVWF  xF2
2EC6:  MOVLW  02
2EC8:  MOVWF  xF3
2ECA:  CALL   16D4
....................                printf(lcd_putc,"  Borrando  Tiempo  "); 
2ECE:  MOVLW  EA
2ED0:  MOVWF  FF6
2ED2:  MOVLW  05
2ED4:  MOVWF  FF7
2ED6:  CALL   17A4
....................                lcd_gotoxy(1,3); 
2EDA:  MOVLW  01
2EDC:  MOVWF  xF2
2EDE:  MOVLW  03
2EE0:  MOVWF  xF3
2EE2:  CALL   16D4
....................                printf(lcd_putc,"    de Trabajo      "); 
2EE6:  MOVLW  00
2EE8:  MOVWF  FF6
2EEA:  MOVLW  06
2EEC:  MOVWF  FF7
2EEE:  CALL   17A4
....................                lcd_gotoxy(1,4); 
2EF2:  MOVLW  01
2EF4:  MOVWF  xF2
2EF6:  MOVLW  04
2EF8:  MOVWF  xF3
2EFA:  CALL   16D4
....................                printf(lcd_putc,"                    ");  
2EFE:  MOVLW  16
2F00:  MOVWF  FF6
2F02:  MOVLW  06
2F04:  MOVWF  FF7
2F06:  CALL   17A4
....................                delay_ms(1000); 
2F0A:  MOVLW  04
2F0C:  MOVWF  xE0
2F0E:  MOVLW  FA
2F10:  MOVWF  xF7
2F12:  CALL   0BEC
2F16:  DECFSZ xE0,F
2F18:  BRA    2F0E
....................                printf(lcd_putc,"\f"); 
2F1A:  MOVLW  0C
2F1C:  MOVWF  xF1
2F1E:  CALL   173E
....................                lcd_init(); 
2F22:  CALL   0C7C
....................                reset_cpu(); 
2F26:  RESET
....................             } 
....................          } 
....................       } 
2F28:  BRA    2D56
....................    } 
....................  
....................    while(true){ 
....................    //leeControlRemoto(); 
....................    cuentaTiempoTrabajoFiltro(); 
2F2A:  GOTO   198A
....................    if(VelMotor==20){ 
2F2E:  MOVF   xD1,W
2F30:  SUBLW  14
2F32:  BNZ   2F40
....................       Motor_on; 
2F34:  BSF    F8B.2
2F36:  BCF    F94.2
....................       Motor2_on;  
2F38:  BSF    F8B.1
2F3A:  BCF    F94.1
....................       set_timer0(0); 
2F3C:  CLRF   FD7
2F3E:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
2F40:  MOVF   xD1,F
2F42:  BNZ   2F50
....................       Motor_off; 
2F44:  BCF    F8B.2
2F46:  BCF    F94.2
....................       Motor2_off;  
2F48:  BCF    F8B.1
2F4A:  BCF    F94.1
....................       set_timer0(0); 
2F4C:  CLRF   FD7
2F4E:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2F50:  MOVF   2B,F
2F52:  BTFSS  FD8.2
2F54:  BRA    3360
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2F56:  MOVLW  01
2F58:  MOVWF  xF2
2F5A:  MOVWF  xF3
2F5C:  CALL   16D4
....................          printf(lcd_putc,"     Ingrese        "); 
2F60:  MOVLW  2C
2F62:  MOVWF  FF6
2F64:  MOVLW  06
2F66:  MOVWF  FF7
2F68:  CALL   17A4
....................          lcd_gotoxy(1,2); 
2F6C:  MOVLW  01
2F6E:  MOVWF  xF2
2F70:  MOVLW  02
2F72:  MOVWF  xF3
2F74:  CALL   16D4
....................          printf(lcd_putc,"    Contraseña      "); 
2F78:  MOVLW  42
2F7A:  MOVWF  FF6
2F7C:  MOVLW  06
2F7E:  MOVWF  FF7
2F80:  CALL   17A4
....................          lcd_gotoxy(1,3); 
2F84:  MOVLW  01
2F86:  MOVWF  xF2
2F88:  MOVLW  03
2F8A:  MOVWF  xF3
2F8C:  CALL   16D4
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2F90:  MOVLW  58
2F92:  MOVWF  FF6
2F94:  MOVLW  06
2F96:  MOVWF  FF7
2F98:  MOVLW  0A
2F9A:  MOVWF  xE4
2F9C:  CALL   182C
2FA0:  MOVFF  4B,E0
2FA4:  MOVLW  1F
2FA6:  MOVWF  xE1
2FA8:  CALL   1B36
2FAC:  MOVFF  4C,E0
2FB0:  MOVLW  1F
2FB2:  MOVWF  xE1
2FB4:  CALL   1B36
2FB8:  MOVFF  4D,E0
2FBC:  MOVLW  1F
2FBE:  MOVWF  xE1
2FC0:  CALL   1B36
2FC4:  MOVFF  4E,E0
2FC8:  MOVLW  1F
2FCA:  MOVWF  xE1
2FCC:  CALL   1B36
2FD0:  MOVLW  20
2FD2:  MOVWF  xF1
2FD4:  CALL   173E
2FD8:  MOVLW  20
2FDA:  MOVWF  xF1
2FDC:  CALL   173E
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2FE0:  MOVFF  2E,F2
2FE4:  MOVLW  04
2FE6:  MOVWF  xF3
2FE8:  CALL   16D4
....................          lcd_putc(t[2]); 
2FEC:  MOVFF  4A,F1
2FF0:  CALL   173E
....................           
....................          if(unidad>11&&unidad<14){ 
2FF4:  MOVF   2E,W
2FF6:  SUBLW  0B
2FF8:  BC    3018
2FFA:  MOVF   2E,W
2FFC:  SUBLW  0D
2FFE:  BNC   3018
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3000:  MOVLW  01
3002:  SUBWF  2E,W
3004:  MOVWF  xE0
3006:  MOVWF  xF2
3008:  MOVLW  04
300A:  MOVWF  xF3
300C:  CALL   16D4
....................             lcd_putc(t[1]); 
3010:  MOVFF  49,F1
3014:  CALL   173E
....................          } 
....................           
....................          Cambio=OFF; 
3018:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
301A:  BSF    F92.5
301C:  BTFSC  F80.5
301E:  BRA    3052
....................          delay_ms(20); 
3020:  MOVLW  14
3022:  MOVWF  xF7
3024:  CALL   0BEC
....................          if(UP){ 
3028:  BSF    F92.5
302A:  BTFSC  F80.5
302C:  BRA    3050
....................             if(Flanco == 0) { 
302E:  BTFSC  29.3
3030:  BRA    3050
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3032:  MOVLW  0B
3034:  SUBWF  2E,W
3036:  CLRF   03
3038:  ADDLW  4B
303A:  MOVWF  FE9
303C:  MOVLW  00
303E:  ADDWFC 03,W
3040:  MOVWF  FEA
3042:  INCF   FEF,F
3044:  BSF    29.3
3046:  MOVLW  1E
3048:  MOVWF  xF7
304A:  CALL   0BEC
304E:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3050:  BRA    3054
....................          Flanco = 0; 
3052:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3054:  BSF    F96.0
3056:  BTFSC  F84.0
3058:  BRA    308C
....................          delay_ms(20); 
305A:  MOVLW  14
305C:  MOVWF  xF7
305E:  CALL   0BEC
....................          if(DOWN){ 
3062:  BSF    F96.0
3064:  BTFSC  F84.0
3066:  BRA    308A
....................             if(Flanco2 == 0) { 
3068:  BTFSC  29.5
306A:  BRA    308A
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
306C:  MOVLW  0B
306E:  SUBWF  2E,W
3070:  CLRF   03
3072:  ADDLW  4B
3074:  MOVWF  FE9
3076:  MOVLW  00
3078:  ADDWFC 03,W
307A:  MOVWF  FEA
307C:  DECF   FEF,F
307E:  BSF    29.5
3080:  MOVLW  1E
3082:  MOVWF  xF7
3084:  CALL   0BEC
3088:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
308A:  BRA    308E
....................          Flanco2 = 0; 
308C:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
308E:  BSF    F96.1
3090:  BTFSC  F84.1
3092:  BRA    30BE
....................          delay_ms(20); 
3094:  MOVLW  14
3096:  MOVWF  xF7
3098:  CALL   0BEC
....................          if(RIGHT){ 
309C:  BSF    F96.1
309E:  BTFSC  F84.1
30A0:  BRA    30BC
....................             if(Flanco1 == 0) { 
30A2:  BTFSC  29.4
30A4:  BRA    30BC
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
30A6:  BSF    29.4
30A8:  INCF   2E,F
30AA:  MOVLW  1E
30AC:  MOVWF  xF7
30AE:  CALL   0BEC
30B2:  MOVLW  0C
30B4:  MOVWF  xF1
30B6:  CALL   173E
30BA:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
30BC:  BRA    30C0
....................          Flanco1 = 0; 
30BE:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
30C0:  BSF    F96.2
30C2:  BTFSC  F84.2
30C4:  BRA    30F0
....................          delay_ms(150); 
30C6:  MOVLW  96
30C8:  MOVWF  xF7
30CA:  CALL   0BEC
....................          if(IZQU){ 
30CE:  BSF    F96.2
30D0:  BTFSC  F84.2
30D2:  BRA    30EE
....................             if(Flanco3 == 0){ 
30D4:  BTFSC  29.6
30D6:  BRA    30EE
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
30D8:  BSF    29.6
30DA:  DECF   2E,F
30DC:  MOVLW  1E
30DE:  MOVWF  xF7
30E0:  CALL   0BEC
30E4:  MOVLW  0C
30E6:  MOVWF  xF1
30E8:  CALL   173E
30EC:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
30EE:  BRA    30F2
....................         Flanco3 = 0; 
30F0:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
30F2:  MOVLW  0B
30F4:  SUBWF  2E,W
30F6:  CLRF   03
30F8:  ADDLW  4B
30FA:  MOVWF  FE9
30FC:  MOVLW  00
30FE:  ADDWFC 03,W
3100:  MOVWF  FEA
3102:  BTFSC  FEF.7
3104:  BRA    3108
3106:  BRA    311C
....................          clave[unidad-11]=9; 
3108:  MOVLW  0B
310A:  SUBWF  2E,W
310C:  CLRF   03
310E:  ADDLW  4B
3110:  MOVWF  FE9
3112:  MOVLW  00
3114:  ADDWFC 03,W
3116:  MOVWF  FEA
3118:  MOVLW  09
311A:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
311C:  MOVLW  0B
311E:  SUBWF  2E,W
3120:  CLRF   03
3122:  ADDLW  4B
3124:  MOVWF  FE9
3126:  MOVLW  00
3128:  ADDWFC 03,W
312A:  MOVWF  FEA
312C:  BTFSC  FEF.7
312E:  BRA    3148
3130:  MOVF   FEF,W
3132:  SUBLW  09
3134:  BC    3148
....................          clave[unidad-11]=0; 
3136:  MOVLW  0B
3138:  SUBWF  2E,W
313A:  CLRF   03
313C:  ADDLW  4B
313E:  MOVWF  FE9
3140:  MOVLW  00
3142:  ADDWFC 03,W
3144:  MOVWF  FEA
3146:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3148:  MOVF   2E,W
314A:  SUBLW  0A
314C:  BNC   3152
....................          unidad=11; 
314E:  MOVLW  0B
3150:  MOVWF  2E
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
3152:  MOVF   2E,W
3154:  SUBLW  0E
3156:  BTFSC  FD8.0
3158:  BRA    3360
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
315A:  MOVF   4B,W
315C:  SUBLW  03
315E:  BNZ   3242
3160:  MOVF   4C,W
3162:  SUBLW  08
3164:  BNZ   3242
3166:  MOVF   4D,W
3168:  SUBLW  09
316A:  BNZ   3242
316C:  MOVF   4E,W
316E:  SUBLW  02
3170:  BNZ   3242
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
3172:  CLRF   FA9
3174:  CLRF   FA8
3176:  BCF    FA6.6
3178:  BCF    FA6.7
317A:  BSF    FA6.2
317C:  MOVF   FF2,W
317E:  MOVWF  00
3180:  BCF    FF2.6
3182:  BCF    FF2.7
3184:  MOVLB  F
3186:  MOVLW  55
3188:  MOVWF  FA7
318A:  MOVLW  AA
318C:  MOVWF  FA7
318E:  BSF    FA6.1
3190:  BTFSC  FA6.1
3192:  BRA    3190
3194:  BCF    FA6.2
3196:  MOVF   00,W
3198:  IORWF  FF2,F
319A:  MOVLW  14
319C:  MOVLB  0
319E:  MOVWF  xF7
31A0:  CALL   0BEC
31A4:  MOVLW  01
31A6:  MOVWF  FA9
31A8:  CLRF   FA8
31AA:  BCF    FA6.6
31AC:  BCF    FA6.7
31AE:  BSF    FA6.2
31B0:  MOVF   FF2,W
31B2:  MOVWF  00
31B4:  BCF    FF2.6
31B6:  BCF    FF2.7
31B8:  MOVLB  F
31BA:  MOVLW  55
31BC:  MOVWF  FA7
31BE:  MOVLW  AA
31C0:  MOVWF  FA7
31C2:  BSF    FA6.1
31C4:  BTFSC  FA6.1
31C6:  BRA    31C4
31C8:  BCF    FA6.2
31CA:  MOVF   00,W
31CC:  IORWF  FF2,F
31CE:  MOVLW  14
31D0:  MOVLB  0
31D2:  MOVWF  xF7
31D4:  CALL   0BEC
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
31D8:  MOVLW  02
31DA:  MOVWF  FA9
31DC:  CLRF   FA8
31DE:  BCF    FA6.6
31E0:  BCF    FA6.7
31E2:  BSF    FA6.2
31E4:  MOVF   FF2,W
31E6:  MOVWF  00
31E8:  BCF    FF2.6
31EA:  BCF    FF2.7
31EC:  MOVLB  F
31EE:  MOVLW  55
31F0:  MOVWF  FA7
31F2:  MOVLW  AA
31F4:  MOVWF  FA7
31F6:  BSF    FA6.1
31F8:  BTFSC  FA6.1
31FA:  BRA    31F8
31FC:  BCF    FA6.2
31FE:  MOVF   00,W
3200:  IORWF  FF2,F
3202:  MOVLW  14
3204:  MOVLB  0
3206:  MOVWF  xF7
3208:  CALL   0BEC
320C:  MOVLW  03
320E:  MOVWF  FA9
3210:  CLRF   FA8
3212:  BCF    FA6.6
3214:  BCF    FA6.7
3216:  BSF    FA6.2
3218:  MOVF   FF2,W
321A:  MOVWF  00
321C:  BCF    FF2.6
321E:  BCF    FF2.7
3220:  MOVLB  F
3222:  MOVLW  55
3224:  MOVWF  FA7
3226:  MOVLW  AA
3228:  MOVWF  FA7
322A:  BSF    FA6.1
322C:  BTFSC  FA6.1
322E:  BRA    322C
3230:  BCF    FA6.2
3232:  MOVF   00,W
3234:  IORWF  FF2,F
3236:  MOVLW  14
3238:  MOVLB  0
323A:  MOVWF  xF7
323C:  CALL   0BEC
....................              reset_cpu(); 
3240:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
3242:  MOVF   4F,W
3244:  SUBWF  4B,W
3246:  BNZ   32E6
3248:  MOVF   50,W
324A:  SUBWF  4C,W
324C:  BNZ   32E6
324E:  MOVF   51,W
3250:  SUBWF  4D,W
3252:  BNZ   32E6
3254:  MOVF   52,W
3256:  SUBWF  4E,W
3258:  BNZ   32E6
....................             lcd_gotoxy(1,1); 
325A:  MOVLW  01
325C:  MOVWF  xF2
325E:  MOVWF  xF3
3260:  CALL   16D4
....................             printf(lcd_putc,"                   "); 
3264:  MOVLW  6E
3266:  MOVWF  FF6
3268:  MOVLW  06
326A:  MOVWF  FF7
326C:  CALL   17A4
....................             lcd_gotoxy(1,2); 
3270:  MOVLW  01
3272:  MOVWF  xF2
3274:  MOVLW  02
3276:  MOVWF  xF3
3278:  CALL   16D4
....................             printf(lcd_putc,"     Contraseña    "); 
327C:  MOVLW  82
327E:  MOVWF  FF6
3280:  MOVLW  06
3282:  MOVWF  FF7
3284:  CALL   17A4
....................             lcd_gotoxy(1,3); 
3288:  MOVLW  01
328A:  MOVWF  xF2
328C:  MOVLW  03
328E:  MOVWF  xF3
3290:  CALL   16D4
....................             printf(lcd_putc,"      Correcta     "); 
3294:  MOVLW  96
3296:  MOVWF  FF6
3298:  MOVLW  06
329A:  MOVWF  FF7
329C:  CALL   17A4
....................             lcd_gotoxy(1,4); 
32A0:  MOVLW  01
32A2:  MOVWF  xF2
32A4:  MOVLW  04
32A6:  MOVWF  xF3
32A8:  CALL   16D4
....................             printf(lcd_putc,"                   "); 
32AC:  MOVLW  AA
32AE:  MOVWF  FF6
32B0:  MOVLW  06
32B2:  MOVWF  FF7
32B4:  CALL   17A4
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
32B8:  MOVLW  04
32BA:  MOVWF  xE0
32BC:  MOVLW  FA
32BE:  MOVWF  xF7
32C0:  CALL   0BEC
32C4:  DECFSZ xE0,F
32C6:  BRA    32BC
32C8:  MOVLW  32
32CA:  MOVWF  2B
32CC:  MOVLW  0B
32CE:  MOVWF  2E
32D0:  MOVLW  0C
32D2:  MOVWF  xF1
32D4:  CALL   173E
32D8:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
32DA:  CLRF   4B
32DC:  CLRF   4C
32DE:  CLRF   4D
32E0:  CLRF   4E
32E2:  BSF    2A.7
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
32E4:  BRA    3360
....................             lcd_gotoxy(1,1); 
32E6:  MOVLW  01
32E8:  MOVWF  xF2
32EA:  MOVWF  xF3
32EC:  CALL   16D4
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
32F0:  MOVLW  01
32F2:  MOVWF  xF2
32F4:  MOVLW  02
32F6:  MOVWF  xF3
32F8:  CALL   16D4
....................             printf(lcd_putc,"     Contraseña    "); 
32FC:  MOVLW  BE
32FE:  MOVWF  FF6
3300:  MOVLW  06
3302:  MOVWF  FF7
3304:  CALL   17A4
....................             lcd_gotoxy(1,3); 
3308:  MOVLW  01
330A:  MOVWF  xF2
330C:  MOVLW  03
330E:  MOVWF  xF3
3310:  CALL   16D4
....................             printf(lcd_putc,"     Incorrecta    "); 
3314:  MOVLW  D2
3316:  MOVWF  FF6
3318:  MOVLW  06
331A:  MOVWF  FF7
331C:  CALL   17A4
....................             lcd_gotoxy(1,4); 
3320:  MOVLW  01
3322:  MOVWF  xF2
3324:  MOVLW  04
3326:  MOVWF  xF3
3328:  CALL   16D4
....................             printf(lcd_putc,"                   "); 
332C:  MOVLW  E6
332E:  MOVWF  FF6
3330:  MOVLW  06
3332:  MOVWF  FF7
3334:  CALL   17A4
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
3338:  MOVLW  04
333A:  MOVWF  xE0
333C:  MOVLW  FA
333E:  MOVWF  xF7
3340:  CALL   0BEC
3344:  DECFSZ xE0,F
3346:  BRA    333C
3348:  MOVLW  0B
334A:  MOVWF  2E
334C:  MOVLW  0C
334E:  MOVWF  xF1
3350:  CALL   173E
3354:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3356:  CLRF   4B
3358:  CLRF   4C
335A:  CLRF   4D
335C:  CLRF   4E
335E:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
3360:  DECFSZ 2B,W
3362:  BRA    359A
....................       EliminaRuido(); 
3364:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3368:  MOVLW  01
336A:  MOVWF  xF2
336C:  MOVWF  xF3
336E:  CALL   16D4
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
3372:  MOVLW  FA
3374:  MOVWF  FF6
3376:  MOVLW  06
3378:  MOVWF  FF7
337A:  CALL   17A4
....................          mensajes(1+paso,2); 
337E:  MOVLW  01
3380:  ADDWF  47,W
3382:  MOVWF  xE0
3384:  MOVWF  xE1
3386:  MOVLW  02
3388:  MOVWF  xE2
338A:  CALL   1BFE
....................          mensajes(2+paso,3); 
338E:  MOVLW  02
3390:  ADDWF  47,W
3392:  MOVWF  xE0
3394:  MOVWF  xE1
3396:  MOVLW  03
3398:  MOVWF  xE2
339A:  CALL   1BFE
....................          mensajes(3+paso,4); 
339E:  MOVLW  03
33A0:  ADDWF  47,W
33A2:  MOVWF  xE0
33A4:  MOVWF  xE1
33A6:  MOVLW  04
33A8:  MOVWF  xE2
33AA:  CALL   1BFE
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
33AE:  MOVLW  01
33B0:  MOVWF  xF2
33B2:  MOVFF  2F,F3
33B6:  CALL   16D4
....................         lcd_putc(t[0]); 
33BA:  MOVFF  48,F1
33BE:  CALL   173E
....................  
....................         if(Flecha==2) 
33C2:  MOVF   2F,W
33C4:  SUBLW  02
33C6:  BNZ   33F0
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
33C8:  MOVLW  01
33CA:  MOVWF  xF2
33CC:  MOVLW  04
33CE:  MOVWF  xF3
33D0:  CALL   16D4
....................             lcd_putc(t[1]); 
33D4:  MOVFF  49,F1
33D8:  CALL   173E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
33DC:  MOVLW  01
33DE:  MOVWF  xF2
33E0:  MOVLW  03
33E2:  MOVWF  xF3
33E4:  CALL   16D4
....................             lcd_putc(t[1]); 
33E8:  MOVFF  49,F1
33EC:  CALL   173E
....................           } 
....................          
....................         if(Flecha==4) 
33F0:  MOVF   2F,W
33F2:  SUBLW  04
33F4:  BNZ   341E
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
33F6:  MOVLW  01
33F8:  MOVWF  xF2
33FA:  MOVLW  02
33FC:  MOVWF  xF3
33FE:  CALL   16D4
....................             lcd_putc(t[1]); 
3402:  MOVFF  49,F1
3406:  CALL   173E
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
340A:  MOVLW  01
340C:  MOVWF  xF2
340E:  MOVLW  03
3410:  MOVWF  xF3
3412:  CALL   16D4
....................             lcd_putc(t[1]); 
3416:  MOVFF  49,F1
341A:  CALL   173E
....................           } 
....................          
....................         if(Flecha==3) 
341E:  MOVF   2F,W
3420:  SUBLW  03
3422:  BNZ   344C
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
3424:  MOVLW  01
3426:  MOVWF  xF2
3428:  MOVLW  04
342A:  MOVWF  xF3
342C:  CALL   16D4
....................             lcd_putc(t[1]); 
3430:  MOVFF  49,F1
3434:  CALL   173E
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
3438:  MOVLW  01
343A:  MOVWF  xF2
343C:  MOVLW  02
343E:  MOVWF  xF3
3440:  CALL   16D4
....................             lcd_putc(t[1]); 
3444:  MOVFF  49,F1
3448:  CALL   173E
....................           } 
....................          Cambio=OFF; 
344C:  BCF    2A.7
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
344E:  BSF    F92.5
3450:  BTFSC  F80.5
3452:  BRA    347E
....................          delay_ms(20); 
3454:  MOVLW  14
3456:  MOVWF  xF7
3458:  CALL   0BEC
....................          if(UP){ 
345C:  BSF    F92.5
345E:  BTFSC  F80.5
3460:  BRA    347C
....................             if(Flanco == 0){ 
3462:  BTFSC  29.3
3464:  BRA    347C
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
3466:  DECF   31,F
3468:  DECF   2F,F
346A:  MOVLW  01
346C:  ADDWF  2F,W
346E:  MOVWF  30
3470:  BSF    29.3
3472:  MOVLW  1E
3474:  MOVWF  xF7
3476:  CALL   0BEC
347A:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
347C:  BRA    3480
....................          Flanco = 0; 
347E:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3480:  BSF    F96.0
3482:  BTFSC  F84.0
3484:  BRA    34B0
....................          delay_ms(20); 
3486:  MOVLW  14
3488:  MOVWF  xF7
348A:  CALL   0BEC
....................          if(DOWN){ 
348E:  BSF    F96.0
3490:  BTFSC  F84.0
3492:  BRA    34AE
....................             if(Flanco2 == 0){ 
3494:  BTFSC  29.5
3496:  BRA    34AE
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3498:  INCF   31,F
349A:  INCF   2F,F
349C:  MOVLW  01
349E:  SUBWF  2F,W
34A0:  MOVWF  30
34A2:  BSF    29.5
34A4:  MOVLW  1E
34A6:  MOVWF  xF7
34A8:  CALL   0BEC
34AC:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
34AE:  BRA    34B2
....................          Flanco2 = 0; 
34B0:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
34B2:  MOVF   31,W
34B4:  SUBWF  33,W
34B6:  BC    34C8
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
34B8:  INCF   47,F
34BA:  MOVFF  31,33
34BE:  MOVLW  02
34C0:  SUBWF  33,W
34C2:  MOVWF  32
34C4:  MOVLW  04
34C6:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
34C8:  MOVF   32,W
34CA:  SUBWF  31,W
34CC:  BC    34DE
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
34CE:  DECF   47,F
34D0:  MOVFF  31,32
34D4:  MOVLW  02
34D6:  ADDWF  32,W
34D8:  MOVWF  33
34DA:  MOVLW  02
34DC:  MOVWF  2F
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
34DE:  MOVF   31,W
34E0:  SUBWF  2C,W
34E2:  BC    34F6
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
34E4:  MOVFF  2D,31
34E8:  MOVLW  02
34EA:  MOVWF  2F
34EC:  CLRF   47
34EE:  MOVFF  31,32
34F2:  ADDWF  32,W
34F4:  MOVWF  33
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
34F6:  MOVF   2D,W
34F8:  SUBWF  31,W
34FA:  BC    3512
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
34FC:  MOVFF  2C,31
3500:  MOVLW  04
3502:  MOVWF  2F
3504:  SUBWF  2C,W
3506:  MOVWF  47
3508:  MOVFF  31,33
350C:  MOVLW  02
350E:  SUBWF  33,W
3510:  MOVWF  32
....................       } 
....................          
....................       if(paso<0) 
3512:  BTFSC  47.7
3514:  BRA    3518
3516:  BRA    351A
....................          paso=0; 
3518:  CLRF   47
....................           
....................       if(RIGHT){// Si oprime derecha 
351A:  BSF    F96.1
351C:  BTFSC  F84.1
351E:  BRA    3566
....................          delay_ms(20); 
3520:  MOVLW  14
3522:  MOVWF  xF7
3524:  CALL   0BEC
....................          if(RIGHT){ 
3528:  BSF    F96.1
352A:  BTFSC  F84.1
352C:  BRA    3562
....................             if(Flanco1 == 0){ 
352E:  BTFSC  29.4
3530:  BRA    3562
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
3532:  BSF    29.4
3534:  MOVFF  31,2B
3538:  MOVLW  03
353A:  MOVWF  2F
353C:  MOVLW  02
353E:  MOVWF  xE0
3540:  MOVLW  96
3542:  MOVWF  xF7
3544:  CALL   0BEC
3548:  DECFSZ xE0,F
354A:  BRA    3540
354C:  MOVLW  0C
354E:  MOVWF  xF1
3550:  CALL   173E
....................                if(Menu==6){ 
3554:  MOVF   2B,W
3556:  SUBLW  06
3558:  BNZ   3562
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
355A:  CLRF   4B
355C:  CLRF   4C
355E:  CLRF   4D
3560:  CLRF   4E
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
3562:  BSF    2A.7
....................       }else{ 
3564:  BRA    3568
....................         Flanco1 = 0; 
3566:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
3568:  BSF    F96.2
356A:  BTFSC  F84.2
356C:  BRA    359A
....................          delay_ms(20); 
356E:  MOVLW  14
3570:  MOVWF  xF7
3572:  CALL   0BEC
....................          if(IZQU){ 
3576:  BSF    F96.2
3578:  BTFSC  F84.2
357A:  BRA    359A
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
357C:  MOVLW  02
357E:  MOVWF  xE0
3580:  MOVLW  FA
3582:  MOVWF  xF7
3584:  CALL   0BEC
3588:  DECFSZ xE0,F
358A:  BRA    3580
358C:  MOVLW  32
358E:  MOVWF  2B
3590:  MOVLW  0C
3592:  MOVWF  xF1
3594:  CALL   173E
3598:  BSF    2A.7
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
359A:  MOVF   2B,W
359C:  SUBLW  02
359E:  BTFSS  FD8.2
35A0:  BRA    37FA
....................    EliminaRuido(); 
35A2:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
35A6:  MOVLW  01
35A8:  MOVWF  xF2
35AA:  MOVWF  xF3
35AC:  CALL   16D4
....................       printf(lcd_putc,"    Temporizador     "); 
35B0:  MOVLW  10
35B2:  MOVWF  FF6
35B4:  MOVLW  07
35B6:  MOVWF  FF7
35B8:  CALL   17A4
....................       lcd_gotoxy(1,2); 
35BC:  MOVLW  01
35BE:  MOVWF  xF2
35C0:  MOVLW  02
35C2:  MOVWF  xF3
35C4:  CALL   16D4
....................       printf(lcd_putc,"       Luz UV        "); 
35C8:  MOVLW  26
35CA:  MOVWF  FF6
35CC:  MOVLW  07
35CE:  MOVWF  FF7
35D0:  CALL   17A4
....................       lcd_gotoxy(6,3); 
35D4:  MOVLW  06
35D6:  MOVWF  xF2
35D8:  MOVLW  03
35DA:  MOVWF  xF3
35DC:  CALL   16D4
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
35E0:  MOVFF  3C,E0
35E4:  MOVLW  03
35E6:  MOVWF  xE1
35E8:  CALL   1872
35EC:  MOVLW  3A
35EE:  MOVWF  xF1
35F0:  CALL   173E
35F4:  MOVFF  3D,E0
35F8:  MOVLW  01
35FA:  MOVWF  xE1
35FC:  CALL   1872
3600:  MOVLW  45
3602:  MOVWF  FF6
3604:  MOVLW  07
3606:  MOVWF  FF7
3608:  MOVLW  08
360A:  MOVWF  xE4
360C:  CALL   182C
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
3610:  MOVLW  06
3612:  ADDWF  41,W
3614:  MOVWF  xE0
3616:  MOVWF  xF2
3618:  MOVLW  04
361A:  MOVWF  xF3
361C:  CALL   16D4
....................       lcd_putc(t[2]); 
3620:  MOVFF  4A,F1
3624:  CALL   173E
....................        
....................       Cambio=OFF; 
3628:  BCF    2A.7
.................... //   } 
....................     
....................    if(UP) 
362A:  BSF    F92.5
362C:  BTFSC  F80.5
362E:  BRA    367C
....................    { 
....................       delay_ms(20); 
3630:  MOVLW  14
3632:  MOVWF  xF7
3634:  CALL   0BEC
....................       if(UP){ 
3638:  BSF    F92.5
363A:  BTFSC  F80.5
363C:  BRA    367C
....................          if(unidad2==1) 
363E:  DECFSZ 41,W
3640:  BRA    365C
....................          { 
....................             if(tempo_minutos_pro<240) 
3642:  MOVF   3C,W
3644:  SUBLW  EF
3646:  BNC   365C
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
3648:  MOVLW  05
364A:  ADDWF  3C,F
364C:  MOVLW  02
364E:  MOVWF  xE0
3650:  MOVLW  96
3652:  MOVWF  xF7
3654:  CALL   0BEC
3658:  DECFSZ xE0,F
365A:  BRA    3650
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
365C:  MOVF   41,W
365E:  SUBLW  04
3660:  BNZ   367A
....................          { 
....................             if(tempo_segundos_pro<59) 
3662:  MOVF   3D,W
3664:  SUBLW  3A
3666:  BNC   367A
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
3668:  INCF   3D,F
366A:  MOVLW  02
366C:  MOVWF  xE0
366E:  MOVLW  96
3670:  MOVWF  xF7
3672:  CALL   0BEC
3676:  DECFSZ xE0,F
3678:  BRA    366E
....................             } 
....................          }      
....................       Cambio=ON; 
367A:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(DOWN) 
367C:  BSF    F96.0
367E:  BTFSC  F84.0
3680:  BRA    36CA
....................    { 
....................       delay_ms(20); 
3682:  MOVLW  14
3684:  MOVWF  xF7
3686:  CALL   0BEC
....................       if(DOWN){ 
368A:  BSF    F96.0
368C:  BTFSC  F84.0
368E:  BRA    36CA
....................          if(unidad2==1) 
3690:  DECFSZ 41,W
3692:  BRA    36AC
....................          { 
....................             if(tempo_minutos_pro>0) 
3694:  MOVF   3C,F
3696:  BZ    36AC
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
3698:  MOVLW  05
369A:  SUBWF  3C,F
369C:  MOVLW  02
369E:  MOVWF  xE0
36A0:  MOVLW  96
36A2:  MOVWF  xF7
36A4:  CALL   0BEC
36A8:  DECFSZ xE0,F
36AA:  BRA    36A0
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
36AC:  MOVF   41,W
36AE:  SUBLW  04
36B0:  BNZ   36C8
....................          { 
....................             if(tempo_segundos_pro>0) 
36B2:  MOVF   3D,F
36B4:  BZ    36C8
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
36B6:  DECF   3D,F
36B8:  MOVLW  02
36BA:  MOVWF  xE0
36BC:  MOVLW  96
36BE:  MOVWF  xF7
36C0:  CALL   0BEC
36C4:  DECFSZ xE0,F
36C6:  BRA    36BC
....................             }    
....................          } 
....................       Cambio=ON; 
36C8:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
36CA:  BSF    F96.1
36CC:  BTFSC  F84.1
36CE:  BRA    370C
....................    { 
....................       delay_ms(20); 
36D0:  MOVLW  14
36D2:  MOVWF  xF7
36D4:  CALL   0BEC
....................       if(RIGHT){ 
36D8:  BSF    F96.1
36DA:  BTFSC  F84.1
36DC:  BRA    370C
....................          if(unidad2==1) 
36DE:  DECFSZ 41,W
36E0:  BRA    36E8
....................          { 
....................             unidad2=4; 
36E2:  MOVLW  04
36E4:  MOVWF  41
....................          } 
....................          else 
36E6:  BRA    36F2
....................          { 
....................             if(unidad2==4) 
36E8:  MOVF   41,W
36EA:  SUBLW  04
36EC:  BNZ   36F2
....................             { 
....................                unidad2=1; 
36EE:  MOVLW  01
36F0:  MOVWF  41
....................             } 
....................          } 
....................       delay_ms(500); 
36F2:  MOVLW  02
36F4:  MOVWF  xE0
36F6:  MOVLW  FA
36F8:  MOVWF  xF7
36FA:  CALL   0BEC
36FE:  DECFSZ xE0,F
3700:  BRA    36F6
....................       printf(lcd_putc,"\f"); 
3702:  MOVLW  0C
3704:  MOVWF  xF1
3706:  CALL   173E
....................       Cambio=ON; 
370A:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(IZQU) 
370C:  BSF    F96.2
370E:  BTFSC  F84.2
3710:  BRA    37FA
....................    { 
....................       if(IZQU){ 
3712:  BSF    F96.2
3714:  BTFSC  F84.2
3716:  BRA    37FA
....................          delay_ms(200); 
3718:  MOVLW  C8
371A:  MOVWF  xF7
371C:  CALL   0BEC
....................          printf(lcd_putc,"\f"); 
3720:  MOVLW  0C
3722:  MOVWF  xF1
3724:  CALL   173E
....................          lcd_gotoxy(1,2); 
3728:  MOVLW  01
372A:  MOVWF  xF2
372C:  MOVLW  02
372E:  MOVWF  xF3
3730:  CALL   16D4
....................          printf(lcd_putc,"Tiempo Almacenado"); 
3734:  MOVLW  4E
3736:  MOVWF  FF6
3738:  MOVLW  07
373A:  MOVWF  FF7
373C:  CALL   17A4
....................          lcd_gotoxy(1,3); 
3740:  MOVLW  01
3742:  MOVWF  xF2
3744:  MOVLW  03
3746:  MOVWF  xF3
3748:  CALL   16D4
....................          printf(lcd_putc,"  Correctamente  "); 
374C:  MOVLW  60
374E:  MOVWF  FF6
3750:  MOVLW  07
3752:  MOVWF  FF7
3754:  CALL   17A4
....................          write_eeprom(5,tempo_minutos_pro); 
3758:  MOVLW  05
375A:  MOVWF  FA9
375C:  MOVFF  3C,FA8
3760:  BCF    FA6.6
3762:  BCF    FA6.7
3764:  BSF    FA6.2
3766:  MOVF   FF2,W
3768:  MOVWF  00
376A:  BCF    FF2.6
376C:  BCF    FF2.7
376E:  MOVLB  F
3770:  MOVLW  55
3772:  MOVWF  FA7
3774:  MOVLW  AA
3776:  MOVWF  FA7
3778:  BSF    FA6.1
377A:  BTFSC  FA6.1
377C:  BRA    377A
377E:  BCF    FA6.2
3780:  MOVF   00,W
3782:  IORWF  FF2,F
....................          delay_ms(20); 
3784:  MOVLW  14
3786:  MOVLB  0
3788:  MOVWF  xF7
378A:  CALL   0BEC
....................          write_eeprom(6,tempo_segundos_pro); 
378E:  MOVLW  06
3790:  MOVWF  FA9
3792:  MOVFF  3D,FA8
3796:  BCF    FA6.6
3798:  BCF    FA6.7
379A:  BSF    FA6.2
379C:  MOVF   FF2,W
379E:  MOVWF  00
37A0:  BCF    FF2.6
37A2:  BCF    FF2.7
37A4:  MOVLB  F
37A6:  MOVLW  55
37A8:  MOVWF  FA7
37AA:  MOVLW  AA
37AC:  MOVWF  FA7
37AE:  BSF    FA6.1
37B0:  BTFSC  FA6.1
37B2:  BRA    37B0
37B4:  BCF    FA6.2
37B6:  MOVF   00,W
37B8:  IORWF  FF2,F
....................          delay_ms(20); 
37BA:  MOVLW  14
37BC:  MOVLB  0
37BE:  MOVWF  xF7
37C0:  CALL   0BEC
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
37C4:  MOVFF  3C,3A
37C8:  MOVFF  3D,3B
....................          delay_ms(700); 
37CC:  MOVLW  04
37CE:  MOVWF  xE0
37D0:  MOVLW  AF
37D2:  MOVWF  xF7
37D4:  CALL   0BEC
37D8:  DECFSZ xE0,F
37DA:  BRA    37D0
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
37DC:  MOVLW  1E
37DE:  MOVWF  xF7
37E0:  CALL   0BEC
37E4:  MOVLW  01
37E6:  MOVWF  2B
37E8:  CLRF   47
37EA:  MOVLW  02
37EC:  MOVWF  2F
37EE:  MOVWF  31
37F0:  MOVLW  0C
37F2:  MOVWF  xF1
37F4:  CALL   173E
....................          Cambio=ON; 
37F8:  BSF    2A.7
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
37FA:  MOVF   2B,W
37FC:  SUBLW  03
37FE:  BTFSS  FD8.2
3800:  BRA    3B4C
....................       EliminaRuido(); 
3802:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3806:  MOVLW  01
3808:  MOVWF  xF2
380A:  MOVWF  xF3
380C:  CALL   16D4
....................          printf(lcd_putc,"     Ingrese        "); 
3810:  MOVLW  72
3812:  MOVWF  FF6
3814:  MOVLW  07
3816:  MOVWF  FF7
3818:  CALL   17A4
....................          lcd_gotoxy(1,2); 
381C:  MOVLW  01
381E:  MOVWF  xF2
3820:  MOVLW  02
3822:  MOVWF  xF3
3824:  CALL   16D4
....................          printf(lcd_putc,"    Contraseña      "); 
3828:  MOVLW  88
382A:  MOVWF  FF6
382C:  MOVLW  07
382E:  MOVWF  FF7
3830:  CALL   17A4
....................          lcd_gotoxy(1,3); 
3834:  MOVLW  01
3836:  MOVWF  xF2
3838:  MOVLW  03
383A:  MOVWF  xF3
383C:  CALL   16D4
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3840:  MOVLW  9E
3842:  MOVWF  FF6
3844:  MOVLW  07
3846:  MOVWF  FF7
3848:  MOVLW  0A
384A:  MOVWF  xE4
384C:  CALL   182C
3850:  MOVFF  4B,E0
3854:  MOVLW  1F
3856:  MOVWF  xE1
3858:  CALL   1B36
385C:  MOVFF  4C,E0
3860:  MOVLW  1F
3862:  MOVWF  xE1
3864:  CALL   1B36
3868:  MOVFF  4D,E0
386C:  MOVLW  1F
386E:  MOVWF  xE1
3870:  CALL   1B36
3874:  MOVFF  4E,E0
3878:  MOVLW  1F
387A:  MOVWF  xE1
387C:  CALL   1B36
3880:  MOVLW  20
3882:  MOVWF  xF1
3884:  CALL   173E
3888:  MOVLW  20
388A:  MOVWF  xF1
388C:  CALL   173E
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3890:  MOVFF  2E,F2
3894:  MOVLW  04
3896:  MOVWF  xF3
3898:  CALL   16D4
....................          lcd_putc(t[2]); 
389C:  MOVFF  4A,F1
38A0:  CALL   173E
....................           
....................          if(unidad>11&&unidad<14){ 
38A4:  MOVF   2E,W
38A6:  SUBLW  0B
38A8:  BC    38C8
38AA:  MOVF   2E,W
38AC:  SUBLW  0D
38AE:  BNC   38C8
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
38B0:  MOVLW  01
38B2:  SUBWF  2E,W
38B4:  MOVWF  xE0
38B6:  MOVWF  xF2
38B8:  MOVLW  04
38BA:  MOVWF  xF3
38BC:  CALL   16D4
....................             lcd_putc(t[1]); 
38C0:  MOVFF  49,F1
38C4:  CALL   173E
....................          } 
....................           
....................          Cambio=OFF; 
38C8:  BCF    2A.7
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
38CA:  BSF    F92.5
38CC:  BTFSC  F80.5
38CE:  BRA    3902
....................          delay_ms(20); 
38D0:  MOVLW  14
38D2:  MOVWF  xF7
38D4:  CALL   0BEC
....................          if(UP){ 
38D8:  BSF    F92.5
38DA:  BTFSC  F80.5
38DC:  BRA    3900
....................             if(Flanco == 0) { 
38DE:  BTFSC  29.3
38E0:  BRA    3900
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
38E2:  MOVLW  0B
38E4:  SUBWF  2E,W
38E6:  CLRF   03
38E8:  ADDLW  4B
38EA:  MOVWF  FE9
38EC:  MOVLW  00
38EE:  ADDWFC 03,W
38F0:  MOVWF  FEA
38F2:  INCF   FEF,F
38F4:  BSF    29.3
38F6:  MOVLW  1E
38F8:  MOVWF  xF7
38FA:  CALL   0BEC
38FE:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3900:  BRA    3904
....................          Flanco = 0; 
3902:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3904:  BSF    F96.0
3906:  BTFSC  F84.0
3908:  BRA    393C
....................          delay_ms(20); 
390A:  MOVLW  14
390C:  MOVWF  xF7
390E:  CALL   0BEC
....................          if(DOWN){ 
3912:  BSF    F96.0
3914:  BTFSC  F84.0
3916:  BRA    393A
....................             if(Flanco2 == 0) { 
3918:  BTFSC  29.5
391A:  BRA    393A
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
391C:  MOVLW  0B
391E:  SUBWF  2E,W
3920:  CLRF   03
3922:  ADDLW  4B
3924:  MOVWF  FE9
3926:  MOVLW  00
3928:  ADDWFC 03,W
392A:  MOVWF  FEA
392C:  DECF   FEF,F
392E:  BSF    29.5
3930:  MOVLW  1E
3932:  MOVWF  xF7
3934:  CALL   0BEC
3938:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
393A:  BRA    393E
....................          Flanco2 = 0; 
393C:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
393E:  BSF    F96.1
3940:  BTFSC  F84.1
3942:  BRA    396E
....................          delay_ms(20); 
3944:  MOVLW  14
3946:  MOVWF  xF7
3948:  CALL   0BEC
....................          if(RIGHT){ 
394C:  BSF    F96.1
394E:  BTFSC  F84.1
3950:  BRA    396C
....................             if(Flanco1 == 0) { 
3952:  BTFSC  29.4
3954:  BRA    396C
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3956:  BSF    29.4
3958:  INCF   2E,F
395A:  MOVLW  1E
395C:  MOVWF  xF7
395E:  CALL   0BEC
3962:  MOVLW  0C
3964:  MOVWF  xF1
3966:  CALL   173E
396A:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
396C:  BRA    3970
....................          Flanco1 = 0; 
396E:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3970:  BSF    F96.2
3972:  BTFSC  F84.2
3974:  BRA    39A0
....................          delay_ms(150); 
3976:  MOVLW  96
3978:  MOVWF  xF7
397A:  CALL   0BEC
....................          if(IZQU){ 
397E:  BSF    F96.2
3980:  BTFSC  F84.2
3982:  BRA    399E
....................             if(Flanco3 == 0){ 
3984:  BTFSC  29.6
3986:  BRA    399E
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3988:  BSF    29.6
398A:  DECF   2E,F
398C:  MOVLW  1E
398E:  MOVWF  xF7
3990:  CALL   0BEC
3994:  MOVLW  0C
3996:  MOVWF  xF1
3998:  CALL   173E
399C:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
399E:  BRA    39A2
....................         Flanco3 = 0; 
39A0:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
39A2:  MOVLW  0B
39A4:  SUBWF  2E,W
39A6:  CLRF   03
39A8:  ADDLW  4B
39AA:  MOVWF  FE9
39AC:  MOVLW  00
39AE:  ADDWFC 03,W
39B0:  MOVWF  FEA
39B2:  BTFSC  FEF.7
39B4:  BRA    39B8
39B6:  BRA    39CC
....................          clave[unidad-11]=9; 
39B8:  MOVLW  0B
39BA:  SUBWF  2E,W
39BC:  CLRF   03
39BE:  ADDLW  4B
39C0:  MOVWF  FE9
39C2:  MOVLW  00
39C4:  ADDWFC 03,W
39C6:  MOVWF  FEA
39C8:  MOVLW  09
39CA:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
39CC:  MOVLW  0B
39CE:  SUBWF  2E,W
39D0:  CLRF   03
39D2:  ADDLW  4B
39D4:  MOVWF  FE9
39D6:  MOVLW  00
39D8:  ADDWFC 03,W
39DA:  MOVWF  FEA
39DC:  BTFSC  FEF.7
39DE:  BRA    39F8
39E0:  MOVF   FEF,W
39E2:  SUBLW  09
39E4:  BC    39F8
....................          clave[unidad-11]=0; 
39E6:  MOVLW  0B
39E8:  SUBWF  2E,W
39EA:  CLRF   03
39EC:  ADDLW  4B
39EE:  MOVWF  FE9
39F0:  MOVLW  00
39F2:  ADDWFC 03,W
39F4:  MOVWF  FEA
39F6:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
39F8:  MOVF   2E,W
39FA:  SUBLW  0A
39FC:  BNC   3A1E
....................          unidad=11; 
39FE:  MOVLW  0B
3A00:  MOVWF  2E
....................          Menu=1; 
3A02:  MOVLW  01
3A04:  MOVWF  2B
....................          paso=0; 
3A06:  CLRF   47
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3A08:  CLRF   4B
3A0A:  CLRF   4C
3A0C:  CLRF   4D
3A0E:  CLRF   4E
3A10:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
3A12:  MOVLW  0B
3A14:  MOVWF  2E
3A16:  MOVLW  0C
3A18:  MOVWF  xF1
3A1A:  CALL   173E
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
3A1E:  MOVF   2E,W
3A20:  SUBLW  0E
3A22:  BTFSC  FD8.0
3A24:  BRA    3B4C
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
3A26:  MOVF   4F,W
3A28:  SUBWF  4B,W
3A2A:  BNZ   3AC8
3A2C:  MOVF   50,W
3A2E:  SUBWF  4C,W
3A30:  BNZ   3AC8
3A32:  MOVF   51,W
3A34:  SUBWF  4D,W
3A36:  BNZ   3AC8
3A38:  MOVF   52,W
3A3A:  SUBWF  4E,W
3A3C:  BNZ   3AC8
....................             lcd_gotoxy(1,1); 
3A3E:  MOVLW  01
3A40:  MOVWF  xF2
3A42:  MOVWF  xF3
3A44:  CALL   16D4
....................             printf(lcd_putc,"                    "); 
3A48:  MOVLW  B4
3A4A:  MOVWF  FF6
3A4C:  MOVLW  07
3A4E:  MOVWF  FF7
3A50:  CALL   17A4
....................             lcd_gotoxy(1,2); 
3A54:  MOVLW  01
3A56:  MOVWF  xF2
3A58:  MOVLW  02
3A5A:  MOVWF  xF3
3A5C:  CALL   16D4
....................             printf(lcd_putc,"     Contraseña     "); 
3A60:  MOVLW  CA
3A62:  MOVWF  FF6
3A64:  MOVLW  07
3A66:  MOVWF  FF7
3A68:  CALL   17A4
....................             lcd_gotoxy(1,3); 
3A6C:  MOVLW  01
3A6E:  MOVWF  xF2
3A70:  MOVLW  03
3A72:  MOVWF  xF3
3A74:  CALL   16D4
....................             printf(lcd_putc,"      Correcta      "); 
3A78:  MOVLW  E0
3A7A:  MOVWF  FF6
3A7C:  MOVLW  07
3A7E:  MOVWF  FF7
3A80:  CALL   17A4
....................             lcd_gotoxy(1,4); 
3A84:  MOVLW  01
3A86:  MOVWF  xF2
3A88:  MOVLW  04
3A8A:  MOVWF  xF3
3A8C:  CALL   16D4
....................             printf(lcd_putc,"                    "); 
3A90:  MOVLW  F6
3A92:  MOVWF  FF6
3A94:  MOVLW  07
3A96:  MOVWF  FF7
3A98:  CALL   17A4
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
3A9C:  MOVLW  02
3A9E:  MOVWF  xE0
3AA0:  MOVLW  FA
3AA2:  MOVWF  xF7
3AA4:  CALL   0BEC
3AA8:  DECFSZ xE0,F
3AAA:  BRA    3AA0
3AAC:  MOVLW  3D
3AAE:  MOVWF  2B
3AB0:  MOVLW  0B
3AB2:  MOVWF  2E
3AB4:  MOVLW  0C
3AB6:  MOVWF  xF1
3AB8:  CALL   173E
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3ABC:  CLRF   4B
3ABE:  CLRF   4C
3AC0:  CLRF   4D
3AC2:  CLRF   4E
3AC4:  BSF    2A.7
....................          }else{ 
3AC6:  BRA    3B4C
....................             lcd_gotoxy(1,1); 
3AC8:  MOVLW  01
3ACA:  MOVWF  xF2
3ACC:  MOVWF  xF3
3ACE:  CALL   16D4
....................             printf(lcd_putc,"                    "); 
3AD2:  MOVLW  0C
3AD4:  MOVWF  FF6
3AD6:  MOVLW  08
3AD8:  MOVWF  FF7
3ADA:  CALL   17A4
....................             lcd_gotoxy(1,2); 
3ADE:  MOVLW  01
3AE0:  MOVWF  xF2
3AE2:  MOVLW  02
3AE4:  MOVWF  xF3
3AE6:  CALL   16D4
....................             printf(lcd_putc,"     Contraseña     "); 
3AEA:  MOVLW  22
3AEC:  MOVWF  FF6
3AEE:  MOVLW  08
3AF0:  MOVWF  FF7
3AF2:  CALL   17A4
....................             lcd_gotoxy(1,3); 
3AF6:  MOVLW  01
3AF8:  MOVWF  xF2
3AFA:  MOVLW  03
3AFC:  MOVWF  xF3
3AFE:  CALL   16D4
....................             printf(lcd_putc,"     Incorrecta     "); 
3B02:  MOVLW  38
3B04:  MOVWF  FF6
3B06:  MOVLW  08
3B08:  MOVWF  FF7
3B0A:  CALL   17A4
....................             lcd_gotoxy(1,4); 
3B0E:  MOVLW  01
3B10:  MOVWF  xF2
3B12:  MOVLW  04
3B14:  MOVWF  xF3
3B16:  CALL   16D4
....................             printf(lcd_putc,"                    "); 
3B1A:  MOVLW  4E
3B1C:  MOVWF  FF6
3B1E:  MOVLW  08
3B20:  MOVWF  FF7
3B22:  CALL   17A4
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
3B26:  MOVLW  02
3B28:  MOVWF  xE0
3B2A:  MOVLW  FA
3B2C:  MOVWF  xF7
3B2E:  CALL   0BEC
3B32:  DECFSZ xE0,F
3B34:  BRA    3B2A
3B36:  MOVLW  0B
3B38:  MOVWF  2E
3B3A:  MOVLW  0C
3B3C:  MOVWF  xF1
3B3E:  CALL   173E
3B42:  BSF    2A.7
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3B44:  CLRF   4B
3B46:  CLRF   4C
3B48:  CLRF   4D
3B4A:  CLRF   4E
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3B4C:  MOVF   2B,W
3B4E:  SUBLW  3D
3B50:  BTFSS  FD8.2
3B52:  BRA    3EE4
....................       EliminaRuido(); 
3B54:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3B58:  MOVLW  01
3B5A:  MOVWF  xF2
3B5C:  MOVWF  xF3
3B5E:  CALL   16D4
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
3B62:  MOVLW  64
3B64:  MOVWF  FF6
3B66:  MOVLW  08
3B68:  MOVWF  FF7
3B6A:  CALL   17A4
....................          lcd_gotoxy(1,2); 
3B6E:  MOVLW  01
3B70:  MOVWF  xF2
3B72:  MOVLW  02
3B74:  MOVWF  xF3
3B76:  CALL   16D4
....................          printf(lcd_putc,"     Contraseña     "); 
3B7A:  MOVLW  7A
3B7C:  MOVWF  FF6
3B7E:  MOVLW  08
3B80:  MOVWF  FF7
3B82:  CALL   17A4
....................          lcd_gotoxy(1,3); 
3B86:  MOVLW  01
3B88:  MOVWF  xF2
3B8A:  MOVLW  03
3B8C:  MOVWF  xF3
3B8E:  CALL   16D4
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3B92:  MOVLW  90
3B94:  MOVWF  FF6
3B96:  MOVLW  08
3B98:  MOVWF  FF7
3B9A:  MOVLW  0A
3B9C:  MOVWF  xE4
3B9E:  CALL   182C
3BA2:  MOVFF  4B,E0
3BA6:  MOVLW  1F
3BA8:  MOVWF  xE1
3BAA:  CALL   1B36
3BAE:  MOVFF  4C,E0
3BB2:  MOVLW  1F
3BB4:  MOVWF  xE1
3BB6:  CALL   1B36
3BBA:  MOVFF  4D,E0
3BBE:  MOVLW  1F
3BC0:  MOVWF  xE1
3BC2:  CALL   1B36
3BC6:  MOVFF  4E,E0
3BCA:  MOVLW  1F
3BCC:  MOVWF  xE1
3BCE:  CALL   1B36
3BD2:  MOVLW  20
3BD4:  MOVWF  xF1
3BD6:  CALL   173E
3BDA:  MOVLW  20
3BDC:  MOVWF  xF1
3BDE:  CALL   173E
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3BE2:  MOVFF  2E,F2
3BE6:  MOVLW  04
3BE8:  MOVWF  xF3
3BEA:  CALL   16D4
....................          lcd_putc(t[2]); 
3BEE:  MOVFF  4A,F1
3BF2:  CALL   173E
....................           
....................          if(unidad>11&&unidad<14){ 
3BF6:  MOVF   2E,W
3BF8:  SUBLW  0B
3BFA:  BC    3C1A
3BFC:  MOVF   2E,W
3BFE:  SUBLW  0D
3C00:  BNC   3C1A
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3C02:  MOVLW  01
3C04:  SUBWF  2E,W
3C06:  MOVWF  xE0
3C08:  MOVWF  xF2
3C0A:  MOVLW  04
3C0C:  MOVWF  xF3
3C0E:  CALL   16D4
....................             lcd_putc(t[1]); 
3C12:  MOVFF  49,F1
3C16:  CALL   173E
....................          } 
....................           
....................          Cambio=OFF; 
3C1A:  BCF    2A.7
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
3C1C:  BSF    F92.5
3C1E:  BTFSC  F80.5
3C20:  BRA    3C54
....................          delay_ms(20); 
3C22:  MOVLW  14
3C24:  MOVWF  xF7
3C26:  CALL   0BEC
....................          if(UP){ 
3C2A:  BSF    F92.5
3C2C:  BTFSC  F80.5
3C2E:  BRA    3C52
....................             if(Flanco == 0) { 
3C30:  BTFSC  29.3
3C32:  BRA    3C52
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3C34:  MOVLW  0B
3C36:  SUBWF  2E,W
3C38:  CLRF   03
3C3A:  ADDLW  4B
3C3C:  MOVWF  FE9
3C3E:  MOVLW  00
3C40:  ADDWFC 03,W
3C42:  MOVWF  FEA
3C44:  INCF   FEF,F
3C46:  BSF    29.3
3C48:  MOVLW  1E
3C4A:  MOVWF  xF7
3C4C:  CALL   0BEC
3C50:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3C52:  BRA    3C56
....................          Flanco = 0; 
3C54:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3C56:  BSF    F96.0
3C58:  BTFSC  F84.0
3C5A:  BRA    3C8E
....................          delay_ms(20); 
3C5C:  MOVLW  14
3C5E:  MOVWF  xF7
3C60:  CALL   0BEC
....................          if(DOWN){ 
3C64:  BSF    F96.0
3C66:  BTFSC  F84.0
3C68:  BRA    3C8C
....................             if(Flanco2 == 0) { 
3C6A:  BTFSC  29.5
3C6C:  BRA    3C8C
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3C6E:  MOVLW  0B
3C70:  SUBWF  2E,W
3C72:  CLRF   03
3C74:  ADDLW  4B
3C76:  MOVWF  FE9
3C78:  MOVLW  00
3C7A:  ADDWFC 03,W
3C7C:  MOVWF  FEA
3C7E:  DECF   FEF,F
3C80:  BSF    29.5
3C82:  MOVLW  1E
3C84:  MOVWF  xF7
3C86:  CALL   0BEC
3C8A:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3C8C:  BRA    3C90
....................          Flanco2 = 0; 
3C8E:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3C90:  BSF    F96.1
3C92:  BTFSC  F84.1
3C94:  BRA    3CB8
....................          if(RIGHT){ 
3C96:  BSF    F96.1
3C98:  BTFSC  F84.1
3C9A:  BRA    3CB6
....................             if(Flanco1 == 0) { 
3C9C:  BTFSC  29.4
3C9E:  BRA    3CB6
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3CA0:  BSF    29.4
3CA2:  INCF   2E,F
3CA4:  MOVLW  1E
3CA6:  MOVWF  xF7
3CA8:  CALL   0BEC
3CAC:  MOVLW  0C
3CAE:  MOVWF  xF1
3CB0:  CALL   173E
3CB4:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3CB6:  BRA    3CBA
....................          Flanco1 = 0; 
3CB8:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3CBA:  BSF    F96.2
3CBC:  BTFSC  F84.2
3CBE:  BRA    3CEA
....................          delay_ms(150); 
3CC0:  MOVLW  96
3CC2:  MOVWF  xF7
3CC4:  CALL   0BEC
....................          if(IZQU){ 
3CC8:  BSF    F96.2
3CCA:  BTFSC  F84.2
3CCC:  BRA    3CE8
....................             if(Flanco3 == 0){ 
3CCE:  BTFSC  29.6
3CD0:  BRA    3CE8
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3CD2:  BSF    29.6
3CD4:  DECF   2E,F
3CD6:  MOVLW  1E
3CD8:  MOVWF  xF7
3CDA:  CALL   0BEC
3CDE:  MOVLW  0C
3CE0:  MOVWF  xF1
3CE2:  CALL   173E
3CE6:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
3CE8:  BRA    3CEC
....................         Flanco3 = 0; 
3CEA:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3CEC:  MOVLW  0B
3CEE:  SUBWF  2E,W
3CF0:  CLRF   03
3CF2:  ADDLW  4B
3CF4:  MOVWF  FE9
3CF6:  MOVLW  00
3CF8:  ADDWFC 03,W
3CFA:  MOVWF  FEA
3CFC:  BTFSC  FEF.7
3CFE:  BRA    3D02
3D00:  BRA    3D16
....................          clave[unidad-11]=9; 
3D02:  MOVLW  0B
3D04:  SUBWF  2E,W
3D06:  CLRF   03
3D08:  ADDLW  4B
3D0A:  MOVWF  FE9
3D0C:  MOVLW  00
3D0E:  ADDWFC 03,W
3D10:  MOVWF  FEA
3D12:  MOVLW  09
3D14:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3D16:  MOVLW  0B
3D18:  SUBWF  2E,W
3D1A:  CLRF   03
3D1C:  ADDLW  4B
3D1E:  MOVWF  FE9
3D20:  MOVLW  00
3D22:  ADDWFC 03,W
3D24:  MOVWF  FEA
3D26:  BTFSC  FEF.7
3D28:  BRA    3D42
3D2A:  MOVF   FEF,W
3D2C:  SUBLW  09
3D2E:  BC    3D42
....................          clave[unidad-11]=0; 
3D30:  MOVLW  0B
3D32:  SUBWF  2E,W
3D34:  CLRF   03
3D36:  ADDLW  4B
3D38:  MOVWF  FE9
3D3A:  MOVLW  00
3D3C:  ADDWFC 03,W
3D3E:  MOVWF  FEA
3D40:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3D42:  MOVF   2E,W
3D44:  SUBLW  0A
3D46:  BNC   3D66
....................          unidad=11; 
3D48:  MOVLW  0B
3D4A:  MOVWF  2E
....................          Menu=1; 
3D4C:  MOVLW  01
3D4E:  MOVWF  2B
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3D50:  CLRF   4B
3D52:  CLRF   4C
3D54:  CLRF   4D
3D56:  CLRF   4E
3D58:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f"); 
3D5A:  MOVLW  0B
3D5C:  MOVWF  2E
3D5E:  MOVLW  0C
3D60:  MOVWF  xF1
3D62:  CALL   173E
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
3D66:  MOVF   2E,W
3D68:  SUBLW  0E
3D6A:  BTFSC  FD8.0
3D6C:  BRA    3EE4
....................          lcd_gotoxy(1,1); 
3D6E:  MOVLW  01
3D70:  MOVWF  xF2
3D72:  MOVWF  xF3
3D74:  CALL   16D4
....................          printf(lcd_putc,"                    "); 
3D78:  MOVLW  A6
3D7A:  MOVWF  FF6
3D7C:  MOVLW  08
3D7E:  MOVWF  FF7
3D80:  CALL   17A4
....................          lcd_gotoxy(1,2); 
3D84:  MOVLW  01
3D86:  MOVWF  xF2
3D88:  MOVLW  02
3D8A:  MOVWF  xF3
3D8C:  CALL   16D4
....................          printf(lcd_putc,"     Contraseña     "); 
3D90:  MOVLW  BC
3D92:  MOVWF  FF6
3D94:  MOVLW  08
3D96:  MOVWF  FF7
3D98:  CALL   17A4
....................          lcd_gotoxy(1,3); 
3D9C:  MOVLW  01
3D9E:  MOVWF  xF2
3DA0:  MOVLW  03
3DA2:  MOVWF  xF3
3DA4:  CALL   16D4
....................          printf(lcd_putc,"     Almacenada     "); 
3DA8:  MOVLW  D2
3DAA:  MOVWF  FF6
3DAC:  MOVLW  08
3DAE:  MOVWF  FF7
3DB0:  CALL   17A4
....................          lcd_gotoxy(1,4); 
3DB4:  MOVLW  01
3DB6:  MOVWF  xF2
3DB8:  MOVLW  04
3DBA:  MOVWF  xF3
3DBC:  CALL   16D4
....................          printf(lcd_putc,"                    "); 
3DC0:  MOVLW  E8
3DC2:  MOVWF  FF6
3DC4:  MOVLW  08
3DC6:  MOVWF  FF7
3DC8:  CALL   17A4
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3DCC:  CLRF   FA9
3DCE:  MOVFF  4B,FA8
3DD2:  BCF    FA6.6
3DD4:  BCF    FA6.7
3DD6:  BSF    FA6.2
3DD8:  MOVF   FF2,W
3DDA:  MOVWF  00
3DDC:  BCF    FF2.6
3DDE:  BCF    FF2.7
3DE0:  MOVLB  F
3DE2:  MOVLW  55
3DE4:  MOVWF  FA7
3DE6:  MOVLW  AA
3DE8:  MOVWF  FA7
3DEA:  BSF    FA6.1
3DEC:  BTFSC  FA6.1
3DEE:  BRA    3DEC
3DF0:  BCF    FA6.2
3DF2:  MOVF   00,W
3DF4:  IORWF  FF2,F
3DF6:  MOVLW  14
3DF8:  MOVLB  0
3DFA:  MOVWF  xF7
3DFC:  CALL   0BEC
3E00:  MOVLW  01
3E02:  MOVWF  FA9
3E04:  MOVFF  4C,FA8
3E08:  BCF    FA6.6
3E0A:  BCF    FA6.7
3E0C:  BSF    FA6.2
3E0E:  MOVF   FF2,W
3E10:  MOVWF  00
3E12:  BCF    FF2.6
3E14:  BCF    FF2.7
3E16:  MOVLB  F
3E18:  MOVLW  55
3E1A:  MOVWF  FA7
3E1C:  MOVLW  AA
3E1E:  MOVWF  FA7
3E20:  BSF    FA6.1
3E22:  BTFSC  FA6.1
3E24:  BRA    3E22
3E26:  BCF    FA6.2
3E28:  MOVF   00,W
3E2A:  IORWF  FF2,F
3E2C:  MOVLW  14
3E2E:  MOVLB  0
3E30:  MOVWF  xF7
3E32:  CALL   0BEC
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3E36:  MOVLW  02
3E38:  MOVWF  FA9
3E3A:  MOVFF  4D,FA8
3E3E:  BCF    FA6.6
3E40:  BCF    FA6.7
3E42:  BSF    FA6.2
3E44:  MOVF   FF2,W
3E46:  MOVWF  00
3E48:  BCF    FF2.6
3E4A:  BCF    FF2.7
3E4C:  MOVLB  F
3E4E:  MOVLW  55
3E50:  MOVWF  FA7
3E52:  MOVLW  AA
3E54:  MOVWF  FA7
3E56:  BSF    FA6.1
3E58:  BTFSC  FA6.1
3E5A:  BRA    3E58
3E5C:  BCF    FA6.2
3E5E:  MOVF   00,W
3E60:  IORWF  FF2,F
3E62:  MOVLW  14
3E64:  MOVLB  0
3E66:  MOVWF  xF7
3E68:  CALL   0BEC
3E6C:  MOVLW  03
3E6E:  MOVWF  FA9
3E70:  MOVFF  4E,FA8
3E74:  BCF    FA6.6
3E76:  BCF    FA6.7
3E78:  BSF    FA6.2
3E7A:  MOVF   FF2,W
3E7C:  MOVWF  00
3E7E:  BCF    FF2.6
3E80:  BCF    FF2.7
3E82:  MOVLB  F
3E84:  MOVLW  55
3E86:  MOVWF  FA7
3E88:  MOVLW  AA
3E8A:  MOVWF  FA7
3E8C:  BSF    FA6.1
3E8E:  BTFSC  FA6.1
3E90:  BRA    3E8E
3E92:  BCF    FA6.2
3E94:  MOVF   00,W
3E96:  IORWF  FF2,F
3E98:  MOVLW  14
3E9A:  MOVLB  0
3E9C:  MOVWF  xF7
3E9E:  CALL   0BEC
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3EA2:  MOVLW  02
3EA4:  MOVWF  xE0
3EA6:  MOVLW  FA
3EA8:  MOVWF  xF7
3EAA:  CALL   0BEC
3EAE:  DECFSZ xE0,F
3EB0:  BRA    3EA6
3EB2:  MOVLW  01
3EB4:  MOVWF  2B
3EB6:  CLRF   47
3EB8:  MOVLW  02
3EBA:  MOVWF  2F
3EBC:  MOVWF  31
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3EBE:  MOVFF  4B,4F
3EC2:  MOVFF  4C,50
3EC6:  MOVFF  4D,51
3ECA:  MOVFF  4E,52
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3ECE:  CLRF   4B
3ED0:  CLRF   4C
3ED2:  CLRF   4D
3ED4:  CLRF   4E
3ED6:  BSF    2A.7
....................          unidad=11;printf(lcd_putc,"\f");          
3ED8:  MOVLW  0B
3EDA:  MOVWF  2E
3EDC:  MOVLW  0C
3EDE:  MOVWF  xF1
3EE0:  CALL   173E
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3EE4:  MOVF   2B,W
3EE6:  SUBLW  04
3EE8:  BTFSS  FD8.2
3EEA:  BRA    4106
....................    EliminaRuido(); 
3EEC:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3EF0:  MOVLW  01
3EF2:  MOVWF  xF2
3EF4:  MOVWF  xF3
3EF6:  CALL   16D4
....................       printf(lcd_putc,"  Duracion Actual   "); 
3EFA:  MOVLW  FE
3EFC:  MOVWF  FF6
3EFE:  MOVLW  08
3F00:  MOVWF  FF7
3F02:  CALL   17A4
....................       lcd_gotoxy(1,2); 
3F06:  MOVLW  01
3F08:  MOVWF  xF2
3F0A:  MOVLW  02
3F0C:  MOVWF  xF3
3F0E:  CALL   16D4
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
3F12:  MOVLW  14
3F14:  MOVWF  FF6
3F16:  MOVLW  09
3F18:  MOVWF  FF7
3F1A:  MOVLW  0B
3F1C:  MOVWF  xE4
3F1E:  CALL   182C
3F22:  MOVLW  08
3F24:  MOVWF  FE9
3F26:  MOVFF  5B,E1
3F2A:  MOVFF  5A,E0
3F2E:  CALL   18D8
3F32:  MOVLW  20
3F34:  MOVWF  xF1
3F36:  CALL   173E
3F3A:  MOVLW  20
3F3C:  MOVWF  xF1
3F3E:  CALL   173E
3F42:  MOVLW  20
3F44:  MOVWF  xF1
3F46:  CALL   173E
....................       lcd_gotoxy(1,4); 
3F4A:  MOVLW  01
3F4C:  MOVWF  xF2
3F4E:  MOVLW  04
3F50:  MOVWF  xF3
3F52:  CALL   16D4
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3F56:  MOVLW  28
3F58:  MOVWF  FF6
3F5A:  MOVLW  09
3F5C:  MOVWF  FF7
3F5E:  CALL   17A4
....................        
....................       Cambio=OFF; 
3F62:  BCF    2A.7
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3F64:  BSF    F92.5
3F66:  BTFSC  F80.5
3F68:  BRA    40C2
3F6A:  BSF    F96.1
3F6C:  BTFSC  F84.1
3F6E:  BRA    40C2
....................          delay_ms(20); 
3F70:  MOVLW  14
3F72:  MOVWF  xF7
3F74:  CALL   0BEC
....................          if(UP && RIGHT){ 
3F78:  BSF    F92.5
3F7A:  BTFSC  F80.5
3F7C:  BRA    40C2
3F7E:  BSF    F96.1
3F80:  BTFSC  F84.1
3F82:  BRA    40C2
....................             delay_ms(200); 
3F84:  MOVLW  C8
3F86:  MOVWF  xF7
3F88:  CALL   0BEC
....................             printf(lcd_putc,"\f"); 
3F8C:  MOVLW  0C
3F8E:  MOVWF  xF1
3F90:  CALL   173E
....................             lcd_gotoxy(1,2); 
3F94:  MOVLW  01
3F96:  MOVWF  xF2
3F98:  MOVLW  02
3F9A:  MOVWF  xF3
3F9C:  CALL   16D4
....................             printf(lcd_putc," Reset de tiempo "); 
3FA0:  MOVLW  3E
3FA2:  MOVWF  FF6
3FA4:  MOVLW  09
3FA6:  MOVWF  FF7
3FA8:  CALL   17A4
....................             lcd_gotoxy(1,3); 
3FAC:  MOVLW  01
3FAE:  MOVWF  xF2
3FB0:  MOVLW  03
3FB2:  MOVWF  xF3
3FB4:  CALL   16D4
....................             printf(lcd_putc,"     Exitoso     "); 
3FB8:  MOVLW  50
3FBA:  MOVWF  FF6
3FBC:  MOVLW  09
3FBE:  MOVWF  FF7
3FC0:  CALL   17A4
....................             write_eeprom(7,0); 
3FC4:  MOVLW  07
3FC6:  MOVWF  FA9
3FC8:  CLRF   FA8
3FCA:  BCF    FA6.6
3FCC:  BCF    FA6.7
3FCE:  BSF    FA6.2
3FD0:  MOVF   FF2,W
3FD2:  MOVWF  00
3FD4:  BCF    FF2.6
3FD6:  BCF    FF2.7
3FD8:  MOVLB  F
3FDA:  MOVLW  55
3FDC:  MOVWF  FA7
3FDE:  MOVLW  AA
3FE0:  MOVWF  FA7
3FE2:  BSF    FA6.1
3FE4:  BTFSC  FA6.1
3FE6:  BRA    3FE4
3FE8:  BCF    FA6.2
3FEA:  MOVF   00,W
3FEC:  IORWF  FF2,F
....................             delay_ms(20); 
3FEE:  MOVLW  14
3FF0:  MOVLB  0
3FF2:  MOVWF  xF7
3FF4:  CALL   0BEC
....................             write_eeprom(8,0); 
3FF8:  MOVLW  08
3FFA:  MOVWF  FA9
3FFC:  CLRF   FA8
3FFE:  BCF    FA6.6
4000:  BCF    FA6.7
4002:  BSF    FA6.2
4004:  MOVF   FF2,W
4006:  MOVWF  00
4008:  BCF    FF2.6
400A:  BCF    FF2.7
400C:  MOVLB  F
400E:  MOVLW  55
4010:  MOVWF  FA7
4012:  MOVLW  AA
4014:  MOVWF  FA7
4016:  BSF    FA6.1
4018:  BTFSC  FA6.1
401A:  BRA    4018
401C:  BCF    FA6.2
401E:  MOVF   00,W
4020:  IORWF  FF2,F
....................             delay_ms(20); 
4022:  MOVLW  14
4024:  MOVLB  0
4026:  MOVWF  xF7
4028:  CALL   0BEC
....................             write_eeprom(9,0); 
402C:  MOVLW  09
402E:  MOVWF  FA9
4030:  CLRF   FA8
4032:  BCF    FA6.6
4034:  BCF    FA6.7
4036:  BSF    FA6.2
4038:  MOVF   FF2,W
403A:  MOVWF  00
403C:  BCF    FF2.6
403E:  BCF    FF2.7
4040:  MOVLB  F
4042:  MOVLW  55
4044:  MOVWF  FA7
4046:  MOVLW  AA
4048:  MOVWF  FA7
404A:  BSF    FA6.1
404C:  BTFSC  FA6.1
404E:  BRA    404C
4050:  BCF    FA6.2
4052:  MOVF   00,W
4054:  IORWF  FF2,F
....................             delay_ms(20); 
4056:  MOVLW  14
4058:  MOVLB  0
405A:  MOVWF  xF7
405C:  CALL   0BEC
....................             write_eeprom(10,0); 
4060:  MOVLW  0A
4062:  MOVWF  FA9
4064:  CLRF   FA8
4066:  BCF    FA6.6
4068:  BCF    FA6.7
406A:  BSF    FA6.2
406C:  MOVF   FF2,W
406E:  MOVWF  00
4070:  BCF    FF2.6
4072:  BCF    FF2.7
4074:  MOVLB  F
4076:  MOVLW  55
4078:  MOVWF  FA7
407A:  MOVLW  AA
407C:  MOVWF  FA7
407E:  BSF    FA6.1
4080:  BTFSC  FA6.1
4082:  BRA    4080
4084:  BCF    FA6.2
4086:  MOVF   00,W
4088:  IORWF  FF2,F
....................             delay_ms(700); 
408A:  MOVLW  04
408C:  MOVLB  0
408E:  MOVWF  xE0
4090:  MOVLW  AF
4092:  MOVWF  xF7
4094:  CALL   0BEC
4098:  DECFSZ xE0,F
409A:  BRA    4090
....................             segundos=0;minutos=0;horas=0; 
409C:  CLRF   34
409E:  CLRF   35
40A0:  CLRF   5B
40A2:  CLRF   5A
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
40A4:  MOVLW  1E
40A6:  MOVWF  xF7
40A8:  CALL   0BEC
40AC:  MOVLW  01
40AE:  MOVWF  2B
40B0:  CLRF   47
40B2:  MOVLW  02
40B4:  MOVWF  2F
40B6:  MOVWF  31
40B8:  MOVLW  0C
40BA:  MOVWF  xF1
40BC:  CALL   173E
....................             Cambio=ON; 
40C0:  BSF    2A.7
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
40C2:  BSF    F96.2
40C4:  BTFSC  F84.2
40C6:  BRA    4104
....................          delay_ms(20); 
40C8:  MOVLW  14
40CA:  MOVWF  xF7
40CC:  CALL   0BEC
....................          if(IZQU){ 
40D0:  BSF    F96.2
40D2:  BTFSC  F84.2
40D4:  BRA    4102
....................             if(Flanco3 == 0){ 
40D6:  BTFSC  29.6
40D8:  BRA    4102
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
40DA:  BSF    29.6
40DC:  MOVLW  02
40DE:  MOVWF  xE0
40E0:  MOVLW  FA
40E2:  MOVWF  xF7
40E4:  CALL   0BEC
40E8:  DECFSZ xE0,F
40EA:  BRA    40E0
40EC:  MOVLW  01
40EE:  MOVWF  2B
40F0:  CLRF   47
40F2:  MOVLW  02
40F4:  MOVWF  2F
40F6:  MOVWF  31
40F8:  MOVLW  0C
40FA:  MOVWF  xF1
40FC:  CALL   173E
4100:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4102:  BRA    4106
....................          Flanco3 = 0; 
4104:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
4106:  MOVF   2B,W
4108:  SUBLW  05
410A:  BTFSS  FD8.2
410C:  BRA    4366
....................       EliminaRuido(); 
410E:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
4112:  MOVLW  01
4114:  MOVWF  xF2
4116:  MOVWF  xF3
4118:  CALL   16D4
....................          printf(lcd_putc,"  Zero Point Config "); 
411C:  MOVLW  62
411E:  MOVWF  FF6
4120:  MOVLW  09
4122:  MOVWF  FF7
4124:  CALL   17A4
....................          lcd_gotoxy(1,2); 
4128:  MOVLW  01
412A:  MOVWF  xF2
412C:  MOVLW  02
412E:  MOVWF  xF3
4130:  CALL   16D4
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
4134:  MOVLW  05
4136:  MOVWF  xE0
4138:  CALL   2228
413C:  MOVFF  00,E0
4140:  MOVFF  01,E1
4144:  MOVFF  02,E2
4148:  MOVFF  03,E3
414C:  MOVFF  03,F7
4150:  MOVFF  02,F6
4154:  MOVFF  01,F5
4158:  MOVFF  00,F4
415C:  MOVLW  D7
415E:  MOVWF  xFB
4160:  MOVLW  A3
4162:  MOVWF  xFA
4164:  CLRF   xF9
4166:  MOVLW  81
4168:  MOVWF  xF8
416A:  CALL   2136
416E:  MOVFF  00,E0
4172:  MOVFF  01,E1
4176:  MOVFF  02,E2
417A:  MOVFF  03,E3
417E:  MOVLW  78
4180:  MOVWF  FF6
4182:  MOVLW  09
4184:  MOVWF  FF7
4186:  MOVLW  09
4188:  MOVWF  xE4
418A:  CALL   182C
418E:  MOVLW  02
4190:  MOVWF  FE9
4192:  MOVFF  E3,E7
4196:  MOVFF  E2,E6
419A:  MOVFF  E1,E5
419E:  MOVFF  E0,E4
41A2:  MOVWF  xE8
41A4:  CALL   24DC
41A8:  MOVLW  86
41AA:  MOVWF  FF6
41AC:  MOVLW  09
41AE:  MOVWF  FF7
41B0:  MOVLW  07
41B2:  MOVWF  xE4
41B4:  CALL   182C
....................          lcd_gotoxy(1,3); 
41B8:  MOVLW  01
41BA:  MOVWF  xF2
41BC:  MOVLW  03
41BE:  MOVWF  xF3
41C0:  CALL   16D4
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
41C4:  CLRF   xF1
41C6:  CALL   1CB6
41CA:  MOVFF  00,E0
41CE:  MOVFF  01,E1
41D2:  MOVFF  02,E2
41D6:  MOVFF  03,E3
41DA:  MOVLW  8E
41DC:  MOVWF  FF6
41DE:  MOVLW  09
41E0:  MOVWF  FF7
41E2:  MOVLW  08
41E4:  MOVWF  xE4
41E6:  CALL   182C
41EA:  MOVLW  01
41EC:  MOVWF  FE9
41EE:  MOVFF  E3,E7
41F2:  MOVFF  E2,E6
41F6:  MOVFF  E1,E5
41FA:  MOVFF  E0,E4
41FE:  CLRF   xE8
4200:  CALL   24DC
....................          lcd_gotoxy(1,4); 
4204:  MOVLW  01
4206:  MOVWF  xF2
4208:  MOVLW  04
420A:  MOVWF  xF3
420C:  CALL   16D4
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
4210:  MOVLW  9C
4212:  MOVWF  FF6
4214:  MOVLW  09
4216:  MOVWF  FF7
4218:  MOVLW  07
421A:  MOVWF  xE4
421C:  CALL   182C
4220:  MOVLW  01
4222:  MOVWF  FE9
4224:  MOVFF  C1,E7
4228:  MOVFF  C0,E6
422C:  MOVFF  BF,E5
4230:  MOVFF  BE,E4
4234:  CLRF   xE8
4236:  CALL   24DC
....................           
....................          Cambio=OFF; 
423A:  BCF    2A.7
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
423C:  BSF    F96.1
423E:  BTFSC  F84.1
4240:  BRA    4326
....................          delay_ms(20); 
4242:  MOVLW  14
4244:  MOVWF  xF7
4246:  CALL   0BEC
....................          if(RIGHT){ 
424A:  BSF    F96.1
424C:  BTFSC  F84.1
424E:  BRA    4324
....................             if(Flanco1 == 0){ 
4250:  BTFSC  29.4
4252:  BRA    4324
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
4254:  MOVLW  01
4256:  MOVWF  2B
4258:  CLRF   47
425A:  MOVLW  02
425C:  MOVWF  2F
425E:  MOVWF  31
4260:  MOVLW  0B
4262:  MOVWF  2E
4264:  MOVLW  02
4266:  MOVWF  xE0
4268:  MOVLW  FA
426A:  MOVWF  xF7
426C:  CALL   0BEC
4270:  DECFSZ xE0,F
4272:  BRA    4268
4274:  MOVLW  0C
4276:  MOVWF  xF1
4278:  CALL   173E
....................                G=sensores(0); 
427C:  CLRF   xF1
427E:  CALL   1CB6
4282:  MOVFF  03,C1
4286:  MOVFF  02,C0
428A:  MOVFF  01,BF
428E:  MOVFF  00,BE
....................                G16=(int16)G; 
4292:  MOVFF  C1,F7
4296:  MOVFF  C0,F6
429A:  MOVFF  BF,F5
429E:  MOVFF  BE,F4
42A2:  CALL   2662
42A6:  MOVFF  02,5D
42AA:  MOVFF  01,5C
....................                G_l=G16; G_h=(G16>>8); 
42AE:  MOVFF  5C,38
42B2:  MOVFF  5D,39
....................                 
....................                write_eeprom(11,G_l); 
42B6:  MOVLW  0B
42B8:  MOVWF  FA9
42BA:  MOVFF  38,FA8
42BE:  BCF    FA6.6
42C0:  BCF    FA6.7
42C2:  BSF    FA6.2
42C4:  MOVF   FF2,W
42C6:  MOVWF  00
42C8:  BCF    FF2.6
42CA:  BCF    FF2.7
42CC:  MOVLB  F
42CE:  MOVLW  55
42D0:  MOVWF  FA7
42D2:  MOVLW  AA
42D4:  MOVWF  FA7
42D6:  BSF    FA6.1
42D8:  BTFSC  FA6.1
42DA:  BRA    42D8
42DC:  BCF    FA6.2
42DE:  MOVF   00,W
42E0:  IORWF  FF2,F
....................                delay_ms(20); 
42E2:  MOVLW  14
42E4:  MOVLB  0
42E6:  MOVWF  xF7
42E8:  CALL   0BEC
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
42EC:  MOVLW  0C
42EE:  MOVWF  FA9
42F0:  MOVFF  39,FA8
42F4:  BCF    FA6.6
42F6:  BCF    FA6.7
42F8:  BSF    FA6.2
42FA:  MOVF   FF2,W
42FC:  MOVWF  00
42FE:  BCF    FF2.6
4300:  BCF    FF2.7
4302:  MOVLB  F
4304:  MOVLW  55
4306:  MOVWF  FA7
4308:  MOVLW  AA
430A:  MOVWF  FA7
430C:  BSF    FA6.1
430E:  BTFSC  FA6.1
4310:  BRA    430E
4312:  BCF    FA6.2
4314:  MOVF   00,W
4316:  IORWF  FF2,F
....................                delay_ms(20); 
4318:  MOVLW  14
431A:  MOVLB  0
431C:  MOVWF  xF7
431E:  CALL   0BEC
....................                Cambio=ON; 
4322:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4324:  BRA    4328
....................          Flanco1 = 0; 
4326:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
4328:  BSF    F96.2
432A:  BTFSC  F84.2
432C:  BRA    4364
....................          delay_ms(20); 
432E:  MOVLW  14
4330:  MOVWF  xF7
4332:  CALL   0BEC
....................          if(IZQU){ 
4336:  BSF    F96.2
4338:  BTFSC  F84.2
433A:  BRA    4362
....................             if(Flanco3 == 0){ 
433C:  BTFSC  29.6
433E:  BRA    4362
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
4340:  MOVLW  01
4342:  MOVWF  2B
4344:  CLRF   47
4346:  MOVLW  02
4348:  MOVWF  2F
434A:  MOVWF  31
434C:  MOVLW  0B
434E:  MOVWF  2E
4350:  MOVLW  1E
4352:  MOVWF  xF7
4354:  CALL   0BEC
4358:  MOVLW  0C
435A:  MOVWF  xF1
435C:  CALL   173E
....................                Cambio=ON; 
4360:  BSF    2A.7
....................             } 
....................          } 
....................       }else{ 
4362:  BRA    4366
....................          Flanco3 = 0; 
4364:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
4366:  MOVF   2B,W
4368:  SUBLW  06
436A:  BTFSS  FD8.2
436C:  BRA    4496
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
436E:  BTG    2A.4
4370:  BSF    29.4
4372:  MOVLW  01
4374:  MOVWF  2B
4376:  CLRF   47
....................                        
....................             if(estadoalarma==1) 
4378:  BTFSS  2A.4
437A:  BRA    43DC
....................             {estadoalarma=1; 
437C:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
437E:  MOVLW  01
4380:  MOVWF  xF2
4382:  MOVWF  xF3
4384:  CALL   16D4
....................                printf(lcd_putc,"                    "); 
4388:  MOVLW  AA
438A:  MOVWF  FF6
438C:  MOVLW  09
438E:  MOVWF  FF7
4390:  CALL   17A4
....................                lcd_gotoxy(1,2); 
4394:  MOVLW  01
4396:  MOVWF  xF2
4398:  MOVLW  02
439A:  MOVWF  xF3
439C:  CALL   16D4
....................                printf(lcd_putc,"        Activo      "); 
43A0:  MOVLW  C0
43A2:  MOVWF  FF6
43A4:  MOVLW  09
43A6:  MOVWF  FF7
43A8:  CALL   17A4
....................                lcd_gotoxy(1,3); 
43AC:  MOVLW  01
43AE:  MOVWF  xF2
43B0:  MOVLW  03
43B2:  MOVWF  xF3
43B4:  CALL   16D4
....................                printf(lcd_putc,"        Alarma      "); 
43B8:  MOVLW  D6
43BA:  MOVWF  FF6
43BC:  MOVLW  09
43BE:  MOVWF  FF7
43C0:  CALL   17A4
....................                lcd_gotoxy(1,4); 
43C4:  MOVLW  01
43C6:  MOVWF  xF2
43C8:  MOVLW  04
43CA:  MOVWF  xF3
43CC:  CALL   16D4
....................                printf(lcd_putc,"                    ");} 
43D0:  MOVLW  EC
43D2:  MOVWF  FF6
43D4:  MOVLW  09
43D6:  MOVWF  FF7
43D8:  CALL   17A4
....................                 
....................             if(estadoalarma==0) 
43DC:  BTFSC  2A.4
43DE:  BRA    4440
....................             {estadoalarma=0; 
43E0:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
43E2:  MOVLW  01
43E4:  MOVWF  xF2
43E6:  MOVWF  xF3
43E8:  CALL   16D4
....................                printf(lcd_putc,"                    "); 
43EC:  MOVLW  02
43EE:  MOVWF  FF6
43F0:  MOVLW  0A
43F2:  MOVWF  FF7
43F4:  CALL   17A4
....................                lcd_gotoxy(1,2); 
43F8:  MOVLW  01
43FA:  MOVWF  xF2
43FC:  MOVLW  02
43FE:  MOVWF  xF3
4400:  CALL   16D4
....................                printf(lcd_putc,"      Desactivo     "); 
4404:  MOVLW  18
4406:  MOVWF  FF6
4408:  MOVLW  0A
440A:  MOVWF  FF7
440C:  CALL   17A4
....................                lcd_gotoxy(1,3); 
4410:  MOVLW  01
4412:  MOVWF  xF2
4414:  MOVLW  03
4416:  MOVWF  xF3
4418:  CALL   16D4
....................                printf(lcd_putc,"       Alarma       "); 
441C:  MOVLW  2E
441E:  MOVWF  FF6
4420:  MOVLW  0A
4422:  MOVWF  FF7
4424:  CALL   17A4
....................                lcd_gotoxy(1,4); 
4428:  MOVLW  01
442A:  MOVWF  xF2
442C:  MOVLW  04
442E:  MOVWF  xF3
4430:  CALL   16D4
....................                printf(lcd_putc,"                    ");} 
4434:  MOVLW  44
4436:  MOVWF  FF6
4438:  MOVLW  0A
443A:  MOVWF  FF7
443C:  CALL   17A4
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4440:  MOVLW  00
4442:  BTFSC  2A.4
4444:  MOVLW  01
4446:  MOVWF  xE0
4448:  MOVLW  04
444A:  MOVWF  FA9
444C:  MOVFF  E0,FA8
4450:  BCF    FA6.6
4452:  BCF    FA6.7
4454:  BSF    FA6.2
4456:  MOVF   FF2,W
4458:  MOVWF  00
445A:  BCF    FF2.6
445C:  BCF    FF2.7
445E:  MOVLB  F
4460:  MOVLW  55
4462:  MOVWF  FA7
4464:  MOVLW  AA
4466:  MOVWF  FA7
4468:  BSF    FA6.1
446A:  BTFSC  FA6.1
446C:  BRA    446A
446E:  BCF    FA6.2
4470:  MOVF   00,W
4472:  IORWF  FF2,F
4474:  MOVLW  04
4476:  MOVLB  0
4478:  MOVWF  xE0
447A:  MOVLW  FA
447C:  MOVWF  xF7
447E:  CALL   0BEC
4482:  DECFSZ xE0,F
4484:  BRA    447A
4486:  MOVLW  02
4488:  MOVWF  2F
448A:  MOVWF  31
448C:  MOVLW  0C
448E:  MOVWF  xF1
4490:  CALL   173E
....................             Cambio=ON; 
4494:  BSF    2A.7
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
4496:  MOVF   2B,W
4498:  SUBLW  07
449A:  BTFSS  FD8.2
449C:  BRA    4634
....................       if(Vel1>20) 
449E:  MOVF   57,W
44A0:  SUBLW  14
44A2:  BC    44A8
....................          Vel1=20; 
44A4:  MOVLW  14
44A6:  MOVWF  57
....................       if(Vel1<1) 
44A8:  MOVF   57,F
44AA:  BNZ   44B0
....................          Vel1=1; 
44AC:  MOVLW  01
44AE:  MOVWF  57
....................        
....................       lcd_gotoxy(1,1); 
44B0:  MOVLW  01
44B2:  MOVWF  xF2
44B4:  MOVWF  xF3
44B6:  CALL   16D4
....................       printf(lcd_putc,"Seleccione Velocidad"); 
44BA:  MOVLW  5A
44BC:  MOVWF  FF6
44BE:  MOVLW  0A
44C0:  MOVWF  FF7
44C2:  CALL   17A4
....................       lcd_gotoxy(1,2); 
44C6:  MOVLW  01
44C8:  MOVWF  xF2
44CA:  MOVLW  02
44CC:  MOVWF  xF3
44CE:  CALL   16D4
....................       printf(lcd_putc,"   del Ventilador   "); 
44D2:  MOVLW  70
44D4:  MOVWF  FF6
44D6:  MOVLW  0A
44D8:  MOVWF  FF7
44DA:  CALL   17A4
....................       lcd_gotoxy(1,3); 
44DE:  MOVLW  01
44E0:  MOVWF  xF2
44E2:  MOVLW  03
44E4:  MOVWF  xF3
44E6:  CALL   16D4
....................       printf(lcd_putc,"     Vel: %02u       ",Vel1); 
44EA:  MOVLW  86
44EC:  MOVWF  FF6
44EE:  MOVLW  0A
44F0:  MOVWF  FF7
44F2:  MOVLW  0A
44F4:  MOVWF  xE4
44F6:  CALL   182C
44FA:  MOVFF  57,E0
44FE:  MOVLW  01
4500:  MOVWF  xE1
4502:  CALL   1872
4506:  MOVLW  94
4508:  MOVWF  FF6
450A:  MOVLW  0A
450C:  MOVWF  FF7
450E:  MOVLW  07
4510:  MOVWF  xE4
4512:  CALL   182C
....................       lcd_gotoxy(1,4); 
4516:  MOVLW  01
4518:  MOVWF  xF2
451A:  MOVLW  04
451C:  MOVWF  xF3
451E:  CALL   16D4
....................       printf(lcd_putc,"                    ");       
4522:  MOVLW  9C
4524:  MOVWF  FF6
4526:  MOVLW  0A
4528:  MOVWF  FF7
452A:  CALL   17A4
....................        
....................       if(UP && Vel1<20)//Si oprime hacia arriba 
452E:  BSF    F92.5
4530:  BTFSC  F80.5
4532:  BRA    4544
4534:  MOVF   57,W
4536:  SUBLW  13
4538:  BNC   4544
....................       {   
....................          delay_ms(200);Vel1++; 
453A:  MOVLW  C8
453C:  MOVWF  xF7
453E:  CALL   0BEC
4542:  INCF   57,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
4544:  BSF    F96.0
4546:  BTFSC  F84.0
4548:  BRA    4558
454A:  MOVF   57,F
454C:  BZ    4558
....................       {   
....................          delay_ms(200);Vel1--; 
454E:  MOVLW  C8
4550:  MOVWF  xF7
4552:  CALL   0BEC
4556:  DECF   57,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
4558:  BSF    F96.1
455A:  BTFSC  F84.1
455C:  BRA    4562
....................       {            
....................          VelMotor=Vel1; 
455E:  MOVFF  57,D1
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
4562:  BSF    F96.2
4564:  BTFSC  F84.2
4566:  BRA    4634
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4568:  MOVLW  64
456A:  MOVWF  xF7
456C:  CALL   0BEC
4570:  MOVLW  02
4572:  MOVWF  2F
4574:  MOVWF  31
4576:  MOVLW  0C
4578:  MOVWF  xF1
457A:  CALL   173E
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
457E:  MOVLW  0D
4580:  MOVWF  FA9
4582:  MOVFF  57,FA8
4586:  BCF    FA6.6
4588:  BCF    FA6.7
458A:  BSF    FA6.2
458C:  MOVF   FF2,W
458E:  MOVWF  00
4590:  BCF    FF2.6
4592:  BCF    FF2.7
4594:  MOVLB  F
4596:  MOVLW  55
4598:  MOVWF  FA7
459A:  MOVLW  AA
459C:  MOVWF  FA7
459E:  BSF    FA6.1
45A0:  BTFSC  FA6.1
45A2:  BRA    45A0
45A4:  BCF    FA6.2
45A6:  MOVF   00,W
45A8:  IORWF  FF2,F
....................          delay_ms(20); 
45AA:  MOVLW  14
45AC:  MOVLB  0
45AE:  MOVWF  xF7
45B0:  CALL   0BEC
....................          lcd_gotoxy(1,1); 
45B4:  MOVLW  01
45B6:  MOVWF  xF2
45B8:  MOVWF  xF3
45BA:  CALL   16D4
....................          printf(lcd_putc,"                    "); 
45BE:  MOVLW  B2
45C0:  MOVWF  FF6
45C2:  MOVLW  0A
45C4:  MOVWF  FF7
45C6:  CALL   17A4
....................          lcd_gotoxy(1,2); 
45CA:  MOVLW  01
45CC:  MOVWF  xF2
45CE:  MOVLW  02
45D0:  MOVWF  xF3
45D2:  CALL   16D4
....................          printf(lcd_putc,"     Velocidad      "); 
45D6:  MOVLW  C8
45D8:  MOVWF  FF6
45DA:  MOVLW  0A
45DC:  MOVWF  FF7
45DE:  CALL   17A4
....................          lcd_gotoxy(1,3); 
45E2:  MOVLW  01
45E4:  MOVWF  xF2
45E6:  MOVLW  03
45E8:  MOVWF  xF3
45EA:  CALL   16D4
....................          printf(lcd_putc,"      Almacenada    "); 
45EE:  MOVLW  DE
45F0:  MOVWF  FF6
45F2:  MOVLW  0A
45F4:  MOVWF  FF7
45F6:  CALL   17A4
....................          lcd_gotoxy(1,4); 
45FA:  MOVLW  01
45FC:  MOVWF  xF2
45FE:  MOVLW  04
4600:  MOVWF  xF3
4602:  CALL   16D4
....................          printf(lcd_putc,"                    ");  
4606:  MOVLW  F4
4608:  MOVWF  FF6
460A:  MOVLW  0A
460C:  MOVWF  FF7
460E:  CALL   17A4
....................          delay_ms(1000); 
4612:  MOVLW  04
4614:  MOVWF  xE0
4616:  MOVLW  FA
4618:  MOVWF  xF7
461A:  CALL   0BEC
461E:  DECFSZ xE0,F
4620:  BRA    4616
....................          printf(lcd_putc,"\f"); 
4622:  MOVLW  0C
4624:  MOVWF  xF1
4626:  CALL   173E
....................          lcd_init(); 
462A:  CALL   0C7C
....................          Menu=1; paso=0; 
462E:  MOVLW  01
4630:  MOVWF  2B
4632:  CLRF   47
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
4634:  MOVF   2B,W
4636:  SUBLW  32
4638:  BTFSS  FD8.2
463A:  GOTO   4DAA
....................    if(Lectura==1){ 
463E:  BTFSS  2A.0
4640:  BRA    4974
....................       Lectura=0; 
4642:  BCF    2A.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
4644:  MOVLW  08
4646:  MOVWF  xE0
4648:  CALL   2228
464C:  MOVFF  03,BD
4650:  MOVFF  02,BC
4654:  MOVFF  01,BB
4658:  MOVFF  00,BA
....................       CaidaPresion=CaidaPresion*4.02; 
465C:  MOVFF  BD,F7
4660:  MOVFF  BC,F6
4664:  MOVFF  BB,F5
4668:  MOVFF  BA,F4
466C:  MOVLW  D7
466E:  MOVWF  xFB
4670:  MOVLW  A3
4672:  MOVWF  xFA
4674:  CLRF   xF9
4676:  MOVLW  81
4678:  MOVWF  xF8
467A:  CALL   2136
467E:  MOVFF  03,BD
4682:  MOVFF  02,BC
4686:  MOVFF  01,BB
468A:  MOVFF  00,BA
....................       if(CaidaPresion<0.1 && estadomv==1){ 
468E:  MOVFF  BD,F7
4692:  MOVFF  BC,F6
4696:  MOVFF  BB,F5
469A:  MOVFF  BA,F4
469E:  MOVLW  CD
46A0:  MOVWF  xFB
46A2:  MOVLW  CC
46A4:  MOVWF  xFA
46A6:  MOVLW  4C
46A8:  MOVWF  xF9
46AA:  MOVLW  7B
46AC:  MOVWF  xF8
46AE:  CALL   10F2
46B2:  BNC   46D4
46B4:  BTFSS  29.2
46B6:  BRA    46D4
....................          lcd_gotoxy(1,1); 
46B8:  MOVLW  01
46BA:  MOVWF  xF2
46BC:  MOVWF  xF3
46BE:  CALL   16D4
....................          printf(lcd_putc,"!Verifique Flujo!  ");  
46C2:  MOVLW  0A
46C4:  MOVWF  FF6
46C6:  MOVLW  0B
46C8:  MOVWF  FF7
46CA:  CALL   17A4
....................          ActivaBuzzer=1; 
46CE:  MOVLW  01
46D0:  MOVWF  53
....................       }else if(CaidaPresion>=1.0){ 
46D2:  BRA    475C
46D4:  CLRF   xF7
46D6:  CLRF   xF6
46D8:  CLRF   xF5
46DA:  MOVLW  7F
46DC:  MOVWF  xF4
46DE:  MOVFF  BD,FB
46E2:  MOVFF  BC,FA
46E6:  MOVFF  BB,F9
46EA:  MOVFF  BA,F8
46EE:  CALL   10F2
46F2:  BC    46F6
46F4:  BNZ   4712
....................          lcd_gotoxy(1,1); 
46F6:  MOVLW  01
46F8:  MOVWF  xF2
46FA:  MOVWF  xF3
46FC:  CALL   16D4
....................          printf(lcd_putc,"!Verifique Filtro!");  
4700:  MOVLW  1E
4702:  MOVWF  FF6
4704:  MOVLW  0B
4706:  MOVWF  FF7
4708:  CALL   17A4
....................          ActivaBuzzer=1; 
470C:  MOVLW  01
470E:  MOVWF  53
....................       }else{ 
4710:  BRA    475C
....................          lcd_gotoxy(1,1); 
4712:  MOVLW  01
4714:  MOVWF  xF2
4716:  MOVWF  xF3
4718:  CALL   16D4
....................          printf(lcd_putc,"JPCR DP:%3.2f inH2O ",CaidaPresion);   
471C:  MOVLW  32
471E:  MOVWF  FF6
4720:  MOVLW  0B
4722:  MOVWF  FF7
4724:  MOVLW  08
4726:  MOVWF  xE4
4728:  CALL   182C
472C:  MOVLW  02
472E:  MOVWF  FE9
4730:  MOVFF  BD,E7
4734:  MOVFF  BC,E6
4738:  MOVFF  BB,E5
473C:  MOVFF  BA,E4
4740:  MOVWF  xE8
4742:  CALL   24DC
4746:  MOVLW  3F
4748:  MOVWF  FF6
474A:  MOVLW  0B
474C:  MOVWF  FF7
474E:  MOVLW  07
4750:  MOVWF  xE4
4752:  CALL   182C
....................          Buzzer_off; 
4756:  BCF    F8B.0
4758:  BCF    F94.0
....................          ActivaBuzzer=0; 
475A:  CLRF   53
....................       } 
....................       //Saturacion=11*(((float)Vel1-(float)velocidadInicial)/(20.0-(float)velocidadInicial)); 
....................       Saturacion=(CaidaPresion/1.0)*11; 
475C:  MOVFF  BD,F7
4760:  MOVFF  BC,F6
4764:  MOVFF  BB,F5
4768:  MOVFF  BA,F4
476C:  CLRF   xFB
476E:  CLRF   xFA
4770:  CLRF   xF9
4772:  MOVLW  7F
4774:  MOVWF  xF8
4776:  CALL   1D0C
477A:  MOVFF  00,E0
477E:  MOVFF  01,E1
4782:  MOVFF  02,E2
4786:  MOVFF  03,E3
478A:  MOVFF  03,F7
478E:  MOVFF  02,F6
4792:  MOVFF  01,F5
4796:  MOVFF  00,F4
479A:  CLRF   xFB
479C:  CLRF   xFA
479E:  MOVLW  30
47A0:  MOVWF  xF9
47A2:  MOVLW  82
47A4:  MOVWF  xF8
47A6:  CALL   2136
47AA:  MOVFF  03,B9
47AE:  MOVFF  02,B8
47B2:  MOVFF  01,B7
47B6:  MOVFF  00,B6
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
47BA:  CLRF   40
47BC:  MOVFF  B9,E3
47C0:  MOVFF  B8,E2
47C4:  MOVFF  B7,E1
47C8:  MOVFF  B6,E0
47CC:  CALL   29D4
47D0:  MOVFF  00,E0
47D4:  MOVFF  01,E1
47D8:  MOVFF  02,E2
47DC:  MOVFF  03,E3
47E0:  CLRF   xF9
47E2:  MOVFF  40,F8
47E6:  CALL   0D1E
47EA:  MOVFF  03,F7
47EE:  MOVFF  02,F6
47F2:  MOVFF  01,F5
47F6:  MOVFF  00,F4
47FA:  MOVFF  E3,FB
47FE:  MOVFF  E2,FA
4802:  MOVFF  E1,F9
4806:  MOVFF  E0,F8
480A:  CALL   10F2
480E:  BNC   482C
....................       { 
....................          lcd_gotoxy(i+8,2); 
4810:  MOVLW  08
4812:  ADDWF  40,W
4814:  MOVWF  xE0
4816:  MOVWF  xF2
4818:  MOVLW  02
481A:  MOVWF  xF3
481C:  CALL   16D4
....................          printf(lcd_putc,"Ñ"); 
4820:  MOVLW  D1
4822:  MOVWF  xF1
4824:  CALL   173E
....................       } 
4828:  INCF   40,F
482A:  BRA    47BC
....................        
....................       for(i=floor(Saturacion);i<11;i++){ 
482C:  MOVFF  B9,E3
4830:  MOVFF  B8,E2
4834:  MOVFF  B7,E1
4838:  MOVFF  B6,E0
483C:  CALL   29D4
4840:  MOVFF  03,F7
4844:  MOVFF  02,F6
4848:  MOVFF  01,F5
484C:  MOVFF  00,F4
4850:  CALL   2662
4854:  MOVFF  01,40
4858:  MOVF   40,W
485A:  SUBLW  0A
485C:  BNC   487A
....................          lcd_gotoxy(i+8,2); 
485E:  MOVLW  08
4860:  ADDWF  40,W
4862:  MOVWF  xE0
4864:  MOVWF  xF2
4866:  MOVLW  02
4868:  MOVWF  xF3
486A:  CALL   16D4
....................          printf(lcd_putc," "); 
486E:  MOVLW  20
4870:  MOVWF  xF1
4872:  CALL   173E
....................       } 
4876:  INCF   40,F
4878:  BRA    4858
....................        
....................       lcd_gotoxy(9,3); 
487A:  MOVLW  09
487C:  MOVWF  xF2
487E:  MOVLW  03
4880:  MOVWF  xF3
4882:  CALL   16D4
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
4886:  MOVLW  48
4888:  MOVWF  FF6
488A:  MOVLW  0B
488C:  MOVWF  FF7
488E:  MOVLW  06
4890:  MOVWF  xE4
4892:  CALL   182C
4896:  MOVFF  3A,E0
489A:  MOVLW  03
489C:  MOVWF  xE1
489E:  CALL   1872
48A2:  MOVLW  3A
48A4:  MOVWF  xF1
48A6:  CALL   173E
48AA:  MOVFF  3B,E0
48AE:  MOVLW  01
48B0:  MOVWF  xE1
48B2:  CALL   1872
....................       EliminaRuido(); 
48B6:  CALL   0004
....................     
....................       lcd_gotoxy(1,2); 
48BA:  MOVLW  01
48BC:  MOVWF  xF2
48BE:  MOVLW  02
48C0:  MOVWF  xF3
48C2:  CALL   16D4
....................       printf(lcd_putc,"Filtro:"); 
48C6:  MOVLW  58
48C8:  MOVWF  FF6
48CA:  MOVLW  0B
48CC:  MOVWF  FF7
48CE:  CALL   17A4
....................        
....................       if(estadomv==1){ 
48D2:  BTFSS  29.2
48D4:  BRA    48F0
....................          lcd_gotoxy(1,4); 
48D6:  MOVLW  01
48D8:  MOVWF  xF2
48DA:  MOVLW  04
48DC:  MOVWF  xF3
48DE:  CALL   16D4
....................          printf(lcd_putc,"Motor:ON ");       
48E2:  MOVLW  60
48E4:  MOVWF  FF6
48E6:  MOVLW  0B
48E8:  MOVWF  FF7
48EA:  CALL   17A4
....................       }else{ 
48EE:  BRA    4908
....................          lcd_gotoxy(1,4); 
48F0:  MOVLW  01
48F2:  MOVWF  xF2
48F4:  MOVLW  04
48F6:  MOVWF  xF3
48F8:  CALL   16D4
....................          printf(lcd_putc,"Motor:OFF"); 
48FC:  MOVLW  6A
48FE:  MOVWF  FF6
4900:  MOVLW  0B
4902:  MOVWF  FF7
4904:  CALL   17A4
....................       } 
....................        
....................       if(estadofl==1){ 
4908:  BTFSS  29.1
490A:  BRA    4926
....................          lcd_gotoxy(1,3); 
490C:  MOVLW  01
490E:  MOVWF  xF2
4910:  MOVLW  03
4912:  MOVWF  xF3
4914:  CALL   16D4
....................          printf(lcd_putc,"Luz:ON "); 
4918:  MOVLW  74
491A:  MOVWF  FF6
491C:  MOVLW  0B
491E:  MOVWF  FF7
4920:  CALL   17A4
....................       }else{ 
4924:  BRA    493E
....................          lcd_gotoxy(1,3); 
4926:  MOVLW  01
4928:  MOVWF  xF2
492A:  MOVLW  03
492C:  MOVWF  xF3
492E:  CALL   16D4
....................          printf(lcd_putc,"Luz:OFF"); 
4932:  MOVLW  7C
4934:  MOVWF  FF6
4936:  MOVLW  0B
4938:  MOVWF  FF7
493A:  CALL   17A4
....................       }  
....................        
....................       if(estadouv==1) 
493E:  BTFSS  29.0
4940:  BRA    495C
....................       { 
....................          lcd_gotoxy(13,4); 
4942:  MOVLW  0D
4944:  MOVWF  xF2
4946:  MOVLW  04
4948:  MOVWF  xF3
494A:  CALL   16D4
....................          printf(lcd_putc,"UV:ON "); 
494E:  MOVLW  84
4950:  MOVWF  FF6
4952:  MOVLW  0B
4954:  MOVWF  FF7
4956:  CALL   17A4
....................       } 
....................       else 
495A:  BRA    4974
....................       {          
....................          lcd_gotoxy(13,4); 
495C:  MOVLW  0D
495E:  MOVWF  xF2
4960:  MOVLW  04
4962:  MOVWF  xF3
4964:  CALL   16D4
....................          printf(lcd_putc,"UV:OFF"); 
4968:  MOVLW  8C
496A:  MOVWF  FF6
496C:  MOVLW  0B
496E:  MOVWF  FF7
4970:  CALL   17A4
....................       } 
....................    } 
....................      
....................    if(tiempo_cumplido==1){ 
4974:  BTFSS  29.7
4976:  BRA    4A10
....................       if(estadoalarma==1){ 
4978:  BTFSS  2A.4
497A:  BRA    4A06
....................          printf(lcd_putc,"\f"); 
497C:  MOVLW  0C
497E:  MOVWF  xF1
4980:  CALL   173E
....................          lcd_gotoxy(1,2); 
4984:  MOVLW  01
4986:  MOVWF  xF2
4988:  MOVLW  02
498A:  MOVWF  xF3
498C:  CALL   16D4
....................          printf(lcd_putc,"  Temporizador  de  "); 
4990:  MOVLW  94
4992:  MOVWF  FF6
4994:  MOVLW  0B
4996:  MOVWF  FF7
4998:  CALL   17A4
....................          lcd_gotoxy(1,3); 
499C:  MOVLW  01
499E:  MOVWF  xF2
49A0:  MOVLW  03
49A2:  MOVWF  xF3
49A4:  CALL   16D4
....................          printf(lcd_putc," Luz UV  Finalizado "); 
49A8:  MOVLW  AA
49AA:  MOVWF  FF6
49AC:  MOVLW  0B
49AE:  MOVWF  FF7
49B0:  CALL   17A4
....................          lcd_gotoxy(1,4); 
49B4:  MOVLW  01
49B6:  MOVWF  xF2
49B8:  MOVLW  04
49BA:  MOVWF  xF3
49BC:  CALL   16D4
....................          printf(lcd_putc,"                    "); 
49C0:  MOVLW  C0
49C2:  MOVWF  FF6
49C4:  MOVLW  0B
49C6:  MOVWF  FF7
49C8:  CALL   17A4
....................          lcd_gotoxy(1,1); 
49CC:  MOVLW  01
49CE:  MOVWF  xF2
49D0:  MOVWF  xF3
49D2:  CALL   16D4
....................          printf(lcd_putc,"                    "); 
49D6:  MOVLW  D6
49D8:  MOVWF  FF6
49DA:  MOVLW  0B
49DC:  MOVWF  FF7
49DE:  CALL   17A4
....................          for(i=0;i<5;i++) 
49E2:  CLRF   40
49E4:  MOVF   40,W
49E6:  SUBLW  04
49E8:  BNC   4A06
....................          { 
....................             Buzzer_on; 
49EA:  BSF    F8B.0
49EC:  BCF    F94.0
....................             delay_ms(200); 
49EE:  MOVLW  C8
49F0:  MOVWF  xF7
49F2:  CALL   0BEC
....................             Buzzer_off; 
49F6:  BCF    F8B.0
49F8:  BCF    F94.0
....................             delay_ms(200); 
49FA:  MOVLW  C8
49FC:  MOVWF  xF7
49FE:  CALL   0BEC
....................          } 
4A02:  INCF   40,F
4A04:  BRA    49E4
....................       } 
....................       tiempo_cumplido=0; 
4A06:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
4A08:  MOVLW  0C
4A0A:  MOVWF  xF1
4A0C:  CALL   173E
....................    }    
....................        
....................    if(estadofl==1){ 
4A10:  BTFSS  29.1
4A12:  BRA    4A32
....................       Luz_Blanca_on; 
4A14:  BCF    F8A.4
4A16:  BCF    F93.4
....................       if(flagfl==0){ 
4A18:  BTFSC  2A.2
4A1A:  BRA    4A30
....................          lcd_init();delay_ms(200);lcd_init(); 
4A1C:  CALL   0C7C
4A20:  MOVLW  C8
4A22:  MOVWF  xF7
4A24:  CALL   0BEC
4A28:  CALL   0C7C
....................          flagfl=1;Cambio=ON; 
4A2C:  BSF    2A.2
4A2E:  BSF    2A.7
....................       } 
....................    }else{ 
4A30:  BRA    4A4E
....................       Luz_Blanca_off; 
4A32:  BSF    F8A.4
4A34:  BCF    F93.4
....................       if(flagfl==1){ 
4A36:  BTFSS  2A.2
4A38:  BRA    4A4E
....................          lcd_init();delay_ms(200);lcd_init(); 
4A3A:  CALL   0C7C
4A3E:  MOVLW  C8
4A40:  MOVWF  xF7
4A42:  CALL   0BEC
4A46:  CALL   0C7C
....................          flagfl=0;Cambio=ON; 
4A4A:  BCF    2A.2
4A4C:  BSF    2A.7
....................       } 
....................    } 
....................       Cambio=OFF; 
4A4E:  BCF    2A.7
....................     
....................    if(estadomv==1){  
4A50:  BTFSS  29.2
4A52:  BRA    4A7E
....................       if(flagmv==0){ 
4A54:  BTFSC  xC2.0
4A56:  BRA    4A78
....................          VelMotor=6; 
4A58:  MOVLW  06
4A5A:  MOVWF  xD1
....................          lcd_init();delay_ms(200);lcd_init(); 
4A5C:  CALL   0C7C
4A60:  MOVLW  C8
4A62:  MOVWF  xF7
4A64:  CALL   0BEC
4A68:  CALL   0C7C
....................          flagmv=1;Cambio=ON;delay_ms(200); 
4A6C:  BSF    xC2.0
4A6E:  BSF    2A.7
4A70:  MOVLW  C8
4A72:  MOVWF  xF7
4A74:  CALL   0BEC
....................       } 
....................       VelMotor=Vel1; 
4A78:  MOVFF  57,D1
....................    }else{ 
4A7C:  BRA    4A98
....................       VelMotor=0; 
4A7E:  CLRF   xD1
....................       if(flagmv==1){ 
4A80:  BTFSS  xC2.0
4A82:  BRA    4A98
....................          lcd_init();delay_ms(200);lcd_init(); 
4A84:  CALL   0C7C
4A88:  MOVLW  C8
4A8A:  MOVWF  xF7
4A8C:  CALL   0BEC
4A90:  CALL   0C7C
....................          flagmv=0;Cambio=ON; 
4A94:  BCF    xC2.0
4A96:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
4A98:  BTFSS  29.1
4A9A:  BRA    4ABA
....................    { 
....................       Luz_Blanca_on; 
4A9C:  BCF    F8A.4
4A9E:  BCF    F93.4
....................       if(flagfl==0) 
4AA0:  BTFSC  2A.2
4AA2:  BRA    4AB8
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4AA4:  CALL   0C7C
4AA8:  MOVLW  C8
4AAA:  MOVWF  xF7
4AAC:  CALL   0BEC
4AB0:  CALL   0C7C
....................          flagfl=1;Cambio=ON; 
4AB4:  BSF    2A.2
4AB6:  BSF    2A.7
....................       } 
....................    } 
....................    else 
4AB8:  BRA    4AD6
....................    { 
....................       Luz_Blanca_off; 
4ABA:  BSF    F8A.4
4ABC:  BCF    F93.4
....................       if(flagfl==1) 
4ABE:  BTFSS  2A.2
4AC0:  BRA    4AD6
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4AC2:  CALL   0C7C
4AC6:  MOVLW  C8
4AC8:  MOVWF  xF7
4ACA:  CALL   0BEC
4ACE:  CALL   0C7C
....................          flagfl=0;Cambio=ON; 
4AD2:  BCF    2A.2
4AD4:  BSF    2A.7
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
4AD6:  BTFSS  29.0
4AD8:  BRA    4B84
....................       Luz_UV_on; 
4ADA:  BCF    F8A.3
4ADC:  BCF    F93.3
....................       tiempo_cumplido=0;       
4ADE:  BCF    29.7
....................       estadomv=0; 
4AE0:  BCF    29.2
....................       VelMotor=0; 
4AE2:  CLRF   xD1
....................       estadofl=0; 
4AE4:  BCF    29.1
....................       Luz_Blanca_off; 
4AE6:  BSF    F8A.4
4AE8:  BCF    F93.4
....................       if(flaguv==0){ 
4AEA:  BTFSC  2A.1
4AEC:  BRA    4B82
....................          lcd_init();delay_ms(200);lcd_init(); 
4AEE:  CALL   0C7C
4AF2:  MOVLW  C8
4AF4:  MOVWF  xF7
4AF6:  CALL   0BEC
4AFA:  CALL   0C7C
....................          flaguv=1;guardaruv=1;Cambio=ON; 
4AFE:  BSF    2A.1
4B00:  MOVLW  01
4B02:  MOVWF  43
4B04:  BSF    2A.7
....................          write_eeprom(22,estadomv);delay_ms(20); 
4B06:  MOVLW  00
4B08:  BTFSC  29.2
4B0A:  MOVLW  01
4B0C:  MOVWF  xE0
4B0E:  MOVLW  16
4B10:  MOVWF  FA9
4B12:  MOVFF  E0,FA8
4B16:  BCF    FA6.6
4B18:  BCF    FA6.7
4B1A:  BSF    FA6.2
4B1C:  MOVF   FF2,W
4B1E:  MOVWF  00
4B20:  BCF    FF2.6
4B22:  BCF    FF2.7
4B24:  MOVLB  F
4B26:  MOVLW  55
4B28:  MOVWF  FA7
4B2A:  MOVLW  AA
4B2C:  MOVWF  FA7
4B2E:  BSF    FA6.1
4B30:  BTFSC  FA6.1
4B32:  BRA    4B30
4B34:  BCF    FA6.2
4B36:  MOVF   00,W
4B38:  IORWF  FF2,F
4B3A:  MOVLW  14
4B3C:  MOVLB  0
4B3E:  MOVWF  xF7
4B40:  CALL   0BEC
....................          write_eeprom(23,estadofl);delay_ms(20); 
4B44:  MOVLW  00
4B46:  BTFSC  29.1
4B48:  MOVLW  01
4B4A:  MOVWF  xE0
4B4C:  MOVLW  17
4B4E:  MOVWF  FA9
4B50:  MOVFF  E0,FA8
4B54:  BCF    FA6.6
4B56:  BCF    FA6.7
4B58:  BSF    FA6.2
4B5A:  MOVF   FF2,W
4B5C:  MOVWF  00
4B5E:  BCF    FF2.6
4B60:  BCF    FF2.7
4B62:  MOVLB  F
4B64:  MOVLW  55
4B66:  MOVWF  FA7
4B68:  MOVLW  AA
4B6A:  MOVWF  FA7
4B6C:  BSF    FA6.1
4B6E:  BTFSC  FA6.1
4B70:  BRA    4B6E
4B72:  BCF    FA6.2
4B74:  MOVF   00,W
4B76:  IORWF  FF2,F
4B78:  MOVLW  14
4B7A:  MOVLB  0
4B7C:  MOVWF  xF7
4B7E:  CALL   0BEC
....................       } 
....................    }else{ 
4B82:  BRA    4BA6
....................       estadouv=0; 
4B84:  BCF    29.0
....................       Luz_UV_off; 
4B86:  BSF    F8A.3
4B88:  BCF    F93.3
....................       if(flaguv==1){ 
4B8A:  BTFSS  2A.1
4B8C:  BRA    4BA6
....................          lcd_init();delay_ms(200);lcd_init(); 
4B8E:  CALL   0C7C
4B92:  MOVLW  C8
4B94:  MOVWF  xF7
4B96:  CALL   0BEC
4B9A:  CALL   0C7C
....................          flaguv=0;guardaruv=1;Cambio=ON; 
4B9E:  BCF    2A.1
4BA0:  MOVLW  01
4BA2:  MOVWF  43
4BA4:  BSF    2A.7
....................       } 
....................    } 
....................        
....................    if(tdown>=60){ //Si oprimio tecla abajo por 300ms o mas 
4BA6:  MOVF   xC8,F
4BA8:  BNZ   4BB0
4BAA:  MOVF   xC7,W
4BAC:  SUBLW  3B
4BAE:  BC    4C02
....................       if(!Flanco){ 
4BB0:  BTFSC  29.3
4BB2:  BRA    4C00
....................          estadofl=!estadofl;Flanco = 1;write_eeprom(23,estadofl);delay_ms(300);Cambio=ON; 
4BB4:  BTG    29.1
4BB6:  BSF    29.3
4BB8:  MOVLW  00
4BBA:  BTFSC  29.1
4BBC:  MOVLW  01
4BBE:  MOVWF  xE0
4BC0:  MOVLW  17
4BC2:  MOVWF  FA9
4BC4:  MOVFF  E0,FA8
4BC8:  BCF    FA6.6
4BCA:  BCF    FA6.7
4BCC:  BSF    FA6.2
4BCE:  MOVF   FF2,W
4BD0:  MOVWF  00
4BD2:  BCF    FF2.6
4BD4:  BCF    FF2.7
4BD6:  MOVLB  F
4BD8:  MOVLW  55
4BDA:  MOVWF  FA7
4BDC:  MOVLW  AA
4BDE:  MOVWF  FA7
4BE0:  BSF    FA6.1
4BE2:  BTFSC  FA6.1
4BE4:  BRA    4BE2
4BE6:  BCF    FA6.2
4BE8:  MOVF   00,W
4BEA:  IORWF  FF2,F
4BEC:  MOVLW  02
4BEE:  MOVLB  0
4BF0:  MOVWF  xE0
4BF2:  MOVLW  96
4BF4:  MOVWF  xF7
4BF6:  CALL   0BEC
4BFA:  DECFSZ xE0,F
4BFC:  BRA    4BF2
4BFE:  BSF    2A.7
....................       } 
....................    }else{ 
4C00:  BRA    4C04
....................       Flanco=0; 
4C02:  BCF    29.3
....................    } 
....................     
....................    if(tright>=60){ //Si oprimio tecla derecha por 300ms o mas 
4C04:  MOVF   xCA,F
4C06:  BNZ   4C0E
4C08:  MOVF   xC9,W
4C0A:  SUBLW  3B
4C0C:  BC    4C60
....................       if(!Flanco2){ 
4C0E:  BTFSC  29.5
4C10:  BRA    4C5E
....................          estadomv=!estadomv;Flanco2 = 1;write_eeprom(22,estadomv);delay_ms(300);Cambio=ON; 
4C12:  BTG    29.2
4C14:  BSF    29.5
4C16:  MOVLW  00
4C18:  BTFSC  29.2
4C1A:  MOVLW  01
4C1C:  MOVWF  xE0
4C1E:  MOVLW  16
4C20:  MOVWF  FA9
4C22:  MOVFF  E0,FA8
4C26:  BCF    FA6.6
4C28:  BCF    FA6.7
4C2A:  BSF    FA6.2
4C2C:  MOVF   FF2,W
4C2E:  MOVWF  00
4C30:  BCF    FF2.6
4C32:  BCF    FF2.7
4C34:  MOVLB  F
4C36:  MOVLW  55
4C38:  MOVWF  FA7
4C3A:  MOVLW  AA
4C3C:  MOVWF  FA7
4C3E:  BSF    FA6.1
4C40:  BTFSC  FA6.1
4C42:  BRA    4C40
4C44:  BCF    FA6.2
4C46:  MOVF   00,W
4C48:  IORWF  FF2,F
4C4A:  MOVLW  02
4C4C:  MOVLB  0
4C4E:  MOVWF  xE0
4C50:  MOVLW  96
4C52:  MOVWF  xF7
4C54:  CALL   0BEC
4C58:  DECFSZ xE0,F
4C5A:  BRA    4C50
4C5C:  BSF    2A.7
....................       } 
....................    }else{ 
4C5E:  BRA    4C62
....................       Flanco2=0; 
4C60:  BCF    29.5
....................    } 
....................     
....................    if(tleft>=60){ //Si oprimio tecla izquierda por 300ms o mas 
4C62:  MOVF   xCC,F
4C64:  BNZ   4C6C
4C66:  MOVF   xCB,W
4C68:  SUBLW  3B
4C6A:  BC    4C80
....................       if(!Flanco3){ 
4C6C:  BTFSC  29.6
4C6E:  BRA    4C7E
....................          delay_ms(150);  
4C70:  MOVLW  96
4C72:  MOVWF  xF7
4C74:  CALL   0BEC
....................          estadouv=!estadouv; 
4C78:  BTG    29.0
....................          Cambio=ON; 
4C7A:  BSF    2A.7
....................          Flanco3=1; 
4C7C:  BSF    29.6
....................       } 
....................    }else{ 
4C7E:  BRA    4C82
....................       Flanco3=0; 
4C80:  BCF    29.6
....................    } 
....................     
....................    if(tup>=60){ //Si oprimio tecla arriba por 300ms o mas 
4C82:  MOVF   xC6,F
4C84:  BNZ   4C8C
4C86:  MOVF   xC5,W
4C88:  SUBLW  3B
4C8A:  BC    4CC2
....................       if(!Flanco1){ 
4C8C:  BTFSC  29.4
4C8E:  BRA    4CC0
....................          delay_ms(200); 
4C90:  MOVLW  C8
4C92:  MOVWF  xF7
4C94:  CALL   0BEC
....................          printf(lcd_putc,"\f"); 
4C98:  MOVLW  0C
4C9A:  MOVWF  xF1
4C9C:  CALL   173E
....................          delay_ms(300); 
4CA0:  MOVLW  02
4CA2:  MOVWF  xE0
4CA4:  MOVLW  96
4CA6:  MOVWF  xF7
4CA8:  CALL   0BEC
4CAC:  DECFSZ xE0,F
4CAE:  BRA    4CA4
....................          Menu=1;  
4CB0:  MOVLW  01
4CB2:  MOVWF  2B
....................          paso=0; 
4CB4:  CLRF   47
....................          Flecha=2; 
4CB6:  MOVLW  02
4CB8:  MOVWF  2F
....................          Flecha2=2; 
4CBA:  MOVWF  31
....................          Cambio=ON; 
4CBC:  BSF    2A.7
....................          Flanco1=1; 
4CBE:  BSF    29.4
....................       } 
....................    }else{ 
4CC0:  BRA    4CC4
....................       Flanco1=0; 
4CC2:  BCF    29.4
....................    } 
....................        
....................    if(guardaruv==1) 
4CC4:  DECFSZ 43,W
4CC6:  BRA    4D92
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
4CC8:  MOVLW  07
4CCA:  MOVWF  FA9
4CCC:  MOVFF  34,FA8
4CD0:  BCF    FA6.6
4CD2:  BCF    FA6.7
4CD4:  BSF    FA6.2
4CD6:  MOVF   FF2,W
4CD8:  MOVWF  00
4CDA:  BCF    FF2.6
4CDC:  BCF    FF2.7
4CDE:  MOVLB  F
4CE0:  MOVLW  55
4CE2:  MOVWF  FA7
4CE4:  MOVLW  AA
4CE6:  MOVWF  FA7
4CE8:  BSF    FA6.1
4CEA:  BTFSC  FA6.1
4CEC:  BRA    4CEA
4CEE:  BCF    FA6.2
4CF0:  MOVF   00,W
4CF2:  IORWF  FF2,F
4CF4:  MOVLW  08
4CF6:  MOVWF  FA9
4CF8:  MOVFF  35,FA8
4CFC:  BCF    FA6.6
4CFE:  BCF    FA6.7
4D00:  BSF    FA6.2
4D02:  MOVF   FF2,W
4D04:  MOVWF  00
4D06:  BCF    FF2.6
4D08:  BCF    FF2.7
4D0A:  MOVLW  55
4D0C:  MOVWF  FA7
4D0E:  MOVLW  AA
4D10:  MOVWF  FA7
4D12:  BSF    FA6.1
4D14:  BTFSC  FA6.1
4D16:  BRA    4D14
4D18:  BCF    FA6.2
4D1A:  MOVF   00,W
4D1C:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
4D1E:  MOVFF  5A,36
....................       horasH=make8(horas,1); 
4D22:  MOVFF  5B,37
....................       write_eeprom(9,horasL); 
4D26:  MOVLW  09
4D28:  MOVWF  FA9
4D2A:  MOVFF  36,FA8
4D2E:  BCF    FA6.6
4D30:  BCF    FA6.7
4D32:  BSF    FA6.2
4D34:  MOVFF  FF2,00
4D38:  BCF    FF2.6
4D3A:  BCF    FF2.7
4D3C:  MOVLW  55
4D3E:  MOVWF  FA7
4D40:  MOVLW  AA
4D42:  MOVWF  FA7
4D44:  BSF    FA6.1
4D46:  BTFSC  FA6.1
4D48:  BRA    4D46
4D4A:  BCF    FA6.2
4D4C:  MOVF   00,W
4D4E:  IORWF  FF2,F
....................       delay_ms(20); 
4D50:  MOVLW  14
4D52:  MOVLB  0
4D54:  MOVWF  xF7
4D56:  CALL   0BEC
....................       write_eeprom(10,horasH); 
4D5A:  MOVLW  0A
4D5C:  MOVWF  FA9
4D5E:  MOVFF  37,FA8
4D62:  BCF    FA6.6
4D64:  BCF    FA6.7
4D66:  BSF    FA6.2
4D68:  MOVF   FF2,W
4D6A:  MOVWF  00
4D6C:  BCF    FF2.6
4D6E:  BCF    FF2.7
4D70:  MOVLB  F
4D72:  MOVLW  55
4D74:  MOVWF  FA7
4D76:  MOVLW  AA
4D78:  MOVWF  FA7
4D7A:  BSF    FA6.1
4D7C:  BTFSC  FA6.1
4D7E:  BRA    4D7C
4D80:  BCF    FA6.2
4D82:  MOVF   00,W
4D84:  IORWF  FF2,F
....................       delay_ms(20); 
4D86:  MOVLW  14
4D88:  MOVLB  0
4D8A:  MOVWF  xF7
4D8C:  CALL   0BEC
....................       guardaruv=0; 
4D90:  CLRF   43
....................    } 
....................     
....................    if(segundos>=60) 
4D92:  MOVF   34,W
4D94:  SUBLW  3B
4D96:  BC    4D9C
....................    { 
....................       segundos=0;minutos++; 
4D98:  CLRF   34
4D9A:  INCF   35,F
....................    } 
....................    if(minutos==60) 
4D9C:  MOVF   35,W
4D9E:  SUBLW  3C
4DA0:  BNZ   4DAA
....................    { 
....................       minutos=0;horas++; 
4DA2:  CLRF   35
4DA4:  INCF   5A,F
4DA6:  BTFSC  FD8.2
4DA8:  INCF   5B,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
4DAA:  MOVF   42,W
4DAC:  SUBLW  3B
4DAE:  BC    4DC8
....................    { 
....................       printf(lcd_putc,"\f"); 
4DB0:  MOVLW  0C
4DB2:  MOVWF  xF1
4DB4:  CALL   173E
....................       lcd_init(); 
4DB8:  CALL   0C7C
....................       delay_ms(200); 
4DBC:  MOVLW  C8
4DBE:  MOVWF  xF7
4DC0:  CALL   0BEC
....................       tiemporeset=0; 
4DC4:  CLRF   42
....................       Cambio=ON; 
4DC6:  BSF    2A.7
....................    }    
....................    } 
4DC8:  GOTO   2F2A
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
4DCC:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0200   HS NOIESO NOFCMEN
   Word  2: 1A1F   BROWNOUT NOWDT BORV20 NOPUT WDT8192
   Word  3: 0100   NOPBADEN CCP2C1 NOLPT1OSC NOMCLR
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
