CCS PCH C Compiler, Version 4.104, 5967               31-jul.-20 14:49

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Vertical\2020\CFLV 90 Abaco #0045882XX OP2020225\Firmware Vidrio Electrico\CabinaCFLH.lst

               ROM used: 18582 bytes (57%)
                         Largest free fragment is 14184
               RAM used: 228 (11%) at main() level
                         269 (13%) worst case
               Stack:    8 worst case (6 in main + 2 for interrupts)

*
0000:  GOTO   264E
*
0008:  GOTO   00A6
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.1
005A:  GOTO   0064
005E:  BTFSC  F9E.1
0060:  GOTO   03F6
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
00A6:  MOVWF  16
00A8:  MOVFF  FD8,17
00AC:  MOVFF  FE0,18
00B0:  MOVLB  0
00B2:  MOVFF  FE9,1E
00B6:  MOVFF  FEA,19
00BA:  MOVFF  FE1,1A
00BE:  MOVFF  FE2,1B
00C2:  MOVFF  FD9,1C
00C6:  MOVFF  FDA,1D
00CA:  MOVFF  FF3,24
00CE:  MOVFF  FF4,25
00D2:  MOVFF  FFA,26
00D6:  MOVFF  00,20
00DA:  MOVFF  01,21
00DE:  MOVFF  02,22
00E2:  MOVFF  03,23
00E6:  BTFSS  FF2.5
00E8:  GOTO   00F2
00EC:  BTFSC  FF2.2
00EE:  GOTO   03C4
00F2:  BTFSS  FF2.4
00F4:  GOTO   00FE
00F8:  BTFSC  FF2.1
00FA:  GOTO   034C
00FE:  BTFSS  FF0.3
0100:  GOTO   010A
0104:  BTFSC  FF0.0
0106:  GOTO   0296
010A:  MOVFF  20,00
010E:  MOVFF  21,01
0112:  MOVFF  22,02
0116:  MOVFF  23,03
011A:  MOVFF  1E,FE9
011E:  MOVFF  19,FEA
0122:  BSF    19.7
0124:  MOVFF  1A,FE1
0128:  MOVFF  1B,FE2
012C:  MOVFF  1C,FD9
0130:  MOVFF  1D,FDA
0134:  MOVFF  24,FF3
0138:  MOVFF  25,FF4
013C:  MOVFF  26,FFA
0140:  MOVF   16,W
0142:  MOVFF  18,FE0
0146:  MOVFF  17,FD8
014A:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=16000000) 
*
0A5A:  CLRF   FEA
0A5C:  MOVLW  F7
0A5E:  MOVWF  FE9
0A60:  MOVF   FEF,W
0A62:  BZ    0A80
0A64:  MOVLW  05
0A66:  MOVWF  01
0A68:  CLRF   00
0A6A:  DECFSZ 00,F
0A6C:  BRA    0A6A
0A6E:  DECFSZ 01,F
0A70:  BRA    0A68
0A72:  MOVLW  2E
0A74:  MOVWF  00
0A76:  DECFSZ 00,F
0A78:  BRA    0A76
0A7A:  BRA    0A7C
0A7C:  DECFSZ FEF,F
0A7E:  BRA    0A64
0A80:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
22F2:  BCF    xF3.0
....................    y = x; 
22F4:  MOVFF  E7,EC
22F8:  MOVFF  E6,EB
22FC:  MOVFF  E5,EA
2300:  MOVFF  E4,E9
....................  
....................    if (x < 0) 
2304:  MOVFF  E7,F7
2308:  MOVFF  E6,F6
230C:  MOVFF  E5,F5
2310:  MOVFF  E4,F4
2314:  CLRF   xFB
2316:  CLRF   xFA
2318:  CLRF   xF9
231A:  CLRF   xF8
231C:  CALL   0FB2
2320:  BNC   232A
....................    { 
....................       s = 1; 
2322:  BSF    xF3.0
....................       y = -y; 
2324:  MOVF   xEA,W
2326:  XORLW  80
2328:  MOVWF  xEA
....................    } 
....................  
....................    if (y <= 32768.0) 
232A:  MOVFF  EC,F7
232E:  MOVFF  EB,F6
2332:  MOVFF  EA,F5
2336:  MOVFF  E9,F4
233A:  CLRF   xFB
233C:  CLRF   xFA
233E:  CLRF   xF9
2340:  MOVLW  8E
2342:  MOVWF  xF8
2344:  CALL   0FB2
2348:  BC    234C
234A:  BNZ   237C
....................   res = (float32)(unsigned int16)y; 
234C:  MOVFF  EC,F7
2350:  MOVFF  EB,F6
2354:  MOVFF  EA,F5
2358:  MOVFF  E9,F4
235C:  RCALL  22BA
235E:  MOVFF  02,F9
2362:  MOVFF  01,F8
2366:  CALL   0CDE
236A:  MOVFF  03,F0
236E:  MOVFF  02,EF
2372:  MOVFF  01,EE
2376:  MOVFF  00,ED
....................  
....................  else if (y < 10000000.0) 
237A:  BRA    2506
237C:  MOVFF  EC,F7
2380:  MOVFF  EB,F6
2384:  MOVFF  EA,F5
2388:  MOVFF  E9,F4
238C:  MOVLW  80
238E:  MOVWF  xFB
2390:  MOVLW  96
2392:  MOVWF  xFA
2394:  MOVLW  18
2396:  MOVWF  xF9
2398:  MOVLW  96
239A:  MOVWF  xF8
239C:  CALL   0FB2
23A0:  BTFSS  FD8.0
23A2:  BRA    24F6
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
23A4:  MOVFF  EC,F7
23A8:  MOVFF  EB,F6
23AC:  MOVFF  EA,F5
23B0:  MOVFF  E9,F4
23B4:  CLRF   xFB
23B6:  CLRF   xFA
23B8:  CLRF   xF9
23BA:  MOVLW  8E
23BC:  MOVWF  xF8
23BE:  CALL   19C8
23C2:  MOVFF  03,F7
23C6:  MOVFF  02,F6
23CA:  MOVFF  01,F5
23CE:  MOVFF  00,F4
23D2:  RCALL  22BA
23D4:  MOVFF  02,F2
23D8:  MOVFF  01,F1
....................       y = 32768.0*(y/32768.0 - (float32)l); 
23DC:  MOVFF  EC,F7
23E0:  MOVFF  EB,F6
23E4:  MOVFF  EA,F5
23E8:  MOVFF  E9,F4
23EC:  CLRF   xFB
23EE:  CLRF   xFA
23F0:  CLRF   xF9
23F2:  MOVLW  8E
23F4:  MOVWF  xF8
23F6:  CALL   19C8
23FA:  MOVFF  00,F4
23FE:  MOVFF  01,F5
2402:  MOVFF  02,F6
2406:  MOVFF  03,F7
240A:  MOVFF  F2,F9
240E:  MOVFF  F1,F8
2412:  CALL   0CDE
2416:  BSF    FD8.1
2418:  MOVFF  F7,FB
241C:  MOVFF  F6,FA
2420:  MOVFF  F5,F9
2424:  MOVFF  F4,F8
2428:  MOVFF  03,FF
242C:  MOVFF  02,FE
2430:  MOVFF  01,FD
2434:  MOVFF  00,FC
2438:  CALL   1B70
243C:  CLRF   xF7
243E:  CLRF   xF6
2440:  CLRF   xF5
2442:  MOVLW  8E
2444:  MOVWF  xF4
2446:  MOVFF  03,FB
244A:  MOVFF  02,FA
244E:  MOVFF  01,F9
2452:  MOVFF  00,F8
2456:  RCALL  1F88
2458:  MOVFF  03,EC
245C:  MOVFF  02,EB
2460:  MOVFF  01,EA
2464:  MOVFF  00,E9
....................   res = 32768.0*(float32)l; 
2468:  MOVFF  F2,F9
246C:  MOVFF  F1,F8
2470:  CALL   0CDE
2474:  CLRF   xF7
2476:  CLRF   xF6
2478:  CLRF   xF5
247A:  MOVLW  8E
247C:  MOVWF  xF4
247E:  MOVFF  03,FB
2482:  MOVFF  02,FA
2486:  MOVFF  01,F9
248A:  MOVFF  00,F8
248E:  RCALL  1F88
2490:  MOVFF  03,F0
2494:  MOVFF  02,EF
2498:  MOVFF  01,EE
249C:  MOVFF  00,ED
....................   res += (float32)(unsigned int16)y; 
24A0:  MOVFF  EC,F7
24A4:  MOVFF  EB,F6
24A8:  MOVFF  EA,F5
24AC:  MOVFF  E9,F4
24B0:  RCALL  22BA
24B2:  MOVFF  02,F9
24B6:  MOVFF  01,F8
24BA:  CALL   0CDE
24BE:  BCF    FD8.1
24C0:  MOVFF  F0,FB
24C4:  MOVFF  EF,FA
24C8:  MOVFF  EE,F9
24CC:  MOVFF  ED,F8
24D0:  MOVFF  03,FF
24D4:  MOVFF  02,FE
24D8:  MOVFF  01,FD
24DC:  MOVFF  00,FC
24E0:  CALL   1B70
24E4:  MOVFF  03,F0
24E8:  MOVFF  02,EF
24EC:  MOVFF  01,EE
24F0:  MOVFF  00,ED
....................  } 
....................  
....................  else 
24F4:  BRA    2506
....................   res = y; 
24F6:  MOVFF  EC,F0
24FA:  MOVFF  EB,EF
24FE:  MOVFF  EA,EE
2502:  MOVFF  E9,ED
....................  
....................  y = y - (float32)(unsigned int16)y; 
2506:  MOVFF  EC,F7
250A:  MOVFF  EB,F6
250E:  MOVFF  EA,F5
2512:  MOVFF  E9,F4
2516:  RCALL  22BA
2518:  MOVFF  02,F9
251C:  MOVFF  01,F8
2520:  CALL   0CDE
2524:  BSF    FD8.1
2526:  MOVFF  EC,FB
252A:  MOVFF  EB,FA
252E:  MOVFF  EA,F9
2532:  MOVFF  E9,F8
2536:  MOVFF  03,FF
253A:  MOVFF  02,FE
253E:  MOVFF  01,FD
2542:  MOVFF  00,FC
2546:  CALL   1B70
254A:  MOVFF  03,EC
254E:  MOVFF  02,EB
2552:  MOVFF  01,EA
2556:  MOVFF  00,E9
....................  
....................  if (s) 
255A:  BTFSS  xF3.0
255C:  BRA    2564
....................   res = -res; 
255E:  MOVF   xEE,W
2560:  XORLW  80
2562:  MOVWF  xEE
....................  
....................  if (y != 0) 
2564:  MOVFF  EC,F7
2568:  MOVFF  EB,F6
256C:  MOVFF  EA,F5
2570:  MOVFF  E9,F4
2574:  CLRF   xFB
2576:  CLRF   xFA
2578:  CLRF   xF9
257A:  CLRF   xF8
257C:  CALL   0FB2
2580:  BZ    25F2
....................  { 
....................   if (s == 1 && n == 0) 
2582:  BTFSS  xF3.0
2584:  BRA    25BA
2586:  MOVF   xE8,F
2588:  BNZ   25BA
....................    res -= 1.0; 
258A:  BSF    FD8.1
258C:  MOVFF  F0,FB
2590:  MOVFF  EF,FA
2594:  MOVFF  EE,F9
2598:  MOVFF  ED,F8
259C:  CLRF   xFF
259E:  CLRF   xFE
25A0:  CLRF   xFD
25A2:  MOVLW  7F
25A4:  MOVWF  xFC
25A6:  CALL   1B70
25AA:  MOVFF  03,F0
25AE:  MOVFF  02,EF
25B2:  MOVFF  01,EE
25B6:  MOVFF  00,ED
....................  
....................   if (s == 0 && n == 1) 
25BA:  BTFSC  xF3.0
25BC:  BRA    25F2
25BE:  DECFSZ xE8,W
25C0:  BRA    25F2
....................    res += 1.0; 
25C2:  BCF    FD8.1
25C4:  MOVFF  F0,FB
25C8:  MOVFF  EF,FA
25CC:  MOVFF  EE,F9
25D0:  MOVFF  ED,F8
25D4:  CLRF   xFF
25D6:  CLRF   xFE
25D8:  CLRF   xFD
25DA:  MOVLW  7F
25DC:  MOVWF  xFC
25DE:  CALL   1B70
25E2:  MOVFF  03,F0
25E6:  MOVFF  02,EF
25EA:  MOVFF  01,EE
25EE:  MOVFF  00,ED
....................  } 
....................  if (x == 0) 
25F2:  MOVFF  E7,F7
25F6:  MOVFF  E6,F6
25FA:  MOVFF  E5,F5
25FE:  MOVFF  E4,F4
2602:  CLRF   xFB
2604:  CLRF   xFA
2606:  CLRF   xF9
2608:  CLRF   xF8
260A:  CALL   0FB2
260E:  BNZ   2618
....................     res = 0; 
2610:  CLRF   xF0
2612:  CLRF   xEF
2614:  CLRF   xEE
2616:  CLRF   xED
....................  
....................  return (res); 
2618:  MOVFF  ED,00
261C:  MOVFF  EE,01
2620:  MOVFF  EF,02
2624:  MOVFF  F0,03
.................... } 
2628:  GOTO   2640 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
262C:  MOVFF  E3,E7
2630:  MOVFF  E2,E6
2634:  MOVFF  E1,E5
2638:  MOVFF  E0,E4
263C:  CLRF   xE8
263E:  BRA    22F2
.................... } 
2640:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0A82:  SWAPF  xF8,W
0A84:  ANDLW  F0
0A86:  MOVWF  00
0A88:  MOVLW  0F
0A8A:  ANDWF  F83,W
0A8C:  IORWF  00,W
0A8E:  MOVWF  F83
....................       delay_cycles(30);//30 
0A90:  MOVLW  09
0A92:  MOVWF  00
0A94:  DECFSZ 00,F
0A96:  BRA    0A94
0A98:  BRA    0A9A
....................       lcd.enable = 1; 
0A9A:  BSF    F83.3
....................       delay_us(55);//55 
0A9C:  MOVLW  49
0A9E:  MOVWF  00
0AA0:  DECFSZ 00,F
0AA2:  BRA    0AA0
....................       lcd.enable = 0; 
0AA4:  BCF    F83.3
.................... } 
0AA6:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0AA8:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0AAA:  MOVLW  01
0AAC:  MOVWF  xF7
0AAE:  RCALL  0A5A
....................       lcd.rs = address; 
0AB0:  BTFSS  xF5.0
0AB2:  BCF    F83.1
0AB4:  BTFSC  xF5.0
0AB6:  BSF    F83.1
....................       delay_cycles(30);//30 
0AB8:  MOVLW  09
0ABA:  MOVWF  00
0ABC:  DECFSZ 00,F
0ABE:  BRA    0ABC
0AC0:  BRA    0AC2
....................       lcd.rw = 0; 
0AC2:  BCF    F83.2
....................       delay_cycles(30);//30 
0AC4:  MOVLW  09
0AC6:  MOVWF  00
0AC8:  DECFSZ 00,F
0ACA:  BRA    0AC8
0ACC:  BRA    0ACE
....................       lcd.enable = 0; 
0ACE:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
0AD0:  SWAPF  xF6,W
0AD2:  MOVWF  xF7
0AD4:  MOVLW  0F
0AD6:  ANDWF  xF7,F
0AD8:  MOVFF  F7,F8
0ADC:  RCALL  0A82
....................       lcd_send_nibble(n & 0xf); 
0ADE:  MOVF   xF6,W
0AE0:  ANDLW  0F
0AE2:  MOVWF  xF7
0AE4:  MOVWF  xF8
0AE6:  RCALL  0A82
.................... } 
0AE8:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
0AEA:  MOVLW  00
0AEC:  MOVWF  F95
....................     lcd.rs = 0; 
0AEE:  BCF    F83.1
....................     lcd.rw = 0; 
0AF0:  BCF    F83.2
....................     lcd.enable = 0; 
0AF2:  BCF    F83.3
....................     delay_ms(15); 
0AF4:  MOVLW  0F
0AF6:  MOVWF  xF7
0AF8:  RCALL  0A5A
....................     for(i=1;i<=3;++i) { 
0AFA:  MOVLW  01
0AFC:  MOVWF  xE0
0AFE:  MOVF   xE0,W
0B00:  SUBLW  03
0B02:  BNC   0B14
....................        lcd_send_nibble(3); 
0B04:  MOVLW  03
0B06:  MOVWF  xF8
0B08:  RCALL  0A82
....................        delay_ms(5); 
0B0A:  MOVLW  05
0B0C:  MOVWF  xF7
0B0E:  RCALL  0A5A
....................     } 
0B10:  INCF   xE0,F
0B12:  BRA    0AFE
....................     lcd_send_nibble(2); 
0B14:  MOVLW  02
0B16:  MOVWF  xF8
0B18:  RCALL  0A82
....................     for(i=0;i<=3;++i) 
0B1A:  CLRF   xE0
0B1C:  MOVF   xE0,W
0B1E:  SUBLW  03
0B20:  BNC   0B46
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0B22:  CLRF   03
0B24:  MOVF   xE0,W
0B26:  MOVFF  FF2,E1
0B2A:  BCF    FF2.6
0B2C:  BCF    FF2.7
0B2E:  CALL   014C
0B32:  BTFSC  xE1.6
0B34:  BSF    FF2.6
0B36:  BTFSC  xE1.7
0B38:  BSF    FF2.7
0B3A:  MOVWF  xE1
0B3C:  CLRF   xF5
0B3E:  MOVWF  xF6
0B40:  RCALL  0AA8
0B42:  INCF   xE0,F
0B44:  BRA    0B1C
.................... } 
0B46:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0B92:  MOVLW  01
0B94:  SUBWF  xF3,W
0B96:  ADDLW  FC
0B98:  BC    0BB8
0B9A:  ADDLW  04
0B9C:  GOTO   0BC8
....................      case 1 : address=0x80;break; 
0BA0:  MOVLW  80
0BA2:  MOVWF  xF4
0BA4:  BRA    0BB8
....................      case 2 : address=0xc0;break; 
0BA6:  MOVLW  C0
0BA8:  MOVWF  xF4
0BAA:  BRA    0BB8
....................      case 3 : address=0x94;break; 
0BAC:  MOVLW  94
0BAE:  MOVWF  xF4
0BB0:  BRA    0BB8
....................      case 4 : address=0xd4;break; 
0BB2:  MOVLW  D4
0BB4:  MOVWF  xF4
0BB6:  BRA    0BB8
....................    } 
....................    address+=x-1; 
0BB8:  MOVLW  01
0BBA:  SUBWF  xF2,W
0BBC:  ADDWF  xF4,F
....................    lcd_send_byte(0,address); 
0BBE:  CLRF   xF5
0BC0:  MOVFF  F4,F6
0BC4:  RCALL  0AA8
.................... } 
0BC6:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0BFA:  MOVF   xF1,W
0BFC:  SUBLW  F1
0BFE:  BNZ   0C04
....................    { 
....................       c=238; 
0C00:  MOVLW  EE
0C02:  MOVWF  xF1
....................    } 
....................    if(c=='Ñ') 
0C04:  MOVF   xF1,W
0C06:  SUBLW  D1
0C08:  BNZ   0C0E
....................    { 
....................       c=255; 
0C0A:  MOVLW  FF
0C0C:  MOVWF  xF1
....................    } 
....................     
....................    switch (c) { 
0C0E:  MOVF   xF1,W
0C10:  XORLW  0C
0C12:  BZ    0C1E
0C14:  XORLW  06
0C16:  BZ    0C32
0C18:  XORLW  02
0C1A:  BZ    0C40
0C1C:  BRA    0C4A
....................      case '\f'   : lcd_send_byte(0,1); 
0C1E:  CLRF   xF5
0C20:  MOVLW  01
0C22:  MOVWF  xF6
0C24:  RCALL  0AA8
....................                    lcdline=1; 
0C26:  MOVLW  01
0C28:  MOVWF  28
....................                    delay_ms(2); 
0C2A:  MOVLW  02
0C2C:  MOVWF  xF7
0C2E:  RCALL  0A5A
....................                                            break; 
0C30:  BRA    0C56
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0C32:  INCF   28,F
0C34:  MOVLW  01
0C36:  MOVWF  xF2
0C38:  MOVFF  28,F3
0C3C:  RCALL  0B92
0C3E:  BRA    0C56
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0C40:  CLRF   xF5
0C42:  MOVLW  10
0C44:  MOVWF  xF6
0C46:  RCALL  0AA8
0C48:  BRA    0C56
....................      default     : lcd_send_byte(1,c);     break; 
0C4A:  MOVLW  01
0C4C:  MOVWF  xF5
0C4E:  MOVFF  F1,F6
0C52:  RCALL  0AA8
0C54:  BRA    0C56
....................    } 
.................... } 
0C56:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF,flag_arriba=OFF,Entro=0; 
.................... short flagdn=0,flagup=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,n=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
177C:  DECFSZ xE1,W
177E:  BRA    1798
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1780:  MOVLW  02
1782:  MOVWF  xF2
1784:  MOVFF  E2,F3
1788:  CALL   0B92
178C:  MOVLW  70
178E:  MOVWF  FF6
1790:  MOVLW  01
1792:  MOVWF  FF7
1794:  CALL   0C58
....................    if(x==2) 
1798:  MOVF   xE1,W
179A:  SUBLW  02
179C:  BNZ   17B6
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
179E:  MOVLW  02
17A0:  MOVWF  xF2
17A2:  MOVFF  E2,F3
17A6:  CALL   0B92
17AA:  MOVLW  84
17AC:  MOVWF  FF6
17AE:  MOVLW  01
17B0:  MOVWF  FF7
17B2:  CALL   0C58
....................    if(x==3) 
17B6:  MOVF   xE1,W
17B8:  SUBLW  03
17BA:  BNZ   17D4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
17BC:  MOVLW  02
17BE:  MOVWF  xF2
17C0:  MOVFF  E2,F3
17C4:  CALL   0B92
17C8:  MOVLW  98
17CA:  MOVWF  FF6
17CC:  MOVLW  01
17CE:  MOVWF  FF7
17D0:  CALL   0C58
....................    if(x==4) 
17D4:  MOVF   xE1,W
17D6:  SUBLW  04
17D8:  BNZ   17F2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
17DA:  MOVLW  02
17DC:  MOVWF  xF2
17DE:  MOVFF  E2,F3
17E2:  CALL   0B92
17E6:  MOVLW  AC
17E8:  MOVWF  FF6
17EA:  MOVLW  01
17EC:  MOVWF  FF7
17EE:  CALL   0C58
....................     
....................    if(x==5) 
17F2:  MOVF   xE1,W
17F4:  SUBLW  05
17F6:  BNZ   1830
....................    {if(estadoalarma==0) 
17F8:  BTFSC  2A.4
17FA:  BRA    1814
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
17FC:  MOVLW  02
17FE:  MOVWF  xF2
1800:  MOVFF  E2,F3
1804:  CALL   0B92
1808:  MOVLW  C0
180A:  MOVWF  FF6
180C:  MOVLW  01
180E:  MOVWF  FF7
1810:  CALL   0C58
....................    if(estadoalarma==1) 
1814:  BTFSS  2A.4
1816:  BRA    1830
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
1818:  MOVLW  02
181A:  MOVWF  xF2
181C:  MOVFF  E2,F3
1820:  CALL   0B92
1824:  MOVLW  D4
1826:  MOVWF  FF6
1828:  MOVLW  01
182A:  MOVWF  FF7
182C:  CALL   0C58
....................    } 
....................     
....................    if(x==6) 
1830:  MOVF   xE1,W
1832:  SUBLW  06
1834:  BNZ   184E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
1836:  MOVLW  02
1838:  MOVWF  xF2
183A:  MOVFF  E2,F3
183E:  CALL   0B92
1842:  MOVLW  E8
1844:  MOVWF  FF6
1846:  MOVLW  01
1848:  MOVWF  FF7
184A:  CALL   0C58
.................... } 
184E:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1972:  RLCF   xE5,W
1974:  MOVWF  00
1976:  RLCF   00,F
1978:  MOVLW  FC
197A:  ANDWF  00,F
197C:  MOVFF  00,01
1980:  MOVF   FC2,W
1982:  ANDLW  C3
1984:  IORWF  00,W
1986:  MOVWF  FC2
1988:  MOVLW  0A
198A:  MOVWF  xF7
198C:  CALL   0A5A
1990:  BSF    FC2.1
1992:  BTFSC  FC2.1
1994:  BRA    1992
1996:  MOVFF  FC4,03
199A:  MOVFF  FC3,F8
199E:  MOVFF  FC4,F9
19A2:  CALL   0CDE
19A6:  MOVFF  03,E9
19AA:  MOVFF  02,E8
19AE:  MOVFF  01,E7
19B2:  MOVFF  00,E6
19B6:  MOVFF  E6,00
19BA:  MOVFF  E7,01
19BE:  MOVFF  E8,02
19C2:  MOVFF  E9,03
.................... } 
19C6:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1DF2:  CLRF   xE4
1DF4:  CLRF   xE3
1DF6:  CLRF   xE2
1DF8:  CLRF   xE1
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
1DFA:  CLRF   xE5
1DFC:  RCALL  1972
1DFE:  MOVFF  03,B0
1E02:  MOVFF  02,AF
1E06:  MOVFF  01,AE
1E0A:  MOVFF  00,AD
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1E0E:  MOVFF  B0,F7
1E12:  MOVFF  AF,F6
1E16:  MOVFF  AE,F5
1E1A:  MOVFF  AD,F4
1E1E:  MOVFF  C0,FB
1E22:  MOVFF  BF,FA
1E26:  MOVFF  BE,F9
1E2A:  MOVFF  BD,F8
1E2E:  RCALL  19C8
1E30:  MOVFF  00,E5
1E34:  MOVFF  01,E6
1E38:  MOVFF  02,E7
1E3C:  MOVFF  03,E8
1E40:  BSF    FD8.1
1E42:  MOVFF  03,FB
1E46:  MOVFF  02,FA
1E4A:  MOVFF  01,F9
1E4E:  MOVFF  00,F8
1E52:  CLRF   xFF
1E54:  CLRF   xFE
1E56:  CLRF   xFD
1E58:  MOVLW  7F
1E5A:  MOVWF  xFC
1E5C:  RCALL  1B70
1E5E:  MOVFF  03,B4
1E62:  MOVFF  02,B3
1E66:  MOVFF  01,B2
1E6A:  MOVFF  00,B1
....................     
....................    if(Presion<0.0) 
1E6E:  MOVFF  B4,F7
1E72:  MOVFF  B3,F6
1E76:  MOVFF  B2,F5
1E7A:  MOVFF  B1,F4
1E7E:  CLRF   xFB
1E80:  CLRF   xFA
1E82:  CLRF   xF9
1E84:  CLRF   xF8
1E86:  CALL   0FB2
1E8A:  BNC   1E94
....................    { 
....................       Presion=0.0; 
1E8C:  CLRF   xB4
1E8E:  CLRF   xB3
1E90:  CLRF   xB2
1E92:  CLRF   xB1
....................    } 
....................  
....................    if(r>media-1) 
1E94:  MOVLW  01
1E96:  SUBWF  xE0,W
1E98:  SUBWF  3F,W
1E9A:  BZ    1EA0
1E9C:  BNC   1EA0
....................    {r=0;} 
1E9E:  CLRF   3F
....................    PromPresion[r]=Presion;r++; 
1EA0:  MOVF   3F,W
1EA2:  MULLW  04
1EA4:  MOVF   FF3,W
1EA6:  CLRF   03
1EA8:  ADDLW  5D
1EAA:  MOVWF  FE9
1EAC:  MOVLW  00
1EAE:  ADDWFC 03,W
1EB0:  MOVWF  FEA
1EB2:  MOVFF  B1,FEF
1EB6:  MOVFF  B2,FEC
1EBA:  MOVFF  B3,FEC
1EBE:  MOVFF  B4,FEC
1EC2:  INCF   3F,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1EC4:  CLRF   40
1EC6:  MOVLW  01
1EC8:  SUBWF  xE0,W
1ECA:  SUBWF  40,W
1ECC:  BZ    1ED0
1ECE:  BC    1F3A
....................    { 
....................       promediopresion+=PromPresion[q]; 
1ED0:  MOVF   40,W
1ED2:  MULLW  04
1ED4:  MOVF   FF3,W
1ED6:  CLRF   03
1ED8:  ADDLW  5D
1EDA:  MOVWF  FE9
1EDC:  MOVLW  00
1EDE:  ADDWFC 03,W
1EE0:  MOVWF  FEA
1EE2:  MOVFF  FEF,00
1EE6:  MOVFF  FEC,01
1EEA:  MOVFF  FEC,02
1EEE:  MOVFF  FEC,03
1EF2:  MOVFF  FEA,E6
1EF6:  MOVFF  FE9,E5
1EFA:  BCF    FD8.1
1EFC:  MOVFF  E4,FB
1F00:  MOVFF  E3,FA
1F04:  MOVFF  E2,F9
1F08:  MOVFF  E1,F8
1F0C:  MOVFF  03,FF
1F10:  MOVFF  02,FE
1F14:  MOVFF  01,FD
1F18:  MOVFF  00,FC
1F1C:  RCALL  1B70
1F1E:  MOVFF  E6,FEA
1F22:  MOVFF  E5,FE9
1F26:  MOVFF  03,E4
1F2A:  MOVFF  02,E3
1F2E:  MOVFF  01,E2
1F32:  MOVFF  00,E1
....................    }  
1F36:  INCF   40,F
1F38:  BRA    1EC6
....................    promediopresion=promediopresion/media;    
1F3A:  CLRF   xF9
1F3C:  MOVFF  E0,F8
1F40:  CALL   0CDE
1F44:  MOVFF  E4,F7
1F48:  MOVFF  E3,F6
1F4C:  MOVFF  E2,F5
1F50:  MOVFF  E1,F4
1F54:  MOVFF  03,FB
1F58:  MOVFF  02,FA
1F5C:  MOVFF  01,F9
1F60:  MOVFF  00,F8
1F64:  RCALL  19C8
1F66:  MOVFF  03,E4
1F6A:  MOVFF  02,E3
1F6E:  MOVFF  01,E2
1F72:  MOVFF  00,E1
....................     
....................    return promediopresion; 
1F76:  MOVFF  E1,00
1F7A:  MOVFF  E2,01
1F7E:  MOVFF  E3,02
1F82:  MOVFF  E4,03
.................... } 
1F86:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0B48:  MOVLW  C8
0B4A:  MOVWF  xF7
0B4C:  RCALL  0A5A
....................    lcd_init(); 
0B4E:  RCALL  0AEA
....................    set_tris_a(0XFF); 
0B50:  MOVLW  FF
0B52:  MOVWF  F92
....................    set_tris_e(0XFF); 
0B54:  MOVWF  F96
....................    enable_interrupts(global); 
0B56:  MOVLW  C0
0B58:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
0B5A:  BSF    FF2.4
0B5C:  BSF    FF1.6
....................    enable_interrupts(INT_EXT1_H2L); 
0B5E:  BSF    FF0.3
0B60:  BCF    FF1.5
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
0B62:  MOVLW  C7
0B64:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0B66:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_8); 
0B68:  MOVLW  B5
0B6A:  MOVWF  FCD
....................    //enable_interrupts(INT_TIMER1); 
....................    setup_timer_2(T2_DIV_BY_16,0xfd,1); 
0B6C:  MOVLW  00
0B6E:  IORLW  06
0B70:  MOVWF  FCA
0B72:  MOVLW  FD
0B74:  MOVWF  FCB
....................    enable_interrupts(INT_TIMER2); 
0B76:  BSF    F9D.1
....................    setup_adc_ports(AN0); 
0B78:  MOVF   FC1,W
0B7A:  ANDLW  C0
0B7C:  IORLW  0E
0B7E:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0B80:  BCF    FC0.0
0B82:  BSF    FC0.1
0B84:  BCF    FC0.2
0B86:  BSF    FC0.7
0B88:  BSF    FC2.0
....................    enable_interrupts(global); 
0B8A:  MOVLW  C0
0B8C:  IORWF  FF2,F
.................... } 
0B8E:  GOTO   2808 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
0C78:  MOVLW  01
0C7A:  MOVWF  xF2
0C7C:  MOVWF  xF3
0C7E:  RCALL  0B92
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
0C80:  MOVLW  FC
0C82:  MOVWF  FF6
0C84:  MOVLW  01
0C86:  MOVWF  FF7
0C88:  RCALL  0C58
....................    lcd_gotoxy(1,2); 
0C8A:  MOVLW  01
0C8C:  MOVWF  xF2
0C8E:  MOVLW  02
0C90:  MOVWF  xF3
0C92:  RCALL  0B92
....................    printf(lcd_putc,"      VERTICAL      "); 
0C94:  MOVLW  12
0C96:  MOVWF  FF6
0C98:  MOVLW  02
0C9A:  MOVWF  FF7
0C9C:  RCALL  0C58
....................    lcd_gotoxy(1,3); 
0C9E:  MOVLW  01
0CA0:  MOVWF  xF2
0CA2:  MOVLW  03
0CA4:  MOVWF  xF3
0CA6:  RCALL  0B92
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0CA8:  MOVLW  28
0CAA:  MOVWF  FF6
0CAC:  MOVLW  02
0CAE:  MOVWF  FF7
0CB0:  RCALL  0C58
....................    lcd_gotoxy(1,4); 
0CB2:  MOVLW  01
0CB4:  MOVWF  xF2
0CB6:  MOVLW  04
0CB8:  MOVWF  xF3
0CBA:  RCALL  0B92
....................    printf(lcd_putc,"     REF:JPCV36     "); 
0CBC:  MOVLW  3E
0CBE:  MOVWF  FF6
0CC0:  MOVLW  02
0CC2:  MOVWF  FF7
0CC4:  RCALL  0C58
....................    delay_ms(2000); 
0CC6:  MOVLW  08
0CC8:  MOVWF  xE0
0CCA:  MOVLW  FA
0CCC:  MOVWF  xF7
0CCE:  RCALL  0A5A
0CD0:  DECFSZ xE0,F
0CD2:  BRA    0CCA
....................    printf(lcd_putc,"\f"); 
0CD4:  MOVLW  0C
0CD6:  MOVWF  xF1
0CD8:  RCALL  0BFA
.................... } 
0CDA:  GOTO   280C (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0D14:  MOVFF  FF2,E0
0D18:  BCF    FF2.6
0D1A:  BCF    FF2.7
0D1C:  CLRF   FA9
0D1E:  BCF    FA6.6
0D20:  BCF    FA6.7
0D22:  BSF    FA6.0
0D24:  MOVF   FA8,W
0D26:  BTFSC  xE0.6
0D28:  BSF    FF2.6
0D2A:  BTFSC  xE0.7
0D2C:  BSF    FF2.7
0D2E:  MOVWF  4D
....................    delay_ms(20);  
0D30:  MOVLW  14
0D32:  MOVWF  xF7
0D34:  RCALL  0A5A
....................    contrasena[1]=read_eeprom(1); 
0D36:  MOVFF  FF2,E0
0D3A:  BCF    FF2.6
0D3C:  BCF    FF2.7
0D3E:  MOVLW  01
0D40:  MOVWF  FA9
0D42:  BCF    FA6.6
0D44:  BCF    FA6.7
0D46:  BSF    FA6.0
0D48:  MOVF   FA8,W
0D4A:  BTFSC  xE0.6
0D4C:  BSF    FF2.6
0D4E:  BTFSC  xE0.7
0D50:  BSF    FF2.7
0D52:  MOVWF  4E
....................    delay_ms(20); 
0D54:  MOVLW  14
0D56:  MOVWF  xF7
0D58:  RCALL  0A5A
....................    contrasena[2]=read_eeprom(2); 
0D5A:  MOVFF  FF2,E0
0D5E:  BCF    FF2.6
0D60:  BCF    FF2.7
0D62:  MOVLW  02
0D64:  MOVWF  FA9
0D66:  BCF    FA6.6
0D68:  BCF    FA6.7
0D6A:  BSF    FA6.0
0D6C:  MOVF   FA8,W
0D6E:  BTFSC  xE0.6
0D70:  BSF    FF2.6
0D72:  BTFSC  xE0.7
0D74:  BSF    FF2.7
0D76:  MOVWF  4F
....................    delay_ms(20);  
0D78:  MOVLW  14
0D7A:  MOVWF  xF7
0D7C:  RCALL  0A5A
....................    contrasena[3]=read_eeprom(3); 
0D7E:  MOVFF  FF2,E0
0D82:  BCF    FF2.6
0D84:  BCF    FF2.7
0D86:  MOVLW  03
0D88:  MOVWF  FA9
0D8A:  BCF    FA6.6
0D8C:  BCF    FA6.7
0D8E:  BSF    FA6.0
0D90:  MOVF   FA8,W
0D92:  BTFSC  xE0.6
0D94:  BSF    FF2.6
0D96:  BTFSC  xE0.7
0D98:  BSF    FF2.7
0D9A:  MOVWF  50
....................    delay_ms(20); 
0D9C:  MOVLW  14
0D9E:  MOVWF  xF7
0DA0:  RCALL  0A5A
....................    estadoalarma=read_eeprom(4); 
0DA2:  MOVFF  FF2,E0
0DA6:  BCF    FF2.6
0DA8:  BCF    FF2.7
0DAA:  MOVLW  04
0DAC:  MOVWF  FA9
0DAE:  BCF    FA6.6
0DB0:  BCF    FA6.7
0DB2:  BSF    FA6.0
0DB4:  MOVF   FA8,W
0DB6:  BTFSC  xE0.6
0DB8:  BSF    FF2.6
0DBA:  BTFSC  xE0.7
0DBC:  BSF    FF2.7
0DBE:  MOVWF  01
0DC0:  BCF    2A.4
0DC2:  BTFSC  01.0
0DC4:  BSF    2A.4
....................    delay_ms(20); 
0DC6:  MOVLW  14
0DC8:  MOVWF  xF7
0DCA:  RCALL  0A5A
....................    tempo_minutos=read_eeprom(5); 
0DCC:  MOVFF  FF2,E0
0DD0:  BCF    FF2.6
0DD2:  BCF    FF2.7
0DD4:  MOVLW  05
0DD6:  MOVWF  FA9
0DD8:  BCF    FA6.6
0DDA:  BCF    FA6.7
0DDC:  BSF    FA6.0
0DDE:  MOVF   FA8,W
0DE0:  BTFSC  xE0.6
0DE2:  BSF    FF2.6
0DE4:  BTFSC  xE0.7
0DE6:  BSF    FF2.7
0DE8:  MOVWF  3B
....................    delay_ms(20); 
0DEA:  MOVLW  14
0DEC:  MOVWF  xF7
0DEE:  RCALL  0A5A
....................    tempo_segundos=read_eeprom(6); 
0DF0:  MOVFF  FF2,E0
0DF4:  BCF    FF2.6
0DF6:  BCF    FF2.7
0DF8:  MOVLW  06
0DFA:  MOVWF  FA9
0DFC:  BCF    FA6.6
0DFE:  BCF    FA6.7
0E00:  BSF    FA6.0
0E02:  MOVF   FA8,W
0E04:  BTFSC  xE0.6
0E06:  BSF    FF2.6
0E08:  BTFSC  xE0.7
0E0A:  BSF    FF2.7
0E0C:  MOVWF  3C
....................    delay_ms(20); 
0E0E:  MOVLW  14
0E10:  MOVWF  xF7
0E12:  RCALL  0A5A
....................    segundos=read_eeprom(7); 
0E14:  MOVFF  FF2,E0
0E18:  BCF    FF2.6
0E1A:  BCF    FF2.7
0E1C:  MOVLW  07
0E1E:  MOVWF  FA9
0E20:  BCF    FA6.6
0E22:  BCF    FA6.7
0E24:  BSF    FA6.0
0E26:  MOVF   FA8,W
0E28:  BTFSC  xE0.6
0E2A:  BSF    FF2.6
0E2C:  BTFSC  xE0.7
0E2E:  BSF    FF2.7
0E30:  MOVWF  35
....................    delay_ms(20); 
0E32:  MOVLW  14
0E34:  MOVWF  xF7
0E36:  RCALL  0A5A
....................    minutos=read_eeprom(8); 
0E38:  MOVFF  FF2,E0
0E3C:  BCF    FF2.6
0E3E:  BCF    FF2.7
0E40:  MOVLW  08
0E42:  MOVWF  FA9
0E44:  BCF    FA6.6
0E46:  BCF    FA6.7
0E48:  BSF    FA6.0
0E4A:  MOVF   FA8,W
0E4C:  BTFSC  xE0.6
0E4E:  BSF    FF2.6
0E50:  BTFSC  xE0.7
0E52:  BSF    FF2.7
0E54:  MOVWF  36
....................    delay_ms(20); 
0E56:  MOVLW  14
0E58:  MOVWF  xF7
0E5A:  RCALL  0A5A
....................    horasL=read_eeprom(9); 
0E5C:  MOVFF  FF2,E0
0E60:  BCF    FF2.6
0E62:  BCF    FF2.7
0E64:  MOVLW  09
0E66:  MOVWF  FA9
0E68:  BCF    FA6.6
0E6A:  BCF    FA6.7
0E6C:  BSF    FA6.0
0E6E:  MOVF   FA8,W
0E70:  BTFSC  xE0.6
0E72:  BSF    FF2.6
0E74:  BTFSC  xE0.7
0E76:  BSF    FF2.7
0E78:  MOVWF  37
....................    delay_ms(20); 
0E7A:  MOVLW  14
0E7C:  MOVWF  xF7
0E7E:  RCALL  0A5A
....................    horasH=read_eeprom(10); 
0E80:  MOVFF  FF2,E0
0E84:  BCF    FF2.6
0E86:  BCF    FF2.7
0E88:  MOVLW  0A
0E8A:  MOVWF  FA9
0E8C:  BCF    FA6.6
0E8E:  BCF    FA6.7
0E90:  BSF    FA6.0
0E92:  MOVF   FA8,W
0E94:  BTFSC  xE0.6
0E96:  BSF    FF2.6
0E98:  BTFSC  xE0.7
0E9A:  BSF    FF2.7
0E9C:  MOVWF  38
....................    delay_ms(20); 
0E9E:  MOVLW  14
0EA0:  MOVWF  xF7
0EA2:  RCALL  0A5A
....................    G_l=read_eeprom(11); 
0EA4:  MOVFF  FF2,E0
0EA8:  BCF    FF2.6
0EAA:  BCF    FF2.7
0EAC:  MOVLW  0B
0EAE:  MOVWF  FA9
0EB0:  BCF    FA6.6
0EB2:  BCF    FA6.7
0EB4:  BSF    FA6.0
0EB6:  MOVF   FA8,W
0EB8:  BTFSC  xE0.6
0EBA:  BSF    FF2.6
0EBC:  BTFSC  xE0.7
0EBE:  BSF    FF2.7
0EC0:  MOVWF  39
....................    delay_ms(20); 
0EC2:  MOVLW  14
0EC4:  MOVWF  xF7
0EC6:  RCALL  0A5A
....................    G_h=read_eeprom(12); 
0EC8:  MOVFF  FF2,E0
0ECC:  BCF    FF2.6
0ECE:  BCF    FF2.7
0ED0:  MOVLW  0C
0ED2:  MOVWF  FA9
0ED4:  BCF    FA6.6
0ED6:  BCF    FA6.7
0ED8:  BSF    FA6.0
0EDA:  MOVF   FA8,W
0EDC:  BTFSC  xE0.6
0EDE:  BSF    FF2.6
0EE0:  BTFSC  xE0.7
0EE2:  BSF    FF2.7
0EE4:  MOVWF  3A
....................    delay_ms(20); 
0EE6:  MOVLW  14
0EE8:  MOVWF  xF7
0EEA:  RCALL  0A5A
....................    Vel1=read_eeprom(13); 
0EEC:  MOVFF  FF2,E0
0EF0:  BCF    FF2.6
0EF2:  BCF    FF2.7
0EF4:  MOVLW  0D
0EF6:  MOVWF  FA9
0EF8:  BCF    FA6.6
0EFA:  BCF    FA6.7
0EFC:  BSF    FA6.0
0EFE:  MOVF   FA8,W
0F00:  BTFSC  xE0.6
0F02:  BSF    FF2.6
0F04:  BTFSC  xE0.7
0F06:  BSF    FF2.7
0F08:  MOVWF  56
....................    delay_ms(20); 
0F0A:  MOVLW  14
0F0C:  MOVWF  xF7
0F0E:  RCALL  0A5A
....................    codigoSubir=read_eeprom(15); 
0F10:  MOVFF  FF2,E0
0F14:  BCF    FF2.6
0F16:  BCF    FF2.7
0F18:  MOVLW  0F
0F1A:  MOVWF  FA9
0F1C:  BCF    FA6.6
0F1E:  BCF    FA6.7
0F20:  BSF    FA6.0
0F22:  MOVF   FA8,W
0F24:  BTFSC  xE0.6
0F26:  BSF    FF2.6
0F28:  BTFSC  xE0.7
0F2A:  BSF    FF2.7
0F2C:  MOVWF  52
....................    delay_ms(20); 
0F2E:  MOVLW  14
0F30:  MOVWF  xF7
0F32:  RCALL  0A5A
....................    codigoBajar=read_eeprom(16); 
0F34:  MOVFF  FF2,E0
0F38:  BCF    FF2.6
0F3A:  BCF    FF2.7
0F3C:  MOVLW  10
0F3E:  MOVWF  FA9
0F40:  BCF    FA6.6
0F42:  BCF    FA6.7
0F44:  BSF    FA6.0
0F46:  MOVF   FA8,W
0F48:  BTFSC  xE0.6
0F4A:  BSF    FF2.6
0F4C:  BTFSC  xE0.7
0F4E:  BSF    FF2.7
0F50:  MOVWF  53
....................    delay_ms(20); 
0F52:  MOVLW  14
0F54:  MOVWF  xF7
0F56:  RCALL  0A5A
....................    codigoDetener=read_eeprom(17); 
0F58:  MOVFF  FF2,E0
0F5C:  BCF    FF2.6
0F5E:  BCF    FF2.7
0F60:  MOVLW  11
0F62:  MOVWF  FA9
0F64:  BCF    FA6.6
0F66:  BCF    FA6.7
0F68:  BSF    FA6.0
0F6A:  MOVF   FA8,W
0F6C:  BTFSC  xE0.6
0F6E:  BSF    FF2.6
0F70:  BTFSC  xE0.7
0F72:  BSF    FF2.7
0F74:  MOVWF  54
....................    delay_ms(20); 
0F76:  MOVLW  14
0F78:  MOVWF  xF7
0F7A:  RCALL  0A5A
....................    G16=make16(G_h,G_l); 
0F7C:  MOVFF  3A,5C
0F80:  MOVFF  39,5B
....................    G=G16; 
0F84:  MOVFF  5C,F9
0F88:  MOVFF  5B,F8
0F8C:  RCALL  0CDE
0F8E:  MOVFF  03,C0
0F92:  MOVFF  02,BF
0F96:  MOVFF  01,BE
0F9A:  MOVFF  00,BD
....................    horas=make16(horasH,horasL); 
0F9E:  MOVFF  38,5A
0FA2:  MOVFF  37,59
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0FA6:  MOVFF  3B,3D
0FAA:  MOVFF  3C,3E
.................... } 
0FAE:  GOTO   2810 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
1028:  BTFSC  4D.7
102A:  BRA    1032
102C:  MOVF   4D,W
102E:  SUBLW  09
1030:  BNC   1038
1032:  BTFSC  4D.7
1034:  BRA    1038
1036:  BRA    106A
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
1038:  CLRF   4D
103A:  CLRF   FA9
103C:  CLRF   FA8
103E:  BCF    FA6.6
1040:  BCF    FA6.7
1042:  BSF    FA6.2
1044:  MOVF   FF2,W
1046:  MOVWF  00
1048:  BCF    FF2.6
104A:  BCF    FF2.7
104C:  MOVLB  F
104E:  MOVLW  55
1050:  MOVWF  FA7
1052:  MOVLW  AA
1054:  MOVWF  FA7
1056:  BSF    FA6.1
1058:  BTFSC  FA6.1
105A:  BRA    1058
105C:  BCF    FA6.2
105E:  MOVF   00,W
1060:  IORWF  FF2,F
1062:  MOVLW  14
1064:  MOVLB  0
1066:  MOVWF  xF7
1068:  RCALL  0A5A
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
106A:  BTFSC  4E.7
106C:  BRA    1074
106E:  MOVF   4E,W
1070:  SUBLW  09
1072:  BNC   107A
1074:  BTFSC  4E.7
1076:  BRA    107A
1078:  BRA    10AE
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
107A:  CLRF   4E
107C:  MOVLW  01
107E:  MOVWF  FA9
1080:  CLRF   FA8
1082:  BCF    FA6.6
1084:  BCF    FA6.7
1086:  BSF    FA6.2
1088:  MOVF   FF2,W
108A:  MOVWF  00
108C:  BCF    FF2.6
108E:  BCF    FF2.7
1090:  MOVLB  F
1092:  MOVLW  55
1094:  MOVWF  FA7
1096:  MOVLW  AA
1098:  MOVWF  FA7
109A:  BSF    FA6.1
109C:  BTFSC  FA6.1
109E:  BRA    109C
10A0:  BCF    FA6.2
10A2:  MOVF   00,W
10A4:  IORWF  FF2,F
10A6:  MOVLW  14
10A8:  MOVLB  0
10AA:  MOVWF  xF7
10AC:  RCALL  0A5A
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
10AE:  BTFSC  4F.7
10B0:  BRA    10B8
10B2:  MOVF   4F,W
10B4:  SUBLW  09
10B6:  BNC   10BE
10B8:  BTFSC  4F.7
10BA:  BRA    10BE
10BC:  BRA    10F2
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
10BE:  CLRF   4F
10C0:  MOVLW  02
10C2:  MOVWF  FA9
10C4:  CLRF   FA8
10C6:  BCF    FA6.6
10C8:  BCF    FA6.7
10CA:  BSF    FA6.2
10CC:  MOVF   FF2,W
10CE:  MOVWF  00
10D0:  BCF    FF2.6
10D2:  BCF    FF2.7
10D4:  MOVLB  F
10D6:  MOVLW  55
10D8:  MOVWF  FA7
10DA:  MOVLW  AA
10DC:  MOVWF  FA7
10DE:  BSF    FA6.1
10E0:  BTFSC  FA6.1
10E2:  BRA    10E0
10E4:  BCF    FA6.2
10E6:  MOVF   00,W
10E8:  IORWF  FF2,F
10EA:  MOVLW  14
10EC:  MOVLB  0
10EE:  MOVWF  xF7
10F0:  RCALL  0A5A
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
10F2:  BTFSC  50.7
10F4:  BRA    10FC
10F6:  MOVF   50,W
10F8:  SUBLW  09
10FA:  BNC   1102
10FC:  BTFSC  50.7
10FE:  BRA    1102
1100:  BRA    1136
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
1102:  CLRF   50
1104:  MOVLW  03
1106:  MOVWF  FA9
1108:  CLRF   FA8
110A:  BCF    FA6.6
110C:  BCF    FA6.7
110E:  BSF    FA6.2
1110:  MOVF   FF2,W
1112:  MOVWF  00
1114:  BCF    FF2.6
1116:  BCF    FF2.7
1118:  MOVLB  F
111A:  MOVLW  55
111C:  MOVWF  FA7
111E:  MOVLW  AA
1120:  MOVWF  FA7
1122:  BSF    FA6.1
1124:  BTFSC  FA6.1
1126:  BRA    1124
1128:  BCF    FA6.2
112A:  MOVF   00,W
112C:  IORWF  FF2,F
112E:  MOVLW  14
1130:  MOVLB  0
1132:  MOVWF  xF7
1134:  RCALL  0A5A
....................    } 
....................    if(estadoalarma>1){ 
1136:  MOVLW  00
1138:  BTFSC  2A.4
113A:  MOVLW  01
113C:  SUBLW  01
113E:  BC    1176
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
1140:  BSF    2A.4
1142:  MOVLW  04
1144:  MOVWF  FA9
1146:  MOVLW  01
1148:  MOVWF  FA8
114A:  BCF    FA6.6
114C:  BCF    FA6.7
114E:  BSF    FA6.2
1150:  MOVF   FF2,W
1152:  MOVWF  00
1154:  BCF    FF2.6
1156:  BCF    FF2.7
1158:  MOVLB  F
115A:  MOVLW  55
115C:  MOVWF  FA7
115E:  MOVLW  AA
1160:  MOVWF  FA7
1162:  BSF    FA6.1
1164:  BTFSC  FA6.1
1166:  BRA    1164
1168:  BCF    FA6.2
116A:  MOVF   00,W
116C:  IORWF  FF2,F
116E:  MOVLW  14
1170:  MOVLB  0
1172:  MOVWF  xF7
1174:  RCALL  0A5A
....................    } 
....................    if(tempo_minutos>200){ 
1176:  MOVF   3B,W
1178:  SUBLW  C8
117A:  BC    11B4
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
117C:  MOVLW  14
117E:  MOVWF  3B
1180:  MOVLW  05
1182:  MOVWF  FA9
1184:  MOVLW  14
1186:  MOVWF  FA8
1188:  BCF    FA6.6
118A:  BCF    FA6.7
118C:  BSF    FA6.2
118E:  MOVF   FF2,W
1190:  MOVWF  00
1192:  BCF    FF2.6
1194:  BCF    FF2.7
1196:  MOVLB  F
1198:  MOVLW  55
119A:  MOVWF  FA7
119C:  MOVLW  AA
119E:  MOVWF  FA7
11A0:  BSF    FA6.1
11A2:  BTFSC  FA6.1
11A4:  BRA    11A2
11A6:  BCF    FA6.2
11A8:  MOVF   00,W
11AA:  IORWF  FF2,F
11AC:  MOVLW  14
11AE:  MOVLB  0
11B0:  MOVWF  xF7
11B2:  RCALL  0A5A
....................    } 
....................    if(tempo_segundos>59){ 
11B4:  MOVF   3C,W
11B6:  SUBLW  3B
11B8:  BC    11EE
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
11BA:  CLRF   3C
11BC:  MOVLW  06
11BE:  MOVWF  FA9
11C0:  CLRF   FA8
11C2:  BCF    FA6.6
11C4:  BCF    FA6.7
11C6:  BSF    FA6.2
11C8:  MOVF   FF2,W
11CA:  MOVWF  00
11CC:  BCF    FF2.6
11CE:  BCF    FF2.7
11D0:  MOVLB  F
11D2:  MOVLW  55
11D4:  MOVWF  FA7
11D6:  MOVLW  AA
11D8:  MOVWF  FA7
11DA:  BSF    FA6.1
11DC:  BTFSC  FA6.1
11DE:  BRA    11DC
11E0:  BCF    FA6.2
11E2:  MOVF   00,W
11E4:  IORWF  FF2,F
11E6:  MOVLW  14
11E8:  MOVLB  0
11EA:  MOVWF  xF7
11EC:  RCALL  0A5A
....................    } 
....................    if(segundos>60){ 
11EE:  MOVF   35,W
11F0:  SUBLW  3C
11F2:  BC    1228
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
11F4:  CLRF   35
11F6:  MOVLW  07
11F8:  MOVWF  FA9
11FA:  CLRF   FA8
11FC:  BCF    FA6.6
11FE:  BCF    FA6.7
1200:  BSF    FA6.2
1202:  MOVF   FF2,W
1204:  MOVWF  00
1206:  BCF    FF2.6
1208:  BCF    FF2.7
120A:  MOVLB  F
120C:  MOVLW  55
120E:  MOVWF  FA7
1210:  MOVLW  AA
1212:  MOVWF  FA7
1214:  BSF    FA6.1
1216:  BTFSC  FA6.1
1218:  BRA    1216
121A:  BCF    FA6.2
121C:  MOVF   00,W
121E:  IORWF  FF2,F
1220:  MOVLW  14
1222:  MOVLB  0
1224:  MOVWF  xF7
1226:  RCALL  0A5A
....................    } 
....................    if(minutos>60){ 
1228:  MOVF   36,W
122A:  SUBLW  3C
122C:  BC    1264
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
122E:  CLRF   36
1230:  MOVLW  08
1232:  MOVWF  FA9
1234:  CLRF   FA8
1236:  BCF    FA6.6
1238:  BCF    FA6.7
123A:  BSF    FA6.2
123C:  MOVF   FF2,W
123E:  MOVWF  00
1240:  BCF    FF2.6
1242:  BCF    FF2.7
1244:  MOVLB  F
1246:  MOVLW  55
1248:  MOVWF  FA7
124A:  MOVLW  AA
124C:  MOVWF  FA7
124E:  BSF    FA6.1
1250:  BTFSC  FA6.1
1252:  BRA    1250
1254:  BCF    FA6.2
1256:  MOVF   00,W
1258:  IORWF  FF2,F
125A:  MOVLW  14
125C:  MOVLB  0
125E:  MOVWF  xF7
1260:  CALL   0A5A
....................    } 
....................    if(horas>10000){ 
1264:  MOVF   5A,W
1266:  SUBLW  26
1268:  BC    12E2
126A:  XORLW  FF
126C:  BNZ   1274
126E:  MOVF   59,W
1270:  SUBLW  10
1272:  BC    12E2
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
1274:  CLRF   5A
1276:  CLRF   59
1278:  MOVLW  09
127A:  MOVWF  FA9
127C:  MOVLW  0A
127E:  MOVWF  FA8
1280:  BCF    FA6.6
1282:  BCF    FA6.7
1284:  BSF    FA6.2
1286:  MOVF   FF2,W
1288:  MOVWF  00
128A:  BCF    FF2.6
128C:  BCF    FF2.7
128E:  MOVLB  F
1290:  MOVLW  55
1292:  MOVWF  FA7
1294:  MOVLW  AA
1296:  MOVWF  FA7
1298:  BSF    FA6.1
129A:  BTFSC  FA6.1
129C:  BRA    129A
129E:  BCF    FA6.2
12A0:  MOVF   00,W
12A2:  IORWF  FF2,F
12A4:  MOVLW  14
12A6:  MOVLB  0
12A8:  MOVWF  xF7
12AA:  CALL   0A5A
12AE:  MOVLW  0A
12B0:  MOVWF  FA9
12B2:  CLRF   FA8
12B4:  BCF    FA6.6
12B6:  BCF    FA6.7
12B8:  BSF    FA6.2
12BA:  MOVF   FF2,W
12BC:  MOVWF  00
12BE:  BCF    FF2.6
12C0:  BCF    FF2.7
12C2:  MOVLB  F
12C4:  MOVLW  55
12C6:  MOVWF  FA7
12C8:  MOVLW  AA
12CA:  MOVWF  FA7
12CC:  BSF    FA6.1
12CE:  BTFSC  FA6.1
12D0:  BRA    12CE
12D2:  BCF    FA6.2
12D4:  MOVF   00,W
12D6:  IORWF  FF2,F
12D8:  MOVLW  14
12DA:  MOVLB  0
12DC:  MOVWF  xF7
12DE:  CALL   0A5A
....................    } 
....................    if(G>300 || G<200){ 
12E2:  CLRF   xF7
12E4:  CLRF   xF6
12E6:  MOVLW  16
12E8:  MOVWF  xF5
12EA:  MOVLW  87
12EC:  MOVWF  xF4
12EE:  MOVFF  C0,FB
12F2:  MOVFF  BF,FA
12F6:  MOVFF  BE,F9
12FA:  MOVFF  BD,F8
12FE:  RCALL  0FB2
1300:  BC    1322
1302:  MOVFF  C0,F7
1306:  MOVFF  BF,F6
130A:  MOVFF  BE,F5
130E:  MOVFF  BD,F4
1312:  CLRF   xFB
1314:  CLRF   xFA
1316:  MOVLW  48
1318:  MOVWF  xF9
131A:  MOVLW  86
131C:  MOVWF  xF8
131E:  RCALL  0FB2
1320:  BNC   1398
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
1322:  CLRF   xC0
1324:  CLRF   xBF
1326:  MOVLW  5C
1328:  MOVWF  xBE
132A:  MOVLW  86
132C:  MOVWF  xBD
132E:  MOVLW  0B
1330:  MOVWF  FA9
1332:  MOVLW  DC
1334:  MOVWF  FA8
1336:  BCF    FA6.6
1338:  BCF    FA6.7
133A:  BSF    FA6.2
133C:  MOVF   FF2,W
133E:  MOVWF  00
1340:  BCF    FF2.6
1342:  BCF    FF2.7
1344:  MOVLB  F
1346:  MOVLW  55
1348:  MOVWF  FA7
134A:  MOVLW  AA
134C:  MOVWF  FA7
134E:  BSF    FA6.1
1350:  BTFSC  FA6.1
1352:  BRA    1350
1354:  BCF    FA6.2
1356:  MOVF   00,W
1358:  IORWF  FF2,F
135A:  MOVLW  14
135C:  MOVLB  0
135E:  MOVWF  xF7
1360:  CALL   0A5A
1364:  MOVLW  0C
1366:  MOVWF  FA9
1368:  CLRF   FA8
136A:  BCF    FA6.6
136C:  BCF    FA6.7
136E:  BSF    FA6.2
1370:  MOVF   FF2,W
1372:  MOVWF  00
1374:  BCF    FF2.6
1376:  BCF    FF2.7
1378:  MOVLB  F
137A:  MOVLW  55
137C:  MOVWF  FA7
137E:  MOVLW  AA
1380:  MOVWF  FA7
1382:  BSF    FA6.1
1384:  BTFSC  FA6.1
1386:  BRA    1384
1388:  BCF    FA6.2
138A:  MOVF   00,W
138C:  IORWF  FF2,F
138E:  MOVLW  14
1390:  MOVLB  0
1392:  MOVWF  xF7
1394:  CALL   0A5A
....................    } 
....................    if(Vel1>6){ 
1398:  MOVF   56,W
139A:  SUBLW  06
139C:  BC    13D8
....................       Vel1=4;write_eeprom(13,4);delay_ms(20); 
139E:  MOVLW  04
13A0:  MOVWF  56
13A2:  MOVLW  0D
13A4:  MOVWF  FA9
13A6:  MOVLW  04
13A8:  MOVWF  FA8
13AA:  BCF    FA6.6
13AC:  BCF    FA6.7
13AE:  BSF    FA6.2
13B0:  MOVF   FF2,W
13B2:  MOVWF  00
13B4:  BCF    FF2.6
13B6:  BCF    FF2.7
13B8:  MOVLB  F
13BA:  MOVLW  55
13BC:  MOVWF  FA7
13BE:  MOVLW  AA
13C0:  MOVWF  FA7
13C2:  BSF    FA6.1
13C4:  BTFSC  FA6.1
13C6:  BRA    13C4
13C8:  BCF    FA6.2
13CA:  MOVF   00,W
13CC:  IORWF  FF2,F
13CE:  MOVLW  14
13D0:  MOVLB  0
13D2:  MOVWF  xF7
13D4:  CALL   0A5A
....................    } 
.................... } 
13D8:  GOTO   2814 (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
*
141C:  BCF    2A.5
....................    if(VIDRIOUUP || !VIDRIODN){ 
141E:  BSF    F92.1
1420:  BTFSS  F80.1
1422:  BRA    142A
1424:  BSF    F92.2
1426:  BTFSS  F80.2
1428:  BRA    1434
....................       O1_on;O2_off; 
142A:  BSF    F8A.6
142C:  BCF    F93.6
142E:  BCF    F8A.7
1430:  BCF    F93.7
....................    }else{ 
1432:  BRA    143E
....................       O1_off;O2_off; 
1434:  BCF    F8A.6
1436:  BCF    F93.6
1438:  BCF    F8A.7
143A:  BCF    F93.7
....................       pulsoBajar=OFF; 
143C:  BCF    2A.6
....................    } 
.................... } 
143E:  RETLW  00
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
1440:  BCF    2A.6
....................    if(!VIDRIOUUP || VIDRIODN){ 
1442:  BSF    F92.1
1444:  BTFSC  F80.1
1446:  BRA    144E
1448:  BSF    F92.2
144A:  BTFSC  F80.2
144C:  BRA    1458
....................       O1_off;O2_on; 
144E:  BCF    F8A.6
1450:  BCF    F93.6
1452:  BSF    F8A.7
1454:  BCF    F93.7
....................    }else{ 
1456:  BRA    1462
....................       O1_off;O2_off; 
1458:  BCF    F8A.6
145A:  BCF    F93.6
145C:  BCF    F8A.7
145E:  BCF    F93.7
....................       pulsoSubir=OFF; 
1460:  BCF    2A.5
....................    } 
.................... } 
1462:  RETLW  00
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
*
2642:  BCF    F8A.6
2644:  BCF    F93.6
2646:  BCF    F8A.7
2648:  BCF    F93.7
.................... } 
264A:  GOTO   478E (RETURN)
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
*
1464:  BTFSS  xDB.0
1466:  BRA    1614
....................       NUEVO_DATO=0; 
1468:  BCF    xDB.0
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
146A:  MOVLW  00
146C:  BTFSC  xD1.0
146E:  MOVLW  01
1470:  MOVWF  xE0
1472:  MOVLW  00
1474:  BTFSC  xD1.1
1476:  MOVLW  01
1478:  MOVWF  xE1
147A:  MOVLW  00
147C:  BTFSC  xD1.2
147E:  MOVLW  01
1480:  MOVWF  xE2
1482:  MOVLW  00
1484:  BTFSC  xD1.3
1486:  MOVLW  01
1488:  MOVWF  xE3
148A:  MOVLW  00
148C:  BTFSC  xD1.4
148E:  MOVLW  01
1490:  MOVWF  xE4
1492:  MOVLW  00
1494:  BTFSC  xD1.5
1496:  MOVLW  01
1498:  MOVWF  xE5
149A:  MOVLW  00
149C:  BTFSC  xD1.6
149E:  MOVLW  01
14A0:  MOVWF  xE6
14A2:  MOVLW  00
14A4:  BTFSC  xD1.7
14A6:  MOVLW  01
14A8:  MOVFF  E0,E8
14AC:  MOVFF  E1,E9
14B0:  MOVFF  E2,EA
14B4:  MOVFF  E3,EB
14B8:  MOVFF  E4,EC
14BC:  MOVFF  E5,ED
14C0:  MOVFF  E6,EE
14C4:  MOVWF  xEF
14C6:  RCALL  13DC
14C8:  MOVFF  01,DC
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
14CC:  MOVLW  00
14CE:  BTFSC  xD2.0
14D0:  MOVLW  01
14D2:  MOVWF  xE0
14D4:  MOVLW  00
14D6:  BTFSC  xD2.1
14D8:  MOVLW  01
14DA:  MOVWF  xE1
14DC:  MOVLW  00
14DE:  BTFSC  xD2.2
14E0:  MOVLW  01
14E2:  MOVWF  xE2
14E4:  MOVLW  00
14E6:  BTFSC  xD2.3
14E8:  MOVLW  01
14EA:  MOVWF  xE3
14EC:  MOVLW  00
14EE:  BTFSC  xD2.4
14F0:  MOVLW  01
14F2:  MOVWF  xE4
14F4:  MOVLW  00
14F6:  BTFSC  xD2.5
14F8:  MOVLW  01
14FA:  MOVWF  xE5
14FC:  MOVLW  00
14FE:  BTFSC  xD2.6
1500:  MOVLW  01
1502:  MOVWF  xE6
1504:  MOVLW  00
1506:  BTFSC  xD2.7
1508:  MOVLW  01
150A:  MOVFF  E0,E8
150E:  MOVFF  E1,E9
1512:  MOVFF  E2,EA
1516:  MOVFF  E3,EB
151A:  MOVFF  E4,EC
151E:  MOVFF  E5,ED
1522:  MOVFF  E6,EE
1526:  MOVWF  xEF
1528:  RCALL  13DC
152A:  MOVFF  01,DD
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
152E:  MOVLW  00
1530:  BTFSC  xD3.0
1532:  MOVLW  01
1534:  MOVWF  xE0
1536:  MOVLW  00
1538:  BTFSC  xD3.1
153A:  MOVLW  01
153C:  MOVWF  xE1
153E:  MOVLW  00
1540:  BTFSC  xD3.2
1542:  MOVLW  01
1544:  MOVWF  xE2
1546:  MOVLW  00
1548:  BTFSC  xD3.3
154A:  MOVLW  01
154C:  MOVWF  xE3
154E:  MOVLW  00
1550:  BTFSC  xD3.4
1552:  MOVLW  01
1554:  MOVWF  xE4
1556:  MOVLW  00
1558:  BTFSC  xD3.5
155A:  MOVLW  01
155C:  MOVWF  xE5
155E:  MOVLW  00
1560:  BTFSC  xD3.6
1562:  MOVLW  01
1564:  MOVWF  xE6
1566:  MOVLW  00
1568:  BTFSC  xD3.7
156A:  MOVLW  01
156C:  MOVFF  E0,E8
1570:  MOVFF  E1,E9
1574:  MOVFF  E2,EA
1578:  MOVFF  E3,EB
157C:  MOVFF  E4,EC
1580:  MOVFF  E5,ED
1584:  MOVFF  E6,EE
1588:  MOVWF  xEF
158A:  RCALL  13DC
158C:  MOVFF  01,DE
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
1590:  MOVLW  00
1592:  BTFSC  xD4.0
1594:  MOVLW  01
1596:  MOVWF  xE0
1598:  MOVLW  00
159A:  BTFSC  xD4.1
159C:  MOVLW  01
159E:  MOVWF  xE1
15A0:  MOVLW  00
15A2:  BTFSC  xD4.2
15A4:  MOVLW  01
15A6:  MOVWF  xE2
15A8:  MOVLW  00
15AA:  BTFSC  xD4.3
15AC:  MOVLW  01
15AE:  MOVWF  xE3
15B0:  MOVLW  00
15B2:  BTFSC  xD4.4
15B4:  MOVLW  01
15B6:  MOVWF  xE4
15B8:  MOVLW  00
15BA:  BTFSC  xD4.5
15BC:  MOVLW  01
15BE:  MOVWF  xE5
15C0:  MOVLW  00
15C2:  BTFSC  xD4.6
15C4:  MOVLW  01
15C6:  MOVWF  xE6
15C8:  MOVLW  00
15CA:  BTFSC  xD4.7
15CC:  MOVLW  01
15CE:  MOVFF  E0,E8
15D2:  MOVFF  E1,E9
15D6:  MOVFF  E2,EA
15DA:  MOVFF  E3,EB
15DE:  MOVFF  E4,EC
15E2:  MOVFF  E5,ED
15E6:  MOVFF  E6,EE
15EA:  MOVWF  xEF
15EC:  RCALL  13DC
15EE:  MOVFF  01,DF
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
15F2:  MOVF   53,W
15F4:  SUBWF  xDF,W
15F6:  BNZ   15FA
....................          pulsoBajar=ON; 
15F8:  BSF    2A.6
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
15FA:  MOVF   52,W
15FC:  SUBWF  xDF,W
15FE:  BNZ   1602
....................          pulsoSubir=ON; 
1600:  BSF    2A.5
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
1602:  MOVF   54,W
1604:  SUBWF  xDF,W
1606:  BNZ   1614
....................          O1_off;O2_off; 
1608:  BCF    F8A.6
160A:  BCF    F93.6
160C:  BCF    F8A.7
160E:  BCF    F93.7
....................          pulsoSubir=OFF; 
1610:  BCF    2A.5
....................          pulsoBajar=OFF; 
1612:  BCF    2A.6
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
1614:  BTFSS  2A.6
1616:  BRA    161A
....................       bajarVidrio(); 
1618:  RCALL  141C
....................        
....................    if(pulsoSubir) 
161A:  BTFSS  2A.5
161C:  BRA    1620
....................       subirVidrio();     
161E:  RCALL  1440
....................       
.................... } 
1620:  RETLW  00
....................  
....................  
....................  
.................... #int_EXT1 HIGH 
.................... void RB1(){ 
....................    Ta=get_timer1(); 
*
0296:  MOVF   FCE,W
0298:  MOVWF  xD5
029A:  MOVFF  FCF,D6
....................    TICK = Ta-tb; 
029E:  MOVF   xD7,W
02A0:  SUBWF  xD5,W
02A2:  MOVWF  xD9
02A4:  MOVF   xD8,W
02A6:  SUBWFB xD6,W
02A8:  MOVWF  xDA
....................    Tb = Ta; 
02AA:  MOVFF  D6,D8
02AE:  MOVFF  D5,D7
....................     
....................    Entro=1; 
02B2:  BSF    2B.0
....................     
....................    if(BIT_START==1){ 
02B4:  BTFSS  2B.7
02B6:  BRA    0320
....................        //BIT 1 
....................        if(TICK>960 && TICK < 1280)  // 700 con Pres 4 y 20MHz  
02B8:  MOVF   xDA,W
02BA:  SUBLW  02
02BC:  BC    02E4
02BE:  XORLW  FF
02C0:  BNZ   02C8
02C2:  MOVF   xD9,W
02C4:  SUBLW  C0
02C6:  BC    02E4
02C8:  MOVF   xDA,W
02CA:  SUBLW  04
02CC:  BNC   02E4
....................       { 
....................          BITS[n]=1; n++; 
02CE:  MOVFF  55,109
02D2:  MOVLW  01
02D4:  MOVLB  1
02D6:  MOVWF  x0A
02D8:  CLRF   x0C
02DA:  MOVLW  D1
02DC:  MOVWF  x0B
02DE:  MOVLB  0
02E0:  RCALL  0254
02E2:  INCF   55,F
....................       } 
....................       //BIT 0 
....................        if(TICK>400 && TICK < 720)  // 350 con Pres 4 y 20MHz  
02E4:  MOVF   xDA,W
02E6:  SUBLW  00
02E8:  BC    0316
02EA:  XORLW  FF
02EC:  BNZ   02F4
02EE:  MOVF   xD9,W
02F0:  SUBLW  90
02F2:  BC    0316
02F4:  MOVF   xDA,W
02F6:  SUBLW  02
02F8:  BNC   0316
02FA:  BNZ   0302
02FC:  MOVF   xD9,W
02FE:  SUBLW  CF
0300:  BNC   0316
....................       { 
....................          BITS[n]=0; n++; 
0302:  MOVFF  55,109
0306:  MOVLB  1
0308:  CLRF   x0A
030A:  CLRF   x0C
030C:  MOVLW  D1
030E:  MOVWF  x0B
0310:  MOVLB  0
0312:  RCALL  0254
0314:  INCF   55,F
....................       } 
....................       if(n>=32){ 
0316:  MOVF   55,W
0318:  SUBLW  1F
031A:  BC    0320
....................          NUEVO_DATO=1; 
031C:  BSF    xDB.0
....................          BIT_START=0; 
031E:  BCF    2B.7
....................       } 
....................     
....................    } 
....................    //BIT START 
....................    if(TICK>2800 && TICK < 5800 && BIT_START==0)  //3500 con Pres 4 y 20MHz  
0320:  MOVF   xDA,W
0322:  SUBLW  09
0324:  BC    0346
0326:  XORLW  FF
0328:  BNZ   0330
032A:  MOVF   xD9,W
032C:  SUBLW  F0
032E:  BC    0346
0330:  MOVF   xDA,W
0332:  SUBLW  16
0334:  BNC   0346
0336:  BNZ   033E
0338:  MOVF   xD9,W
033A:  SUBLW  A7
033C:  BNC   0346
033E:  BTFSC  2B.7
0340:  BRA    0346
....................    { 
....................       BIT_START=1; 
0342:  BSF    2B.7
....................       n=0;  
0344:  CLRF   55
....................    } 
.................... } 
....................  
0346:  BCF    FF0.0
0348:  GOTO   010A
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
034C:  BSF    2B.5
....................     
....................    if(VelMotor==5){ 
034E:  MOVF   xC8,W
0350:  SUBLW  05
0352:  BNZ   0364
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
0354:  CLRF   FD7
0356:  MOVLW  E4
0358:  MOVWF  FD6
....................       Motor_off;  
035A:  BCF    F8B.2
035C:  BCF    F94.2
....................       Motor2_off;  
035E:  BCF    F8B.1
0360:  BCF    F94.1
....................    }else if(VelMotor==4){ 
0362:  BRA    03B8
0364:  MOVF   xC8,W
0366:  SUBLW  04
0368:  BNZ   037A
....................       set_timer0(201);       
036A:  CLRF   FD7
036C:  MOVLW  C9
036E:  MOVWF  FD6
....................       Motor_off;  
0370:  BCF    F8B.2
0372:  BCF    F94.2
....................       Motor2_off;  
0374:  BCF    F8B.1
0376:  BCF    F94.1
....................    }else if(VelMotor==3){ 
0378:  BRA    03B8
037A:  MOVF   xC8,W
037C:  SUBLW  03
037E:  BNZ   0390
....................       set_timer0(196); 
0380:  CLRF   FD7
0382:  MOVLW  C4
0384:  MOVWF  FD6
....................       Motor_off;  
0386:  BCF    F8B.2
0388:  BCF    F94.2
....................       Motor2_off;  
038A:  BCF    F8B.1
038C:  BCF    F94.1
....................    }else if(VelMotor==2){ 
038E:  BRA    03B8
0390:  MOVF   xC8,W
0392:  SUBLW  02
0394:  BNZ   03A6
....................       set_timer0(188); 
0396:  CLRF   FD7
0398:  MOVLW  BC
039A:  MOVWF  FD6
....................       Motor_off;  
039C:  BCF    F8B.2
039E:  BCF    F94.2
....................       Motor2_off;  
03A0:  BCF    F8B.1
03A2:  BCF    F94.1
....................    }else if(VelMotor==1){ 
03A4:  BRA    03B8
03A6:  DECFSZ xC8,W
03A8:  BRA    03B8
....................       set_timer0(180); 
03AA:  CLRF   FD7
03AC:  MOVLW  B4
03AE:  MOVWF  FD6
....................       Motor_off;  
03B0:  BCF    F8B.2
03B2:  BCF    F94.2
....................       Motor2_off;  
03B4:  BCF    F8B.1
03B6:  BCF    F94.1
....................    } 
....................    pulsos++;    
03B8:  INCF   xC1,F
03BA:  BTFSC  FD8.2
03BC:  INCF   xC2,F
.................... } 
....................  
03BE:  BCF    FF2.1
03C0:  GOTO   010A
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<6){ 
03C4:  MOVF   xC8,F
03C6:  BZ    03F0
03C8:  MOVF   xC8,W
03CA:  SUBLW  05
03CC:  BNC   03F0
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
03CE:  BTFSS  2B.5
03D0:  BRA    03E4
....................       Motor_on; 
03D2:  BSF    F8B.2
03D4:  BCF    F94.2
....................       Motor2_on;  
03D6:  BSF    F8B.1
03D8:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
03DA:  CLRF   FD7
03DC:  MOVLW  FD
03DE:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
03E0:  BCF    2B.5
....................    } else {            //The triac has been triggered, cut the pulse 
03E2:  BRA    03F0
....................       Motor_off; 
03E4:  BCF    F8B.2
03E6:  BCF    F94.2
....................       Motor2_off;  
03E8:  BCF    F8B.1
03EA:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
03EC:  CLRF   FD7
03EE:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
03F0:  BCF    FF2.2
03F2:  GOTO   010A
.................... #int_TIMER2 
.................... void temp1s(void){ 
....................    set_timer2(231);//100.25uS 
03F6:  MOVLW  E7
03F8:  MOVWF  FCC
....................    tiempos++; 
03FA:  INCF   57,F
03FC:  BTFSC  FD8.2
03FE:  INCF   58,F
....................    // 
....................      
....................    //if(tiempos>=10000){ 
....................    if(tiempos>=9710){//1s 
0400:  MOVF   58,W
0402:  SUBLW  24
0404:  BC    0462
0406:  XORLW  FF
0408:  BNZ   0410
040A:  MOVF   57,W
040C:  SUBLW  ED
040E:  BC    0462
....................    output_toggle(PIN_A3); 
0410:  BCF    F92.3
0412:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
0414:  CLRF   58
0416:  CLRF   57
0418:  INCF   43,F
041A:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
041C:  DECFSZ 51,W
041E:  BRA    0434
....................          if(estadobuzzer==0){ 
0420:  BTFSC  2A.3
0422:  BRA    042A
....................             Buzzer_off; 
0424:  BCF    F8B.0
0426:  BCF    F94.0
....................          }else{ 
0428:  BRA    0432
....................             if(estadoalarma==1) 
042A:  BTFSS  2A.4
042C:  BRA    0432
....................                Buzzer_on; 
042E:  BSF    F8B.0
0430:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
0432:  BTG    2A.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
0434:  BTFSS  29.0
0436:  BRA    0462
....................          segundos++; 
0438:  INCF   35,F
....................          if(tiempo_cumplido==0){ 
043A:  BTFSC  29.7
043C:  BRA    0462
....................             if(tempo_segundos>0){ 
043E:  MOVF   3C,F
0440:  BZ    0446
....................                tempo_segundos--; 
0442:  DECF   3C,F
....................             }else{ 
0444:  BRA    0462
....................                if(tempo_minutos>0){ 
0446:  MOVF   3B,F
0448:  BZ    0452
....................                   tempo_minutos--; 
044A:  DECF   3B,F
....................                   tempo_segundos=59; 
044C:  MOVLW  3B
044E:  MOVWF  3C
....................                }else{ 
0450:  BRA    0462
....................                   tiempo_cumplido=1; 
0452:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
0454:  BCF    29.0
0456:  BSF    F8A.3
0458:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
045A:  MOVFF  3D,3B
045E:  MOVFF  3E,3C
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
0462:  BCF    F9E.1
0464:  GOTO   0064
.................... void main () 
.................... { 
*
264E:  CLRF   FF8
2650:  BSF    FF1.2
2652:  BCF    F9F.1
2654:  BSF    FF0.6
2656:  BSF    FD0.7
2658:  BSF    07.7
265A:  CLRF   FEA
265C:  CLRF   FE9
265E:  BCF    29.0
2660:  BCF    29.1
2662:  BCF    29.2
2664:  BCF    29.3
2666:  BCF    29.4
2668:  BCF    29.5
266A:  BCF    29.6
266C:  BCF    29.7
266E:  BCF    2A.0
2670:  BCF    2A.1
2672:  BCF    2A.2
2674:  BCF    2A.3
2676:  BCF    2A.4
2678:  BCF    2A.5
267A:  BCF    2A.6
267C:  BCF    2A.7
267E:  BCF    2B.0
2680:  BCF    2B.1
2682:  BCF    2B.2
2684:  CLRF   2C
2686:  MOVLW  07
2688:  MOVWF  2D
268A:  MOVLW  02
268C:  MOVWF  2E
268E:  MOVLW  0B
2690:  MOVWF  2F
2692:  MOVLW  02
2694:  MOVWF  30
2696:  MOVLW  03
2698:  MOVWF  31
269A:  MOVLW  02
269C:  MOVWF  32
269E:  MOVWF  33
26A0:  MOVLW  04
26A2:  MOVWF  34
26A4:  CLRF   35
26A6:  CLRF   36
26A8:  CLRF   37
26AA:  CLRF   38
26AC:  CLRF   39
26AE:  CLRF   3A
26B0:  CLRF   3B
26B2:  CLRF   3C
26B4:  CLRF   3D
26B6:  CLRF   3E
26B8:  CLRF   3F
26BA:  CLRF   40
26BC:  CLRF   41
26BE:  MOVLW  01
26C0:  MOVWF  42
26C2:  CLRF   43
26C4:  CLRF   44
26C6:  CLRF   45
26C8:  CLRF   51
26CA:  CLRF   52
26CC:  CLRF   53
26CE:  CLRF   54
26D0:  CLRF   55
26D2:  MOVLW  04
26D4:  MOVWF  56
26D6:  CLRF   5A
26D8:  CLRF   59
26DA:  CLRF   5C
26DC:  CLRF   5B
26DE:  CLRF   xB0
26E0:  CLRF   xAF
26E2:  CLRF   xAE
26E4:  CLRF   xAD
26E6:  CLRF   xB4
26E8:  CLRF   xB3
26EA:  CLRF   xB2
26EC:  CLRF   xB1
26EE:  CLRF   xB8
26F0:  CLRF   xB7
26F2:  CLRF   xB6
26F4:  CLRF   xB5
26F6:  CLRF   xBC
26F8:  CLRF   xBB
26FA:  CLRF   xBA
26FC:  CLRF   xB9
26FE:  CLRF   xC0
2700:  CLRF   xBF
2702:  CLRF   xBE
2704:  MOVLW  80
2706:  MOVWF  xBD
2708:  BSF    2B.3
270A:  BCF    2B.4
270C:  CLRF   xC2
270E:  CLRF   xC1
2710:  CLRF   xC4
2712:  CLRF   xC3
2714:  BCF    2B.5
2716:  BCF    2B.6
2718:  CLRF   xC6
271A:  CLRF   xC5
271C:  CLRF   xC7
271E:  CLRF   xC8
2720:  CLRF   xCC
2722:  CLRF   xCB
2724:  CLRF   xCA
2726:  CLRF   xC9
2728:  CLRF   xD0
272A:  CLRF   xCF
272C:  CLRF   xCE
272E:  CLRF   xCD
2730:  CLRF   xDA
2732:  CLRF   xD9
2734:  MOVF   FC1,W
2736:  ANDLW  C0
2738:  IORLW  0F
273A:  MOVWF  FC1
273C:  MOVLW  07
273E:  MOVWF  FB4
2740:  MOVLW  3E
2742:  MOVWF  46
2744:  MOVLW  20
2746:  MOVWF  47
2748:  MOVLW  5E
274A:  MOVWF  48
274C:  CLRF   49
274E:  CLRF   4A
2750:  CLRF   4B
2752:  CLRF   4C
2754:  CLRF   4D
2756:  CLRF   4E
2758:  CLRF   4F
275A:  CLRF   50
275C:  CLRF   5D
275E:  CLRF   5E
2760:  CLRF   5F
2762:  CLRF   x60
2764:  CLRF   x61
2766:  CLRF   x62
2768:  CLRF   x63
276A:  CLRF   x64
276C:  CLRF   x65
276E:  CLRF   x66
2770:  CLRF   x67
2772:  CLRF   x68
2774:  CLRF   x69
2776:  CLRF   x6A
2778:  CLRF   x6B
277A:  CLRF   x6C
277C:  CLRF   x6D
277E:  CLRF   x6E
2780:  CLRF   x6F
2782:  CLRF   x70
2784:  CLRF   x71
2786:  CLRF   x72
2788:  CLRF   x73
278A:  CLRF   x74
278C:  CLRF   x75
278E:  CLRF   x76
2790:  CLRF   x77
2792:  CLRF   x78
2794:  CLRF   x79
2796:  CLRF   x7A
2798:  CLRF   x7B
279A:  CLRF   x7C
279C:  CLRF   x7D
279E:  CLRF   x7E
27A0:  CLRF   x7F
27A2:  CLRF   x80
27A4:  CLRF   x81
27A6:  CLRF   x82
27A8:  CLRF   x83
27AA:  CLRF   x84
27AC:  CLRF   x85
27AE:  CLRF   x86
27B0:  CLRF   x87
27B2:  CLRF   x88
27B4:  CLRF   x89
27B6:  CLRF   x8A
27B8:  CLRF   x8B
27BA:  CLRF   x8C
27BC:  CLRF   x8D
27BE:  CLRF   x8E
27C0:  CLRF   x8F
27C2:  CLRF   x90
27C4:  CLRF   x91
27C6:  CLRF   x92
27C8:  CLRF   x93
27CA:  CLRF   x94
27CC:  CLRF   x95
27CE:  CLRF   x96
27D0:  CLRF   x97
27D2:  CLRF   x98
27D4:  CLRF   x99
27D6:  CLRF   x9A
27D8:  CLRF   x9B
27DA:  CLRF   x9C
27DC:  CLRF   x9D
27DE:  CLRF   x9E
27E0:  CLRF   x9F
27E2:  CLRF   xA0
27E4:  CLRF   xA1
27E6:  CLRF   xA2
27E8:  CLRF   xA3
27EA:  CLRF   xA4
27EC:  CLRF   xA5
27EE:  CLRF   xA6
27F0:  CLRF   xA7
27F2:  CLRF   xA8
27F4:  CLRF   xA9
27F6:  CLRF   xAA
27F8:  CLRF   xAB
27FA:  CLRF   xAC
....................    Motor_off; 
27FC:  BCF    F8B.2
27FE:  BCF    F94.2
....................    Motor2_off; 
2800:  BCF    F8B.1
2802:  BCF    F94.1
....................    ConfigInterrupciones(); 
2804:  GOTO   0B48
....................    MensajeBienvenida(); 
2808:  GOTO   0C78
....................    LeeEEPROM();  
280C:  GOTO   0D14
....................    LimitaValores(); 
2810:  GOTO   1028
....................    Motor_off; 
2814:  BCF    F8B.2
2816:  BCF    F94.2
....................    Motor2_off; 
2818:  BCF    F8B.1
281A:  BCF    F94.1
....................     
....................    if(UP && DOWN){ 
281C:  BSF    F92.5
281E:  BTFSC  F80.5
2820:  BRA    2AF2
2822:  BSF    F96.0
2824:  BTFSC  F84.0
2826:  BRA    2AF2
....................       delay_ms(500); 
2828:  MOVLW  02
282A:  MOVWF  xE0
282C:  MOVLW  FA
282E:  MOVWF  xF7
2830:  CALL   0A5A
2834:  DECFSZ xE0,F
2836:  BRA    282C
....................       if(UP && DOWN){ 
2838:  BSF    F92.5
283A:  BTFSC  F80.5
283C:  BRA    2AF2
283E:  BSF    F96.0
2840:  BTFSC  F84.0
2842:  BRA    2AF2
....................          lcd_gotoxy(1,1); 
2844:  MOVLW  01
2846:  MOVWF  xF2
2848:  MOVWF  xF3
284A:  CALL   0B92
....................          printf(lcd_putc,"Cargando..."); 
284E:  MOVLW  68
2850:  MOVWF  FF6
2852:  MOVLW  04
2854:  MOVWF  FF7
2856:  CALL   0C58
....................          delay_ms(500); 
285A:  MOVLW  02
285C:  MOVWF  xE0
285E:  MOVLW  FA
2860:  MOVWF  xF7
2862:  CALL   0A5A
2866:  DECFSZ xE0,F
2868:  BRA    285E
....................          printf(lcd_putc,"\f"); 
286A:  MOVLW  0C
286C:  MOVWF  xF1
286E:  CALL   0BFA
....................          for(;;){ 
....................             leeControlRemoto(); 
2872:  CALL   1464
....................             lcd_gotoxy(1,1); 
2876:  MOVLW  01
2878:  MOVWF  xF2
287A:  MOVWF  xF3
287C:  CALL   0B92
....................             printf(lcd_putc,"Codigo Subir: %X   ",CodigoSubir); 
2880:  MOVLW  74
2882:  MOVWF  FF6
2884:  MOVLW  04
2886:  MOVWF  FF7
2888:  MOVLW  0E
288A:  MOVWF  xE4
288C:  CALL   1622
2890:  MOVFF  52,E0
2894:  MOVLW  37
2896:  MOVWF  xE1
2898:  CALL   1642
289C:  MOVLW  20
289E:  MOVWF  xF1
28A0:  CALL   0BFA
28A4:  MOVLW  20
28A6:  MOVWF  xF1
28A8:  CALL   0BFA
28AC:  MOVLW  20
28AE:  MOVWF  xF1
28B0:  CALL   0BFA
....................             lcd_gotoxy(1,2); 
28B4:  MOVLW  01
28B6:  MOVWF  xF2
28B8:  MOVLW  02
28BA:  MOVWF  xF3
28BC:  CALL   0B92
....................             printf(lcd_putc,"Codigo Bajar: %X   ",CodigoBajar); 
28C0:  MOVLW  88
28C2:  MOVWF  FF6
28C4:  MOVLW  04
28C6:  MOVWF  FF7
28C8:  MOVLW  0E
28CA:  MOVWF  xE4
28CC:  CALL   1622
28D0:  MOVFF  53,E0
28D4:  MOVLW  37
28D6:  MOVWF  xE1
28D8:  CALL   1642
28DC:  MOVLW  20
28DE:  MOVWF  xF1
28E0:  CALL   0BFA
28E4:  MOVLW  20
28E6:  MOVWF  xF1
28E8:  CALL   0BFA
28EC:  MOVLW  20
28EE:  MOVWF  xF1
28F0:  CALL   0BFA
....................             lcd_gotoxy(1,3); 
28F4:  MOVLW  01
28F6:  MOVWF  xF2
28F8:  MOVLW  03
28FA:  MOVWF  xF3
28FC:  CALL   0B92
....................             printf(lcd_putc,"Codigo Detener: %X ",CodigoDetener); 
2900:  MOVLW  9C
2902:  MOVWF  FF6
2904:  MOVLW  04
2906:  MOVWF  FF7
2908:  MOVLW  10
290A:  MOVWF  xE4
290C:  CALL   1622
2910:  MOVFF  54,E0
2914:  MOVLW  37
2916:  MOVWF  xE1
2918:  CALL   1642
291C:  MOVLW  20
291E:  MOVWF  xF1
2920:  CALL   0BFA
....................             lcd_gotoxy(1,4); 
2924:  MOVLW  01
2926:  MOVWF  xF2
2928:  MOVLW  04
292A:  MOVWF  xF3
292C:  CALL   0B92
....................             printf(lcd_putc,"Codigo:%X %X %X %X",BYTE_IR[0],BYTE_IR[1],BYTE_IR[2],BYTE_IR[3]); 
2930:  MOVLW  B0
2932:  MOVWF  FF6
2934:  MOVLW  04
2936:  MOVWF  FF7
2938:  MOVLW  07
293A:  MOVWF  xE4
293C:  CALL   1622
2940:  MOVFF  DC,E0
2944:  MOVLW  37
2946:  MOVWF  xE1
2948:  CALL   1642
294C:  MOVLW  20
294E:  MOVWF  xF1
2950:  CALL   0BFA
2954:  MOVFF  DD,E0
2958:  MOVLW  37
295A:  MOVWF  xE1
295C:  CALL   1642
2960:  MOVLW  20
2962:  MOVWF  xF1
2964:  CALL   0BFA
2968:  MOVFF  DE,E0
296C:  MOVLW  37
296E:  MOVWF  xE1
2970:  CALL   1642
2974:  MOVLW  20
2976:  MOVWF  xF1
2978:  CALL   0BFA
297C:  MOVFF  DF,E0
2980:  MOVLW  37
2982:  MOVWF  xE1
2984:  CALL   1642
....................              
....................             if(UP){ 
2988:  BSF    F92.5
298A:  BTFSC  F80.5
298C:  BRA    29F6
....................                delay_ms(500); 
298E:  MOVLW  02
2990:  MOVWF  xE0
2992:  MOVLW  FA
2994:  MOVWF  xF7
2996:  CALL   0A5A
299A:  DECFSZ xE0,F
299C:  BRA    2992
....................                if(UP){ 
299E:  BSF    F92.5
29A0:  BTFSC  F80.5
29A2:  BRA    29F6
....................                   codigoSubir=BYTE_IR[3]; 
29A4:  MOVFF  DF,52
....................                   write_eeprom(15,codigoSubir); 
29A8:  MOVLW  0F
29AA:  MOVWF  FA9
29AC:  MOVFF  52,FA8
29B0:  BCF    FA6.6
29B2:  BCF    FA6.7
29B4:  BSF    FA6.2
29B6:  MOVF   FF2,W
29B8:  MOVWF  00
29BA:  BCF    FF2.6
29BC:  BCF    FF2.7
29BE:  MOVLB  F
29C0:  MOVLW  55
29C2:  MOVWF  FA7
29C4:  MOVLW  AA
29C6:  MOVWF  FA7
29C8:  BSF    FA6.1
29CA:  BTFSC  FA6.1
29CC:  BRA    29CA
29CE:  BCF    FA6.2
29D0:  MOVF   00,W
29D2:  IORWF  FF2,F
....................                   delay_ms(20); 
29D4:  MOVLW  14
29D6:  MOVLB  0
29D8:  MOVWF  xF7
29DA:  CALL   0A5A
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
29DE:  BSF    F8B.0
29E0:  BCF    F94.0
29E2:  MOVLW  02
29E4:  MOVWF  xE0
29E6:  MOVLW  FA
29E8:  MOVWF  xF7
29EA:  CALL   0A5A
29EE:  DECFSZ xE0,F
29F0:  BRA    29E6
29F2:  BCF    F8B.0
29F4:  BCF    F94.0
....................                } 
....................             } 
....................              
....................             if(DOWN){ 
29F6:  BSF    F96.0
29F8:  BTFSC  F84.0
29FA:  BRA    2A64
....................                delay_ms(500); 
29FC:  MOVLW  02
29FE:  MOVWF  xE0
2A00:  MOVLW  FA
2A02:  MOVWF  xF7
2A04:  CALL   0A5A
2A08:  DECFSZ xE0,F
2A0A:  BRA    2A00
....................                if(DOWN){ 
2A0C:  BSF    F96.0
2A0E:  BTFSC  F84.0
2A10:  BRA    2A64
....................                   codigoBajar=BYTE_IR[3]; 
2A12:  MOVFF  DF,53
....................                   write_eeprom(16,codigoBajar); 
2A16:  MOVLW  10
2A18:  MOVWF  FA9
2A1A:  MOVFF  53,FA8
2A1E:  BCF    FA6.6
2A20:  BCF    FA6.7
2A22:  BSF    FA6.2
2A24:  MOVF   FF2,W
2A26:  MOVWF  00
2A28:  BCF    FF2.6
2A2A:  BCF    FF2.7
2A2C:  MOVLB  F
2A2E:  MOVLW  55
2A30:  MOVWF  FA7
2A32:  MOVLW  AA
2A34:  MOVWF  FA7
2A36:  BSF    FA6.1
2A38:  BTFSC  FA6.1
2A3A:  BRA    2A38
2A3C:  BCF    FA6.2
2A3E:  MOVF   00,W
2A40:  IORWF  FF2,F
....................                   delay_ms(20); 
2A42:  MOVLW  14
2A44:  MOVLB  0
2A46:  MOVWF  xF7
2A48:  CALL   0A5A
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
2A4C:  BSF    F8B.0
2A4E:  BCF    F94.0
2A50:  MOVLW  02
2A52:  MOVWF  xE0
2A54:  MOVLW  FA
2A56:  MOVWF  xF7
2A58:  CALL   0A5A
2A5C:  DECFSZ xE0,F
2A5E:  BRA    2A54
2A60:  BCF    F8B.0
2A62:  BCF    F94.0
....................                } 
....................             } 
....................              
....................             if(RIGHT){ 
2A64:  BSF    F96.1
2A66:  BTFSC  F84.1
2A68:  BRA    2AD2
....................                delay_ms(500); 
2A6A:  MOVLW  02
2A6C:  MOVWF  xE0
2A6E:  MOVLW  FA
2A70:  MOVWF  xF7
2A72:  CALL   0A5A
2A76:  DECFSZ xE0,F
2A78:  BRA    2A6E
....................                if(RIGHT){ 
2A7A:  BSF    F96.1
2A7C:  BTFSC  F84.1
2A7E:  BRA    2AD2
....................                   codigoDetener=BYTE_IR[3]; 
2A80:  MOVFF  DF,54
....................                   write_eeprom(17,codigoDetener); 
2A84:  MOVLW  11
2A86:  MOVWF  FA9
2A88:  MOVFF  54,FA8
2A8C:  BCF    FA6.6
2A8E:  BCF    FA6.7
2A90:  BSF    FA6.2
2A92:  MOVF   FF2,W
2A94:  MOVWF  00
2A96:  BCF    FF2.6
2A98:  BCF    FF2.7
2A9A:  MOVLB  F
2A9C:  MOVLW  55
2A9E:  MOVWF  FA7
2AA0:  MOVLW  AA
2AA2:  MOVWF  FA7
2AA4:  BSF    FA6.1
2AA6:  BTFSC  FA6.1
2AA8:  BRA    2AA6
2AAA:  BCF    FA6.2
2AAC:  MOVF   00,W
2AAE:  IORWF  FF2,F
....................                   delay_ms(20); 
2AB0:  MOVLW  14
2AB2:  MOVLB  0
2AB4:  MOVWF  xF7
2AB6:  CALL   0A5A
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
2ABA:  BSF    F8B.0
2ABC:  BCF    F94.0
2ABE:  MOVLW  02
2AC0:  MOVWF  xE0
2AC2:  MOVLW  FA
2AC4:  MOVWF  xF7
2AC6:  CALL   0A5A
2ACA:  DECFSZ xE0,F
2ACC:  BRA    2AC2
2ACE:  BCF    F8B.0
2AD0:  BCF    F94.0
....................                } 
....................             } 
....................              
....................             if(IZQU){ 
2AD2:  BSF    F96.2
2AD4:  BTFSC  F84.2
2AD6:  BRA    2AF0
....................                delay_ms(500); 
2AD8:  MOVLW  02
2ADA:  MOVWF  xE0
2ADC:  MOVLW  FA
2ADE:  MOVWF  xF7
2AE0:  CALL   0A5A
2AE4:  DECFSZ xE0,F
2AE6:  BRA    2ADC
....................                if(IZQU){ 
2AE8:  BSF    F96.2
2AEA:  BTFSC  F84.2
2AEC:  BRA    2AF0
....................                   reset_cpu(); 
2AEE:  RESET
....................                } 
....................             } 
....................          } 
2AF0:  BRA    2872
....................       } 
....................    } 
....................    while(true){ 
....................    leeControlRemoto(); 
2AF2:  CALL   1464
....................     
....................    if(VelMotor==6){ 
2AF6:  MOVF   xC8,W
2AF8:  SUBLW  06
2AFA:  BNZ   2B08
....................       Motor_on; 
2AFC:  BSF    F8B.2
2AFE:  BCF    F94.2
....................       Motor2_on;  
2B00:  BSF    F8B.1
2B02:  BCF    F94.1
....................       set_timer0(0); 
2B04:  CLRF   FD7
2B06:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
2B08:  MOVF   xC8,F
2B0A:  BNZ   2B18
....................       Motor_off; 
2B0C:  BCF    F8B.2
2B0E:  BCF    F94.2
....................       Motor2_off;  
2B10:  BCF    F8B.1
2B12:  BCF    F94.1
....................       set_timer0(0); 
2B14:  CLRF   FD7
2B16:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2B18:  MOVF   2C,F
2B1A:  BTFSS  FD8.2
2B1C:  BRA    2F28
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2B1E:  MOVLW  01
2B20:  MOVWF  xF2
2B22:  MOVWF  xF3
2B24:  CALL   0B92
....................          printf(lcd_putc,"     Ingrese        "); 
2B28:  MOVLW  C4
2B2A:  MOVWF  FF6
2B2C:  MOVLW  04
2B2E:  MOVWF  FF7
2B30:  CALL   0C58
....................          lcd_gotoxy(1,2); 
2B34:  MOVLW  01
2B36:  MOVWF  xF2
2B38:  MOVLW  02
2B3A:  MOVWF  xF3
2B3C:  CALL   0B92
....................          printf(lcd_putc,"    Contraseña      "); 
2B40:  MOVLW  DA
2B42:  MOVWF  FF6
2B44:  MOVLW  04
2B46:  MOVWF  FF7
2B48:  CALL   0C58
....................          lcd_gotoxy(1,3); 
2B4C:  MOVLW  01
2B4E:  MOVWF  xF2
2B50:  MOVLW  03
2B52:  MOVWF  xF3
2B54:  CALL   0B92
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2B58:  MOVLW  F0
2B5A:  MOVWF  FF6
2B5C:  MOVLW  04
2B5E:  MOVWF  FF7
2B60:  MOVLW  0A
2B62:  MOVWF  xE4
2B64:  CALL   1622
2B68:  MOVFF  49,E0
2B6C:  MOVLW  1F
2B6E:  MOVWF  xE1
2B70:  CALL   16AC
2B74:  MOVFF  4A,E0
2B78:  MOVLW  1F
2B7A:  MOVWF  xE1
2B7C:  CALL   16AC
2B80:  MOVFF  4B,E0
2B84:  MOVLW  1F
2B86:  MOVWF  xE1
2B88:  CALL   16AC
2B8C:  MOVFF  4C,E0
2B90:  MOVLW  1F
2B92:  MOVWF  xE1
2B94:  CALL   16AC
2B98:  MOVLW  20
2B9A:  MOVWF  xF1
2B9C:  CALL   0BFA
2BA0:  MOVLW  20
2BA2:  MOVWF  xF1
2BA4:  CALL   0BFA
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2BA8:  MOVFF  2F,F2
2BAC:  MOVLW  04
2BAE:  MOVWF  xF3
2BB0:  CALL   0B92
....................          lcd_putc(t[2]); 
2BB4:  MOVFF  48,F1
2BB8:  CALL   0BFA
....................           
....................          if(unidad>11&&unidad<14){ 
2BBC:  MOVF   2F,W
2BBE:  SUBLW  0B
2BC0:  BC    2BE0
2BC2:  MOVF   2F,W
2BC4:  SUBLW  0D
2BC6:  BNC   2BE0
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2BC8:  MOVLW  01
2BCA:  SUBWF  2F,W
2BCC:  MOVWF  xE0
2BCE:  MOVWF  xF2
2BD0:  MOVLW  04
2BD2:  MOVWF  xF3
2BD4:  CALL   0B92
....................             lcd_putc(t[1]); 
2BD8:  MOVFF  47,F1
2BDC:  CALL   0BFA
....................          } 
....................           
....................          Cambio=OFF; 
2BE0:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2BE2:  BSF    F92.5
2BE4:  BTFSC  F80.5
2BE6:  BRA    2C1A
....................          delay_ms(20); 
2BE8:  MOVLW  14
2BEA:  MOVWF  xF7
2BEC:  CALL   0A5A
....................          if(UP){ 
2BF0:  BSF    F92.5
2BF2:  BTFSC  F80.5
2BF4:  BRA    2C18
....................             if(Flanco == 0) { 
2BF6:  BTFSC  29.3
2BF8:  BRA    2C18
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2BFA:  MOVLW  0B
2BFC:  SUBWF  2F,W
2BFE:  CLRF   03
2C00:  ADDLW  49
2C02:  MOVWF  FE9
2C04:  MOVLW  00
2C06:  ADDWFC 03,W
2C08:  MOVWF  FEA
2C0A:  INCF   FEF,F
2C0C:  BSF    29.3
2C0E:  MOVLW  1E
2C10:  MOVWF  xF7
2C12:  CALL   0A5A
2C16:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2C18:  BRA    2C1C
....................          Flanco = 0; 
2C1A:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2C1C:  BSF    F96.0
2C1E:  BTFSC  F84.0
2C20:  BRA    2C54
....................          delay_ms(20); 
2C22:  MOVLW  14
2C24:  MOVWF  xF7
2C26:  CALL   0A5A
....................          if(DOWN){ 
2C2A:  BSF    F96.0
2C2C:  BTFSC  F84.0
2C2E:  BRA    2C52
....................             if(Flanco2 == 0) { 
2C30:  BTFSC  29.5
2C32:  BRA    2C52
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2C34:  MOVLW  0B
2C36:  SUBWF  2F,W
2C38:  CLRF   03
2C3A:  ADDLW  49
2C3C:  MOVWF  FE9
2C3E:  MOVLW  00
2C40:  ADDWFC 03,W
2C42:  MOVWF  FEA
2C44:  DECF   FEF,F
2C46:  BSF    29.5
2C48:  MOVLW  1E
2C4A:  MOVWF  xF7
2C4C:  CALL   0A5A
2C50:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2C52:  BRA    2C56
....................          Flanco2 = 0; 
2C54:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2C56:  BSF    F96.1
2C58:  BTFSC  F84.1
2C5A:  BRA    2C86
....................          delay_ms(20); 
2C5C:  MOVLW  14
2C5E:  MOVWF  xF7
2C60:  CALL   0A5A
....................          if(RIGHT){ 
2C64:  BSF    F96.1
2C66:  BTFSC  F84.1
2C68:  BRA    2C84
....................             if(Flanco1 == 0) { 
2C6A:  BTFSC  29.4
2C6C:  BRA    2C84
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2C6E:  BSF    29.4
2C70:  INCF   2F,F
2C72:  MOVLW  1E
2C74:  MOVWF  xF7
2C76:  CALL   0A5A
2C7A:  MOVLW  0C
2C7C:  MOVWF  xF1
2C7E:  CALL   0BFA
2C82:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2C84:  BRA    2C88
....................          Flanco1 = 0; 
2C86:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2C88:  BSF    F96.2
2C8A:  BTFSC  F84.2
2C8C:  BRA    2CB8
....................          delay_ms(150); 
2C8E:  MOVLW  96
2C90:  MOVWF  xF7
2C92:  CALL   0A5A
....................          if(IZQU){ 
2C96:  BSF    F96.2
2C98:  BTFSC  F84.2
2C9A:  BRA    2CB6
....................             if(Flanco3 == 0){ 
2C9C:  BTFSC  29.6
2C9E:  BRA    2CB6
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2CA0:  BSF    29.6
2CA2:  DECF   2F,F
2CA4:  MOVLW  1E
2CA6:  MOVWF  xF7
2CA8:  CALL   0A5A
2CAC:  MOVLW  0C
2CAE:  MOVWF  xF1
2CB0:  CALL   0BFA
2CB4:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2CB6:  BRA    2CBA
....................         Flanco3 = 0; 
2CB8:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2CBA:  MOVLW  0B
2CBC:  SUBWF  2F,W
2CBE:  CLRF   03
2CC0:  ADDLW  49
2CC2:  MOVWF  FE9
2CC4:  MOVLW  00
2CC6:  ADDWFC 03,W
2CC8:  MOVWF  FEA
2CCA:  BTFSC  FEF.7
2CCC:  BRA    2CD0
2CCE:  BRA    2CE4
....................          clave[unidad-11]=9; 
2CD0:  MOVLW  0B
2CD2:  SUBWF  2F,W
2CD4:  CLRF   03
2CD6:  ADDLW  49
2CD8:  MOVWF  FE9
2CDA:  MOVLW  00
2CDC:  ADDWFC 03,W
2CDE:  MOVWF  FEA
2CE0:  MOVLW  09
2CE2:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2CE4:  MOVLW  0B
2CE6:  SUBWF  2F,W
2CE8:  CLRF   03
2CEA:  ADDLW  49
2CEC:  MOVWF  FE9
2CEE:  MOVLW  00
2CF0:  ADDWFC 03,W
2CF2:  MOVWF  FEA
2CF4:  BTFSC  FEF.7
2CF6:  BRA    2D10
2CF8:  MOVF   FEF,W
2CFA:  SUBLW  09
2CFC:  BC    2D10
....................          clave[unidad-11]=0; 
2CFE:  MOVLW  0B
2D00:  SUBWF  2F,W
2D02:  CLRF   03
2D04:  ADDLW  49
2D06:  MOVWF  FE9
2D08:  MOVLW  00
2D0A:  ADDWFC 03,W
2D0C:  MOVWF  FEA
2D0E:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2D10:  MOVF   2F,W
2D12:  SUBLW  0A
2D14:  BNC   2D1A
....................          unidad=11; 
2D16:  MOVLW  0B
2D18:  MOVWF  2F
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2D1A:  MOVF   2F,W
2D1C:  SUBLW  0E
2D1E:  BTFSC  FD8.0
2D20:  BRA    2F28
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2D22:  MOVF   49,W
2D24:  SUBLW  03
2D26:  BNZ   2E0A
2D28:  MOVF   4A,W
2D2A:  SUBLW  08
2D2C:  BNZ   2E0A
2D2E:  MOVF   4B,W
2D30:  SUBLW  09
2D32:  BNZ   2E0A
2D34:  MOVF   4C,W
2D36:  SUBLW  02
2D38:  BNZ   2E0A
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2D3A:  CLRF   FA9
2D3C:  CLRF   FA8
2D3E:  BCF    FA6.6
2D40:  BCF    FA6.7
2D42:  BSF    FA6.2
2D44:  MOVF   FF2,W
2D46:  MOVWF  00
2D48:  BCF    FF2.6
2D4A:  BCF    FF2.7
2D4C:  MOVLB  F
2D4E:  MOVLW  55
2D50:  MOVWF  FA7
2D52:  MOVLW  AA
2D54:  MOVWF  FA7
2D56:  BSF    FA6.1
2D58:  BTFSC  FA6.1
2D5A:  BRA    2D58
2D5C:  BCF    FA6.2
2D5E:  MOVF   00,W
2D60:  IORWF  FF2,F
2D62:  MOVLW  14
2D64:  MOVLB  0
2D66:  MOVWF  xF7
2D68:  CALL   0A5A
2D6C:  MOVLW  01
2D6E:  MOVWF  FA9
2D70:  CLRF   FA8
2D72:  BCF    FA6.6
2D74:  BCF    FA6.7
2D76:  BSF    FA6.2
2D78:  MOVF   FF2,W
2D7A:  MOVWF  00
2D7C:  BCF    FF2.6
2D7E:  BCF    FF2.7
2D80:  MOVLB  F
2D82:  MOVLW  55
2D84:  MOVWF  FA7
2D86:  MOVLW  AA
2D88:  MOVWF  FA7
2D8A:  BSF    FA6.1
2D8C:  BTFSC  FA6.1
2D8E:  BRA    2D8C
2D90:  BCF    FA6.2
2D92:  MOVF   00,W
2D94:  IORWF  FF2,F
2D96:  MOVLW  14
2D98:  MOVLB  0
2D9A:  MOVWF  xF7
2D9C:  CALL   0A5A
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2DA0:  MOVLW  02
2DA2:  MOVWF  FA9
2DA4:  CLRF   FA8
2DA6:  BCF    FA6.6
2DA8:  BCF    FA6.7
2DAA:  BSF    FA6.2
2DAC:  MOVF   FF2,W
2DAE:  MOVWF  00
2DB0:  BCF    FF2.6
2DB2:  BCF    FF2.7
2DB4:  MOVLB  F
2DB6:  MOVLW  55
2DB8:  MOVWF  FA7
2DBA:  MOVLW  AA
2DBC:  MOVWF  FA7
2DBE:  BSF    FA6.1
2DC0:  BTFSC  FA6.1
2DC2:  BRA    2DC0
2DC4:  BCF    FA6.2
2DC6:  MOVF   00,W
2DC8:  IORWF  FF2,F
2DCA:  MOVLW  14
2DCC:  MOVLB  0
2DCE:  MOVWF  xF7
2DD0:  CALL   0A5A
2DD4:  MOVLW  03
2DD6:  MOVWF  FA9
2DD8:  CLRF   FA8
2DDA:  BCF    FA6.6
2DDC:  BCF    FA6.7
2DDE:  BSF    FA6.2
2DE0:  MOVF   FF2,W
2DE2:  MOVWF  00
2DE4:  BCF    FF2.6
2DE6:  BCF    FF2.7
2DE8:  MOVLB  F
2DEA:  MOVLW  55
2DEC:  MOVWF  FA7
2DEE:  MOVLW  AA
2DF0:  MOVWF  FA7
2DF2:  BSF    FA6.1
2DF4:  BTFSC  FA6.1
2DF6:  BRA    2DF4
2DF8:  BCF    FA6.2
2DFA:  MOVF   00,W
2DFC:  IORWF  FF2,F
2DFE:  MOVLW  14
2E00:  MOVLB  0
2E02:  MOVWF  xF7
2E04:  CALL   0A5A
....................              reset_cpu(); 
2E08:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
2E0A:  MOVF   4D,W
2E0C:  SUBWF  49,W
2E0E:  BNZ   2EAE
2E10:  MOVF   4E,W
2E12:  SUBWF  4A,W
2E14:  BNZ   2EAE
2E16:  MOVF   4F,W
2E18:  SUBWF  4B,W
2E1A:  BNZ   2EAE
2E1C:  MOVF   50,W
2E1E:  SUBWF  4C,W
2E20:  BNZ   2EAE
....................             lcd_gotoxy(1,1); 
2E22:  MOVLW  01
2E24:  MOVWF  xF2
2E26:  MOVWF  xF3
2E28:  CALL   0B92
....................             printf(lcd_putc,"                   "); 
2E2C:  MOVLW  06
2E2E:  MOVWF  FF6
2E30:  MOVLW  05
2E32:  MOVWF  FF7
2E34:  CALL   0C58
....................             lcd_gotoxy(1,2); 
2E38:  MOVLW  01
2E3A:  MOVWF  xF2
2E3C:  MOVLW  02
2E3E:  MOVWF  xF3
2E40:  CALL   0B92
....................             printf(lcd_putc,"     Contraseña    "); 
2E44:  MOVLW  1A
2E46:  MOVWF  FF6
2E48:  MOVLW  05
2E4A:  MOVWF  FF7
2E4C:  CALL   0C58
....................             lcd_gotoxy(1,3); 
2E50:  MOVLW  01
2E52:  MOVWF  xF2
2E54:  MOVLW  03
2E56:  MOVWF  xF3
2E58:  CALL   0B92
....................             printf(lcd_putc,"      Correcta     "); 
2E5C:  MOVLW  2E
2E5E:  MOVWF  FF6
2E60:  MOVLW  05
2E62:  MOVWF  FF7
2E64:  CALL   0C58
....................             lcd_gotoxy(1,4); 
2E68:  MOVLW  01
2E6A:  MOVWF  xF2
2E6C:  MOVLW  04
2E6E:  MOVWF  xF3
2E70:  CALL   0B92
....................             printf(lcd_putc,"                   "); 
2E74:  MOVLW  42
2E76:  MOVWF  FF6
2E78:  MOVLW  05
2E7A:  MOVWF  FF7
2E7C:  CALL   0C58
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2E80:  MOVLW  04
2E82:  MOVWF  xE0
2E84:  MOVLW  FA
2E86:  MOVWF  xF7
2E88:  CALL   0A5A
2E8C:  DECFSZ xE0,F
2E8E:  BRA    2E84
2E90:  MOVLW  32
2E92:  MOVWF  2C
2E94:  MOVLW  0B
2E96:  MOVWF  2F
2E98:  MOVLW  0C
2E9A:  MOVWF  xF1
2E9C:  CALL   0BFA
2EA0:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2EA2:  CLRF   49
2EA4:  CLRF   4A
2EA6:  CLRF   4B
2EA8:  CLRF   4C
2EAA:  BSF    2B.3
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2EAC:  BRA    2F28
....................             lcd_gotoxy(1,1); 
2EAE:  MOVLW  01
2EB0:  MOVWF  xF2
2EB2:  MOVWF  xF3
2EB4:  CALL   0B92
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2EB8:  MOVLW  01
2EBA:  MOVWF  xF2
2EBC:  MOVLW  02
2EBE:  MOVWF  xF3
2EC0:  CALL   0B92
....................             printf(lcd_putc,"     Contraseña    "); 
2EC4:  MOVLW  56
2EC6:  MOVWF  FF6
2EC8:  MOVLW  05
2ECA:  MOVWF  FF7
2ECC:  CALL   0C58
....................             lcd_gotoxy(1,3); 
2ED0:  MOVLW  01
2ED2:  MOVWF  xF2
2ED4:  MOVLW  03
2ED6:  MOVWF  xF3
2ED8:  CALL   0B92
....................             printf(lcd_putc,"     Incorrecta    "); 
2EDC:  MOVLW  6A
2EDE:  MOVWF  FF6
2EE0:  MOVLW  05
2EE2:  MOVWF  FF7
2EE4:  CALL   0C58
....................             lcd_gotoxy(1,4); 
2EE8:  MOVLW  01
2EEA:  MOVWF  xF2
2EEC:  MOVLW  04
2EEE:  MOVWF  xF3
2EF0:  CALL   0B92
....................             printf(lcd_putc,"                   "); 
2EF4:  MOVLW  7E
2EF6:  MOVWF  FF6
2EF8:  MOVLW  05
2EFA:  MOVWF  FF7
2EFC:  CALL   0C58
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2F00:  MOVLW  04
2F02:  MOVWF  xE0
2F04:  MOVLW  FA
2F06:  MOVWF  xF7
2F08:  CALL   0A5A
2F0C:  DECFSZ xE0,F
2F0E:  BRA    2F04
2F10:  MOVLW  0B
2F12:  MOVWF  2F
2F14:  MOVLW  0C
2F16:  MOVWF  xF1
2F18:  CALL   0BFA
2F1C:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2F1E:  CLRF   49
2F20:  CLRF   4A
2F22:  CLRF   4B
2F24:  CLRF   4C
2F26:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2F28:  DECFSZ 2C,W
2F2A:  BRA    3162
....................       EliminaRuido(); 
2F2C:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2F30:  MOVLW  01
2F32:  MOVWF  xF2
2F34:  MOVWF  xF3
2F36:  CALL   0B92
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2F3A:  MOVLW  92
2F3C:  MOVWF  FF6
2F3E:  MOVLW  05
2F40:  MOVWF  FF7
2F42:  CALL   0C58
....................          mensajes(1+paso,2); 
2F46:  MOVLW  01
2F48:  ADDWF  45,W
2F4A:  MOVWF  xE0
2F4C:  MOVWF  xE1
2F4E:  MOVLW  02
2F50:  MOVWF  xE2
2F52:  CALL   177C
....................          mensajes(2+paso,3); 
2F56:  MOVLW  02
2F58:  ADDWF  45,W
2F5A:  MOVWF  xE0
2F5C:  MOVWF  xE1
2F5E:  MOVLW  03
2F60:  MOVWF  xE2
2F62:  CALL   177C
....................          mensajes(3+paso,4); 
2F66:  MOVLW  03
2F68:  ADDWF  45,W
2F6A:  MOVWF  xE0
2F6C:  MOVWF  xE1
2F6E:  MOVLW  04
2F70:  MOVWF  xE2
2F72:  CALL   177C
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2F76:  MOVLW  01
2F78:  MOVWF  xF2
2F7A:  MOVFF  30,F3
2F7E:  CALL   0B92
....................         lcd_putc(t[0]); 
2F82:  MOVFF  46,F1
2F86:  CALL   0BFA
....................  
....................         if(Flecha==2) 
2F8A:  MOVF   30,W
2F8C:  SUBLW  02
2F8E:  BNZ   2FB8
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2F90:  MOVLW  01
2F92:  MOVWF  xF2
2F94:  MOVLW  04
2F96:  MOVWF  xF3
2F98:  CALL   0B92
....................             lcd_putc(t[1]); 
2F9C:  MOVFF  47,F1
2FA0:  CALL   0BFA
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2FA4:  MOVLW  01
2FA6:  MOVWF  xF2
2FA8:  MOVLW  03
2FAA:  MOVWF  xF3
2FAC:  CALL   0B92
....................             lcd_putc(t[1]); 
2FB0:  MOVFF  47,F1
2FB4:  CALL   0BFA
....................           } 
....................          
....................         if(Flecha==4) 
2FB8:  MOVF   30,W
2FBA:  SUBLW  04
2FBC:  BNZ   2FE6
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2FBE:  MOVLW  01
2FC0:  MOVWF  xF2
2FC2:  MOVLW  02
2FC4:  MOVWF  xF3
2FC6:  CALL   0B92
....................             lcd_putc(t[1]); 
2FCA:  MOVFF  47,F1
2FCE:  CALL   0BFA
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2FD2:  MOVLW  01
2FD4:  MOVWF  xF2
2FD6:  MOVLW  03
2FD8:  MOVWF  xF3
2FDA:  CALL   0B92
....................             lcd_putc(t[1]); 
2FDE:  MOVFF  47,F1
2FE2:  CALL   0BFA
....................           } 
....................          
....................         if(Flecha==3) 
2FE6:  MOVF   30,W
2FE8:  SUBLW  03
2FEA:  BNZ   3014
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2FEC:  MOVLW  01
2FEE:  MOVWF  xF2
2FF0:  MOVLW  04
2FF2:  MOVWF  xF3
2FF4:  CALL   0B92
....................             lcd_putc(t[1]); 
2FF8:  MOVFF  47,F1
2FFC:  CALL   0BFA
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
3000:  MOVLW  01
3002:  MOVWF  xF2
3004:  MOVLW  02
3006:  MOVWF  xF3
3008:  CALL   0B92
....................             lcd_putc(t[1]); 
300C:  MOVFF  47,F1
3010:  CALL   0BFA
....................           } 
....................          Cambio=OFF; 
3014:  BCF    2B.3
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
3016:  BSF    F92.5
3018:  BTFSC  F80.5
301A:  BRA    3046
....................          delay_ms(20); 
301C:  MOVLW  14
301E:  MOVWF  xF7
3020:  CALL   0A5A
....................          if(UP){ 
3024:  BSF    F92.5
3026:  BTFSC  F80.5
3028:  BRA    3044
....................             if(Flanco == 0){ 
302A:  BTFSC  29.3
302C:  BRA    3044
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
302E:  DECF   32,F
3030:  DECF   30,F
3032:  MOVLW  01
3034:  ADDWF  30,W
3036:  MOVWF  31
3038:  BSF    29.3
303A:  MOVLW  1E
303C:  MOVWF  xF7
303E:  CALL   0A5A
3042:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3044:  BRA    3048
....................          Flanco = 0; 
3046:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3048:  BSF    F96.0
304A:  BTFSC  F84.0
304C:  BRA    3078
....................          delay_ms(20); 
304E:  MOVLW  14
3050:  MOVWF  xF7
3052:  CALL   0A5A
....................          if(DOWN){ 
3056:  BSF    F96.0
3058:  BTFSC  F84.0
305A:  BRA    3076
....................             if(Flanco2 == 0){ 
305C:  BTFSC  29.5
305E:  BRA    3076
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3060:  INCF   32,F
3062:  INCF   30,F
3064:  MOVLW  01
3066:  SUBWF  30,W
3068:  MOVWF  31
306A:  BSF    29.5
306C:  MOVLW  1E
306E:  MOVWF  xF7
3070:  CALL   0A5A
3074:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3076:  BRA    307A
....................          Flanco2 = 0; 
3078:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
307A:  MOVF   32,W
307C:  SUBWF  34,W
307E:  BC    3090
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
3080:  INCF   45,F
3082:  MOVFF  32,34
3086:  MOVLW  02
3088:  SUBWF  34,W
308A:  MOVWF  33
308C:  MOVLW  04
308E:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
3090:  MOVF   33,W
3092:  SUBWF  32,W
3094:  BC    30A6
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
3096:  DECF   45,F
3098:  MOVFF  32,33
309C:  MOVLW  02
309E:  ADDWF  33,W
30A0:  MOVWF  34
30A2:  MOVLW  02
30A4:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
30A6:  MOVF   32,W
30A8:  SUBWF  2D,W
30AA:  BC    30BE
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
30AC:  MOVFF  2E,32
30B0:  MOVLW  02
30B2:  MOVWF  30
30B4:  CLRF   45
30B6:  MOVFF  32,33
30BA:  ADDWF  33,W
30BC:  MOVWF  34
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
30BE:  MOVF   2E,W
30C0:  SUBWF  32,W
30C2:  BC    30DA
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
30C4:  MOVFF  2D,32
30C8:  MOVLW  04
30CA:  MOVWF  30
30CC:  SUBWF  2D,W
30CE:  MOVWF  45
30D0:  MOVFF  32,34
30D4:  MOVLW  02
30D6:  SUBWF  34,W
30D8:  MOVWF  33
....................       } 
....................          
....................       if(paso<0) 
30DA:  BTFSC  45.7
30DC:  BRA    30E0
30DE:  BRA    30E2
....................          paso=0; 
30E0:  CLRF   45
....................           
....................       if(RIGHT){// Si oprime derecha 
30E2:  BSF    F96.1
30E4:  BTFSC  F84.1
30E6:  BRA    312E
....................          delay_ms(20); 
30E8:  MOVLW  14
30EA:  MOVWF  xF7
30EC:  CALL   0A5A
....................          if(RIGHT){ 
30F0:  BSF    F96.1
30F2:  BTFSC  F84.1
30F4:  BRA    312A
....................             if(Flanco1 == 0){ 
30F6:  BTFSC  29.4
30F8:  BRA    312A
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
30FA:  BSF    29.4
30FC:  MOVFF  32,2C
3100:  MOVLW  03
3102:  MOVWF  30
3104:  MOVLW  02
3106:  MOVWF  xE0
3108:  MOVLW  96
310A:  MOVWF  xF7
310C:  CALL   0A5A
3110:  DECFSZ xE0,F
3112:  BRA    3108
3114:  MOVLW  0C
3116:  MOVWF  xF1
3118:  CALL   0BFA
....................                if(Menu==6){ 
311C:  MOVF   2C,W
311E:  SUBLW  06
3120:  BNZ   312A
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3122:  CLRF   49
3124:  CLRF   4A
3126:  CLRF   4B
3128:  CLRF   4C
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
312A:  BSF    2B.3
....................       }else{ 
312C:  BRA    3130
....................         Flanco1 = 0; 
312E:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
3130:  BSF    F96.2
3132:  BTFSC  F84.2
3134:  BRA    3162
....................          delay_ms(20); 
3136:  MOVLW  14
3138:  MOVWF  xF7
313A:  CALL   0A5A
....................          if(IZQU){ 
313E:  BSF    F96.2
3140:  BTFSC  F84.2
3142:  BRA    3162
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
3144:  MOVLW  02
3146:  MOVWF  xE0
3148:  MOVLW  FA
314A:  MOVWF  xF7
314C:  CALL   0A5A
3150:  DECFSZ xE0,F
3152:  BRA    3148
3154:  MOVLW  32
3156:  MOVWF  2C
3158:  MOVLW  0C
315A:  MOVWF  xF1
315C:  CALL   0BFA
3160:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
3162:  MOVF   2C,W
3164:  SUBLW  02
3166:  BTFSS  FD8.2
3168:  BRA    33C2
....................    EliminaRuido(); 
316A:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
316E:  MOVLW  01
3170:  MOVWF  xF2
3172:  MOVWF  xF3
3174:  CALL   0B92
....................       printf(lcd_putc,"    Temporizador     "); 
3178:  MOVLW  A8
317A:  MOVWF  FF6
317C:  MOVLW  05
317E:  MOVWF  FF7
3180:  CALL   0C58
....................       lcd_gotoxy(1,2); 
3184:  MOVLW  01
3186:  MOVWF  xF2
3188:  MOVLW  02
318A:  MOVWF  xF3
318C:  CALL   0B92
....................       printf(lcd_putc,"       Luz UV        "); 
3190:  MOVLW  BE
3192:  MOVWF  FF6
3194:  MOVLW  05
3196:  MOVWF  FF7
3198:  CALL   0C58
....................       lcd_gotoxy(6,3); 
319C:  MOVLW  06
319E:  MOVWF  xF2
31A0:  MOVLW  03
31A2:  MOVWF  xF3
31A4:  CALL   0B92
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
31A8:  MOVFF  3D,E0
31AC:  MOVLW  03
31AE:  MOVWF  xE1
31B0:  CALL   1850
31B4:  MOVLW  3A
31B6:  MOVWF  xF1
31B8:  CALL   0BFA
31BC:  MOVFF  3E,E0
31C0:  MOVLW  01
31C2:  MOVWF  xE1
31C4:  CALL   1850
31C8:  MOVLW  DD
31CA:  MOVWF  FF6
31CC:  MOVLW  05
31CE:  MOVWF  FF7
31D0:  MOVLW  08
31D2:  MOVWF  xE4
31D4:  CALL   1622
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
31D8:  MOVLW  06
31DA:  ADDWF  42,W
31DC:  MOVWF  xE0
31DE:  MOVWF  xF2
31E0:  MOVLW  04
31E2:  MOVWF  xF3
31E4:  CALL   0B92
....................       lcd_putc(t[2]); 
31E8:  MOVFF  48,F1
31EC:  CALL   0BFA
....................        
....................       Cambio=OFF; 
31F0:  BCF    2B.3
.................... //   } 
....................     
....................    if(UP) 
31F2:  BSF    F92.5
31F4:  BTFSC  F80.5
31F6:  BRA    3244
....................    { 
....................       delay_ms(20); 
31F8:  MOVLW  14
31FA:  MOVWF  xF7
31FC:  CALL   0A5A
....................       if(UP){ 
3200:  BSF    F92.5
3202:  BTFSC  F80.5
3204:  BRA    3244
....................          if(unidad2==1) 
3206:  DECFSZ 42,W
3208:  BRA    3224
....................          { 
....................             if(tempo_minutos_pro<240) 
320A:  MOVF   3D,W
320C:  SUBLW  EF
320E:  BNC   3224
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
3210:  MOVLW  05
3212:  ADDWF  3D,F
3214:  MOVLW  02
3216:  MOVWF  xE0
3218:  MOVLW  96
321A:  MOVWF  xF7
321C:  CALL   0A5A
3220:  DECFSZ xE0,F
3222:  BRA    3218
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
3224:  MOVF   42,W
3226:  SUBLW  04
3228:  BNZ   3242
....................          { 
....................             if(tempo_segundos_pro<59) 
322A:  MOVF   3E,W
322C:  SUBLW  3A
322E:  BNC   3242
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
3230:  INCF   3E,F
3232:  MOVLW  02
3234:  MOVWF  xE0
3236:  MOVLW  96
3238:  MOVWF  xF7
323A:  CALL   0A5A
323E:  DECFSZ xE0,F
3240:  BRA    3236
....................             } 
....................          }      
....................       Cambio=ON; 
3242:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(DOWN) 
3244:  BSF    F96.0
3246:  BTFSC  F84.0
3248:  BRA    3292
....................    { 
....................       delay_ms(20); 
324A:  MOVLW  14
324C:  MOVWF  xF7
324E:  CALL   0A5A
....................       if(DOWN){ 
3252:  BSF    F96.0
3254:  BTFSC  F84.0
3256:  BRA    3292
....................          if(unidad2==1) 
3258:  DECFSZ 42,W
325A:  BRA    3274
....................          { 
....................             if(tempo_minutos_pro>0) 
325C:  MOVF   3D,F
325E:  BZ    3274
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
3260:  MOVLW  05
3262:  SUBWF  3D,F
3264:  MOVLW  02
3266:  MOVWF  xE0
3268:  MOVLW  96
326A:  MOVWF  xF7
326C:  CALL   0A5A
3270:  DECFSZ xE0,F
3272:  BRA    3268
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
3274:  MOVF   42,W
3276:  SUBLW  04
3278:  BNZ   3290
....................          { 
....................             if(tempo_segundos_pro>0) 
327A:  MOVF   3E,F
327C:  BZ    3290
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
327E:  DECF   3E,F
3280:  MOVLW  02
3282:  MOVWF  xE0
3284:  MOVLW  96
3286:  MOVWF  xF7
3288:  CALL   0A5A
328C:  DECFSZ xE0,F
328E:  BRA    3284
....................             }    
....................          } 
....................       Cambio=ON; 
3290:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
3292:  BSF    F96.1
3294:  BTFSC  F84.1
3296:  BRA    32D4
....................    { 
....................       delay_ms(20); 
3298:  MOVLW  14
329A:  MOVWF  xF7
329C:  CALL   0A5A
....................       if(RIGHT){ 
32A0:  BSF    F96.1
32A2:  BTFSC  F84.1
32A4:  BRA    32D4
....................          if(unidad2==1) 
32A6:  DECFSZ 42,W
32A8:  BRA    32B0
....................          { 
....................             unidad2=4; 
32AA:  MOVLW  04
32AC:  MOVWF  42
....................          } 
....................          else 
32AE:  BRA    32BA
....................          { 
....................             if(unidad2==4) 
32B0:  MOVF   42,W
32B2:  SUBLW  04
32B4:  BNZ   32BA
....................             { 
....................                unidad2=1; 
32B6:  MOVLW  01
32B8:  MOVWF  42
....................             } 
....................          } 
....................       delay_ms(500); 
32BA:  MOVLW  02
32BC:  MOVWF  xE0
32BE:  MOVLW  FA
32C0:  MOVWF  xF7
32C2:  CALL   0A5A
32C6:  DECFSZ xE0,F
32C8:  BRA    32BE
....................       printf(lcd_putc,"\f"); 
32CA:  MOVLW  0C
32CC:  MOVWF  xF1
32CE:  CALL   0BFA
....................       Cambio=ON; 
32D2:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(IZQU) 
32D4:  BSF    F96.2
32D6:  BTFSC  F84.2
32D8:  BRA    33C2
....................    { 
....................       if(IZQU){ 
32DA:  BSF    F96.2
32DC:  BTFSC  F84.2
32DE:  BRA    33C2
....................          delay_ms(200); 
32E0:  MOVLW  C8
32E2:  MOVWF  xF7
32E4:  CALL   0A5A
....................          printf(lcd_putc,"\f"); 
32E8:  MOVLW  0C
32EA:  MOVWF  xF1
32EC:  CALL   0BFA
....................          lcd_gotoxy(1,2); 
32F0:  MOVLW  01
32F2:  MOVWF  xF2
32F4:  MOVLW  02
32F6:  MOVWF  xF3
32F8:  CALL   0B92
....................          printf(lcd_putc,"Tiempo Almacenado"); 
32FC:  MOVLW  E6
32FE:  MOVWF  FF6
3300:  MOVLW  05
3302:  MOVWF  FF7
3304:  CALL   0C58
....................          lcd_gotoxy(1,3); 
3308:  MOVLW  01
330A:  MOVWF  xF2
330C:  MOVLW  03
330E:  MOVWF  xF3
3310:  CALL   0B92
....................          printf(lcd_putc,"  Correctamente  "); 
3314:  MOVLW  F8
3316:  MOVWF  FF6
3318:  MOVLW  05
331A:  MOVWF  FF7
331C:  CALL   0C58
....................          write_eeprom(5,tempo_minutos_pro); 
3320:  MOVLW  05
3322:  MOVWF  FA9
3324:  MOVFF  3D,FA8
3328:  BCF    FA6.6
332A:  BCF    FA6.7
332C:  BSF    FA6.2
332E:  MOVF   FF2,W
3330:  MOVWF  00
3332:  BCF    FF2.6
3334:  BCF    FF2.7
3336:  MOVLB  F
3338:  MOVLW  55
333A:  MOVWF  FA7
333C:  MOVLW  AA
333E:  MOVWF  FA7
3340:  BSF    FA6.1
3342:  BTFSC  FA6.1
3344:  BRA    3342
3346:  BCF    FA6.2
3348:  MOVF   00,W
334A:  IORWF  FF2,F
....................          delay_ms(20); 
334C:  MOVLW  14
334E:  MOVLB  0
3350:  MOVWF  xF7
3352:  CALL   0A5A
....................          write_eeprom(6,tempo_segundos_pro); 
3356:  MOVLW  06
3358:  MOVWF  FA9
335A:  MOVFF  3E,FA8
335E:  BCF    FA6.6
3360:  BCF    FA6.7
3362:  BSF    FA6.2
3364:  MOVF   FF2,W
3366:  MOVWF  00
3368:  BCF    FF2.6
336A:  BCF    FF2.7
336C:  MOVLB  F
336E:  MOVLW  55
3370:  MOVWF  FA7
3372:  MOVLW  AA
3374:  MOVWF  FA7
3376:  BSF    FA6.1
3378:  BTFSC  FA6.1
337A:  BRA    3378
337C:  BCF    FA6.2
337E:  MOVF   00,W
3380:  IORWF  FF2,F
....................          delay_ms(20); 
3382:  MOVLW  14
3384:  MOVLB  0
3386:  MOVWF  xF7
3388:  CALL   0A5A
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
338C:  MOVFF  3D,3B
3390:  MOVFF  3E,3C
....................          delay_ms(700); 
3394:  MOVLW  04
3396:  MOVWF  xE0
3398:  MOVLW  AF
339A:  MOVWF  xF7
339C:  CALL   0A5A
33A0:  DECFSZ xE0,F
33A2:  BRA    3398
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
33A4:  MOVLW  1E
33A6:  MOVWF  xF7
33A8:  CALL   0A5A
33AC:  MOVLW  01
33AE:  MOVWF  2C
33B0:  CLRF   45
33B2:  MOVLW  02
33B4:  MOVWF  30
33B6:  MOVWF  32
33B8:  MOVLW  0C
33BA:  MOVWF  xF1
33BC:  CALL   0BFA
....................          Cambio=ON; 
33C0:  BSF    2B.3
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
33C2:  MOVF   2C,W
33C4:  SUBLW  03
33C6:  BTFSS  FD8.2
33C8:  BRA    3714
....................       EliminaRuido(); 
33CA:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
33CE:  MOVLW  01
33D0:  MOVWF  xF2
33D2:  MOVWF  xF3
33D4:  CALL   0B92
....................          printf(lcd_putc,"     Ingrese        "); 
33D8:  MOVLW  0A
33DA:  MOVWF  FF6
33DC:  MOVLW  06
33DE:  MOVWF  FF7
33E0:  CALL   0C58
....................          lcd_gotoxy(1,2); 
33E4:  MOVLW  01
33E6:  MOVWF  xF2
33E8:  MOVLW  02
33EA:  MOVWF  xF3
33EC:  CALL   0B92
....................          printf(lcd_putc,"    Contraseña      "); 
33F0:  MOVLW  20
33F2:  MOVWF  FF6
33F4:  MOVLW  06
33F6:  MOVWF  FF7
33F8:  CALL   0C58
....................          lcd_gotoxy(1,3); 
33FC:  MOVLW  01
33FE:  MOVWF  xF2
3400:  MOVLW  03
3402:  MOVWF  xF3
3404:  CALL   0B92
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3408:  MOVLW  36
340A:  MOVWF  FF6
340C:  MOVLW  06
340E:  MOVWF  FF7
3410:  MOVLW  0A
3412:  MOVWF  xE4
3414:  CALL   1622
3418:  MOVFF  49,E0
341C:  MOVLW  1F
341E:  MOVWF  xE1
3420:  CALL   16AC
3424:  MOVFF  4A,E0
3428:  MOVLW  1F
342A:  MOVWF  xE1
342C:  CALL   16AC
3430:  MOVFF  4B,E0
3434:  MOVLW  1F
3436:  MOVWF  xE1
3438:  CALL   16AC
343C:  MOVFF  4C,E0
3440:  MOVLW  1F
3442:  MOVWF  xE1
3444:  CALL   16AC
3448:  MOVLW  20
344A:  MOVWF  xF1
344C:  CALL   0BFA
3450:  MOVLW  20
3452:  MOVWF  xF1
3454:  CALL   0BFA
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3458:  MOVFF  2F,F2
345C:  MOVLW  04
345E:  MOVWF  xF3
3460:  CALL   0B92
....................          lcd_putc(t[2]); 
3464:  MOVFF  48,F1
3468:  CALL   0BFA
....................           
....................          if(unidad>11&&unidad<14){ 
346C:  MOVF   2F,W
346E:  SUBLW  0B
3470:  BC    3490
3472:  MOVF   2F,W
3474:  SUBLW  0D
3476:  BNC   3490
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3478:  MOVLW  01
347A:  SUBWF  2F,W
347C:  MOVWF  xE0
347E:  MOVWF  xF2
3480:  MOVLW  04
3482:  MOVWF  xF3
3484:  CALL   0B92
....................             lcd_putc(t[1]); 
3488:  MOVFF  47,F1
348C:  CALL   0BFA
....................          } 
....................           
....................          Cambio=OFF; 
3490:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
3492:  BSF    F92.5
3494:  BTFSC  F80.5
3496:  BRA    34CA
....................          delay_ms(20); 
3498:  MOVLW  14
349A:  MOVWF  xF7
349C:  CALL   0A5A
....................          if(UP){ 
34A0:  BSF    F92.5
34A2:  BTFSC  F80.5
34A4:  BRA    34C8
....................             if(Flanco == 0) { 
34A6:  BTFSC  29.3
34A8:  BRA    34C8
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
34AA:  MOVLW  0B
34AC:  SUBWF  2F,W
34AE:  CLRF   03
34B0:  ADDLW  49
34B2:  MOVWF  FE9
34B4:  MOVLW  00
34B6:  ADDWFC 03,W
34B8:  MOVWF  FEA
34BA:  INCF   FEF,F
34BC:  BSF    29.3
34BE:  MOVLW  1E
34C0:  MOVWF  xF7
34C2:  CALL   0A5A
34C6:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
34C8:  BRA    34CC
....................          Flanco = 0; 
34CA:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
34CC:  BSF    F96.0
34CE:  BTFSC  F84.0
34D0:  BRA    3504
....................          delay_ms(20); 
34D2:  MOVLW  14
34D4:  MOVWF  xF7
34D6:  CALL   0A5A
....................          if(DOWN){ 
34DA:  BSF    F96.0
34DC:  BTFSC  F84.0
34DE:  BRA    3502
....................             if(Flanco2 == 0) { 
34E0:  BTFSC  29.5
34E2:  BRA    3502
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
34E4:  MOVLW  0B
34E6:  SUBWF  2F,W
34E8:  CLRF   03
34EA:  ADDLW  49
34EC:  MOVWF  FE9
34EE:  MOVLW  00
34F0:  ADDWFC 03,W
34F2:  MOVWF  FEA
34F4:  DECF   FEF,F
34F6:  BSF    29.5
34F8:  MOVLW  1E
34FA:  MOVWF  xF7
34FC:  CALL   0A5A
3500:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3502:  BRA    3506
....................          Flanco2 = 0; 
3504:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3506:  BSF    F96.1
3508:  BTFSC  F84.1
350A:  BRA    3536
....................          delay_ms(20); 
350C:  MOVLW  14
350E:  MOVWF  xF7
3510:  CALL   0A5A
....................          if(RIGHT){ 
3514:  BSF    F96.1
3516:  BTFSC  F84.1
3518:  BRA    3534
....................             if(Flanco1 == 0) { 
351A:  BTFSC  29.4
351C:  BRA    3534
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
351E:  BSF    29.4
3520:  INCF   2F,F
3522:  MOVLW  1E
3524:  MOVWF  xF7
3526:  CALL   0A5A
352A:  MOVLW  0C
352C:  MOVWF  xF1
352E:  CALL   0BFA
3532:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3534:  BRA    3538
....................          Flanco1 = 0; 
3536:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3538:  BSF    F96.2
353A:  BTFSC  F84.2
353C:  BRA    3568
....................          delay_ms(150); 
353E:  MOVLW  96
3540:  MOVWF  xF7
3542:  CALL   0A5A
....................          if(IZQU){ 
3546:  BSF    F96.2
3548:  BTFSC  F84.2
354A:  BRA    3566
....................             if(Flanco3 == 0){ 
354C:  BTFSC  29.6
354E:  BRA    3566
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3550:  BSF    29.6
3552:  DECF   2F,F
3554:  MOVLW  1E
3556:  MOVWF  xF7
3558:  CALL   0A5A
355C:  MOVLW  0C
355E:  MOVWF  xF1
3560:  CALL   0BFA
3564:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3566:  BRA    356A
....................         Flanco3 = 0; 
3568:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
356A:  MOVLW  0B
356C:  SUBWF  2F,W
356E:  CLRF   03
3570:  ADDLW  49
3572:  MOVWF  FE9
3574:  MOVLW  00
3576:  ADDWFC 03,W
3578:  MOVWF  FEA
357A:  BTFSC  FEF.7
357C:  BRA    3580
357E:  BRA    3594
....................          clave[unidad-11]=9; 
3580:  MOVLW  0B
3582:  SUBWF  2F,W
3584:  CLRF   03
3586:  ADDLW  49
3588:  MOVWF  FE9
358A:  MOVLW  00
358C:  ADDWFC 03,W
358E:  MOVWF  FEA
3590:  MOVLW  09
3592:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3594:  MOVLW  0B
3596:  SUBWF  2F,W
3598:  CLRF   03
359A:  ADDLW  49
359C:  MOVWF  FE9
359E:  MOVLW  00
35A0:  ADDWFC 03,W
35A2:  MOVWF  FEA
35A4:  BTFSC  FEF.7
35A6:  BRA    35C0
35A8:  MOVF   FEF,W
35AA:  SUBLW  09
35AC:  BC    35C0
....................          clave[unidad-11]=0; 
35AE:  MOVLW  0B
35B0:  SUBWF  2F,W
35B2:  CLRF   03
35B4:  ADDLW  49
35B6:  MOVWF  FE9
35B8:  MOVLW  00
35BA:  ADDWFC 03,W
35BC:  MOVWF  FEA
35BE:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
35C0:  MOVF   2F,W
35C2:  SUBLW  0A
35C4:  BNC   35E6
....................          unidad=11; 
35C6:  MOVLW  0B
35C8:  MOVWF  2F
....................          Menu=1; 
35CA:  MOVLW  01
35CC:  MOVWF  2C
....................          paso=0; 
35CE:  CLRF   45
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
35D0:  CLRF   49
35D2:  CLRF   4A
35D4:  CLRF   4B
35D6:  CLRF   4C
35D8:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
35DA:  MOVLW  0B
35DC:  MOVWF  2F
35DE:  MOVLW  0C
35E0:  MOVWF  xF1
35E2:  CALL   0BFA
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
35E6:  MOVF   2F,W
35E8:  SUBLW  0E
35EA:  BTFSC  FD8.0
35EC:  BRA    3714
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
35EE:  MOVF   4D,W
35F0:  SUBWF  49,W
35F2:  BNZ   3690
35F4:  MOVF   4E,W
35F6:  SUBWF  4A,W
35F8:  BNZ   3690
35FA:  MOVF   4F,W
35FC:  SUBWF  4B,W
35FE:  BNZ   3690
3600:  MOVF   50,W
3602:  SUBWF  4C,W
3604:  BNZ   3690
....................             lcd_gotoxy(1,1); 
3606:  MOVLW  01
3608:  MOVWF  xF2
360A:  MOVWF  xF3
360C:  CALL   0B92
....................             printf(lcd_putc,"                    "); 
3610:  MOVLW  4C
3612:  MOVWF  FF6
3614:  MOVLW  06
3616:  MOVWF  FF7
3618:  CALL   0C58
....................             lcd_gotoxy(1,2); 
361C:  MOVLW  01
361E:  MOVWF  xF2
3620:  MOVLW  02
3622:  MOVWF  xF3
3624:  CALL   0B92
....................             printf(lcd_putc,"     Contraseña     "); 
3628:  MOVLW  62
362A:  MOVWF  FF6
362C:  MOVLW  06
362E:  MOVWF  FF7
3630:  CALL   0C58
....................             lcd_gotoxy(1,3); 
3634:  MOVLW  01
3636:  MOVWF  xF2
3638:  MOVLW  03
363A:  MOVWF  xF3
363C:  CALL   0B92
....................             printf(lcd_putc,"      Correcta      "); 
3640:  MOVLW  78
3642:  MOVWF  FF6
3644:  MOVLW  06
3646:  MOVWF  FF7
3648:  CALL   0C58
....................             lcd_gotoxy(1,4); 
364C:  MOVLW  01
364E:  MOVWF  xF2
3650:  MOVLW  04
3652:  MOVWF  xF3
3654:  CALL   0B92
....................             printf(lcd_putc,"                    "); 
3658:  MOVLW  8E
365A:  MOVWF  FF6
365C:  MOVLW  06
365E:  MOVWF  FF7
3660:  CALL   0C58
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
3664:  MOVLW  02
3666:  MOVWF  xE0
3668:  MOVLW  FA
366A:  MOVWF  xF7
366C:  CALL   0A5A
3670:  DECFSZ xE0,F
3672:  BRA    3668
3674:  MOVLW  3D
3676:  MOVWF  2C
3678:  MOVLW  0B
367A:  MOVWF  2F
367C:  MOVLW  0C
367E:  MOVWF  xF1
3680:  CALL   0BFA
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3684:  CLRF   49
3686:  CLRF   4A
3688:  CLRF   4B
368A:  CLRF   4C
368C:  BSF    2B.3
....................          }else{ 
368E:  BRA    3714
....................             lcd_gotoxy(1,1); 
3690:  MOVLW  01
3692:  MOVWF  xF2
3694:  MOVWF  xF3
3696:  CALL   0B92
....................             printf(lcd_putc,"                    "); 
369A:  MOVLW  A4
369C:  MOVWF  FF6
369E:  MOVLW  06
36A0:  MOVWF  FF7
36A2:  CALL   0C58
....................             lcd_gotoxy(1,2); 
36A6:  MOVLW  01
36A8:  MOVWF  xF2
36AA:  MOVLW  02
36AC:  MOVWF  xF3
36AE:  CALL   0B92
....................             printf(lcd_putc,"     Contraseña     "); 
36B2:  MOVLW  BA
36B4:  MOVWF  FF6
36B6:  MOVLW  06
36B8:  MOVWF  FF7
36BA:  CALL   0C58
....................             lcd_gotoxy(1,3); 
36BE:  MOVLW  01
36C0:  MOVWF  xF2
36C2:  MOVLW  03
36C4:  MOVWF  xF3
36C6:  CALL   0B92
....................             printf(lcd_putc,"     Incorrecta     "); 
36CA:  MOVLW  D0
36CC:  MOVWF  FF6
36CE:  MOVLW  06
36D0:  MOVWF  FF7
36D2:  CALL   0C58
....................             lcd_gotoxy(1,4); 
36D6:  MOVLW  01
36D8:  MOVWF  xF2
36DA:  MOVLW  04
36DC:  MOVWF  xF3
36DE:  CALL   0B92
....................             printf(lcd_putc,"                    "); 
36E2:  MOVLW  E6
36E4:  MOVWF  FF6
36E6:  MOVLW  06
36E8:  MOVWF  FF7
36EA:  CALL   0C58
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
36EE:  MOVLW  02
36F0:  MOVWF  xE0
36F2:  MOVLW  FA
36F4:  MOVWF  xF7
36F6:  CALL   0A5A
36FA:  DECFSZ xE0,F
36FC:  BRA    36F2
36FE:  MOVLW  0B
3700:  MOVWF  2F
3702:  MOVLW  0C
3704:  MOVWF  xF1
3706:  CALL   0BFA
370A:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
370C:  CLRF   49
370E:  CLRF   4A
3710:  CLRF   4B
3712:  CLRF   4C
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3714:  MOVF   2C,W
3716:  SUBLW  3D
3718:  BTFSS  FD8.2
371A:  BRA    3AAC
....................       EliminaRuido(); 
371C:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3720:  MOVLW  01
3722:  MOVWF  xF2
3724:  MOVWF  xF3
3726:  CALL   0B92
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
372A:  MOVLW  FC
372C:  MOVWF  FF6
372E:  MOVLW  06
3730:  MOVWF  FF7
3732:  CALL   0C58
....................          lcd_gotoxy(1,2); 
3736:  MOVLW  01
3738:  MOVWF  xF2
373A:  MOVLW  02
373C:  MOVWF  xF3
373E:  CALL   0B92
....................          printf(lcd_putc,"     Contraseña     "); 
3742:  MOVLW  12
3744:  MOVWF  FF6
3746:  MOVLW  07
3748:  MOVWF  FF7
374A:  CALL   0C58
....................          lcd_gotoxy(1,3); 
374E:  MOVLW  01
3750:  MOVWF  xF2
3752:  MOVLW  03
3754:  MOVWF  xF3
3756:  CALL   0B92
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
375A:  MOVLW  28
375C:  MOVWF  FF6
375E:  MOVLW  07
3760:  MOVWF  FF7
3762:  MOVLW  0A
3764:  MOVWF  xE4
3766:  CALL   1622
376A:  MOVFF  49,E0
376E:  MOVLW  1F
3770:  MOVWF  xE1
3772:  CALL   16AC
3776:  MOVFF  4A,E0
377A:  MOVLW  1F
377C:  MOVWF  xE1
377E:  CALL   16AC
3782:  MOVFF  4B,E0
3786:  MOVLW  1F
3788:  MOVWF  xE1
378A:  CALL   16AC
378E:  MOVFF  4C,E0
3792:  MOVLW  1F
3794:  MOVWF  xE1
3796:  CALL   16AC
379A:  MOVLW  20
379C:  MOVWF  xF1
379E:  CALL   0BFA
37A2:  MOVLW  20
37A4:  MOVWF  xF1
37A6:  CALL   0BFA
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
37AA:  MOVFF  2F,F2
37AE:  MOVLW  04
37B0:  MOVWF  xF3
37B2:  CALL   0B92
....................          lcd_putc(t[2]); 
37B6:  MOVFF  48,F1
37BA:  CALL   0BFA
....................           
....................          if(unidad>11&&unidad<14){ 
37BE:  MOVF   2F,W
37C0:  SUBLW  0B
37C2:  BC    37E2
37C4:  MOVF   2F,W
37C6:  SUBLW  0D
37C8:  BNC   37E2
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
37CA:  MOVLW  01
37CC:  SUBWF  2F,W
37CE:  MOVWF  xE0
37D0:  MOVWF  xF2
37D2:  MOVLW  04
37D4:  MOVWF  xF3
37D6:  CALL   0B92
....................             lcd_putc(t[1]); 
37DA:  MOVFF  47,F1
37DE:  CALL   0BFA
....................          } 
....................           
....................          Cambio=OFF; 
37E2:  BCF    2B.3
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
37E4:  BSF    F92.5
37E6:  BTFSC  F80.5
37E8:  BRA    381C
....................          delay_ms(20); 
37EA:  MOVLW  14
37EC:  MOVWF  xF7
37EE:  CALL   0A5A
....................          if(UP){ 
37F2:  BSF    F92.5
37F4:  BTFSC  F80.5
37F6:  BRA    381A
....................             if(Flanco == 0) { 
37F8:  BTFSC  29.3
37FA:  BRA    381A
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
37FC:  MOVLW  0B
37FE:  SUBWF  2F,W
3800:  CLRF   03
3802:  ADDLW  49
3804:  MOVWF  FE9
3806:  MOVLW  00
3808:  ADDWFC 03,W
380A:  MOVWF  FEA
380C:  INCF   FEF,F
380E:  BSF    29.3
3810:  MOVLW  1E
3812:  MOVWF  xF7
3814:  CALL   0A5A
3818:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
381A:  BRA    381E
....................          Flanco = 0; 
381C:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
381E:  BSF    F96.0
3820:  BTFSC  F84.0
3822:  BRA    3856
....................          delay_ms(20); 
3824:  MOVLW  14
3826:  MOVWF  xF7
3828:  CALL   0A5A
....................          if(DOWN){ 
382C:  BSF    F96.0
382E:  BTFSC  F84.0
3830:  BRA    3854
....................             if(Flanco2 == 0) { 
3832:  BTFSC  29.5
3834:  BRA    3854
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3836:  MOVLW  0B
3838:  SUBWF  2F,W
383A:  CLRF   03
383C:  ADDLW  49
383E:  MOVWF  FE9
3840:  MOVLW  00
3842:  ADDWFC 03,W
3844:  MOVWF  FEA
3846:  DECF   FEF,F
3848:  BSF    29.5
384A:  MOVLW  1E
384C:  MOVWF  xF7
384E:  CALL   0A5A
3852:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3854:  BRA    3858
....................          Flanco2 = 0; 
3856:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3858:  BSF    F96.1
385A:  BTFSC  F84.1
385C:  BRA    3880
....................          if(RIGHT){ 
385E:  BSF    F96.1
3860:  BTFSC  F84.1
3862:  BRA    387E
....................             if(Flanco1 == 0) { 
3864:  BTFSC  29.4
3866:  BRA    387E
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3868:  BSF    29.4
386A:  INCF   2F,F
386C:  MOVLW  1E
386E:  MOVWF  xF7
3870:  CALL   0A5A
3874:  MOVLW  0C
3876:  MOVWF  xF1
3878:  CALL   0BFA
387C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
387E:  BRA    3882
....................          Flanco1 = 0; 
3880:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3882:  BSF    F96.2
3884:  BTFSC  F84.2
3886:  BRA    38B2
....................          delay_ms(150); 
3888:  MOVLW  96
388A:  MOVWF  xF7
388C:  CALL   0A5A
....................          if(IZQU){ 
3890:  BSF    F96.2
3892:  BTFSC  F84.2
3894:  BRA    38B0
....................             if(Flanco3 == 0){ 
3896:  BTFSC  29.6
3898:  BRA    38B0
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
389A:  BSF    29.6
389C:  DECF   2F,F
389E:  MOVLW  1E
38A0:  MOVWF  xF7
38A2:  CALL   0A5A
38A6:  MOVLW  0C
38A8:  MOVWF  xF1
38AA:  CALL   0BFA
38AE:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
38B0:  BRA    38B4
....................         Flanco3 = 0; 
38B2:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
38B4:  MOVLW  0B
38B6:  SUBWF  2F,W
38B8:  CLRF   03
38BA:  ADDLW  49
38BC:  MOVWF  FE9
38BE:  MOVLW  00
38C0:  ADDWFC 03,W
38C2:  MOVWF  FEA
38C4:  BTFSC  FEF.7
38C6:  BRA    38CA
38C8:  BRA    38DE
....................          clave[unidad-11]=9; 
38CA:  MOVLW  0B
38CC:  SUBWF  2F,W
38CE:  CLRF   03
38D0:  ADDLW  49
38D2:  MOVWF  FE9
38D4:  MOVLW  00
38D6:  ADDWFC 03,W
38D8:  MOVWF  FEA
38DA:  MOVLW  09
38DC:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
38DE:  MOVLW  0B
38E0:  SUBWF  2F,W
38E2:  CLRF   03
38E4:  ADDLW  49
38E6:  MOVWF  FE9
38E8:  MOVLW  00
38EA:  ADDWFC 03,W
38EC:  MOVWF  FEA
38EE:  BTFSC  FEF.7
38F0:  BRA    390A
38F2:  MOVF   FEF,W
38F4:  SUBLW  09
38F6:  BC    390A
....................          clave[unidad-11]=0; 
38F8:  MOVLW  0B
38FA:  SUBWF  2F,W
38FC:  CLRF   03
38FE:  ADDLW  49
3900:  MOVWF  FE9
3902:  MOVLW  00
3904:  ADDWFC 03,W
3906:  MOVWF  FEA
3908:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
390A:  MOVF   2F,W
390C:  SUBLW  0A
390E:  BNC   392E
....................          unidad=11; 
3910:  MOVLW  0B
3912:  MOVWF  2F
....................          Menu=1; 
3914:  MOVLW  01
3916:  MOVWF  2C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3918:  CLRF   49
391A:  CLRF   4A
391C:  CLRF   4B
391E:  CLRF   4C
3920:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
3922:  MOVLW  0B
3924:  MOVWF  2F
3926:  MOVLW  0C
3928:  MOVWF  xF1
392A:  CALL   0BFA
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
392E:  MOVF   2F,W
3930:  SUBLW  0E
3932:  BTFSC  FD8.0
3934:  BRA    3AAC
....................          lcd_gotoxy(1,1); 
3936:  MOVLW  01
3938:  MOVWF  xF2
393A:  MOVWF  xF3
393C:  CALL   0B92
....................          printf(lcd_putc,"                    "); 
3940:  MOVLW  3E
3942:  MOVWF  FF6
3944:  MOVLW  07
3946:  MOVWF  FF7
3948:  CALL   0C58
....................          lcd_gotoxy(1,2); 
394C:  MOVLW  01
394E:  MOVWF  xF2
3950:  MOVLW  02
3952:  MOVWF  xF3
3954:  CALL   0B92
....................          printf(lcd_putc,"     Contraseña     "); 
3958:  MOVLW  54
395A:  MOVWF  FF6
395C:  MOVLW  07
395E:  MOVWF  FF7
3960:  CALL   0C58
....................          lcd_gotoxy(1,3); 
3964:  MOVLW  01
3966:  MOVWF  xF2
3968:  MOVLW  03
396A:  MOVWF  xF3
396C:  CALL   0B92
....................          printf(lcd_putc,"     Almacenada     "); 
3970:  MOVLW  6A
3972:  MOVWF  FF6
3974:  MOVLW  07
3976:  MOVWF  FF7
3978:  CALL   0C58
....................          lcd_gotoxy(1,4); 
397C:  MOVLW  01
397E:  MOVWF  xF2
3980:  MOVLW  04
3982:  MOVWF  xF3
3984:  CALL   0B92
....................          printf(lcd_putc,"                    "); 
3988:  MOVLW  80
398A:  MOVWF  FF6
398C:  MOVLW  07
398E:  MOVWF  FF7
3990:  CALL   0C58
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
3994:  CLRF   FA9
3996:  MOVFF  49,FA8
399A:  BCF    FA6.6
399C:  BCF    FA6.7
399E:  BSF    FA6.2
39A0:  MOVF   FF2,W
39A2:  MOVWF  00
39A4:  BCF    FF2.6
39A6:  BCF    FF2.7
39A8:  MOVLB  F
39AA:  MOVLW  55
39AC:  MOVWF  FA7
39AE:  MOVLW  AA
39B0:  MOVWF  FA7
39B2:  BSF    FA6.1
39B4:  BTFSC  FA6.1
39B6:  BRA    39B4
39B8:  BCF    FA6.2
39BA:  MOVF   00,W
39BC:  IORWF  FF2,F
39BE:  MOVLW  14
39C0:  MOVLB  0
39C2:  MOVWF  xF7
39C4:  CALL   0A5A
39C8:  MOVLW  01
39CA:  MOVWF  FA9
39CC:  MOVFF  4A,FA8
39D0:  BCF    FA6.6
39D2:  BCF    FA6.7
39D4:  BSF    FA6.2
39D6:  MOVF   FF2,W
39D8:  MOVWF  00
39DA:  BCF    FF2.6
39DC:  BCF    FF2.7
39DE:  MOVLB  F
39E0:  MOVLW  55
39E2:  MOVWF  FA7
39E4:  MOVLW  AA
39E6:  MOVWF  FA7
39E8:  BSF    FA6.1
39EA:  BTFSC  FA6.1
39EC:  BRA    39EA
39EE:  BCF    FA6.2
39F0:  MOVF   00,W
39F2:  IORWF  FF2,F
39F4:  MOVLW  14
39F6:  MOVLB  0
39F8:  MOVWF  xF7
39FA:  CALL   0A5A
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
39FE:  MOVLW  02
3A00:  MOVWF  FA9
3A02:  MOVFF  4B,FA8
3A06:  BCF    FA6.6
3A08:  BCF    FA6.7
3A0A:  BSF    FA6.2
3A0C:  MOVF   FF2,W
3A0E:  MOVWF  00
3A10:  BCF    FF2.6
3A12:  BCF    FF2.7
3A14:  MOVLB  F
3A16:  MOVLW  55
3A18:  MOVWF  FA7
3A1A:  MOVLW  AA
3A1C:  MOVWF  FA7
3A1E:  BSF    FA6.1
3A20:  BTFSC  FA6.1
3A22:  BRA    3A20
3A24:  BCF    FA6.2
3A26:  MOVF   00,W
3A28:  IORWF  FF2,F
3A2A:  MOVLW  14
3A2C:  MOVLB  0
3A2E:  MOVWF  xF7
3A30:  CALL   0A5A
3A34:  MOVLW  03
3A36:  MOVWF  FA9
3A38:  MOVFF  4C,FA8
3A3C:  BCF    FA6.6
3A3E:  BCF    FA6.7
3A40:  BSF    FA6.2
3A42:  MOVF   FF2,W
3A44:  MOVWF  00
3A46:  BCF    FF2.6
3A48:  BCF    FF2.7
3A4A:  MOVLB  F
3A4C:  MOVLW  55
3A4E:  MOVWF  FA7
3A50:  MOVLW  AA
3A52:  MOVWF  FA7
3A54:  BSF    FA6.1
3A56:  BTFSC  FA6.1
3A58:  BRA    3A56
3A5A:  BCF    FA6.2
3A5C:  MOVF   00,W
3A5E:  IORWF  FF2,F
3A60:  MOVLW  14
3A62:  MOVLB  0
3A64:  MOVWF  xF7
3A66:  CALL   0A5A
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3A6A:  MOVLW  02
3A6C:  MOVWF  xE0
3A6E:  MOVLW  FA
3A70:  MOVWF  xF7
3A72:  CALL   0A5A
3A76:  DECFSZ xE0,F
3A78:  BRA    3A6E
3A7A:  MOVLW  01
3A7C:  MOVWF  2C
3A7E:  CLRF   45
3A80:  MOVLW  02
3A82:  MOVWF  30
3A84:  MOVWF  32
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3A86:  MOVFF  49,4D
3A8A:  MOVFF  4A,4E
3A8E:  MOVFF  4B,4F
3A92:  MOVFF  4C,50
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3A96:  CLRF   49
3A98:  CLRF   4A
3A9A:  CLRF   4B
3A9C:  CLRF   4C
3A9E:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f");          
3AA0:  MOVLW  0B
3AA2:  MOVWF  2F
3AA4:  MOVLW  0C
3AA6:  MOVWF  xF1
3AA8:  CALL   0BFA
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3AAC:  MOVF   2C,W
3AAE:  SUBLW  04
3AB0:  BTFSS  FD8.2
3AB2:  BRA    3CCE
....................    EliminaRuido(); 
3AB4:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
3AB8:  MOVLW  01
3ABA:  MOVWF  xF2
3ABC:  MOVWF  xF3
3ABE:  CALL   0B92
....................       printf(lcd_putc,"  Duracion Actual   "); 
3AC2:  MOVLW  96
3AC4:  MOVWF  FF6
3AC6:  MOVLW  07
3AC8:  MOVWF  FF7
3ACA:  CALL   0C58
....................       lcd_gotoxy(1,2); 
3ACE:  MOVLW  01
3AD0:  MOVWF  xF2
3AD2:  MOVLW  02
3AD4:  MOVWF  xF3
3AD6:  CALL   0B92
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
3ADA:  MOVLW  AC
3ADC:  MOVWF  FF6
3ADE:  MOVLW  07
3AE0:  MOVWF  FF7
3AE2:  MOVLW  0B
3AE4:  MOVWF  xE4
3AE6:  CALL   1622
3AEA:  MOVLW  08
3AEC:  MOVWF  FE9
3AEE:  MOVFF  5A,E1
3AF2:  MOVFF  59,E0
3AF6:  GOTO   18BC
3AFA:  MOVLW  20
3AFC:  MOVWF  xF1
3AFE:  CALL   0BFA
3B02:  MOVLW  20
3B04:  MOVWF  xF1
3B06:  CALL   0BFA
3B0A:  MOVLW  20
3B0C:  MOVWF  xF1
3B0E:  CALL   0BFA
....................       lcd_gotoxy(1,4); 
3B12:  MOVLW  01
3B14:  MOVWF  xF2
3B16:  MOVLW  04
3B18:  MOVWF  xF3
3B1A:  CALL   0B92
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3B1E:  MOVLW  C0
3B20:  MOVWF  FF6
3B22:  MOVLW  07
3B24:  MOVWF  FF7
3B26:  CALL   0C58
....................        
....................       Cambio=OFF; 
3B2A:  BCF    2B.3
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3B2C:  BSF    F92.5
3B2E:  BTFSC  F80.5
3B30:  BRA    3C8A
3B32:  BSF    F96.1
3B34:  BTFSC  F84.1
3B36:  BRA    3C8A
....................          delay_ms(20); 
3B38:  MOVLW  14
3B3A:  MOVWF  xF7
3B3C:  CALL   0A5A
....................          if(UP && RIGHT){ 
3B40:  BSF    F92.5
3B42:  BTFSC  F80.5
3B44:  BRA    3C8A
3B46:  BSF    F96.1
3B48:  BTFSC  F84.1
3B4A:  BRA    3C8A
....................             delay_ms(200); 
3B4C:  MOVLW  C8
3B4E:  MOVWF  xF7
3B50:  CALL   0A5A
....................             printf(lcd_putc,"\f"); 
3B54:  MOVLW  0C
3B56:  MOVWF  xF1
3B58:  CALL   0BFA
....................             lcd_gotoxy(1,2); 
3B5C:  MOVLW  01
3B5E:  MOVWF  xF2
3B60:  MOVLW  02
3B62:  MOVWF  xF3
3B64:  CALL   0B92
....................             printf(lcd_putc," Reset de tiempo "); 
3B68:  MOVLW  D6
3B6A:  MOVWF  FF6
3B6C:  MOVLW  07
3B6E:  MOVWF  FF7
3B70:  CALL   0C58
....................             lcd_gotoxy(1,3); 
3B74:  MOVLW  01
3B76:  MOVWF  xF2
3B78:  MOVLW  03
3B7A:  MOVWF  xF3
3B7C:  CALL   0B92
....................             printf(lcd_putc,"     Exitoso     "); 
3B80:  MOVLW  E8
3B82:  MOVWF  FF6
3B84:  MOVLW  07
3B86:  MOVWF  FF7
3B88:  CALL   0C58
....................             write_eeprom(7,0); 
3B8C:  MOVLW  07
3B8E:  MOVWF  FA9
3B90:  CLRF   FA8
3B92:  BCF    FA6.6
3B94:  BCF    FA6.7
3B96:  BSF    FA6.2
3B98:  MOVF   FF2,W
3B9A:  MOVWF  00
3B9C:  BCF    FF2.6
3B9E:  BCF    FF2.7
3BA0:  MOVLB  F
3BA2:  MOVLW  55
3BA4:  MOVWF  FA7
3BA6:  MOVLW  AA
3BA8:  MOVWF  FA7
3BAA:  BSF    FA6.1
3BAC:  BTFSC  FA6.1
3BAE:  BRA    3BAC
3BB0:  BCF    FA6.2
3BB2:  MOVF   00,W
3BB4:  IORWF  FF2,F
....................             delay_ms(20); 
3BB6:  MOVLW  14
3BB8:  MOVLB  0
3BBA:  MOVWF  xF7
3BBC:  CALL   0A5A
....................             write_eeprom(8,0); 
3BC0:  MOVLW  08
3BC2:  MOVWF  FA9
3BC4:  CLRF   FA8
3BC6:  BCF    FA6.6
3BC8:  BCF    FA6.7
3BCA:  BSF    FA6.2
3BCC:  MOVF   FF2,W
3BCE:  MOVWF  00
3BD0:  BCF    FF2.6
3BD2:  BCF    FF2.7
3BD4:  MOVLB  F
3BD6:  MOVLW  55
3BD8:  MOVWF  FA7
3BDA:  MOVLW  AA
3BDC:  MOVWF  FA7
3BDE:  BSF    FA6.1
3BE0:  BTFSC  FA6.1
3BE2:  BRA    3BE0
3BE4:  BCF    FA6.2
3BE6:  MOVF   00,W
3BE8:  IORWF  FF2,F
....................             delay_ms(20); 
3BEA:  MOVLW  14
3BEC:  MOVLB  0
3BEE:  MOVWF  xF7
3BF0:  CALL   0A5A
....................             write_eeprom(9,0); 
3BF4:  MOVLW  09
3BF6:  MOVWF  FA9
3BF8:  CLRF   FA8
3BFA:  BCF    FA6.6
3BFC:  BCF    FA6.7
3BFE:  BSF    FA6.2
3C00:  MOVF   FF2,W
3C02:  MOVWF  00
3C04:  BCF    FF2.6
3C06:  BCF    FF2.7
3C08:  MOVLB  F
3C0A:  MOVLW  55
3C0C:  MOVWF  FA7
3C0E:  MOVLW  AA
3C10:  MOVWF  FA7
3C12:  BSF    FA6.1
3C14:  BTFSC  FA6.1
3C16:  BRA    3C14
3C18:  BCF    FA6.2
3C1A:  MOVF   00,W
3C1C:  IORWF  FF2,F
....................             delay_ms(20); 
3C1E:  MOVLW  14
3C20:  MOVLB  0
3C22:  MOVWF  xF7
3C24:  CALL   0A5A
....................             write_eeprom(10,0); 
3C28:  MOVLW  0A
3C2A:  MOVWF  FA9
3C2C:  CLRF   FA8
3C2E:  BCF    FA6.6
3C30:  BCF    FA6.7
3C32:  BSF    FA6.2
3C34:  MOVF   FF2,W
3C36:  MOVWF  00
3C38:  BCF    FF2.6
3C3A:  BCF    FF2.7
3C3C:  MOVLB  F
3C3E:  MOVLW  55
3C40:  MOVWF  FA7
3C42:  MOVLW  AA
3C44:  MOVWF  FA7
3C46:  BSF    FA6.1
3C48:  BTFSC  FA6.1
3C4A:  BRA    3C48
3C4C:  BCF    FA6.2
3C4E:  MOVF   00,W
3C50:  IORWF  FF2,F
....................             delay_ms(700); 
3C52:  MOVLW  04
3C54:  MOVLB  0
3C56:  MOVWF  xE0
3C58:  MOVLW  AF
3C5A:  MOVWF  xF7
3C5C:  CALL   0A5A
3C60:  DECFSZ xE0,F
3C62:  BRA    3C58
....................             segundos=0;minutos=0;horas=0; 
3C64:  CLRF   35
3C66:  CLRF   36
3C68:  CLRF   5A
3C6A:  CLRF   59
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3C6C:  MOVLW  1E
3C6E:  MOVWF  xF7
3C70:  CALL   0A5A
3C74:  MOVLW  01
3C76:  MOVWF  2C
3C78:  CLRF   45
3C7A:  MOVLW  02
3C7C:  MOVWF  30
3C7E:  MOVWF  32
3C80:  MOVLW  0C
3C82:  MOVWF  xF1
3C84:  CALL   0BFA
....................             Cambio=ON; 
3C88:  BSF    2B.3
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3C8A:  BSF    F96.2
3C8C:  BTFSC  F84.2
3C8E:  BRA    3CCC
....................          delay_ms(20); 
3C90:  MOVLW  14
3C92:  MOVWF  xF7
3C94:  CALL   0A5A
....................          if(IZQU){ 
3C98:  BSF    F96.2
3C9A:  BTFSC  F84.2
3C9C:  BRA    3CCA
....................             if(Flanco3 == 0){ 
3C9E:  BTFSC  29.6
3CA0:  BRA    3CCA
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3CA2:  BSF    29.6
3CA4:  MOVLW  02
3CA6:  MOVWF  xE0
3CA8:  MOVLW  FA
3CAA:  MOVWF  xF7
3CAC:  CALL   0A5A
3CB0:  DECFSZ xE0,F
3CB2:  BRA    3CA8
3CB4:  MOVLW  01
3CB6:  MOVWF  2C
3CB8:  CLRF   45
3CBA:  MOVLW  02
3CBC:  MOVWF  30
3CBE:  MOVWF  32
3CC0:  MOVLW  0C
3CC2:  MOVWF  xF1
3CC4:  CALL   0BFA
3CC8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3CCA:  BRA    3CCE
....................          Flanco3 = 0; 
3CCC:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3CCE:  MOVF   2C,W
3CD0:  SUBLW  05
3CD2:  BTFSS  FD8.2
3CD4:  BRA    3F2E
....................       EliminaRuido(); 
3CD6:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3CDA:  MOVLW  01
3CDC:  MOVWF  xF2
3CDE:  MOVWF  xF3
3CE0:  CALL   0B92
....................          printf(lcd_putc,"  Zero Point Config "); 
3CE4:  MOVLW  FA
3CE6:  MOVWF  FF6
3CE8:  MOVLW  07
3CEA:  MOVWF  FF7
3CEC:  CALL   0C58
....................          lcd_gotoxy(1,2); 
3CF0:  MOVLW  01
3CF2:  MOVWF  xF2
3CF4:  MOVLW  02
3CF6:  MOVWF  xF3
3CF8:  CALL   0B92
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3CFC:  MOVLW  05
3CFE:  MOVWF  xE0
3D00:  CALL   1DF2
3D04:  MOVFF  00,E0
3D08:  MOVFF  01,E1
3D0C:  MOVFF  02,E2
3D10:  MOVFF  03,E3
3D14:  MOVFF  03,F7
3D18:  MOVFF  02,F6
3D1C:  MOVFF  01,F5
3D20:  MOVFF  00,F4
3D24:  MOVLW  D7
3D26:  MOVWF  xFB
3D28:  MOVLW  A3
3D2A:  MOVWF  xFA
3D2C:  CLRF   xF9
3D2E:  MOVLW  81
3D30:  MOVWF  xF8
3D32:  CALL   1F88
3D36:  MOVFF  00,E0
3D3A:  MOVFF  01,E1
3D3E:  MOVFF  02,E2
3D42:  MOVFF  03,E3
3D46:  MOVLW  10
3D48:  MOVWF  FF6
3D4A:  MOVLW  08
3D4C:  MOVWF  FF7
3D4E:  MOVLW  09
3D50:  MOVWF  xE4
3D52:  CALL   1622
3D56:  MOVLW  02
3D58:  MOVWF  FE9
3D5A:  MOVFF  E3,E7
3D5E:  MOVFF  E2,E6
3D62:  MOVFF  E1,E5
3D66:  MOVFF  E0,E4
3D6A:  MOVWF  xE8
3D6C:  CALL   2134
3D70:  MOVLW  1E
3D72:  MOVWF  FF6
3D74:  MOVLW  08
3D76:  MOVWF  FF7
3D78:  MOVLW  07
3D7A:  MOVWF  xE4
3D7C:  CALL   1622
....................          lcd_gotoxy(1,3); 
3D80:  MOVLW  01
3D82:  MOVWF  xF2
3D84:  MOVLW  03
3D86:  MOVWF  xF3
3D88:  CALL   0B92
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3D8C:  CLRF   xE5
3D8E:  CALL   1972
3D92:  MOVFF  00,E0
3D96:  MOVFF  01,E1
3D9A:  MOVFF  02,E2
3D9E:  MOVFF  03,E3
3DA2:  MOVLW  26
3DA4:  MOVWF  FF6
3DA6:  MOVLW  08
3DA8:  MOVWF  FF7
3DAA:  MOVLW  08
3DAC:  MOVWF  xE4
3DAE:  CALL   1622
3DB2:  MOVLW  01
3DB4:  MOVWF  FE9
3DB6:  MOVFF  E3,E7
3DBA:  MOVFF  E2,E6
3DBE:  MOVFF  E1,E5
3DC2:  MOVFF  E0,E4
3DC6:  CLRF   xE8
3DC8:  CALL   2134
....................          lcd_gotoxy(1,4); 
3DCC:  MOVLW  01
3DCE:  MOVWF  xF2
3DD0:  MOVLW  04
3DD2:  MOVWF  xF3
3DD4:  CALL   0B92
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
3DD8:  MOVLW  34
3DDA:  MOVWF  FF6
3DDC:  MOVLW  08
3DDE:  MOVWF  FF7
3DE0:  MOVLW  07
3DE2:  MOVWF  xE4
3DE4:  CALL   1622
3DE8:  MOVLW  01
3DEA:  MOVWF  FE9
3DEC:  MOVFF  C0,E7
3DF0:  MOVFF  BF,E6
3DF4:  MOVFF  BE,E5
3DF8:  MOVFF  BD,E4
3DFC:  CLRF   xE8
3DFE:  CALL   2134
....................           
....................          Cambio=OFF; 
3E02:  BCF    2B.3
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
3E04:  BSF    F96.1
3E06:  BTFSC  F84.1
3E08:  BRA    3EEE
....................          delay_ms(20); 
3E0A:  MOVLW  14
3E0C:  MOVWF  xF7
3E0E:  CALL   0A5A
....................          if(RIGHT){ 
3E12:  BSF    F96.1
3E14:  BTFSC  F84.1
3E16:  BRA    3EEC
....................             if(Flanco1 == 0){ 
3E18:  BTFSC  29.4
3E1A:  BRA    3EEC
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3E1C:  MOVLW  01
3E1E:  MOVWF  2C
3E20:  CLRF   45
3E22:  MOVLW  02
3E24:  MOVWF  30
3E26:  MOVWF  32
3E28:  MOVLW  0B
3E2A:  MOVWF  2F
3E2C:  MOVLW  02
3E2E:  MOVWF  xE0
3E30:  MOVLW  FA
3E32:  MOVWF  xF7
3E34:  CALL   0A5A
3E38:  DECFSZ xE0,F
3E3A:  BRA    3E30
3E3C:  MOVLW  0C
3E3E:  MOVWF  xF1
3E40:  CALL   0BFA
....................                G=sensores(0); 
3E44:  CLRF   xE5
3E46:  CALL   1972
3E4A:  MOVFF  03,C0
3E4E:  MOVFF  02,BF
3E52:  MOVFF  01,BE
3E56:  MOVFF  00,BD
....................                G16=(int16)G; 
3E5A:  MOVFF  C0,F7
3E5E:  MOVFF  BF,F6
3E62:  MOVFF  BE,F5
3E66:  MOVFF  BD,F4
3E6A:  CALL   22BA
3E6E:  MOVFF  02,5C
3E72:  MOVFF  01,5B
....................                G_l=G16; G_h=(G16>>8); 
3E76:  MOVFF  5B,39
3E7A:  MOVFF  5C,3A
....................                 
....................                write_eeprom(11,G_l); 
3E7E:  MOVLW  0B
3E80:  MOVWF  FA9
3E82:  MOVFF  39,FA8
3E86:  BCF    FA6.6
3E88:  BCF    FA6.7
3E8A:  BSF    FA6.2
3E8C:  MOVF   FF2,W
3E8E:  MOVWF  00
3E90:  BCF    FF2.6
3E92:  BCF    FF2.7
3E94:  MOVLB  F
3E96:  MOVLW  55
3E98:  MOVWF  FA7
3E9A:  MOVLW  AA
3E9C:  MOVWF  FA7
3E9E:  BSF    FA6.1
3EA0:  BTFSC  FA6.1
3EA2:  BRA    3EA0
3EA4:  BCF    FA6.2
3EA6:  MOVF   00,W
3EA8:  IORWF  FF2,F
....................                delay_ms(20); 
3EAA:  MOVLW  14
3EAC:  MOVLB  0
3EAE:  MOVWF  xF7
3EB0:  CALL   0A5A
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
3EB4:  MOVLW  0C
3EB6:  MOVWF  FA9
3EB8:  MOVFF  3A,FA8
3EBC:  BCF    FA6.6
3EBE:  BCF    FA6.7
3EC0:  BSF    FA6.2
3EC2:  MOVF   FF2,W
3EC4:  MOVWF  00
3EC6:  BCF    FF2.6
3EC8:  BCF    FF2.7
3ECA:  MOVLB  F
3ECC:  MOVLW  55
3ECE:  MOVWF  FA7
3ED0:  MOVLW  AA
3ED2:  MOVWF  FA7
3ED4:  BSF    FA6.1
3ED6:  BTFSC  FA6.1
3ED8:  BRA    3ED6
3EDA:  BCF    FA6.2
3EDC:  MOVF   00,W
3EDE:  IORWF  FF2,F
....................                delay_ms(20); 
3EE0:  MOVLW  14
3EE2:  MOVLB  0
3EE4:  MOVWF  xF7
3EE6:  CALL   0A5A
....................                Cambio=ON; 
3EEA:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3EEC:  BRA    3EF0
....................          Flanco1 = 0; 
3EEE:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3EF0:  BSF    F96.2
3EF2:  BTFSC  F84.2
3EF4:  BRA    3F2C
....................          delay_ms(20); 
3EF6:  MOVLW  14
3EF8:  MOVWF  xF7
3EFA:  CALL   0A5A
....................          if(IZQU){ 
3EFE:  BSF    F96.2
3F00:  BTFSC  F84.2
3F02:  BRA    3F2A
....................             if(Flanco3 == 0){ 
3F04:  BTFSC  29.6
3F06:  BRA    3F2A
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3F08:  MOVLW  01
3F0A:  MOVWF  2C
3F0C:  CLRF   45
3F0E:  MOVLW  02
3F10:  MOVWF  30
3F12:  MOVWF  32
3F14:  MOVLW  0B
3F16:  MOVWF  2F
3F18:  MOVLW  1E
3F1A:  MOVWF  xF7
3F1C:  CALL   0A5A
3F20:  MOVLW  0C
3F22:  MOVWF  xF1
3F24:  CALL   0BFA
....................                Cambio=ON; 
3F28:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3F2A:  BRA    3F2E
....................          Flanco3 = 0; 
3F2C:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
3F2E:  MOVF   2C,W
3F30:  SUBLW  06
3F32:  BTFSS  FD8.2
3F34:  BRA    405E
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
3F36:  BTG    2A.4
3F38:  BSF    29.4
3F3A:  MOVLW  01
3F3C:  MOVWF  2C
3F3E:  CLRF   45
....................                        
....................             if(estadoalarma==1) 
3F40:  BTFSS  2A.4
3F42:  BRA    3FA4
....................             {estadoalarma=1; 
3F44:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
3F46:  MOVLW  01
3F48:  MOVWF  xF2
3F4A:  MOVWF  xF3
3F4C:  CALL   0B92
....................                printf(lcd_putc,"                    "); 
3F50:  MOVLW  42
3F52:  MOVWF  FF6
3F54:  MOVLW  08
3F56:  MOVWF  FF7
3F58:  CALL   0C58
....................                lcd_gotoxy(1,2); 
3F5C:  MOVLW  01
3F5E:  MOVWF  xF2
3F60:  MOVLW  02
3F62:  MOVWF  xF3
3F64:  CALL   0B92
....................                printf(lcd_putc,"        Activo      "); 
3F68:  MOVLW  58
3F6A:  MOVWF  FF6
3F6C:  MOVLW  08
3F6E:  MOVWF  FF7
3F70:  CALL   0C58
....................                lcd_gotoxy(1,3); 
3F74:  MOVLW  01
3F76:  MOVWF  xF2
3F78:  MOVLW  03
3F7A:  MOVWF  xF3
3F7C:  CALL   0B92
....................                printf(lcd_putc,"        Alarma      "); 
3F80:  MOVLW  6E
3F82:  MOVWF  FF6
3F84:  MOVLW  08
3F86:  MOVWF  FF7
3F88:  CALL   0C58
....................                lcd_gotoxy(1,4); 
3F8C:  MOVLW  01
3F8E:  MOVWF  xF2
3F90:  MOVLW  04
3F92:  MOVWF  xF3
3F94:  CALL   0B92
....................                printf(lcd_putc,"                    ");} 
3F98:  MOVLW  84
3F9A:  MOVWF  FF6
3F9C:  MOVLW  08
3F9E:  MOVWF  FF7
3FA0:  CALL   0C58
....................                 
....................             if(estadoalarma==0) 
3FA4:  BTFSC  2A.4
3FA6:  BRA    4008
....................             {estadoalarma=0; 
3FA8:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
3FAA:  MOVLW  01
3FAC:  MOVWF  xF2
3FAE:  MOVWF  xF3
3FB0:  CALL   0B92
....................                printf(lcd_putc,"                    "); 
3FB4:  MOVLW  9A
3FB6:  MOVWF  FF6
3FB8:  MOVLW  08
3FBA:  MOVWF  FF7
3FBC:  CALL   0C58
....................                lcd_gotoxy(1,2); 
3FC0:  MOVLW  01
3FC2:  MOVWF  xF2
3FC4:  MOVLW  02
3FC6:  MOVWF  xF3
3FC8:  CALL   0B92
....................                printf(lcd_putc,"      Desactivo     "); 
3FCC:  MOVLW  B0
3FCE:  MOVWF  FF6
3FD0:  MOVLW  08
3FD2:  MOVWF  FF7
3FD4:  CALL   0C58
....................                lcd_gotoxy(1,3); 
3FD8:  MOVLW  01
3FDA:  MOVWF  xF2
3FDC:  MOVLW  03
3FDE:  MOVWF  xF3
3FE0:  CALL   0B92
....................                printf(lcd_putc,"       Alarma       "); 
3FE4:  MOVLW  C6
3FE6:  MOVWF  FF6
3FE8:  MOVLW  08
3FEA:  MOVWF  FF7
3FEC:  CALL   0C58
....................                lcd_gotoxy(1,4); 
3FF0:  MOVLW  01
3FF2:  MOVWF  xF2
3FF4:  MOVLW  04
3FF6:  MOVWF  xF3
3FF8:  CALL   0B92
....................                printf(lcd_putc,"                    ");} 
3FFC:  MOVLW  DC
3FFE:  MOVWF  FF6
4000:  MOVLW  08
4002:  MOVWF  FF7
4004:  CALL   0C58
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4008:  MOVLW  00
400A:  BTFSC  2A.4
400C:  MOVLW  01
400E:  MOVWF  xE0
4010:  MOVLW  04
4012:  MOVWF  FA9
4014:  MOVFF  E0,FA8
4018:  BCF    FA6.6
401A:  BCF    FA6.7
401C:  BSF    FA6.2
401E:  MOVF   FF2,W
4020:  MOVWF  00
4022:  BCF    FF2.6
4024:  BCF    FF2.7
4026:  MOVLB  F
4028:  MOVLW  55
402A:  MOVWF  FA7
402C:  MOVLW  AA
402E:  MOVWF  FA7
4030:  BSF    FA6.1
4032:  BTFSC  FA6.1
4034:  BRA    4032
4036:  BCF    FA6.2
4038:  MOVF   00,W
403A:  IORWF  FF2,F
403C:  MOVLW  04
403E:  MOVLB  0
4040:  MOVWF  xE0
4042:  MOVLW  FA
4044:  MOVWF  xF7
4046:  CALL   0A5A
404A:  DECFSZ xE0,F
404C:  BRA    4042
404E:  MOVLW  02
4050:  MOVWF  30
4052:  MOVWF  32
4054:  MOVLW  0C
4056:  MOVWF  xF1
4058:  CALL   0BFA
....................             Cambio=ON; 
405C:  BSF    2B.3
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
405E:  MOVF   2C,W
4060:  SUBLW  07
4062:  BTFSS  FD8.2
4064:  BRA    41FC
....................       if(Vel1>6) 
4066:  MOVF   56,W
4068:  SUBLW  06
406A:  BC    4070
....................          Vel1=6; 
406C:  MOVLW  06
406E:  MOVWF  56
....................       if(Vel1<1) 
4070:  MOVF   56,F
4072:  BNZ   4078
....................          Vel1=1; 
4074:  MOVLW  01
4076:  MOVWF  56
....................        
....................       lcd_gotoxy(1,1); 
4078:  MOVLW  01
407A:  MOVWF  xF2
407C:  MOVWF  xF3
407E:  CALL   0B92
....................       printf(lcd_putc,"Seleccione Velocidad"); 
4082:  MOVLW  F2
4084:  MOVWF  FF6
4086:  MOVLW  08
4088:  MOVWF  FF7
408A:  CALL   0C58
....................       lcd_gotoxy(1,2); 
408E:  MOVLW  01
4090:  MOVWF  xF2
4092:  MOVLW  02
4094:  MOVWF  xF3
4096:  CALL   0B92
....................       printf(lcd_putc,"   del Ventilador   "); 
409A:  MOVLW  08
409C:  MOVWF  FF6
409E:  MOVLW  09
40A0:  MOVWF  FF7
40A2:  CALL   0C58
....................       lcd_gotoxy(1,3); 
40A6:  MOVLW  01
40A8:  MOVWF  xF2
40AA:  MOVLW  03
40AC:  MOVWF  xF3
40AE:  CALL   0B92
....................       printf(lcd_putc,"     Vel: %u       ",Vel1); 
40B2:  MOVLW  1E
40B4:  MOVWF  FF6
40B6:  MOVLW  09
40B8:  MOVWF  FF7
40BA:  MOVLW  0A
40BC:  MOVWF  xE4
40BE:  CALL   1622
40C2:  MOVFF  56,E0
40C6:  MOVLW  1B
40C8:  MOVWF  xE1
40CA:  CALL   1850
40CE:  MOVLW  2A
40D0:  MOVWF  FF6
40D2:  MOVLW  09
40D4:  MOVWF  FF7
40D6:  MOVLW  07
40D8:  MOVWF  xE4
40DA:  CALL   1622
....................       lcd_gotoxy(1,4); 
40DE:  MOVLW  01
40E0:  MOVWF  xF2
40E2:  MOVLW  04
40E4:  MOVWF  xF3
40E6:  CALL   0B92
....................       printf(lcd_putc,"                    ");       
40EA:  MOVLW  32
40EC:  MOVWF  FF6
40EE:  MOVLW  09
40F0:  MOVWF  FF7
40F2:  CALL   0C58
....................        
....................       if(UP && Vel1<6)//Si oprime hacia arriba 
40F6:  BSF    F92.5
40F8:  BTFSC  F80.5
40FA:  BRA    410C
40FC:  MOVF   56,W
40FE:  SUBLW  05
4100:  BNC   410C
....................       {   
....................          delay_ms(200);Vel1++; 
4102:  MOVLW  C8
4104:  MOVWF  xF7
4106:  CALL   0A5A
410A:  INCF   56,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
410C:  BSF    F96.0
410E:  BTFSC  F84.0
4110:  BRA    4120
4112:  MOVF   56,F
4114:  BZ    4120
....................       {   
....................          delay_ms(200);Vel1--; 
4116:  MOVLW  C8
4118:  MOVWF  xF7
411A:  CALL   0A5A
411E:  DECF   56,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
4120:  BSF    F96.1
4122:  BTFSC  F84.1
4124:  BRA    412A
....................       {            
....................          VelMotor=Vel1; 
4126:  MOVFF  56,C8
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
412A:  BSF    F96.2
412C:  BTFSC  F84.2
412E:  BRA    41FC
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
4130:  MOVLW  64
4132:  MOVWF  xF7
4134:  CALL   0A5A
4138:  MOVLW  02
413A:  MOVWF  30
413C:  MOVWF  32
413E:  MOVLW  0C
4140:  MOVWF  xF1
4142:  CALL   0BFA
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
4146:  MOVLW  0D
4148:  MOVWF  FA9
414A:  MOVFF  56,FA8
414E:  BCF    FA6.6
4150:  BCF    FA6.7
4152:  BSF    FA6.2
4154:  MOVF   FF2,W
4156:  MOVWF  00
4158:  BCF    FF2.6
415A:  BCF    FF2.7
415C:  MOVLB  F
415E:  MOVLW  55
4160:  MOVWF  FA7
4162:  MOVLW  AA
4164:  MOVWF  FA7
4166:  BSF    FA6.1
4168:  BTFSC  FA6.1
416A:  BRA    4168
416C:  BCF    FA6.2
416E:  MOVF   00,W
4170:  IORWF  FF2,F
....................          delay_ms(20); 
4172:  MOVLW  14
4174:  MOVLB  0
4176:  MOVWF  xF7
4178:  CALL   0A5A
....................          lcd_gotoxy(1,1); 
417C:  MOVLW  01
417E:  MOVWF  xF2
4180:  MOVWF  xF3
4182:  CALL   0B92
....................          printf(lcd_putc,"                    "); 
4186:  MOVLW  48
4188:  MOVWF  FF6
418A:  MOVLW  09
418C:  MOVWF  FF7
418E:  CALL   0C58
....................          lcd_gotoxy(1,2); 
4192:  MOVLW  01
4194:  MOVWF  xF2
4196:  MOVLW  02
4198:  MOVWF  xF3
419A:  CALL   0B92
....................          printf(lcd_putc,"     Velocidad      "); 
419E:  MOVLW  5E
41A0:  MOVWF  FF6
41A2:  MOVLW  09
41A4:  MOVWF  FF7
41A6:  CALL   0C58
....................          lcd_gotoxy(1,3); 
41AA:  MOVLW  01
41AC:  MOVWF  xF2
41AE:  MOVLW  03
41B0:  MOVWF  xF3
41B2:  CALL   0B92
....................          printf(lcd_putc,"      Almacenada    "); 
41B6:  MOVLW  74
41B8:  MOVWF  FF6
41BA:  MOVLW  09
41BC:  MOVWF  FF7
41BE:  CALL   0C58
....................          lcd_gotoxy(1,4); 
41C2:  MOVLW  01
41C4:  MOVWF  xF2
41C6:  MOVLW  04
41C8:  MOVWF  xF3
41CA:  CALL   0B92
....................          printf(lcd_putc,"                    ");  
41CE:  MOVLW  8A
41D0:  MOVWF  FF6
41D2:  MOVLW  09
41D4:  MOVWF  FF7
41D6:  CALL   0C58
....................          delay_ms(1000); 
41DA:  MOVLW  04
41DC:  MOVWF  xE0
41DE:  MOVLW  FA
41E0:  MOVWF  xF7
41E2:  CALL   0A5A
41E6:  DECFSZ xE0,F
41E8:  BRA    41DE
....................          printf(lcd_putc,"\f"); 
41EA:  MOVLW  0C
41EC:  MOVWF  xF1
41EE:  CALL   0BFA
....................          lcd_init(); 
41F2:  CALL   0AEA
....................          Menu=1; paso=0; 
41F6:  MOVLW  01
41F8:  MOVWF  2C
41FA:  CLRF   45
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
41FC:  MOVF   2C,W
41FE:  SUBLW  32
4200:  BTFSS  FD8.2
4202:  BRA    4874
....................    if(Lectura==1){ 
4204:  BTFSS  2A.0
4206:  BRA    442A
....................       Lectura=0; 
4208:  BCF    2A.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
420A:  MOVLW  08
420C:  MOVWF  xE0
420E:  CALL   1DF2
4212:  MOVFF  03,BC
4216:  MOVFF  02,BB
421A:  MOVFF  01,BA
421E:  MOVFF  00,B9
....................       lcd_gotoxy(1,1); 
4222:  MOVLW  01
4224:  MOVWF  xF2
4226:  MOVWF  xF3
4228:  CALL   0B92
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
422C:  MOVFF  BC,F7
4230:  MOVFF  BB,F6
4234:  MOVFF  BA,F5
4238:  MOVFF  B9,F4
423C:  MOVLW  D7
423E:  MOVWF  xFB
4240:  MOVLW  A3
4242:  MOVWF  xFA
4244:  CLRF   xF9
4246:  MOVLW  81
4248:  MOVWF  xF8
424A:  CALL   1F88
424E:  MOVFF  00,E0
4252:  MOVFF  01,E1
4256:  MOVFF  02,E2
425A:  MOVFF  03,E3
425E:  MOVLW  A0
4260:  MOVWF  FF6
4262:  MOVLW  09
4264:  MOVWF  FF7
4266:  MOVLW  08
4268:  MOVWF  xE4
426A:  CALL   1622
426E:  MOVLW  02
4270:  MOVWF  FE9
4272:  MOVFF  E3,E7
4276:  MOVFF  E2,E6
427A:  MOVFF  E1,E5
427E:  MOVFF  E0,E4
4282:  MOVWF  xE8
4284:  CALL   2134
4288:  MOVLW  AD
428A:  MOVWF  FF6
428C:  MOVLW  09
428E:  MOVWF  FF7
4290:  MOVLW  07
4292:  MOVWF  xE4
4294:  CALL   1622
....................       Saturacion=(CaidaPresion/0.24)*11; 
4298:  MOVFF  BC,F7
429C:  MOVFF  BB,F6
42A0:  MOVFF  BA,F5
42A4:  MOVFF  B9,F4
42A8:  MOVLW  8F
42AA:  MOVWF  xFB
42AC:  MOVLW  C2
42AE:  MOVWF  xFA
42B0:  MOVLW  75
42B2:  MOVWF  xF9
42B4:  MOVLW  7C
42B6:  MOVWF  xF8
42B8:  CALL   19C8
42BC:  MOVFF  00,E0
42C0:  MOVFF  01,E1
42C4:  MOVFF  02,E2
42C8:  MOVFF  03,E3
42CC:  MOVFF  03,F7
42D0:  MOVFF  02,F6
42D4:  MOVFF  01,F5
42D8:  MOVFF  00,F4
42DC:  CLRF   xFB
42DE:  CLRF   xFA
42E0:  MOVLW  30
42E2:  MOVWF  xF9
42E4:  MOVLW  82
42E6:  MOVWF  xF8
42E8:  CALL   1F88
42EC:  MOVFF  03,B8
42F0:  MOVFF  02,B7
42F4:  MOVFF  01,B6
42F8:  MOVFF  00,B5
....................        
....................       if(Saturacion>11) 
42FC:  CLRF   xF7
42FE:  CLRF   xF6
4300:  MOVLW  30
4302:  MOVWF  xF5
4304:  MOVLW  82
4306:  MOVWF  xF4
4308:  MOVFF  B8,FB
430C:  MOVFF  B7,FA
4310:  MOVFF  B6,F9
4314:  MOVFF  B5,F8
4318:  CALL   0FB2
431C:  BNC   432A
....................       { 
....................          Saturacion=11; 
431E:  CLRF   xB8
4320:  CLRF   xB7
4322:  MOVLW  30
4324:  MOVWF  xB6
4326:  MOVLW  82
4328:  MOVWF  xB5
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
432A:  CLRF   41
432C:  MOVFF  B8,E3
4330:  MOVFF  B7,E2
4334:  MOVFF  B6,E1
4338:  MOVFF  B5,E0
433C:  CALL   262C
4340:  MOVFF  00,E0
4344:  MOVFF  01,E1
4348:  MOVFF  02,E2
434C:  MOVFF  03,E3
4350:  CLRF   xF9
4352:  MOVFF  41,F8
4356:  CALL   0CDE
435A:  MOVFF  03,F7
435E:  MOVFF  02,F6
4362:  MOVFF  01,F5
4366:  MOVFF  00,F4
436A:  MOVFF  E3,FB
436E:  MOVFF  E2,FA
4372:  MOVFF  E1,F9
4376:  MOVFF  E0,F8
437A:  CALL   0FB2
437E:  BNC   439C
....................       { 
....................          lcd_gotoxy(i+8,2); 
4380:  MOVLW  08
4382:  ADDWF  41,W
4384:  MOVWF  xE0
4386:  MOVWF  xF2
4388:  MOVLW  02
438A:  MOVWF  xF3
438C:  CALL   0B92
....................          printf(lcd_putc,"Ñ"); 
4390:  MOVLW  D1
4392:  MOVWF  xF1
4394:  CALL   0BFA
....................       } 
4398:  INCF   41,F
439A:  BRA    432C
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
439C:  MOVFF  B8,E3
43A0:  MOVFF  B7,E2
43A4:  MOVFF  B6,E1
43A8:  MOVFF  B5,E0
43AC:  CALL   262C
43B0:  MOVFF  03,F7
43B4:  MOVFF  02,F6
43B8:  MOVFF  01,F5
43BC:  MOVFF  00,F4
43C0:  CALL   22BA
43C4:  MOVFF  01,41
43C8:  MOVF   41,W
43CA:  SUBLW  0A
43CC:  BNC   43EA
....................       { 
....................          lcd_gotoxy(i+8,2); 
43CE:  MOVLW  08
43D0:  ADDWF  41,W
43D2:  MOVWF  xE0
43D4:  MOVWF  xF2
43D6:  MOVLW  02
43D8:  MOVWF  xF3
43DA:  CALL   0B92
....................          printf(lcd_putc," "); 
43DE:  MOVLW  20
43E0:  MOVWF  xF1
43E2:  CALL   0BFA
....................       } 
43E6:  INCF   41,F
43E8:  BRA    43C8
....................        
....................       lcd_gotoxy(9,3); 
43EA:  MOVLW  09
43EC:  MOVWF  xF2
43EE:  MOVLW  03
43F0:  MOVWF  xF3
43F2:  CALL   0B92
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
43F6:  MOVLW  B6
43F8:  MOVWF  FF6
43FA:  MOVLW  09
43FC:  MOVWF  FF7
43FE:  MOVLW  06
4400:  MOVWF  xE4
4402:  CALL   1622
4406:  MOVFF  3B,E0
440A:  MOVLW  03
440C:  MOVWF  xE1
440E:  CALL   1850
4412:  MOVLW  3A
4414:  MOVWF  xF1
4416:  CALL   0BFA
441A:  MOVFF  3C,E0
441E:  MOVLW  01
4420:  MOVWF  xE1
4422:  CALL   1850
....................       EliminaRuido(); 
4426:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
442A:  BTFSS  29.7
442C:  BRA    44C6
....................    { 
....................       if(estadoalarma==1) 
442E:  BTFSS  2A.4
4430:  BRA    44BC
....................       { 
....................          printf(lcd_putc,"\f"); 
4432:  MOVLW  0C
4434:  MOVWF  xF1
4436:  CALL   0BFA
....................          lcd_gotoxy(1,2); 
443A:  MOVLW  01
443C:  MOVWF  xF2
443E:  MOVLW  02
4440:  MOVWF  xF3
4442:  CALL   0B92
....................          printf(lcd_putc,"  Temporizador  de  "); 
4446:  MOVLW  C6
4448:  MOVWF  FF6
444A:  MOVLW  09
444C:  MOVWF  FF7
444E:  CALL   0C58
....................          lcd_gotoxy(1,3); 
4452:  MOVLW  01
4454:  MOVWF  xF2
4456:  MOVLW  03
4458:  MOVWF  xF3
445A:  CALL   0B92
....................          printf(lcd_putc," Luz UV  Finalizado "); 
445E:  MOVLW  DC
4460:  MOVWF  FF6
4462:  MOVLW  09
4464:  MOVWF  FF7
4466:  CALL   0C58
....................          lcd_gotoxy(1,4); 
446A:  MOVLW  01
446C:  MOVWF  xF2
446E:  MOVLW  04
4470:  MOVWF  xF3
4472:  CALL   0B92
....................          printf(lcd_putc,"                    "); 
4476:  MOVLW  F2
4478:  MOVWF  FF6
447A:  MOVLW  09
447C:  MOVWF  FF7
447E:  CALL   0C58
....................          lcd_gotoxy(1,1); 
4482:  MOVLW  01
4484:  MOVWF  xF2
4486:  MOVWF  xF3
4488:  CALL   0B92
....................          printf(lcd_putc,"                    "); 
448C:  MOVLW  08
448E:  MOVWF  FF6
4490:  MOVLW  0A
4492:  MOVWF  FF7
4494:  CALL   0C58
....................          for(i=0;i<5;i++) 
4498:  CLRF   41
449A:  MOVF   41,W
449C:  SUBLW  04
449E:  BNC   44BC
....................          { 
....................             Buzzer_on; 
44A0:  BSF    F8B.0
44A2:  BCF    F94.0
....................             delay_ms(200); 
44A4:  MOVLW  C8
44A6:  MOVWF  xF7
44A8:  CALL   0A5A
....................             Buzzer_off; 
44AC:  BCF    F8B.0
44AE:  BCF    F94.0
....................             delay_ms(200); 
44B0:  MOVLW  C8
44B2:  MOVWF  xF7
44B4:  CALL   0A5A
....................          } 
44B8:  INCF   41,F
44BA:  BRA    449A
....................       } 
....................       tiempo_cumplido=0; 
44BC:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
44BE:  MOVLW  0C
44C0:  MOVWF  xF1
44C2:  CALL   0BFA
....................    } 
....................     
....................    if(CaidaPresion>=0.23) 
44C6:  MOVLW  1F
44C8:  MOVWF  xF7
44CA:  MOVLW  85
44CC:  MOVWF  xF6
44CE:  MOVLW  6B
44D0:  MOVWF  xF5
44D2:  MOVLW  7C
44D4:  MOVWF  xF4
44D6:  MOVFF  BC,FB
44DA:  MOVFF  BB,FA
44DE:  MOVFF  BA,F9
44E2:  MOVFF  B9,F8
44E6:  CALL   0FB2
44EA:  BC    44EE
44EC:  BNZ   44F4
....................    {  
....................       ActivaBuzzer=1; 
44EE:  MOVLW  01
44F0:  MOVWF  51
....................    } 
....................    else 
44F2:  BRA    44FA
....................    { 
....................       ActivaBuzzer=0; 
44F4:  CLRF   51
....................       Buzzer_off; 
44F6:  BCF    F8B.0
44F8:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
44FA:  MOVLW  01
44FC:  MOVWF  xF2
44FE:  MOVLW  02
4500:  MOVWF  xF3
4502:  CALL   0B92
....................       printf(lcd_putc,"Filtro:"); 
4506:  MOVLW  1E
4508:  MOVWF  FF6
450A:  MOVLW  0A
450C:  MOVWF  FF7
450E:  CALL   0C58
....................        
....................       if(estadomv==1) 
4512:  BTFSS  29.2
4514:  BRA    4530
....................       { 
....................          lcd_gotoxy(1,4); 
4516:  MOVLW  01
4518:  MOVWF  xF2
451A:  MOVLW  04
451C:  MOVWF  xF3
451E:  CALL   0B92
....................          printf(lcd_putc,"Motor:ON ");       
4522:  MOVLW  26
4524:  MOVWF  FF6
4526:  MOVLW  0A
4528:  MOVWF  FF7
452A:  CALL   0C58
....................       } 
....................       else 
452E:  BRA    4548
....................       { 
....................          lcd_gotoxy(1,4); 
4530:  MOVLW  01
4532:  MOVWF  xF2
4534:  MOVLW  04
4536:  MOVWF  xF3
4538:  CALL   0B92
....................          printf(lcd_putc,"Motor:OFF"); 
453C:  MOVLW  30
453E:  MOVWF  FF6
4540:  MOVLW  0A
4542:  MOVWF  FF7
4544:  CALL   0C58
....................       } 
....................        
....................       if(estadouv==1) 
4548:  BTFSS  29.0
454A:  BRA    4566
....................       { 
....................          lcd_gotoxy(13,4); 
454C:  MOVLW  0D
454E:  MOVWF  xF2
4550:  MOVLW  04
4552:  MOVWF  xF3
4554:  CALL   0B92
....................          printf(lcd_putc,"UV:ON "); 
4558:  MOVLW  3A
455A:  MOVWF  FF6
455C:  MOVLW  0A
455E:  MOVWF  FF7
4560:  CALL   0C58
....................       } 
....................       else 
4564:  BRA    457E
....................       {          
....................          lcd_gotoxy(13,4); 
4566:  MOVLW  0D
4568:  MOVWF  xF2
456A:  MOVLW  04
456C:  MOVWF  xF3
456E:  CALL   0B92
....................          printf(lcd_putc,"UV:OFF"); 
4572:  MOVLW  42
4574:  MOVWF  FF6
4576:  MOVLW  0A
4578:  MOVWF  FF7
457A:  CALL   0C58
....................       } 
....................        
....................       if(estadofl==1) 
457E:  BTFSS  29.1
4580:  BRA    459C
....................       { 
....................          lcd_gotoxy(1,3); 
4582:  MOVLW  01
4584:  MOVWF  xF2
4586:  MOVLW  03
4588:  MOVWF  xF3
458A:  CALL   0B92
....................          printf(lcd_putc,"Luz:ON "); 
458E:  MOVLW  4A
4590:  MOVWF  FF6
4592:  MOVLW  0A
4594:  MOVWF  FF7
4596:  CALL   0C58
....................       } 
....................       else 
459A:  BRA    45B4
....................       { 
....................          lcd_gotoxy(1,3); 
459C:  MOVLW  01
459E:  MOVWF  xF2
45A0:  MOVLW  03
45A2:  MOVWF  xF3
45A4:  CALL   0B92
....................          printf(lcd_putc,"Luz:OFF"); 
45A8:  MOVLW  52
45AA:  MOVWF  FF6
45AC:  MOVLW  0A
45AE:  MOVWF  FF7
45B0:  CALL   0C58
....................       }  
....................       Cambio=OFF; 
45B4:  BCF    2B.3
....................    //} 
....................     
....................    if(estadomv==1){  
45B6:  BTFSS  29.2
45B8:  BRA    45DC
....................       if(flagmv==0){ 
45BA:  BTFSC  2B.4
45BC:  BRA    45D6
....................          VelMotor=Vel1; 
45BE:  MOVFF  56,C8
....................          lcd_init();delay_ms(200);lcd_init(); 
45C2:  CALL   0AEA
45C6:  MOVLW  C8
45C8:  MOVWF  xF7
45CA:  CALL   0A5A
45CE:  CALL   0AEA
....................          flagmv=1;Cambio=ON; 
45D2:  BSF    2B.4
45D4:  BSF    2B.3
....................       } 
....................       VelMotor=Vel1; 
45D6:  MOVFF  56,C8
....................    }else{ 
45DA:  BRA    45F6
....................       VelMotor=0; 
45DC:  CLRF   xC8
....................       if(flagmv==1){ 
45DE:  BTFSS  2B.4
45E0:  BRA    45F6
....................          lcd_init();delay_ms(200);lcd_init(); 
45E2:  CALL   0AEA
45E6:  MOVLW  C8
45E8:  MOVWF  xF7
45EA:  CALL   0A5A
45EE:  CALL   0AEA
....................          flagmv=0;Cambio=ON; 
45F2:  BCF    2B.4
45F4:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
45F6:  BTFSS  29.1
45F8:  BRA    4618
....................    { 
....................       Luz_Blanca_on; 
45FA:  BCF    F8A.4
45FC:  BCF    F93.4
....................       if(flagfl==0) 
45FE:  BTFSC  2A.2
4600:  BRA    4616
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4602:  CALL   0AEA
4606:  MOVLW  C8
4608:  MOVWF  xF7
460A:  CALL   0A5A
460E:  CALL   0AEA
....................          flagfl=1;Cambio=ON; 
4612:  BSF    2A.2
4614:  BSF    2B.3
....................       } 
....................    } 
....................    else 
4616:  BRA    4634
....................    { 
....................       Luz_Blanca_off; 
4618:  BSF    F8A.4
461A:  BCF    F93.4
....................       if(flagfl==1) 
461C:  BTFSS  2A.2
461E:  BRA    4634
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4620:  CALL   0AEA
4624:  MOVLW  C8
4626:  MOVWF  xF7
4628:  CALL   0A5A
462C:  CALL   0AEA
....................          flagfl=0;Cambio=ON; 
4630:  BCF    2A.2
4632:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    //if(VIDRIODN){ 
....................       //estadomv=0; 
....................       //VelMotor=0; 
....................       //estadofl=0; 
....................       //Luz_Blanca_off; 
....................       if(estadouv==1){ 
4634:  BTFSS  29.0
4636:  BRA    4666
....................          Luz_UV_on; 
4638:  BCF    F8A.3
463A:  BCF    F93.3
....................          tiempo_cumplido=0;       
463C:  BCF    29.7
....................          estadomv=0; 
463E:  BCF    29.2
....................          VelMotor=0; 
4640:  CLRF   xC8
....................          estadofl=0; 
4642:  BCF    29.1
....................          Luz_Blanca_off; 
4644:  BSF    F8A.4
4646:  BCF    F93.4
....................          if(flaguv==0){ 
4648:  BTFSC  2A.1
464A:  BRA    4664
....................             lcd_init();delay_ms(200);lcd_init(); 
464C:  CALL   0AEA
4650:  MOVLW  C8
4652:  MOVWF  xF7
4654:  CALL   0A5A
4658:  CALL   0AEA
....................             flaguv=1;guardaruv=1;Cambio=ON; 
465C:  BSF    2A.1
465E:  MOVLW  01
4660:  MOVWF  44
4662:  BSF    2B.3
....................          } 
....................       }else{ 
4664:  BRA    4688
....................          estadouv=0; 
4666:  BCF    29.0
....................          Luz_UV_off; 
4668:  BSF    F8A.3
466A:  BCF    F93.3
....................          if(flaguv==1){ 
466C:  BTFSS  2A.1
466E:  BRA    4688
....................             lcd_init();delay_ms(200);lcd_init(); 
4670:  CALL   0AEA
4674:  MOVLW  C8
4676:  MOVWF  xF7
4678:  CALL   0A5A
467C:  CALL   0AEA
....................             flaguv=0;guardaruv=1;Cambio=ON; 
4680:  BCF    2A.1
4682:  MOVLW  01
4684:  MOVWF  44
4686:  BSF    2B.3
....................          } 
....................       } 
....................    //}else{ 
....................    //   estadouv=0; 
....................    //   Luz_UV_off; 
....................    //   if(flaguv==1){ 
....................          //lcd_init();delay_ms(200);lcd_init(); 
....................    //      flaguv=0;guardaruv=1;Cambio=ON; 
....................    //   } 
....................    //} 
....................     
....................    if(DOWN){//Si oprime hacia Abajo 
4688:  BSF    F96.0
468A:  BTFSC  F84.0
468C:  BRA    46C6
....................       Flanco=1; 
468E:  BSF    29.3
....................       if(!flagdn){ 
4690:  BTFSC  2B.1
4692:  BRA    46C4
....................          delay_ms(500); 
4694:  MOVLW  02
4696:  MOVWF  xE0
4698:  MOVLW  FA
469A:  MOVWF  xF7
469C:  CALL   0A5A
46A0:  DECFSZ xE0,F
46A2:  BRA    4698
....................          if(DOWN){ 
46A4:  BSF    F96.0
46A6:  BTFSC  F84.0
46A8:  BRA    46AE
....................             flagdn=1; 
46AA:  BSF    2B.1
....................          }else{ 
46AC:  BRA    46C4
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
46AE:  BTG    29.1
46B0:  BSF    29.3
46B2:  MOVLW  02
46B4:  MOVWF  xE0
46B6:  MOVLW  96
46B8:  MOVWF  xF7
46BA:  CALL   0A5A
46BE:  DECFSZ xE0,F
46C0:  BRA    46B6
46C2:  BSF    2B.3
....................          } 
....................       } 
....................    }else{ 
46C4:  BRA    46CA
....................       flagdn=0; 
46C6:  BCF    2B.1
....................       Flanco=0; 
46C8:  BCF    29.3
....................    }  
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
46CA:  BSF    F96.1
46CC:  BTFSC  F84.1
46CE:  BRA    46FA
....................    { 
....................       delay_ms(20); 
46D0:  MOVLW  14
46D2:  MOVWF  xF7
46D4:  CALL   0A5A
....................       if(RIGHT){ 
46D8:  BSF    F96.1
46DA:  BTFSC  F84.1
46DC:  BRA    46F8
....................          if(Flanco2 == 0) 
46DE:  BTFSC  29.5
46E0:  BRA    46F8
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
46E2:  BTG    29.2
46E4:  BSF    29.4
46E6:  MOVLW  02
46E8:  MOVWF  xE0
46EA:  MOVLW  96
46EC:  MOVWF  xF7
46EE:  CALL   0A5A
46F2:  DECFSZ xE0,F
46F4:  BRA    46EA
46F6:  BSF    2B.3
....................          } 
....................       } 
....................    } 
....................    else 
46F8:  BRA    46FC
....................    { 
....................       Flanco2 = 0; 
46FA:  BCF    29.5
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
46FC:  BSF    F96.2
46FE:  BTFSC  F84.2
4700:  BRA    471C
....................    { 
....................       delay_ms(20); 
4702:  MOVLW  14
4704:  MOVWF  xF7
4706:  CALL   0A5A
....................       if(IZQU){ 
470A:  BSF    F96.2
470C:  BTFSC  F84.2
470E:  BRA    471C
....................          delay_ms(150);  
4710:  MOVLW  96
4712:  MOVWF  xF7
4714:  CALL   0A5A
....................          estadouv=!estadouv; 
4718:  BTG    29.0
....................          Cambio=ON; 
471A:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(UP){// Si oprime Arriba 
471C:  BSF    F92.5
471E:  BTFSC  F80.5
4720:  BRA    4772
....................       Flanco1=1; 
4722:  BSF    29.4
....................       if(!flagup){ 
4724:  BTFSC  2B.2
4726:  BRA    4770
....................          delay_ms(500); 
4728:  MOVLW  02
472A:  MOVWF  xE0
472C:  MOVLW  FA
472E:  MOVWF  xF7
4730:  CALL   0A5A
4734:  DECFSZ xE0,F
4736:  BRA    472C
....................          if(UP){ 
4738:  BSF    F92.5
473A:  BTFSC  F80.5
473C:  BRA    4742
....................             flagup=1; 
473E:  BSF    2B.2
....................          }else{ 
4740:  BRA    4770
....................             delay_ms(200); 
4742:  MOVLW  C8
4744:  MOVWF  xF7
4746:  CALL   0A5A
....................             printf(lcd_putc,"\f"); 
474A:  MOVLW  0C
474C:  MOVWF  xF1
474E:  CALL   0BFA
....................             delay_ms(300); 
4752:  MOVLW  02
4754:  MOVWF  xE0
4756:  MOVLW  96
4758:  MOVWF  xF7
475A:  CALL   0A5A
475E:  DECFSZ xE0,F
4760:  BRA    4756
....................             Menu=1;  
4762:  MOVLW  01
4764:  MOVWF  2C
....................             paso=0; 
4766:  CLRF   45
....................             Flecha=2; 
4768:  MOVLW  02
476A:  MOVWF  30
....................             Flecha2=2; 
476C:  MOVWF  32
....................             Cambio=ON; 
476E:  BSF    2B.3
....................          } 
....................       } 
....................    }else{ 
4770:  BRA    4776
....................       flagup=0; 
4772:  BCF    2B.2
....................       Flanco1=0; 
4774:  BCF    29.4
....................    } 
....................     
....................    if(flagup){ 
4776:  BTFSS  2B.2
4778:  BRA    4780
....................       subirVidrio(); 
477A:  CALL   1440
....................    }else{ 
477E:  BRA    478E
....................       if(flagdn){ 
4780:  BTFSS  2B.1
4782:  BRA    478A
....................          bajarVidrio(); 
4784:  CALL   141C
....................       }else{ 
4788:  BRA    478E
....................          detenerVidrio(); 
478A:  GOTO   2642
....................       } 
....................    } 
....................        
....................    if(guardaruv==1) 
478E:  DECFSZ 44,W
4790:  BRA    485C
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
4792:  MOVLW  07
4794:  MOVWF  FA9
4796:  MOVFF  35,FA8
479A:  BCF    FA6.6
479C:  BCF    FA6.7
479E:  BSF    FA6.2
47A0:  MOVF   FF2,W
47A2:  MOVWF  00
47A4:  BCF    FF2.6
47A6:  BCF    FF2.7
47A8:  MOVLB  F
47AA:  MOVLW  55
47AC:  MOVWF  FA7
47AE:  MOVLW  AA
47B0:  MOVWF  FA7
47B2:  BSF    FA6.1
47B4:  BTFSC  FA6.1
47B6:  BRA    47B4
47B8:  BCF    FA6.2
47BA:  MOVF   00,W
47BC:  IORWF  FF2,F
47BE:  MOVLW  08
47C0:  MOVWF  FA9
47C2:  MOVFF  36,FA8
47C6:  BCF    FA6.6
47C8:  BCF    FA6.7
47CA:  BSF    FA6.2
47CC:  MOVF   FF2,W
47CE:  MOVWF  00
47D0:  BCF    FF2.6
47D2:  BCF    FF2.7
47D4:  MOVLW  55
47D6:  MOVWF  FA7
47D8:  MOVLW  AA
47DA:  MOVWF  FA7
47DC:  BSF    FA6.1
47DE:  BTFSC  FA6.1
47E0:  BRA    47DE
47E2:  BCF    FA6.2
47E4:  MOVF   00,W
47E6:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
47E8:  MOVFF  59,37
....................       horasH=make8(horas,1); 
47EC:  MOVFF  5A,38
....................       write_eeprom(9,horasL); 
47F0:  MOVLW  09
47F2:  MOVWF  FA9
47F4:  MOVFF  37,FA8
47F8:  BCF    FA6.6
47FA:  BCF    FA6.7
47FC:  BSF    FA6.2
47FE:  MOVFF  FF2,00
4802:  BCF    FF2.6
4804:  BCF    FF2.7
4806:  MOVLW  55
4808:  MOVWF  FA7
480A:  MOVLW  AA
480C:  MOVWF  FA7
480E:  BSF    FA6.1
4810:  BTFSC  FA6.1
4812:  BRA    4810
4814:  BCF    FA6.2
4816:  MOVF   00,W
4818:  IORWF  FF2,F
....................       delay_ms(20); 
481A:  MOVLW  14
481C:  MOVLB  0
481E:  MOVWF  xF7
4820:  CALL   0A5A
....................       write_eeprom(10,horasH); 
4824:  MOVLW  0A
4826:  MOVWF  FA9
4828:  MOVFF  38,FA8
482C:  BCF    FA6.6
482E:  BCF    FA6.7
4830:  BSF    FA6.2
4832:  MOVF   FF2,W
4834:  MOVWF  00
4836:  BCF    FF2.6
4838:  BCF    FF2.7
483A:  MOVLB  F
483C:  MOVLW  55
483E:  MOVWF  FA7
4840:  MOVLW  AA
4842:  MOVWF  FA7
4844:  BSF    FA6.1
4846:  BTFSC  FA6.1
4848:  BRA    4846
484A:  BCF    FA6.2
484C:  MOVF   00,W
484E:  IORWF  FF2,F
....................       delay_ms(20); 
4850:  MOVLW  14
4852:  MOVLB  0
4854:  MOVWF  xF7
4856:  CALL   0A5A
....................       guardaruv=0; 
485A:  CLRF   44
....................    } 
....................     
....................    if(segundos>=60) 
485C:  MOVF   35,W
485E:  SUBLW  3B
4860:  BC    4866
....................    { 
....................       segundos=0;minutos++; 
4862:  CLRF   35
4864:  INCF   36,F
....................    } 
....................    if(minutos==60) 
4866:  MOVF   36,W
4868:  SUBLW  3C
486A:  BNZ   4874
....................    { 
....................       minutos=0;horas++; 
486C:  CLRF   36
486E:  INCF   59,F
4870:  BTFSC  FD8.2
4872:  INCF   5A,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
4874:  MOVF   43,W
4876:  SUBLW  3B
4878:  BC    4892
....................    { 
....................       printf(lcd_putc,"\f"); 
487A:  MOVLW  0C
487C:  MOVWF  xF1
487E:  CALL   0BFA
....................       lcd_init(); 
4882:  CALL   0AEA
....................       delay_ms(200); 
4886:  MOVLW  C8
4888:  MOVWF  xF7
488A:  CALL   0A5A
....................       tiemporeset=0; 
488E:  CLRF   43
....................       Cambio=ON; 
4890:  BSF    2B.3
....................    }    
....................    } 
4892:  GOTO   2AF2
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
4896:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
*
13DC:  MOVF   xEF,W
13DE:  MULLW  80
13E0:  MOVFF  FF3,F1
13E4:  MOVF   xEE,W
13E6:  MULLW  40
13E8:  MOVF   FF3,W
13EA:  ADDWF  xF1,F
13EC:  MOVF   xED,W
13EE:  MULLW  20
13F0:  MOVF   FF3,W
13F2:  ADDWF  xF1,F
13F4:  MOVF   xEC,W
13F6:  MULLW  10
13F8:  MOVF   FF3,W
13FA:  ADDWF  xF1,F
13FC:  MOVF   xEB,W
13FE:  MULLW  08
1400:  MOVF   FF3,W
1402:  ADDWF  xF1,F
1404:  MOVF   xEA,W
1406:  MULLW  04
1408:  MOVF   FF3,W
140A:  ADDWF  xF1,F
140C:  BCF    FD8.0
140E:  RLCF   xE9,W
1410:  ADDWF  xF1,W
1412:  ADDWF  xE8,W
1414:  MOVWF  xF0
....................    return dato;  
1416:  MOVFF  F0,01
.................... } 
141A:  RETLW  00

Configuration Fuses:
   Word  1: CE3C   IESO FCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
