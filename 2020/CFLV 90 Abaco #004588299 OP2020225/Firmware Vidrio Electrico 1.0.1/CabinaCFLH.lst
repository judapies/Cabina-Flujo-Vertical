CCS PCH C Compiler, Version 4.104, 5967               06-oct.-20 07:18

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Vertical\2020\CFLV 90 Abaco #004588299 OP2020225\Firmware Vidrio Electrico 1.0.1\CabinaCFLH.lst

               ROM used: 17612 bytes (54%)
                         Largest free fragment is 15154
               RAM used: 236 (12%) at main() level
                         277 (14%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   258C
*
0008:  GOTO   00A6
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   02F2
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
00A6:  MOVWF  16
00A8:  MOVFF  FD8,17
00AC:  MOVFF  FE0,18
00B0:  MOVLB  0
00B2:  MOVFF  FE9,1E
00B6:  MOVFF  FEA,19
00BA:  MOVFF  FE1,1A
00BE:  MOVFF  FE2,1B
00C2:  MOVFF  FD9,1C
00C6:  MOVFF  FDA,1D
00CA:  MOVFF  FF3,24
00CE:  MOVFF  FF4,25
00D2:  MOVFF  FFA,26
00D6:  MOVFF  00,20
00DA:  MOVFF  01,21
00DE:  MOVFF  02,22
00E2:  MOVFF  03,23
00E6:  BTFSS  FF2.5
00E8:  GOTO   00F2
00EC:  BTFSC  FF2.2
00EE:  GOTO   02C0
00F2:  BTFSS  FF2.4
00F4:  GOTO   00FE
00F8:  BTFSC  FF2.1
00FA:  GOTO   0248
00FE:  MOVFF  20,00
0102:  MOVFF  21,01
0106:  MOVFF  22,02
010A:  MOVFF  23,03
010E:  MOVFF  1E,FE9
0112:  MOVFF  19,FEA
0116:  BSF    19.7
0118:  MOVFF  1A,FE1
011C:  MOVFF  1B,FE2
0120:  MOVFF  1C,FD9
0124:  MOVFF  1D,FDA
0128:  MOVFF  24,FF3
012C:  MOVFF  25,FF4
0130:  MOVFF  26,FFA
0134:  MOVF   16,W
0136:  MOVFF  18,FE0
013A:  MOVFF  17,FD8
013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=16000000) 
*
0940:  CLRF   FEA
0942:  MOVLW  FF
0944:  MOVWF  FE9
0946:  MOVF   FEF,W
0948:  BZ    0966
094A:  MOVLW  05
094C:  MOVWF  01
094E:  CLRF   00
0950:  DECFSZ 00,F
0952:  BRA    0950
0954:  DECFSZ 01,F
0956:  BRA    094E
0958:  MOVLW  2E
095A:  MOVWF  00
095C:  DECFSZ 00,F
095E:  BRA    095C
0960:  BRA    0962
0962:  DECFSZ FEF,F
0964:  BRA    094A
0966:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
2218:  BCF    xFB.0
....................    y = x; 
221A:  MOVFF  EF,F4
221E:  MOVFF  EE,F3
2222:  MOVFF  ED,F2
2226:  MOVFF  EC,F1
....................  
....................    if (x < 0) 
222A:  MOVFF  EF,FF
222E:  MOVFF  EE,FE
2232:  MOVFF  ED,FD
2236:  MOVFF  EC,FC
223A:  MOVLB  1
223C:  CLRF   x03
223E:  CLRF   x02
2240:  CLRF   x01
2242:  CLRF   x00
2244:  MOVLB  0
2246:  CALL   0E92
224A:  BNC   2254
....................    { 
....................       s = 1; 
224C:  BSF    xFB.0
....................       y = -y; 
224E:  MOVF   xF2,W
2250:  XORLW  80
2252:  MOVWF  xF2
....................    } 
....................  
....................    if (y <= 32768.0) 
2254:  MOVFF  F4,FF
2258:  MOVFF  F3,FE
225C:  MOVFF  F2,FD
2260:  MOVFF  F1,FC
2264:  MOVLB  1
2266:  CLRF   x03
2268:  CLRF   x02
226A:  CLRF   x01
226C:  MOVLW  8E
226E:  MOVWF  x00
2270:  MOVLB  0
2272:  CALL   0E92
2276:  BC    227A
2278:  BNZ   22AA
....................   res = (float32)(unsigned int16)y; 
227A:  MOVFF  F4,FF
227E:  MOVFF  F3,FE
2282:  MOVFF  F2,FD
2286:  MOVFF  F1,FC
228A:  RCALL  21E0
228C:  MOVFF  02,101
2290:  MOVFF  01,100
2294:  CALL   0BBE
2298:  MOVFF  03,F8
229C:  MOVFF  02,F7
22A0:  MOVFF  01,F6
22A4:  MOVFF  00,F5
....................  
....................  else if (y < 10000000.0) 
22A8:  BRA    2440
22AA:  MOVFF  F4,FF
22AE:  MOVFF  F3,FE
22B2:  MOVFF  F2,FD
22B6:  MOVFF  F1,FC
22BA:  MOVLW  80
22BC:  MOVLB  1
22BE:  MOVWF  x03
22C0:  MOVLW  96
22C2:  MOVWF  x02
22C4:  MOVLW  18
22C6:  MOVWF  x01
22C8:  MOVLW  96
22CA:  MOVWF  x00
22CC:  MOVLB  0
22CE:  CALL   0E92
22D2:  BTFSS  FD8.0
22D4:  BRA    2430
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
22D6:  MOVFF  F4,FF
22DA:  MOVFF  F3,FE
22DE:  MOVFF  F2,FD
22E2:  MOVFF  F1,FC
22E6:  MOVLB  1
22E8:  CLRF   x03
22EA:  CLRF   x02
22EC:  CLRF   x01
22EE:  MOVLW  8E
22F0:  MOVWF  x00
22F2:  MOVLB  0
22F4:  CALL   189C
22F8:  MOVFF  03,FF
22FC:  MOVFF  02,FE
2300:  MOVFF  01,FD
2304:  MOVFF  00,FC
2308:  RCALL  21E0
230A:  MOVFF  02,FA
230E:  MOVFF  01,F9
....................       y = 32768.0*(y/32768.0 - (float32)l); 
2312:  MOVFF  F4,FF
2316:  MOVFF  F3,FE
231A:  MOVFF  F2,FD
231E:  MOVFF  F1,FC
2322:  MOVLB  1
2324:  CLRF   x03
2326:  CLRF   x02
2328:  CLRF   x01
232A:  MOVLW  8E
232C:  MOVWF  x00
232E:  MOVLB  0
2330:  CALL   189C
2334:  MOVFF  00,FC
2338:  MOVFF  01,FD
233C:  MOVFF  02,FE
2340:  MOVFF  03,FF
2344:  MOVFF  FA,101
2348:  MOVFF  F9,100
234C:  CALL   0BBE
2350:  BSF    FD8.1
2352:  MOVFF  FF,103
2356:  MOVFF  FE,102
235A:  MOVFF  FD,101
235E:  MOVFF  FC,100
2362:  MOVFF  03,107
2366:  MOVFF  02,106
236A:  MOVFF  01,105
236E:  MOVFF  00,104
2372:  CALL   1A18
2376:  CLRF   xFF
2378:  CLRF   xFE
237A:  CLRF   xFD
237C:  MOVLW  8E
237E:  MOVWF  xFC
2380:  MOVFF  03,103
2384:  MOVFF  02,102
2388:  MOVFF  01,101
238C:  MOVFF  00,100
2390:  RCALL  1E32
2392:  MOVFF  03,F4
2396:  MOVFF  02,F3
239A:  MOVFF  01,F2
239E:  MOVFF  00,F1
....................   res = 32768.0*(float32)l; 
23A2:  MOVFF  FA,101
23A6:  MOVFF  F9,100
23AA:  CALL   0BBE
23AE:  CLRF   xFF
23B0:  CLRF   xFE
23B2:  CLRF   xFD
23B4:  MOVLW  8E
23B6:  MOVWF  xFC
23B8:  MOVFF  03,103
23BC:  MOVFF  02,102
23C0:  MOVFF  01,101
23C4:  MOVFF  00,100
23C8:  RCALL  1E32
23CA:  MOVFF  03,F8
23CE:  MOVFF  02,F7
23D2:  MOVFF  01,F6
23D6:  MOVFF  00,F5
....................   res += (float32)(unsigned int16)y; 
23DA:  MOVFF  F4,FF
23DE:  MOVFF  F3,FE
23E2:  MOVFF  F2,FD
23E6:  MOVFF  F1,FC
23EA:  RCALL  21E0
23EC:  MOVFF  02,101
23F0:  MOVFF  01,100
23F4:  CALL   0BBE
23F8:  BCF    FD8.1
23FA:  MOVFF  F8,103
23FE:  MOVFF  F7,102
2402:  MOVFF  F6,101
2406:  MOVFF  F5,100
240A:  MOVFF  03,107
240E:  MOVFF  02,106
2412:  MOVFF  01,105
2416:  MOVFF  00,104
241A:  CALL   1A18
241E:  MOVFF  03,F8
2422:  MOVFF  02,F7
2426:  MOVFF  01,F6
242A:  MOVFF  00,F5
....................  } 
....................  
....................  else 
242E:  BRA    2440
....................   res = y; 
2430:  MOVFF  F4,F8
2434:  MOVFF  F3,F7
2438:  MOVFF  F2,F6
243C:  MOVFF  F1,F5
....................  
....................  y = y - (float32)(unsigned int16)y; 
2440:  MOVFF  F4,FF
2444:  MOVFF  F3,FE
2448:  MOVFF  F2,FD
244C:  MOVFF  F1,FC
2450:  RCALL  21E0
2452:  MOVFF  02,101
2456:  MOVFF  01,100
245A:  CALL   0BBE
245E:  BSF    FD8.1
2460:  MOVFF  F4,103
2464:  MOVFF  F3,102
2468:  MOVFF  F2,101
246C:  MOVFF  F1,100
2470:  MOVFF  03,107
2474:  MOVFF  02,106
2478:  MOVFF  01,105
247C:  MOVFF  00,104
2480:  CALL   1A18
2484:  MOVFF  03,F4
2488:  MOVFF  02,F3
248C:  MOVFF  01,F2
2490:  MOVFF  00,F1
....................  
....................  if (s) 
2494:  BTFSS  xFB.0
2496:  BRA    249E
....................   res = -res; 
2498:  MOVF   xF6,W
249A:  XORLW  80
249C:  MOVWF  xF6
....................  
....................  if (y != 0) 
249E:  MOVFF  F4,FF
24A2:  MOVFF  F3,FE
24A6:  MOVFF  F2,FD
24AA:  MOVFF  F1,FC
24AE:  MOVLB  1
24B0:  CLRF   x03
24B2:  CLRF   x02
24B4:  CLRF   x01
24B6:  CLRF   x00
24B8:  MOVLB  0
24BA:  CALL   0E92
24BE:  BZ    2538
....................  { 
....................   if (s == 1 && n == 0) 
24C0:  BTFSS  xFB.0
24C2:  BRA    24FC
24C4:  MOVF   xF0,F
24C6:  BNZ   24FC
....................    res -= 1.0; 
24C8:  BSF    FD8.1
24CA:  MOVFF  F8,103
24CE:  MOVFF  F7,102
24D2:  MOVFF  F6,101
24D6:  MOVFF  F5,100
24DA:  MOVLB  1
24DC:  CLRF   x07
24DE:  CLRF   x06
24E0:  CLRF   x05
24E2:  MOVLW  7F
24E4:  MOVWF  x04
24E6:  MOVLB  0
24E8:  CALL   1A18
24EC:  MOVFF  03,F8
24F0:  MOVFF  02,F7
24F4:  MOVFF  01,F6
24F8:  MOVFF  00,F5
....................  
....................   if (s == 0 && n == 1) 
24FC:  BTFSC  xFB.0
24FE:  BRA    2538
2500:  DECFSZ xF0,W
2502:  BRA    2538
....................    res += 1.0; 
2504:  BCF    FD8.1
2506:  MOVFF  F8,103
250A:  MOVFF  F7,102
250E:  MOVFF  F6,101
2512:  MOVFF  F5,100
2516:  MOVLB  1
2518:  CLRF   x07
251A:  CLRF   x06
251C:  CLRF   x05
251E:  MOVLW  7F
2520:  MOVWF  x04
2522:  MOVLB  0
2524:  CALL   1A18
2528:  MOVFF  03,F8
252C:  MOVFF  02,F7
2530:  MOVFF  01,F6
2534:  MOVFF  00,F5
....................  } 
....................  if (x == 0) 
2538:  MOVFF  EF,FF
253C:  MOVFF  EE,FE
2540:  MOVFF  ED,FD
2544:  MOVFF  EC,FC
2548:  MOVLB  1
254A:  CLRF   x03
254C:  CLRF   x02
254E:  CLRF   x01
2550:  CLRF   x00
2552:  MOVLB  0
2554:  CALL   0E92
2558:  BNZ   2562
....................     res = 0; 
255A:  CLRF   xF8
255C:  CLRF   xF7
255E:  CLRF   xF6
2560:  CLRF   xF5
....................  
....................  return (res); 
2562:  MOVFF  F5,00
2566:  MOVFF  F6,01
256A:  MOVFF  F7,02
256E:  MOVFF  F8,03
.................... } 
2572:  GOTO   258A (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
2576:  MOVFF  EB,EF
257A:  MOVFF  EA,EE
257E:  MOVFF  E9,ED
2582:  MOVFF  E8,EC
2586:  CLRF   xF0
2588:  BRA    2218
.................... } 
258A:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0968:  MOVLB  1
096A:  SWAPF  x00,W
096C:  ANDLW  F0
096E:  MOVWF  00
0970:  MOVLW  0F
0972:  ANDWF  F83,W
0974:  IORWF  00,W
0976:  MOVWF  F83
....................       delay_cycles(30);//30 
0978:  MOVLW  09
097A:  MOVWF  00
097C:  DECFSZ 00,F
097E:  BRA    097C
0980:  BRA    0982
....................       lcd.enable = 1; 
0982:  BSF    F83.3
....................       delay_us(55);//55 
0984:  MOVLW  49
0986:  MOVWF  00
0988:  DECFSZ 00,F
098A:  BRA    0988
....................       lcd.enable = 0; 
098C:  BCF    F83.3
.................... } 
098E:  MOVLB  0
0990:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0992:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0994:  MOVLW  01
0996:  MOVWF  xFF
0998:  RCALL  0940
....................       lcd.rs = address; 
099A:  BTFSS  xFD.0
099C:  BCF    F83.1
099E:  BTFSC  xFD.0
09A0:  BSF    F83.1
....................       delay_cycles(30);//30 
09A2:  MOVLW  09
09A4:  MOVWF  00
09A6:  DECFSZ 00,F
09A8:  BRA    09A6
09AA:  BRA    09AC
....................       lcd.rw = 0; 
09AC:  BCF    F83.2
....................       delay_cycles(30);//30 
09AE:  MOVLW  09
09B0:  MOVWF  00
09B2:  DECFSZ 00,F
09B4:  BRA    09B2
09B6:  BRA    09B8
....................       lcd.enable = 0; 
09B8:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
09BA:  SWAPF  xFE,W
09BC:  MOVWF  xFF
09BE:  MOVLW  0F
09C0:  ANDWF  xFF,F
09C2:  MOVFF  FF,100
09C6:  RCALL  0968
....................       lcd_send_nibble(n & 0xf); 
09C8:  MOVF   xFE,W
09CA:  ANDLW  0F
09CC:  MOVWF  xFF
09CE:  MOVFF  FE8,100
09D2:  RCALL  0968
.................... } 
09D4:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
09D6:  MOVLW  00
09D8:  MOVWF  F95
....................     lcd.rs = 0; 
09DA:  BCF    F83.1
....................     lcd.rw = 0; 
09DC:  BCF    F83.2
....................     lcd.enable = 0; 
09DE:  BCF    F83.3
....................     delay_ms(15); 
09E0:  MOVLW  0F
09E2:  MOVWF  xFF
09E4:  RCALL  0940
....................     for(i=1;i<=3;++i) { 
09E6:  MOVLW  01
09E8:  MOVWF  xE8
09EA:  MOVF   xE8,W
09EC:  SUBLW  03
09EE:  BNC   0A04
....................        lcd_send_nibble(3); 
09F0:  MOVLW  03
09F2:  MOVLB  1
09F4:  MOVWF  x00
09F6:  MOVLB  0
09F8:  RCALL  0968
....................        delay_ms(5); 
09FA:  MOVLW  05
09FC:  MOVWF  xFF
09FE:  RCALL  0940
....................     } 
0A00:  INCF   xE8,F
0A02:  BRA    09EA
....................     lcd_send_nibble(2); 
0A04:  MOVLW  02
0A06:  MOVLB  1
0A08:  MOVWF  x00
0A0A:  MOVLB  0
0A0C:  RCALL  0968
....................     for(i=0;i<=3;++i) 
0A0E:  CLRF   xE8
0A10:  MOVF   xE8,W
0A12:  SUBLW  03
0A14:  BNC   0A3A
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0A16:  CLRF   03
0A18:  MOVF   xE8,W
0A1A:  MOVFF  FF2,E9
0A1E:  BCF    FF2.6
0A20:  BCF    FF2.7
0A22:  CALL   0140
0A26:  BTFSC  xE9.6
0A28:  BSF    FF2.6
0A2A:  BTFSC  xE9.7
0A2C:  BSF    FF2.7
0A2E:  MOVWF  xE9
0A30:  CLRF   xFD
0A32:  MOVWF  xFE
0A34:  RCALL  0992
0A36:  INCF   xE8,F
0A38:  BRA    0A10
.................... } 
0A3A:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0A72:  MOVLW  01
0A74:  SUBWF  xFB,W
0A76:  ADDLW  FC
0A78:  BC    0A98
0A7A:  ADDLW  04
0A7C:  GOTO   0AA8
....................      case 1 : address=0x80;break; 
0A80:  MOVLW  80
0A82:  MOVWF  xFC
0A84:  BRA    0A98
....................      case 2 : address=0xc0;break; 
0A86:  MOVLW  C0
0A88:  MOVWF  xFC
0A8A:  BRA    0A98
....................      case 3 : address=0x94;break; 
0A8C:  MOVLW  94
0A8E:  MOVWF  xFC
0A90:  BRA    0A98
....................      case 4 : address=0xd4;break; 
0A92:  MOVLW  D4
0A94:  MOVWF  xFC
0A96:  BRA    0A98
....................    } 
....................    address+=x-1; 
0A98:  MOVLW  01
0A9A:  SUBWF  xFA,W
0A9C:  ADDWF  xFC,F
....................    lcd_send_byte(0,address); 
0A9E:  CLRF   xFD
0AA0:  MOVFF  FC,FE
0AA4:  RCALL  0992
.................... } 
0AA6:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0ADA:  MOVF   xF9,W
0ADC:  SUBLW  F1
0ADE:  BNZ   0AE4
....................    { 
....................       c=238; 
0AE0:  MOVLW  EE
0AE2:  MOVWF  xF9
....................    } 
....................    if(c=='Ñ') 
0AE4:  MOVF   xF9,W
0AE6:  SUBLW  D1
0AE8:  BNZ   0AEE
....................    { 
....................       c=255; 
0AEA:  MOVLW  FF
0AEC:  MOVWF  xF9
....................    } 
....................     
....................    switch (c) { 
0AEE:  MOVF   xF9,W
0AF0:  XORLW  0C
0AF2:  BZ    0AFE
0AF4:  XORLW  06
0AF6:  BZ    0B12
0AF8:  XORLW  02
0AFA:  BZ    0B20
0AFC:  BRA    0B2A
....................      case '\f'   : lcd_send_byte(0,1); 
0AFE:  CLRF   xFD
0B00:  MOVLW  01
0B02:  MOVWF  xFE
0B04:  RCALL  0992
....................                    lcdline=1; 
0B06:  MOVLW  01
0B08:  MOVWF  28
....................                    delay_ms(2); 
0B0A:  MOVLW  02
0B0C:  MOVWF  xFF
0B0E:  RCALL  0940
....................                                            break; 
0B10:  BRA    0B36
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0B12:  INCF   28,F
0B14:  MOVLW  01
0B16:  MOVWF  xFA
0B18:  MOVFF  28,FB
0B1C:  RCALL  0A72
0B1E:  BRA    0B36
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0B20:  CLRF   xFD
0B22:  MOVLW  10
0B24:  MOVWF  xFE
0B26:  RCALL  0992
0B28:  BRA    0B36
....................      default     : lcd_send_byte(1,c);     break; 
0B2A:  MOVLW  01
0B2C:  MOVWF  xFD
0B2E:  MOVFF  F9,FE
0B32:  RCALL  0992
0B34:  BRA    0B36
....................    } 
.................... } 
0B36:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF,flag_arriba=OFF,Entro=0; 
.................... short flagdn=0,flagup=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,n=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0,tdown=0,tright=0,tleft=0,tup=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
1652:  DECFSZ xE9,W
1654:  BRA    166E
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1656:  MOVLW  02
1658:  MOVWF  xFA
165A:  MOVFF  EA,FB
165E:  CALL   0A72
1662:  MOVLW  64
1664:  MOVWF  FF6
1666:  MOVLW  01
1668:  MOVWF  FF7
166A:  CALL   0B38
....................    if(x==2) 
166E:  MOVF   xE9,W
1670:  SUBLW  02
1672:  BNZ   168C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1674:  MOVLW  02
1676:  MOVWF  xFA
1678:  MOVFF  EA,FB
167C:  CALL   0A72
1680:  MOVLW  78
1682:  MOVWF  FF6
1684:  MOVLW  01
1686:  MOVWF  FF7
1688:  CALL   0B38
....................    if(x==3) 
168C:  MOVF   xE9,W
168E:  SUBLW  03
1690:  BNZ   16AA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1692:  MOVLW  02
1694:  MOVWF  xFA
1696:  MOVFF  EA,FB
169A:  CALL   0A72
169E:  MOVLW  8C
16A0:  MOVWF  FF6
16A2:  MOVLW  01
16A4:  MOVWF  FF7
16A6:  CALL   0B38
....................    if(x==4) 
16AA:  MOVF   xE9,W
16AC:  SUBLW  04
16AE:  BNZ   16C8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
16B0:  MOVLW  02
16B2:  MOVWF  xFA
16B4:  MOVFF  EA,FB
16B8:  CALL   0A72
16BC:  MOVLW  A0
16BE:  MOVWF  FF6
16C0:  MOVLW  01
16C2:  MOVWF  FF7
16C4:  CALL   0B38
....................     
....................    if(x==5) 
16C8:  MOVF   xE9,W
16CA:  SUBLW  05
16CC:  BNZ   1706
....................    {if(estadoalarma==0) 
16CE:  BTFSC  2A.4
16D0:  BRA    16EA
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
16D2:  MOVLW  02
16D4:  MOVWF  xFA
16D6:  MOVFF  EA,FB
16DA:  CALL   0A72
16DE:  MOVLW  B4
16E0:  MOVWF  FF6
16E2:  MOVLW  01
16E4:  MOVWF  FF7
16E6:  CALL   0B38
....................    if(estadoalarma==1) 
16EA:  BTFSS  2A.4
16EC:  BRA    1706
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
16EE:  MOVLW  02
16F0:  MOVWF  xFA
16F2:  MOVFF  EA,FB
16F6:  CALL   0A72
16FA:  MOVLW  C8
16FC:  MOVWF  FF6
16FE:  MOVLW  01
1700:  MOVWF  FF7
1702:  CALL   0B38
....................    } 
....................     
....................    if(x==6) 
1706:  MOVF   xE9,W
1708:  SUBLW  06
170A:  BNZ   1724
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
170C:  MOVLW  02
170E:  MOVWF  xFA
1710:  MOVFF  EA,FB
1714:  CALL   0A72
1718:  MOVLW  DC
171A:  MOVWF  FF6
171C:  MOVLW  01
171E:  MOVWF  FF7
1720:  CALL   0B38
.................... } 
1724:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1848:  RLCF   xED,W
184A:  MOVWF  00
184C:  RLCF   00,F
184E:  MOVLW  FC
1850:  ANDWF  00,F
1852:  MOVFF  00,01
1856:  MOVF   FC2,W
1858:  ANDLW  C3
185A:  IORWF  00,W
185C:  MOVWF  FC2
185E:  MOVLW  0A
1860:  MOVWF  xFF
1862:  CALL   0940
1866:  BSF    FC2.1
1868:  BTFSC  FC2.1
186A:  BRA    1868
186C:  MOVFF  FC4,101
1870:  MOVFF  FC3,100
1874:  MOVLB  0
1876:  CALL   0BBE
187A:  MOVFF  03,F1
187E:  MOVFF  02,F0
1882:  MOVFF  01,EF
1886:  MOVFF  00,EE
188A:  MOVFF  EE,00
188E:  MOVFF  EF,01
1892:  MOVFF  F0,02
1896:  MOVFF  F1,03
.................... } 
189A:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1C90:  CLRF   xEC
1C92:  CLRF   xEB
1C94:  CLRF   xEA
1C96:  CLRF   xE9
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
1C98:  CLRF   xED
1C9A:  RCALL  1848
1C9C:  MOVFF  03,B8
1CA0:  MOVFF  02,B7
1CA4:  MOVFF  01,B6
1CA8:  MOVFF  00,B5
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1CAC:  MOVFF  B8,FF
1CB0:  MOVFF  B7,FE
1CB4:  MOVFF  B6,FD
1CB8:  MOVFF  B5,FC
1CBC:  MOVFF  C8,103
1CC0:  MOVFF  C7,102
1CC4:  MOVFF  C6,101
1CC8:  MOVFF  C5,100
1CCC:  RCALL  189C
1CCE:  MOVFF  00,ED
1CD2:  MOVFF  01,EE
1CD6:  MOVFF  02,EF
1CDA:  MOVFF  03,F0
1CDE:  BSF    FD8.1
1CE0:  MOVFF  03,103
1CE4:  MOVFF  02,102
1CE8:  MOVFF  01,101
1CEC:  MOVFF  00,100
1CF0:  MOVLB  1
1CF2:  CLRF   x07
1CF4:  CLRF   x06
1CF6:  CLRF   x05
1CF8:  MOVLW  7F
1CFA:  MOVWF  x04
1CFC:  MOVLB  0
1CFE:  RCALL  1A18
1D00:  MOVFF  03,BC
1D04:  MOVFF  02,BB
1D08:  MOVFF  01,BA
1D0C:  MOVFF  00,B9
....................     
....................    if(Presion<0.0) 
1D10:  MOVFF  BC,FF
1D14:  MOVFF  BB,FE
1D18:  MOVFF  BA,FD
1D1C:  MOVFF  B9,FC
1D20:  MOVLB  1
1D22:  CLRF   x03
1D24:  CLRF   x02
1D26:  CLRF   x01
1D28:  CLRF   x00
1D2A:  MOVLB  0
1D2C:  CALL   0E92
1D30:  BNC   1D3A
....................    { 
....................       Presion=0.0; 
1D32:  CLRF   xBC
1D34:  CLRF   xBB
1D36:  CLRF   xBA
1D38:  CLRF   xB9
....................    } 
....................  
....................    if(r>media-1) 
1D3A:  MOVLW  01
1D3C:  SUBWF  xE8,W
1D3E:  SUBWF  3F,W
1D40:  BZ    1D46
1D42:  BNC   1D46
....................    {r=0;} 
1D44:  CLRF   3F
....................    PromPresion[r]=Presion;r++; 
1D46:  MOVF   3F,W
1D48:  MULLW  04
1D4A:  MOVF   FF3,W
1D4C:  CLRF   03
1D4E:  ADDLW  65
1D50:  MOVWF  FE9
1D52:  MOVLW  00
1D54:  ADDWFC 03,W
1D56:  MOVWF  FEA
1D58:  MOVFF  B9,FEF
1D5C:  MOVFF  BA,FEC
1D60:  MOVFF  BB,FEC
1D64:  MOVFF  BC,FEC
1D68:  INCF   3F,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1D6A:  CLRF   40
1D6C:  MOVLW  01
1D6E:  SUBWF  xE8,W
1D70:  SUBWF  40,W
1D72:  BZ    1D76
1D74:  BC    1DE0
....................    { 
....................       promediopresion+=PromPresion[q]; 
1D76:  MOVF   40,W
1D78:  MULLW  04
1D7A:  MOVF   FF3,W
1D7C:  CLRF   03
1D7E:  ADDLW  65
1D80:  MOVWF  FE9
1D82:  MOVLW  00
1D84:  ADDWFC 03,W
1D86:  MOVWF  FEA
1D88:  MOVFF  FEF,00
1D8C:  MOVFF  FEC,01
1D90:  MOVFF  FEC,02
1D94:  MOVFF  FEC,03
1D98:  MOVFF  FEA,EE
1D9C:  MOVFF  FE9,ED
1DA0:  BCF    FD8.1
1DA2:  MOVFF  EC,103
1DA6:  MOVFF  EB,102
1DAA:  MOVFF  EA,101
1DAE:  MOVFF  E9,100
1DB2:  MOVFF  03,107
1DB6:  MOVFF  02,106
1DBA:  MOVFF  01,105
1DBE:  MOVFF  00,104
1DC2:  RCALL  1A18
1DC4:  MOVFF  EE,FEA
1DC8:  MOVFF  ED,FE9
1DCC:  MOVFF  03,EC
1DD0:  MOVFF  02,EB
1DD4:  MOVFF  01,EA
1DD8:  MOVFF  00,E9
....................    }  
1DDC:  INCF   40,F
1DDE:  BRA    1D6C
....................    promediopresion=promediopresion/media;    
1DE0:  MOVLB  1
1DE2:  CLRF   x01
1DE4:  MOVFF  E8,100
1DE8:  MOVLB  0
1DEA:  CALL   0BBE
1DEE:  MOVFF  EC,FF
1DF2:  MOVFF  EB,FE
1DF6:  MOVFF  EA,FD
1DFA:  MOVFF  E9,FC
1DFE:  MOVFF  03,103
1E02:  MOVFF  02,102
1E06:  MOVFF  01,101
1E0A:  MOVFF  00,100
1E0E:  RCALL  189C
1E10:  MOVFF  03,EC
1E14:  MOVFF  02,EB
1E18:  MOVFF  01,EA
1E1C:  MOVFF  00,E9
....................     
....................    return promediopresion; 
1E20:  MOVFF  E9,00
1E24:  MOVFF  EA,01
1E28:  MOVFF  EB,02
1E2C:  MOVFF  EC,03
.................... } 
1E30:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0A3C:  MOVLW  C8
0A3E:  MOVWF  xFF
0A40:  RCALL  0940
....................    lcd_init(); 
0A42:  RCALL  09D6
....................    set_tris_e(0XFF); 
0A44:  MOVLW  FF
0A46:  MOVWF  F96
....................    //enable_interrupts(global); 
....................    enable_interrupts(INT_EXT_L2H); 
0A48:  BSF    FF2.4
0A4A:  BSF    FF1.6
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
0A4C:  MOVLW  C7
0A4E:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0A50:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0A52:  MOVLW  85
0A54:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0A56:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0A58:  MOVF   FC1,W
0A5A:  ANDLW  C0
0A5C:  IORLW  0E
0A5E:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0A60:  BCF    FC0.0
0A62:  BSF    FC0.1
0A64:  BCF    FC0.2
0A66:  BSF    FC0.7
0A68:  BSF    FC2.0
....................    enable_interrupts(global); 
0A6A:  MOVLW  C0
0A6C:  IORWF  FF2,F
.................... } 
0A6E:  GOTO   2754 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
0B58:  MOVLW  01
0B5A:  MOVWF  xFA
0B5C:  MOVWF  xFB
0B5E:  RCALL  0A72
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
0B60:  MOVLW  F0
0B62:  MOVWF  FF6
0B64:  MOVLW  01
0B66:  MOVWF  FF7
0B68:  RCALL  0B38
....................    lcd_gotoxy(1,2); 
0B6A:  MOVLW  01
0B6C:  MOVWF  xFA
0B6E:  MOVLW  02
0B70:  MOVWF  xFB
0B72:  RCALL  0A72
....................    printf(lcd_putc,"      VERTICAL      "); 
0B74:  MOVLW  06
0B76:  MOVWF  FF6
0B78:  MOVLW  02
0B7A:  MOVWF  FF7
0B7C:  RCALL  0B38
....................    lcd_gotoxy(1,3); 
0B7E:  MOVLW  01
0B80:  MOVWF  xFA
0B82:  MOVLW  03
0B84:  MOVWF  xFB
0B86:  RCALL  0A72
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0B88:  MOVLW  1C
0B8A:  MOVWF  FF6
0B8C:  MOVLW  02
0B8E:  MOVWF  FF7
0B90:  RCALL  0B38
....................    lcd_gotoxy(1,4); 
0B92:  MOVLW  01
0B94:  MOVWF  xFA
0B96:  MOVLW  04
0B98:  MOVWF  xFB
0B9A:  RCALL  0A72
....................    printf(lcd_putc,"     REF:JPCV36     "); 
0B9C:  MOVLW  32
0B9E:  MOVWF  FF6
0BA0:  MOVLW  02
0BA2:  MOVWF  FF7
0BA4:  RCALL  0B38
....................    delay_ms(2000); 
0BA6:  MOVLW  08
0BA8:  MOVWF  xE8
0BAA:  MOVLW  FA
0BAC:  MOVWF  xFF
0BAE:  RCALL  0940
0BB0:  DECFSZ xE8,F
0BB2:  BRA    0BAA
....................    printf(lcd_putc,"\f"); 
0BB4:  MOVLW  0C
0BB6:  MOVWF  xF9
0BB8:  RCALL  0ADA
.................... } 
0BBA:  GOTO   2758 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0BF4:  MOVFF  FF2,E8
0BF8:  BCF    FF2.6
0BFA:  BCF    FF2.7
0BFC:  CLRF   FA9
0BFE:  BCF    FA6.6
0C00:  BCF    FA6.7
0C02:  BSF    FA6.0
0C04:  MOVF   FA8,W
0C06:  BTFSC  xE8.6
0C08:  BSF    FF2.6
0C0A:  BTFSC  xE8.7
0C0C:  BSF    FF2.7
0C0E:  MOVWF  4D
....................    delay_ms(20);  
0C10:  MOVLW  14
0C12:  MOVWF  xFF
0C14:  RCALL  0940
....................    contrasena[1]=read_eeprom(1); 
0C16:  MOVFF  FF2,E8
0C1A:  BCF    FF2.6
0C1C:  BCF    FF2.7
0C1E:  MOVLW  01
0C20:  MOVWF  FA9
0C22:  BCF    FA6.6
0C24:  BCF    FA6.7
0C26:  BSF    FA6.0
0C28:  MOVF   FA8,W
0C2A:  BTFSC  xE8.6
0C2C:  BSF    FF2.6
0C2E:  BTFSC  xE8.7
0C30:  BSF    FF2.7
0C32:  MOVWF  4E
....................    delay_ms(20); 
0C34:  MOVLW  14
0C36:  MOVWF  xFF
0C38:  RCALL  0940
....................    contrasena[2]=read_eeprom(2); 
0C3A:  MOVFF  FF2,E8
0C3E:  BCF    FF2.6
0C40:  BCF    FF2.7
0C42:  MOVLW  02
0C44:  MOVWF  FA9
0C46:  BCF    FA6.6
0C48:  BCF    FA6.7
0C4A:  BSF    FA6.0
0C4C:  MOVF   FA8,W
0C4E:  BTFSC  xE8.6
0C50:  BSF    FF2.6
0C52:  BTFSC  xE8.7
0C54:  BSF    FF2.7
0C56:  MOVWF  4F
....................    delay_ms(20);  
0C58:  MOVLW  14
0C5A:  MOVWF  xFF
0C5C:  RCALL  0940
....................    contrasena[3]=read_eeprom(3); 
0C5E:  MOVFF  FF2,E8
0C62:  BCF    FF2.6
0C64:  BCF    FF2.7
0C66:  MOVLW  03
0C68:  MOVWF  FA9
0C6A:  BCF    FA6.6
0C6C:  BCF    FA6.7
0C6E:  BSF    FA6.0
0C70:  MOVF   FA8,W
0C72:  BTFSC  xE8.6
0C74:  BSF    FF2.6
0C76:  BTFSC  xE8.7
0C78:  BSF    FF2.7
0C7A:  MOVWF  50
....................    delay_ms(20); 
0C7C:  MOVLW  14
0C7E:  MOVWF  xFF
0C80:  RCALL  0940
....................    estadoalarma=read_eeprom(4); 
0C82:  MOVFF  FF2,E8
0C86:  BCF    FF2.6
0C88:  BCF    FF2.7
0C8A:  MOVLW  04
0C8C:  MOVWF  FA9
0C8E:  BCF    FA6.6
0C90:  BCF    FA6.7
0C92:  BSF    FA6.0
0C94:  MOVF   FA8,W
0C96:  BTFSC  xE8.6
0C98:  BSF    FF2.6
0C9A:  BTFSC  xE8.7
0C9C:  BSF    FF2.7
0C9E:  MOVWF  01
0CA0:  BCF    2A.4
0CA2:  BTFSC  01.0
0CA4:  BSF    2A.4
....................    delay_ms(20); 
0CA6:  MOVLW  14
0CA8:  MOVWF  xFF
0CAA:  RCALL  0940
....................    tempo_minutos=read_eeprom(5); 
0CAC:  MOVFF  FF2,E8
0CB0:  BCF    FF2.6
0CB2:  BCF    FF2.7
0CB4:  MOVLW  05
0CB6:  MOVWF  FA9
0CB8:  BCF    FA6.6
0CBA:  BCF    FA6.7
0CBC:  BSF    FA6.0
0CBE:  MOVF   FA8,W
0CC0:  BTFSC  xE8.6
0CC2:  BSF    FF2.6
0CC4:  BTFSC  xE8.7
0CC6:  BSF    FF2.7
0CC8:  MOVWF  3B
....................    delay_ms(20); 
0CCA:  MOVLW  14
0CCC:  MOVWF  xFF
0CCE:  RCALL  0940
....................    tempo_segundos=read_eeprom(6); 
0CD0:  MOVFF  FF2,E8
0CD4:  BCF    FF2.6
0CD6:  BCF    FF2.7
0CD8:  MOVLW  06
0CDA:  MOVWF  FA9
0CDC:  BCF    FA6.6
0CDE:  BCF    FA6.7
0CE0:  BSF    FA6.0
0CE2:  MOVF   FA8,W
0CE4:  BTFSC  xE8.6
0CE6:  BSF    FF2.6
0CE8:  BTFSC  xE8.7
0CEA:  BSF    FF2.7
0CEC:  MOVWF  3C
....................    delay_ms(20); 
0CEE:  MOVLW  14
0CF0:  MOVWF  xFF
0CF2:  RCALL  0940
....................    segundos=read_eeprom(7); 
0CF4:  MOVFF  FF2,E8
0CF8:  BCF    FF2.6
0CFA:  BCF    FF2.7
0CFC:  MOVLW  07
0CFE:  MOVWF  FA9
0D00:  BCF    FA6.6
0D02:  BCF    FA6.7
0D04:  BSF    FA6.0
0D06:  MOVF   FA8,W
0D08:  BTFSC  xE8.6
0D0A:  BSF    FF2.6
0D0C:  BTFSC  xE8.7
0D0E:  BSF    FF2.7
0D10:  MOVWF  35
....................    delay_ms(20); 
0D12:  MOVLW  14
0D14:  MOVWF  xFF
0D16:  RCALL  0940
....................    minutos=read_eeprom(8); 
0D18:  MOVFF  FF2,E8
0D1C:  BCF    FF2.6
0D1E:  BCF    FF2.7
0D20:  MOVLW  08
0D22:  MOVWF  FA9
0D24:  BCF    FA6.6
0D26:  BCF    FA6.7
0D28:  BSF    FA6.0
0D2A:  MOVF   FA8,W
0D2C:  BTFSC  xE8.6
0D2E:  BSF    FF2.6
0D30:  BTFSC  xE8.7
0D32:  BSF    FF2.7
0D34:  MOVWF  36
....................    delay_ms(20); 
0D36:  MOVLW  14
0D38:  MOVWF  xFF
0D3A:  RCALL  0940
....................    horasL=read_eeprom(9); 
0D3C:  MOVFF  FF2,E8
0D40:  BCF    FF2.6
0D42:  BCF    FF2.7
0D44:  MOVLW  09
0D46:  MOVWF  FA9
0D48:  BCF    FA6.6
0D4A:  BCF    FA6.7
0D4C:  BSF    FA6.0
0D4E:  MOVF   FA8,W
0D50:  BTFSC  xE8.6
0D52:  BSF    FF2.6
0D54:  BTFSC  xE8.7
0D56:  BSF    FF2.7
0D58:  MOVWF  37
....................    delay_ms(20); 
0D5A:  MOVLW  14
0D5C:  MOVWF  xFF
0D5E:  RCALL  0940
....................    horasH=read_eeprom(10); 
0D60:  MOVFF  FF2,E8
0D64:  BCF    FF2.6
0D66:  BCF    FF2.7
0D68:  MOVLW  0A
0D6A:  MOVWF  FA9
0D6C:  BCF    FA6.6
0D6E:  BCF    FA6.7
0D70:  BSF    FA6.0
0D72:  MOVF   FA8,W
0D74:  BTFSC  xE8.6
0D76:  BSF    FF2.6
0D78:  BTFSC  xE8.7
0D7A:  BSF    FF2.7
0D7C:  MOVWF  38
....................    delay_ms(20); 
0D7E:  MOVLW  14
0D80:  MOVWF  xFF
0D82:  RCALL  0940
....................    G_l=read_eeprom(11); 
0D84:  MOVFF  FF2,E8
0D88:  BCF    FF2.6
0D8A:  BCF    FF2.7
0D8C:  MOVLW  0B
0D8E:  MOVWF  FA9
0D90:  BCF    FA6.6
0D92:  BCF    FA6.7
0D94:  BSF    FA6.0
0D96:  MOVF   FA8,W
0D98:  BTFSC  xE8.6
0D9A:  BSF    FF2.6
0D9C:  BTFSC  xE8.7
0D9E:  BSF    FF2.7
0DA0:  MOVWF  39
....................    delay_ms(20); 
0DA2:  MOVLW  14
0DA4:  MOVWF  xFF
0DA6:  RCALL  0940
....................    G_h=read_eeprom(12); 
0DA8:  MOVFF  FF2,E8
0DAC:  BCF    FF2.6
0DAE:  BCF    FF2.7
0DB0:  MOVLW  0C
0DB2:  MOVWF  FA9
0DB4:  BCF    FA6.6
0DB6:  BCF    FA6.7
0DB8:  BSF    FA6.0
0DBA:  MOVF   FA8,W
0DBC:  BTFSC  xE8.6
0DBE:  BSF    FF2.6
0DC0:  BTFSC  xE8.7
0DC2:  BSF    FF2.7
0DC4:  MOVWF  3A
....................    delay_ms(20); 
0DC6:  MOVLW  14
0DC8:  MOVWF  xFF
0DCA:  RCALL  0940
....................    Vel1=read_eeprom(13); 
0DCC:  MOVFF  FF2,E8
0DD0:  BCF    FF2.6
0DD2:  BCF    FF2.7
0DD4:  MOVLW  0D
0DD6:  MOVWF  FA9
0DD8:  BCF    FA6.6
0DDA:  BCF    FA6.7
0DDC:  BSF    FA6.0
0DDE:  MOVF   FA8,W
0DE0:  BTFSC  xE8.6
0DE2:  BSF    FF2.6
0DE4:  BTFSC  xE8.7
0DE6:  BSF    FF2.7
0DE8:  MOVWF  56
....................    delay_ms(20); 
0DEA:  MOVLW  14
0DEC:  MOVWF  xFF
0DEE:  RCALL  0940
....................    codigoSubir=read_eeprom(15); 
0DF0:  MOVFF  FF2,E8
0DF4:  BCF    FF2.6
0DF6:  BCF    FF2.7
0DF8:  MOVLW  0F
0DFA:  MOVWF  FA9
0DFC:  BCF    FA6.6
0DFE:  BCF    FA6.7
0E00:  BSF    FA6.0
0E02:  MOVF   FA8,W
0E04:  BTFSC  xE8.6
0E06:  BSF    FF2.6
0E08:  BTFSC  xE8.7
0E0A:  BSF    FF2.7
0E0C:  MOVWF  52
....................    delay_ms(20); 
0E0E:  MOVLW  14
0E10:  MOVWF  xFF
0E12:  RCALL  0940
....................    codigoBajar=read_eeprom(16); 
0E14:  MOVFF  FF2,E8
0E18:  BCF    FF2.6
0E1A:  BCF    FF2.7
0E1C:  MOVLW  10
0E1E:  MOVWF  FA9
0E20:  BCF    FA6.6
0E22:  BCF    FA6.7
0E24:  BSF    FA6.0
0E26:  MOVF   FA8,W
0E28:  BTFSC  xE8.6
0E2A:  BSF    FF2.6
0E2C:  BTFSC  xE8.7
0E2E:  BSF    FF2.7
0E30:  MOVWF  53
....................    delay_ms(20); 
0E32:  MOVLW  14
0E34:  MOVWF  xFF
0E36:  RCALL  0940
....................    codigoDetener=read_eeprom(17); 
0E38:  MOVFF  FF2,E8
0E3C:  BCF    FF2.6
0E3E:  BCF    FF2.7
0E40:  MOVLW  11
0E42:  MOVWF  FA9
0E44:  BCF    FA6.6
0E46:  BCF    FA6.7
0E48:  BSF    FA6.0
0E4A:  MOVF   FA8,W
0E4C:  BTFSC  xE8.6
0E4E:  BSF    FF2.6
0E50:  BTFSC  xE8.7
0E52:  BSF    FF2.7
0E54:  MOVWF  54
....................    delay_ms(20); 
0E56:  MOVLW  14
0E58:  MOVWF  xFF
0E5A:  RCALL  0940
....................    G16=make16(G_h,G_l); 
0E5C:  MOVFF  3A,5C
0E60:  MOVFF  39,5B
....................    G=G16; 
0E64:  MOVFF  5C,101
0E68:  MOVFF  5B,100
0E6C:  RCALL  0BBE
0E6E:  MOVFF  03,C8
0E72:  MOVFF  02,C7
0E76:  MOVFF  01,C6
0E7A:  MOVFF  00,C5
....................    horas=make16(horasH,horasL); 
0E7E:  MOVFF  38,5A
0E82:  MOVFF  37,59
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0E86:  MOVFF  3B,3D
0E8A:  MOVFF  3C,3E
.................... } 
0E8E:  GOTO   275C (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0F38:  BTFSC  4D.7
0F3A:  BRA    0F42
0F3C:  MOVF   4D,W
0F3E:  SUBLW  09
0F40:  BNC   0F46
0F42:  BTFSS  4D.7
0F44:  BRA    0F78
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0F46:  CLRF   4D
0F48:  CLRF   FA9
0F4A:  CLRF   FA8
0F4C:  BCF    FA6.6
0F4E:  BCF    FA6.7
0F50:  BSF    FA6.2
0F52:  MOVF   FF2,W
0F54:  MOVWF  00
0F56:  BCF    FF2.6
0F58:  BCF    FF2.7
0F5A:  MOVLB  F
0F5C:  MOVLW  55
0F5E:  MOVWF  FA7
0F60:  MOVLW  AA
0F62:  MOVWF  FA7
0F64:  BSF    FA6.1
0F66:  BTFSC  FA6.1
0F68:  BRA    0F66
0F6A:  BCF    FA6.2
0F6C:  MOVF   00,W
0F6E:  IORWF  FF2,F
0F70:  MOVLW  14
0F72:  MOVLB  0
0F74:  MOVWF  xFF
0F76:  RCALL  0940
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0F78:  BTFSC  4E.7
0F7A:  BRA    0F82
0F7C:  MOVF   4E,W
0F7E:  SUBLW  09
0F80:  BNC   0F88
0F82:  BTFSC  4E.7
0F84:  BRA    0F88
0F86:  BRA    0FBC
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0F88:  CLRF   4E
0F8A:  MOVLW  01
0F8C:  MOVWF  FA9
0F8E:  CLRF   FA8
0F90:  BCF    FA6.6
0F92:  BCF    FA6.7
0F94:  BSF    FA6.2
0F96:  MOVF   FF2,W
0F98:  MOVWF  00
0F9A:  BCF    FF2.6
0F9C:  BCF    FF2.7
0F9E:  MOVLB  F
0FA0:  MOVLW  55
0FA2:  MOVWF  FA7
0FA4:  MOVLW  AA
0FA6:  MOVWF  FA7
0FA8:  BSF    FA6.1
0FAA:  BTFSC  FA6.1
0FAC:  BRA    0FAA
0FAE:  BCF    FA6.2
0FB0:  MOVF   00,W
0FB2:  IORWF  FF2,F
0FB4:  MOVLW  14
0FB6:  MOVLB  0
0FB8:  MOVWF  xFF
0FBA:  RCALL  0940
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0FBC:  BTFSC  4F.7
0FBE:  BRA    0FC6
0FC0:  MOVF   4F,W
0FC2:  SUBLW  09
0FC4:  BNC   0FCC
0FC6:  BTFSC  4F.7
0FC8:  BRA    0FCC
0FCA:  BRA    1000
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0FCC:  CLRF   4F
0FCE:  MOVLW  02
0FD0:  MOVWF  FA9
0FD2:  CLRF   FA8
0FD4:  BCF    FA6.6
0FD6:  BCF    FA6.7
0FD8:  BSF    FA6.2
0FDA:  MOVF   FF2,W
0FDC:  MOVWF  00
0FDE:  BCF    FF2.6
0FE0:  BCF    FF2.7
0FE2:  MOVLB  F
0FE4:  MOVLW  55
0FE6:  MOVWF  FA7
0FE8:  MOVLW  AA
0FEA:  MOVWF  FA7
0FEC:  BSF    FA6.1
0FEE:  BTFSC  FA6.1
0FF0:  BRA    0FEE
0FF2:  BCF    FA6.2
0FF4:  MOVF   00,W
0FF6:  IORWF  FF2,F
0FF8:  MOVLW  14
0FFA:  MOVLB  0
0FFC:  MOVWF  xFF
0FFE:  RCALL  0940
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
1000:  BTFSC  50.7
1002:  BRA    100A
1004:  MOVF   50,W
1006:  SUBLW  09
1008:  BNC   1010
100A:  BTFSC  50.7
100C:  BRA    1010
100E:  BRA    1044
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
1010:  CLRF   50
1012:  MOVLW  03
1014:  MOVWF  FA9
1016:  CLRF   FA8
1018:  BCF    FA6.6
101A:  BCF    FA6.7
101C:  BSF    FA6.2
101E:  MOVF   FF2,W
1020:  MOVWF  00
1022:  BCF    FF2.6
1024:  BCF    FF2.7
1026:  MOVLB  F
1028:  MOVLW  55
102A:  MOVWF  FA7
102C:  MOVLW  AA
102E:  MOVWF  FA7
1030:  BSF    FA6.1
1032:  BTFSC  FA6.1
1034:  BRA    1032
1036:  BCF    FA6.2
1038:  MOVF   00,W
103A:  IORWF  FF2,F
103C:  MOVLW  14
103E:  MOVLB  0
1040:  MOVWF  xFF
1042:  RCALL  0940
....................    } 
....................    if(estadoalarma>1){ 
1044:  MOVLW  00
1046:  BTFSC  2A.4
1048:  MOVLW  01
104A:  SUBLW  01
104C:  BC    1084
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
104E:  BSF    2A.4
1050:  MOVLW  04
1052:  MOVWF  FA9
1054:  MOVLW  01
1056:  MOVWF  FA8
1058:  BCF    FA6.6
105A:  BCF    FA6.7
105C:  BSF    FA6.2
105E:  MOVF   FF2,W
1060:  MOVWF  00
1062:  BCF    FF2.6
1064:  BCF    FF2.7
1066:  MOVLB  F
1068:  MOVLW  55
106A:  MOVWF  FA7
106C:  MOVLW  AA
106E:  MOVWF  FA7
1070:  BSF    FA6.1
1072:  BTFSC  FA6.1
1074:  BRA    1072
1076:  BCF    FA6.2
1078:  MOVF   00,W
107A:  IORWF  FF2,F
107C:  MOVLW  14
107E:  MOVLB  0
1080:  MOVWF  xFF
1082:  RCALL  0940
....................    } 
....................    if(tempo_minutos>200){ 
1084:  MOVF   3B,W
1086:  SUBLW  C8
1088:  BC    10C2
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
108A:  MOVLW  14
108C:  MOVWF  3B
108E:  MOVLW  05
1090:  MOVWF  FA9
1092:  MOVLW  14
1094:  MOVWF  FA8
1096:  BCF    FA6.6
1098:  BCF    FA6.7
109A:  BSF    FA6.2
109C:  MOVF   FF2,W
109E:  MOVWF  00
10A0:  BCF    FF2.6
10A2:  BCF    FF2.7
10A4:  MOVLB  F
10A6:  MOVLW  55
10A8:  MOVWF  FA7
10AA:  MOVLW  AA
10AC:  MOVWF  FA7
10AE:  BSF    FA6.1
10B0:  BTFSC  FA6.1
10B2:  BRA    10B0
10B4:  BCF    FA6.2
10B6:  MOVF   00,W
10B8:  IORWF  FF2,F
10BA:  MOVLW  14
10BC:  MOVLB  0
10BE:  MOVWF  xFF
10C0:  RCALL  0940
....................    } 
....................    if(tempo_segundos>59){ 
10C2:  MOVF   3C,W
10C4:  SUBLW  3B
10C6:  BC    10FC
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
10C8:  CLRF   3C
10CA:  MOVLW  06
10CC:  MOVWF  FA9
10CE:  CLRF   FA8
10D0:  BCF    FA6.6
10D2:  BCF    FA6.7
10D4:  BSF    FA6.2
10D6:  MOVF   FF2,W
10D8:  MOVWF  00
10DA:  BCF    FF2.6
10DC:  BCF    FF2.7
10DE:  MOVLB  F
10E0:  MOVLW  55
10E2:  MOVWF  FA7
10E4:  MOVLW  AA
10E6:  MOVWF  FA7
10E8:  BSF    FA6.1
10EA:  BTFSC  FA6.1
10EC:  BRA    10EA
10EE:  BCF    FA6.2
10F0:  MOVF   00,W
10F2:  IORWF  FF2,F
10F4:  MOVLW  14
10F6:  MOVLB  0
10F8:  MOVWF  xFF
10FA:  RCALL  0940
....................    } 
....................    if(segundos>60){ 
10FC:  MOVF   35,W
10FE:  SUBLW  3C
1100:  BC    1136
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
1102:  CLRF   35
1104:  MOVLW  07
1106:  MOVWF  FA9
1108:  CLRF   FA8
110A:  BCF    FA6.6
110C:  BCF    FA6.7
110E:  BSF    FA6.2
1110:  MOVF   FF2,W
1112:  MOVWF  00
1114:  BCF    FF2.6
1116:  BCF    FF2.7
1118:  MOVLB  F
111A:  MOVLW  55
111C:  MOVWF  FA7
111E:  MOVLW  AA
1120:  MOVWF  FA7
1122:  BSF    FA6.1
1124:  BTFSC  FA6.1
1126:  BRA    1124
1128:  BCF    FA6.2
112A:  MOVF   00,W
112C:  IORWF  FF2,F
112E:  MOVLW  14
1130:  MOVLB  0
1132:  MOVWF  xFF
1134:  RCALL  0940
....................    } 
....................    if(minutos>60){ 
1136:  MOVF   36,W
1138:  SUBLW  3C
113A:  BC    1172
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
113C:  CLRF   36
113E:  MOVLW  08
1140:  MOVWF  FA9
1142:  CLRF   FA8
1144:  BCF    FA6.6
1146:  BCF    FA6.7
1148:  BSF    FA6.2
114A:  MOVF   FF2,W
114C:  MOVWF  00
114E:  BCF    FF2.6
1150:  BCF    FF2.7
1152:  MOVLB  F
1154:  MOVLW  55
1156:  MOVWF  FA7
1158:  MOVLW  AA
115A:  MOVWF  FA7
115C:  BSF    FA6.1
115E:  BTFSC  FA6.1
1160:  BRA    115E
1162:  BCF    FA6.2
1164:  MOVF   00,W
1166:  IORWF  FF2,F
1168:  MOVLW  14
116A:  MOVLB  0
116C:  MOVWF  xFF
116E:  CALL   0940
....................    } 
....................    if(horas>10000){ 
1172:  MOVF   5A,W
1174:  SUBLW  26
1176:  BC    11F0
1178:  XORLW  FF
117A:  BNZ   1182
117C:  MOVF   59,W
117E:  SUBLW  10
1180:  BC    11F0
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
1182:  CLRF   5A
1184:  CLRF   59
1186:  MOVLW  09
1188:  MOVWF  FA9
118A:  MOVLW  0A
118C:  MOVWF  FA8
118E:  BCF    FA6.6
1190:  BCF    FA6.7
1192:  BSF    FA6.2
1194:  MOVF   FF2,W
1196:  MOVWF  00
1198:  BCF    FF2.6
119A:  BCF    FF2.7
119C:  MOVLB  F
119E:  MOVLW  55
11A0:  MOVWF  FA7
11A2:  MOVLW  AA
11A4:  MOVWF  FA7
11A6:  BSF    FA6.1
11A8:  BTFSC  FA6.1
11AA:  BRA    11A8
11AC:  BCF    FA6.2
11AE:  MOVF   00,W
11B0:  IORWF  FF2,F
11B2:  MOVLW  14
11B4:  MOVLB  0
11B6:  MOVWF  xFF
11B8:  CALL   0940
11BC:  MOVLW  0A
11BE:  MOVWF  FA9
11C0:  CLRF   FA8
11C2:  BCF    FA6.6
11C4:  BCF    FA6.7
11C6:  BSF    FA6.2
11C8:  MOVF   FF2,W
11CA:  MOVWF  00
11CC:  BCF    FF2.6
11CE:  BCF    FF2.7
11D0:  MOVLB  F
11D2:  MOVLW  55
11D4:  MOVWF  FA7
11D6:  MOVLW  AA
11D8:  MOVWF  FA7
11DA:  BSF    FA6.1
11DC:  BTFSC  FA6.1
11DE:  BRA    11DC
11E0:  BCF    FA6.2
11E2:  MOVF   00,W
11E4:  IORWF  FF2,F
11E6:  MOVLW  14
11E8:  MOVLB  0
11EA:  MOVWF  xFF
11EC:  CALL   0940
....................    } 
....................    if(G>300 || G<200){ 
11F0:  CLRF   xFF
11F2:  CLRF   xFE
11F4:  MOVLW  16
11F6:  MOVWF  xFD
11F8:  MOVLW  87
11FA:  MOVWF  xFC
11FC:  MOVFF  C8,103
1200:  MOVFF  C7,102
1204:  MOVFF  C6,101
1208:  MOVFF  C5,100
120C:  RCALL  0E92
120E:  BC    1234
1210:  MOVFF  C8,FF
1214:  MOVFF  C7,FE
1218:  MOVFF  C6,FD
121C:  MOVFF  C5,FC
1220:  MOVLB  1
1222:  CLRF   x03
1224:  CLRF   x02
1226:  MOVLW  48
1228:  MOVWF  x01
122A:  MOVLW  86
122C:  MOVWF  x00
122E:  MOVLB  0
1230:  RCALL  0E92
1232:  BNC   12AA
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
1234:  CLRF   xC8
1236:  CLRF   xC7
1238:  MOVLW  5C
123A:  MOVWF  xC6
123C:  MOVLW  86
123E:  MOVWF  xC5
1240:  MOVLW  0B
1242:  MOVWF  FA9
1244:  MOVLW  DC
1246:  MOVWF  FA8
1248:  BCF    FA6.6
124A:  BCF    FA6.7
124C:  BSF    FA6.2
124E:  MOVF   FF2,W
1250:  MOVWF  00
1252:  BCF    FF2.6
1254:  BCF    FF2.7
1256:  MOVLB  F
1258:  MOVLW  55
125A:  MOVWF  FA7
125C:  MOVLW  AA
125E:  MOVWF  FA7
1260:  BSF    FA6.1
1262:  BTFSC  FA6.1
1264:  BRA    1262
1266:  BCF    FA6.2
1268:  MOVF   00,W
126A:  IORWF  FF2,F
126C:  MOVLW  14
126E:  MOVLB  0
1270:  MOVWF  xFF
1272:  CALL   0940
1276:  MOVLW  0C
1278:  MOVWF  FA9
127A:  CLRF   FA8
127C:  BCF    FA6.6
127E:  BCF    FA6.7
1280:  BSF    FA6.2
1282:  MOVF   FF2,W
1284:  MOVWF  00
1286:  BCF    FF2.6
1288:  BCF    FF2.7
128A:  MOVLB  F
128C:  MOVLW  55
128E:  MOVWF  FA7
1290:  MOVLW  AA
1292:  MOVWF  FA7
1294:  BSF    FA6.1
1296:  BTFSC  FA6.1
1298:  BRA    1296
129A:  BCF    FA6.2
129C:  MOVF   00,W
129E:  IORWF  FF2,F
12A0:  MOVLW  14
12A2:  MOVLB  0
12A4:  MOVWF  xFF
12A6:  CALL   0940
....................    } 
....................    if(Vel1>6){ 
12AA:  MOVF   56,W
12AC:  SUBLW  06
12AE:  BC    12EA
....................       Vel1=4;write_eeprom(13,4);delay_ms(20); 
12B0:  MOVLW  04
12B2:  MOVWF  56
12B4:  MOVLW  0D
12B6:  MOVWF  FA9
12B8:  MOVLW  04
12BA:  MOVWF  FA8
12BC:  BCF    FA6.6
12BE:  BCF    FA6.7
12C0:  BSF    FA6.2
12C2:  MOVF   FF2,W
12C4:  MOVWF  00
12C6:  BCF    FF2.6
12C8:  BCF    FF2.7
12CA:  MOVLB  F
12CC:  MOVLW  55
12CE:  MOVWF  FA7
12D0:  MOVLW  AA
12D2:  MOVWF  FA7
12D4:  BSF    FA6.1
12D6:  BTFSC  FA6.1
12D8:  BRA    12D6
12DA:  BCF    FA6.2
12DC:  MOVF   00,W
12DE:  IORWF  FF2,F
12E0:  MOVLW  14
12E2:  MOVLB  0
12E4:  MOVWF  xFF
12E6:  CALL   0940
....................    } 
.................... } 
12EA:  GOTO   2760 (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
*
132E:  BCF    2A.5
....................    if(VIDRIOUUP || !VIDRIODN){ 
1330:  BSF    F92.1
1332:  BTFSS  F80.1
1334:  BRA    133C
1336:  BSF    F92.2
1338:  BTFSS  F80.2
133A:  BRA    1346
....................       O1_on;O2_off; 
133C:  BSF    F8A.6
133E:  BCF    F93.6
1340:  BCF    F8A.7
1342:  BCF    F93.7
....................    }else{ 
1344:  BRA    1350
....................       O1_off;O2_off; 
1346:  BCF    F8A.6
1348:  BCF    F93.6
134A:  BCF    F8A.7
134C:  BCF    F93.7
....................       pulsoBajar=OFF; 
134E:  BCF    2A.6
....................    } 
.................... } 
1350:  GOTO   1530 (RETURN)
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
1354:  BCF    2A.6
....................    if(!VIDRIOUUP || VIDRIODN){ 
1356:  BSF    F92.1
1358:  BTFSC  F80.1
135A:  BRA    1362
135C:  BSF    F92.2
135E:  BTFSC  F80.2
1360:  BRA    136C
....................       O1_off;O2_on; 
1362:  BCF    F8A.6
1364:  BCF    F93.6
1366:  BSF    F8A.7
1368:  BCF    F93.7
....................    }else{ 
136A:  BRA    1376
....................       O1_off;O2_off; 
136C:  BCF    F8A.6
136E:  BCF    F93.6
1370:  BCF    F8A.7
1372:  BCF    F93.7
....................       pulsoSubir=OFF; 
1374:  BCF    2A.5
....................    } 
.................... } 
1376:  GOTO   1536 (RETURN)
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
.................... } 
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
137A:  BTFSS  xE3.0
137C:  BRA    152A
....................       NUEVO_DATO=0; 
137E:  BCF    xE3.0
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
1380:  MOVLW  00
1382:  BTFSC  xD9.0
1384:  MOVLW  01
1386:  MOVWF  xE8
1388:  MOVLW  00
138A:  BTFSC  xD9.1
138C:  MOVLW  01
138E:  MOVWF  xE9
1390:  MOVLW  00
1392:  BTFSC  xD9.2
1394:  MOVLW  01
1396:  MOVWF  xEA
1398:  MOVLW  00
139A:  BTFSC  xD9.3
139C:  MOVLW  01
139E:  MOVWF  xEB
13A0:  MOVLW  00
13A2:  BTFSC  xD9.4
13A4:  MOVLW  01
13A6:  MOVWF  xEC
13A8:  MOVLW  00
13AA:  BTFSC  xD9.5
13AC:  MOVLW  01
13AE:  MOVWF  xED
13B0:  MOVLW  00
13B2:  BTFSC  xD9.6
13B4:  MOVLW  01
13B6:  MOVWF  xEE
13B8:  MOVLW  00
13BA:  BTFSC  xD9.7
13BC:  MOVLW  01
13BE:  MOVFF  E8,F0
13C2:  MOVFF  E9,F1
13C6:  MOVFF  EA,F2
13CA:  MOVFF  EB,F3
13CE:  MOVFF  EC,F4
13D2:  MOVFF  ED,F5
13D6:  MOVFF  EE,F6
13DA:  MOVWF  xF7
13DC:  RCALL  12EE
13DE:  MOVFF  01,E4
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
13E2:  MOVLW  00
13E4:  BTFSC  xDA.0
13E6:  MOVLW  01
13E8:  MOVWF  xE8
13EA:  MOVLW  00
13EC:  BTFSC  xDA.1
13EE:  MOVLW  01
13F0:  MOVWF  xE9
13F2:  MOVLW  00
13F4:  BTFSC  xDA.2
13F6:  MOVLW  01
13F8:  MOVWF  xEA
13FA:  MOVLW  00
13FC:  BTFSC  xDA.3
13FE:  MOVLW  01
1400:  MOVWF  xEB
1402:  MOVLW  00
1404:  BTFSC  xDA.4
1406:  MOVLW  01
1408:  MOVWF  xEC
140A:  MOVLW  00
140C:  BTFSC  xDA.5
140E:  MOVLW  01
1410:  MOVWF  xED
1412:  MOVLW  00
1414:  BTFSC  xDA.6
1416:  MOVLW  01
1418:  MOVWF  xEE
141A:  MOVLW  00
141C:  BTFSC  xDA.7
141E:  MOVLW  01
1420:  MOVFF  E8,F0
1424:  MOVFF  E9,F1
1428:  MOVFF  EA,F2
142C:  MOVFF  EB,F3
1430:  MOVFF  EC,F4
1434:  MOVFF  ED,F5
1438:  MOVFF  EE,F6
143C:  MOVWF  xF7
143E:  RCALL  12EE
1440:  MOVFF  01,E5
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
1444:  MOVLW  00
1446:  BTFSC  xDB.0
1448:  MOVLW  01
144A:  MOVWF  xE8
144C:  MOVLW  00
144E:  BTFSC  xDB.1
1450:  MOVLW  01
1452:  MOVWF  xE9
1454:  MOVLW  00
1456:  BTFSC  xDB.2
1458:  MOVLW  01
145A:  MOVWF  xEA
145C:  MOVLW  00
145E:  BTFSC  xDB.3
1460:  MOVLW  01
1462:  MOVWF  xEB
1464:  MOVLW  00
1466:  BTFSC  xDB.4
1468:  MOVLW  01
146A:  MOVWF  xEC
146C:  MOVLW  00
146E:  BTFSC  xDB.5
1470:  MOVLW  01
1472:  MOVWF  xED
1474:  MOVLW  00
1476:  BTFSC  xDB.6
1478:  MOVLW  01
147A:  MOVWF  xEE
147C:  MOVLW  00
147E:  BTFSC  xDB.7
1480:  MOVLW  01
1482:  MOVFF  E8,F0
1486:  MOVFF  E9,F1
148A:  MOVFF  EA,F2
148E:  MOVFF  EB,F3
1492:  MOVFF  EC,F4
1496:  MOVFF  ED,F5
149A:  MOVFF  EE,F6
149E:  MOVWF  xF7
14A0:  RCALL  12EE
14A2:  MOVFF  01,E6
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
14A6:  MOVLW  00
14A8:  BTFSC  xDC.0
14AA:  MOVLW  01
14AC:  MOVWF  xE8
14AE:  MOVLW  00
14B0:  BTFSC  xDC.1
14B2:  MOVLW  01
14B4:  MOVWF  xE9
14B6:  MOVLW  00
14B8:  BTFSC  xDC.2
14BA:  MOVLW  01
14BC:  MOVWF  xEA
14BE:  MOVLW  00
14C0:  BTFSC  xDC.3
14C2:  MOVLW  01
14C4:  MOVWF  xEB
14C6:  MOVLW  00
14C8:  BTFSC  xDC.4
14CA:  MOVLW  01
14CC:  MOVWF  xEC
14CE:  MOVLW  00
14D0:  BTFSC  xDC.5
14D2:  MOVLW  01
14D4:  MOVWF  xED
14D6:  MOVLW  00
14D8:  BTFSC  xDC.6
14DA:  MOVLW  01
14DC:  MOVWF  xEE
14DE:  MOVLW  00
14E0:  BTFSC  xDC.7
14E2:  MOVLW  01
14E4:  MOVFF  E8,F0
14E8:  MOVFF  E9,F1
14EC:  MOVFF  EA,F2
14F0:  MOVFF  EB,F3
14F4:  MOVFF  EC,F4
14F8:  MOVFF  ED,F5
14FC:  MOVFF  EE,F6
1500:  MOVWF  xF7
1502:  RCALL  12EE
1504:  MOVFF  01,E7
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
1508:  MOVF   53,W
150A:  SUBWF  xE7,W
150C:  BNZ   1510
....................          pulsoBajar=ON; 
150E:  BSF    2A.6
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
1510:  MOVF   52,W
1512:  SUBWF  xE7,W
1514:  BNZ   1518
....................          pulsoSubir=ON; 
1516:  BSF    2A.5
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
1518:  MOVF   54,W
151A:  SUBWF  xE7,W
151C:  BNZ   152A
....................          O1_off;O2_off; 
151E:  BCF    F8A.6
1520:  BCF    F93.6
1522:  BCF    F8A.7
1524:  BCF    F93.7
....................          pulsoSubir=OFF; 
1526:  BCF    2A.5
....................          pulsoBajar=OFF; 
1528:  BCF    2A.6
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
152A:  BTFSS  2A.6
152C:  BRA    1530
....................       bajarVidrio(); 
152E:  BRA    132E
....................        
....................    if(pulsoSubir) 
1530:  BTFSS  2A.5
1532:  BRA    1536
....................       subirVidrio();     
1534:  BRA    1354
....................       
.................... } 
1536:  GOTO   276C (RETURN)
....................  
....................  
....................  
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
0248:  BSF    2B.5
....................     
....................    if(VelMotor==5){ 
024A:  MOVF   xD0,W
024C:  SUBLW  05
024E:  BNZ   0260
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
0250:  CLRF   FD7
0252:  MOVLW  E4
0254:  MOVWF  FD6
....................       Motor_off;  
0256:  BCF    F8B.2
0258:  BCF    F94.2
....................       Motor2_off;  
025A:  BCF    F8B.1
025C:  BCF    F94.1
....................    }else if(VelMotor==4){ 
025E:  BRA    02B4
0260:  MOVF   xD0,W
0262:  SUBLW  04
0264:  BNZ   0276
....................       set_timer0(201);       
0266:  CLRF   FD7
0268:  MOVLW  C9
026A:  MOVWF  FD6
....................       Motor_off;  
026C:  BCF    F8B.2
026E:  BCF    F94.2
....................       Motor2_off;  
0270:  BCF    F8B.1
0272:  BCF    F94.1
....................    }else if(VelMotor==3){ 
0274:  BRA    02B4
0276:  MOVF   xD0,W
0278:  SUBLW  03
027A:  BNZ   028C
....................       set_timer0(196); 
027C:  CLRF   FD7
027E:  MOVLW  C4
0280:  MOVWF  FD6
....................       Motor_off;  
0282:  BCF    F8B.2
0284:  BCF    F94.2
....................       Motor2_off;  
0286:  BCF    F8B.1
0288:  BCF    F94.1
....................    }else if(VelMotor==2){ 
028A:  BRA    02B4
028C:  MOVF   xD0,W
028E:  SUBLW  02
0290:  BNZ   02A2
....................       set_timer0(188); 
0292:  CLRF   FD7
0294:  MOVLW  BC
0296:  MOVWF  FD6
....................       Motor_off;  
0298:  BCF    F8B.2
029A:  BCF    F94.2
....................       Motor2_off;  
029C:  BCF    F8B.1
029E:  BCF    F94.1
....................    }else if(VelMotor==1){ 
02A0:  BRA    02B4
02A2:  DECFSZ xD0,W
02A4:  BRA    02B4
....................       set_timer0(180); 
02A6:  CLRF   FD7
02A8:  MOVLW  B4
02AA:  MOVWF  FD6
....................       Motor_off;  
02AC:  BCF    F8B.2
02AE:  BCF    F94.2
....................       Motor2_off;  
02B0:  BCF    F8B.1
02B2:  BCF    F94.1
....................    } 
....................    pulsos++;    
02B4:  INCF   xC9,F
02B6:  BTFSC  FD8.2
02B8:  INCF   xCA,F
.................... } 
....................  
02BA:  BCF    FF2.1
02BC:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<6){ 
02C0:  MOVF   xD0,F
02C2:  BZ    02EC
02C4:  MOVF   xD0,W
02C6:  SUBLW  05
02C8:  BNC   02EC
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
02CA:  BTFSS  2B.5
02CC:  BRA    02E0
....................       Motor_on; 
02CE:  BSF    F8B.2
02D0:  BCF    F94.2
....................       Motor2_on;  
02D2:  BSF    F8B.1
02D4:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
02D6:  CLRF   FD7
02D8:  MOVLW  FD
02DA:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
02DC:  BCF    2B.5
....................    } else {            //The triac has been triggered, cut the pulse 
02DE:  BRA    02EC
....................       Motor_off; 
02E0:  BCF    F8B.2
02E2:  BCF    F94.2
....................       Motor2_off;  
02E4:  BCF    F8B.1
02E6:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
02E8:  CLRF   FD7
02EA:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
02EC:  BCF    FF2.2
02EE:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(45536);//5ms 
02F2:  MOVLW  B1
02F4:  MOVWF  FCF
02F6:  MOVLW  E0
02F8:  MOVWF  FCE
....................    tiempos++; 
02FA:  INCF   57,F
02FC:  BTFSC  FD8.2
02FE:  INCF   58,F
....................     
....................    if(UP) 
0300:  BSF    F92.5
0302:  BTFSC  F80.5
0304:  BRA    030E
....................       tup++; 
0306:  INCF   x63,F
0308:  BTFSC  FD8.2
030A:  INCF   x64,F
....................    else 
030C:  BRA    0312
....................       tup=0; 
030E:  CLRF   x64
0310:  CLRF   x63
....................        
....................    if(DOWN) 
0312:  BSF    F96.0
0314:  BTFSC  F84.0
0316:  BRA    0320
....................       tdown++; 
0318:  INCF   5D,F
031A:  BTFSC  FD8.2
031C:  INCF   5E,F
....................    else 
031E:  BRA    0324
....................       tdown=0; 
0320:  CLRF   5E
0322:  CLRF   5D
....................        
....................    if(RIGHT) 
0324:  BSF    F96.1
0326:  BTFSC  F84.1
0328:  BRA    0332
....................       tright++; 
032A:  INCF   5F,F
032C:  BTFSC  FD8.2
032E:  INCF   x60,F
....................    else 
0330:  BRA    0336
....................       tright=0; 
0332:  CLRF   x60
0334:  CLRF   5F
....................     
....................    if(IZQU) 
0336:  BSF    F96.2
0338:  BTFSC  F84.2
033A:  BRA    0344
....................       tleft++; 
033C:  INCF   x61,F
033E:  BTFSC  FD8.2
0340:  INCF   x62,F
....................    else 
0342:  BRA    0348
....................       tleft=0; 
0344:  CLRF   x62
0346:  CLRF   x61
....................     
....................    if(tiempos>=200){//1s 
0348:  MOVF   58,F
034A:  BNZ   0352
034C:  MOVF   57,W
034E:  SUBLW  C7
0350:  BC    03A4
....................    output_toggle(PIN_A3); 
0352:  BCF    F92.3
0354:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
0356:  CLRF   58
0358:  CLRF   57
035A:  INCF   43,F
035C:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
035E:  DECFSZ 51,W
0360:  BRA    0376
....................          if(estadobuzzer==0){ 
0362:  BTFSC  2A.3
0364:  BRA    036C
....................             Buzzer_off; 
0366:  BCF    F8B.0
0368:  BCF    F94.0
....................          }else{ 
036A:  BRA    0374
....................             if(estadoalarma==1) 
036C:  BTFSS  2A.4
036E:  BRA    0374
....................                Buzzer_on; 
0370:  BSF    F8B.0
0372:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
0374:  BTG    2A.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
0376:  BTFSS  29.0
0378:  BRA    03A4
....................          segundos++; 
037A:  INCF   35,F
....................          if(tiempo_cumplido==0){ 
037C:  BTFSC  29.7
037E:  BRA    03A4
....................             if(tempo_segundos>0){ 
0380:  MOVF   3C,F
0382:  BZ    0388
....................                tempo_segundos--; 
0384:  DECF   3C,F
....................             }else{ 
0386:  BRA    03A4
....................                if(tempo_minutos>0){ 
0388:  MOVF   3B,F
038A:  BZ    0394
....................                   tempo_minutos--; 
038C:  DECF   3B,F
....................                   tempo_segundos=59; 
038E:  MOVLW  3B
0390:  MOVWF  3C
....................                }else{ 
0392:  BRA    03A4
....................                   tiempo_cumplido=1; 
0394:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
0396:  BCF    29.0
0398:  BSF    F8A.3
039A:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
039C:  MOVFF  3D,3B
03A0:  MOVFF  3E,3C
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
03A4:  BCF    F9E.0
03A6:  GOTO   0064
.................... void main () 
.................... { 
*
258C:  CLRF   FF8
258E:  BSF    FF1.2
2590:  BCF    F9F.0
2592:  BSF    FD0.7
2594:  BSF    07.7
2596:  CLRF   FEA
2598:  CLRF   FE9
259A:  BCF    29.0
259C:  BCF    29.1
259E:  BCF    29.2
25A0:  BCF    29.3
25A2:  BCF    29.4
25A4:  BCF    29.5
25A6:  BCF    29.6
25A8:  BCF    29.7
25AA:  BCF    2A.0
25AC:  BCF    2A.1
25AE:  BCF    2A.2
25B0:  BCF    2A.3
25B2:  BCF    2A.4
25B4:  BCF    2A.5
25B6:  BCF    2A.6
25B8:  BCF    2A.7
25BA:  BCF    2B.0
25BC:  BCF    2B.1
25BE:  BCF    2B.2
25C0:  CLRF   2C
25C2:  MOVLW  07
25C4:  MOVWF  2D
25C6:  MOVLW  02
25C8:  MOVWF  2E
25CA:  MOVLW  0B
25CC:  MOVWF  2F
25CE:  MOVLW  02
25D0:  MOVWF  30
25D2:  MOVLW  03
25D4:  MOVWF  31
25D6:  MOVLW  02
25D8:  MOVWF  32
25DA:  MOVWF  33
25DC:  MOVLW  04
25DE:  MOVWF  34
25E0:  CLRF   35
25E2:  CLRF   36
25E4:  CLRF   37
25E6:  CLRF   38
25E8:  CLRF   39
25EA:  CLRF   3A
25EC:  CLRF   3B
25EE:  CLRF   3C
25F0:  CLRF   3D
25F2:  CLRF   3E
25F4:  CLRF   3F
25F6:  CLRF   40
25F8:  CLRF   41
25FA:  MOVLW  01
25FC:  MOVWF  42
25FE:  CLRF   43
2600:  CLRF   44
2602:  CLRF   45
2604:  CLRF   51
2606:  CLRF   52
2608:  CLRF   53
260A:  CLRF   54
260C:  CLRF   55
260E:  MOVLW  04
2610:  MOVWF  56
2612:  CLRF   5A
2614:  CLRF   59
2616:  CLRF   5C
2618:  CLRF   5B
261A:  CLRF   5E
261C:  CLRF   5D
261E:  CLRF   x60
2620:  CLRF   5F
2622:  CLRF   x62
2624:  CLRF   x61
2626:  CLRF   x64
2628:  CLRF   x63
262A:  CLRF   xB8
262C:  CLRF   xB7
262E:  CLRF   xB6
2630:  CLRF   xB5
2632:  CLRF   xBC
2634:  CLRF   xBB
2636:  CLRF   xBA
2638:  CLRF   xB9
263A:  CLRF   xC0
263C:  CLRF   xBF
263E:  CLRF   xBE
2640:  CLRF   xBD
2642:  CLRF   xC4
2644:  CLRF   xC3
2646:  CLRF   xC2
2648:  CLRF   xC1
264A:  CLRF   xC8
264C:  CLRF   xC7
264E:  CLRF   xC6
2650:  MOVLW  80
2652:  MOVWF  xC5
2654:  BSF    2B.3
2656:  BCF    2B.4
2658:  CLRF   xCA
265A:  CLRF   xC9
265C:  CLRF   xCC
265E:  CLRF   xCB
2660:  BCF    2B.5
2662:  BCF    2B.6
2664:  CLRF   xCE
2666:  CLRF   xCD
2668:  CLRF   xCF
266A:  CLRF   xD0
266C:  CLRF   xD4
266E:  CLRF   xD3
2670:  CLRF   xD2
2672:  CLRF   xD1
2674:  CLRF   xD8
2676:  CLRF   xD7
2678:  CLRF   xD6
267A:  CLRF   xD5
267C:  CLRF   xE2
267E:  CLRF   xE1
2680:  MOVF   FC1,W
2682:  ANDLW  C0
2684:  IORLW  0F
2686:  MOVWF  FC1
2688:  MOVLW  07
268A:  MOVWF  FB4
268C:  MOVLW  3E
268E:  MOVWF  46
2690:  MOVLW  20
2692:  MOVWF  47
2694:  MOVLW  5E
2696:  MOVWF  48
2698:  CLRF   49
269A:  CLRF   4A
269C:  CLRF   4B
269E:  CLRF   4C
26A0:  CLRF   4D
26A2:  CLRF   4E
26A4:  CLRF   4F
26A6:  CLRF   50
26A8:  CLRF   x65
26AA:  CLRF   x66
26AC:  CLRF   x67
26AE:  CLRF   x68
26B0:  CLRF   x69
26B2:  CLRF   x6A
26B4:  CLRF   x6B
26B6:  CLRF   x6C
26B8:  CLRF   x6D
26BA:  CLRF   x6E
26BC:  CLRF   x6F
26BE:  CLRF   x70
26C0:  CLRF   x71
26C2:  CLRF   x72
26C4:  CLRF   x73
26C6:  CLRF   x74
26C8:  CLRF   x75
26CA:  CLRF   x76
26CC:  CLRF   x77
26CE:  CLRF   x78
26D0:  CLRF   x79
26D2:  CLRF   x7A
26D4:  CLRF   x7B
26D6:  CLRF   x7C
26D8:  CLRF   x7D
26DA:  CLRF   x7E
26DC:  CLRF   x7F
26DE:  CLRF   x80
26E0:  CLRF   x81
26E2:  CLRF   x82
26E4:  CLRF   x83
26E6:  CLRF   x84
26E8:  CLRF   x85
26EA:  CLRF   x86
26EC:  CLRF   x87
26EE:  CLRF   x88
26F0:  CLRF   x89
26F2:  CLRF   x8A
26F4:  CLRF   x8B
26F6:  CLRF   x8C
26F8:  CLRF   x8D
26FA:  CLRF   x8E
26FC:  CLRF   x8F
26FE:  CLRF   x90
2700:  CLRF   x91
2702:  CLRF   x92
2704:  CLRF   x93
2706:  CLRF   x94
2708:  CLRF   x95
270A:  CLRF   x96
270C:  CLRF   x97
270E:  CLRF   x98
2710:  CLRF   x99
2712:  CLRF   x9A
2714:  CLRF   x9B
2716:  CLRF   x9C
2718:  CLRF   x9D
271A:  CLRF   x9E
271C:  CLRF   x9F
271E:  CLRF   xA0
2720:  CLRF   xA1
2722:  CLRF   xA2
2724:  CLRF   xA3
2726:  CLRF   xA4
2728:  CLRF   xA5
272A:  CLRF   xA6
272C:  CLRF   xA7
272E:  CLRF   xA8
2730:  CLRF   xA9
2732:  CLRF   xAA
2734:  CLRF   xAB
2736:  CLRF   xAC
2738:  CLRF   xAD
273A:  CLRF   xAE
273C:  CLRF   xAF
273E:  CLRF   xB0
2740:  CLRF   xB1
2742:  CLRF   xB2
2744:  CLRF   xB3
2746:  CLRF   xB4
....................    Motor_off; 
2748:  BCF    F8B.2
274A:  BCF    F94.2
....................    Motor2_off; 
274C:  BCF    F8B.1
274E:  BCF    F94.1
....................    ConfigInterrupciones(); 
2750:  GOTO   0A3C
....................    MensajeBienvenida(); 
2754:  GOTO   0B58
....................    LeeEEPROM();  
2758:  GOTO   0BF4
....................    LimitaValores(); 
275C:  GOTO   0F38
....................    Motor_off; 
2760:  BCF    F8B.2
2762:  BCF    F94.2
....................    Motor2_off; 
2764:  BCF    F8B.1
2766:  BCF    F94.1
....................     
....................    while(true){ 
....................    leeControlRemoto(); 
2768:  GOTO   137A
....................     
....................    if(VelMotor==6){ 
276C:  MOVF   xD0,W
276E:  SUBLW  06
2770:  BNZ   277E
....................       Motor_on; 
2772:  BSF    F8B.2
2774:  BCF    F94.2
....................       Motor2_on;  
2776:  BSF    F8B.1
2778:  BCF    F94.1
....................       set_timer0(0); 
277A:  CLRF   FD7
277C:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
277E:  MOVF   xD0,F
2780:  BNZ   278E
....................       Motor_off; 
2782:  BCF    F8B.2
2784:  BCF    F94.2
....................       Motor2_off;  
2786:  BCF    F8B.1
2788:  BCF    F94.1
....................       set_timer0(0); 
278A:  CLRF   FD7
278C:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
278E:  MOVF   2C,F
2790:  BTFSS  FD8.2
2792:  BRA    2B9E
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2794:  MOVLW  01
2796:  MOVWF  xFA
2798:  MOVWF  xFB
279A:  CALL   0A72
....................          printf(lcd_putc,"     Ingrese        "); 
279E:  MOVLW  AA
27A0:  MOVWF  FF6
27A2:  MOVLW  03
27A4:  MOVWF  FF7
27A6:  CALL   0B38
....................          lcd_gotoxy(1,2); 
27AA:  MOVLW  01
27AC:  MOVWF  xFA
27AE:  MOVLW  02
27B0:  MOVWF  xFB
27B2:  CALL   0A72
....................          printf(lcd_putc,"    Contraseña      "); 
27B6:  MOVLW  C0
27B8:  MOVWF  FF6
27BA:  MOVLW  03
27BC:  MOVWF  FF7
27BE:  CALL   0B38
....................          lcd_gotoxy(1,3); 
27C2:  MOVLW  01
27C4:  MOVWF  xFA
27C6:  MOVLW  03
27C8:  MOVWF  xFB
27CA:  CALL   0A72
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
27CE:  MOVLW  D6
27D0:  MOVWF  FF6
27D2:  MOVLW  03
27D4:  MOVWF  FF7
27D6:  MOVLW  0A
27D8:  MOVWF  xEC
27DA:  CALL   153A
27DE:  MOVFF  49,E8
27E2:  MOVLW  1F
27E4:  MOVWF  xE9
27E6:  CALL   1582
27EA:  MOVFF  4A,E8
27EE:  MOVLW  1F
27F0:  MOVWF  xE9
27F2:  CALL   1582
27F6:  MOVFF  4B,E8
27FA:  MOVLW  1F
27FC:  MOVWF  xE9
27FE:  CALL   1582
2802:  MOVFF  4C,E8
2806:  MOVLW  1F
2808:  MOVWF  xE9
280A:  CALL   1582
280E:  MOVLW  20
2810:  MOVWF  xF9
2812:  CALL   0ADA
2816:  MOVLW  20
2818:  MOVWF  xF9
281A:  CALL   0ADA
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
281E:  MOVFF  2F,FA
2822:  MOVLW  04
2824:  MOVWF  xFB
2826:  CALL   0A72
....................          lcd_putc(t[2]); 
282A:  MOVFF  48,F9
282E:  CALL   0ADA
....................           
....................          if(unidad>11&&unidad<14){ 
2832:  MOVF   2F,W
2834:  SUBLW  0B
2836:  BC    2856
2838:  MOVF   2F,W
283A:  SUBLW  0D
283C:  BNC   2856
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
283E:  MOVLW  01
2840:  SUBWF  2F,W
2842:  MOVWF  xE8
2844:  MOVWF  xFA
2846:  MOVLW  04
2848:  MOVWF  xFB
284A:  CALL   0A72
....................             lcd_putc(t[1]); 
284E:  MOVFF  47,F9
2852:  CALL   0ADA
....................          } 
....................           
....................          Cambio=OFF; 
2856:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2858:  BSF    F92.5
285A:  BTFSC  F80.5
285C:  BRA    2890
....................          delay_ms(20); 
285E:  MOVLW  14
2860:  MOVWF  xFF
2862:  CALL   0940
....................          if(UP){ 
2866:  BSF    F92.5
2868:  BTFSC  F80.5
286A:  BRA    288E
....................             if(Flanco == 0) { 
286C:  BTFSC  29.3
286E:  BRA    288E
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2870:  MOVLW  0B
2872:  SUBWF  2F,W
2874:  CLRF   03
2876:  ADDLW  49
2878:  MOVWF  FE9
287A:  MOVLW  00
287C:  ADDWFC 03,W
287E:  MOVWF  FEA
2880:  INCF   FEF,F
2882:  BSF    29.3
2884:  MOVLW  1E
2886:  MOVWF  xFF
2888:  CALL   0940
288C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
288E:  BRA    2892
....................          Flanco = 0; 
2890:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2892:  BSF    F96.0
2894:  BTFSC  F84.0
2896:  BRA    28CA
....................          delay_ms(20); 
2898:  MOVLW  14
289A:  MOVWF  xFF
289C:  CALL   0940
....................          if(DOWN){ 
28A0:  BSF    F96.0
28A2:  BTFSC  F84.0
28A4:  BRA    28C8
....................             if(Flanco2 == 0) { 
28A6:  BTFSC  29.5
28A8:  BRA    28C8
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
28AA:  MOVLW  0B
28AC:  SUBWF  2F,W
28AE:  CLRF   03
28B0:  ADDLW  49
28B2:  MOVWF  FE9
28B4:  MOVLW  00
28B6:  ADDWFC 03,W
28B8:  MOVWF  FEA
28BA:  DECF   FEF,F
28BC:  BSF    29.5
28BE:  MOVLW  1E
28C0:  MOVWF  xFF
28C2:  CALL   0940
28C6:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
28C8:  BRA    28CC
....................          Flanco2 = 0; 
28CA:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
28CC:  BSF    F96.1
28CE:  BTFSC  F84.1
28D0:  BRA    28FC
....................          delay_ms(20); 
28D2:  MOVLW  14
28D4:  MOVWF  xFF
28D6:  CALL   0940
....................          if(RIGHT){ 
28DA:  BSF    F96.1
28DC:  BTFSC  F84.1
28DE:  BRA    28FA
....................             if(Flanco1 == 0) { 
28E0:  BTFSC  29.4
28E2:  BRA    28FA
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
28E4:  BSF    29.4
28E6:  INCF   2F,F
28E8:  MOVLW  1E
28EA:  MOVWF  xFF
28EC:  CALL   0940
28F0:  MOVLW  0C
28F2:  MOVWF  xF9
28F4:  CALL   0ADA
28F8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
28FA:  BRA    28FE
....................          Flanco1 = 0; 
28FC:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
28FE:  BSF    F96.2
2900:  BTFSC  F84.2
2902:  BRA    292E
....................          delay_ms(150); 
2904:  MOVLW  96
2906:  MOVWF  xFF
2908:  CALL   0940
....................          if(IZQU){ 
290C:  BSF    F96.2
290E:  BTFSC  F84.2
2910:  BRA    292C
....................             if(Flanco3 == 0){ 
2912:  BTFSC  29.6
2914:  BRA    292C
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2916:  BSF    29.6
2918:  DECF   2F,F
291A:  MOVLW  1E
291C:  MOVWF  xFF
291E:  CALL   0940
2922:  MOVLW  0C
2924:  MOVWF  xF9
2926:  CALL   0ADA
292A:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
292C:  BRA    2930
....................         Flanco3 = 0; 
292E:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2930:  MOVLW  0B
2932:  SUBWF  2F,W
2934:  CLRF   03
2936:  ADDLW  49
2938:  MOVWF  FE9
293A:  MOVLW  00
293C:  ADDWFC 03,W
293E:  MOVWF  FEA
2940:  BTFSC  FEF.7
2942:  BRA    2946
2944:  BRA    295A
....................          clave[unidad-11]=9; 
2946:  MOVLW  0B
2948:  SUBWF  2F,W
294A:  CLRF   03
294C:  ADDLW  49
294E:  MOVWF  FE9
2950:  MOVLW  00
2952:  ADDWFC 03,W
2954:  MOVWF  FEA
2956:  MOVLW  09
2958:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
295A:  MOVLW  0B
295C:  SUBWF  2F,W
295E:  CLRF   03
2960:  ADDLW  49
2962:  MOVWF  FE9
2964:  MOVLW  00
2966:  ADDWFC 03,W
2968:  MOVWF  FEA
296A:  BTFSC  FEF.7
296C:  BRA    2986
296E:  MOVF   FEF,W
2970:  SUBLW  09
2972:  BC    2986
....................          clave[unidad-11]=0; 
2974:  MOVLW  0B
2976:  SUBWF  2F,W
2978:  CLRF   03
297A:  ADDLW  49
297C:  MOVWF  FE9
297E:  MOVLW  00
2980:  ADDWFC 03,W
2982:  MOVWF  FEA
2984:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2986:  MOVF   2F,W
2988:  SUBLW  0A
298A:  BNC   2990
....................          unidad=11; 
298C:  MOVLW  0B
298E:  MOVWF  2F
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2990:  MOVF   2F,W
2992:  SUBLW  0E
2994:  BTFSC  FD8.0
2996:  BRA    2B9E
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2998:  MOVF   49,W
299A:  SUBLW  03
299C:  BNZ   2A80
299E:  MOVF   4A,W
29A0:  SUBLW  08
29A2:  BNZ   2A80
29A4:  MOVF   4B,W
29A6:  SUBLW  09
29A8:  BNZ   2A80
29AA:  MOVF   4C,W
29AC:  SUBLW  02
29AE:  BNZ   2A80
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
29B0:  CLRF   FA9
29B2:  CLRF   FA8
29B4:  BCF    FA6.6
29B6:  BCF    FA6.7
29B8:  BSF    FA6.2
29BA:  MOVF   FF2,W
29BC:  MOVWF  00
29BE:  BCF    FF2.6
29C0:  BCF    FF2.7
29C2:  MOVLB  F
29C4:  MOVLW  55
29C6:  MOVWF  FA7
29C8:  MOVLW  AA
29CA:  MOVWF  FA7
29CC:  BSF    FA6.1
29CE:  BTFSC  FA6.1
29D0:  BRA    29CE
29D2:  BCF    FA6.2
29D4:  MOVF   00,W
29D6:  IORWF  FF2,F
29D8:  MOVLW  14
29DA:  MOVLB  0
29DC:  MOVWF  xFF
29DE:  CALL   0940
29E2:  MOVLW  01
29E4:  MOVWF  FA9
29E6:  CLRF   FA8
29E8:  BCF    FA6.6
29EA:  BCF    FA6.7
29EC:  BSF    FA6.2
29EE:  MOVF   FF2,W
29F0:  MOVWF  00
29F2:  BCF    FF2.6
29F4:  BCF    FF2.7
29F6:  MOVLB  F
29F8:  MOVLW  55
29FA:  MOVWF  FA7
29FC:  MOVLW  AA
29FE:  MOVWF  FA7
2A00:  BSF    FA6.1
2A02:  BTFSC  FA6.1
2A04:  BRA    2A02
2A06:  BCF    FA6.2
2A08:  MOVF   00,W
2A0A:  IORWF  FF2,F
2A0C:  MOVLW  14
2A0E:  MOVLB  0
2A10:  MOVWF  xFF
2A12:  CALL   0940
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
2A16:  MOVLW  02
2A18:  MOVWF  FA9
2A1A:  CLRF   FA8
2A1C:  BCF    FA6.6
2A1E:  BCF    FA6.7
2A20:  BSF    FA6.2
2A22:  MOVF   FF2,W
2A24:  MOVWF  00
2A26:  BCF    FF2.6
2A28:  BCF    FF2.7
2A2A:  MOVLB  F
2A2C:  MOVLW  55
2A2E:  MOVWF  FA7
2A30:  MOVLW  AA
2A32:  MOVWF  FA7
2A34:  BSF    FA6.1
2A36:  BTFSC  FA6.1
2A38:  BRA    2A36
2A3A:  BCF    FA6.2
2A3C:  MOVF   00,W
2A3E:  IORWF  FF2,F
2A40:  MOVLW  14
2A42:  MOVLB  0
2A44:  MOVWF  xFF
2A46:  CALL   0940
2A4A:  MOVLW  03
2A4C:  MOVWF  FA9
2A4E:  CLRF   FA8
2A50:  BCF    FA6.6
2A52:  BCF    FA6.7
2A54:  BSF    FA6.2
2A56:  MOVF   FF2,W
2A58:  MOVWF  00
2A5A:  BCF    FF2.6
2A5C:  BCF    FF2.7
2A5E:  MOVLB  F
2A60:  MOVLW  55
2A62:  MOVWF  FA7
2A64:  MOVLW  AA
2A66:  MOVWF  FA7
2A68:  BSF    FA6.1
2A6A:  BTFSC  FA6.1
2A6C:  BRA    2A6A
2A6E:  BCF    FA6.2
2A70:  MOVF   00,W
2A72:  IORWF  FF2,F
2A74:  MOVLW  14
2A76:  MOVLB  0
2A78:  MOVWF  xFF
2A7A:  CALL   0940
....................              reset_cpu(); 
2A7E:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
2A80:  MOVF   4D,W
2A82:  SUBWF  49,W
2A84:  BNZ   2B24
2A86:  MOVF   4E,W
2A88:  SUBWF  4A,W
2A8A:  BNZ   2B24
2A8C:  MOVF   4F,W
2A8E:  SUBWF  4B,W
2A90:  BNZ   2B24
2A92:  MOVF   50,W
2A94:  SUBWF  4C,W
2A96:  BNZ   2B24
....................             lcd_gotoxy(1,1); 
2A98:  MOVLW  01
2A9A:  MOVWF  xFA
2A9C:  MOVWF  xFB
2A9E:  CALL   0A72
....................             printf(lcd_putc,"                   "); 
2AA2:  MOVLW  EC
2AA4:  MOVWF  FF6
2AA6:  MOVLW  03
2AA8:  MOVWF  FF7
2AAA:  CALL   0B38
....................             lcd_gotoxy(1,2); 
2AAE:  MOVLW  01
2AB0:  MOVWF  xFA
2AB2:  MOVLW  02
2AB4:  MOVWF  xFB
2AB6:  CALL   0A72
....................             printf(lcd_putc,"     Contraseña    "); 
2ABA:  MOVLW  00
2ABC:  MOVWF  FF6
2ABE:  MOVLW  04
2AC0:  MOVWF  FF7
2AC2:  CALL   0B38
....................             lcd_gotoxy(1,3); 
2AC6:  MOVLW  01
2AC8:  MOVWF  xFA
2ACA:  MOVLW  03
2ACC:  MOVWF  xFB
2ACE:  CALL   0A72
....................             printf(lcd_putc,"      Correcta     "); 
2AD2:  MOVLW  14
2AD4:  MOVWF  FF6
2AD6:  MOVLW  04
2AD8:  MOVWF  FF7
2ADA:  CALL   0B38
....................             lcd_gotoxy(1,4); 
2ADE:  MOVLW  01
2AE0:  MOVWF  xFA
2AE2:  MOVLW  04
2AE4:  MOVWF  xFB
2AE6:  CALL   0A72
....................             printf(lcd_putc,"                   "); 
2AEA:  MOVLW  28
2AEC:  MOVWF  FF6
2AEE:  MOVLW  04
2AF0:  MOVWF  FF7
2AF2:  CALL   0B38
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2AF6:  MOVLW  04
2AF8:  MOVWF  xE8
2AFA:  MOVLW  FA
2AFC:  MOVWF  xFF
2AFE:  CALL   0940
2B02:  DECFSZ xE8,F
2B04:  BRA    2AFA
2B06:  MOVLW  32
2B08:  MOVWF  2C
2B0A:  MOVLW  0B
2B0C:  MOVWF  2F
2B0E:  MOVLW  0C
2B10:  MOVWF  xF9
2B12:  CALL   0ADA
2B16:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2B18:  CLRF   49
2B1A:  CLRF   4A
2B1C:  CLRF   4B
2B1E:  CLRF   4C
2B20:  BSF    2B.3
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
2B22:  BRA    2B9E
....................             lcd_gotoxy(1,1); 
2B24:  MOVLW  01
2B26:  MOVWF  xFA
2B28:  MOVWF  xFB
2B2A:  CALL   0A72
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
2B2E:  MOVLW  01
2B30:  MOVWF  xFA
2B32:  MOVLW  02
2B34:  MOVWF  xFB
2B36:  CALL   0A72
....................             printf(lcd_putc,"     Contraseña    "); 
2B3A:  MOVLW  3C
2B3C:  MOVWF  FF6
2B3E:  MOVLW  04
2B40:  MOVWF  FF7
2B42:  CALL   0B38
....................             lcd_gotoxy(1,3); 
2B46:  MOVLW  01
2B48:  MOVWF  xFA
2B4A:  MOVLW  03
2B4C:  MOVWF  xFB
2B4E:  CALL   0A72
....................             printf(lcd_putc,"     Incorrecta    "); 
2B52:  MOVLW  50
2B54:  MOVWF  FF6
2B56:  MOVLW  04
2B58:  MOVWF  FF7
2B5A:  CALL   0B38
....................             lcd_gotoxy(1,4); 
2B5E:  MOVLW  01
2B60:  MOVWF  xFA
2B62:  MOVLW  04
2B64:  MOVWF  xFB
2B66:  CALL   0A72
....................             printf(lcd_putc,"                   "); 
2B6A:  MOVLW  64
2B6C:  MOVWF  FF6
2B6E:  MOVLW  04
2B70:  MOVWF  FF7
2B72:  CALL   0B38
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2B76:  MOVLW  04
2B78:  MOVWF  xE8
2B7A:  MOVLW  FA
2B7C:  MOVWF  xFF
2B7E:  CALL   0940
2B82:  DECFSZ xE8,F
2B84:  BRA    2B7A
2B86:  MOVLW  0B
2B88:  MOVWF  2F
2B8A:  MOVLW  0C
2B8C:  MOVWF  xF9
2B8E:  CALL   0ADA
2B92:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2B94:  CLRF   49
2B96:  CLRF   4A
2B98:  CLRF   4B
2B9A:  CLRF   4C
2B9C:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2B9E:  DECFSZ 2C,W
2BA0:  BRA    2DD8
....................       EliminaRuido(); 
2BA2:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2BA6:  MOVLW  01
2BA8:  MOVWF  xFA
2BAA:  MOVWF  xFB
2BAC:  CALL   0A72
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2BB0:  MOVLW  78
2BB2:  MOVWF  FF6
2BB4:  MOVLW  04
2BB6:  MOVWF  FF7
2BB8:  CALL   0B38
....................          mensajes(1+paso,2); 
2BBC:  MOVLW  01
2BBE:  ADDWF  45,W
2BC0:  MOVWF  xE8
2BC2:  MOVWF  xE9
2BC4:  MOVLW  02
2BC6:  MOVWF  xEA
2BC8:  CALL   1652
....................          mensajes(2+paso,3); 
2BCC:  MOVLW  02
2BCE:  ADDWF  45,W
2BD0:  MOVWF  xE8
2BD2:  MOVWF  xE9
2BD4:  MOVLW  03
2BD6:  MOVWF  xEA
2BD8:  CALL   1652
....................          mensajes(3+paso,4); 
2BDC:  MOVLW  03
2BDE:  ADDWF  45,W
2BE0:  MOVWF  xE8
2BE2:  MOVWF  xE9
2BE4:  MOVLW  04
2BE6:  MOVWF  xEA
2BE8:  CALL   1652
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2BEC:  MOVLW  01
2BEE:  MOVWF  xFA
2BF0:  MOVFF  30,FB
2BF4:  CALL   0A72
....................         lcd_putc(t[0]); 
2BF8:  MOVFF  46,F9
2BFC:  CALL   0ADA
....................  
....................         if(Flecha==2) 
2C00:  MOVF   30,W
2C02:  SUBLW  02
2C04:  BNZ   2C2E
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2C06:  MOVLW  01
2C08:  MOVWF  xFA
2C0A:  MOVLW  04
2C0C:  MOVWF  xFB
2C0E:  CALL   0A72
....................             lcd_putc(t[1]); 
2C12:  MOVFF  47,F9
2C16:  CALL   0ADA
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2C1A:  MOVLW  01
2C1C:  MOVWF  xFA
2C1E:  MOVLW  03
2C20:  MOVWF  xFB
2C22:  CALL   0A72
....................             lcd_putc(t[1]); 
2C26:  MOVFF  47,F9
2C2A:  CALL   0ADA
....................           } 
....................          
....................         if(Flecha==4) 
2C2E:  MOVF   30,W
2C30:  SUBLW  04
2C32:  BNZ   2C5C
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2C34:  MOVLW  01
2C36:  MOVWF  xFA
2C38:  MOVLW  02
2C3A:  MOVWF  xFB
2C3C:  CALL   0A72
....................             lcd_putc(t[1]); 
2C40:  MOVFF  47,F9
2C44:  CALL   0ADA
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2C48:  MOVLW  01
2C4A:  MOVWF  xFA
2C4C:  MOVLW  03
2C4E:  MOVWF  xFB
2C50:  CALL   0A72
....................             lcd_putc(t[1]); 
2C54:  MOVFF  47,F9
2C58:  CALL   0ADA
....................           } 
....................          
....................         if(Flecha==3) 
2C5C:  MOVF   30,W
2C5E:  SUBLW  03
2C60:  BNZ   2C8A
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2C62:  MOVLW  01
2C64:  MOVWF  xFA
2C66:  MOVLW  04
2C68:  MOVWF  xFB
2C6A:  CALL   0A72
....................             lcd_putc(t[1]); 
2C6E:  MOVFF  47,F9
2C72:  CALL   0ADA
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2C76:  MOVLW  01
2C78:  MOVWF  xFA
2C7A:  MOVLW  02
2C7C:  MOVWF  xFB
2C7E:  CALL   0A72
....................             lcd_putc(t[1]); 
2C82:  MOVFF  47,F9
2C86:  CALL   0ADA
....................           } 
....................          Cambio=OFF; 
2C8A:  BCF    2B.3
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
2C8C:  BSF    F92.5
2C8E:  BTFSC  F80.5
2C90:  BRA    2CBC
....................          delay_ms(20); 
2C92:  MOVLW  14
2C94:  MOVWF  xFF
2C96:  CALL   0940
....................          if(UP){ 
2C9A:  BSF    F92.5
2C9C:  BTFSC  F80.5
2C9E:  BRA    2CBA
....................             if(Flanco == 0){ 
2CA0:  BTFSC  29.3
2CA2:  BRA    2CBA
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
2CA4:  DECF   32,F
2CA6:  DECF   30,F
2CA8:  MOVLW  01
2CAA:  ADDWF  30,W
2CAC:  MOVWF  31
2CAE:  BSF    29.3
2CB0:  MOVLW  1E
2CB2:  MOVWF  xFF
2CB4:  CALL   0940
2CB8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2CBA:  BRA    2CBE
....................          Flanco = 0; 
2CBC:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2CBE:  BSF    F96.0
2CC0:  BTFSC  F84.0
2CC2:  BRA    2CEE
....................          delay_ms(20); 
2CC4:  MOVLW  14
2CC6:  MOVWF  xFF
2CC8:  CALL   0940
....................          if(DOWN){ 
2CCC:  BSF    F96.0
2CCE:  BTFSC  F84.0
2CD0:  BRA    2CEC
....................             if(Flanco2 == 0){ 
2CD2:  BTFSC  29.5
2CD4:  BRA    2CEC
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2CD6:  INCF   32,F
2CD8:  INCF   30,F
2CDA:  MOVLW  01
2CDC:  SUBWF  30,W
2CDE:  MOVWF  31
2CE0:  BSF    29.5
2CE2:  MOVLW  1E
2CE4:  MOVWF  xFF
2CE6:  CALL   0940
2CEA:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2CEC:  BRA    2CF0
....................          Flanco2 = 0; 
2CEE:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
2CF0:  MOVF   32,W
2CF2:  SUBWF  34,W
2CF4:  BC    2D06
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2CF6:  INCF   45,F
2CF8:  MOVFF  32,34
2CFC:  MOVLW  02
2CFE:  SUBWF  34,W
2D00:  MOVWF  33
2D02:  MOVLW  04
2D04:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2D06:  MOVF   33,W
2D08:  SUBWF  32,W
2D0A:  BC    2D1C
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
2D0C:  DECF   45,F
2D0E:  MOVFF  32,33
2D12:  MOVLW  02
2D14:  ADDWF  33,W
2D16:  MOVWF  34
2D18:  MOVLW  02
2D1A:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
2D1C:  MOVF   32,W
2D1E:  SUBWF  2D,W
2D20:  BC    2D34
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
2D22:  MOVFF  2E,32
2D26:  MOVLW  02
2D28:  MOVWF  30
2D2A:  CLRF   45
2D2C:  MOVFF  32,33
2D30:  ADDWF  33,W
2D32:  MOVWF  34
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
2D34:  MOVF   2E,W
2D36:  SUBWF  32,W
2D38:  BC    2D50
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
2D3A:  MOVFF  2D,32
2D3E:  MOVLW  04
2D40:  MOVWF  30
2D42:  SUBWF  2D,W
2D44:  MOVWF  45
2D46:  MOVFF  32,34
2D4A:  MOVLW  02
2D4C:  SUBWF  34,W
2D4E:  MOVWF  33
....................       } 
....................          
....................       if(paso<0) 
2D50:  BTFSC  45.7
2D52:  BRA    2D56
2D54:  BRA    2D58
....................          paso=0; 
2D56:  CLRF   45
....................           
....................       if(RIGHT){// Si oprime derecha 
2D58:  BSF    F96.1
2D5A:  BTFSC  F84.1
2D5C:  BRA    2DA4
....................          delay_ms(20); 
2D5E:  MOVLW  14
2D60:  MOVWF  xFF
2D62:  CALL   0940
....................          if(RIGHT){ 
2D66:  BSF    F96.1
2D68:  BTFSC  F84.1
2D6A:  BRA    2DA0
....................             if(Flanco1 == 0){ 
2D6C:  BTFSC  29.4
2D6E:  BRA    2DA0
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2D70:  BSF    29.4
2D72:  MOVFF  32,2C
2D76:  MOVLW  03
2D78:  MOVWF  30
2D7A:  MOVLW  02
2D7C:  MOVWF  xE8
2D7E:  MOVLW  96
2D80:  MOVWF  xFF
2D82:  CALL   0940
2D86:  DECFSZ xE8,F
2D88:  BRA    2D7E
2D8A:  MOVLW  0C
2D8C:  MOVWF  xF9
2D8E:  CALL   0ADA
....................                if(Menu==6){ 
2D92:  MOVF   2C,W
2D94:  SUBLW  06
2D96:  BNZ   2DA0
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2D98:  CLRF   49
2D9A:  CLRF   4A
2D9C:  CLRF   4B
2D9E:  CLRF   4C
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2DA0:  BSF    2B.3
....................       }else{ 
2DA2:  BRA    2DA6
....................         Flanco1 = 0; 
2DA4:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
2DA6:  BSF    F96.2
2DA8:  BTFSC  F84.2
2DAA:  BRA    2DD8
....................          delay_ms(20); 
2DAC:  MOVLW  14
2DAE:  MOVWF  xFF
2DB0:  CALL   0940
....................          if(IZQU){ 
2DB4:  BSF    F96.2
2DB6:  BTFSC  F84.2
2DB8:  BRA    2DD8
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2DBA:  MOVLW  02
2DBC:  MOVWF  xE8
2DBE:  MOVLW  FA
2DC0:  MOVWF  xFF
2DC2:  CALL   0940
2DC6:  DECFSZ xE8,F
2DC8:  BRA    2DBE
2DCA:  MOVLW  32
2DCC:  MOVWF  2C
2DCE:  MOVLW  0C
2DD0:  MOVWF  xF9
2DD2:  CALL   0ADA
2DD6:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2DD8:  MOVF   2C,W
2DDA:  SUBLW  02
2DDC:  BTFSS  FD8.2
2DDE:  BRA    3038
....................    EliminaRuido(); 
2DE0:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2DE4:  MOVLW  01
2DE6:  MOVWF  xFA
2DE8:  MOVWF  xFB
2DEA:  CALL   0A72
....................       printf(lcd_putc,"    Temporizador     "); 
2DEE:  MOVLW  8E
2DF0:  MOVWF  FF6
2DF2:  MOVLW  04
2DF4:  MOVWF  FF7
2DF6:  CALL   0B38
....................       lcd_gotoxy(1,2); 
2DFA:  MOVLW  01
2DFC:  MOVWF  xFA
2DFE:  MOVLW  02
2E00:  MOVWF  xFB
2E02:  CALL   0A72
....................       printf(lcd_putc,"       Luz UV        "); 
2E06:  MOVLW  A4
2E08:  MOVWF  FF6
2E0A:  MOVLW  04
2E0C:  MOVWF  FF7
2E0E:  CALL   0B38
....................       lcd_gotoxy(6,3); 
2E12:  MOVLW  06
2E14:  MOVWF  xFA
2E16:  MOVLW  03
2E18:  MOVWF  xFB
2E1A:  CALL   0A72
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2E1E:  MOVFF  3D,E8
2E22:  MOVLW  03
2E24:  MOVWF  xE9
2E26:  CALL   1726
2E2A:  MOVLW  3A
2E2C:  MOVWF  xF9
2E2E:  CALL   0ADA
2E32:  MOVFF  3E,E8
2E36:  MOVLW  01
2E38:  MOVWF  xE9
2E3A:  CALL   1726
2E3E:  MOVLW  C3
2E40:  MOVWF  FF6
2E42:  MOVLW  04
2E44:  MOVWF  FF7
2E46:  MOVLW  08
2E48:  MOVWF  xEC
2E4A:  CALL   153A
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2E4E:  MOVLW  06
2E50:  ADDWF  42,W
2E52:  MOVWF  xE8
2E54:  MOVWF  xFA
2E56:  MOVLW  04
2E58:  MOVWF  xFB
2E5A:  CALL   0A72
....................       lcd_putc(t[2]); 
2E5E:  MOVFF  48,F9
2E62:  CALL   0ADA
....................        
....................       Cambio=OFF; 
2E66:  BCF    2B.3
.................... //   } 
....................     
....................    if(UP) 
2E68:  BSF    F92.5
2E6A:  BTFSC  F80.5
2E6C:  BRA    2EBA
....................    { 
....................       delay_ms(20); 
2E6E:  MOVLW  14
2E70:  MOVWF  xFF
2E72:  CALL   0940
....................       if(UP){ 
2E76:  BSF    F92.5
2E78:  BTFSC  F80.5
2E7A:  BRA    2EBA
....................          if(unidad2==1) 
2E7C:  DECFSZ 42,W
2E7E:  BRA    2E9A
....................          { 
....................             if(tempo_minutos_pro<240) 
2E80:  MOVF   3D,W
2E82:  SUBLW  EF
2E84:  BNC   2E9A
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
2E86:  MOVLW  05
2E88:  ADDWF  3D,F
2E8A:  MOVLW  02
2E8C:  MOVWF  xE8
2E8E:  MOVLW  96
2E90:  MOVWF  xFF
2E92:  CALL   0940
2E96:  DECFSZ xE8,F
2E98:  BRA    2E8E
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2E9A:  MOVF   42,W
2E9C:  SUBLW  04
2E9E:  BNZ   2EB8
....................          { 
....................             if(tempo_segundos_pro<59) 
2EA0:  MOVF   3E,W
2EA2:  SUBLW  3A
2EA4:  BNC   2EB8
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
2EA6:  INCF   3E,F
2EA8:  MOVLW  02
2EAA:  MOVWF  xE8
2EAC:  MOVLW  96
2EAE:  MOVWF  xFF
2EB0:  CALL   0940
2EB4:  DECFSZ xE8,F
2EB6:  BRA    2EAC
....................             } 
....................          }      
....................       Cambio=ON; 
2EB8:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2EBA:  BSF    F96.0
2EBC:  BTFSC  F84.0
2EBE:  BRA    2F08
....................    { 
....................       delay_ms(20); 
2EC0:  MOVLW  14
2EC2:  MOVWF  xFF
2EC4:  CALL   0940
....................       if(DOWN){ 
2EC8:  BSF    F96.0
2ECA:  BTFSC  F84.0
2ECC:  BRA    2F08
....................          if(unidad2==1) 
2ECE:  DECFSZ 42,W
2ED0:  BRA    2EEA
....................          { 
....................             if(tempo_minutos_pro>0) 
2ED2:  MOVF   3D,F
2ED4:  BZ    2EEA
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
2ED6:  MOVLW  05
2ED8:  SUBWF  3D,F
2EDA:  MOVLW  02
2EDC:  MOVWF  xE8
2EDE:  MOVLW  96
2EE0:  MOVWF  xFF
2EE2:  CALL   0940
2EE6:  DECFSZ xE8,F
2EE8:  BRA    2EDE
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
2EEA:  MOVF   42,W
2EEC:  SUBLW  04
2EEE:  BNZ   2F06
....................          { 
....................             if(tempo_segundos_pro>0) 
2EF0:  MOVF   3E,F
2EF2:  BZ    2F06
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2EF4:  DECF   3E,F
2EF6:  MOVLW  02
2EF8:  MOVWF  xE8
2EFA:  MOVLW  96
2EFC:  MOVWF  xFF
2EFE:  CALL   0940
2F02:  DECFSZ xE8,F
2F04:  BRA    2EFA
....................             }    
....................          } 
....................       Cambio=ON; 
2F06:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2F08:  BSF    F96.1
2F0A:  BTFSC  F84.1
2F0C:  BRA    2F4A
....................    { 
....................       delay_ms(20); 
2F0E:  MOVLW  14
2F10:  MOVWF  xFF
2F12:  CALL   0940
....................       if(RIGHT){ 
2F16:  BSF    F96.1
2F18:  BTFSC  F84.1
2F1A:  BRA    2F4A
....................          if(unidad2==1) 
2F1C:  DECFSZ 42,W
2F1E:  BRA    2F26
....................          { 
....................             unidad2=4; 
2F20:  MOVLW  04
2F22:  MOVWF  42
....................          } 
....................          else 
2F24:  BRA    2F30
....................          { 
....................             if(unidad2==4) 
2F26:  MOVF   42,W
2F28:  SUBLW  04
2F2A:  BNZ   2F30
....................             { 
....................                unidad2=1; 
2F2C:  MOVLW  01
2F2E:  MOVWF  42
....................             } 
....................          } 
....................       delay_ms(500); 
2F30:  MOVLW  02
2F32:  MOVWF  xE8
2F34:  MOVLW  FA
2F36:  MOVWF  xFF
2F38:  CALL   0940
2F3C:  DECFSZ xE8,F
2F3E:  BRA    2F34
....................       printf(lcd_putc,"\f"); 
2F40:  MOVLW  0C
2F42:  MOVWF  xF9
2F44:  CALL   0ADA
....................       Cambio=ON; 
2F48:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(IZQU) 
2F4A:  BSF    F96.2
2F4C:  BTFSC  F84.2
2F4E:  BRA    3038
....................    { 
....................       if(IZQU){ 
2F50:  BSF    F96.2
2F52:  BTFSC  F84.2
2F54:  BRA    3038
....................          delay_ms(200); 
2F56:  MOVLW  C8
2F58:  MOVWF  xFF
2F5A:  CALL   0940
....................          printf(lcd_putc,"\f"); 
2F5E:  MOVLW  0C
2F60:  MOVWF  xF9
2F62:  CALL   0ADA
....................          lcd_gotoxy(1,2); 
2F66:  MOVLW  01
2F68:  MOVWF  xFA
2F6A:  MOVLW  02
2F6C:  MOVWF  xFB
2F6E:  CALL   0A72
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2F72:  MOVLW  CC
2F74:  MOVWF  FF6
2F76:  MOVLW  04
2F78:  MOVWF  FF7
2F7A:  CALL   0B38
....................          lcd_gotoxy(1,3); 
2F7E:  MOVLW  01
2F80:  MOVWF  xFA
2F82:  MOVLW  03
2F84:  MOVWF  xFB
2F86:  CALL   0A72
....................          printf(lcd_putc,"  Correctamente  "); 
2F8A:  MOVLW  DE
2F8C:  MOVWF  FF6
2F8E:  MOVLW  04
2F90:  MOVWF  FF7
2F92:  CALL   0B38
....................          write_eeprom(5,tempo_minutos_pro); 
2F96:  MOVLW  05
2F98:  MOVWF  FA9
2F9A:  MOVFF  3D,FA8
2F9E:  BCF    FA6.6
2FA0:  BCF    FA6.7
2FA2:  BSF    FA6.2
2FA4:  MOVF   FF2,W
2FA6:  MOVWF  00
2FA8:  BCF    FF2.6
2FAA:  BCF    FF2.7
2FAC:  MOVLB  F
2FAE:  MOVLW  55
2FB0:  MOVWF  FA7
2FB2:  MOVLW  AA
2FB4:  MOVWF  FA7
2FB6:  BSF    FA6.1
2FB8:  BTFSC  FA6.1
2FBA:  BRA    2FB8
2FBC:  BCF    FA6.2
2FBE:  MOVF   00,W
2FC0:  IORWF  FF2,F
....................          delay_ms(20); 
2FC2:  MOVLW  14
2FC4:  MOVLB  0
2FC6:  MOVWF  xFF
2FC8:  CALL   0940
....................          write_eeprom(6,tempo_segundos_pro); 
2FCC:  MOVLW  06
2FCE:  MOVWF  FA9
2FD0:  MOVFF  3E,FA8
2FD4:  BCF    FA6.6
2FD6:  BCF    FA6.7
2FD8:  BSF    FA6.2
2FDA:  MOVF   FF2,W
2FDC:  MOVWF  00
2FDE:  BCF    FF2.6
2FE0:  BCF    FF2.7
2FE2:  MOVLB  F
2FE4:  MOVLW  55
2FE6:  MOVWF  FA7
2FE8:  MOVLW  AA
2FEA:  MOVWF  FA7
2FEC:  BSF    FA6.1
2FEE:  BTFSC  FA6.1
2FF0:  BRA    2FEE
2FF2:  BCF    FA6.2
2FF4:  MOVF   00,W
2FF6:  IORWF  FF2,F
....................          delay_ms(20); 
2FF8:  MOVLW  14
2FFA:  MOVLB  0
2FFC:  MOVWF  xFF
2FFE:  CALL   0940
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
3002:  MOVFF  3D,3B
3006:  MOVFF  3E,3C
....................          delay_ms(700); 
300A:  MOVLW  04
300C:  MOVWF  xE8
300E:  MOVLW  AF
3010:  MOVWF  xFF
3012:  CALL   0940
3016:  DECFSZ xE8,F
3018:  BRA    300E
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
301A:  MOVLW  1E
301C:  MOVWF  xFF
301E:  CALL   0940
3022:  MOVLW  01
3024:  MOVWF  2C
3026:  CLRF   45
3028:  MOVLW  02
302A:  MOVWF  30
302C:  MOVWF  32
302E:  MOVLW  0C
3030:  MOVWF  xF9
3032:  CALL   0ADA
....................          Cambio=ON; 
3036:  BSF    2B.3
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
3038:  MOVF   2C,W
303A:  SUBLW  03
303C:  BTFSS  FD8.2
303E:  BRA    338A
....................       EliminaRuido(); 
3040:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3044:  MOVLW  01
3046:  MOVWF  xFA
3048:  MOVWF  xFB
304A:  CALL   0A72
....................          printf(lcd_putc,"     Ingrese        "); 
304E:  MOVLW  F0
3050:  MOVWF  FF6
3052:  MOVLW  04
3054:  MOVWF  FF7
3056:  CALL   0B38
....................          lcd_gotoxy(1,2); 
305A:  MOVLW  01
305C:  MOVWF  xFA
305E:  MOVLW  02
3060:  MOVWF  xFB
3062:  CALL   0A72
....................          printf(lcd_putc,"    Contraseña      "); 
3066:  MOVLW  06
3068:  MOVWF  FF6
306A:  MOVLW  05
306C:  MOVWF  FF7
306E:  CALL   0B38
....................          lcd_gotoxy(1,3); 
3072:  MOVLW  01
3074:  MOVWF  xFA
3076:  MOVLW  03
3078:  MOVWF  xFB
307A:  CALL   0A72
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
307E:  MOVLW  1C
3080:  MOVWF  FF6
3082:  MOVLW  05
3084:  MOVWF  FF7
3086:  MOVLW  0A
3088:  MOVWF  xEC
308A:  CALL   153A
308E:  MOVFF  49,E8
3092:  MOVLW  1F
3094:  MOVWF  xE9
3096:  CALL   1582
309A:  MOVFF  4A,E8
309E:  MOVLW  1F
30A0:  MOVWF  xE9
30A2:  CALL   1582
30A6:  MOVFF  4B,E8
30AA:  MOVLW  1F
30AC:  MOVWF  xE9
30AE:  CALL   1582
30B2:  MOVFF  4C,E8
30B6:  MOVLW  1F
30B8:  MOVWF  xE9
30BA:  CALL   1582
30BE:  MOVLW  20
30C0:  MOVWF  xF9
30C2:  CALL   0ADA
30C6:  MOVLW  20
30C8:  MOVWF  xF9
30CA:  CALL   0ADA
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
30CE:  MOVFF  2F,FA
30D2:  MOVLW  04
30D4:  MOVWF  xFB
30D6:  CALL   0A72
....................          lcd_putc(t[2]); 
30DA:  MOVFF  48,F9
30DE:  CALL   0ADA
....................           
....................          if(unidad>11&&unidad<14){ 
30E2:  MOVF   2F,W
30E4:  SUBLW  0B
30E6:  BC    3106
30E8:  MOVF   2F,W
30EA:  SUBLW  0D
30EC:  BNC   3106
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
30EE:  MOVLW  01
30F0:  SUBWF  2F,W
30F2:  MOVWF  xE8
30F4:  MOVWF  xFA
30F6:  MOVLW  04
30F8:  MOVWF  xFB
30FA:  CALL   0A72
....................             lcd_putc(t[1]); 
30FE:  MOVFF  47,F9
3102:  CALL   0ADA
....................          } 
....................           
....................          Cambio=OFF; 
3106:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
3108:  BSF    F92.5
310A:  BTFSC  F80.5
310C:  BRA    3140
....................          delay_ms(20); 
310E:  MOVLW  14
3110:  MOVWF  xFF
3112:  CALL   0940
....................          if(UP){ 
3116:  BSF    F92.5
3118:  BTFSC  F80.5
311A:  BRA    313E
....................             if(Flanco == 0) { 
311C:  BTFSC  29.3
311E:  BRA    313E
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3120:  MOVLW  0B
3122:  SUBWF  2F,W
3124:  CLRF   03
3126:  ADDLW  49
3128:  MOVWF  FE9
312A:  MOVLW  00
312C:  ADDWFC 03,W
312E:  MOVWF  FEA
3130:  INCF   FEF,F
3132:  BSF    29.3
3134:  MOVLW  1E
3136:  MOVWF  xFF
3138:  CALL   0940
313C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
313E:  BRA    3142
....................          Flanco = 0; 
3140:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3142:  BSF    F96.0
3144:  BTFSC  F84.0
3146:  BRA    317A
....................          delay_ms(20); 
3148:  MOVLW  14
314A:  MOVWF  xFF
314C:  CALL   0940
....................          if(DOWN){ 
3150:  BSF    F96.0
3152:  BTFSC  F84.0
3154:  BRA    3178
....................             if(Flanco2 == 0) { 
3156:  BTFSC  29.5
3158:  BRA    3178
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
315A:  MOVLW  0B
315C:  SUBWF  2F,W
315E:  CLRF   03
3160:  ADDLW  49
3162:  MOVWF  FE9
3164:  MOVLW  00
3166:  ADDWFC 03,W
3168:  MOVWF  FEA
316A:  DECF   FEF,F
316C:  BSF    29.5
316E:  MOVLW  1E
3170:  MOVWF  xFF
3172:  CALL   0940
3176:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3178:  BRA    317C
....................          Flanco2 = 0; 
317A:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
317C:  BSF    F96.1
317E:  BTFSC  F84.1
3180:  BRA    31AC
....................          delay_ms(20); 
3182:  MOVLW  14
3184:  MOVWF  xFF
3186:  CALL   0940
....................          if(RIGHT){ 
318A:  BSF    F96.1
318C:  BTFSC  F84.1
318E:  BRA    31AA
....................             if(Flanco1 == 0) { 
3190:  BTFSC  29.4
3192:  BRA    31AA
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3194:  BSF    29.4
3196:  INCF   2F,F
3198:  MOVLW  1E
319A:  MOVWF  xFF
319C:  CALL   0940
31A0:  MOVLW  0C
31A2:  MOVWF  xF9
31A4:  CALL   0ADA
31A8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
31AA:  BRA    31AE
....................          Flanco1 = 0; 
31AC:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
31AE:  BSF    F96.2
31B0:  BTFSC  F84.2
31B2:  BRA    31DE
....................          delay_ms(150); 
31B4:  MOVLW  96
31B6:  MOVWF  xFF
31B8:  CALL   0940
....................          if(IZQU){ 
31BC:  BSF    F96.2
31BE:  BTFSC  F84.2
31C0:  BRA    31DC
....................             if(Flanco3 == 0){ 
31C2:  BTFSC  29.6
31C4:  BRA    31DC
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
31C6:  BSF    29.6
31C8:  DECF   2F,F
31CA:  MOVLW  1E
31CC:  MOVWF  xFF
31CE:  CALL   0940
31D2:  MOVLW  0C
31D4:  MOVWF  xF9
31D6:  CALL   0ADA
31DA:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
31DC:  BRA    31E0
....................         Flanco3 = 0; 
31DE:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
31E0:  MOVLW  0B
31E2:  SUBWF  2F,W
31E4:  CLRF   03
31E6:  ADDLW  49
31E8:  MOVWF  FE9
31EA:  MOVLW  00
31EC:  ADDWFC 03,W
31EE:  MOVWF  FEA
31F0:  BTFSC  FEF.7
31F2:  BRA    31F6
31F4:  BRA    320A
....................          clave[unidad-11]=9; 
31F6:  MOVLW  0B
31F8:  SUBWF  2F,W
31FA:  CLRF   03
31FC:  ADDLW  49
31FE:  MOVWF  FE9
3200:  MOVLW  00
3202:  ADDWFC 03,W
3204:  MOVWF  FEA
3206:  MOVLW  09
3208:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
320A:  MOVLW  0B
320C:  SUBWF  2F,W
320E:  CLRF   03
3210:  ADDLW  49
3212:  MOVWF  FE9
3214:  MOVLW  00
3216:  ADDWFC 03,W
3218:  MOVWF  FEA
321A:  BTFSC  FEF.7
321C:  BRA    3236
321E:  MOVF   FEF,W
3220:  SUBLW  09
3222:  BC    3236
....................          clave[unidad-11]=0; 
3224:  MOVLW  0B
3226:  SUBWF  2F,W
3228:  CLRF   03
322A:  ADDLW  49
322C:  MOVWF  FE9
322E:  MOVLW  00
3230:  ADDWFC 03,W
3232:  MOVWF  FEA
3234:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3236:  MOVF   2F,W
3238:  SUBLW  0A
323A:  BNC   325C
....................          unidad=11; 
323C:  MOVLW  0B
323E:  MOVWF  2F
....................          Menu=1; 
3240:  MOVLW  01
3242:  MOVWF  2C
....................          paso=0; 
3244:  CLRF   45
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3246:  CLRF   49
3248:  CLRF   4A
324A:  CLRF   4B
324C:  CLRF   4C
324E:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
3250:  MOVLW  0B
3252:  MOVWF  2F
3254:  MOVLW  0C
3256:  MOVWF  xF9
3258:  CALL   0ADA
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
325C:  MOVF   2F,W
325E:  SUBLW  0E
3260:  BTFSC  FD8.0
3262:  BRA    338A
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
3264:  MOVF   4D,W
3266:  SUBWF  49,W
3268:  BNZ   3306
326A:  MOVF   4E,W
326C:  SUBWF  4A,W
326E:  BNZ   3306
3270:  MOVF   4F,W
3272:  SUBWF  4B,W
3274:  BNZ   3306
3276:  MOVF   50,W
3278:  SUBWF  4C,W
327A:  BNZ   3306
....................             lcd_gotoxy(1,1); 
327C:  MOVLW  01
327E:  MOVWF  xFA
3280:  MOVWF  xFB
3282:  CALL   0A72
....................             printf(lcd_putc,"                    "); 
3286:  MOVLW  32
3288:  MOVWF  FF6
328A:  MOVLW  05
328C:  MOVWF  FF7
328E:  CALL   0B38
....................             lcd_gotoxy(1,2); 
3292:  MOVLW  01
3294:  MOVWF  xFA
3296:  MOVLW  02
3298:  MOVWF  xFB
329A:  CALL   0A72
....................             printf(lcd_putc,"     Contraseña     "); 
329E:  MOVLW  48
32A0:  MOVWF  FF6
32A2:  MOVLW  05
32A4:  MOVWF  FF7
32A6:  CALL   0B38
....................             lcd_gotoxy(1,3); 
32AA:  MOVLW  01
32AC:  MOVWF  xFA
32AE:  MOVLW  03
32B0:  MOVWF  xFB
32B2:  CALL   0A72
....................             printf(lcd_putc,"      Correcta      "); 
32B6:  MOVLW  5E
32B8:  MOVWF  FF6
32BA:  MOVLW  05
32BC:  MOVWF  FF7
32BE:  CALL   0B38
....................             lcd_gotoxy(1,4); 
32C2:  MOVLW  01
32C4:  MOVWF  xFA
32C6:  MOVLW  04
32C8:  MOVWF  xFB
32CA:  CALL   0A72
....................             printf(lcd_putc,"                    "); 
32CE:  MOVLW  74
32D0:  MOVWF  FF6
32D2:  MOVLW  05
32D4:  MOVWF  FF7
32D6:  CALL   0B38
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
32DA:  MOVLW  02
32DC:  MOVWF  xE8
32DE:  MOVLW  FA
32E0:  MOVWF  xFF
32E2:  CALL   0940
32E6:  DECFSZ xE8,F
32E8:  BRA    32DE
32EA:  MOVLW  3D
32EC:  MOVWF  2C
32EE:  MOVLW  0B
32F0:  MOVWF  2F
32F2:  MOVLW  0C
32F4:  MOVWF  xF9
32F6:  CALL   0ADA
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
32FA:  CLRF   49
32FC:  CLRF   4A
32FE:  CLRF   4B
3300:  CLRF   4C
3302:  BSF    2B.3
....................          }else{ 
3304:  BRA    338A
....................             lcd_gotoxy(1,1); 
3306:  MOVLW  01
3308:  MOVWF  xFA
330A:  MOVWF  xFB
330C:  CALL   0A72
....................             printf(lcd_putc,"                    "); 
3310:  MOVLW  8A
3312:  MOVWF  FF6
3314:  MOVLW  05
3316:  MOVWF  FF7
3318:  CALL   0B38
....................             lcd_gotoxy(1,2); 
331C:  MOVLW  01
331E:  MOVWF  xFA
3320:  MOVLW  02
3322:  MOVWF  xFB
3324:  CALL   0A72
....................             printf(lcd_putc,"     Contraseña     "); 
3328:  MOVLW  A0
332A:  MOVWF  FF6
332C:  MOVLW  05
332E:  MOVWF  FF7
3330:  CALL   0B38
....................             lcd_gotoxy(1,3); 
3334:  MOVLW  01
3336:  MOVWF  xFA
3338:  MOVLW  03
333A:  MOVWF  xFB
333C:  CALL   0A72
....................             printf(lcd_putc,"     Incorrecta     "); 
3340:  MOVLW  B6
3342:  MOVWF  FF6
3344:  MOVLW  05
3346:  MOVWF  FF7
3348:  CALL   0B38
....................             lcd_gotoxy(1,4); 
334C:  MOVLW  01
334E:  MOVWF  xFA
3350:  MOVLW  04
3352:  MOVWF  xFB
3354:  CALL   0A72
....................             printf(lcd_putc,"                    "); 
3358:  MOVLW  CC
335A:  MOVWF  FF6
335C:  MOVLW  05
335E:  MOVWF  FF7
3360:  CALL   0B38
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
3364:  MOVLW  02
3366:  MOVWF  xE8
3368:  MOVLW  FA
336A:  MOVWF  xFF
336C:  CALL   0940
3370:  DECFSZ xE8,F
3372:  BRA    3368
3374:  MOVLW  0B
3376:  MOVWF  2F
3378:  MOVLW  0C
337A:  MOVWF  xF9
337C:  CALL   0ADA
3380:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3382:  CLRF   49
3384:  CLRF   4A
3386:  CLRF   4B
3388:  CLRF   4C
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
338A:  MOVF   2C,W
338C:  SUBLW  3D
338E:  BTFSS  FD8.2
3390:  BRA    3722
....................       EliminaRuido(); 
3392:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3396:  MOVLW  01
3398:  MOVWF  xFA
339A:  MOVWF  xFB
339C:  CALL   0A72
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
33A0:  MOVLW  E2
33A2:  MOVWF  FF6
33A4:  MOVLW  05
33A6:  MOVWF  FF7
33A8:  CALL   0B38
....................          lcd_gotoxy(1,2); 
33AC:  MOVLW  01
33AE:  MOVWF  xFA
33B0:  MOVLW  02
33B2:  MOVWF  xFB
33B4:  CALL   0A72
....................          printf(lcd_putc,"     Contraseña     "); 
33B8:  MOVLW  F8
33BA:  MOVWF  FF6
33BC:  MOVLW  05
33BE:  MOVWF  FF7
33C0:  CALL   0B38
....................          lcd_gotoxy(1,3); 
33C4:  MOVLW  01
33C6:  MOVWF  xFA
33C8:  MOVLW  03
33CA:  MOVWF  xFB
33CC:  CALL   0A72
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
33D0:  MOVLW  0E
33D2:  MOVWF  FF6
33D4:  MOVLW  06
33D6:  MOVWF  FF7
33D8:  MOVLW  0A
33DA:  MOVWF  xEC
33DC:  CALL   153A
33E0:  MOVFF  49,E8
33E4:  MOVLW  1F
33E6:  MOVWF  xE9
33E8:  CALL   1582
33EC:  MOVFF  4A,E8
33F0:  MOVLW  1F
33F2:  MOVWF  xE9
33F4:  CALL   1582
33F8:  MOVFF  4B,E8
33FC:  MOVLW  1F
33FE:  MOVWF  xE9
3400:  CALL   1582
3404:  MOVFF  4C,E8
3408:  MOVLW  1F
340A:  MOVWF  xE9
340C:  CALL   1582
3410:  MOVLW  20
3412:  MOVWF  xF9
3414:  CALL   0ADA
3418:  MOVLW  20
341A:  MOVWF  xF9
341C:  CALL   0ADA
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
3420:  MOVFF  2F,FA
3424:  MOVLW  04
3426:  MOVWF  xFB
3428:  CALL   0A72
....................          lcd_putc(t[2]); 
342C:  MOVFF  48,F9
3430:  CALL   0ADA
....................           
....................          if(unidad>11&&unidad<14){ 
3434:  MOVF   2F,W
3436:  SUBLW  0B
3438:  BC    3458
343A:  MOVF   2F,W
343C:  SUBLW  0D
343E:  BNC   3458
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
3440:  MOVLW  01
3442:  SUBWF  2F,W
3444:  MOVWF  xE8
3446:  MOVWF  xFA
3448:  MOVLW  04
344A:  MOVWF  xFB
344C:  CALL   0A72
....................             lcd_putc(t[1]); 
3450:  MOVFF  47,F9
3454:  CALL   0ADA
....................          } 
....................           
....................          Cambio=OFF; 
3458:  BCF    2B.3
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
345A:  BSF    F92.5
345C:  BTFSC  F80.5
345E:  BRA    3492
....................          delay_ms(20); 
3460:  MOVLW  14
3462:  MOVWF  xFF
3464:  CALL   0940
....................          if(UP){ 
3468:  BSF    F92.5
346A:  BTFSC  F80.5
346C:  BRA    3490
....................             if(Flanco == 0) { 
346E:  BTFSC  29.3
3470:  BRA    3490
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3472:  MOVLW  0B
3474:  SUBWF  2F,W
3476:  CLRF   03
3478:  ADDLW  49
347A:  MOVWF  FE9
347C:  MOVLW  00
347E:  ADDWFC 03,W
3480:  MOVWF  FEA
3482:  INCF   FEF,F
3484:  BSF    29.3
3486:  MOVLW  1E
3488:  MOVWF  xFF
348A:  CALL   0940
348E:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3490:  BRA    3494
....................          Flanco = 0; 
3492:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3494:  BSF    F96.0
3496:  BTFSC  F84.0
3498:  BRA    34CC
....................          delay_ms(20); 
349A:  MOVLW  14
349C:  MOVWF  xFF
349E:  CALL   0940
....................          if(DOWN){ 
34A2:  BSF    F96.0
34A4:  BTFSC  F84.0
34A6:  BRA    34CA
....................             if(Flanco2 == 0) { 
34A8:  BTFSC  29.5
34AA:  BRA    34CA
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
34AC:  MOVLW  0B
34AE:  SUBWF  2F,W
34B0:  CLRF   03
34B2:  ADDLW  49
34B4:  MOVWF  FE9
34B6:  MOVLW  00
34B8:  ADDWFC 03,W
34BA:  MOVWF  FEA
34BC:  DECF   FEF,F
34BE:  BSF    29.5
34C0:  MOVLW  1E
34C2:  MOVWF  xFF
34C4:  CALL   0940
34C8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
34CA:  BRA    34CE
....................          Flanco2 = 0; 
34CC:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
34CE:  BSF    F96.1
34D0:  BTFSC  F84.1
34D2:  BRA    34F6
....................          if(RIGHT){ 
34D4:  BSF    F96.1
34D6:  BTFSC  F84.1
34D8:  BRA    34F4
....................             if(Flanco1 == 0) { 
34DA:  BTFSC  29.4
34DC:  BRA    34F4
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
34DE:  BSF    29.4
34E0:  INCF   2F,F
34E2:  MOVLW  1E
34E4:  MOVWF  xFF
34E6:  CALL   0940
34EA:  MOVLW  0C
34EC:  MOVWF  xF9
34EE:  CALL   0ADA
34F2:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
34F4:  BRA    34F8
....................          Flanco1 = 0; 
34F6:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
34F8:  BSF    F96.2
34FA:  BTFSC  F84.2
34FC:  BRA    3528
....................          delay_ms(150); 
34FE:  MOVLW  96
3500:  MOVWF  xFF
3502:  CALL   0940
....................          if(IZQU){ 
3506:  BSF    F96.2
3508:  BTFSC  F84.2
350A:  BRA    3526
....................             if(Flanco3 == 0){ 
350C:  BTFSC  29.6
350E:  BRA    3526
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3510:  BSF    29.6
3512:  DECF   2F,F
3514:  MOVLW  1E
3516:  MOVWF  xFF
3518:  CALL   0940
351C:  MOVLW  0C
351E:  MOVWF  xF9
3520:  CALL   0ADA
3524:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3526:  BRA    352A
....................         Flanco3 = 0; 
3528:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
352A:  MOVLW  0B
352C:  SUBWF  2F,W
352E:  CLRF   03
3530:  ADDLW  49
3532:  MOVWF  FE9
3534:  MOVLW  00
3536:  ADDWFC 03,W
3538:  MOVWF  FEA
353A:  BTFSC  FEF.7
353C:  BRA    3540
353E:  BRA    3554
....................          clave[unidad-11]=9; 
3540:  MOVLW  0B
3542:  SUBWF  2F,W
3544:  CLRF   03
3546:  ADDLW  49
3548:  MOVWF  FE9
354A:  MOVLW  00
354C:  ADDWFC 03,W
354E:  MOVWF  FEA
3550:  MOVLW  09
3552:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3554:  MOVLW  0B
3556:  SUBWF  2F,W
3558:  CLRF   03
355A:  ADDLW  49
355C:  MOVWF  FE9
355E:  MOVLW  00
3560:  ADDWFC 03,W
3562:  MOVWF  FEA
3564:  BTFSC  FEF.7
3566:  BRA    3580
3568:  MOVF   FEF,W
356A:  SUBLW  09
356C:  BC    3580
....................          clave[unidad-11]=0; 
356E:  MOVLW  0B
3570:  SUBWF  2F,W
3572:  CLRF   03
3574:  ADDLW  49
3576:  MOVWF  FE9
3578:  MOVLW  00
357A:  ADDWFC 03,W
357C:  MOVWF  FEA
357E:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3580:  MOVF   2F,W
3582:  SUBLW  0A
3584:  BNC   35A4
....................          unidad=11; 
3586:  MOVLW  0B
3588:  MOVWF  2F
....................          Menu=1; 
358A:  MOVLW  01
358C:  MOVWF  2C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
358E:  CLRF   49
3590:  CLRF   4A
3592:  CLRF   4B
3594:  CLRF   4C
3596:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
3598:  MOVLW  0B
359A:  MOVWF  2F
359C:  MOVLW  0C
359E:  MOVWF  xF9
35A0:  CALL   0ADA
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
35A4:  MOVF   2F,W
35A6:  SUBLW  0E
35A8:  BTFSC  FD8.0
35AA:  BRA    3722
....................          lcd_gotoxy(1,1); 
35AC:  MOVLW  01
35AE:  MOVWF  xFA
35B0:  MOVWF  xFB
35B2:  CALL   0A72
....................          printf(lcd_putc,"                    "); 
35B6:  MOVLW  24
35B8:  MOVWF  FF6
35BA:  MOVLW  06
35BC:  MOVWF  FF7
35BE:  CALL   0B38
....................          lcd_gotoxy(1,2); 
35C2:  MOVLW  01
35C4:  MOVWF  xFA
35C6:  MOVLW  02
35C8:  MOVWF  xFB
35CA:  CALL   0A72
....................          printf(lcd_putc,"     Contraseña     "); 
35CE:  MOVLW  3A
35D0:  MOVWF  FF6
35D2:  MOVLW  06
35D4:  MOVWF  FF7
35D6:  CALL   0B38
....................          lcd_gotoxy(1,3); 
35DA:  MOVLW  01
35DC:  MOVWF  xFA
35DE:  MOVLW  03
35E0:  MOVWF  xFB
35E2:  CALL   0A72
....................          printf(lcd_putc,"     Almacenada     "); 
35E6:  MOVLW  50
35E8:  MOVWF  FF6
35EA:  MOVLW  06
35EC:  MOVWF  FF7
35EE:  CALL   0B38
....................          lcd_gotoxy(1,4); 
35F2:  MOVLW  01
35F4:  MOVWF  xFA
35F6:  MOVLW  04
35F8:  MOVWF  xFB
35FA:  CALL   0A72
....................          printf(lcd_putc,"                    "); 
35FE:  MOVLW  66
3600:  MOVWF  FF6
3602:  MOVLW  06
3604:  MOVWF  FF7
3606:  CALL   0B38
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
360A:  CLRF   FA9
360C:  MOVFF  49,FA8
3610:  BCF    FA6.6
3612:  BCF    FA6.7
3614:  BSF    FA6.2
3616:  MOVF   FF2,W
3618:  MOVWF  00
361A:  BCF    FF2.6
361C:  BCF    FF2.7
361E:  MOVLB  F
3620:  MOVLW  55
3622:  MOVWF  FA7
3624:  MOVLW  AA
3626:  MOVWF  FA7
3628:  BSF    FA6.1
362A:  BTFSC  FA6.1
362C:  BRA    362A
362E:  BCF    FA6.2
3630:  MOVF   00,W
3632:  IORWF  FF2,F
3634:  MOVLW  14
3636:  MOVLB  0
3638:  MOVWF  xFF
363A:  CALL   0940
363E:  MOVLW  01
3640:  MOVWF  FA9
3642:  MOVFF  4A,FA8
3646:  BCF    FA6.6
3648:  BCF    FA6.7
364A:  BSF    FA6.2
364C:  MOVF   FF2,W
364E:  MOVWF  00
3650:  BCF    FF2.6
3652:  BCF    FF2.7
3654:  MOVLB  F
3656:  MOVLW  55
3658:  MOVWF  FA7
365A:  MOVLW  AA
365C:  MOVWF  FA7
365E:  BSF    FA6.1
3660:  BTFSC  FA6.1
3662:  BRA    3660
3664:  BCF    FA6.2
3666:  MOVF   00,W
3668:  IORWF  FF2,F
366A:  MOVLW  14
366C:  MOVLB  0
366E:  MOVWF  xFF
3670:  CALL   0940
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3674:  MOVLW  02
3676:  MOVWF  FA9
3678:  MOVFF  4B,FA8
367C:  BCF    FA6.6
367E:  BCF    FA6.7
3680:  BSF    FA6.2
3682:  MOVF   FF2,W
3684:  MOVWF  00
3686:  BCF    FF2.6
3688:  BCF    FF2.7
368A:  MOVLB  F
368C:  MOVLW  55
368E:  MOVWF  FA7
3690:  MOVLW  AA
3692:  MOVWF  FA7
3694:  BSF    FA6.1
3696:  BTFSC  FA6.1
3698:  BRA    3696
369A:  BCF    FA6.2
369C:  MOVF   00,W
369E:  IORWF  FF2,F
36A0:  MOVLW  14
36A2:  MOVLB  0
36A4:  MOVWF  xFF
36A6:  CALL   0940
36AA:  MOVLW  03
36AC:  MOVWF  FA9
36AE:  MOVFF  4C,FA8
36B2:  BCF    FA6.6
36B4:  BCF    FA6.7
36B6:  BSF    FA6.2
36B8:  MOVF   FF2,W
36BA:  MOVWF  00
36BC:  BCF    FF2.6
36BE:  BCF    FF2.7
36C0:  MOVLB  F
36C2:  MOVLW  55
36C4:  MOVWF  FA7
36C6:  MOVLW  AA
36C8:  MOVWF  FA7
36CA:  BSF    FA6.1
36CC:  BTFSC  FA6.1
36CE:  BRA    36CC
36D0:  BCF    FA6.2
36D2:  MOVF   00,W
36D4:  IORWF  FF2,F
36D6:  MOVLW  14
36D8:  MOVLB  0
36DA:  MOVWF  xFF
36DC:  CALL   0940
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
36E0:  MOVLW  02
36E2:  MOVWF  xE8
36E4:  MOVLW  FA
36E6:  MOVWF  xFF
36E8:  CALL   0940
36EC:  DECFSZ xE8,F
36EE:  BRA    36E4
36F0:  MOVLW  01
36F2:  MOVWF  2C
36F4:  CLRF   45
36F6:  MOVLW  02
36F8:  MOVWF  30
36FA:  MOVWF  32
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
36FC:  MOVFF  49,4D
3700:  MOVFF  4A,4E
3704:  MOVFF  4B,4F
3708:  MOVFF  4C,50
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
370C:  CLRF   49
370E:  CLRF   4A
3710:  CLRF   4B
3712:  CLRF   4C
3714:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f");          
3716:  MOVLW  0B
3718:  MOVWF  2F
371A:  MOVLW  0C
371C:  MOVWF  xF9
371E:  CALL   0ADA
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
3722:  MOVF   2C,W
3724:  SUBLW  04
3726:  BTFSS  FD8.2
3728:  BRA    3944
....................    EliminaRuido(); 
372A:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
372E:  MOVLW  01
3730:  MOVWF  xFA
3732:  MOVWF  xFB
3734:  CALL   0A72
....................       printf(lcd_putc,"  Duracion Actual   "); 
3738:  MOVLW  7C
373A:  MOVWF  FF6
373C:  MOVLW  06
373E:  MOVWF  FF7
3740:  CALL   0B38
....................       lcd_gotoxy(1,2); 
3744:  MOVLW  01
3746:  MOVWF  xFA
3748:  MOVLW  02
374A:  MOVWF  xFB
374C:  CALL   0A72
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
3750:  MOVLW  92
3752:  MOVWF  FF6
3754:  MOVLW  06
3756:  MOVWF  FF7
3758:  MOVLW  0B
375A:  MOVWF  xEC
375C:  CALL   153A
3760:  MOVLW  08
3762:  MOVWF  FE9
3764:  MOVFF  5A,E9
3768:  MOVFF  59,E8
376C:  GOTO   1792
3770:  MOVLW  20
3772:  MOVWF  xF9
3774:  CALL   0ADA
3778:  MOVLW  20
377A:  MOVWF  xF9
377C:  CALL   0ADA
3780:  MOVLW  20
3782:  MOVWF  xF9
3784:  CALL   0ADA
....................       lcd_gotoxy(1,4); 
3788:  MOVLW  01
378A:  MOVWF  xFA
378C:  MOVLW  04
378E:  MOVWF  xFB
3790:  CALL   0A72
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3794:  MOVLW  A6
3796:  MOVWF  FF6
3798:  MOVLW  06
379A:  MOVWF  FF7
379C:  CALL   0B38
....................        
....................       Cambio=OFF; 
37A0:  BCF    2B.3
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
37A2:  BSF    F92.5
37A4:  BTFSC  F80.5
37A6:  BRA    3900
37A8:  BSF    F96.1
37AA:  BTFSC  F84.1
37AC:  BRA    3900
....................          delay_ms(20); 
37AE:  MOVLW  14
37B0:  MOVWF  xFF
37B2:  CALL   0940
....................          if(UP && RIGHT){ 
37B6:  BSF    F92.5
37B8:  BTFSC  F80.5
37BA:  BRA    3900
37BC:  BSF    F96.1
37BE:  BTFSC  F84.1
37C0:  BRA    3900
....................             delay_ms(200); 
37C2:  MOVLW  C8
37C4:  MOVWF  xFF
37C6:  CALL   0940
....................             printf(lcd_putc,"\f"); 
37CA:  MOVLW  0C
37CC:  MOVWF  xF9
37CE:  CALL   0ADA
....................             lcd_gotoxy(1,2); 
37D2:  MOVLW  01
37D4:  MOVWF  xFA
37D6:  MOVLW  02
37D8:  MOVWF  xFB
37DA:  CALL   0A72
....................             printf(lcd_putc," Reset de tiempo "); 
37DE:  MOVLW  BC
37E0:  MOVWF  FF6
37E2:  MOVLW  06
37E4:  MOVWF  FF7
37E6:  CALL   0B38
....................             lcd_gotoxy(1,3); 
37EA:  MOVLW  01
37EC:  MOVWF  xFA
37EE:  MOVLW  03
37F0:  MOVWF  xFB
37F2:  CALL   0A72
....................             printf(lcd_putc,"     Exitoso     "); 
37F6:  MOVLW  CE
37F8:  MOVWF  FF6
37FA:  MOVLW  06
37FC:  MOVWF  FF7
37FE:  CALL   0B38
....................             write_eeprom(7,0); 
3802:  MOVLW  07
3804:  MOVWF  FA9
3806:  CLRF   FA8
3808:  BCF    FA6.6
380A:  BCF    FA6.7
380C:  BSF    FA6.2
380E:  MOVF   FF2,W
3810:  MOVWF  00
3812:  BCF    FF2.6
3814:  BCF    FF2.7
3816:  MOVLB  F
3818:  MOVLW  55
381A:  MOVWF  FA7
381C:  MOVLW  AA
381E:  MOVWF  FA7
3820:  BSF    FA6.1
3822:  BTFSC  FA6.1
3824:  BRA    3822
3826:  BCF    FA6.2
3828:  MOVF   00,W
382A:  IORWF  FF2,F
....................             delay_ms(20); 
382C:  MOVLW  14
382E:  MOVLB  0
3830:  MOVWF  xFF
3832:  CALL   0940
....................             write_eeprom(8,0); 
3836:  MOVLW  08
3838:  MOVWF  FA9
383A:  CLRF   FA8
383C:  BCF    FA6.6
383E:  BCF    FA6.7
3840:  BSF    FA6.2
3842:  MOVF   FF2,W
3844:  MOVWF  00
3846:  BCF    FF2.6
3848:  BCF    FF2.7
384A:  MOVLB  F
384C:  MOVLW  55
384E:  MOVWF  FA7
3850:  MOVLW  AA
3852:  MOVWF  FA7
3854:  BSF    FA6.1
3856:  BTFSC  FA6.1
3858:  BRA    3856
385A:  BCF    FA6.2
385C:  MOVF   00,W
385E:  IORWF  FF2,F
....................             delay_ms(20); 
3860:  MOVLW  14
3862:  MOVLB  0
3864:  MOVWF  xFF
3866:  CALL   0940
....................             write_eeprom(9,0); 
386A:  MOVLW  09
386C:  MOVWF  FA9
386E:  CLRF   FA8
3870:  BCF    FA6.6
3872:  BCF    FA6.7
3874:  BSF    FA6.2
3876:  MOVF   FF2,W
3878:  MOVWF  00
387A:  BCF    FF2.6
387C:  BCF    FF2.7
387E:  MOVLB  F
3880:  MOVLW  55
3882:  MOVWF  FA7
3884:  MOVLW  AA
3886:  MOVWF  FA7
3888:  BSF    FA6.1
388A:  BTFSC  FA6.1
388C:  BRA    388A
388E:  BCF    FA6.2
3890:  MOVF   00,W
3892:  IORWF  FF2,F
....................             delay_ms(20); 
3894:  MOVLW  14
3896:  MOVLB  0
3898:  MOVWF  xFF
389A:  CALL   0940
....................             write_eeprom(10,0); 
389E:  MOVLW  0A
38A0:  MOVWF  FA9
38A2:  CLRF   FA8
38A4:  BCF    FA6.6
38A6:  BCF    FA6.7
38A8:  BSF    FA6.2
38AA:  MOVF   FF2,W
38AC:  MOVWF  00
38AE:  BCF    FF2.6
38B0:  BCF    FF2.7
38B2:  MOVLB  F
38B4:  MOVLW  55
38B6:  MOVWF  FA7
38B8:  MOVLW  AA
38BA:  MOVWF  FA7
38BC:  BSF    FA6.1
38BE:  BTFSC  FA6.1
38C0:  BRA    38BE
38C2:  BCF    FA6.2
38C4:  MOVF   00,W
38C6:  IORWF  FF2,F
....................             delay_ms(700); 
38C8:  MOVLW  04
38CA:  MOVLB  0
38CC:  MOVWF  xE8
38CE:  MOVLW  AF
38D0:  MOVWF  xFF
38D2:  CALL   0940
38D6:  DECFSZ xE8,F
38D8:  BRA    38CE
....................             segundos=0;minutos=0;horas=0; 
38DA:  CLRF   35
38DC:  CLRF   36
38DE:  CLRF   5A
38E0:  CLRF   59
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
38E2:  MOVLW  1E
38E4:  MOVWF  xFF
38E6:  CALL   0940
38EA:  MOVLW  01
38EC:  MOVWF  2C
38EE:  CLRF   45
38F0:  MOVLW  02
38F2:  MOVWF  30
38F4:  MOVWF  32
38F6:  MOVLW  0C
38F8:  MOVWF  xF9
38FA:  CALL   0ADA
....................             Cambio=ON; 
38FE:  BSF    2B.3
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3900:  BSF    F96.2
3902:  BTFSC  F84.2
3904:  BRA    3942
....................          delay_ms(20); 
3906:  MOVLW  14
3908:  MOVWF  xFF
390A:  CALL   0940
....................          if(IZQU){ 
390E:  BSF    F96.2
3910:  BTFSC  F84.2
3912:  BRA    3940
....................             if(Flanco3 == 0){ 
3914:  BTFSC  29.6
3916:  BRA    3940
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
3918:  BSF    29.6
391A:  MOVLW  02
391C:  MOVWF  xE8
391E:  MOVLW  FA
3920:  MOVWF  xFF
3922:  CALL   0940
3926:  DECFSZ xE8,F
3928:  BRA    391E
392A:  MOVLW  01
392C:  MOVWF  2C
392E:  CLRF   45
3930:  MOVLW  02
3932:  MOVWF  30
3934:  MOVWF  32
3936:  MOVLW  0C
3938:  MOVWF  xF9
393A:  CALL   0ADA
393E:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3940:  BRA    3944
....................          Flanco3 = 0; 
3942:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3944:  MOVF   2C,W
3946:  SUBLW  05
3948:  BTFSS  FD8.2
394A:  BRA    3BA8
....................       EliminaRuido(); 
394C:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3950:  MOVLW  01
3952:  MOVWF  xFA
3954:  MOVWF  xFB
3956:  CALL   0A72
....................          printf(lcd_putc,"  Zero Point Config "); 
395A:  MOVLW  E0
395C:  MOVWF  FF6
395E:  MOVLW  06
3960:  MOVWF  FF7
3962:  CALL   0B38
....................          lcd_gotoxy(1,2); 
3966:  MOVLW  01
3968:  MOVWF  xFA
396A:  MOVLW  02
396C:  MOVWF  xFB
396E:  CALL   0A72
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3972:  MOVLW  05
3974:  MOVWF  xE8
3976:  CALL   1C90
397A:  MOVFF  00,E8
397E:  MOVFF  01,E9
3982:  MOVFF  02,EA
3986:  MOVFF  03,EB
398A:  MOVFF  03,FF
398E:  MOVFF  02,FE
3992:  MOVFF  01,FD
3996:  MOVFF  00,FC
399A:  MOVLW  D7
399C:  MOVLB  1
399E:  MOVWF  x03
39A0:  MOVLW  A3
39A2:  MOVWF  x02
39A4:  CLRF   x01
39A6:  MOVLW  81
39A8:  MOVWF  x00
39AA:  MOVLB  0
39AC:  CALL   1E32
39B0:  MOVFF  00,E8
39B4:  MOVFF  01,E9
39B8:  MOVFF  02,EA
39BC:  MOVFF  03,EB
39C0:  MOVLW  F6
39C2:  MOVWF  FF6
39C4:  MOVLW  06
39C6:  MOVWF  FF7
39C8:  MOVLW  09
39CA:  MOVWF  xEC
39CC:  CALL   153A
39D0:  MOVLW  02
39D2:  MOVWF  FE9
39D4:  MOVFF  EB,EF
39D8:  MOVFF  EA,EE
39DC:  MOVFF  E9,ED
39E0:  MOVFF  E8,EC
39E4:  MOVWF  xF0
39E6:  CALL   2052
39EA:  MOVLW  04
39EC:  MOVWF  FF6
39EE:  MOVLW  07
39F0:  MOVWF  FF7
39F2:  MOVLW  07
39F4:  MOVWF  xEC
39F6:  CALL   153A
....................          lcd_gotoxy(1,3); 
39FA:  MOVLW  01
39FC:  MOVWF  xFA
39FE:  MOVLW  03
3A00:  MOVWF  xFB
3A02:  CALL   0A72
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
3A06:  CLRF   xED
3A08:  CALL   1848
3A0C:  MOVFF  00,E8
3A10:  MOVFF  01,E9
3A14:  MOVFF  02,EA
3A18:  MOVFF  03,EB
3A1C:  MOVLW  0C
3A1E:  MOVWF  FF6
3A20:  MOVLW  07
3A22:  MOVWF  FF7
3A24:  MOVLW  08
3A26:  MOVWF  xEC
3A28:  CALL   153A
3A2C:  MOVLW  01
3A2E:  MOVWF  FE9
3A30:  MOVFF  EB,EF
3A34:  MOVFF  EA,EE
3A38:  MOVFF  E9,ED
3A3C:  MOVFF  E8,EC
3A40:  CLRF   xF0
3A42:  CALL   2052
....................          lcd_gotoxy(1,4); 
3A46:  MOVLW  01
3A48:  MOVWF  xFA
3A4A:  MOVLW  04
3A4C:  MOVWF  xFB
3A4E:  CALL   0A72
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
3A52:  MOVLW  1A
3A54:  MOVWF  FF6
3A56:  MOVLW  07
3A58:  MOVWF  FF7
3A5A:  MOVLW  07
3A5C:  MOVWF  xEC
3A5E:  CALL   153A
3A62:  MOVLW  01
3A64:  MOVWF  FE9
3A66:  MOVFF  C8,EF
3A6A:  MOVFF  C7,EE
3A6E:  MOVFF  C6,ED
3A72:  MOVFF  C5,EC
3A76:  CLRF   xF0
3A78:  CALL   2052
....................           
....................          Cambio=OFF; 
3A7C:  BCF    2B.3
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
3A7E:  BSF    F96.1
3A80:  BTFSC  F84.1
3A82:  BRA    3B68
....................          delay_ms(20); 
3A84:  MOVLW  14
3A86:  MOVWF  xFF
3A88:  CALL   0940
....................          if(RIGHT){ 
3A8C:  BSF    F96.1
3A8E:  BTFSC  F84.1
3A90:  BRA    3B66
....................             if(Flanco1 == 0){ 
3A92:  BTFSC  29.4
3A94:  BRA    3B66
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3A96:  MOVLW  01
3A98:  MOVWF  2C
3A9A:  CLRF   45
3A9C:  MOVLW  02
3A9E:  MOVWF  30
3AA0:  MOVWF  32
3AA2:  MOVLW  0B
3AA4:  MOVWF  2F
3AA6:  MOVLW  02
3AA8:  MOVWF  xE8
3AAA:  MOVLW  FA
3AAC:  MOVWF  xFF
3AAE:  CALL   0940
3AB2:  DECFSZ xE8,F
3AB4:  BRA    3AAA
3AB6:  MOVLW  0C
3AB8:  MOVWF  xF9
3ABA:  CALL   0ADA
....................                G=sensores(0); 
3ABE:  CLRF   xED
3AC0:  CALL   1848
3AC4:  MOVFF  03,C8
3AC8:  MOVFF  02,C7
3ACC:  MOVFF  01,C6
3AD0:  MOVFF  00,C5
....................                G16=(int16)G; 
3AD4:  MOVFF  C8,FF
3AD8:  MOVFF  C7,FE
3ADC:  MOVFF  C6,FD
3AE0:  MOVFF  C5,FC
3AE4:  CALL   21E0
3AE8:  MOVFF  02,5C
3AEC:  MOVFF  01,5B
....................                G_l=G16; G_h=(G16>>8); 
3AF0:  MOVFF  5B,39
3AF4:  MOVFF  5C,3A
....................                 
....................                write_eeprom(11,G_l); 
3AF8:  MOVLW  0B
3AFA:  MOVWF  FA9
3AFC:  MOVFF  39,FA8
3B00:  BCF    FA6.6
3B02:  BCF    FA6.7
3B04:  BSF    FA6.2
3B06:  MOVF   FF2,W
3B08:  MOVWF  00
3B0A:  BCF    FF2.6
3B0C:  BCF    FF2.7
3B0E:  MOVLB  F
3B10:  MOVLW  55
3B12:  MOVWF  FA7
3B14:  MOVLW  AA
3B16:  MOVWF  FA7
3B18:  BSF    FA6.1
3B1A:  BTFSC  FA6.1
3B1C:  BRA    3B1A
3B1E:  BCF    FA6.2
3B20:  MOVF   00,W
3B22:  IORWF  FF2,F
....................                delay_ms(20); 
3B24:  MOVLW  14
3B26:  MOVLB  0
3B28:  MOVWF  xFF
3B2A:  CALL   0940
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
3B2E:  MOVLW  0C
3B30:  MOVWF  FA9
3B32:  MOVFF  3A,FA8
3B36:  BCF    FA6.6
3B38:  BCF    FA6.7
3B3A:  BSF    FA6.2
3B3C:  MOVF   FF2,W
3B3E:  MOVWF  00
3B40:  BCF    FF2.6
3B42:  BCF    FF2.7
3B44:  MOVLB  F
3B46:  MOVLW  55
3B48:  MOVWF  FA7
3B4A:  MOVLW  AA
3B4C:  MOVWF  FA7
3B4E:  BSF    FA6.1
3B50:  BTFSC  FA6.1
3B52:  BRA    3B50
3B54:  BCF    FA6.2
3B56:  MOVF   00,W
3B58:  IORWF  FF2,F
....................                delay_ms(20); 
3B5A:  MOVLW  14
3B5C:  MOVLB  0
3B5E:  MOVWF  xFF
3B60:  CALL   0940
....................                Cambio=ON; 
3B64:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3B66:  BRA    3B6A
....................          Flanco1 = 0; 
3B68:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3B6A:  BSF    F96.2
3B6C:  BTFSC  F84.2
3B6E:  BRA    3BA6
....................          delay_ms(20); 
3B70:  MOVLW  14
3B72:  MOVWF  xFF
3B74:  CALL   0940
....................          if(IZQU){ 
3B78:  BSF    F96.2
3B7A:  BTFSC  F84.2
3B7C:  BRA    3BA4
....................             if(Flanco3 == 0){ 
3B7E:  BTFSC  29.6
3B80:  BRA    3BA4
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3B82:  MOVLW  01
3B84:  MOVWF  2C
3B86:  CLRF   45
3B88:  MOVLW  02
3B8A:  MOVWF  30
3B8C:  MOVWF  32
3B8E:  MOVLW  0B
3B90:  MOVWF  2F
3B92:  MOVLW  1E
3B94:  MOVWF  xFF
3B96:  CALL   0940
3B9A:  MOVLW  0C
3B9C:  MOVWF  xF9
3B9E:  CALL   0ADA
....................                Cambio=ON; 
3BA2:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3BA4:  BRA    3BA8
....................          Flanco3 = 0; 
3BA6:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
3BA8:  MOVF   2C,W
3BAA:  SUBLW  06
3BAC:  BTFSS  FD8.2
3BAE:  BRA    3CD8
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
3BB0:  BTG    2A.4
3BB2:  BSF    29.4
3BB4:  MOVLW  01
3BB6:  MOVWF  2C
3BB8:  CLRF   45
....................                        
....................             if(estadoalarma==1) 
3BBA:  BTFSS  2A.4
3BBC:  BRA    3C1E
....................             {estadoalarma=1; 
3BBE:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
3BC0:  MOVLW  01
3BC2:  MOVWF  xFA
3BC4:  MOVWF  xFB
3BC6:  CALL   0A72
....................                printf(lcd_putc,"                    "); 
3BCA:  MOVLW  28
3BCC:  MOVWF  FF6
3BCE:  MOVLW  07
3BD0:  MOVWF  FF7
3BD2:  CALL   0B38
....................                lcd_gotoxy(1,2); 
3BD6:  MOVLW  01
3BD8:  MOVWF  xFA
3BDA:  MOVLW  02
3BDC:  MOVWF  xFB
3BDE:  CALL   0A72
....................                printf(lcd_putc,"        Activo      "); 
3BE2:  MOVLW  3E
3BE4:  MOVWF  FF6
3BE6:  MOVLW  07
3BE8:  MOVWF  FF7
3BEA:  CALL   0B38
....................                lcd_gotoxy(1,3); 
3BEE:  MOVLW  01
3BF0:  MOVWF  xFA
3BF2:  MOVLW  03
3BF4:  MOVWF  xFB
3BF6:  CALL   0A72
....................                printf(lcd_putc,"        Alarma      "); 
3BFA:  MOVLW  54
3BFC:  MOVWF  FF6
3BFE:  MOVLW  07
3C00:  MOVWF  FF7
3C02:  CALL   0B38
....................                lcd_gotoxy(1,4); 
3C06:  MOVLW  01
3C08:  MOVWF  xFA
3C0A:  MOVLW  04
3C0C:  MOVWF  xFB
3C0E:  CALL   0A72
....................                printf(lcd_putc,"                    ");} 
3C12:  MOVLW  6A
3C14:  MOVWF  FF6
3C16:  MOVLW  07
3C18:  MOVWF  FF7
3C1A:  CALL   0B38
....................                 
....................             if(estadoalarma==0) 
3C1E:  BTFSC  2A.4
3C20:  BRA    3C82
....................             {estadoalarma=0; 
3C22:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
3C24:  MOVLW  01
3C26:  MOVWF  xFA
3C28:  MOVWF  xFB
3C2A:  CALL   0A72
....................                printf(lcd_putc,"                    "); 
3C2E:  MOVLW  80
3C30:  MOVWF  FF6
3C32:  MOVLW  07
3C34:  MOVWF  FF7
3C36:  CALL   0B38
....................                lcd_gotoxy(1,2); 
3C3A:  MOVLW  01
3C3C:  MOVWF  xFA
3C3E:  MOVLW  02
3C40:  MOVWF  xFB
3C42:  CALL   0A72
....................                printf(lcd_putc,"      Desactivo     "); 
3C46:  MOVLW  96
3C48:  MOVWF  FF6
3C4A:  MOVLW  07
3C4C:  MOVWF  FF7
3C4E:  CALL   0B38
....................                lcd_gotoxy(1,3); 
3C52:  MOVLW  01
3C54:  MOVWF  xFA
3C56:  MOVLW  03
3C58:  MOVWF  xFB
3C5A:  CALL   0A72
....................                printf(lcd_putc,"       Alarma       "); 
3C5E:  MOVLW  AC
3C60:  MOVWF  FF6
3C62:  MOVLW  07
3C64:  MOVWF  FF7
3C66:  CALL   0B38
....................                lcd_gotoxy(1,4); 
3C6A:  MOVLW  01
3C6C:  MOVWF  xFA
3C6E:  MOVLW  04
3C70:  MOVWF  xFB
3C72:  CALL   0A72
....................                printf(lcd_putc,"                    ");} 
3C76:  MOVLW  C2
3C78:  MOVWF  FF6
3C7A:  MOVLW  07
3C7C:  MOVWF  FF7
3C7E:  CALL   0B38
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3C82:  MOVLW  00
3C84:  BTFSC  2A.4
3C86:  MOVLW  01
3C88:  MOVWF  xE8
3C8A:  MOVLW  04
3C8C:  MOVWF  FA9
3C8E:  MOVFF  E8,FA8
3C92:  BCF    FA6.6
3C94:  BCF    FA6.7
3C96:  BSF    FA6.2
3C98:  MOVF   FF2,W
3C9A:  MOVWF  00
3C9C:  BCF    FF2.6
3C9E:  BCF    FF2.7
3CA0:  MOVLB  F
3CA2:  MOVLW  55
3CA4:  MOVWF  FA7
3CA6:  MOVLW  AA
3CA8:  MOVWF  FA7
3CAA:  BSF    FA6.1
3CAC:  BTFSC  FA6.1
3CAE:  BRA    3CAC
3CB0:  BCF    FA6.2
3CB2:  MOVF   00,W
3CB4:  IORWF  FF2,F
3CB6:  MOVLW  04
3CB8:  MOVLB  0
3CBA:  MOVWF  xE8
3CBC:  MOVLW  FA
3CBE:  MOVWF  xFF
3CC0:  CALL   0940
3CC4:  DECFSZ xE8,F
3CC6:  BRA    3CBC
3CC8:  MOVLW  02
3CCA:  MOVWF  30
3CCC:  MOVWF  32
3CCE:  MOVLW  0C
3CD0:  MOVWF  xF9
3CD2:  CALL   0ADA
....................             Cambio=ON; 
3CD6:  BSF    2B.3
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
3CD8:  MOVF   2C,W
3CDA:  SUBLW  07
3CDC:  BTFSS  FD8.2
3CDE:  BRA    3E76
....................       if(Vel1>6) 
3CE0:  MOVF   56,W
3CE2:  SUBLW  06
3CE4:  BC    3CEA
....................          Vel1=6; 
3CE6:  MOVLW  06
3CE8:  MOVWF  56
....................       if(Vel1<1) 
3CEA:  MOVF   56,F
3CEC:  BNZ   3CF2
....................          Vel1=1; 
3CEE:  MOVLW  01
3CF0:  MOVWF  56
....................        
....................       lcd_gotoxy(1,1); 
3CF2:  MOVLW  01
3CF4:  MOVWF  xFA
3CF6:  MOVWF  xFB
3CF8:  CALL   0A72
....................       printf(lcd_putc,"Seleccione Velocidad"); 
3CFC:  MOVLW  D8
3CFE:  MOVWF  FF6
3D00:  MOVLW  07
3D02:  MOVWF  FF7
3D04:  CALL   0B38
....................       lcd_gotoxy(1,2); 
3D08:  MOVLW  01
3D0A:  MOVWF  xFA
3D0C:  MOVLW  02
3D0E:  MOVWF  xFB
3D10:  CALL   0A72
....................       printf(lcd_putc,"   del Ventilador   "); 
3D14:  MOVLW  EE
3D16:  MOVWF  FF6
3D18:  MOVLW  07
3D1A:  MOVWF  FF7
3D1C:  CALL   0B38
....................       lcd_gotoxy(1,3); 
3D20:  MOVLW  01
3D22:  MOVWF  xFA
3D24:  MOVLW  03
3D26:  MOVWF  xFB
3D28:  CALL   0A72
....................       printf(lcd_putc,"     Vel: %u       ",Vel1); 
3D2C:  MOVLW  04
3D2E:  MOVWF  FF6
3D30:  MOVLW  08
3D32:  MOVWF  FF7
3D34:  MOVLW  0A
3D36:  MOVWF  xEC
3D38:  CALL   153A
3D3C:  MOVFF  56,E8
3D40:  MOVLW  1B
3D42:  MOVWF  xE9
3D44:  CALL   1726
3D48:  MOVLW  10
3D4A:  MOVWF  FF6
3D4C:  MOVLW  08
3D4E:  MOVWF  FF7
3D50:  MOVLW  07
3D52:  MOVWF  xEC
3D54:  CALL   153A
....................       lcd_gotoxy(1,4); 
3D58:  MOVLW  01
3D5A:  MOVWF  xFA
3D5C:  MOVLW  04
3D5E:  MOVWF  xFB
3D60:  CALL   0A72
....................       printf(lcd_putc,"                    ");       
3D64:  MOVLW  18
3D66:  MOVWF  FF6
3D68:  MOVLW  08
3D6A:  MOVWF  FF7
3D6C:  CALL   0B38
....................        
....................       if(UP && Vel1<6)//Si oprime hacia arriba 
3D70:  BSF    F92.5
3D72:  BTFSC  F80.5
3D74:  BRA    3D86
3D76:  MOVF   56,W
3D78:  SUBLW  05
3D7A:  BNC   3D86
....................       {   
....................          delay_ms(200);Vel1++; 
3D7C:  MOVLW  C8
3D7E:  MOVWF  xFF
3D80:  CALL   0940
3D84:  INCF   56,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
3D86:  BSF    F96.0
3D88:  BTFSC  F84.0
3D8A:  BRA    3D9A
3D8C:  MOVF   56,F
3D8E:  BZ    3D9A
....................       {   
....................          delay_ms(200);Vel1--; 
3D90:  MOVLW  C8
3D92:  MOVWF  xFF
3D94:  CALL   0940
3D98:  DECF   56,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
3D9A:  BSF    F96.1
3D9C:  BTFSC  F84.1
3D9E:  BRA    3DA4
....................       {            
....................          VelMotor=Vel1; 
3DA0:  MOVFF  56,D0
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
3DA4:  BSF    F96.2
3DA6:  BTFSC  F84.2
3DA8:  BRA    3E76
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3DAA:  MOVLW  64
3DAC:  MOVWF  xFF
3DAE:  CALL   0940
3DB2:  MOVLW  02
3DB4:  MOVWF  30
3DB6:  MOVWF  32
3DB8:  MOVLW  0C
3DBA:  MOVWF  xF9
3DBC:  CALL   0ADA
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
3DC0:  MOVLW  0D
3DC2:  MOVWF  FA9
3DC4:  MOVFF  56,FA8
3DC8:  BCF    FA6.6
3DCA:  BCF    FA6.7
3DCC:  BSF    FA6.2
3DCE:  MOVF   FF2,W
3DD0:  MOVWF  00
3DD2:  BCF    FF2.6
3DD4:  BCF    FF2.7
3DD6:  MOVLB  F
3DD8:  MOVLW  55
3DDA:  MOVWF  FA7
3DDC:  MOVLW  AA
3DDE:  MOVWF  FA7
3DE0:  BSF    FA6.1
3DE2:  BTFSC  FA6.1
3DE4:  BRA    3DE2
3DE6:  BCF    FA6.2
3DE8:  MOVF   00,W
3DEA:  IORWF  FF2,F
....................          delay_ms(20); 
3DEC:  MOVLW  14
3DEE:  MOVLB  0
3DF0:  MOVWF  xFF
3DF2:  CALL   0940
....................          lcd_gotoxy(1,1); 
3DF6:  MOVLW  01
3DF8:  MOVWF  xFA
3DFA:  MOVWF  xFB
3DFC:  CALL   0A72
....................          printf(lcd_putc,"                    "); 
3E00:  MOVLW  2E
3E02:  MOVWF  FF6
3E04:  MOVLW  08
3E06:  MOVWF  FF7
3E08:  CALL   0B38
....................          lcd_gotoxy(1,2); 
3E0C:  MOVLW  01
3E0E:  MOVWF  xFA
3E10:  MOVLW  02
3E12:  MOVWF  xFB
3E14:  CALL   0A72
....................          printf(lcd_putc,"     Velocidad      "); 
3E18:  MOVLW  44
3E1A:  MOVWF  FF6
3E1C:  MOVLW  08
3E1E:  MOVWF  FF7
3E20:  CALL   0B38
....................          lcd_gotoxy(1,3); 
3E24:  MOVLW  01
3E26:  MOVWF  xFA
3E28:  MOVLW  03
3E2A:  MOVWF  xFB
3E2C:  CALL   0A72
....................          printf(lcd_putc,"      Almacenada    "); 
3E30:  MOVLW  5A
3E32:  MOVWF  FF6
3E34:  MOVLW  08
3E36:  MOVWF  FF7
3E38:  CALL   0B38
....................          lcd_gotoxy(1,4); 
3E3C:  MOVLW  01
3E3E:  MOVWF  xFA
3E40:  MOVLW  04
3E42:  MOVWF  xFB
3E44:  CALL   0A72
....................          printf(lcd_putc,"                    ");  
3E48:  MOVLW  70
3E4A:  MOVWF  FF6
3E4C:  MOVLW  08
3E4E:  MOVWF  FF7
3E50:  CALL   0B38
....................          delay_ms(1000); 
3E54:  MOVLW  04
3E56:  MOVWF  xE8
3E58:  MOVLW  FA
3E5A:  MOVWF  xFF
3E5C:  CALL   0940
3E60:  DECFSZ xE8,F
3E62:  BRA    3E58
....................          printf(lcd_putc,"\f"); 
3E64:  MOVLW  0C
3E66:  MOVWF  xF9
3E68:  CALL   0ADA
....................          lcd_init(); 
3E6C:  CALL   09D6
....................          Menu=1; paso=0; 
3E70:  MOVLW  01
3E72:  MOVWF  2C
3E74:  CLRF   45
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
3E76:  MOVF   2C,W
3E78:  SUBLW  32
3E7A:  BTFSS  FD8.2
3E7C:  BRA    44AA
....................    if(Lectura==1){ 
3E7E:  BTFSS  2A.0
3E80:  BRA    40B4
....................       Lectura=0; 
3E82:  BCF    2A.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
3E84:  MOVLW  08
3E86:  MOVWF  xE8
3E88:  CALL   1C90
3E8C:  MOVFF  03,C4
3E90:  MOVFF  02,C3
3E94:  MOVFF  01,C2
3E98:  MOVFF  00,C1
....................       lcd_gotoxy(1,1); 
3E9C:  MOVLW  01
3E9E:  MOVWF  xFA
3EA0:  MOVWF  xFB
3EA2:  CALL   0A72
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
3EA6:  MOVFF  C4,FF
3EAA:  MOVFF  C3,FE
3EAE:  MOVFF  C2,FD
3EB2:  MOVFF  C1,FC
3EB6:  MOVLW  D7
3EB8:  MOVLB  1
3EBA:  MOVWF  x03
3EBC:  MOVLW  A3
3EBE:  MOVWF  x02
3EC0:  CLRF   x01
3EC2:  MOVLW  81
3EC4:  MOVWF  x00
3EC6:  MOVLB  0
3EC8:  CALL   1E32
3ECC:  MOVFF  00,E8
3ED0:  MOVFF  01,E9
3ED4:  MOVFF  02,EA
3ED8:  MOVFF  03,EB
3EDC:  MOVLW  86
3EDE:  MOVWF  FF6
3EE0:  MOVLW  08
3EE2:  MOVWF  FF7
3EE4:  MOVLW  08
3EE6:  MOVWF  xEC
3EE8:  CALL   153A
3EEC:  MOVLW  02
3EEE:  MOVWF  FE9
3EF0:  MOVFF  EB,EF
3EF4:  MOVFF  EA,EE
3EF8:  MOVFF  E9,ED
3EFC:  MOVFF  E8,EC
3F00:  MOVWF  xF0
3F02:  CALL   2052
3F06:  MOVLW  93
3F08:  MOVWF  FF6
3F0A:  MOVLW  08
3F0C:  MOVWF  FF7
3F0E:  MOVLW  07
3F10:  MOVWF  xEC
3F12:  CALL   153A
....................       Saturacion=(CaidaPresion/0.24)*11; 
3F16:  MOVFF  C4,FF
3F1A:  MOVFF  C3,FE
3F1E:  MOVFF  C2,FD
3F22:  MOVFF  C1,FC
3F26:  MOVLW  8F
3F28:  MOVLB  1
3F2A:  MOVWF  x03
3F2C:  MOVLW  C2
3F2E:  MOVWF  x02
3F30:  MOVLW  75
3F32:  MOVWF  x01
3F34:  MOVLW  7C
3F36:  MOVWF  x00
3F38:  MOVLB  0
3F3A:  CALL   189C
3F3E:  MOVFF  00,E8
3F42:  MOVFF  01,E9
3F46:  MOVFF  02,EA
3F4A:  MOVFF  03,EB
3F4E:  MOVFF  03,FF
3F52:  MOVFF  02,FE
3F56:  MOVFF  01,FD
3F5A:  MOVFF  00,FC
3F5E:  MOVLB  1
3F60:  CLRF   x03
3F62:  CLRF   x02
3F64:  MOVLW  30
3F66:  MOVWF  x01
3F68:  MOVLW  82
3F6A:  MOVWF  x00
3F6C:  MOVLB  0
3F6E:  CALL   1E32
3F72:  MOVFF  03,C0
3F76:  MOVFF  02,BF
3F7A:  MOVFF  01,BE
3F7E:  MOVFF  00,BD
....................        
....................       if(Saturacion>11){ 
3F82:  CLRF   xFF
3F84:  CLRF   xFE
3F86:  MOVLW  30
3F88:  MOVWF  xFD
3F8A:  MOVLW  82
3F8C:  MOVWF  xFC
3F8E:  MOVFF  C0,103
3F92:  MOVFF  BF,102
3F96:  MOVFF  BE,101
3F9A:  MOVFF  BD,100
3F9E:  CALL   0E92
3FA2:  BNC   3FB0
....................          Saturacion=11; 
3FA4:  CLRF   xC0
3FA6:  CLRF   xBF
3FA8:  MOVLW  30
3FAA:  MOVWF  xBE
3FAC:  MOVLW  82
3FAE:  MOVWF  xBD
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++){ 
3FB0:  CLRF   41
3FB2:  MOVFF  C0,EB
3FB6:  MOVFF  BF,EA
3FBA:  MOVFF  BE,E9
3FBE:  MOVFF  BD,E8
3FC2:  CALL   2576
3FC6:  MOVFF  00,E8
3FCA:  MOVFF  01,E9
3FCE:  MOVFF  02,EA
3FD2:  MOVFF  03,EB
3FD6:  MOVLB  1
3FD8:  CLRF   x01
3FDA:  MOVFF  41,100
3FDE:  MOVLB  0
3FE0:  CALL   0BBE
3FE4:  MOVFF  03,FF
3FE8:  MOVFF  02,FE
3FEC:  MOVFF  01,FD
3FF0:  MOVFF  00,FC
3FF4:  MOVFF  EB,103
3FF8:  MOVFF  EA,102
3FFC:  MOVFF  E9,101
4000:  MOVFF  E8,100
4004:  CALL   0E92
4008:  BNC   4026
....................          lcd_gotoxy(i+8,2); 
400A:  MOVLW  08
400C:  ADDWF  41,W
400E:  MOVWF  xE8
4010:  MOVWF  xFA
4012:  MOVLW  02
4014:  MOVWF  xFB
4016:  CALL   0A72
....................          printf(lcd_putc,"Ñ"); 
401A:  MOVLW  D1
401C:  MOVWF  xF9
401E:  CALL   0ADA
....................       } 
4022:  INCF   41,F
4024:  BRA    3FB2
....................        
....................       for(i=floor(Saturacion);i<11;i++){ 
4026:  MOVFF  C0,EB
402A:  MOVFF  BF,EA
402E:  MOVFF  BE,E9
4032:  MOVFF  BD,E8
4036:  CALL   2576
403A:  MOVFF  03,FF
403E:  MOVFF  02,FE
4042:  MOVFF  01,FD
4046:  MOVFF  00,FC
404A:  CALL   21E0
404E:  MOVFF  01,41
4052:  MOVF   41,W
4054:  SUBLW  0A
4056:  BNC   4074
....................          lcd_gotoxy(i+8,2); 
4058:  MOVLW  08
405A:  ADDWF  41,W
405C:  MOVWF  xE8
405E:  MOVWF  xFA
4060:  MOVLW  02
4062:  MOVWF  xFB
4064:  CALL   0A72
....................          printf(lcd_putc," "); 
4068:  MOVLW  20
406A:  MOVWF  xF9
406C:  CALL   0ADA
....................       } 
4070:  INCF   41,F
4072:  BRA    4052
....................        
....................       lcd_gotoxy(9,3); 
4074:  MOVLW  09
4076:  MOVWF  xFA
4078:  MOVLW  03
407A:  MOVWF  xFB
407C:  CALL   0A72
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
4080:  MOVLW  9C
4082:  MOVWF  FF6
4084:  MOVLW  08
4086:  MOVWF  FF7
4088:  MOVLW  06
408A:  MOVWF  xEC
408C:  CALL   153A
4090:  MOVFF  3B,E8
4094:  MOVLW  03
4096:  MOVWF  xE9
4098:  CALL   1726
409C:  MOVLW  3A
409E:  MOVWF  xF9
40A0:  CALL   0ADA
40A4:  MOVFF  3C,E8
40A8:  MOVLW  01
40AA:  MOVWF  xE9
40AC:  CALL   1726
....................       EliminaRuido(); 
40B0:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
40B4:  BTFSS  29.7
40B6:  BRA    4150
....................    { 
....................       if(estadoalarma==1) 
40B8:  BTFSS  2A.4
40BA:  BRA    4146
....................       { 
....................          printf(lcd_putc,"\f"); 
40BC:  MOVLW  0C
40BE:  MOVWF  xF9
40C0:  CALL   0ADA
....................          lcd_gotoxy(1,2); 
40C4:  MOVLW  01
40C6:  MOVWF  xFA
40C8:  MOVLW  02
40CA:  MOVWF  xFB
40CC:  CALL   0A72
....................          printf(lcd_putc,"  Temporizador  de  "); 
40D0:  MOVLW  AC
40D2:  MOVWF  FF6
40D4:  MOVLW  08
40D6:  MOVWF  FF7
40D8:  CALL   0B38
....................          lcd_gotoxy(1,3); 
40DC:  MOVLW  01
40DE:  MOVWF  xFA
40E0:  MOVLW  03
40E2:  MOVWF  xFB
40E4:  CALL   0A72
....................          printf(lcd_putc," Luz UV  Finalizado "); 
40E8:  MOVLW  C2
40EA:  MOVWF  FF6
40EC:  MOVLW  08
40EE:  MOVWF  FF7
40F0:  CALL   0B38
....................          lcd_gotoxy(1,4); 
40F4:  MOVLW  01
40F6:  MOVWF  xFA
40F8:  MOVLW  04
40FA:  MOVWF  xFB
40FC:  CALL   0A72
....................          printf(lcd_putc,"                    "); 
4100:  MOVLW  D8
4102:  MOVWF  FF6
4104:  MOVLW  08
4106:  MOVWF  FF7
4108:  CALL   0B38
....................          lcd_gotoxy(1,1); 
410C:  MOVLW  01
410E:  MOVWF  xFA
4110:  MOVWF  xFB
4112:  CALL   0A72
....................          printf(lcd_putc,"                    "); 
4116:  MOVLW  EE
4118:  MOVWF  FF6
411A:  MOVLW  08
411C:  MOVWF  FF7
411E:  CALL   0B38
....................          for(i=0;i<5;i++) 
4122:  CLRF   41
4124:  MOVF   41,W
4126:  SUBLW  04
4128:  BNC   4146
....................          { 
....................             Buzzer_on; 
412A:  BSF    F8B.0
412C:  BCF    F94.0
....................             delay_ms(200); 
412E:  MOVLW  C8
4130:  MOVWF  xFF
4132:  CALL   0940
....................             Buzzer_off; 
4136:  BCF    F8B.0
4138:  BCF    F94.0
....................             delay_ms(200); 
413A:  MOVLW  C8
413C:  MOVWF  xFF
413E:  CALL   0940
....................          } 
4142:  INCF   41,F
4144:  BRA    4124
....................       } 
....................       tiempo_cumplido=0; 
4146:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
4148:  MOVLW  0C
414A:  MOVWF  xF9
414C:  CALL   0ADA
....................    } 
....................     
....................    if(CaidaPresion>=0.23) 
4150:  MOVLW  1F
4152:  MOVWF  xFF
4154:  MOVLW  85
4156:  MOVWF  xFE
4158:  MOVLW  6B
415A:  MOVWF  xFD
415C:  MOVLW  7C
415E:  MOVWF  xFC
4160:  MOVFF  C4,103
4164:  MOVFF  C3,102
4168:  MOVFF  C2,101
416C:  MOVFF  C1,100
4170:  CALL   0E92
4174:  BC    4178
4176:  BNZ   417E
....................    {  
....................       ActivaBuzzer=1; 
4178:  MOVLW  01
417A:  MOVWF  51
....................    } 
....................    else 
417C:  BRA    4184
....................    { 
....................       ActivaBuzzer=0; 
417E:  CLRF   51
....................       Buzzer_off; 
4180:  BCF    F8B.0
4182:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
4184:  MOVLW  01
4186:  MOVWF  xFA
4188:  MOVLW  02
418A:  MOVWF  xFB
418C:  CALL   0A72
....................       printf(lcd_putc,"Filtro:"); 
4190:  MOVLW  04
4192:  MOVWF  FF6
4194:  MOVLW  09
4196:  MOVWF  FF7
4198:  CALL   0B38
....................        
....................       if(estadomv==1) 
419C:  BTFSS  29.2
419E:  BRA    41BA
....................       { 
....................          lcd_gotoxy(1,4); 
41A0:  MOVLW  01
41A2:  MOVWF  xFA
41A4:  MOVLW  04
41A6:  MOVWF  xFB
41A8:  CALL   0A72
....................          printf(lcd_putc,"Motor:ON ");       
41AC:  MOVLW  0C
41AE:  MOVWF  FF6
41B0:  MOVLW  09
41B2:  MOVWF  FF7
41B4:  CALL   0B38
....................       } 
....................       else 
41B8:  BRA    41D2
....................       { 
....................          lcd_gotoxy(1,4); 
41BA:  MOVLW  01
41BC:  MOVWF  xFA
41BE:  MOVLW  04
41C0:  MOVWF  xFB
41C2:  CALL   0A72
....................          printf(lcd_putc,"Motor:OFF"); 
41C6:  MOVLW  16
41C8:  MOVWF  FF6
41CA:  MOVLW  09
41CC:  MOVWF  FF7
41CE:  CALL   0B38
....................       } 
....................        
....................       if(estadouv==1) 
41D2:  BTFSS  29.0
41D4:  BRA    41F0
....................       { 
....................          lcd_gotoxy(13,4); 
41D6:  MOVLW  0D
41D8:  MOVWF  xFA
41DA:  MOVLW  04
41DC:  MOVWF  xFB
41DE:  CALL   0A72
....................          printf(lcd_putc,"UV:ON "); 
41E2:  MOVLW  20
41E4:  MOVWF  FF6
41E6:  MOVLW  09
41E8:  MOVWF  FF7
41EA:  CALL   0B38
....................       } 
....................       else 
41EE:  BRA    4208
....................       {          
....................          lcd_gotoxy(13,4); 
41F0:  MOVLW  0D
41F2:  MOVWF  xFA
41F4:  MOVLW  04
41F6:  MOVWF  xFB
41F8:  CALL   0A72
....................          printf(lcd_putc,"UV:OFF"); 
41FC:  MOVLW  28
41FE:  MOVWF  FF6
4200:  MOVLW  09
4202:  MOVWF  FF7
4204:  CALL   0B38
....................       } 
....................        
....................       if(estadofl==1) 
4208:  BTFSS  29.1
420A:  BRA    4226
....................       { 
....................          lcd_gotoxy(1,3); 
420C:  MOVLW  01
420E:  MOVWF  xFA
4210:  MOVLW  03
4212:  MOVWF  xFB
4214:  CALL   0A72
....................          printf(lcd_putc,"Luz:ON "); 
4218:  MOVLW  30
421A:  MOVWF  FF6
421C:  MOVLW  09
421E:  MOVWF  FF7
4220:  CALL   0B38
....................       } 
....................       else 
4224:  BRA    423E
....................       { 
....................          lcd_gotoxy(1,3); 
4226:  MOVLW  01
4228:  MOVWF  xFA
422A:  MOVLW  03
422C:  MOVWF  xFB
422E:  CALL   0A72
....................          printf(lcd_putc,"Luz:OFF"); 
4232:  MOVLW  38
4234:  MOVWF  FF6
4236:  MOVLW  09
4238:  MOVWF  FF7
423A:  CALL   0B38
....................       }  
....................       Cambio=OFF; 
423E:  BCF    2B.3
....................    //} 
....................     
....................    if(estadomv==1){  
4240:  BTFSS  29.2
4242:  BRA    4266
....................       if(flagmv==0){ 
4244:  BTFSC  2B.4
4246:  BRA    4260
....................          VelMotor=Vel1; 
4248:  MOVFF  56,D0
....................          lcd_init();delay_ms(200);lcd_init(); 
424C:  CALL   09D6
4250:  MOVLW  C8
4252:  MOVWF  xFF
4254:  CALL   0940
4258:  CALL   09D6
....................          flagmv=1;Cambio=ON; 
425C:  BSF    2B.4
425E:  BSF    2B.3
....................       } 
....................       VelMotor=Vel1; 
4260:  MOVFF  56,D0
....................    }else{ 
4264:  BRA    4280
....................       VelMotor=0; 
4266:  CLRF   xD0
....................       if(flagmv==1){ 
4268:  BTFSS  2B.4
426A:  BRA    4280
....................          lcd_init();delay_ms(200);lcd_init(); 
426C:  CALL   09D6
4270:  MOVLW  C8
4272:  MOVWF  xFF
4274:  CALL   0940
4278:  CALL   09D6
....................          flagmv=0;Cambio=ON; 
427C:  BCF    2B.4
427E:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
4280:  BTFSS  29.1
4282:  BRA    42A2
....................    { 
....................       Luz_Blanca_on; 
4284:  BCF    F8A.4
4286:  BCF    F93.4
....................       if(flagfl==0) 
4288:  BTFSC  2A.2
428A:  BRA    42A0
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
428C:  CALL   09D6
4290:  MOVLW  C8
4292:  MOVWF  xFF
4294:  CALL   0940
4298:  CALL   09D6
....................          flagfl=1;Cambio=ON; 
429C:  BSF    2A.2
429E:  BSF    2B.3
....................       } 
....................    } 
....................    else 
42A0:  BRA    42BE
....................    { 
....................       Luz_Blanca_off; 
42A2:  BSF    F8A.4
42A4:  BCF    F93.4
....................       if(flagfl==1) 
42A6:  BTFSS  2A.2
42A8:  BRA    42BE
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
42AA:  CALL   09D6
42AE:  MOVLW  C8
42B0:  MOVWF  xFF
42B2:  CALL   0940
42B6:  CALL   09D6
....................          flagfl=0;Cambio=ON; 
42BA:  BCF    2A.2
42BC:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(estadouv==1){ 
42BE:  BTFSS  29.0
42C0:  BRA    42F0
....................       Luz_UV_on; 
42C2:  BCF    F8A.3
42C4:  BCF    F93.3
....................       tiempo_cumplido=0;       
42C6:  BCF    29.7
....................       estadomv=0; 
42C8:  BCF    29.2
....................       VelMotor=0; 
42CA:  CLRF   xD0
....................       estadofl=0; 
42CC:  BCF    29.1
....................       Luz_Blanca_off; 
42CE:  BSF    F8A.4
42D0:  BCF    F93.4
....................       if(flaguv==0){ 
42D2:  BTFSC  2A.1
42D4:  BRA    42EE
....................          lcd_init();delay_ms(200);lcd_init(); 
42D6:  CALL   09D6
42DA:  MOVLW  C8
42DC:  MOVWF  xFF
42DE:  CALL   0940
42E2:  CALL   09D6
....................          flaguv=1;guardaruv=1;Cambio=ON; 
42E6:  BSF    2A.1
42E8:  MOVLW  01
42EA:  MOVWF  44
42EC:  BSF    2B.3
....................       } 
....................    }else{ 
42EE:  BRA    4312
....................       estadouv=0; 
42F0:  BCF    29.0
....................       Luz_UV_off; 
42F2:  BSF    F8A.3
42F4:  BCF    F93.3
....................       if(flaguv==1){ 
42F6:  BTFSS  2A.1
42F8:  BRA    4312
....................          lcd_init();delay_ms(200);lcd_init(); 
42FA:  CALL   09D6
42FE:  MOVLW  C8
4300:  MOVWF  xFF
4302:  CALL   0940
4306:  CALL   09D6
....................          flaguv=0;guardaruv=1;Cambio=ON; 
430A:  BCF    2A.1
430C:  MOVLW  01
430E:  MOVWF  44
4310:  BSF    2B.3
....................       } 
....................    }   
....................     
....................    if(tdown>=60){ //Si oprimio tecla abajo por 300ms o mas 
4312:  MOVF   5E,F
4314:  BNZ   431C
4316:  MOVF   5D,W
4318:  SUBLW  3B
431A:  BC    4338
....................       if(!Flanco){ 
431C:  BTFSC  29.3
431E:  BRA    4336
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
4320:  BTG    29.1
4322:  BSF    29.3
4324:  MOVLW  02
4326:  MOVWF  xE8
4328:  MOVLW  96
432A:  MOVWF  xFF
432C:  CALL   0940
4330:  DECFSZ xE8,F
4332:  BRA    4328
4334:  BSF    2B.3
....................       } 
....................    }else{ 
4336:  BRA    433A
....................       Flanco=0; 
4338:  BCF    29.3
....................    } 
....................     
....................    if(tright>=60){ //Si oprimio tecla derecha por 300ms o mas 
433A:  MOVF   x60,F
433C:  BNZ   4344
433E:  MOVF   5F,W
4340:  SUBLW  3B
4342:  BC    4360
....................       if(!Flanco2){ 
4344:  BTFSC  29.5
4346:  BRA    435E
....................          estadomv=!estadomv;Flanco2 = 1;delay_ms(300);Cambio=ON; 
4348:  BTG    29.2
434A:  BSF    29.5
434C:  MOVLW  02
434E:  MOVWF  xE8
4350:  MOVLW  96
4352:  MOVWF  xFF
4354:  CALL   0940
4358:  DECFSZ xE8,F
435A:  BRA    4350
435C:  BSF    2B.3
....................       } 
....................    }else{ 
435E:  BRA    4362
....................       Flanco2=0; 
4360:  BCF    29.5
....................    } 
....................     
....................    if(tleft>=60){ //Si oprimio tecla izquierda por 300ms o mas 
4362:  MOVF   x62,F
4364:  BNZ   436C
4366:  MOVF   x61,W
4368:  SUBLW  3B
436A:  BC    4380
....................       if(!Flanco3){ 
436C:  BTFSC  29.6
436E:  BRA    437E
....................          delay_ms(150);  
4370:  MOVLW  96
4372:  MOVWF  xFF
4374:  CALL   0940
....................          estadouv=!estadouv; 
4378:  BTG    29.0
....................          Cambio=ON; 
437A:  BSF    2B.3
....................          Flanco3=1; 
437C:  BSF    29.6
....................       } 
....................    }else{ 
437E:  BRA    4382
....................       Flanco3=0; 
4380:  BCF    29.6
....................    } 
....................     
....................    if(tup>=60){ //Si oprimio tecla arriba por 300ms o mas 
4382:  MOVF   x64,F
4384:  BNZ   438C
4386:  MOVF   x63,W
4388:  SUBLW  3B
438A:  BC    43C2
....................       if(!Flanco1){ 
438C:  BTFSC  29.4
438E:  BRA    43C0
....................          delay_ms(200); 
4390:  MOVLW  C8
4392:  MOVWF  xFF
4394:  CALL   0940
....................          printf(lcd_putc,"\f"); 
4398:  MOVLW  0C
439A:  MOVWF  xF9
439C:  CALL   0ADA
....................          delay_ms(300); 
43A0:  MOVLW  02
43A2:  MOVWF  xE8
43A4:  MOVLW  96
43A6:  MOVWF  xFF
43A8:  CALL   0940
43AC:  DECFSZ xE8,F
43AE:  BRA    43A4
....................          Menu=1;  
43B0:  MOVLW  01
43B2:  MOVWF  2C
....................          paso=0; 
43B4:  CLRF   45
....................          Flecha=2; 
43B6:  MOVLW  02
43B8:  MOVWF  30
....................          Flecha2=2; 
43BA:  MOVWF  32
....................          Cambio=ON; 
43BC:  BSF    2B.3
....................          Flanco1=1; 
43BE:  BSF    29.4
....................       } 
....................    }else{ 
43C0:  BRA    43C4
....................       Flanco1=0; 
43C2:  BCF    29.4
....................    } 
....................        
....................    if(guardaruv==1) 
43C4:  DECFSZ 44,W
43C6:  BRA    4492
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
43C8:  MOVLW  07
43CA:  MOVWF  FA9
43CC:  MOVFF  35,FA8
43D0:  BCF    FA6.6
43D2:  BCF    FA6.7
43D4:  BSF    FA6.2
43D6:  MOVF   FF2,W
43D8:  MOVWF  00
43DA:  BCF    FF2.6
43DC:  BCF    FF2.7
43DE:  MOVLB  F
43E0:  MOVLW  55
43E2:  MOVWF  FA7
43E4:  MOVLW  AA
43E6:  MOVWF  FA7
43E8:  BSF    FA6.1
43EA:  BTFSC  FA6.1
43EC:  BRA    43EA
43EE:  BCF    FA6.2
43F0:  MOVF   00,W
43F2:  IORWF  FF2,F
43F4:  MOVLW  08
43F6:  MOVWF  FA9
43F8:  MOVFF  36,FA8
43FC:  BCF    FA6.6
43FE:  BCF    FA6.7
4400:  BSF    FA6.2
4402:  MOVF   FF2,W
4404:  MOVWF  00
4406:  BCF    FF2.6
4408:  BCF    FF2.7
440A:  MOVLW  55
440C:  MOVWF  FA7
440E:  MOVLW  AA
4410:  MOVWF  FA7
4412:  BSF    FA6.1
4414:  BTFSC  FA6.1
4416:  BRA    4414
4418:  BCF    FA6.2
441A:  MOVF   00,W
441C:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
441E:  MOVFF  59,37
....................       horasH=make8(horas,1); 
4422:  MOVFF  5A,38
....................       write_eeprom(9,horasL); 
4426:  MOVLW  09
4428:  MOVWF  FA9
442A:  MOVFF  37,FA8
442E:  BCF    FA6.6
4430:  BCF    FA6.7
4432:  BSF    FA6.2
4434:  MOVFF  FF2,00
4438:  BCF    FF2.6
443A:  BCF    FF2.7
443C:  MOVLW  55
443E:  MOVWF  FA7
4440:  MOVLW  AA
4442:  MOVWF  FA7
4444:  BSF    FA6.1
4446:  BTFSC  FA6.1
4448:  BRA    4446
444A:  BCF    FA6.2
444C:  MOVF   00,W
444E:  IORWF  FF2,F
....................       delay_ms(20); 
4450:  MOVLW  14
4452:  MOVLB  0
4454:  MOVWF  xFF
4456:  CALL   0940
....................       write_eeprom(10,horasH); 
445A:  MOVLW  0A
445C:  MOVWF  FA9
445E:  MOVFF  38,FA8
4462:  BCF    FA6.6
4464:  BCF    FA6.7
4466:  BSF    FA6.2
4468:  MOVF   FF2,W
446A:  MOVWF  00
446C:  BCF    FF2.6
446E:  BCF    FF2.7
4470:  MOVLB  F
4472:  MOVLW  55
4474:  MOVWF  FA7
4476:  MOVLW  AA
4478:  MOVWF  FA7
447A:  BSF    FA6.1
447C:  BTFSC  FA6.1
447E:  BRA    447C
4480:  BCF    FA6.2
4482:  MOVF   00,W
4484:  IORWF  FF2,F
....................       delay_ms(20); 
4486:  MOVLW  14
4488:  MOVLB  0
448A:  MOVWF  xFF
448C:  CALL   0940
....................       guardaruv=0; 
4490:  CLRF   44
....................    } 
....................     
....................    if(segundos>=60) 
4492:  MOVF   35,W
4494:  SUBLW  3B
4496:  BC    449C
....................    { 
....................       segundos=0;minutos++; 
4498:  CLRF   35
449A:  INCF   36,F
....................    } 
....................    if(minutos==60) 
449C:  MOVF   36,W
449E:  SUBLW  3C
44A0:  BNZ   44AA
....................    { 
....................       minutos=0;horas++; 
44A2:  CLRF   36
44A4:  INCF   59,F
44A6:  BTFSC  FD8.2
44A8:  INCF   5A,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
44AA:  MOVF   43,W
44AC:  SUBLW  3B
44AE:  BC    44C8
....................    { 
....................       printf(lcd_putc,"\f"); 
44B0:  MOVLW  0C
44B2:  MOVWF  xF9
44B4:  CALL   0ADA
....................       lcd_init(); 
44B8:  CALL   09D6
....................       delay_ms(200); 
44BC:  MOVLW  C8
44BE:  MOVWF  xFF
44C0:  CALL   0940
....................       tiemporeset=0; 
44C4:  CLRF   43
....................       Cambio=ON; 
44C6:  BSF    2B.3
....................    }    
....................    } 
44C8:  GOTO   2768
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
44CC:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
*
12EE:  MOVF   xF7,W
12F0:  MULLW  80
12F2:  MOVFF  FF3,F9
12F6:  MOVF   xF6,W
12F8:  MULLW  40
12FA:  MOVF   FF3,W
12FC:  ADDWF  xF9,F
12FE:  MOVF   xF5,W
1300:  MULLW  20
1302:  MOVF   FF3,W
1304:  ADDWF  xF9,F
1306:  MOVF   xF4,W
1308:  MULLW  10
130A:  MOVF   FF3,W
130C:  ADDWF  xF9,F
130E:  MOVF   xF3,W
1310:  MULLW  08
1312:  MOVF   FF3,W
1314:  ADDWF  xF9,F
1316:  MOVF   xF2,W
1318:  MULLW  04
131A:  MOVF   FF3,W
131C:  ADDWF  xF9,F
131E:  BCF    FD8.0
1320:  RLCF   xF1,W
1322:  ADDWF  xF9,W
1324:  ADDWF  xF0,W
1326:  MOVWF  xF8
....................    return dato;  
1328:  MOVFF  F8,01
.................... } 
132C:  RETLW  00

Configuration Fuses:
   Word  1: CE3C   IESO FCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
