CCS PCH C Compiler, Version 4.104, 5967               13-oct.-20 15:42

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Vertical\2020\CFLV 90 NOVA #004588387 OP2020321\Firmware 1.1.0 - MPXV5004\CabinaCFLH.lst

               ROM used: 17058 bytes (52%)
                         Largest free fragment is 15708
               RAM used: 236 (12%) at main() level
                         277 (14%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   235E
*
0008:  GOTO   00A6
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   02F2
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
00A6:  MOVWF  16
00A8:  MOVFF  FD8,17
00AC:  MOVFF  FE0,18
00B0:  MOVLB  0
00B2:  MOVFF  FE9,1E
00B6:  MOVFF  FEA,19
00BA:  MOVFF  FE1,1A
00BE:  MOVFF  FE2,1B
00C2:  MOVFF  FD9,1C
00C6:  MOVFF  FDA,1D
00CA:  MOVFF  FF3,24
00CE:  MOVFF  FF4,25
00D2:  MOVFF  FFA,26
00D6:  MOVFF  00,20
00DA:  MOVFF  01,21
00DE:  MOVFF  02,22
00E2:  MOVFF  03,23
00E6:  BTFSS  FF2.5
00E8:  GOTO   00F2
00EC:  BTFSC  FF2.2
00EE:  GOTO   02C0
00F2:  BTFSS  FF2.4
00F4:  GOTO   00FE
00F8:  BTFSC  FF2.1
00FA:  GOTO   0248
00FE:  MOVFF  20,00
0102:  MOVFF  21,01
0106:  MOVFF  22,02
010A:  MOVFF  23,03
010E:  MOVFF  1E,FE9
0112:  MOVFF  19,FEA
0116:  BSF    19.7
0118:  MOVFF  1A,FE1
011C:  MOVFF  1B,FE2
0120:  MOVFF  1C,FD9
0124:  MOVFF  1D,FDA
0128:  MOVFF  24,FF3
012C:  MOVFF  25,FF4
0130:  MOVFF  26,FFA
0134:  MOVF   16,W
0136:  MOVFF  18,FE0
013A:  MOVFF  17,FD8
013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOBROWNOUT,NOPUT,NOCPD,NOSTVREN,NOWRT,NOWRTD,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOLPT1OSC,NOXINST,NOICPRT// PLL1 para 4 MHz 
.................... #use delay(clock=16000000) 
*
0940:  CLRF   FEA
0942:  MOVLW  FF
0944:  MOVWF  FE9
0946:  MOVF   FEF,W
0948:  BZ    0966
094A:  MOVLW  05
094C:  MOVWF  01
094E:  CLRF   00
0950:  DECFSZ 00,F
0952:  BRA    0950
0954:  DECFSZ 01,F
0956:  BRA    094E
0958:  MOVLW  2E
095A:  MOVWF  00
095C:  DECFSZ 00,F
095E:  BRA    095C
0960:  BRA    0962
0962:  DECFSZ FEF,F
0964:  BRA    094A
0966:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1FEA:  BCF    xFB.0
....................    y = x; 
1FEC:  MOVFF  EF,F4
1FF0:  MOVFF  EE,F3
1FF4:  MOVFF  ED,F2
1FF8:  MOVFF  EC,F1
....................  
....................    if (x < 0) 
1FFC:  MOVFF  EF,FF
2000:  MOVFF  EE,FE
2004:  MOVFF  ED,FD
2008:  MOVFF  EC,FC
200C:  MOVLB  1
200E:  CLRF   x03
2010:  CLRF   x02
2012:  CLRF   x01
2014:  CLRF   x00
2016:  MOVLB  0
2018:  CALL   0E98
201C:  BNC   2026
....................    { 
....................       s = 1; 
201E:  BSF    xFB.0
....................       y = -y; 
2020:  MOVF   xF2,W
2022:  XORLW  80
2024:  MOVWF  xF2
....................    } 
....................  
....................    if (y <= 32768.0) 
2026:  MOVFF  F4,FF
202A:  MOVFF  F3,FE
202E:  MOVFF  F2,FD
2032:  MOVFF  F1,FC
2036:  MOVLB  1
2038:  CLRF   x03
203A:  CLRF   x02
203C:  CLRF   x01
203E:  MOVLW  8E
2040:  MOVWF  x00
2042:  MOVLB  0
2044:  CALL   0E98
2048:  BC    204C
204A:  BNZ   207C
....................   res = (float32)(unsigned int16)y; 
204C:  MOVFF  F4,FF
2050:  MOVFF  F3,FE
2054:  MOVFF  F2,FD
2058:  MOVFF  F1,FC
205C:  RCALL  1FB2
205E:  MOVFF  02,101
2062:  MOVFF  01,100
2066:  CALL   0BC4
206A:  MOVFF  03,F8
206E:  MOVFF  02,F7
2072:  MOVFF  01,F6
2076:  MOVFF  00,F5
....................  
....................  else if (y < 10000000.0) 
207A:  BRA    2212
207C:  MOVFF  F4,FF
2080:  MOVFF  F3,FE
2084:  MOVFF  F2,FD
2088:  MOVFF  F1,FC
208C:  MOVLW  80
208E:  MOVLB  1
2090:  MOVWF  x03
2092:  MOVLW  96
2094:  MOVWF  x02
2096:  MOVLW  18
2098:  MOVWF  x01
209A:  MOVLW  96
209C:  MOVWF  x00
209E:  MOVLB  0
20A0:  CALL   0E98
20A4:  BTFSS  FD8.0
20A6:  BRA    2202
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
20A8:  MOVFF  F4,FF
20AC:  MOVFF  F3,FE
20B0:  MOVFF  F2,FD
20B4:  MOVFF  F1,FC
20B8:  MOVLB  1
20BA:  CLRF   x03
20BC:  CLRF   x02
20BE:  CLRF   x01
20C0:  MOVLW  8E
20C2:  MOVWF  x00
20C4:  MOVLB  0
20C6:  CALL   1656
20CA:  MOVFF  03,FF
20CE:  MOVFF  02,FE
20D2:  MOVFF  01,FD
20D6:  MOVFF  00,FC
20DA:  RCALL  1FB2
20DC:  MOVFF  02,FA
20E0:  MOVFF  01,F9
....................       y = 32768.0*(y/32768.0 - (float32)l); 
20E4:  MOVFF  F4,FF
20E8:  MOVFF  F3,FE
20EC:  MOVFF  F2,FD
20F0:  MOVFF  F1,FC
20F4:  MOVLB  1
20F6:  CLRF   x03
20F8:  CLRF   x02
20FA:  CLRF   x01
20FC:  MOVLW  8E
20FE:  MOVWF  x00
2100:  MOVLB  0
2102:  CALL   1656
2106:  MOVFF  00,FC
210A:  MOVFF  01,FD
210E:  MOVFF  02,FE
2112:  MOVFF  03,FF
2116:  MOVFF  FA,101
211A:  MOVFF  F9,100
211E:  CALL   0BC4
2122:  BSF    FD8.1
2124:  MOVFF  FF,103
2128:  MOVFF  FE,102
212C:  MOVFF  FD,101
2130:  MOVFF  FC,100
2134:  MOVFF  03,107
2138:  MOVFF  02,106
213C:  MOVFF  01,105
2140:  MOVFF  00,104
2144:  CALL   17D2
2148:  CLRF   xFF
214A:  CLRF   xFE
214C:  CLRF   xFD
214E:  MOVLW  8E
2150:  MOVWF  xFC
2152:  MOVFF  03,103
2156:  MOVFF  02,102
215A:  MOVFF  01,101
215E:  MOVFF  00,100
2162:  RCALL  1C04
2164:  MOVFF  03,F4
2168:  MOVFF  02,F3
216C:  MOVFF  01,F2
2170:  MOVFF  00,F1
....................   res = 32768.0*(float32)l; 
2174:  MOVFF  FA,101
2178:  MOVFF  F9,100
217C:  CALL   0BC4
2180:  CLRF   xFF
2182:  CLRF   xFE
2184:  CLRF   xFD
2186:  MOVLW  8E
2188:  MOVWF  xFC
218A:  MOVFF  03,103
218E:  MOVFF  02,102
2192:  MOVFF  01,101
2196:  MOVFF  00,100
219A:  RCALL  1C04
219C:  MOVFF  03,F8
21A0:  MOVFF  02,F7
21A4:  MOVFF  01,F6
21A8:  MOVFF  00,F5
....................   res += (float32)(unsigned int16)y; 
21AC:  MOVFF  F4,FF
21B0:  MOVFF  F3,FE
21B4:  MOVFF  F2,FD
21B8:  MOVFF  F1,FC
21BC:  RCALL  1FB2
21BE:  MOVFF  02,101
21C2:  MOVFF  01,100
21C6:  CALL   0BC4
21CA:  BCF    FD8.1
21CC:  MOVFF  F8,103
21D0:  MOVFF  F7,102
21D4:  MOVFF  F6,101
21D8:  MOVFF  F5,100
21DC:  MOVFF  03,107
21E0:  MOVFF  02,106
21E4:  MOVFF  01,105
21E8:  MOVFF  00,104
21EC:  CALL   17D2
21F0:  MOVFF  03,F8
21F4:  MOVFF  02,F7
21F8:  MOVFF  01,F6
21FC:  MOVFF  00,F5
....................  } 
....................  
....................  else 
2200:  BRA    2212
....................   res = y; 
2202:  MOVFF  F4,F8
2206:  MOVFF  F3,F7
220A:  MOVFF  F2,F6
220E:  MOVFF  F1,F5
....................  
....................  y = y - (float32)(unsigned int16)y; 
2212:  MOVFF  F4,FF
2216:  MOVFF  F3,FE
221A:  MOVFF  F2,FD
221E:  MOVFF  F1,FC
2222:  RCALL  1FB2
2224:  MOVFF  02,101
2228:  MOVFF  01,100
222C:  CALL   0BC4
2230:  BSF    FD8.1
2232:  MOVFF  F4,103
2236:  MOVFF  F3,102
223A:  MOVFF  F2,101
223E:  MOVFF  F1,100
2242:  MOVFF  03,107
2246:  MOVFF  02,106
224A:  MOVFF  01,105
224E:  MOVFF  00,104
2252:  CALL   17D2
2256:  MOVFF  03,F4
225A:  MOVFF  02,F3
225E:  MOVFF  01,F2
2262:  MOVFF  00,F1
....................  
....................  if (s) 
2266:  BTFSS  xFB.0
2268:  BRA    2270
....................   res = -res; 
226A:  MOVF   xF6,W
226C:  XORLW  80
226E:  MOVWF  xF6
....................  
....................  if (y != 0) 
2270:  MOVFF  F4,FF
2274:  MOVFF  F3,FE
2278:  MOVFF  F2,FD
227C:  MOVFF  F1,FC
2280:  MOVLB  1
2282:  CLRF   x03
2284:  CLRF   x02
2286:  CLRF   x01
2288:  CLRF   x00
228A:  MOVLB  0
228C:  CALL   0E98
2290:  BZ    230A
....................  { 
....................   if (s == 1 && n == 0) 
2292:  BTFSS  xFB.0
2294:  BRA    22CE
2296:  MOVF   xF0,F
2298:  BNZ   22CE
....................    res -= 1.0; 
229A:  BSF    FD8.1
229C:  MOVFF  F8,103
22A0:  MOVFF  F7,102
22A4:  MOVFF  F6,101
22A8:  MOVFF  F5,100
22AC:  MOVLB  1
22AE:  CLRF   x07
22B0:  CLRF   x06
22B2:  CLRF   x05
22B4:  MOVLW  7F
22B6:  MOVWF  x04
22B8:  MOVLB  0
22BA:  CALL   17D2
22BE:  MOVFF  03,F8
22C2:  MOVFF  02,F7
22C6:  MOVFF  01,F6
22CA:  MOVFF  00,F5
....................  
....................   if (s == 0 && n == 1) 
22CE:  BTFSC  xFB.0
22D0:  BRA    230A
22D2:  DECFSZ xF0,W
22D4:  BRA    230A
....................    res += 1.0; 
22D6:  BCF    FD8.1
22D8:  MOVFF  F8,103
22DC:  MOVFF  F7,102
22E0:  MOVFF  F6,101
22E4:  MOVFF  F5,100
22E8:  MOVLB  1
22EA:  CLRF   x07
22EC:  CLRF   x06
22EE:  CLRF   x05
22F0:  MOVLW  7F
22F2:  MOVWF  x04
22F4:  MOVLB  0
22F6:  CALL   17D2
22FA:  MOVFF  03,F8
22FE:  MOVFF  02,F7
2302:  MOVFF  01,F6
2306:  MOVFF  00,F5
....................  } 
....................  if (x == 0) 
230A:  MOVFF  EF,FF
230E:  MOVFF  EE,FE
2312:  MOVFF  ED,FD
2316:  MOVFF  EC,FC
231A:  MOVLB  1
231C:  CLRF   x03
231E:  CLRF   x02
2320:  CLRF   x01
2322:  CLRF   x00
2324:  MOVLB  0
2326:  CALL   0E98
232A:  BNZ   2334
....................     res = 0; 
232C:  CLRF   xF8
232E:  CLRF   xF7
2330:  CLRF   xF6
2332:  CLRF   xF5
....................  
....................  return (res); 
2334:  MOVFF  F5,00
2338:  MOVFF  F6,01
233C:  MOVFF  F7,02
2340:  MOVFF  F8,03
.................... } 
2344:  GOTO   235C (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
2348:  MOVFF  EB,EF
234C:  MOVFF  EA,EE
2350:  MOVFF  E9,ED
2354:  MOVFF  E8,EC
2358:  CLRF   xF0
235A:  BRA    1FEA
.................... } 
235C:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0968:  MOVLB  1
096A:  SWAPF  x00,W
096C:  ANDLW  F0
096E:  MOVWF  00
0970:  MOVLW  0F
0972:  ANDWF  F83,W
0974:  IORWF  00,W
0976:  MOVWF  F83
....................       delay_cycles(30);//30 
0978:  MOVLW  09
097A:  MOVWF  00
097C:  DECFSZ 00,F
097E:  BRA    097C
0980:  BRA    0982
....................       lcd.enable = 1; 
0982:  BSF    F83.3
....................       delay_us(55);//55 
0984:  MOVLW  49
0986:  MOVWF  00
0988:  DECFSZ 00,F
098A:  BRA    0988
....................       lcd.enable = 0; 
098C:  BCF    F83.3
.................... } 
098E:  MOVLB  0
0990:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0992:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0994:  MOVLW  01
0996:  MOVWF  xFF
0998:  RCALL  0940
....................       lcd.rs = address; 
099A:  BTFSS  xFD.0
099C:  BCF    F83.1
099E:  BTFSC  xFD.0
09A0:  BSF    F83.1
....................       delay_cycles(30);//30 
09A2:  MOVLW  09
09A4:  MOVWF  00
09A6:  DECFSZ 00,F
09A8:  BRA    09A6
09AA:  BRA    09AC
....................       lcd.rw = 0; 
09AC:  BCF    F83.2
....................       delay_cycles(30);//30 
09AE:  MOVLW  09
09B0:  MOVWF  00
09B2:  DECFSZ 00,F
09B4:  BRA    09B2
09B6:  BRA    09B8
....................       lcd.enable = 0; 
09B8:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
09BA:  SWAPF  xFE,W
09BC:  MOVWF  xFF
09BE:  MOVLW  0F
09C0:  ANDWF  xFF,F
09C2:  MOVFF  FF,100
09C6:  RCALL  0968
....................       lcd_send_nibble(n & 0xf); 
09C8:  MOVF   xFE,W
09CA:  ANDLW  0F
09CC:  MOVWF  xFF
09CE:  MOVFF  FE8,100
09D2:  RCALL  0968
.................... } 
09D4:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
09D6:  MOVLW  00
09D8:  MOVWF  F95
....................     lcd.rs = 0; 
09DA:  BCF    F83.1
....................     lcd.rw = 0; 
09DC:  BCF    F83.2
....................     lcd.enable = 0; 
09DE:  BCF    F83.3
....................     delay_ms(15); 
09E0:  MOVLW  0F
09E2:  MOVWF  xFF
09E4:  RCALL  0940
....................     for(i=1;i<=3;++i) { 
09E6:  MOVLW  01
09E8:  MOVWF  xE8
09EA:  MOVF   xE8,W
09EC:  SUBLW  03
09EE:  BNC   0A04
....................        lcd_send_nibble(3); 
09F0:  MOVLW  03
09F2:  MOVLB  1
09F4:  MOVWF  x00
09F6:  MOVLB  0
09F8:  RCALL  0968
....................        delay_ms(5); 
09FA:  MOVLW  05
09FC:  MOVWF  xFF
09FE:  RCALL  0940
....................     } 
0A00:  INCF   xE8,F
0A02:  BRA    09EA
....................     lcd_send_nibble(2); 
0A04:  MOVLW  02
0A06:  MOVLB  1
0A08:  MOVWF  x00
0A0A:  MOVLB  0
0A0C:  RCALL  0968
....................     for(i=0;i<=3;++i) 
0A0E:  CLRF   xE8
0A10:  MOVF   xE8,W
0A12:  SUBLW  03
0A14:  BNC   0A3A
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0A16:  CLRF   03
0A18:  MOVF   xE8,W
0A1A:  MOVFF  FF2,E9
0A1E:  BCF    FF2.6
0A20:  BCF    FF2.7
0A22:  CALL   0140
0A26:  BTFSC  xE9.6
0A28:  BSF    FF2.6
0A2A:  BTFSC  xE9.7
0A2C:  BSF    FF2.7
0A2E:  MOVWF  xE9
0A30:  CLRF   xFD
0A32:  MOVWF  xFE
0A34:  RCALL  0992
0A36:  INCF   xE8,F
0A38:  BRA    0A10
.................... } 
0A3A:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0A78:  MOVLW  01
0A7A:  SUBWF  xFB,W
0A7C:  ADDLW  FC
0A7E:  BC    0A9E
0A80:  ADDLW  04
0A82:  GOTO   0AAE
....................      case 1 : address=0x80;break; 
0A86:  MOVLW  80
0A88:  MOVWF  xFC
0A8A:  BRA    0A9E
....................      case 2 : address=0xc0;break; 
0A8C:  MOVLW  C0
0A8E:  MOVWF  xFC
0A90:  BRA    0A9E
....................      case 3 : address=0x94;break; 
0A92:  MOVLW  94
0A94:  MOVWF  xFC
0A96:  BRA    0A9E
....................      case 4 : address=0xd4;break; 
0A98:  MOVLW  D4
0A9A:  MOVWF  xFC
0A9C:  BRA    0A9E
....................    } 
....................    address+=x-1; 
0A9E:  MOVLW  01
0AA0:  SUBWF  xFA,W
0AA2:  ADDWF  xFC,F
....................    lcd_send_byte(0,address); 
0AA4:  CLRF   xFD
0AA6:  MOVFF  FC,FE
0AAA:  RCALL  0992
.................... } 
0AAC:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0AE0:  MOVF   xF9,W
0AE2:  SUBLW  F1
0AE4:  BNZ   0AEA
....................    { 
....................       c=238; 
0AE6:  MOVLW  EE
0AE8:  MOVWF  xF9
....................    } 
....................    if(c=='Ñ') 
0AEA:  MOVF   xF9,W
0AEC:  SUBLW  D1
0AEE:  BNZ   0AF4
....................    { 
....................       c=255; 
0AF0:  MOVLW  FF
0AF2:  MOVWF  xF9
....................    } 
....................     
....................    switch (c) { 
0AF4:  MOVF   xF9,W
0AF6:  XORLW  0C
0AF8:  BZ    0B04
0AFA:  XORLW  06
0AFC:  BZ    0B18
0AFE:  XORLW  02
0B00:  BZ    0B26
0B02:  BRA    0B30
....................      case '\f'   : lcd_send_byte(0,1); 
0B04:  CLRF   xFD
0B06:  MOVLW  01
0B08:  MOVWF  xFE
0B0A:  RCALL  0992
....................                    lcdline=1; 
0B0C:  MOVLW  01
0B0E:  MOVWF  28
....................                    delay_ms(2); 
0B10:  MOVLW  02
0B12:  MOVWF  xFF
0B14:  RCALL  0940
....................                                            break; 
0B16:  BRA    0B3C
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0B18:  INCF   28,F
0B1A:  MOVLW  01
0B1C:  MOVWF  xFA
0B1E:  MOVFF  28,FB
0B22:  RCALL  0A78
0B24:  BRA    0B3C
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0B26:  CLRF   xFD
0B28:  MOVLW  10
0B2A:  MOVWF  xFE
0B2C:  RCALL  0992
0B2E:  BRA    0B3C
....................      default     : lcd_send_byte(1,c);     break; 
0B30:  MOVLW  01
0B32:  MOVWF  xFD
0B34:  MOVFF  F9,FE
0B38:  RCALL  0992
0B3A:  BRA    0B3C
....................    } 
.................... } 
0B3C:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF,flag_arriba=OFF,Entro=0; 
.................... short flagdn=0,flagup=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,n=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0,tup=0,tdown=0,tright=0,tleft=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
140C:  DECFSZ xE9,W
140E:  BRA    1428
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1410:  MOVLW  02
1412:  MOVWF  xFA
1414:  MOVFF  EA,FB
1418:  CALL   0A78
141C:  MOVLW  64
141E:  MOVWF  FF6
1420:  MOVLW  01
1422:  MOVWF  FF7
1424:  CALL   0B3E
....................    if(x==2) 
1428:  MOVF   xE9,W
142A:  SUBLW  02
142C:  BNZ   1446
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
142E:  MOVLW  02
1430:  MOVWF  xFA
1432:  MOVFF  EA,FB
1436:  CALL   0A78
143A:  MOVLW  78
143C:  MOVWF  FF6
143E:  MOVLW  01
1440:  MOVWF  FF7
1442:  CALL   0B3E
....................    if(x==3) 
1446:  MOVF   xE9,W
1448:  SUBLW  03
144A:  BNZ   1464
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
144C:  MOVLW  02
144E:  MOVWF  xFA
1450:  MOVFF  EA,FB
1454:  CALL   0A78
1458:  MOVLW  8C
145A:  MOVWF  FF6
145C:  MOVLW  01
145E:  MOVWF  FF7
1460:  CALL   0B3E
....................    if(x==4) 
1464:  MOVF   xE9,W
1466:  SUBLW  04
1468:  BNZ   1482
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
146A:  MOVLW  02
146C:  MOVWF  xFA
146E:  MOVFF  EA,FB
1472:  CALL   0A78
1476:  MOVLW  A0
1478:  MOVWF  FF6
147A:  MOVLW  01
147C:  MOVWF  FF7
147E:  CALL   0B3E
....................     
....................    if(x==5) 
1482:  MOVF   xE9,W
1484:  SUBLW  05
1486:  BNZ   14C0
....................    {if(estadoalarma==0) 
1488:  BTFSC  2A.4
148A:  BRA    14A4
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
148C:  MOVLW  02
148E:  MOVWF  xFA
1490:  MOVFF  EA,FB
1494:  CALL   0A78
1498:  MOVLW  B4
149A:  MOVWF  FF6
149C:  MOVLW  01
149E:  MOVWF  FF7
14A0:  CALL   0B3E
....................    if(estadoalarma==1) 
14A4:  BTFSS  2A.4
14A6:  BRA    14C0
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
14A8:  MOVLW  02
14AA:  MOVWF  xFA
14AC:  MOVFF  EA,FB
14B0:  CALL   0A78
14B4:  MOVLW  C8
14B6:  MOVWF  FF6
14B8:  MOVLW  01
14BA:  MOVWF  FF7
14BC:  CALL   0B3E
....................    } 
....................     
....................    if(x==6) 
14C0:  MOVF   xE9,W
14C2:  SUBLW  06
14C4:  BNZ   14DE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
14C6:  MOVLW  02
14C8:  MOVWF  xFA
14CA:  MOVFF  EA,FB
14CE:  CALL   0A78
14D2:  MOVLW  DC
14D4:  MOVWF  FF6
14D6:  MOVLW  01
14D8:  MOVWF  FF7
14DA:  CALL   0B3E
.................... } 
14DE:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1602:  RLCF   xF9,W
1604:  MOVWF  00
1606:  RLCF   00,F
1608:  MOVLW  FC
160A:  ANDWF  00,F
160C:  MOVFF  00,01
1610:  MOVF   FC2,W
1612:  ANDLW  C3
1614:  IORWF  00,W
1616:  MOVWF  FC2
1618:  MOVLW  0A
161A:  MOVWF  xFF
161C:  CALL   0940
1620:  BSF    FC2.1
1622:  BTFSC  FC2.1
1624:  BRA    1622
1626:  MOVFF  FC4,101
162A:  MOVFF  FC3,100
162E:  MOVLB  0
1630:  CALL   0BC4
1634:  MOVFF  03,FD
1638:  MOVFF  02,FC
163C:  MOVFF  01,FB
1640:  MOVFF  00,FA
1644:  MOVFF  FA,00
1648:  MOVFF  FB,01
164C:  MOVFF  FC,02
1650:  MOVFF  FD,03
.................... } 
1654:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1A4A:  CLRF   xEC
1A4C:  CLRF   xEB
1A4E:  CLRF   xEA
1A50:  CLRF   xE9
1A52:  CLRF   xF0
1A54:  CLRF   xEF
1A56:  CLRF   xEE
1A58:  CLRF   xED
1A5A:  CLRF   xF4
1A5C:  CLRF   xF3
1A5E:  CLRF   xF2
1A60:  CLRF   xF1
1A62:  CLRF   xF8
1A64:  CLRF   xF7
1A66:  CLRF   xF6
1A68:  CLRF   xF5
....................    float promediopresion=0.0; 
....................    float VG=0.0,VS=0.0,G2=0.0; 
....................     
....................    V1=sensores(0);  
1A6A:  CLRF   xF9
1A6C:  RCALL  1602
1A6E:  MOVFF  03,B0
1A72:  MOVFF  02,AF
1A76:  MOVFF  01,AE
1A7A:  MOVFF  00,AD
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1A7E:  MOVFF  B0,FF
1A82:  MOVFF  AF,FE
1A86:  MOVFF  AE,FD
1A8A:  MOVFF  AD,FC
1A8E:  MOVFF  C0,103
1A92:  MOVFF  BF,102
1A96:  MOVFF  BE,101
1A9A:  MOVFF  BD,100
1A9E:  RCALL  1656
1AA0:  MOVFF  00,F9
1AA4:  MOVFF  01,FA
1AA8:  MOVFF  02,FB
1AAC:  MOVFF  03,FC
1AB0:  BSF    FD8.1
1AB2:  MOVFF  03,103
1AB6:  MOVFF  02,102
1ABA:  MOVFF  01,101
1ABE:  MOVFF  00,100
1AC2:  MOVLB  1
1AC4:  CLRF   x07
1AC6:  CLRF   x06
1AC8:  CLRF   x05
1ACA:  MOVLW  7F
1ACC:  MOVWF  x04
1ACE:  MOVLB  0
1AD0:  RCALL  17D2
1AD2:  MOVFF  03,B4
1AD6:  MOVFF  02,B3
1ADA:  MOVFF  01,B2
1ADE:  MOVFF  00,B1
....................    //VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    //G2=G; 
....................    //VG = (G2*5.0)/1023.0; 
....................    //Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
....................     
....................    if(Presion<0.0) 
1AE2:  MOVFF  B4,FF
1AE6:  MOVFF  B3,FE
1AEA:  MOVFF  B2,FD
1AEE:  MOVFF  B1,FC
1AF2:  MOVLB  1
1AF4:  CLRF   x03
1AF6:  CLRF   x02
1AF8:  CLRF   x01
1AFA:  CLRF   x00
1AFC:  MOVLB  0
1AFE:  CALL   0E98
1B02:  BNC   1B0C
....................    { 
....................       Presion=0.0; 
1B04:  CLRF   xB4
1B06:  CLRF   xB3
1B08:  CLRF   xB2
1B0A:  CLRF   xB1
....................    } 
....................  
....................    if(r>media-1) 
1B0C:  MOVLW  01
1B0E:  SUBWF  xE8,W
1B10:  SUBWF  3F,W
1B12:  BZ    1B18
1B14:  BNC   1B18
....................    {r=0;} 
1B16:  CLRF   3F
....................    PromPresion[r]=Presion;r++; 
1B18:  MOVF   3F,W
1B1A:  MULLW  04
1B1C:  MOVF   FF3,W
1B1E:  CLRF   03
1B20:  ADDLW  5D
1B22:  MOVWF  FE9
1B24:  MOVLW  00
1B26:  ADDWFC 03,W
1B28:  MOVWF  FEA
1B2A:  MOVFF  B1,FEF
1B2E:  MOVFF  B2,FEC
1B32:  MOVFF  B3,FEC
1B36:  MOVFF  B4,FEC
1B3A:  INCF   3F,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1B3C:  CLRF   40
1B3E:  MOVLW  01
1B40:  SUBWF  xE8,W
1B42:  SUBWF  40,W
1B44:  BZ    1B48
1B46:  BC    1BB2
....................    { 
....................       promediopresion+=PromPresion[q]; 
1B48:  MOVF   40,W
1B4A:  MULLW  04
1B4C:  MOVF   FF3,W
1B4E:  CLRF   03
1B50:  ADDLW  5D
1B52:  MOVWF  FE9
1B54:  MOVLW  00
1B56:  ADDWFC 03,W
1B58:  MOVWF  FEA
1B5A:  MOVFF  FEF,00
1B5E:  MOVFF  FEC,01
1B62:  MOVFF  FEC,02
1B66:  MOVFF  FEC,03
1B6A:  MOVFF  FEA,FA
1B6E:  MOVFF  FE9,F9
1B72:  BCF    FD8.1
1B74:  MOVFF  EC,103
1B78:  MOVFF  EB,102
1B7C:  MOVFF  EA,101
1B80:  MOVFF  E9,100
1B84:  MOVFF  03,107
1B88:  MOVFF  02,106
1B8C:  MOVFF  01,105
1B90:  MOVFF  00,104
1B94:  RCALL  17D2
1B96:  MOVFF  FA,FEA
1B9A:  MOVFF  F9,FE9
1B9E:  MOVFF  03,EC
1BA2:  MOVFF  02,EB
1BA6:  MOVFF  01,EA
1BAA:  MOVFF  00,E9
....................    }  
1BAE:  INCF   40,F
1BB0:  BRA    1B3E
....................    promediopresion=promediopresion/media;    
1BB2:  MOVLB  1
1BB4:  CLRF   x01
1BB6:  MOVFF  E8,100
1BBA:  MOVLB  0
1BBC:  CALL   0BC4
1BC0:  MOVFF  EC,FF
1BC4:  MOVFF  EB,FE
1BC8:  MOVFF  EA,FD
1BCC:  MOVFF  E9,FC
1BD0:  MOVFF  03,103
1BD4:  MOVFF  02,102
1BD8:  MOVFF  01,101
1BDC:  MOVFF  00,100
1BE0:  RCALL  1656
1BE2:  MOVFF  03,EC
1BE6:  MOVFF  02,EB
1BEA:  MOVFF  01,EA
1BEE:  MOVFF  00,E9
....................     
....................    return promediopresion; 
1BF2:  MOVFF  E9,00
1BF6:  MOVFF  EA,01
1BFA:  MOVFF  EB,02
1BFE:  MOVFF  EC,03
.................... } 
1C02:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0A3C:  MOVLW  C8
0A3E:  MOVWF  xFF
0A40:  RCALL  0940
....................    lcd_init(); 
0A42:  RCALL  09D6
....................    set_tris_a(0XFF); 
0A44:  MOVLW  FF
0A46:  MOVWF  F92
....................    set_tris_e(0XFF); 
0A48:  MOVWF  F96
....................    enable_interrupts(global); 
0A4A:  MOVLW  C0
0A4C:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
0A4E:  BSF    FF2.4
0A50:  BSF    FF1.6
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
0A52:  MOVLW  C7
0A54:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0A56:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0A58:  MOVLW  85
0A5A:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0A5C:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0A5E:  MOVF   FC1,W
0A60:  ANDLW  C0
0A62:  IORLW  0E
0A64:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0A66:  BCF    FC0.0
0A68:  BSF    FC0.1
0A6A:  BCF    FC0.2
0A6C:  BSF    FC0.7
0A6E:  BSF    FC2.0
....................    enable_interrupts(global); 
0A70:  MOVLW  C0
0A72:  IORWF  FF2,F
.................... } 
0A74:  GOTO   2526 (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
0B5E:  MOVLW  01
0B60:  MOVWF  xFA
0B62:  MOVWF  xFB
0B64:  RCALL  0A78
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
0B66:  MOVLW  F0
0B68:  MOVWF  FF6
0B6A:  MOVLW  01
0B6C:  MOVWF  FF7
0B6E:  RCALL  0B3E
....................    lcd_gotoxy(1,2); 
0B70:  MOVLW  01
0B72:  MOVWF  xFA
0B74:  MOVLW  02
0B76:  MOVWF  xFB
0B78:  RCALL  0A78
....................    printf(lcd_putc,"      VERTICAL      "); 
0B7A:  MOVLW  06
0B7C:  MOVWF  FF6
0B7E:  MOVLW  02
0B80:  MOVWF  FF7
0B82:  RCALL  0B3E
....................    lcd_gotoxy(1,3); 
0B84:  MOVLW  01
0B86:  MOVWF  xFA
0B88:  MOVLW  03
0B8A:  MOVWF  xFB
0B8C:  RCALL  0A78
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0B8E:  MOVLW  1C
0B90:  MOVWF  FF6
0B92:  MOVLW  02
0B94:  MOVWF  FF7
0B96:  RCALL  0B3E
....................    lcd_gotoxy(1,4); 
0B98:  MOVLW  01
0B9A:  MOVWF  xFA
0B9C:  MOVLW  04
0B9E:  MOVWF  xFB
0BA0:  RCALL  0A78
....................    printf(lcd_putc,"     REF:JPCV36     "); 
0BA2:  MOVLW  32
0BA4:  MOVWF  FF6
0BA6:  MOVLW  02
0BA8:  MOVWF  FF7
0BAA:  RCALL  0B3E
....................    delay_ms(2000); 
0BAC:  MOVLW  08
0BAE:  MOVWF  xE8
0BB0:  MOVLW  FA
0BB2:  MOVWF  xFF
0BB4:  RCALL  0940
0BB6:  DECFSZ xE8,F
0BB8:  BRA    0BB0
....................    printf(lcd_putc,"\f"); 
0BBA:  MOVLW  0C
0BBC:  MOVWF  xF9
0BBE:  RCALL  0AE0
.................... } 
0BC0:  GOTO   252A (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0BFA:  MOVFF  FF2,E8
0BFE:  BCF    FF2.6
0C00:  BCF    FF2.7
0C02:  CLRF   FA9
0C04:  BCF    FA6.6
0C06:  BCF    FA6.7
0C08:  BSF    FA6.0
0C0A:  MOVF   FA8,W
0C0C:  BTFSC  xE8.6
0C0E:  BSF    FF2.6
0C10:  BTFSC  xE8.7
0C12:  BSF    FF2.7
0C14:  MOVWF  4D
....................    delay_ms(20);  
0C16:  MOVLW  14
0C18:  MOVWF  xFF
0C1A:  RCALL  0940
....................    contrasena[1]=read_eeprom(1); 
0C1C:  MOVFF  FF2,E8
0C20:  BCF    FF2.6
0C22:  BCF    FF2.7
0C24:  MOVLW  01
0C26:  MOVWF  FA9
0C28:  BCF    FA6.6
0C2A:  BCF    FA6.7
0C2C:  BSF    FA6.0
0C2E:  MOVF   FA8,W
0C30:  BTFSC  xE8.6
0C32:  BSF    FF2.6
0C34:  BTFSC  xE8.7
0C36:  BSF    FF2.7
0C38:  MOVWF  4E
....................    delay_ms(20); 
0C3A:  MOVLW  14
0C3C:  MOVWF  xFF
0C3E:  RCALL  0940
....................    contrasena[2]=read_eeprom(2); 
0C40:  MOVFF  FF2,E8
0C44:  BCF    FF2.6
0C46:  BCF    FF2.7
0C48:  MOVLW  02
0C4A:  MOVWF  FA9
0C4C:  BCF    FA6.6
0C4E:  BCF    FA6.7
0C50:  BSF    FA6.0
0C52:  MOVF   FA8,W
0C54:  BTFSC  xE8.6
0C56:  BSF    FF2.6
0C58:  BTFSC  xE8.7
0C5A:  BSF    FF2.7
0C5C:  MOVWF  4F
....................    delay_ms(20);  
0C5E:  MOVLW  14
0C60:  MOVWF  xFF
0C62:  RCALL  0940
....................    contrasena[3]=read_eeprom(3); 
0C64:  MOVFF  FF2,E8
0C68:  BCF    FF2.6
0C6A:  BCF    FF2.7
0C6C:  MOVLW  03
0C6E:  MOVWF  FA9
0C70:  BCF    FA6.6
0C72:  BCF    FA6.7
0C74:  BSF    FA6.0
0C76:  MOVF   FA8,W
0C78:  BTFSC  xE8.6
0C7A:  BSF    FF2.6
0C7C:  BTFSC  xE8.7
0C7E:  BSF    FF2.7
0C80:  MOVWF  50
....................    delay_ms(20); 
0C82:  MOVLW  14
0C84:  MOVWF  xFF
0C86:  RCALL  0940
....................    estadoalarma=read_eeprom(4); 
0C88:  MOVFF  FF2,E8
0C8C:  BCF    FF2.6
0C8E:  BCF    FF2.7
0C90:  MOVLW  04
0C92:  MOVWF  FA9
0C94:  BCF    FA6.6
0C96:  BCF    FA6.7
0C98:  BSF    FA6.0
0C9A:  MOVF   FA8,W
0C9C:  BTFSC  xE8.6
0C9E:  BSF    FF2.6
0CA0:  BTFSC  xE8.7
0CA2:  BSF    FF2.7
0CA4:  MOVWF  01
0CA6:  BCF    2A.4
0CA8:  BTFSC  01.0
0CAA:  BSF    2A.4
....................    delay_ms(20); 
0CAC:  MOVLW  14
0CAE:  MOVWF  xFF
0CB0:  RCALL  0940
....................    tempo_minutos=read_eeprom(5); 
0CB2:  MOVFF  FF2,E8
0CB6:  BCF    FF2.6
0CB8:  BCF    FF2.7
0CBA:  MOVLW  05
0CBC:  MOVWF  FA9
0CBE:  BCF    FA6.6
0CC0:  BCF    FA6.7
0CC2:  BSF    FA6.0
0CC4:  MOVF   FA8,W
0CC6:  BTFSC  xE8.6
0CC8:  BSF    FF2.6
0CCA:  BTFSC  xE8.7
0CCC:  BSF    FF2.7
0CCE:  MOVWF  3B
....................    delay_ms(20); 
0CD0:  MOVLW  14
0CD2:  MOVWF  xFF
0CD4:  RCALL  0940
....................    tempo_segundos=read_eeprom(6); 
0CD6:  MOVFF  FF2,E8
0CDA:  BCF    FF2.6
0CDC:  BCF    FF2.7
0CDE:  MOVLW  06
0CE0:  MOVWF  FA9
0CE2:  BCF    FA6.6
0CE4:  BCF    FA6.7
0CE6:  BSF    FA6.0
0CE8:  MOVF   FA8,W
0CEA:  BTFSC  xE8.6
0CEC:  BSF    FF2.6
0CEE:  BTFSC  xE8.7
0CF0:  BSF    FF2.7
0CF2:  MOVWF  3C
....................    delay_ms(20); 
0CF4:  MOVLW  14
0CF6:  MOVWF  xFF
0CF8:  RCALL  0940
....................    segundos=read_eeprom(7); 
0CFA:  MOVFF  FF2,E8
0CFE:  BCF    FF2.6
0D00:  BCF    FF2.7
0D02:  MOVLW  07
0D04:  MOVWF  FA9
0D06:  BCF    FA6.6
0D08:  BCF    FA6.7
0D0A:  BSF    FA6.0
0D0C:  MOVF   FA8,W
0D0E:  BTFSC  xE8.6
0D10:  BSF    FF2.6
0D12:  BTFSC  xE8.7
0D14:  BSF    FF2.7
0D16:  MOVWF  35
....................    delay_ms(20); 
0D18:  MOVLW  14
0D1A:  MOVWF  xFF
0D1C:  RCALL  0940
....................    minutos=read_eeprom(8); 
0D1E:  MOVFF  FF2,E8
0D22:  BCF    FF2.6
0D24:  BCF    FF2.7
0D26:  MOVLW  08
0D28:  MOVWF  FA9
0D2A:  BCF    FA6.6
0D2C:  BCF    FA6.7
0D2E:  BSF    FA6.0
0D30:  MOVF   FA8,W
0D32:  BTFSC  xE8.6
0D34:  BSF    FF2.6
0D36:  BTFSC  xE8.7
0D38:  BSF    FF2.7
0D3A:  MOVWF  36
....................    delay_ms(20); 
0D3C:  MOVLW  14
0D3E:  MOVWF  xFF
0D40:  RCALL  0940
....................    horasL=read_eeprom(9); 
0D42:  MOVFF  FF2,E8
0D46:  BCF    FF2.6
0D48:  BCF    FF2.7
0D4A:  MOVLW  09
0D4C:  MOVWF  FA9
0D4E:  BCF    FA6.6
0D50:  BCF    FA6.7
0D52:  BSF    FA6.0
0D54:  MOVF   FA8,W
0D56:  BTFSC  xE8.6
0D58:  BSF    FF2.6
0D5A:  BTFSC  xE8.7
0D5C:  BSF    FF2.7
0D5E:  MOVWF  37
....................    delay_ms(20); 
0D60:  MOVLW  14
0D62:  MOVWF  xFF
0D64:  RCALL  0940
....................    horasH=read_eeprom(10); 
0D66:  MOVFF  FF2,E8
0D6A:  BCF    FF2.6
0D6C:  BCF    FF2.7
0D6E:  MOVLW  0A
0D70:  MOVWF  FA9
0D72:  BCF    FA6.6
0D74:  BCF    FA6.7
0D76:  BSF    FA6.0
0D78:  MOVF   FA8,W
0D7A:  BTFSC  xE8.6
0D7C:  BSF    FF2.6
0D7E:  BTFSC  xE8.7
0D80:  BSF    FF2.7
0D82:  MOVWF  38
....................    delay_ms(20); 
0D84:  MOVLW  14
0D86:  MOVWF  xFF
0D88:  RCALL  0940
....................    G_l=read_eeprom(11); 
0D8A:  MOVFF  FF2,E8
0D8E:  BCF    FF2.6
0D90:  BCF    FF2.7
0D92:  MOVLW  0B
0D94:  MOVWF  FA9
0D96:  BCF    FA6.6
0D98:  BCF    FA6.7
0D9A:  BSF    FA6.0
0D9C:  MOVF   FA8,W
0D9E:  BTFSC  xE8.6
0DA0:  BSF    FF2.6
0DA2:  BTFSC  xE8.7
0DA4:  BSF    FF2.7
0DA6:  MOVWF  39
....................    delay_ms(20); 
0DA8:  MOVLW  14
0DAA:  MOVWF  xFF
0DAC:  RCALL  0940
....................    G_h=read_eeprom(12); 
0DAE:  MOVFF  FF2,E8
0DB2:  BCF    FF2.6
0DB4:  BCF    FF2.7
0DB6:  MOVLW  0C
0DB8:  MOVWF  FA9
0DBA:  BCF    FA6.6
0DBC:  BCF    FA6.7
0DBE:  BSF    FA6.0
0DC0:  MOVF   FA8,W
0DC2:  BTFSC  xE8.6
0DC4:  BSF    FF2.6
0DC6:  BTFSC  xE8.7
0DC8:  BSF    FF2.7
0DCA:  MOVWF  3A
....................    delay_ms(20); 
0DCC:  MOVLW  14
0DCE:  MOVWF  xFF
0DD0:  RCALL  0940
....................    Vel1=read_eeprom(13); 
0DD2:  MOVFF  FF2,E8
0DD6:  BCF    FF2.6
0DD8:  BCF    FF2.7
0DDA:  MOVLW  0D
0DDC:  MOVWF  FA9
0DDE:  BCF    FA6.6
0DE0:  BCF    FA6.7
0DE2:  BSF    FA6.0
0DE4:  MOVF   FA8,W
0DE6:  BTFSC  xE8.6
0DE8:  BSF    FF2.6
0DEA:  BTFSC  xE8.7
0DEC:  BSF    FF2.7
0DEE:  MOVWF  56
....................    delay_ms(20); 
0DF0:  MOVLW  14
0DF2:  MOVWF  xFF
0DF4:  RCALL  0940
....................    codigoSubir=read_eeprom(15); 
0DF6:  MOVFF  FF2,E8
0DFA:  BCF    FF2.6
0DFC:  BCF    FF2.7
0DFE:  MOVLW  0F
0E00:  MOVWF  FA9
0E02:  BCF    FA6.6
0E04:  BCF    FA6.7
0E06:  BSF    FA6.0
0E08:  MOVF   FA8,W
0E0A:  BTFSC  xE8.6
0E0C:  BSF    FF2.6
0E0E:  BTFSC  xE8.7
0E10:  BSF    FF2.7
0E12:  MOVWF  52
....................    delay_ms(20); 
0E14:  MOVLW  14
0E16:  MOVWF  xFF
0E18:  RCALL  0940
....................    codigoBajar=read_eeprom(16); 
0E1A:  MOVFF  FF2,E8
0E1E:  BCF    FF2.6
0E20:  BCF    FF2.7
0E22:  MOVLW  10
0E24:  MOVWF  FA9
0E26:  BCF    FA6.6
0E28:  BCF    FA6.7
0E2A:  BSF    FA6.0
0E2C:  MOVF   FA8,W
0E2E:  BTFSC  xE8.6
0E30:  BSF    FF2.6
0E32:  BTFSC  xE8.7
0E34:  BSF    FF2.7
0E36:  MOVWF  53
....................    delay_ms(20); 
0E38:  MOVLW  14
0E3A:  MOVWF  xFF
0E3C:  RCALL  0940
....................    codigoDetener=read_eeprom(17); 
0E3E:  MOVFF  FF2,E8
0E42:  BCF    FF2.6
0E44:  BCF    FF2.7
0E46:  MOVLW  11
0E48:  MOVWF  FA9
0E4A:  BCF    FA6.6
0E4C:  BCF    FA6.7
0E4E:  BSF    FA6.0
0E50:  MOVF   FA8,W
0E52:  BTFSC  xE8.6
0E54:  BSF    FF2.6
0E56:  BTFSC  xE8.7
0E58:  BSF    FF2.7
0E5A:  MOVWF  54
....................    delay_ms(20); 
0E5C:  MOVLW  14
0E5E:  MOVWF  xFF
0E60:  RCALL  0940
....................    G16=make16(G_h,G_l); 
0E62:  MOVFF  3A,5C
0E66:  MOVFF  39,5B
....................    G=G16; 
0E6A:  MOVFF  5C,101
0E6E:  MOVFF  5B,100
0E72:  RCALL  0BC4
0E74:  MOVFF  03,C0
0E78:  MOVFF  02,BF
0E7C:  MOVFF  01,BE
0E80:  MOVFF  00,BD
....................    horas=make16(horasH,horasL); 
0E84:  MOVFF  38,5A
0E88:  MOVFF  37,59
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0E8C:  MOVFF  3B,3D
0E90:  MOVFF  3C,3E
.................... } 
0E94:  GOTO   252E (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0F3E:  BTFSC  4D.7
0F40:  BRA    0F48
0F42:  MOVF   4D,W
0F44:  SUBLW  09
0F46:  BNC   0F4C
0F48:  BTFSS  4D.7
0F4A:  BRA    0F7E
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0F4C:  CLRF   4D
0F4E:  CLRF   FA9
0F50:  CLRF   FA8
0F52:  BCF    FA6.6
0F54:  BCF    FA6.7
0F56:  BSF    FA6.2
0F58:  MOVF   FF2,W
0F5A:  MOVWF  00
0F5C:  BCF    FF2.6
0F5E:  BCF    FF2.7
0F60:  MOVLB  F
0F62:  MOVLW  55
0F64:  MOVWF  FA7
0F66:  MOVLW  AA
0F68:  MOVWF  FA7
0F6A:  BSF    FA6.1
0F6C:  BTFSC  FA6.1
0F6E:  BRA    0F6C
0F70:  BCF    FA6.2
0F72:  MOVF   00,W
0F74:  IORWF  FF2,F
0F76:  MOVLW  14
0F78:  MOVLB  0
0F7A:  MOVWF  xFF
0F7C:  RCALL  0940
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0F7E:  BTFSC  4E.7
0F80:  BRA    0F88
0F82:  MOVF   4E,W
0F84:  SUBLW  09
0F86:  BNC   0F8E
0F88:  BTFSC  4E.7
0F8A:  BRA    0F8E
0F8C:  BRA    0FC2
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0F8E:  CLRF   4E
0F90:  MOVLW  01
0F92:  MOVWF  FA9
0F94:  CLRF   FA8
0F96:  BCF    FA6.6
0F98:  BCF    FA6.7
0F9A:  BSF    FA6.2
0F9C:  MOVF   FF2,W
0F9E:  MOVWF  00
0FA0:  BCF    FF2.6
0FA2:  BCF    FF2.7
0FA4:  MOVLB  F
0FA6:  MOVLW  55
0FA8:  MOVWF  FA7
0FAA:  MOVLW  AA
0FAC:  MOVWF  FA7
0FAE:  BSF    FA6.1
0FB0:  BTFSC  FA6.1
0FB2:  BRA    0FB0
0FB4:  BCF    FA6.2
0FB6:  MOVF   00,W
0FB8:  IORWF  FF2,F
0FBA:  MOVLW  14
0FBC:  MOVLB  0
0FBE:  MOVWF  xFF
0FC0:  RCALL  0940
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0FC2:  BTFSC  4F.7
0FC4:  BRA    0FCC
0FC6:  MOVF   4F,W
0FC8:  SUBLW  09
0FCA:  BNC   0FD2
0FCC:  BTFSC  4F.7
0FCE:  BRA    0FD2
0FD0:  BRA    1006
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0FD2:  CLRF   4F
0FD4:  MOVLW  02
0FD6:  MOVWF  FA9
0FD8:  CLRF   FA8
0FDA:  BCF    FA6.6
0FDC:  BCF    FA6.7
0FDE:  BSF    FA6.2
0FE0:  MOVF   FF2,W
0FE2:  MOVWF  00
0FE4:  BCF    FF2.6
0FE6:  BCF    FF2.7
0FE8:  MOVLB  F
0FEA:  MOVLW  55
0FEC:  MOVWF  FA7
0FEE:  MOVLW  AA
0FF0:  MOVWF  FA7
0FF2:  BSF    FA6.1
0FF4:  BTFSC  FA6.1
0FF6:  BRA    0FF4
0FF8:  BCF    FA6.2
0FFA:  MOVF   00,W
0FFC:  IORWF  FF2,F
0FFE:  MOVLW  14
1000:  MOVLB  0
1002:  MOVWF  xFF
1004:  RCALL  0940
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
1006:  BTFSC  50.7
1008:  BRA    1010
100A:  MOVF   50,W
100C:  SUBLW  09
100E:  BNC   1016
1010:  BTFSC  50.7
1012:  BRA    1016
1014:  BRA    104A
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
1016:  CLRF   50
1018:  MOVLW  03
101A:  MOVWF  FA9
101C:  CLRF   FA8
101E:  BCF    FA6.6
1020:  BCF    FA6.7
1022:  BSF    FA6.2
1024:  MOVF   FF2,W
1026:  MOVWF  00
1028:  BCF    FF2.6
102A:  BCF    FF2.7
102C:  MOVLB  F
102E:  MOVLW  55
1030:  MOVWF  FA7
1032:  MOVLW  AA
1034:  MOVWF  FA7
1036:  BSF    FA6.1
1038:  BTFSC  FA6.1
103A:  BRA    1038
103C:  BCF    FA6.2
103E:  MOVF   00,W
1040:  IORWF  FF2,F
1042:  MOVLW  14
1044:  MOVLB  0
1046:  MOVWF  xFF
1048:  RCALL  0940
....................    } 
....................    if(estadoalarma>1){ 
104A:  MOVLW  00
104C:  BTFSC  2A.4
104E:  MOVLW  01
1050:  SUBLW  01
1052:  BC    108A
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
1054:  BSF    2A.4
1056:  MOVLW  04
1058:  MOVWF  FA9
105A:  MOVLW  01
105C:  MOVWF  FA8
105E:  BCF    FA6.6
1060:  BCF    FA6.7
1062:  BSF    FA6.2
1064:  MOVF   FF2,W
1066:  MOVWF  00
1068:  BCF    FF2.6
106A:  BCF    FF2.7
106C:  MOVLB  F
106E:  MOVLW  55
1070:  MOVWF  FA7
1072:  MOVLW  AA
1074:  MOVWF  FA7
1076:  BSF    FA6.1
1078:  BTFSC  FA6.1
107A:  BRA    1078
107C:  BCF    FA6.2
107E:  MOVF   00,W
1080:  IORWF  FF2,F
1082:  MOVLW  14
1084:  MOVLB  0
1086:  MOVWF  xFF
1088:  RCALL  0940
....................    } 
....................    if(tempo_minutos>200){ 
108A:  MOVF   3B,W
108C:  SUBLW  C8
108E:  BC    10C8
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
1090:  MOVLW  14
1092:  MOVWF  3B
1094:  MOVLW  05
1096:  MOVWF  FA9
1098:  MOVLW  14
109A:  MOVWF  FA8
109C:  BCF    FA6.6
109E:  BCF    FA6.7
10A0:  BSF    FA6.2
10A2:  MOVF   FF2,W
10A4:  MOVWF  00
10A6:  BCF    FF2.6
10A8:  BCF    FF2.7
10AA:  MOVLB  F
10AC:  MOVLW  55
10AE:  MOVWF  FA7
10B0:  MOVLW  AA
10B2:  MOVWF  FA7
10B4:  BSF    FA6.1
10B6:  BTFSC  FA6.1
10B8:  BRA    10B6
10BA:  BCF    FA6.2
10BC:  MOVF   00,W
10BE:  IORWF  FF2,F
10C0:  MOVLW  14
10C2:  MOVLB  0
10C4:  MOVWF  xFF
10C6:  RCALL  0940
....................    } 
....................    if(tempo_segundos>59){ 
10C8:  MOVF   3C,W
10CA:  SUBLW  3B
10CC:  BC    1102
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
10CE:  CLRF   3C
10D0:  MOVLW  06
10D2:  MOVWF  FA9
10D4:  CLRF   FA8
10D6:  BCF    FA6.6
10D8:  BCF    FA6.7
10DA:  BSF    FA6.2
10DC:  MOVF   FF2,W
10DE:  MOVWF  00
10E0:  BCF    FF2.6
10E2:  BCF    FF2.7
10E4:  MOVLB  F
10E6:  MOVLW  55
10E8:  MOVWF  FA7
10EA:  MOVLW  AA
10EC:  MOVWF  FA7
10EE:  BSF    FA6.1
10F0:  BTFSC  FA6.1
10F2:  BRA    10F0
10F4:  BCF    FA6.2
10F6:  MOVF   00,W
10F8:  IORWF  FF2,F
10FA:  MOVLW  14
10FC:  MOVLB  0
10FE:  MOVWF  xFF
1100:  RCALL  0940
....................    } 
....................    if(segundos>60){ 
1102:  MOVF   35,W
1104:  SUBLW  3C
1106:  BC    113C
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
1108:  CLRF   35
110A:  MOVLW  07
110C:  MOVWF  FA9
110E:  CLRF   FA8
1110:  BCF    FA6.6
1112:  BCF    FA6.7
1114:  BSF    FA6.2
1116:  MOVF   FF2,W
1118:  MOVWF  00
111A:  BCF    FF2.6
111C:  BCF    FF2.7
111E:  MOVLB  F
1120:  MOVLW  55
1122:  MOVWF  FA7
1124:  MOVLW  AA
1126:  MOVWF  FA7
1128:  BSF    FA6.1
112A:  BTFSC  FA6.1
112C:  BRA    112A
112E:  BCF    FA6.2
1130:  MOVF   00,W
1132:  IORWF  FF2,F
1134:  MOVLW  14
1136:  MOVLB  0
1138:  MOVWF  xFF
113A:  RCALL  0940
....................    } 
....................    if(minutos>60){ 
113C:  MOVF   36,W
113E:  SUBLW  3C
1140:  BC    1178
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
1142:  CLRF   36
1144:  MOVLW  08
1146:  MOVWF  FA9
1148:  CLRF   FA8
114A:  BCF    FA6.6
114C:  BCF    FA6.7
114E:  BSF    FA6.2
1150:  MOVF   FF2,W
1152:  MOVWF  00
1154:  BCF    FF2.6
1156:  BCF    FF2.7
1158:  MOVLB  F
115A:  MOVLW  55
115C:  MOVWF  FA7
115E:  MOVLW  AA
1160:  MOVWF  FA7
1162:  BSF    FA6.1
1164:  BTFSC  FA6.1
1166:  BRA    1164
1168:  BCF    FA6.2
116A:  MOVF   00,W
116C:  IORWF  FF2,F
116E:  MOVLW  14
1170:  MOVLB  0
1172:  MOVWF  xFF
1174:  CALL   0940
....................    } 
....................    if(horas>10000){ 
1178:  MOVF   5A,W
117A:  SUBLW  26
117C:  BC    11F6
117E:  XORLW  FF
1180:  BNZ   1188
1182:  MOVF   59,W
1184:  SUBLW  10
1186:  BC    11F6
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
1188:  CLRF   5A
118A:  CLRF   59
118C:  MOVLW  09
118E:  MOVWF  FA9
1190:  MOVLW  0A
1192:  MOVWF  FA8
1194:  BCF    FA6.6
1196:  BCF    FA6.7
1198:  BSF    FA6.2
119A:  MOVF   FF2,W
119C:  MOVWF  00
119E:  BCF    FF2.6
11A0:  BCF    FF2.7
11A2:  MOVLB  F
11A4:  MOVLW  55
11A6:  MOVWF  FA7
11A8:  MOVLW  AA
11AA:  MOVWF  FA7
11AC:  BSF    FA6.1
11AE:  BTFSC  FA6.1
11B0:  BRA    11AE
11B2:  BCF    FA6.2
11B4:  MOVF   00,W
11B6:  IORWF  FF2,F
11B8:  MOVLW  14
11BA:  MOVLB  0
11BC:  MOVWF  xFF
11BE:  CALL   0940
11C2:  MOVLW  0A
11C4:  MOVWF  FA9
11C6:  CLRF   FA8
11C8:  BCF    FA6.6
11CA:  BCF    FA6.7
11CC:  BSF    FA6.2
11CE:  MOVF   FF2,W
11D0:  MOVWF  00
11D2:  BCF    FF2.6
11D4:  BCF    FF2.7
11D6:  MOVLB  F
11D8:  MOVLW  55
11DA:  MOVWF  FA7
11DC:  MOVLW  AA
11DE:  MOVWF  FA7
11E0:  BSF    FA6.1
11E2:  BTFSC  FA6.1
11E4:  BRA    11E2
11E6:  BCF    FA6.2
11E8:  MOVF   00,W
11EA:  IORWF  FF2,F
11EC:  MOVLW  14
11EE:  MOVLB  0
11F0:  MOVWF  xFF
11F2:  CALL   0940
....................    } 
....................    if(G<180 || G>300){ 
11F6:  MOVFF  C0,FF
11FA:  MOVFF  BF,FE
11FE:  MOVFF  BE,FD
1202:  MOVFF  BD,FC
1206:  MOVLB  1
1208:  CLRF   x03
120A:  CLRF   x02
120C:  MOVLW  34
120E:  MOVWF  x01
1210:  MOVLW  86
1212:  MOVWF  x00
1214:  MOVLB  0
1216:  RCALL  0E98
1218:  BC    123A
121A:  CLRF   xFF
121C:  CLRF   xFE
121E:  MOVLW  16
1220:  MOVWF  xFD
1222:  MOVLW  87
1224:  MOVWF  xFC
1226:  MOVFF  C0,103
122A:  MOVFF  BF,102
122E:  MOVFF  BE,101
1232:  MOVFF  BD,100
1236:  RCALL  0E98
1238:  BNC   12B0
....................       G=220;write_eeprom(11,220);delay_ms(20);write_eeprom(12,0);delay_ms(20); 
123A:  CLRF   xC0
123C:  CLRF   xBF
123E:  MOVLW  5C
1240:  MOVWF  xBE
1242:  MOVLW  86
1244:  MOVWF  xBD
1246:  MOVLW  0B
1248:  MOVWF  FA9
124A:  MOVLW  DC
124C:  MOVWF  FA8
124E:  BCF    FA6.6
1250:  BCF    FA6.7
1252:  BSF    FA6.2
1254:  MOVF   FF2,W
1256:  MOVWF  00
1258:  BCF    FF2.6
125A:  BCF    FF2.7
125C:  MOVLB  F
125E:  MOVLW  55
1260:  MOVWF  FA7
1262:  MOVLW  AA
1264:  MOVWF  FA7
1266:  BSF    FA6.1
1268:  BTFSC  FA6.1
126A:  BRA    1268
126C:  BCF    FA6.2
126E:  MOVF   00,W
1270:  IORWF  FF2,F
1272:  MOVLW  14
1274:  MOVLB  0
1276:  MOVWF  xFF
1278:  CALL   0940
127C:  MOVLW  0C
127E:  MOVWF  FA9
1280:  CLRF   FA8
1282:  BCF    FA6.6
1284:  BCF    FA6.7
1286:  BSF    FA6.2
1288:  MOVF   FF2,W
128A:  MOVWF  00
128C:  BCF    FF2.6
128E:  BCF    FF2.7
1290:  MOVLB  F
1292:  MOVLW  55
1294:  MOVWF  FA7
1296:  MOVLW  AA
1298:  MOVWF  FA7
129A:  BSF    FA6.1
129C:  BTFSC  FA6.1
129E:  BRA    129C
12A0:  BCF    FA6.2
12A2:  MOVF   00,W
12A4:  IORWF  FF2,F
12A6:  MOVLW  14
12A8:  MOVLB  0
12AA:  MOVWF  xFF
12AC:  CALL   0940
....................    } 
....................    if(Vel1>6){ 
12B0:  MOVF   56,W
12B2:  SUBLW  06
12B4:  BC    12F0
....................       Vel1=4;write_eeprom(13,4);delay_ms(20); 
12B6:  MOVLW  04
12B8:  MOVWF  56
12BA:  MOVLW  0D
12BC:  MOVWF  FA9
12BE:  MOVLW  04
12C0:  MOVWF  FA8
12C2:  BCF    FA6.6
12C4:  BCF    FA6.7
12C6:  BSF    FA6.2
12C8:  MOVF   FF2,W
12CA:  MOVWF  00
12CC:  BCF    FF2.6
12CE:  BCF    FF2.7
12D0:  MOVLB  F
12D2:  MOVLW  55
12D4:  MOVWF  FA7
12D6:  MOVLW  AA
12D8:  MOVWF  FA7
12DA:  BSF    FA6.1
12DC:  BTFSC  FA6.1
12DE:  BRA    12DC
12E0:  BCF    FA6.2
12E2:  MOVF   00,W
12E4:  IORWF  FF2,F
12E6:  MOVLW  14
12E8:  MOVLB  0
12EA:  MOVWF  xFF
12EC:  CALL   0940
....................    } 
.................... } 
12F0:  GOTO   2532 (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
....................    if(VIDRIOUUP || !VIDRIODN){ 
....................       O1_on;O2_off; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoBajar=OFF; 
....................    } 
.................... } 
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
....................    if(!VIDRIOUUP || VIDRIODN){ 
....................       O1_off;O2_on; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoSubir=OFF; 
....................    } 
.................... } 
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
.................... } 
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
....................  
.................... /* 
.................... #int_EXT1 HIGH 
.................... void RB1(){ 
....................    Ta=get_timer1(); 
....................    TICK = Ta-tb; 
....................    Tb = Ta; 
....................     
....................    Entro=1; 
....................     
....................    if(BIT_START==1){ 
....................        //BIT 1 
....................        if(TICK>960 && TICK < 1280)  // 700 con Pres 4 y 20MHz  
....................       { 
....................          BITS[n]=1; n++; 
....................       } 
....................       //BIT 0 
....................        if(TICK>400 && TICK < 720)  // 350 con Pres 4 y 20MHz  
....................       { 
....................          BITS[n]=0; n++; 
....................       } 
....................       if(n>=32){ 
....................          NUEVO_DATO=1; 
....................          BIT_START=0; 
....................       } 
....................     
....................    } 
....................    //BIT START 
....................    if(TICK>2800 && TICK < 5800 && BIT_START==0)  //3500 con Pres 4 y 20MHz  
....................    { 
....................       BIT_START=1; 
....................       n=0;  
....................    } 
.................... } 
.................... */ 
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
0248:  BSF    2B.5
....................     
....................    if(VelMotor==5){ 
024A:  MOVF   xD0,W
024C:  SUBLW  05
024E:  BNZ   0260
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
0250:  CLRF   FD7
0252:  MOVLW  E4
0254:  MOVWF  FD6
....................       Motor_off;  
0256:  BCF    F8B.2
0258:  BCF    F94.2
....................       Motor2_off;  
025A:  BCF    F8B.1
025C:  BCF    F94.1
....................    }else if(VelMotor==4){ 
025E:  BRA    02B4
0260:  MOVF   xD0,W
0262:  SUBLW  04
0264:  BNZ   0276
....................       set_timer0(201);       
0266:  CLRF   FD7
0268:  MOVLW  C9
026A:  MOVWF  FD6
....................       Motor_off;  
026C:  BCF    F8B.2
026E:  BCF    F94.2
....................       Motor2_off;  
0270:  BCF    F8B.1
0272:  BCF    F94.1
....................    }else if(VelMotor==3){ 
0274:  BRA    02B4
0276:  MOVF   xD0,W
0278:  SUBLW  03
027A:  BNZ   028C
....................       set_timer0(196); 
027C:  CLRF   FD7
027E:  MOVLW  C4
0280:  MOVWF  FD6
....................       Motor_off;  
0282:  BCF    F8B.2
0284:  BCF    F94.2
....................       Motor2_off;  
0286:  BCF    F8B.1
0288:  BCF    F94.1
....................    }else if(VelMotor==2){ 
028A:  BRA    02B4
028C:  MOVF   xD0,W
028E:  SUBLW  02
0290:  BNZ   02A2
....................       set_timer0(188); 
0292:  CLRF   FD7
0294:  MOVLW  BC
0296:  MOVWF  FD6
....................       Motor_off;  
0298:  BCF    F8B.2
029A:  BCF    F94.2
....................       Motor2_off;  
029C:  BCF    F8B.1
029E:  BCF    F94.1
....................    }else if(VelMotor==1){ 
02A0:  BRA    02B4
02A2:  DECFSZ xD0,W
02A4:  BRA    02B4
....................       set_timer0(180); 
02A6:  CLRF   FD7
02A8:  MOVLW  B4
02AA:  MOVWF  FD6
....................       Motor_off;  
02AC:  BCF    F8B.2
02AE:  BCF    F94.2
....................       Motor2_off;  
02B0:  BCF    F8B.1
02B2:  BCF    F94.1
....................    } 
....................    pulsos++;    
02B4:  INCF   xC1,F
02B6:  BTFSC  FD8.2
02B8:  INCF   xC2,F
.................... } 
....................  
02BA:  BCF    FF2.1
02BC:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<6){ 
02C0:  MOVF   xD0,F
02C2:  BZ    02EC
02C4:  MOVF   xD0,W
02C6:  SUBLW  05
02C8:  BNC   02EC
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
02CA:  BTFSS  2B.5
02CC:  BRA    02E0
....................       Motor_on; 
02CE:  BSF    F8B.2
02D0:  BCF    F94.2
....................       Motor2_on;  
02D2:  BSF    F8B.1
02D4:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
02D6:  CLRF   FD7
02D8:  MOVLW  FD
02DA:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
02DC:  BCF    2B.5
....................    } else {            //The triac has been triggered, cut the pulse 
02DE:  BRA    02EC
....................       Motor_off; 
02E0:  BCF    F8B.2
02E2:  BCF    F94.2
....................       Motor2_off;  
02E4:  BCF    F8B.1
02E6:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
02E8:  CLRF   FD7
02EA:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
.................... //#int_TIMER2 
02EC:  BCF    FF2.2
02EE:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer2(231);//100.25uS 
....................    set_timer1(45536);//5ms 
02F2:  MOVLW  B1
02F4:  MOVWF  FCF
02F6:  MOVLW  E0
02F8:  MOVWF  FCE
....................    tiempos++; 
02FA:  INCF   57,F
02FC:  BTFSC  FD8.2
02FE:  INCF   58,F
....................    if(UP) 
0300:  BSF    F92.5
0302:  BTFSC  F80.5
0304:  BRA    030E
....................          tup++; 
0306:  INCF   xC5,F
0308:  BTFSC  FD8.2
030A:  INCF   xC6,F
....................       else 
030C:  BRA    0312
....................          tup=0; 
030E:  CLRF   xC6
0310:  CLRF   xC5
....................           
....................       if(DOWN) 
0312:  BSF    F96.0
0314:  BTFSC  F84.0
0316:  BRA    0320
....................          tdown++; 
0318:  INCF   xC7,F
031A:  BTFSC  FD8.2
031C:  INCF   xC8,F
....................       else 
031E:  BRA    0324
....................          tdown=0; 
0320:  CLRF   xC8
0322:  CLRF   xC7
....................           
....................       if(RIGHT) 
0324:  BSF    F96.1
0326:  BTFSC  F84.1
0328:  BRA    0332
....................          tright++; 
032A:  INCF   xC9,F
032C:  BTFSC  FD8.2
032E:  INCF   xCA,F
....................       else 
0330:  BRA    0336
....................          tright=0; 
0332:  CLRF   xCA
0334:  CLRF   xC9
....................        
....................       if(IZQU) 
0336:  BSF    F96.2
0338:  BTFSC  F84.2
033A:  BRA    0344
....................          tleft++; 
033C:  INCF   xCB,F
033E:  BTFSC  FD8.2
0340:  INCF   xCC,F
....................       else 
0342:  BRA    0348
....................          tleft=0; 
0344:  CLRF   xCC
0346:  CLRF   xCB
....................      
....................    //if(tiempos>=10000){ 
....................    //if(tiempos>=9710){//1s 
....................    if(tiempos>=200){//1s 
0348:  MOVF   58,F
034A:  BNZ   0352
034C:  MOVF   57,W
034E:  SUBLW  C7
0350:  BC    03A4
....................       output_toggle(PIN_A3); 
0352:  BCF    F92.3
0354:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
0356:  CLRF   58
0358:  CLRF   57
035A:  INCF   43,F
035C:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
035E:  DECFSZ 51,W
0360:  BRA    0376
....................          if(estadobuzzer==0){ 
0362:  BTFSC  2A.3
0364:  BRA    036C
....................             Buzzer_off; 
0366:  BCF    F8B.0
0368:  BCF    F94.0
....................          }else{ 
036A:  BRA    0374
....................             if(estadoalarma==1) 
036C:  BTFSS  2A.4
036E:  BRA    0374
....................                Buzzer_on; 
0370:  BSF    F8B.0
0372:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
0374:  BTG    2A.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
0376:  BTFSS  29.0
0378:  BRA    03A4
....................          segundos++; 
037A:  INCF   35,F
....................          if(tiempo_cumplido==0){ 
037C:  BTFSC  29.7
037E:  BRA    03A4
....................             if(tempo_segundos>0){ 
0380:  MOVF   3C,F
0382:  BZ    0388
....................                tempo_segundos--; 
0384:  DECF   3C,F
....................             }else{ 
0386:  BRA    03A4
....................                if(tempo_minutos>0){ 
0388:  MOVF   3B,F
038A:  BZ    0394
....................                   tempo_minutos--; 
038C:  DECF   3B,F
....................                   tempo_segundos=59; 
038E:  MOVLW  3B
0390:  MOVWF  3C
....................                }else{ 
0392:  BRA    03A4
....................                   tiempo_cumplido=1; 
0394:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
0396:  BCF    29.0
0398:  BSF    F8A.3
039A:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
039C:  MOVFF  3D,3B
03A0:  MOVFF  3E,3C
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
03A4:  BCF    F9E.0
03A6:  GOTO   0064
.................... void main () 
.................... { 
*
235E:  CLRF   FF8
2360:  BSF    FF1.2
2362:  BCF    F9F.0
2364:  BSF    FD0.7
2366:  BSF    07.7
2368:  CLRF   FEA
236A:  CLRF   FE9
236C:  BCF    29.0
236E:  BCF    29.1
2370:  BCF    29.2
2372:  BCF    29.3
2374:  BCF    29.4
2376:  BCF    29.5
2378:  BCF    29.6
237A:  BCF    29.7
237C:  BCF    2A.0
237E:  BCF    2A.1
2380:  BCF    2A.2
2382:  BCF    2A.3
2384:  BCF    2A.4
2386:  BCF    2A.5
2388:  BCF    2A.6
238A:  BCF    2A.7
238C:  BCF    2B.0
238E:  BCF    2B.1
2390:  BCF    2B.2
2392:  CLRF   2C
2394:  MOVLW  07
2396:  MOVWF  2D
2398:  MOVLW  02
239A:  MOVWF  2E
239C:  MOVLW  0B
239E:  MOVWF  2F
23A0:  MOVLW  02
23A2:  MOVWF  30
23A4:  MOVLW  03
23A6:  MOVWF  31
23A8:  MOVLW  02
23AA:  MOVWF  32
23AC:  MOVWF  33
23AE:  MOVLW  04
23B0:  MOVWF  34
23B2:  CLRF   35
23B4:  CLRF   36
23B6:  CLRF   37
23B8:  CLRF   38
23BA:  CLRF   39
23BC:  CLRF   3A
23BE:  CLRF   3B
23C0:  CLRF   3C
23C2:  CLRF   3D
23C4:  CLRF   3E
23C6:  CLRF   3F
23C8:  CLRF   40
23CA:  CLRF   41
23CC:  MOVLW  01
23CE:  MOVWF  42
23D0:  CLRF   43
23D2:  CLRF   44
23D4:  CLRF   45
23D6:  CLRF   51
23D8:  CLRF   52
23DA:  CLRF   53
23DC:  CLRF   54
23DE:  CLRF   55
23E0:  MOVLW  04
23E2:  MOVWF  56
23E4:  CLRF   5A
23E6:  CLRF   59
23E8:  CLRF   5C
23EA:  CLRF   5B
23EC:  CLRF   xB0
23EE:  CLRF   xAF
23F0:  CLRF   xAE
23F2:  CLRF   xAD
23F4:  CLRF   xB4
23F6:  CLRF   xB3
23F8:  CLRF   xB2
23FA:  CLRF   xB1
23FC:  CLRF   xB8
23FE:  CLRF   xB7
2400:  CLRF   xB6
2402:  CLRF   xB5
2404:  CLRF   xBC
2406:  CLRF   xBB
2408:  CLRF   xBA
240A:  CLRF   xB9
240C:  CLRF   xC0
240E:  CLRF   xBF
2410:  CLRF   xBE
2412:  MOVLW  80
2414:  MOVWF  xBD
2416:  BSF    2B.3
2418:  BCF    2B.4
241A:  CLRF   xC2
241C:  CLRF   xC1
241E:  CLRF   xC4
2420:  CLRF   xC3
2422:  CLRF   xC6
2424:  CLRF   xC5
2426:  CLRF   xC8
2428:  CLRF   xC7
242A:  CLRF   xCA
242C:  CLRF   xC9
242E:  CLRF   xCC
2430:  CLRF   xCB
2432:  BCF    2B.5
2434:  BCF    2B.6
2436:  CLRF   xCE
2438:  CLRF   xCD
243A:  CLRF   xCF
243C:  CLRF   xD0
243E:  CLRF   xD4
2440:  CLRF   xD3
2442:  CLRF   xD2
2444:  CLRF   xD1
2446:  CLRF   xD8
2448:  CLRF   xD7
244A:  CLRF   xD6
244C:  CLRF   xD5
244E:  CLRF   xE2
2450:  CLRF   xE1
2452:  MOVF   FC1,W
2454:  ANDLW  C0
2456:  IORLW  0F
2458:  MOVWF  FC1
245A:  MOVLW  07
245C:  MOVWF  FB4
245E:  MOVLW  3E
2460:  MOVWF  46
2462:  MOVLW  20
2464:  MOVWF  47
2466:  MOVLW  5E
2468:  MOVWF  48
246A:  CLRF   49
246C:  CLRF   4A
246E:  CLRF   4B
2470:  CLRF   4C
2472:  CLRF   4D
2474:  CLRF   4E
2476:  CLRF   4F
2478:  CLRF   50
247A:  CLRF   5D
247C:  CLRF   5E
247E:  CLRF   5F
2480:  CLRF   x60
2482:  CLRF   x61
2484:  CLRF   x62
2486:  CLRF   x63
2488:  CLRF   x64
248A:  CLRF   x65
248C:  CLRF   x66
248E:  CLRF   x67
2490:  CLRF   x68
2492:  CLRF   x69
2494:  CLRF   x6A
2496:  CLRF   x6B
2498:  CLRF   x6C
249A:  CLRF   x6D
249C:  CLRF   x6E
249E:  CLRF   x6F
24A0:  CLRF   x70
24A2:  CLRF   x71
24A4:  CLRF   x72
24A6:  CLRF   x73
24A8:  CLRF   x74
24AA:  CLRF   x75
24AC:  CLRF   x76
24AE:  CLRF   x77
24B0:  CLRF   x78
24B2:  CLRF   x79
24B4:  CLRF   x7A
24B6:  CLRF   x7B
24B8:  CLRF   x7C
24BA:  CLRF   x7D
24BC:  CLRF   x7E
24BE:  CLRF   x7F
24C0:  CLRF   x80
24C2:  CLRF   x81
24C4:  CLRF   x82
24C6:  CLRF   x83
24C8:  CLRF   x84
24CA:  CLRF   x85
24CC:  CLRF   x86
24CE:  CLRF   x87
24D0:  CLRF   x88
24D2:  CLRF   x89
24D4:  CLRF   x8A
24D6:  CLRF   x8B
24D8:  CLRF   x8C
24DA:  CLRF   x8D
24DC:  CLRF   x8E
24DE:  CLRF   x8F
24E0:  CLRF   x90
24E2:  CLRF   x91
24E4:  CLRF   x92
24E6:  CLRF   x93
24E8:  CLRF   x94
24EA:  CLRF   x95
24EC:  CLRF   x96
24EE:  CLRF   x97
24F0:  CLRF   x98
24F2:  CLRF   x99
24F4:  CLRF   x9A
24F6:  CLRF   x9B
24F8:  CLRF   x9C
24FA:  CLRF   x9D
24FC:  CLRF   x9E
24FE:  CLRF   x9F
2500:  CLRF   xA0
2502:  CLRF   xA1
2504:  CLRF   xA2
2506:  CLRF   xA3
2508:  CLRF   xA4
250A:  CLRF   xA5
250C:  CLRF   xA6
250E:  CLRF   xA7
2510:  CLRF   xA8
2512:  CLRF   xA9
2514:  CLRF   xAA
2516:  CLRF   xAB
2518:  CLRF   xAC
....................    Motor_off; 
251A:  BCF    F8B.2
251C:  BCF    F94.2
....................    Motor2_off; 
251E:  BCF    F8B.1
2520:  BCF    F94.1
....................    ConfigInterrupciones(); 
2522:  GOTO   0A3C
....................    MensajeBienvenida(); 
2526:  GOTO   0B5E
....................    LeeEEPROM();  
252A:  GOTO   0BFA
....................    LimitaValores(); 
252E:  GOTO   0F3E
....................    Motor_off; 
2532:  BCF    F8B.2
2534:  BCF    F94.2
....................    Motor2_off; 
2536:  BCF    F8B.1
2538:  BCF    F94.1
.................... /*    
....................    if(UP && DOWN){ 
....................       delay_ms(500); 
....................       if(UP && DOWN){ 
....................          lcd_gotoxy(1,1); 
....................          printf(lcd_putc,"Cargando..."); 
....................          delay_ms(500); 
....................          printf(lcd_putc,"\f"); 
....................          for(;;){ 
....................             leeControlRemoto(); 
....................             lcd_gotoxy(1,1); 
....................             printf(lcd_putc,"Codigo Subir: %X   ",CodigoSubir); 
....................             lcd_gotoxy(1,2); 
....................             printf(lcd_putc,"Codigo Bajar: %X   ",CodigoBajar); 
....................             lcd_gotoxy(1,3); 
....................             printf(lcd_putc,"Codigo Detener: %X ",CodigoDetener); 
....................             lcd_gotoxy(1,4); 
....................             printf(lcd_putc,"Codigo:%X %X %X %X",BYTE_IR[0],BYTE_IR[1],BYTE_IR[2],BYTE_IR[3]); 
....................              
....................             if(UP){ 
....................                delay_ms(500); 
....................                if(UP){ 
....................                   codigoSubir=BYTE_IR[3]; 
....................                   write_eeprom(15,codigoSubir); 
....................                   delay_ms(20); 
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
....................                } 
....................             } 
....................              
....................             if(DOWN){ 
....................                delay_ms(500); 
....................                if(DOWN){ 
....................                   codigoBajar=BYTE_IR[3]; 
....................                   write_eeprom(16,codigoBajar); 
....................                   delay_ms(20); 
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
....................                } 
....................             } 
....................              
....................             if(RIGHT){ 
....................                delay_ms(500); 
....................                if(RIGHT){ 
....................                   codigoDetener=BYTE_IR[3]; 
....................                   write_eeprom(17,codigoDetener); 
....................                   delay_ms(20); 
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
....................                } 
....................             } 
....................              
....................             if(IZQU){ 
....................                delay_ms(500); 
....................                if(IZQU){ 
....................                   reset_cpu(); 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
....................    */ 
....................    while(true){ 
....................    //leeControlRemoto(); 
....................     
....................    if(VelMotor==6){ 
253A:  MOVF   xD0,W
253C:  SUBLW  06
253E:  BNZ   254C
....................       Motor_on; 
2540:  BSF    F8B.2
2542:  BCF    F94.2
....................       Motor2_on;  
2544:  BSF    F8B.1
2546:  BCF    F94.1
....................       set_timer0(0); 
2548:  CLRF   FD7
254A:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
254C:  MOVF   xD0,F
254E:  BNZ   255C
....................       Motor_off; 
2550:  BCF    F8B.2
2552:  BCF    F94.2
....................       Motor2_off;  
2554:  BCF    F8B.1
2556:  BCF    F94.1
....................       set_timer0(0); 
2558:  CLRF   FD7
255A:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
255C:  MOVF   2C,F
255E:  BTFSS  FD8.2
2560:  BRA    296C
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2562:  MOVLW  01
2564:  MOVWF  xFA
2566:  MOVWF  xFB
2568:  CALL   0A78
....................          printf(lcd_putc,"     Ingrese        "); 
256C:  MOVLW  AA
256E:  MOVWF  FF6
2570:  MOVLW  03
2572:  MOVWF  FF7
2574:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
2578:  MOVLW  01
257A:  MOVWF  xFA
257C:  MOVLW  02
257E:  MOVWF  xFB
2580:  CALL   0A78
....................          printf(lcd_putc,"    Contraseña      "); 
2584:  MOVLW  C0
2586:  MOVWF  FF6
2588:  MOVLW  03
258A:  MOVWF  FF7
258C:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
2590:  MOVLW  01
2592:  MOVWF  xFA
2594:  MOVLW  03
2596:  MOVWF  xFB
2598:  CALL   0A78
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
259C:  MOVLW  D6
259E:  MOVWF  FF6
25A0:  MOVLW  03
25A2:  MOVWF  FF7
25A4:  MOVLW  0A
25A6:  MOVWF  xEC
25A8:  CALL   12F4
25AC:  MOVFF  49,E8
25B0:  MOVLW  1F
25B2:  MOVWF  xE9
25B4:  CALL   133C
25B8:  MOVFF  4A,E8
25BC:  MOVLW  1F
25BE:  MOVWF  xE9
25C0:  CALL   133C
25C4:  MOVFF  4B,E8
25C8:  MOVLW  1F
25CA:  MOVWF  xE9
25CC:  CALL   133C
25D0:  MOVFF  4C,E8
25D4:  MOVLW  1F
25D6:  MOVWF  xE9
25D8:  CALL   133C
25DC:  MOVLW  20
25DE:  MOVWF  xF9
25E0:  CALL   0AE0
25E4:  MOVLW  20
25E6:  MOVWF  xF9
25E8:  CALL   0AE0
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
25EC:  MOVFF  2F,FA
25F0:  MOVLW  04
25F2:  MOVWF  xFB
25F4:  CALL   0A78
....................          lcd_putc(t[2]); 
25F8:  MOVFF  48,F9
25FC:  CALL   0AE0
....................           
....................          if(unidad>11&&unidad<14){ 
2600:  MOVF   2F,W
2602:  SUBLW  0B
2604:  BC    2624
2606:  MOVF   2F,W
2608:  SUBLW  0D
260A:  BNC   2624
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
260C:  MOVLW  01
260E:  SUBWF  2F,W
2610:  MOVWF  xE8
2612:  MOVWF  xFA
2614:  MOVLW  04
2616:  MOVWF  xFB
2618:  CALL   0A78
....................             lcd_putc(t[1]); 
261C:  MOVFF  47,F9
2620:  CALL   0AE0
....................          } 
....................           
....................          Cambio=OFF; 
2624:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2626:  BSF    F92.5
2628:  BTFSC  F80.5
262A:  BRA    265E
....................          delay_ms(20); 
262C:  MOVLW  14
262E:  MOVWF  xFF
2630:  CALL   0940
....................          if(UP){ 
2634:  BSF    F92.5
2636:  BTFSC  F80.5
2638:  BRA    265C
....................             if(Flanco == 0) { 
263A:  BTFSC  29.3
263C:  BRA    265C
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
263E:  MOVLW  0B
2640:  SUBWF  2F,W
2642:  CLRF   03
2644:  ADDLW  49
2646:  MOVWF  FE9
2648:  MOVLW  00
264A:  ADDWFC 03,W
264C:  MOVWF  FEA
264E:  INCF   FEF,F
2650:  BSF    29.3
2652:  MOVLW  1E
2654:  MOVWF  xFF
2656:  CALL   0940
265A:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
265C:  BRA    2660
....................          Flanco = 0; 
265E:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2660:  BSF    F96.0
2662:  BTFSC  F84.0
2664:  BRA    2698
....................          delay_ms(20); 
2666:  MOVLW  14
2668:  MOVWF  xFF
266A:  CALL   0940
....................          if(DOWN){ 
266E:  BSF    F96.0
2670:  BTFSC  F84.0
2672:  BRA    2696
....................             if(Flanco2 == 0) { 
2674:  BTFSC  29.5
2676:  BRA    2696
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2678:  MOVLW  0B
267A:  SUBWF  2F,W
267C:  CLRF   03
267E:  ADDLW  49
2680:  MOVWF  FE9
2682:  MOVLW  00
2684:  ADDWFC 03,W
2686:  MOVWF  FEA
2688:  DECF   FEF,F
268A:  BSF    29.5
268C:  MOVLW  1E
268E:  MOVWF  xFF
2690:  CALL   0940
2694:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2696:  BRA    269A
....................          Flanco2 = 0; 
2698:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
269A:  BSF    F96.1
269C:  BTFSC  F84.1
269E:  BRA    26CA
....................          delay_ms(20); 
26A0:  MOVLW  14
26A2:  MOVWF  xFF
26A4:  CALL   0940
....................          if(RIGHT){ 
26A8:  BSF    F96.1
26AA:  BTFSC  F84.1
26AC:  BRA    26C8
....................             if(Flanco1 == 0) { 
26AE:  BTFSC  29.4
26B0:  BRA    26C8
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
26B2:  BSF    29.4
26B4:  INCF   2F,F
26B6:  MOVLW  1E
26B8:  MOVWF  xFF
26BA:  CALL   0940
26BE:  MOVLW  0C
26C0:  MOVWF  xF9
26C2:  CALL   0AE0
26C6:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
26C8:  BRA    26CC
....................          Flanco1 = 0; 
26CA:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
26CC:  BSF    F96.2
26CE:  BTFSC  F84.2
26D0:  BRA    26FC
....................          delay_ms(150); 
26D2:  MOVLW  96
26D4:  MOVWF  xFF
26D6:  CALL   0940
....................          if(IZQU){ 
26DA:  BSF    F96.2
26DC:  BTFSC  F84.2
26DE:  BRA    26FA
....................             if(Flanco3 == 0){ 
26E0:  BTFSC  29.6
26E2:  BRA    26FA
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
26E4:  BSF    29.6
26E6:  DECF   2F,F
26E8:  MOVLW  1E
26EA:  MOVWF  xFF
26EC:  CALL   0940
26F0:  MOVLW  0C
26F2:  MOVWF  xF9
26F4:  CALL   0AE0
26F8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
26FA:  BRA    26FE
....................         Flanco3 = 0; 
26FC:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
26FE:  MOVLW  0B
2700:  SUBWF  2F,W
2702:  CLRF   03
2704:  ADDLW  49
2706:  MOVWF  FE9
2708:  MOVLW  00
270A:  ADDWFC 03,W
270C:  MOVWF  FEA
270E:  BTFSC  FEF.7
2710:  BRA    2714
2712:  BRA    2728
....................          clave[unidad-11]=9; 
2714:  MOVLW  0B
2716:  SUBWF  2F,W
2718:  CLRF   03
271A:  ADDLW  49
271C:  MOVWF  FE9
271E:  MOVLW  00
2720:  ADDWFC 03,W
2722:  MOVWF  FEA
2724:  MOVLW  09
2726:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2728:  MOVLW  0B
272A:  SUBWF  2F,W
272C:  CLRF   03
272E:  ADDLW  49
2730:  MOVWF  FE9
2732:  MOVLW  00
2734:  ADDWFC 03,W
2736:  MOVWF  FEA
2738:  BTFSC  FEF.7
273A:  BRA    2754
273C:  MOVF   FEF,W
273E:  SUBLW  09
2740:  BC    2754
....................          clave[unidad-11]=0; 
2742:  MOVLW  0B
2744:  SUBWF  2F,W
2746:  CLRF   03
2748:  ADDLW  49
274A:  MOVWF  FE9
274C:  MOVLW  00
274E:  ADDWFC 03,W
2750:  MOVWF  FEA
2752:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2754:  MOVF   2F,W
2756:  SUBLW  0A
2758:  BNC   275E
....................          unidad=11; 
275A:  MOVLW  0B
275C:  MOVWF  2F
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
275E:  MOVF   2F,W
2760:  SUBLW  0E
2762:  BTFSC  FD8.0
2764:  BRA    296C
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
2766:  MOVF   49,W
2768:  SUBLW  03
276A:  BNZ   284E
276C:  MOVF   4A,W
276E:  SUBLW  08
2770:  BNZ   284E
2772:  MOVF   4B,W
2774:  SUBLW  09
2776:  BNZ   284E
2778:  MOVF   4C,W
277A:  SUBLW  02
277C:  BNZ   284E
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
277E:  CLRF   FA9
2780:  CLRF   FA8
2782:  BCF    FA6.6
2784:  BCF    FA6.7
2786:  BSF    FA6.2
2788:  MOVF   FF2,W
278A:  MOVWF  00
278C:  BCF    FF2.6
278E:  BCF    FF2.7
2790:  MOVLB  F
2792:  MOVLW  55
2794:  MOVWF  FA7
2796:  MOVLW  AA
2798:  MOVWF  FA7
279A:  BSF    FA6.1
279C:  BTFSC  FA6.1
279E:  BRA    279C
27A0:  BCF    FA6.2
27A2:  MOVF   00,W
27A4:  IORWF  FF2,F
27A6:  MOVLW  14
27A8:  MOVLB  0
27AA:  MOVWF  xFF
27AC:  CALL   0940
27B0:  MOVLW  01
27B2:  MOVWF  FA9
27B4:  CLRF   FA8
27B6:  BCF    FA6.6
27B8:  BCF    FA6.7
27BA:  BSF    FA6.2
27BC:  MOVF   FF2,W
27BE:  MOVWF  00
27C0:  BCF    FF2.6
27C2:  BCF    FF2.7
27C4:  MOVLB  F
27C6:  MOVLW  55
27C8:  MOVWF  FA7
27CA:  MOVLW  AA
27CC:  MOVWF  FA7
27CE:  BSF    FA6.1
27D0:  BTFSC  FA6.1
27D2:  BRA    27D0
27D4:  BCF    FA6.2
27D6:  MOVF   00,W
27D8:  IORWF  FF2,F
27DA:  MOVLW  14
27DC:  MOVLB  0
27DE:  MOVWF  xFF
27E0:  CALL   0940
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
27E4:  MOVLW  02
27E6:  MOVWF  FA9
27E8:  CLRF   FA8
27EA:  BCF    FA6.6
27EC:  BCF    FA6.7
27EE:  BSF    FA6.2
27F0:  MOVF   FF2,W
27F2:  MOVWF  00
27F4:  BCF    FF2.6
27F6:  BCF    FF2.7
27F8:  MOVLB  F
27FA:  MOVLW  55
27FC:  MOVWF  FA7
27FE:  MOVLW  AA
2800:  MOVWF  FA7
2802:  BSF    FA6.1
2804:  BTFSC  FA6.1
2806:  BRA    2804
2808:  BCF    FA6.2
280A:  MOVF   00,W
280C:  IORWF  FF2,F
280E:  MOVLW  14
2810:  MOVLB  0
2812:  MOVWF  xFF
2814:  CALL   0940
2818:  MOVLW  03
281A:  MOVWF  FA9
281C:  CLRF   FA8
281E:  BCF    FA6.6
2820:  BCF    FA6.7
2822:  BSF    FA6.2
2824:  MOVF   FF2,W
2826:  MOVWF  00
2828:  BCF    FF2.6
282A:  BCF    FF2.7
282C:  MOVLB  F
282E:  MOVLW  55
2830:  MOVWF  FA7
2832:  MOVLW  AA
2834:  MOVWF  FA7
2836:  BSF    FA6.1
2838:  BTFSC  FA6.1
283A:  BRA    2838
283C:  BCF    FA6.2
283E:  MOVF   00,W
2840:  IORWF  FF2,F
2842:  MOVLW  14
2844:  MOVLB  0
2846:  MOVWF  xFF
2848:  CALL   0940
....................              reset_cpu(); 
284C:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
284E:  MOVF   4D,W
2850:  SUBWF  49,W
2852:  BNZ   28F2
2854:  MOVF   4E,W
2856:  SUBWF  4A,W
2858:  BNZ   28F2
285A:  MOVF   4F,W
285C:  SUBWF  4B,W
285E:  BNZ   28F2
2860:  MOVF   50,W
2862:  SUBWF  4C,W
2864:  BNZ   28F2
....................             lcd_gotoxy(1,1); 
2866:  MOVLW  01
2868:  MOVWF  xFA
286A:  MOVWF  xFB
286C:  CALL   0A78
....................             printf(lcd_putc,"                   "); 
2870:  MOVLW  EC
2872:  MOVWF  FF6
2874:  MOVLW  03
2876:  MOVWF  FF7
2878:  CALL   0B3E
....................             lcd_gotoxy(1,2); 
287C:  MOVLW  01
287E:  MOVWF  xFA
2880:  MOVLW  02
2882:  MOVWF  xFB
2884:  CALL   0A78
....................             printf(lcd_putc,"     Contraseña    "); 
2888:  MOVLW  00
288A:  MOVWF  FF6
288C:  MOVLW  04
288E:  MOVWF  FF7
2890:  CALL   0B3E
....................             lcd_gotoxy(1,3); 
2894:  MOVLW  01
2896:  MOVWF  xFA
2898:  MOVLW  03
289A:  MOVWF  xFB
289C:  CALL   0A78
....................             printf(lcd_putc,"      Correcta     "); 
28A0:  MOVLW  14
28A2:  MOVWF  FF6
28A4:  MOVLW  04
28A6:  MOVWF  FF7
28A8:  CALL   0B3E
....................             lcd_gotoxy(1,4); 
28AC:  MOVLW  01
28AE:  MOVWF  xFA
28B0:  MOVLW  04
28B2:  MOVWF  xFB
28B4:  CALL   0A78
....................             printf(lcd_putc,"                   "); 
28B8:  MOVLW  28
28BA:  MOVWF  FF6
28BC:  MOVLW  04
28BE:  MOVWF  FF7
28C0:  CALL   0B3E
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
28C4:  MOVLW  04
28C6:  MOVWF  xE8
28C8:  MOVLW  FA
28CA:  MOVWF  xFF
28CC:  CALL   0940
28D0:  DECFSZ xE8,F
28D2:  BRA    28C8
28D4:  MOVLW  32
28D6:  MOVWF  2C
28D8:  MOVLW  0B
28DA:  MOVWF  2F
28DC:  MOVLW  0C
28DE:  MOVWF  xF9
28E0:  CALL   0AE0
28E4:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
28E6:  CLRF   49
28E8:  CLRF   4A
28EA:  CLRF   4B
28EC:  CLRF   4C
28EE:  BSF    2B.3
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
28F0:  BRA    296C
....................             lcd_gotoxy(1,1); 
28F2:  MOVLW  01
28F4:  MOVWF  xFA
28F6:  MOVWF  xFB
28F8:  CALL   0A78
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
28FC:  MOVLW  01
28FE:  MOVWF  xFA
2900:  MOVLW  02
2902:  MOVWF  xFB
2904:  CALL   0A78
....................             printf(lcd_putc,"     Contraseña    "); 
2908:  MOVLW  3C
290A:  MOVWF  FF6
290C:  MOVLW  04
290E:  MOVWF  FF7
2910:  CALL   0B3E
....................             lcd_gotoxy(1,3); 
2914:  MOVLW  01
2916:  MOVWF  xFA
2918:  MOVLW  03
291A:  MOVWF  xFB
291C:  CALL   0A78
....................             printf(lcd_putc,"     Incorrecta    "); 
2920:  MOVLW  50
2922:  MOVWF  FF6
2924:  MOVLW  04
2926:  MOVWF  FF7
2928:  CALL   0B3E
....................             lcd_gotoxy(1,4); 
292C:  MOVLW  01
292E:  MOVWF  xFA
2930:  MOVLW  04
2932:  MOVWF  xFB
2934:  CALL   0A78
....................             printf(lcd_putc,"                   "); 
2938:  MOVLW  64
293A:  MOVWF  FF6
293C:  MOVLW  04
293E:  MOVWF  FF7
2940:  CALL   0B3E
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2944:  MOVLW  04
2946:  MOVWF  xE8
2948:  MOVLW  FA
294A:  MOVWF  xFF
294C:  CALL   0940
2950:  DECFSZ xE8,F
2952:  BRA    2948
2954:  MOVLW  0B
2956:  MOVWF  2F
2958:  MOVLW  0C
295A:  MOVWF  xF9
295C:  CALL   0AE0
2960:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2962:  CLRF   49
2964:  CLRF   4A
2966:  CLRF   4B
2968:  CLRF   4C
296A:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
296C:  DECFSZ 2C,W
296E:  BRA    2BA6
....................       EliminaRuido(); 
2970:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2974:  MOVLW  01
2976:  MOVWF  xFA
2978:  MOVWF  xFB
297A:  CALL   0A78
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
297E:  MOVLW  78
2980:  MOVWF  FF6
2982:  MOVLW  04
2984:  MOVWF  FF7
2986:  CALL   0B3E
....................          mensajes(1+paso,2); 
298A:  MOVLW  01
298C:  ADDWF  45,W
298E:  MOVWF  xE8
2990:  MOVWF  xE9
2992:  MOVLW  02
2994:  MOVWF  xEA
2996:  CALL   140C
....................          mensajes(2+paso,3); 
299A:  MOVLW  02
299C:  ADDWF  45,W
299E:  MOVWF  xE8
29A0:  MOVWF  xE9
29A2:  MOVLW  03
29A4:  MOVWF  xEA
29A6:  CALL   140C
....................          mensajes(3+paso,4); 
29AA:  MOVLW  03
29AC:  ADDWF  45,W
29AE:  MOVWF  xE8
29B0:  MOVWF  xE9
29B2:  MOVLW  04
29B4:  MOVWF  xEA
29B6:  CALL   140C
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
29BA:  MOVLW  01
29BC:  MOVWF  xFA
29BE:  MOVFF  30,FB
29C2:  CALL   0A78
....................         lcd_putc(t[0]); 
29C6:  MOVFF  46,F9
29CA:  CALL   0AE0
....................  
....................         if(Flecha==2) 
29CE:  MOVF   30,W
29D0:  SUBLW  02
29D2:  BNZ   29FC
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
29D4:  MOVLW  01
29D6:  MOVWF  xFA
29D8:  MOVLW  04
29DA:  MOVWF  xFB
29DC:  CALL   0A78
....................             lcd_putc(t[1]); 
29E0:  MOVFF  47,F9
29E4:  CALL   0AE0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
29E8:  MOVLW  01
29EA:  MOVWF  xFA
29EC:  MOVLW  03
29EE:  MOVWF  xFB
29F0:  CALL   0A78
....................             lcd_putc(t[1]); 
29F4:  MOVFF  47,F9
29F8:  CALL   0AE0
....................           } 
....................          
....................         if(Flecha==4) 
29FC:  MOVF   30,W
29FE:  SUBLW  04
2A00:  BNZ   2A2A
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2A02:  MOVLW  01
2A04:  MOVWF  xFA
2A06:  MOVLW  02
2A08:  MOVWF  xFB
2A0A:  CALL   0A78
....................             lcd_putc(t[1]); 
2A0E:  MOVFF  47,F9
2A12:  CALL   0AE0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2A16:  MOVLW  01
2A18:  MOVWF  xFA
2A1A:  MOVLW  03
2A1C:  MOVWF  xFB
2A1E:  CALL   0A78
....................             lcd_putc(t[1]); 
2A22:  MOVFF  47,F9
2A26:  CALL   0AE0
....................           } 
....................          
....................         if(Flecha==3) 
2A2A:  MOVF   30,W
2A2C:  SUBLW  03
2A2E:  BNZ   2A58
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2A30:  MOVLW  01
2A32:  MOVWF  xFA
2A34:  MOVLW  04
2A36:  MOVWF  xFB
2A38:  CALL   0A78
....................             lcd_putc(t[1]); 
2A3C:  MOVFF  47,F9
2A40:  CALL   0AE0
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2A44:  MOVLW  01
2A46:  MOVWF  xFA
2A48:  MOVLW  02
2A4A:  MOVWF  xFB
2A4C:  CALL   0A78
....................             lcd_putc(t[1]); 
2A50:  MOVFF  47,F9
2A54:  CALL   0AE0
....................           } 
....................          Cambio=OFF; 
2A58:  BCF    2B.3
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
2A5A:  BSF    F92.5
2A5C:  BTFSC  F80.5
2A5E:  BRA    2A8A
....................          delay_ms(20); 
2A60:  MOVLW  14
2A62:  MOVWF  xFF
2A64:  CALL   0940
....................          if(UP){ 
2A68:  BSF    F92.5
2A6A:  BTFSC  F80.5
2A6C:  BRA    2A88
....................             if(Flanco == 0){ 
2A6E:  BTFSC  29.3
2A70:  BRA    2A88
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
2A72:  DECF   32,F
2A74:  DECF   30,F
2A76:  MOVLW  01
2A78:  ADDWF  30,W
2A7A:  MOVWF  31
2A7C:  BSF    29.3
2A7E:  MOVLW  1E
2A80:  MOVWF  xFF
2A82:  CALL   0940
2A86:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2A88:  BRA    2A8C
....................          Flanco = 0; 
2A8A:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2A8C:  BSF    F96.0
2A8E:  BTFSC  F84.0
2A90:  BRA    2ABC
....................          delay_ms(20); 
2A92:  MOVLW  14
2A94:  MOVWF  xFF
2A96:  CALL   0940
....................          if(DOWN){ 
2A9A:  BSF    F96.0
2A9C:  BTFSC  F84.0
2A9E:  BRA    2ABA
....................             if(Flanco2 == 0){ 
2AA0:  BTFSC  29.5
2AA2:  BRA    2ABA
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2AA4:  INCF   32,F
2AA6:  INCF   30,F
2AA8:  MOVLW  01
2AAA:  SUBWF  30,W
2AAC:  MOVWF  31
2AAE:  BSF    29.5
2AB0:  MOVLW  1E
2AB2:  MOVWF  xFF
2AB4:  CALL   0940
2AB8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2ABA:  BRA    2ABE
....................          Flanco2 = 0; 
2ABC:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
2ABE:  MOVF   32,W
2AC0:  SUBWF  34,W
2AC2:  BC    2AD4
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2AC4:  INCF   45,F
2AC6:  MOVFF  32,34
2ACA:  MOVLW  02
2ACC:  SUBWF  34,W
2ACE:  MOVWF  33
2AD0:  MOVLW  04
2AD2:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2AD4:  MOVF   33,W
2AD6:  SUBWF  32,W
2AD8:  BC    2AEA
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
2ADA:  DECF   45,F
2ADC:  MOVFF  32,33
2AE0:  MOVLW  02
2AE2:  ADDWF  33,W
2AE4:  MOVWF  34
2AE6:  MOVLW  02
2AE8:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
2AEA:  MOVF   32,W
2AEC:  SUBWF  2D,W
2AEE:  BC    2B02
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
2AF0:  MOVFF  2E,32
2AF4:  MOVLW  02
2AF6:  MOVWF  30
2AF8:  CLRF   45
2AFA:  MOVFF  32,33
2AFE:  ADDWF  33,W
2B00:  MOVWF  34
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
2B02:  MOVF   2E,W
2B04:  SUBWF  32,W
2B06:  BC    2B1E
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
2B08:  MOVFF  2D,32
2B0C:  MOVLW  04
2B0E:  MOVWF  30
2B10:  SUBWF  2D,W
2B12:  MOVWF  45
2B14:  MOVFF  32,34
2B18:  MOVLW  02
2B1A:  SUBWF  34,W
2B1C:  MOVWF  33
....................       } 
....................          
....................       if(paso<0) 
2B1E:  BTFSC  45.7
2B20:  BRA    2B24
2B22:  BRA    2B26
....................          paso=0; 
2B24:  CLRF   45
....................           
....................       if(RIGHT){// Si oprime derecha 
2B26:  BSF    F96.1
2B28:  BTFSC  F84.1
2B2A:  BRA    2B72
....................          delay_ms(20); 
2B2C:  MOVLW  14
2B2E:  MOVWF  xFF
2B30:  CALL   0940
....................          if(RIGHT){ 
2B34:  BSF    F96.1
2B36:  BTFSC  F84.1
2B38:  BRA    2B6E
....................             if(Flanco1 == 0){ 
2B3A:  BTFSC  29.4
2B3C:  BRA    2B6E
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2B3E:  BSF    29.4
2B40:  MOVFF  32,2C
2B44:  MOVLW  03
2B46:  MOVWF  30
2B48:  MOVLW  02
2B4A:  MOVWF  xE8
2B4C:  MOVLW  96
2B4E:  MOVWF  xFF
2B50:  CALL   0940
2B54:  DECFSZ xE8,F
2B56:  BRA    2B4C
2B58:  MOVLW  0C
2B5A:  MOVWF  xF9
2B5C:  CALL   0AE0
....................                if(Menu==6){ 
2B60:  MOVF   2C,W
2B62:  SUBLW  06
2B64:  BNZ   2B6E
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2B66:  CLRF   49
2B68:  CLRF   4A
2B6A:  CLRF   4B
2B6C:  CLRF   4C
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2B6E:  BSF    2B.3
....................       }else{ 
2B70:  BRA    2B74
....................         Flanco1 = 0; 
2B72:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
2B74:  BSF    F96.2
2B76:  BTFSC  F84.2
2B78:  BRA    2BA6
....................          delay_ms(20); 
2B7A:  MOVLW  14
2B7C:  MOVWF  xFF
2B7E:  CALL   0940
....................          if(IZQU){ 
2B82:  BSF    F96.2
2B84:  BTFSC  F84.2
2B86:  BRA    2BA6
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2B88:  MOVLW  02
2B8A:  MOVWF  xE8
2B8C:  MOVLW  FA
2B8E:  MOVWF  xFF
2B90:  CALL   0940
2B94:  DECFSZ xE8,F
2B96:  BRA    2B8C
2B98:  MOVLW  32
2B9A:  MOVWF  2C
2B9C:  MOVLW  0C
2B9E:  MOVWF  xF9
2BA0:  CALL   0AE0
2BA4:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2BA6:  MOVF   2C,W
2BA8:  SUBLW  02
2BAA:  BTFSS  FD8.2
2BAC:  BRA    2E06
....................    EliminaRuido(); 
2BAE:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2BB2:  MOVLW  01
2BB4:  MOVWF  xFA
2BB6:  MOVWF  xFB
2BB8:  CALL   0A78
....................       printf(lcd_putc,"    Temporizador     "); 
2BBC:  MOVLW  8E
2BBE:  MOVWF  FF6
2BC0:  MOVLW  04
2BC2:  MOVWF  FF7
2BC4:  CALL   0B3E
....................       lcd_gotoxy(1,2); 
2BC8:  MOVLW  01
2BCA:  MOVWF  xFA
2BCC:  MOVLW  02
2BCE:  MOVWF  xFB
2BD0:  CALL   0A78
....................       printf(lcd_putc,"       Luz UV        "); 
2BD4:  MOVLW  A4
2BD6:  MOVWF  FF6
2BD8:  MOVLW  04
2BDA:  MOVWF  FF7
2BDC:  CALL   0B3E
....................       lcd_gotoxy(6,3); 
2BE0:  MOVLW  06
2BE2:  MOVWF  xFA
2BE4:  MOVLW  03
2BE6:  MOVWF  xFB
2BE8:  CALL   0A78
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2BEC:  MOVFF  3D,E8
2BF0:  MOVLW  03
2BF2:  MOVWF  xE9
2BF4:  CALL   14E0
2BF8:  MOVLW  3A
2BFA:  MOVWF  xF9
2BFC:  CALL   0AE0
2C00:  MOVFF  3E,E8
2C04:  MOVLW  01
2C06:  MOVWF  xE9
2C08:  CALL   14E0
2C0C:  MOVLW  C3
2C0E:  MOVWF  FF6
2C10:  MOVLW  04
2C12:  MOVWF  FF7
2C14:  MOVLW  08
2C16:  MOVWF  xEC
2C18:  CALL   12F4
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2C1C:  MOVLW  06
2C1E:  ADDWF  42,W
2C20:  MOVWF  xE8
2C22:  MOVWF  xFA
2C24:  MOVLW  04
2C26:  MOVWF  xFB
2C28:  CALL   0A78
....................       lcd_putc(t[2]); 
2C2C:  MOVFF  48,F9
2C30:  CALL   0AE0
....................        
....................       Cambio=OFF; 
2C34:  BCF    2B.3
.................... //   } 
....................     
....................    if(UP) 
2C36:  BSF    F92.5
2C38:  BTFSC  F80.5
2C3A:  BRA    2C88
....................    { 
....................       delay_ms(20); 
2C3C:  MOVLW  14
2C3E:  MOVWF  xFF
2C40:  CALL   0940
....................       if(UP){ 
2C44:  BSF    F92.5
2C46:  BTFSC  F80.5
2C48:  BRA    2C88
....................          if(unidad2==1) 
2C4A:  DECFSZ 42,W
2C4C:  BRA    2C68
....................          { 
....................             if(tempo_minutos_pro<240) 
2C4E:  MOVF   3D,W
2C50:  SUBLW  EF
2C52:  BNC   2C68
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
2C54:  MOVLW  05
2C56:  ADDWF  3D,F
2C58:  MOVLW  02
2C5A:  MOVWF  xE8
2C5C:  MOVLW  96
2C5E:  MOVWF  xFF
2C60:  CALL   0940
2C64:  DECFSZ xE8,F
2C66:  BRA    2C5C
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2C68:  MOVF   42,W
2C6A:  SUBLW  04
2C6C:  BNZ   2C86
....................          { 
....................             if(tempo_segundos_pro<59) 
2C6E:  MOVF   3E,W
2C70:  SUBLW  3A
2C72:  BNC   2C86
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
2C74:  INCF   3E,F
2C76:  MOVLW  02
2C78:  MOVWF  xE8
2C7A:  MOVLW  96
2C7C:  MOVWF  xFF
2C7E:  CALL   0940
2C82:  DECFSZ xE8,F
2C84:  BRA    2C7A
....................             } 
....................          }      
....................       Cambio=ON; 
2C86:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2C88:  BSF    F96.0
2C8A:  BTFSC  F84.0
2C8C:  BRA    2CD6
....................    { 
....................       delay_ms(20); 
2C8E:  MOVLW  14
2C90:  MOVWF  xFF
2C92:  CALL   0940
....................       if(DOWN){ 
2C96:  BSF    F96.0
2C98:  BTFSC  F84.0
2C9A:  BRA    2CD6
....................          if(unidad2==1) 
2C9C:  DECFSZ 42,W
2C9E:  BRA    2CB8
....................          { 
....................             if(tempo_minutos_pro>0) 
2CA0:  MOVF   3D,F
2CA2:  BZ    2CB8
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
2CA4:  MOVLW  05
2CA6:  SUBWF  3D,F
2CA8:  MOVLW  02
2CAA:  MOVWF  xE8
2CAC:  MOVLW  96
2CAE:  MOVWF  xFF
2CB0:  CALL   0940
2CB4:  DECFSZ xE8,F
2CB6:  BRA    2CAC
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
2CB8:  MOVF   42,W
2CBA:  SUBLW  04
2CBC:  BNZ   2CD4
....................          { 
....................             if(tempo_segundos_pro>0) 
2CBE:  MOVF   3E,F
2CC0:  BZ    2CD4
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2CC2:  DECF   3E,F
2CC4:  MOVLW  02
2CC6:  MOVWF  xE8
2CC8:  MOVLW  96
2CCA:  MOVWF  xFF
2CCC:  CALL   0940
2CD0:  DECFSZ xE8,F
2CD2:  BRA    2CC8
....................             }    
....................          } 
....................       Cambio=ON; 
2CD4:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2CD6:  BSF    F96.1
2CD8:  BTFSC  F84.1
2CDA:  BRA    2D18
....................    { 
....................       delay_ms(20); 
2CDC:  MOVLW  14
2CDE:  MOVWF  xFF
2CE0:  CALL   0940
....................       if(RIGHT){ 
2CE4:  BSF    F96.1
2CE6:  BTFSC  F84.1
2CE8:  BRA    2D18
....................          if(unidad2==1) 
2CEA:  DECFSZ 42,W
2CEC:  BRA    2CF4
....................          { 
....................             unidad2=4; 
2CEE:  MOVLW  04
2CF0:  MOVWF  42
....................          } 
....................          else 
2CF2:  BRA    2CFE
....................          { 
....................             if(unidad2==4) 
2CF4:  MOVF   42,W
2CF6:  SUBLW  04
2CF8:  BNZ   2CFE
....................             { 
....................                unidad2=1; 
2CFA:  MOVLW  01
2CFC:  MOVWF  42
....................             } 
....................          } 
....................       delay_ms(500); 
2CFE:  MOVLW  02
2D00:  MOVWF  xE8
2D02:  MOVLW  FA
2D04:  MOVWF  xFF
2D06:  CALL   0940
2D0A:  DECFSZ xE8,F
2D0C:  BRA    2D02
....................       printf(lcd_putc,"\f"); 
2D0E:  MOVLW  0C
2D10:  MOVWF  xF9
2D12:  CALL   0AE0
....................       Cambio=ON; 
2D16:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(IZQU) 
2D18:  BSF    F96.2
2D1A:  BTFSC  F84.2
2D1C:  BRA    2E06
....................    { 
....................       if(IZQU){ 
2D1E:  BSF    F96.2
2D20:  BTFSC  F84.2
2D22:  BRA    2E06
....................          delay_ms(200); 
2D24:  MOVLW  C8
2D26:  MOVWF  xFF
2D28:  CALL   0940
....................          printf(lcd_putc,"\f"); 
2D2C:  MOVLW  0C
2D2E:  MOVWF  xF9
2D30:  CALL   0AE0
....................          lcd_gotoxy(1,2); 
2D34:  MOVLW  01
2D36:  MOVWF  xFA
2D38:  MOVLW  02
2D3A:  MOVWF  xFB
2D3C:  CALL   0A78
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2D40:  MOVLW  CC
2D42:  MOVWF  FF6
2D44:  MOVLW  04
2D46:  MOVWF  FF7
2D48:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
2D4C:  MOVLW  01
2D4E:  MOVWF  xFA
2D50:  MOVLW  03
2D52:  MOVWF  xFB
2D54:  CALL   0A78
....................          printf(lcd_putc,"  Correctamente  "); 
2D58:  MOVLW  DE
2D5A:  MOVWF  FF6
2D5C:  MOVLW  04
2D5E:  MOVWF  FF7
2D60:  CALL   0B3E
....................          write_eeprom(5,tempo_minutos_pro); 
2D64:  MOVLW  05
2D66:  MOVWF  FA9
2D68:  MOVFF  3D,FA8
2D6C:  BCF    FA6.6
2D6E:  BCF    FA6.7
2D70:  BSF    FA6.2
2D72:  MOVF   FF2,W
2D74:  MOVWF  00
2D76:  BCF    FF2.6
2D78:  BCF    FF2.7
2D7A:  MOVLB  F
2D7C:  MOVLW  55
2D7E:  MOVWF  FA7
2D80:  MOVLW  AA
2D82:  MOVWF  FA7
2D84:  BSF    FA6.1
2D86:  BTFSC  FA6.1
2D88:  BRA    2D86
2D8A:  BCF    FA6.2
2D8C:  MOVF   00,W
2D8E:  IORWF  FF2,F
....................          delay_ms(20); 
2D90:  MOVLW  14
2D92:  MOVLB  0
2D94:  MOVWF  xFF
2D96:  CALL   0940
....................          write_eeprom(6,tempo_segundos_pro); 
2D9A:  MOVLW  06
2D9C:  MOVWF  FA9
2D9E:  MOVFF  3E,FA8
2DA2:  BCF    FA6.6
2DA4:  BCF    FA6.7
2DA6:  BSF    FA6.2
2DA8:  MOVF   FF2,W
2DAA:  MOVWF  00
2DAC:  BCF    FF2.6
2DAE:  BCF    FF2.7
2DB0:  MOVLB  F
2DB2:  MOVLW  55
2DB4:  MOVWF  FA7
2DB6:  MOVLW  AA
2DB8:  MOVWF  FA7
2DBA:  BSF    FA6.1
2DBC:  BTFSC  FA6.1
2DBE:  BRA    2DBC
2DC0:  BCF    FA6.2
2DC2:  MOVF   00,W
2DC4:  IORWF  FF2,F
....................          delay_ms(20); 
2DC6:  MOVLW  14
2DC8:  MOVLB  0
2DCA:  MOVWF  xFF
2DCC:  CALL   0940
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2DD0:  MOVFF  3D,3B
2DD4:  MOVFF  3E,3C
....................          delay_ms(700); 
2DD8:  MOVLW  04
2DDA:  MOVWF  xE8
2DDC:  MOVLW  AF
2DDE:  MOVWF  xFF
2DE0:  CALL   0940
2DE4:  DECFSZ xE8,F
2DE6:  BRA    2DDC
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2DE8:  MOVLW  1E
2DEA:  MOVWF  xFF
2DEC:  CALL   0940
2DF0:  MOVLW  01
2DF2:  MOVWF  2C
2DF4:  CLRF   45
2DF6:  MOVLW  02
2DF8:  MOVWF  30
2DFA:  MOVWF  32
2DFC:  MOVLW  0C
2DFE:  MOVWF  xF9
2E00:  CALL   0AE0
....................          Cambio=ON; 
2E04:  BSF    2B.3
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2E06:  MOVF   2C,W
2E08:  SUBLW  03
2E0A:  BTFSS  FD8.2
2E0C:  BRA    3158
....................       EliminaRuido(); 
2E0E:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2E12:  MOVLW  01
2E14:  MOVWF  xFA
2E16:  MOVWF  xFB
2E18:  CALL   0A78
....................          printf(lcd_putc,"     Ingrese        "); 
2E1C:  MOVLW  F0
2E1E:  MOVWF  FF6
2E20:  MOVLW  04
2E22:  MOVWF  FF7
2E24:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
2E28:  MOVLW  01
2E2A:  MOVWF  xFA
2E2C:  MOVLW  02
2E2E:  MOVWF  xFB
2E30:  CALL   0A78
....................          printf(lcd_putc,"    Contraseña      "); 
2E34:  MOVLW  06
2E36:  MOVWF  FF6
2E38:  MOVLW  05
2E3A:  MOVWF  FF7
2E3C:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
2E40:  MOVLW  01
2E42:  MOVWF  xFA
2E44:  MOVLW  03
2E46:  MOVWF  xFB
2E48:  CALL   0A78
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2E4C:  MOVLW  1C
2E4E:  MOVWF  FF6
2E50:  MOVLW  05
2E52:  MOVWF  FF7
2E54:  MOVLW  0A
2E56:  MOVWF  xEC
2E58:  CALL   12F4
2E5C:  MOVFF  49,E8
2E60:  MOVLW  1F
2E62:  MOVWF  xE9
2E64:  CALL   133C
2E68:  MOVFF  4A,E8
2E6C:  MOVLW  1F
2E6E:  MOVWF  xE9
2E70:  CALL   133C
2E74:  MOVFF  4B,E8
2E78:  MOVLW  1F
2E7A:  MOVWF  xE9
2E7C:  CALL   133C
2E80:  MOVFF  4C,E8
2E84:  MOVLW  1F
2E86:  MOVWF  xE9
2E88:  CALL   133C
2E8C:  MOVLW  20
2E8E:  MOVWF  xF9
2E90:  CALL   0AE0
2E94:  MOVLW  20
2E96:  MOVWF  xF9
2E98:  CALL   0AE0
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2E9C:  MOVFF  2F,FA
2EA0:  MOVLW  04
2EA2:  MOVWF  xFB
2EA4:  CALL   0A78
....................          lcd_putc(t[2]); 
2EA8:  MOVFF  48,F9
2EAC:  CALL   0AE0
....................           
....................          if(unidad>11&&unidad<14){ 
2EB0:  MOVF   2F,W
2EB2:  SUBLW  0B
2EB4:  BC    2ED4
2EB6:  MOVF   2F,W
2EB8:  SUBLW  0D
2EBA:  BNC   2ED4
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2EBC:  MOVLW  01
2EBE:  SUBWF  2F,W
2EC0:  MOVWF  xE8
2EC2:  MOVWF  xFA
2EC4:  MOVLW  04
2EC6:  MOVWF  xFB
2EC8:  CALL   0A78
....................             lcd_putc(t[1]); 
2ECC:  MOVFF  47,F9
2ED0:  CALL   0AE0
....................          } 
....................           
....................          Cambio=OFF; 
2ED4:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2ED6:  BSF    F92.5
2ED8:  BTFSC  F80.5
2EDA:  BRA    2F0E
....................          delay_ms(20); 
2EDC:  MOVLW  14
2EDE:  MOVWF  xFF
2EE0:  CALL   0940
....................          if(UP){ 
2EE4:  BSF    F92.5
2EE6:  BTFSC  F80.5
2EE8:  BRA    2F0C
....................             if(Flanco == 0) { 
2EEA:  BTFSC  29.3
2EEC:  BRA    2F0C
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2EEE:  MOVLW  0B
2EF0:  SUBWF  2F,W
2EF2:  CLRF   03
2EF4:  ADDLW  49
2EF6:  MOVWF  FE9
2EF8:  MOVLW  00
2EFA:  ADDWFC 03,W
2EFC:  MOVWF  FEA
2EFE:  INCF   FEF,F
2F00:  BSF    29.3
2F02:  MOVLW  1E
2F04:  MOVWF  xFF
2F06:  CALL   0940
2F0A:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2F0C:  BRA    2F10
....................          Flanco = 0; 
2F0E:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2F10:  BSF    F96.0
2F12:  BTFSC  F84.0
2F14:  BRA    2F48
....................          delay_ms(20); 
2F16:  MOVLW  14
2F18:  MOVWF  xFF
2F1A:  CALL   0940
....................          if(DOWN){ 
2F1E:  BSF    F96.0
2F20:  BTFSC  F84.0
2F22:  BRA    2F46
....................             if(Flanco2 == 0) { 
2F24:  BTFSC  29.5
2F26:  BRA    2F46
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2F28:  MOVLW  0B
2F2A:  SUBWF  2F,W
2F2C:  CLRF   03
2F2E:  ADDLW  49
2F30:  MOVWF  FE9
2F32:  MOVLW  00
2F34:  ADDWFC 03,W
2F36:  MOVWF  FEA
2F38:  DECF   FEF,F
2F3A:  BSF    29.5
2F3C:  MOVLW  1E
2F3E:  MOVWF  xFF
2F40:  CALL   0940
2F44:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2F46:  BRA    2F4A
....................          Flanco2 = 0; 
2F48:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2F4A:  BSF    F96.1
2F4C:  BTFSC  F84.1
2F4E:  BRA    2F7A
....................          delay_ms(20); 
2F50:  MOVLW  14
2F52:  MOVWF  xFF
2F54:  CALL   0940
....................          if(RIGHT){ 
2F58:  BSF    F96.1
2F5A:  BTFSC  F84.1
2F5C:  BRA    2F78
....................             if(Flanco1 == 0) { 
2F5E:  BTFSC  29.4
2F60:  BRA    2F78
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F62:  BSF    29.4
2F64:  INCF   2F,F
2F66:  MOVLW  1E
2F68:  MOVWF  xFF
2F6A:  CALL   0940
2F6E:  MOVLW  0C
2F70:  MOVWF  xF9
2F72:  CALL   0AE0
2F76:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2F78:  BRA    2F7C
....................          Flanco1 = 0; 
2F7A:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2F7C:  BSF    F96.2
2F7E:  BTFSC  F84.2
2F80:  BRA    2FAC
....................          delay_ms(150); 
2F82:  MOVLW  96
2F84:  MOVWF  xFF
2F86:  CALL   0940
....................          if(IZQU){ 
2F8A:  BSF    F96.2
2F8C:  BTFSC  F84.2
2F8E:  BRA    2FAA
....................             if(Flanco3 == 0){ 
2F90:  BTFSC  29.6
2F92:  BRA    2FAA
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2F94:  BSF    29.6
2F96:  DECF   2F,F
2F98:  MOVLW  1E
2F9A:  MOVWF  xFF
2F9C:  CALL   0940
2FA0:  MOVLW  0C
2FA2:  MOVWF  xF9
2FA4:  CALL   0AE0
2FA8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2FAA:  BRA    2FAE
....................         Flanco3 = 0; 
2FAC:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2FAE:  MOVLW  0B
2FB0:  SUBWF  2F,W
2FB2:  CLRF   03
2FB4:  ADDLW  49
2FB6:  MOVWF  FE9
2FB8:  MOVLW  00
2FBA:  ADDWFC 03,W
2FBC:  MOVWF  FEA
2FBE:  BTFSC  FEF.7
2FC0:  BRA    2FC4
2FC2:  BRA    2FD8
....................          clave[unidad-11]=9; 
2FC4:  MOVLW  0B
2FC6:  SUBWF  2F,W
2FC8:  CLRF   03
2FCA:  ADDLW  49
2FCC:  MOVWF  FE9
2FCE:  MOVLW  00
2FD0:  ADDWFC 03,W
2FD2:  MOVWF  FEA
2FD4:  MOVLW  09
2FD6:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2FD8:  MOVLW  0B
2FDA:  SUBWF  2F,W
2FDC:  CLRF   03
2FDE:  ADDLW  49
2FE0:  MOVWF  FE9
2FE2:  MOVLW  00
2FE4:  ADDWFC 03,W
2FE6:  MOVWF  FEA
2FE8:  BTFSC  FEF.7
2FEA:  BRA    3004
2FEC:  MOVF   FEF,W
2FEE:  SUBLW  09
2FF0:  BC    3004
....................          clave[unidad-11]=0; 
2FF2:  MOVLW  0B
2FF4:  SUBWF  2F,W
2FF6:  CLRF   03
2FF8:  ADDLW  49
2FFA:  MOVWF  FE9
2FFC:  MOVLW  00
2FFE:  ADDWFC 03,W
3000:  MOVWF  FEA
3002:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3004:  MOVF   2F,W
3006:  SUBLW  0A
3008:  BNC   302A
....................          unidad=11; 
300A:  MOVLW  0B
300C:  MOVWF  2F
....................          Menu=1; 
300E:  MOVLW  01
3010:  MOVWF  2C
....................          paso=0; 
3012:  CLRF   45
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3014:  CLRF   49
3016:  CLRF   4A
3018:  CLRF   4B
301A:  CLRF   4C
301C:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
301E:  MOVLW  0B
3020:  MOVWF  2F
3022:  MOVLW  0C
3024:  MOVWF  xF9
3026:  CALL   0AE0
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
302A:  MOVF   2F,W
302C:  SUBLW  0E
302E:  BTFSC  FD8.0
3030:  BRA    3158
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
3032:  MOVF   4D,W
3034:  SUBWF  49,W
3036:  BNZ   30D4
3038:  MOVF   4E,W
303A:  SUBWF  4A,W
303C:  BNZ   30D4
303E:  MOVF   4F,W
3040:  SUBWF  4B,W
3042:  BNZ   30D4
3044:  MOVF   50,W
3046:  SUBWF  4C,W
3048:  BNZ   30D4
....................             lcd_gotoxy(1,1); 
304A:  MOVLW  01
304C:  MOVWF  xFA
304E:  MOVWF  xFB
3050:  CALL   0A78
....................             printf(lcd_putc,"                    "); 
3054:  MOVLW  32
3056:  MOVWF  FF6
3058:  MOVLW  05
305A:  MOVWF  FF7
305C:  CALL   0B3E
....................             lcd_gotoxy(1,2); 
3060:  MOVLW  01
3062:  MOVWF  xFA
3064:  MOVLW  02
3066:  MOVWF  xFB
3068:  CALL   0A78
....................             printf(lcd_putc,"     Contraseña     "); 
306C:  MOVLW  48
306E:  MOVWF  FF6
3070:  MOVLW  05
3072:  MOVWF  FF7
3074:  CALL   0B3E
....................             lcd_gotoxy(1,3); 
3078:  MOVLW  01
307A:  MOVWF  xFA
307C:  MOVLW  03
307E:  MOVWF  xFB
3080:  CALL   0A78
....................             printf(lcd_putc,"      Correcta      "); 
3084:  MOVLW  5E
3086:  MOVWF  FF6
3088:  MOVLW  05
308A:  MOVWF  FF7
308C:  CALL   0B3E
....................             lcd_gotoxy(1,4); 
3090:  MOVLW  01
3092:  MOVWF  xFA
3094:  MOVLW  04
3096:  MOVWF  xFB
3098:  CALL   0A78
....................             printf(lcd_putc,"                    "); 
309C:  MOVLW  74
309E:  MOVWF  FF6
30A0:  MOVLW  05
30A2:  MOVWF  FF7
30A4:  CALL   0B3E
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
30A8:  MOVLW  02
30AA:  MOVWF  xE8
30AC:  MOVLW  FA
30AE:  MOVWF  xFF
30B0:  CALL   0940
30B4:  DECFSZ xE8,F
30B6:  BRA    30AC
30B8:  MOVLW  3D
30BA:  MOVWF  2C
30BC:  MOVLW  0B
30BE:  MOVWF  2F
30C0:  MOVLW  0C
30C2:  MOVWF  xF9
30C4:  CALL   0AE0
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
30C8:  CLRF   49
30CA:  CLRF   4A
30CC:  CLRF   4B
30CE:  CLRF   4C
30D0:  BSF    2B.3
....................          }else{ 
30D2:  BRA    3158
....................             lcd_gotoxy(1,1); 
30D4:  MOVLW  01
30D6:  MOVWF  xFA
30D8:  MOVWF  xFB
30DA:  CALL   0A78
....................             printf(lcd_putc,"                    "); 
30DE:  MOVLW  8A
30E0:  MOVWF  FF6
30E2:  MOVLW  05
30E4:  MOVWF  FF7
30E6:  CALL   0B3E
....................             lcd_gotoxy(1,2); 
30EA:  MOVLW  01
30EC:  MOVWF  xFA
30EE:  MOVLW  02
30F0:  MOVWF  xFB
30F2:  CALL   0A78
....................             printf(lcd_putc,"     Contraseña     "); 
30F6:  MOVLW  A0
30F8:  MOVWF  FF6
30FA:  MOVLW  05
30FC:  MOVWF  FF7
30FE:  CALL   0B3E
....................             lcd_gotoxy(1,3); 
3102:  MOVLW  01
3104:  MOVWF  xFA
3106:  MOVLW  03
3108:  MOVWF  xFB
310A:  CALL   0A78
....................             printf(lcd_putc,"     Incorrecta     "); 
310E:  MOVLW  B6
3110:  MOVWF  FF6
3112:  MOVLW  05
3114:  MOVWF  FF7
3116:  CALL   0B3E
....................             lcd_gotoxy(1,4); 
311A:  MOVLW  01
311C:  MOVWF  xFA
311E:  MOVLW  04
3120:  MOVWF  xFB
3122:  CALL   0A78
....................             printf(lcd_putc,"                    "); 
3126:  MOVLW  CC
3128:  MOVWF  FF6
312A:  MOVLW  05
312C:  MOVWF  FF7
312E:  CALL   0B3E
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
3132:  MOVLW  02
3134:  MOVWF  xE8
3136:  MOVLW  FA
3138:  MOVWF  xFF
313A:  CALL   0940
313E:  DECFSZ xE8,F
3140:  BRA    3136
3142:  MOVLW  0B
3144:  MOVWF  2F
3146:  MOVLW  0C
3148:  MOVWF  xF9
314A:  CALL   0AE0
314E:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3150:  CLRF   49
3152:  CLRF   4A
3154:  CLRF   4B
3156:  CLRF   4C
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
3158:  MOVF   2C,W
315A:  SUBLW  3D
315C:  BTFSS  FD8.2
315E:  BRA    34F0
....................       EliminaRuido(); 
3160:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
3164:  MOVLW  01
3166:  MOVWF  xFA
3168:  MOVWF  xFB
316A:  CALL   0A78
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
316E:  MOVLW  E2
3170:  MOVWF  FF6
3172:  MOVLW  05
3174:  MOVWF  FF7
3176:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
317A:  MOVLW  01
317C:  MOVWF  xFA
317E:  MOVLW  02
3180:  MOVWF  xFB
3182:  CALL   0A78
....................          printf(lcd_putc,"     Contraseña     "); 
3186:  MOVLW  F8
3188:  MOVWF  FF6
318A:  MOVLW  05
318C:  MOVWF  FF7
318E:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
3192:  MOVLW  01
3194:  MOVWF  xFA
3196:  MOVLW  03
3198:  MOVWF  xFB
319A:  CALL   0A78
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
319E:  MOVLW  0E
31A0:  MOVWF  FF6
31A2:  MOVLW  06
31A4:  MOVWF  FF7
31A6:  MOVLW  0A
31A8:  MOVWF  xEC
31AA:  CALL   12F4
31AE:  MOVFF  49,E8
31B2:  MOVLW  1F
31B4:  MOVWF  xE9
31B6:  CALL   133C
31BA:  MOVFF  4A,E8
31BE:  MOVLW  1F
31C0:  MOVWF  xE9
31C2:  CALL   133C
31C6:  MOVFF  4B,E8
31CA:  MOVLW  1F
31CC:  MOVWF  xE9
31CE:  CALL   133C
31D2:  MOVFF  4C,E8
31D6:  MOVLW  1F
31D8:  MOVWF  xE9
31DA:  CALL   133C
31DE:  MOVLW  20
31E0:  MOVWF  xF9
31E2:  CALL   0AE0
31E6:  MOVLW  20
31E8:  MOVWF  xF9
31EA:  CALL   0AE0
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
31EE:  MOVFF  2F,FA
31F2:  MOVLW  04
31F4:  MOVWF  xFB
31F6:  CALL   0A78
....................          lcd_putc(t[2]); 
31FA:  MOVFF  48,F9
31FE:  CALL   0AE0
....................           
....................          if(unidad>11&&unidad<14){ 
3202:  MOVF   2F,W
3204:  SUBLW  0B
3206:  BC    3226
3208:  MOVF   2F,W
320A:  SUBLW  0D
320C:  BNC   3226
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
320E:  MOVLW  01
3210:  SUBWF  2F,W
3212:  MOVWF  xE8
3214:  MOVWF  xFA
3216:  MOVLW  04
3218:  MOVWF  xFB
321A:  CALL   0A78
....................             lcd_putc(t[1]); 
321E:  MOVFF  47,F9
3222:  CALL   0AE0
....................          } 
....................           
....................          Cambio=OFF; 
3226:  BCF    2B.3
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
3228:  BSF    F92.5
322A:  BTFSC  F80.5
322C:  BRA    3260
....................          delay_ms(20); 
322E:  MOVLW  14
3230:  MOVWF  xFF
3232:  CALL   0940
....................          if(UP){ 
3236:  BSF    F92.5
3238:  BTFSC  F80.5
323A:  BRA    325E
....................             if(Flanco == 0) { 
323C:  BTFSC  29.3
323E:  BRA    325E
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
3240:  MOVLW  0B
3242:  SUBWF  2F,W
3244:  CLRF   03
3246:  ADDLW  49
3248:  MOVWF  FE9
324A:  MOVLW  00
324C:  ADDWFC 03,W
324E:  MOVWF  FEA
3250:  INCF   FEF,F
3252:  BSF    29.3
3254:  MOVLW  1E
3256:  MOVWF  xFF
3258:  CALL   0940
325C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
325E:  BRA    3262
....................          Flanco = 0; 
3260:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3262:  BSF    F96.0
3264:  BTFSC  F84.0
3266:  BRA    329A
....................          delay_ms(20); 
3268:  MOVLW  14
326A:  MOVWF  xFF
326C:  CALL   0940
....................          if(DOWN){ 
3270:  BSF    F96.0
3272:  BTFSC  F84.0
3274:  BRA    3298
....................             if(Flanco2 == 0) { 
3276:  BTFSC  29.5
3278:  BRA    3298
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
327A:  MOVLW  0B
327C:  SUBWF  2F,W
327E:  CLRF   03
3280:  ADDLW  49
3282:  MOVWF  FE9
3284:  MOVLW  00
3286:  ADDWFC 03,W
3288:  MOVWF  FEA
328A:  DECF   FEF,F
328C:  BSF    29.5
328E:  MOVLW  1E
3290:  MOVWF  xFF
3292:  CALL   0940
3296:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3298:  BRA    329C
....................          Flanco2 = 0; 
329A:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
329C:  BSF    F96.1
329E:  BTFSC  F84.1
32A0:  BRA    32C4
....................          if(RIGHT){ 
32A2:  BSF    F96.1
32A4:  BTFSC  F84.1
32A6:  BRA    32C2
....................             if(Flanco1 == 0) { 
32A8:  BTFSC  29.4
32AA:  BRA    32C2
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
32AC:  BSF    29.4
32AE:  INCF   2F,F
32B0:  MOVLW  1E
32B2:  MOVWF  xFF
32B4:  CALL   0940
32B8:  MOVLW  0C
32BA:  MOVWF  xF9
32BC:  CALL   0AE0
32C0:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
32C2:  BRA    32C6
....................          Flanco1 = 0; 
32C4:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
32C6:  BSF    F96.2
32C8:  BTFSC  F84.2
32CA:  BRA    32F6
....................          delay_ms(150); 
32CC:  MOVLW  96
32CE:  MOVWF  xFF
32D0:  CALL   0940
....................          if(IZQU){ 
32D4:  BSF    F96.2
32D6:  BTFSC  F84.2
32D8:  BRA    32F4
....................             if(Flanco3 == 0){ 
32DA:  BTFSC  29.6
32DC:  BRA    32F4
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
32DE:  BSF    29.6
32E0:  DECF   2F,F
32E2:  MOVLW  1E
32E4:  MOVWF  xFF
32E6:  CALL   0940
32EA:  MOVLW  0C
32EC:  MOVWF  xF9
32EE:  CALL   0AE0
32F2:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
32F4:  BRA    32F8
....................         Flanco3 = 0; 
32F6:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
32F8:  MOVLW  0B
32FA:  SUBWF  2F,W
32FC:  CLRF   03
32FE:  ADDLW  49
3300:  MOVWF  FE9
3302:  MOVLW  00
3304:  ADDWFC 03,W
3306:  MOVWF  FEA
3308:  BTFSC  FEF.7
330A:  BRA    330E
330C:  BRA    3322
....................          clave[unidad-11]=9; 
330E:  MOVLW  0B
3310:  SUBWF  2F,W
3312:  CLRF   03
3314:  ADDLW  49
3316:  MOVWF  FE9
3318:  MOVLW  00
331A:  ADDWFC 03,W
331C:  MOVWF  FEA
331E:  MOVLW  09
3320:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
3322:  MOVLW  0B
3324:  SUBWF  2F,W
3326:  CLRF   03
3328:  ADDLW  49
332A:  MOVWF  FE9
332C:  MOVLW  00
332E:  ADDWFC 03,W
3330:  MOVWF  FEA
3332:  BTFSC  FEF.7
3334:  BRA    334E
3336:  MOVF   FEF,W
3338:  SUBLW  09
333A:  BC    334E
....................          clave[unidad-11]=0; 
333C:  MOVLW  0B
333E:  SUBWF  2F,W
3340:  CLRF   03
3342:  ADDLW  49
3344:  MOVWF  FE9
3346:  MOVLW  00
3348:  ADDWFC 03,W
334A:  MOVWF  FEA
334C:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
334E:  MOVF   2F,W
3350:  SUBLW  0A
3352:  BNC   3372
....................          unidad=11; 
3354:  MOVLW  0B
3356:  MOVWF  2F
....................          Menu=1; 
3358:  MOVLW  01
335A:  MOVWF  2C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
335C:  CLRF   49
335E:  CLRF   4A
3360:  CLRF   4B
3362:  CLRF   4C
3364:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
3366:  MOVLW  0B
3368:  MOVWF  2F
336A:  MOVLW  0C
336C:  MOVWF  xF9
336E:  CALL   0AE0
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
3372:  MOVF   2F,W
3374:  SUBLW  0E
3376:  BTFSC  FD8.0
3378:  BRA    34F0
....................          lcd_gotoxy(1,1); 
337A:  MOVLW  01
337C:  MOVWF  xFA
337E:  MOVWF  xFB
3380:  CALL   0A78
....................          printf(lcd_putc,"                    "); 
3384:  MOVLW  24
3386:  MOVWF  FF6
3388:  MOVLW  06
338A:  MOVWF  FF7
338C:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
3390:  MOVLW  01
3392:  MOVWF  xFA
3394:  MOVLW  02
3396:  MOVWF  xFB
3398:  CALL   0A78
....................          printf(lcd_putc,"     Contraseña     "); 
339C:  MOVLW  3A
339E:  MOVWF  FF6
33A0:  MOVLW  06
33A2:  MOVWF  FF7
33A4:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
33A8:  MOVLW  01
33AA:  MOVWF  xFA
33AC:  MOVLW  03
33AE:  MOVWF  xFB
33B0:  CALL   0A78
....................          printf(lcd_putc,"     Almacenada     "); 
33B4:  MOVLW  50
33B6:  MOVWF  FF6
33B8:  MOVLW  06
33BA:  MOVWF  FF7
33BC:  CALL   0B3E
....................          lcd_gotoxy(1,4); 
33C0:  MOVLW  01
33C2:  MOVWF  xFA
33C4:  MOVLW  04
33C6:  MOVWF  xFB
33C8:  CALL   0A78
....................          printf(lcd_putc,"                    "); 
33CC:  MOVLW  66
33CE:  MOVWF  FF6
33D0:  MOVLW  06
33D2:  MOVWF  FF7
33D4:  CALL   0B3E
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
33D8:  CLRF   FA9
33DA:  MOVFF  49,FA8
33DE:  BCF    FA6.6
33E0:  BCF    FA6.7
33E2:  BSF    FA6.2
33E4:  MOVF   FF2,W
33E6:  MOVWF  00
33E8:  BCF    FF2.6
33EA:  BCF    FF2.7
33EC:  MOVLB  F
33EE:  MOVLW  55
33F0:  MOVWF  FA7
33F2:  MOVLW  AA
33F4:  MOVWF  FA7
33F6:  BSF    FA6.1
33F8:  BTFSC  FA6.1
33FA:  BRA    33F8
33FC:  BCF    FA6.2
33FE:  MOVF   00,W
3400:  IORWF  FF2,F
3402:  MOVLW  14
3404:  MOVLB  0
3406:  MOVWF  xFF
3408:  CALL   0940
340C:  MOVLW  01
340E:  MOVWF  FA9
3410:  MOVFF  4A,FA8
3414:  BCF    FA6.6
3416:  BCF    FA6.7
3418:  BSF    FA6.2
341A:  MOVF   FF2,W
341C:  MOVWF  00
341E:  BCF    FF2.6
3420:  BCF    FF2.7
3422:  MOVLB  F
3424:  MOVLW  55
3426:  MOVWF  FA7
3428:  MOVLW  AA
342A:  MOVWF  FA7
342C:  BSF    FA6.1
342E:  BTFSC  FA6.1
3430:  BRA    342E
3432:  BCF    FA6.2
3434:  MOVF   00,W
3436:  IORWF  FF2,F
3438:  MOVLW  14
343A:  MOVLB  0
343C:  MOVWF  xFF
343E:  CALL   0940
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
3442:  MOVLW  02
3444:  MOVWF  FA9
3446:  MOVFF  4B,FA8
344A:  BCF    FA6.6
344C:  BCF    FA6.7
344E:  BSF    FA6.2
3450:  MOVF   FF2,W
3452:  MOVWF  00
3454:  BCF    FF2.6
3456:  BCF    FF2.7
3458:  MOVLB  F
345A:  MOVLW  55
345C:  MOVWF  FA7
345E:  MOVLW  AA
3460:  MOVWF  FA7
3462:  BSF    FA6.1
3464:  BTFSC  FA6.1
3466:  BRA    3464
3468:  BCF    FA6.2
346A:  MOVF   00,W
346C:  IORWF  FF2,F
346E:  MOVLW  14
3470:  MOVLB  0
3472:  MOVWF  xFF
3474:  CALL   0940
3478:  MOVLW  03
347A:  MOVWF  FA9
347C:  MOVFF  4C,FA8
3480:  BCF    FA6.6
3482:  BCF    FA6.7
3484:  BSF    FA6.2
3486:  MOVF   FF2,W
3488:  MOVWF  00
348A:  BCF    FF2.6
348C:  BCF    FF2.7
348E:  MOVLB  F
3490:  MOVLW  55
3492:  MOVWF  FA7
3494:  MOVLW  AA
3496:  MOVWF  FA7
3498:  BSF    FA6.1
349A:  BTFSC  FA6.1
349C:  BRA    349A
349E:  BCF    FA6.2
34A0:  MOVF   00,W
34A2:  IORWF  FF2,F
34A4:  MOVLW  14
34A6:  MOVLB  0
34A8:  MOVWF  xFF
34AA:  CALL   0940
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
34AE:  MOVLW  02
34B0:  MOVWF  xE8
34B2:  MOVLW  FA
34B4:  MOVWF  xFF
34B6:  CALL   0940
34BA:  DECFSZ xE8,F
34BC:  BRA    34B2
34BE:  MOVLW  01
34C0:  MOVWF  2C
34C2:  CLRF   45
34C4:  MOVLW  02
34C6:  MOVWF  30
34C8:  MOVWF  32
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
34CA:  MOVFF  49,4D
34CE:  MOVFF  4A,4E
34D2:  MOVFF  4B,4F
34D6:  MOVFF  4C,50
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
34DA:  CLRF   49
34DC:  CLRF   4A
34DE:  CLRF   4B
34E0:  CLRF   4C
34E2:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f");          
34E4:  MOVLW  0B
34E6:  MOVWF  2F
34E8:  MOVLW  0C
34EA:  MOVWF  xF9
34EC:  CALL   0AE0
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
34F0:  MOVF   2C,W
34F2:  SUBLW  04
34F4:  BTFSS  FD8.2
34F6:  BRA    3712
....................    EliminaRuido(); 
34F8:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
34FC:  MOVLW  01
34FE:  MOVWF  xFA
3500:  MOVWF  xFB
3502:  CALL   0A78
....................       printf(lcd_putc,"  Duracion Actual   "); 
3506:  MOVLW  7C
3508:  MOVWF  FF6
350A:  MOVLW  06
350C:  MOVWF  FF7
350E:  CALL   0B3E
....................       lcd_gotoxy(1,2); 
3512:  MOVLW  01
3514:  MOVWF  xFA
3516:  MOVLW  02
3518:  MOVWF  xFB
351A:  CALL   0A78
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
351E:  MOVLW  92
3520:  MOVWF  FF6
3522:  MOVLW  06
3524:  MOVWF  FF7
3526:  MOVLW  0B
3528:  MOVWF  xEC
352A:  CALL   12F4
352E:  MOVLW  08
3530:  MOVWF  FE9
3532:  MOVFF  5A,E9
3536:  MOVFF  59,E8
353A:  GOTO   154C
353E:  MOVLW  20
3540:  MOVWF  xF9
3542:  CALL   0AE0
3546:  MOVLW  20
3548:  MOVWF  xF9
354A:  CALL   0AE0
354E:  MOVLW  20
3550:  MOVWF  xF9
3552:  CALL   0AE0
....................       lcd_gotoxy(1,4); 
3556:  MOVLW  01
3558:  MOVWF  xFA
355A:  MOVLW  04
355C:  MOVWF  xFB
355E:  CALL   0A78
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3562:  MOVLW  A6
3564:  MOVWF  FF6
3566:  MOVLW  06
3568:  MOVWF  FF7
356A:  CALL   0B3E
....................        
....................       Cambio=OFF; 
356E:  BCF    2B.3
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3570:  BSF    F92.5
3572:  BTFSC  F80.5
3574:  BRA    36CE
3576:  BSF    F96.1
3578:  BTFSC  F84.1
357A:  BRA    36CE
....................          delay_ms(20); 
357C:  MOVLW  14
357E:  MOVWF  xFF
3580:  CALL   0940
....................          if(UP && RIGHT){ 
3584:  BSF    F92.5
3586:  BTFSC  F80.5
3588:  BRA    36CE
358A:  BSF    F96.1
358C:  BTFSC  F84.1
358E:  BRA    36CE
....................             delay_ms(200); 
3590:  MOVLW  C8
3592:  MOVWF  xFF
3594:  CALL   0940
....................             printf(lcd_putc,"\f"); 
3598:  MOVLW  0C
359A:  MOVWF  xF9
359C:  CALL   0AE0
....................             lcd_gotoxy(1,2); 
35A0:  MOVLW  01
35A2:  MOVWF  xFA
35A4:  MOVLW  02
35A6:  MOVWF  xFB
35A8:  CALL   0A78
....................             printf(lcd_putc," Reset de tiempo "); 
35AC:  MOVLW  BC
35AE:  MOVWF  FF6
35B0:  MOVLW  06
35B2:  MOVWF  FF7
35B4:  CALL   0B3E
....................             lcd_gotoxy(1,3); 
35B8:  MOVLW  01
35BA:  MOVWF  xFA
35BC:  MOVLW  03
35BE:  MOVWF  xFB
35C0:  CALL   0A78
....................             printf(lcd_putc,"     Exitoso     "); 
35C4:  MOVLW  CE
35C6:  MOVWF  FF6
35C8:  MOVLW  06
35CA:  MOVWF  FF7
35CC:  CALL   0B3E
....................             write_eeprom(7,0); 
35D0:  MOVLW  07
35D2:  MOVWF  FA9
35D4:  CLRF   FA8
35D6:  BCF    FA6.6
35D8:  BCF    FA6.7
35DA:  BSF    FA6.2
35DC:  MOVF   FF2,W
35DE:  MOVWF  00
35E0:  BCF    FF2.6
35E2:  BCF    FF2.7
35E4:  MOVLB  F
35E6:  MOVLW  55
35E8:  MOVWF  FA7
35EA:  MOVLW  AA
35EC:  MOVWF  FA7
35EE:  BSF    FA6.1
35F0:  BTFSC  FA6.1
35F2:  BRA    35F0
35F4:  BCF    FA6.2
35F6:  MOVF   00,W
35F8:  IORWF  FF2,F
....................             delay_ms(20); 
35FA:  MOVLW  14
35FC:  MOVLB  0
35FE:  MOVWF  xFF
3600:  CALL   0940
....................             write_eeprom(8,0); 
3604:  MOVLW  08
3606:  MOVWF  FA9
3608:  CLRF   FA8
360A:  BCF    FA6.6
360C:  BCF    FA6.7
360E:  BSF    FA6.2
3610:  MOVF   FF2,W
3612:  MOVWF  00
3614:  BCF    FF2.6
3616:  BCF    FF2.7
3618:  MOVLB  F
361A:  MOVLW  55
361C:  MOVWF  FA7
361E:  MOVLW  AA
3620:  MOVWF  FA7
3622:  BSF    FA6.1
3624:  BTFSC  FA6.1
3626:  BRA    3624
3628:  BCF    FA6.2
362A:  MOVF   00,W
362C:  IORWF  FF2,F
....................             delay_ms(20); 
362E:  MOVLW  14
3630:  MOVLB  0
3632:  MOVWF  xFF
3634:  CALL   0940
....................             write_eeprom(9,0); 
3638:  MOVLW  09
363A:  MOVWF  FA9
363C:  CLRF   FA8
363E:  BCF    FA6.6
3640:  BCF    FA6.7
3642:  BSF    FA6.2
3644:  MOVF   FF2,W
3646:  MOVWF  00
3648:  BCF    FF2.6
364A:  BCF    FF2.7
364C:  MOVLB  F
364E:  MOVLW  55
3650:  MOVWF  FA7
3652:  MOVLW  AA
3654:  MOVWF  FA7
3656:  BSF    FA6.1
3658:  BTFSC  FA6.1
365A:  BRA    3658
365C:  BCF    FA6.2
365E:  MOVF   00,W
3660:  IORWF  FF2,F
....................             delay_ms(20); 
3662:  MOVLW  14
3664:  MOVLB  0
3666:  MOVWF  xFF
3668:  CALL   0940
....................             write_eeprom(10,0); 
366C:  MOVLW  0A
366E:  MOVWF  FA9
3670:  CLRF   FA8
3672:  BCF    FA6.6
3674:  BCF    FA6.7
3676:  BSF    FA6.2
3678:  MOVF   FF2,W
367A:  MOVWF  00
367C:  BCF    FF2.6
367E:  BCF    FF2.7
3680:  MOVLB  F
3682:  MOVLW  55
3684:  MOVWF  FA7
3686:  MOVLW  AA
3688:  MOVWF  FA7
368A:  BSF    FA6.1
368C:  BTFSC  FA6.1
368E:  BRA    368C
3690:  BCF    FA6.2
3692:  MOVF   00,W
3694:  IORWF  FF2,F
....................             delay_ms(700); 
3696:  MOVLW  04
3698:  MOVLB  0
369A:  MOVWF  xE8
369C:  MOVLW  AF
369E:  MOVWF  xFF
36A0:  CALL   0940
36A4:  DECFSZ xE8,F
36A6:  BRA    369C
....................             segundos=0;minutos=0;horas=0; 
36A8:  CLRF   35
36AA:  CLRF   36
36AC:  CLRF   5A
36AE:  CLRF   59
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
36B0:  MOVLW  1E
36B2:  MOVWF  xFF
36B4:  CALL   0940
36B8:  MOVLW  01
36BA:  MOVWF  2C
36BC:  CLRF   45
36BE:  MOVLW  02
36C0:  MOVWF  30
36C2:  MOVWF  32
36C4:  MOVLW  0C
36C6:  MOVWF  xF9
36C8:  CALL   0AE0
....................             Cambio=ON; 
36CC:  BSF    2B.3
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
36CE:  BSF    F96.2
36D0:  BTFSC  F84.2
36D2:  BRA    3710
....................          delay_ms(20); 
36D4:  MOVLW  14
36D6:  MOVWF  xFF
36D8:  CALL   0940
....................          if(IZQU){ 
36DC:  BSF    F96.2
36DE:  BTFSC  F84.2
36E0:  BRA    370E
....................             if(Flanco3 == 0){ 
36E2:  BTFSC  29.6
36E4:  BRA    370E
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
36E6:  BSF    29.6
36E8:  MOVLW  02
36EA:  MOVWF  xE8
36EC:  MOVLW  FA
36EE:  MOVWF  xFF
36F0:  CALL   0940
36F4:  DECFSZ xE8,F
36F6:  BRA    36EC
36F8:  MOVLW  01
36FA:  MOVWF  2C
36FC:  CLRF   45
36FE:  MOVLW  02
3700:  MOVWF  30
3702:  MOVWF  32
3704:  MOVLW  0C
3706:  MOVWF  xF9
3708:  CALL   0AE0
370C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
370E:  BRA    3712
....................          Flanco3 = 0; 
3710:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
3712:  MOVF   2C,W
3714:  SUBLW  05
3716:  BTFSS  FD8.2
3718:  BRA    3976
....................       EliminaRuido(); 
371A:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
371E:  MOVLW  01
3720:  MOVWF  xFA
3722:  MOVWF  xFB
3724:  CALL   0A78
....................          printf(lcd_putc,"  Zero Point Config "); 
3728:  MOVLW  E0
372A:  MOVWF  FF6
372C:  MOVLW  06
372E:  MOVWF  FF7
3730:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
3734:  MOVLW  01
3736:  MOVWF  xFA
3738:  MOVLW  02
373A:  MOVWF  xFB
373C:  CALL   0A78
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
3740:  MOVLW  05
3742:  MOVWF  xE8
3744:  CALL   1A4A
3748:  MOVFF  00,E8
374C:  MOVFF  01,E9
3750:  MOVFF  02,EA
3754:  MOVFF  03,EB
3758:  MOVFF  03,FF
375C:  MOVFF  02,FE
3760:  MOVFF  01,FD
3764:  MOVFF  00,FC
3768:  MOVLW  D7
376A:  MOVLB  1
376C:  MOVWF  x03
376E:  MOVLW  A3
3770:  MOVWF  x02
3772:  CLRF   x01
3774:  MOVLW  81
3776:  MOVWF  x00
3778:  MOVLB  0
377A:  CALL   1C04
377E:  MOVFF  00,E8
3782:  MOVFF  01,E9
3786:  MOVFF  02,EA
378A:  MOVFF  03,EB
378E:  MOVLW  F6
3790:  MOVWF  FF6
3792:  MOVLW  06
3794:  MOVWF  FF7
3796:  MOVLW  09
3798:  MOVWF  xEC
379A:  CALL   12F4
379E:  MOVLW  02
37A0:  MOVWF  FE9
37A2:  MOVFF  EB,EF
37A6:  MOVFF  EA,EE
37AA:  MOVFF  E9,ED
37AE:  MOVFF  E8,EC
37B2:  MOVWF  xF0
37B4:  CALL   1E24
37B8:  MOVLW  04
37BA:  MOVWF  FF6
37BC:  MOVLW  07
37BE:  MOVWF  FF7
37C0:  MOVLW  07
37C2:  MOVWF  xEC
37C4:  CALL   12F4
....................          lcd_gotoxy(1,3); 
37C8:  MOVLW  01
37CA:  MOVWF  xFA
37CC:  MOVLW  03
37CE:  MOVWF  xFB
37D0:  CALL   0A78
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
37D4:  CLRF   xF9
37D6:  CALL   1602
37DA:  MOVFF  00,E8
37DE:  MOVFF  01,E9
37E2:  MOVFF  02,EA
37E6:  MOVFF  03,EB
37EA:  MOVLW  0C
37EC:  MOVWF  FF6
37EE:  MOVLW  07
37F0:  MOVWF  FF7
37F2:  MOVLW  08
37F4:  MOVWF  xEC
37F6:  CALL   12F4
37FA:  MOVLW  01
37FC:  MOVWF  FE9
37FE:  MOVFF  EB,EF
3802:  MOVFF  EA,EE
3806:  MOVFF  E9,ED
380A:  MOVFF  E8,EC
380E:  CLRF   xF0
3810:  CALL   1E24
....................          lcd_gotoxy(1,4); 
3814:  MOVLW  01
3816:  MOVWF  xFA
3818:  MOVLW  04
381A:  MOVWF  xFB
381C:  CALL   0A78
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
3820:  MOVLW  1A
3822:  MOVWF  FF6
3824:  MOVLW  07
3826:  MOVWF  FF7
3828:  MOVLW  07
382A:  MOVWF  xEC
382C:  CALL   12F4
3830:  MOVLW  01
3832:  MOVWF  FE9
3834:  MOVFF  C0,EF
3838:  MOVFF  BF,EE
383C:  MOVFF  BE,ED
3840:  MOVFF  BD,EC
3844:  CLRF   xF0
3846:  CALL   1E24
....................           
....................          Cambio=OFF; 
384A:  BCF    2B.3
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
384C:  BSF    F96.1
384E:  BTFSC  F84.1
3850:  BRA    3936
....................          delay_ms(20); 
3852:  MOVLW  14
3854:  MOVWF  xFF
3856:  CALL   0940
....................          if(RIGHT){ 
385A:  BSF    F96.1
385C:  BTFSC  F84.1
385E:  BRA    3934
....................             if(Flanco1 == 0){ 
3860:  BTFSC  29.4
3862:  BRA    3934
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
3864:  MOVLW  01
3866:  MOVWF  2C
3868:  CLRF   45
386A:  MOVLW  02
386C:  MOVWF  30
386E:  MOVWF  32
3870:  MOVLW  0B
3872:  MOVWF  2F
3874:  MOVLW  02
3876:  MOVWF  xE8
3878:  MOVLW  FA
387A:  MOVWF  xFF
387C:  CALL   0940
3880:  DECFSZ xE8,F
3882:  BRA    3878
3884:  MOVLW  0C
3886:  MOVWF  xF9
3888:  CALL   0AE0
....................                G=sensores(0); 
388C:  CLRF   xF9
388E:  CALL   1602
3892:  MOVFF  03,C0
3896:  MOVFF  02,BF
389A:  MOVFF  01,BE
389E:  MOVFF  00,BD
....................                G16=(int16)G; 
38A2:  MOVFF  C0,FF
38A6:  MOVFF  BF,FE
38AA:  MOVFF  BE,FD
38AE:  MOVFF  BD,FC
38B2:  CALL   1FB2
38B6:  MOVFF  02,5C
38BA:  MOVFF  01,5B
....................                G_l=G16; G_h=(G16>>8); 
38BE:  MOVFF  5B,39
38C2:  MOVFF  5C,3A
....................                 
....................                write_eeprom(11,G_l); 
38C6:  MOVLW  0B
38C8:  MOVWF  FA9
38CA:  MOVFF  39,FA8
38CE:  BCF    FA6.6
38D0:  BCF    FA6.7
38D2:  BSF    FA6.2
38D4:  MOVF   FF2,W
38D6:  MOVWF  00
38D8:  BCF    FF2.6
38DA:  BCF    FF2.7
38DC:  MOVLB  F
38DE:  MOVLW  55
38E0:  MOVWF  FA7
38E2:  MOVLW  AA
38E4:  MOVWF  FA7
38E6:  BSF    FA6.1
38E8:  BTFSC  FA6.1
38EA:  BRA    38E8
38EC:  BCF    FA6.2
38EE:  MOVF   00,W
38F0:  IORWF  FF2,F
....................                delay_ms(20); 
38F2:  MOVLW  14
38F4:  MOVLB  0
38F6:  MOVWF  xFF
38F8:  CALL   0940
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
38FC:  MOVLW  0C
38FE:  MOVWF  FA9
3900:  MOVFF  3A,FA8
3904:  BCF    FA6.6
3906:  BCF    FA6.7
3908:  BSF    FA6.2
390A:  MOVF   FF2,W
390C:  MOVWF  00
390E:  BCF    FF2.6
3910:  BCF    FF2.7
3912:  MOVLB  F
3914:  MOVLW  55
3916:  MOVWF  FA7
3918:  MOVLW  AA
391A:  MOVWF  FA7
391C:  BSF    FA6.1
391E:  BTFSC  FA6.1
3920:  BRA    391E
3922:  BCF    FA6.2
3924:  MOVF   00,W
3926:  IORWF  FF2,F
....................                delay_ms(20); 
3928:  MOVLW  14
392A:  MOVLB  0
392C:  MOVWF  xFF
392E:  CALL   0940
....................                Cambio=ON; 
3932:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3934:  BRA    3938
....................          Flanco1 = 0; 
3936:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3938:  BSF    F96.2
393A:  BTFSC  F84.2
393C:  BRA    3974
....................          delay_ms(20); 
393E:  MOVLW  14
3940:  MOVWF  xFF
3942:  CALL   0940
....................          if(IZQU){ 
3946:  BSF    F96.2
3948:  BTFSC  F84.2
394A:  BRA    3972
....................             if(Flanco3 == 0){ 
394C:  BTFSC  29.6
394E:  BRA    3972
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3950:  MOVLW  01
3952:  MOVWF  2C
3954:  CLRF   45
3956:  MOVLW  02
3958:  MOVWF  30
395A:  MOVWF  32
395C:  MOVLW  0B
395E:  MOVWF  2F
3960:  MOVLW  1E
3962:  MOVWF  xFF
3964:  CALL   0940
3968:  MOVLW  0C
396A:  MOVWF  xF9
396C:  CALL   0AE0
....................                Cambio=ON; 
3970:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3972:  BRA    3976
....................          Flanco3 = 0; 
3974:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
3976:  MOVF   2C,W
3978:  SUBLW  06
397A:  BTFSS  FD8.2
397C:  BRA    3AA6
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
397E:  BTG    2A.4
3980:  BSF    29.4
3982:  MOVLW  01
3984:  MOVWF  2C
3986:  CLRF   45
....................                        
....................             if(estadoalarma==1) 
3988:  BTFSS  2A.4
398A:  BRA    39EC
....................             {estadoalarma=1; 
398C:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
398E:  MOVLW  01
3990:  MOVWF  xFA
3992:  MOVWF  xFB
3994:  CALL   0A78
....................                printf(lcd_putc,"                    "); 
3998:  MOVLW  28
399A:  MOVWF  FF6
399C:  MOVLW  07
399E:  MOVWF  FF7
39A0:  CALL   0B3E
....................                lcd_gotoxy(1,2); 
39A4:  MOVLW  01
39A6:  MOVWF  xFA
39A8:  MOVLW  02
39AA:  MOVWF  xFB
39AC:  CALL   0A78
....................                printf(lcd_putc,"        Activo      "); 
39B0:  MOVLW  3E
39B2:  MOVWF  FF6
39B4:  MOVLW  07
39B6:  MOVWF  FF7
39B8:  CALL   0B3E
....................                lcd_gotoxy(1,3); 
39BC:  MOVLW  01
39BE:  MOVWF  xFA
39C0:  MOVLW  03
39C2:  MOVWF  xFB
39C4:  CALL   0A78
....................                printf(lcd_putc,"        Alarma      "); 
39C8:  MOVLW  54
39CA:  MOVWF  FF6
39CC:  MOVLW  07
39CE:  MOVWF  FF7
39D0:  CALL   0B3E
....................                lcd_gotoxy(1,4); 
39D4:  MOVLW  01
39D6:  MOVWF  xFA
39D8:  MOVLW  04
39DA:  MOVWF  xFB
39DC:  CALL   0A78
....................                printf(lcd_putc,"                    ");} 
39E0:  MOVLW  6A
39E2:  MOVWF  FF6
39E4:  MOVLW  07
39E6:  MOVWF  FF7
39E8:  CALL   0B3E
....................                 
....................             if(estadoalarma==0) 
39EC:  BTFSC  2A.4
39EE:  BRA    3A50
....................             {estadoalarma=0; 
39F0:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
39F2:  MOVLW  01
39F4:  MOVWF  xFA
39F6:  MOVWF  xFB
39F8:  CALL   0A78
....................                printf(lcd_putc,"                    "); 
39FC:  MOVLW  80
39FE:  MOVWF  FF6
3A00:  MOVLW  07
3A02:  MOVWF  FF7
3A04:  CALL   0B3E
....................                lcd_gotoxy(1,2); 
3A08:  MOVLW  01
3A0A:  MOVWF  xFA
3A0C:  MOVLW  02
3A0E:  MOVWF  xFB
3A10:  CALL   0A78
....................                printf(lcd_putc,"      Desactivo     "); 
3A14:  MOVLW  96
3A16:  MOVWF  FF6
3A18:  MOVLW  07
3A1A:  MOVWF  FF7
3A1C:  CALL   0B3E
....................                lcd_gotoxy(1,3); 
3A20:  MOVLW  01
3A22:  MOVWF  xFA
3A24:  MOVLW  03
3A26:  MOVWF  xFB
3A28:  CALL   0A78
....................                printf(lcd_putc,"       Alarma       "); 
3A2C:  MOVLW  AC
3A2E:  MOVWF  FF6
3A30:  MOVLW  07
3A32:  MOVWF  FF7
3A34:  CALL   0B3E
....................                lcd_gotoxy(1,4); 
3A38:  MOVLW  01
3A3A:  MOVWF  xFA
3A3C:  MOVLW  04
3A3E:  MOVWF  xFB
3A40:  CALL   0A78
....................                printf(lcd_putc,"                    ");} 
3A44:  MOVLW  C2
3A46:  MOVWF  FF6
3A48:  MOVLW  07
3A4A:  MOVWF  FF7
3A4C:  CALL   0B3E
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3A50:  MOVLW  00
3A52:  BTFSC  2A.4
3A54:  MOVLW  01
3A56:  MOVWF  xE8
3A58:  MOVLW  04
3A5A:  MOVWF  FA9
3A5C:  MOVFF  E8,FA8
3A60:  BCF    FA6.6
3A62:  BCF    FA6.7
3A64:  BSF    FA6.2
3A66:  MOVF   FF2,W
3A68:  MOVWF  00
3A6A:  BCF    FF2.6
3A6C:  BCF    FF2.7
3A6E:  MOVLB  F
3A70:  MOVLW  55
3A72:  MOVWF  FA7
3A74:  MOVLW  AA
3A76:  MOVWF  FA7
3A78:  BSF    FA6.1
3A7A:  BTFSC  FA6.1
3A7C:  BRA    3A7A
3A7E:  BCF    FA6.2
3A80:  MOVF   00,W
3A82:  IORWF  FF2,F
3A84:  MOVLW  04
3A86:  MOVLB  0
3A88:  MOVWF  xE8
3A8A:  MOVLW  FA
3A8C:  MOVWF  xFF
3A8E:  CALL   0940
3A92:  DECFSZ xE8,F
3A94:  BRA    3A8A
3A96:  MOVLW  02
3A98:  MOVWF  30
3A9A:  MOVWF  32
3A9C:  MOVLW  0C
3A9E:  MOVWF  xF9
3AA0:  CALL   0AE0
....................             Cambio=ON; 
3AA4:  BSF    2B.3
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
3AA6:  MOVF   2C,W
3AA8:  SUBLW  07
3AAA:  BTFSS  FD8.2
3AAC:  BRA    3C44
....................       if(Vel1>6) 
3AAE:  MOVF   56,W
3AB0:  SUBLW  06
3AB2:  BC    3AB8
....................          Vel1=6; 
3AB4:  MOVLW  06
3AB6:  MOVWF  56
....................       if(Vel1<1) 
3AB8:  MOVF   56,F
3ABA:  BNZ   3AC0
....................          Vel1=1; 
3ABC:  MOVLW  01
3ABE:  MOVWF  56
....................        
....................       lcd_gotoxy(1,1); 
3AC0:  MOVLW  01
3AC2:  MOVWF  xFA
3AC4:  MOVWF  xFB
3AC6:  CALL   0A78
....................       printf(lcd_putc,"Seleccione Velocidad"); 
3ACA:  MOVLW  D8
3ACC:  MOVWF  FF6
3ACE:  MOVLW  07
3AD0:  MOVWF  FF7
3AD2:  CALL   0B3E
....................       lcd_gotoxy(1,2); 
3AD6:  MOVLW  01
3AD8:  MOVWF  xFA
3ADA:  MOVLW  02
3ADC:  MOVWF  xFB
3ADE:  CALL   0A78
....................       printf(lcd_putc,"   del Ventilador   "); 
3AE2:  MOVLW  EE
3AE4:  MOVWF  FF6
3AE6:  MOVLW  07
3AE8:  MOVWF  FF7
3AEA:  CALL   0B3E
....................       lcd_gotoxy(1,3); 
3AEE:  MOVLW  01
3AF0:  MOVWF  xFA
3AF2:  MOVLW  03
3AF4:  MOVWF  xFB
3AF6:  CALL   0A78
....................       printf(lcd_putc,"     Vel: %u       ",Vel1); 
3AFA:  MOVLW  04
3AFC:  MOVWF  FF6
3AFE:  MOVLW  08
3B00:  MOVWF  FF7
3B02:  MOVLW  0A
3B04:  MOVWF  xEC
3B06:  CALL   12F4
3B0A:  MOVFF  56,E8
3B0E:  MOVLW  1B
3B10:  MOVWF  xE9
3B12:  CALL   14E0
3B16:  MOVLW  10
3B18:  MOVWF  FF6
3B1A:  MOVLW  08
3B1C:  MOVWF  FF7
3B1E:  MOVLW  07
3B20:  MOVWF  xEC
3B22:  CALL   12F4
....................       lcd_gotoxy(1,4); 
3B26:  MOVLW  01
3B28:  MOVWF  xFA
3B2A:  MOVLW  04
3B2C:  MOVWF  xFB
3B2E:  CALL   0A78
....................       printf(lcd_putc,"                    ");       
3B32:  MOVLW  18
3B34:  MOVWF  FF6
3B36:  MOVLW  08
3B38:  MOVWF  FF7
3B3A:  CALL   0B3E
....................        
....................       if(UP && Vel1<6)//Si oprime hacia arriba 
3B3E:  BSF    F92.5
3B40:  BTFSC  F80.5
3B42:  BRA    3B54
3B44:  MOVF   56,W
3B46:  SUBLW  05
3B48:  BNC   3B54
....................       {   
....................          delay_ms(200);Vel1++; 
3B4A:  MOVLW  C8
3B4C:  MOVWF  xFF
3B4E:  CALL   0940
3B52:  INCF   56,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
3B54:  BSF    F96.0
3B56:  BTFSC  F84.0
3B58:  BRA    3B68
3B5A:  MOVF   56,F
3B5C:  BZ    3B68
....................       {   
....................          delay_ms(200);Vel1--; 
3B5E:  MOVLW  C8
3B60:  MOVWF  xFF
3B62:  CALL   0940
3B66:  DECF   56,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
3B68:  BSF    F96.1
3B6A:  BTFSC  F84.1
3B6C:  BRA    3B72
....................       {            
....................          VelMotor=Vel1; 
3B6E:  MOVFF  56,D0
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
3B72:  BSF    F96.2
3B74:  BTFSC  F84.2
3B76:  BRA    3C44
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3B78:  MOVLW  64
3B7A:  MOVWF  xFF
3B7C:  CALL   0940
3B80:  MOVLW  02
3B82:  MOVWF  30
3B84:  MOVWF  32
3B86:  MOVLW  0C
3B88:  MOVWF  xF9
3B8A:  CALL   0AE0
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
3B8E:  MOVLW  0D
3B90:  MOVWF  FA9
3B92:  MOVFF  56,FA8
3B96:  BCF    FA6.6
3B98:  BCF    FA6.7
3B9A:  BSF    FA6.2
3B9C:  MOVF   FF2,W
3B9E:  MOVWF  00
3BA0:  BCF    FF2.6
3BA2:  BCF    FF2.7
3BA4:  MOVLB  F
3BA6:  MOVLW  55
3BA8:  MOVWF  FA7
3BAA:  MOVLW  AA
3BAC:  MOVWF  FA7
3BAE:  BSF    FA6.1
3BB0:  BTFSC  FA6.1
3BB2:  BRA    3BB0
3BB4:  BCF    FA6.2
3BB6:  MOVF   00,W
3BB8:  IORWF  FF2,F
....................          delay_ms(20); 
3BBA:  MOVLW  14
3BBC:  MOVLB  0
3BBE:  MOVWF  xFF
3BC0:  CALL   0940
....................          lcd_gotoxy(1,1); 
3BC4:  MOVLW  01
3BC6:  MOVWF  xFA
3BC8:  MOVWF  xFB
3BCA:  CALL   0A78
....................          printf(lcd_putc,"                    "); 
3BCE:  MOVLW  2E
3BD0:  MOVWF  FF6
3BD2:  MOVLW  08
3BD4:  MOVWF  FF7
3BD6:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
3BDA:  MOVLW  01
3BDC:  MOVWF  xFA
3BDE:  MOVLW  02
3BE0:  MOVWF  xFB
3BE2:  CALL   0A78
....................          printf(lcd_putc,"     Velocidad      "); 
3BE6:  MOVLW  44
3BE8:  MOVWF  FF6
3BEA:  MOVLW  08
3BEC:  MOVWF  FF7
3BEE:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
3BF2:  MOVLW  01
3BF4:  MOVWF  xFA
3BF6:  MOVLW  03
3BF8:  MOVWF  xFB
3BFA:  CALL   0A78
....................          printf(lcd_putc,"      Almacenada    "); 
3BFE:  MOVLW  5A
3C00:  MOVWF  FF6
3C02:  MOVLW  08
3C04:  MOVWF  FF7
3C06:  CALL   0B3E
....................          lcd_gotoxy(1,4); 
3C0A:  MOVLW  01
3C0C:  MOVWF  xFA
3C0E:  MOVLW  04
3C10:  MOVWF  xFB
3C12:  CALL   0A78
....................          printf(lcd_putc,"                    ");  
3C16:  MOVLW  70
3C18:  MOVWF  FF6
3C1A:  MOVLW  08
3C1C:  MOVWF  FF7
3C1E:  CALL   0B3E
....................          delay_ms(1000); 
3C22:  MOVLW  04
3C24:  MOVWF  xE8
3C26:  MOVLW  FA
3C28:  MOVWF  xFF
3C2A:  CALL   0940
3C2E:  DECFSZ xE8,F
3C30:  BRA    3C26
....................          printf(lcd_putc,"\f"); 
3C32:  MOVLW  0C
3C34:  MOVWF  xF9
3C36:  CALL   0AE0
....................          lcd_init(); 
3C3A:  CALL   09D6
....................          Menu=1; paso=0; 
3C3E:  MOVLW  01
3C40:  MOVWF  2C
3C42:  CLRF   45
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
3C44:  MOVF   2C,W
3C46:  SUBLW  32
3C48:  BTFSS  FD8.2
3C4A:  BRA    4280
....................    if(Lectura==1){ 
3C4C:  BTFSS  2A.0
3C4E:  BRA    3E82
....................       Lectura=0; 
3C50:  BCF    2A.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
3C52:  MOVLW  08
3C54:  MOVWF  xE8
3C56:  CALL   1A4A
3C5A:  MOVFF  03,BC
3C5E:  MOVFF  02,BB
3C62:  MOVFF  01,BA
3C66:  MOVFF  00,B9
....................       lcd_gotoxy(1,1); 
3C6A:  MOVLW  01
3C6C:  MOVWF  xFA
3C6E:  MOVWF  xFB
3C70:  CALL   0A78
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
3C74:  MOVFF  BC,FF
3C78:  MOVFF  BB,FE
3C7C:  MOVFF  BA,FD
3C80:  MOVFF  B9,FC
3C84:  MOVLW  D7
3C86:  MOVLB  1
3C88:  MOVWF  x03
3C8A:  MOVLW  A3
3C8C:  MOVWF  x02
3C8E:  CLRF   x01
3C90:  MOVLW  81
3C92:  MOVWF  x00
3C94:  MOVLB  0
3C96:  CALL   1C04
3C9A:  MOVFF  00,E8
3C9E:  MOVFF  01,E9
3CA2:  MOVFF  02,EA
3CA6:  MOVFF  03,EB
3CAA:  MOVLW  86
3CAC:  MOVWF  FF6
3CAE:  MOVLW  08
3CB0:  MOVWF  FF7
3CB2:  MOVLW  08
3CB4:  MOVWF  xEC
3CB6:  CALL   12F4
3CBA:  MOVLW  02
3CBC:  MOVWF  FE9
3CBE:  MOVFF  EB,EF
3CC2:  MOVFF  EA,EE
3CC6:  MOVFF  E9,ED
3CCA:  MOVFF  E8,EC
3CCE:  MOVWF  xF0
3CD0:  CALL   1E24
3CD4:  MOVLW  93
3CD6:  MOVWF  FF6
3CD8:  MOVLW  08
3CDA:  MOVWF  FF7
3CDC:  MOVLW  07
3CDE:  MOVWF  xEC
3CE0:  CALL   12F4
....................       Saturacion=(CaidaPresion/0.24)*11; 
3CE4:  MOVFF  BC,FF
3CE8:  MOVFF  BB,FE
3CEC:  MOVFF  BA,FD
3CF0:  MOVFF  B9,FC
3CF4:  MOVLW  8F
3CF6:  MOVLB  1
3CF8:  MOVWF  x03
3CFA:  MOVLW  C2
3CFC:  MOVWF  x02
3CFE:  MOVLW  75
3D00:  MOVWF  x01
3D02:  MOVLW  7C
3D04:  MOVWF  x00
3D06:  MOVLB  0
3D08:  CALL   1656
3D0C:  MOVFF  00,E8
3D10:  MOVFF  01,E9
3D14:  MOVFF  02,EA
3D18:  MOVFF  03,EB
3D1C:  MOVFF  03,FF
3D20:  MOVFF  02,FE
3D24:  MOVFF  01,FD
3D28:  MOVFF  00,FC
3D2C:  MOVLB  1
3D2E:  CLRF   x03
3D30:  CLRF   x02
3D32:  MOVLW  30
3D34:  MOVWF  x01
3D36:  MOVLW  82
3D38:  MOVWF  x00
3D3A:  MOVLB  0
3D3C:  CALL   1C04
3D40:  MOVFF  03,B8
3D44:  MOVFF  02,B7
3D48:  MOVFF  01,B6
3D4C:  MOVFF  00,B5
....................        
....................       if(Saturacion>11) 
3D50:  CLRF   xFF
3D52:  CLRF   xFE
3D54:  MOVLW  30
3D56:  MOVWF  xFD
3D58:  MOVLW  82
3D5A:  MOVWF  xFC
3D5C:  MOVFF  B8,103
3D60:  MOVFF  B7,102
3D64:  MOVFF  B6,101
3D68:  MOVFF  B5,100
3D6C:  CALL   0E98
3D70:  BNC   3D7E
....................       { 
....................          Saturacion=11; 
3D72:  CLRF   xB8
3D74:  CLRF   xB7
3D76:  MOVLW  30
3D78:  MOVWF  xB6
3D7A:  MOVLW  82
3D7C:  MOVWF  xB5
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
3D7E:  CLRF   41
3D80:  MOVFF  B8,EB
3D84:  MOVFF  B7,EA
3D88:  MOVFF  B6,E9
3D8C:  MOVFF  B5,E8
3D90:  CALL   2348
3D94:  MOVFF  00,E8
3D98:  MOVFF  01,E9
3D9C:  MOVFF  02,EA
3DA0:  MOVFF  03,EB
3DA4:  MOVLB  1
3DA6:  CLRF   x01
3DA8:  MOVFF  41,100
3DAC:  MOVLB  0
3DAE:  CALL   0BC4
3DB2:  MOVFF  03,FF
3DB6:  MOVFF  02,FE
3DBA:  MOVFF  01,FD
3DBE:  MOVFF  00,FC
3DC2:  MOVFF  EB,103
3DC6:  MOVFF  EA,102
3DCA:  MOVFF  E9,101
3DCE:  MOVFF  E8,100
3DD2:  CALL   0E98
3DD6:  BNC   3DF4
....................       { 
....................          lcd_gotoxy(i+8,2); 
3DD8:  MOVLW  08
3DDA:  ADDWF  41,W
3DDC:  MOVWF  xE8
3DDE:  MOVWF  xFA
3DE0:  MOVLW  02
3DE2:  MOVWF  xFB
3DE4:  CALL   0A78
....................          printf(lcd_putc,"Ñ"); 
3DE8:  MOVLW  D1
3DEA:  MOVWF  xF9
3DEC:  CALL   0AE0
....................       } 
3DF0:  INCF   41,F
3DF2:  BRA    3D80
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3DF4:  MOVFF  B8,EB
3DF8:  MOVFF  B7,EA
3DFC:  MOVFF  B6,E9
3E00:  MOVFF  B5,E8
3E04:  CALL   2348
3E08:  MOVFF  03,FF
3E0C:  MOVFF  02,FE
3E10:  MOVFF  01,FD
3E14:  MOVFF  00,FC
3E18:  CALL   1FB2
3E1C:  MOVFF  01,41
3E20:  MOVF   41,W
3E22:  SUBLW  0A
3E24:  BNC   3E42
....................       { 
....................          lcd_gotoxy(i+8,2); 
3E26:  MOVLW  08
3E28:  ADDWF  41,W
3E2A:  MOVWF  xE8
3E2C:  MOVWF  xFA
3E2E:  MOVLW  02
3E30:  MOVWF  xFB
3E32:  CALL   0A78
....................          printf(lcd_putc," "); 
3E36:  MOVLW  20
3E38:  MOVWF  xF9
3E3A:  CALL   0AE0
....................       } 
3E3E:  INCF   41,F
3E40:  BRA    3E20
....................        
....................       lcd_gotoxy(9,3); 
3E42:  MOVLW  09
3E44:  MOVWF  xFA
3E46:  MOVLW  03
3E48:  MOVWF  xFB
3E4A:  CALL   0A78
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3E4E:  MOVLW  9C
3E50:  MOVWF  FF6
3E52:  MOVLW  08
3E54:  MOVWF  FF7
3E56:  MOVLW  06
3E58:  MOVWF  xEC
3E5A:  CALL   12F4
3E5E:  MOVFF  3B,E8
3E62:  MOVLW  03
3E64:  MOVWF  xE9
3E66:  CALL   14E0
3E6A:  MOVLW  3A
3E6C:  MOVWF  xF9
3E6E:  CALL   0AE0
3E72:  MOVFF  3C,E8
3E76:  MOVLW  01
3E78:  MOVWF  xE9
3E7A:  CALL   14E0
....................       EliminaRuido(); 
3E7E:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
3E82:  BTFSS  29.7
3E84:  BRA    3F1E
....................    { 
....................       if(estadoalarma==1) 
3E86:  BTFSS  2A.4
3E88:  BRA    3F14
....................       { 
....................          printf(lcd_putc,"\f"); 
3E8A:  MOVLW  0C
3E8C:  MOVWF  xF9
3E8E:  CALL   0AE0
....................          lcd_gotoxy(1,2); 
3E92:  MOVLW  01
3E94:  MOVWF  xFA
3E96:  MOVLW  02
3E98:  MOVWF  xFB
3E9A:  CALL   0A78
....................          printf(lcd_putc,"  Temporizador  de  "); 
3E9E:  MOVLW  AC
3EA0:  MOVWF  FF6
3EA2:  MOVLW  08
3EA4:  MOVWF  FF7
3EA6:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
3EAA:  MOVLW  01
3EAC:  MOVWF  xFA
3EAE:  MOVLW  03
3EB0:  MOVWF  xFB
3EB2:  CALL   0A78
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3EB6:  MOVLW  C2
3EB8:  MOVWF  FF6
3EBA:  MOVLW  08
3EBC:  MOVWF  FF7
3EBE:  CALL   0B3E
....................          lcd_gotoxy(1,4); 
3EC2:  MOVLW  01
3EC4:  MOVWF  xFA
3EC6:  MOVLW  04
3EC8:  MOVWF  xFB
3ECA:  CALL   0A78
....................          printf(lcd_putc,"                    "); 
3ECE:  MOVLW  D8
3ED0:  MOVWF  FF6
3ED2:  MOVLW  08
3ED4:  MOVWF  FF7
3ED6:  CALL   0B3E
....................          lcd_gotoxy(1,1); 
3EDA:  MOVLW  01
3EDC:  MOVWF  xFA
3EDE:  MOVWF  xFB
3EE0:  CALL   0A78
....................          printf(lcd_putc,"                    "); 
3EE4:  MOVLW  EE
3EE6:  MOVWF  FF6
3EE8:  MOVLW  08
3EEA:  MOVWF  FF7
3EEC:  CALL   0B3E
....................          for(i=0;i<5;i++) 
3EF0:  CLRF   41
3EF2:  MOVF   41,W
3EF4:  SUBLW  04
3EF6:  BNC   3F14
....................          { 
....................             Buzzer_on; 
3EF8:  BSF    F8B.0
3EFA:  BCF    F94.0
....................             delay_ms(200); 
3EFC:  MOVLW  C8
3EFE:  MOVWF  xFF
3F00:  CALL   0940
....................             Buzzer_off; 
3F04:  BCF    F8B.0
3F06:  BCF    F94.0
....................             delay_ms(200); 
3F08:  MOVLW  C8
3F0A:  MOVWF  xFF
3F0C:  CALL   0940
....................          } 
3F10:  INCF   41,F
3F12:  BRA    3EF2
....................       } 
....................       tiempo_cumplido=0; 
3F14:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
3F16:  MOVLW  0C
3F18:  MOVWF  xF9
3F1A:  CALL   0AE0
....................    } 
....................     
....................    if(CaidaPresion>=0.23) 
3F1E:  MOVLW  1F
3F20:  MOVWF  xFF
3F22:  MOVLW  85
3F24:  MOVWF  xFE
3F26:  MOVLW  6B
3F28:  MOVWF  xFD
3F2A:  MOVLW  7C
3F2C:  MOVWF  xFC
3F2E:  MOVFF  BC,103
3F32:  MOVFF  BB,102
3F36:  MOVFF  BA,101
3F3A:  MOVFF  B9,100
3F3E:  CALL   0E98
3F42:  BC    3F46
3F44:  BNZ   3F4C
....................    {  
....................       ActivaBuzzer=1; 
3F46:  MOVLW  01
3F48:  MOVWF  51
....................    } 
....................    else 
3F4A:  BRA    3F52
....................    { 
....................       ActivaBuzzer=0; 
3F4C:  CLRF   51
....................       Buzzer_off; 
3F4E:  BCF    F8B.0
3F50:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
3F52:  MOVLW  01
3F54:  MOVWF  xFA
3F56:  MOVLW  02
3F58:  MOVWF  xFB
3F5A:  CALL   0A78
....................       printf(lcd_putc,"Filtro:"); 
3F5E:  MOVLW  04
3F60:  MOVWF  FF6
3F62:  MOVLW  09
3F64:  MOVWF  FF7
3F66:  CALL   0B3E
....................        
....................       if(estadomv==1) 
3F6A:  BTFSS  29.2
3F6C:  BRA    3F88
....................       { 
....................          lcd_gotoxy(1,4); 
3F6E:  MOVLW  01
3F70:  MOVWF  xFA
3F72:  MOVLW  04
3F74:  MOVWF  xFB
3F76:  CALL   0A78
....................          printf(lcd_putc,"Motor:ON ");       
3F7A:  MOVLW  0C
3F7C:  MOVWF  FF6
3F7E:  MOVLW  09
3F80:  MOVWF  FF7
3F82:  CALL   0B3E
....................       } 
....................       else 
3F86:  BRA    3FA0
....................       { 
....................          lcd_gotoxy(1,4); 
3F88:  MOVLW  01
3F8A:  MOVWF  xFA
3F8C:  MOVLW  04
3F8E:  MOVWF  xFB
3F90:  CALL   0A78
....................          printf(lcd_putc,"Motor:OFF"); 
3F94:  MOVLW  16
3F96:  MOVWF  FF6
3F98:  MOVLW  09
3F9A:  MOVWF  FF7
3F9C:  CALL   0B3E
....................       } 
....................        
....................       if(estadouv==1) 
3FA0:  BTFSS  29.0
3FA2:  BRA    3FBE
....................       { 
....................          lcd_gotoxy(13,4); 
3FA4:  MOVLW  0D
3FA6:  MOVWF  xFA
3FA8:  MOVLW  04
3FAA:  MOVWF  xFB
3FAC:  CALL   0A78
....................          printf(lcd_putc,"UV:ON "); 
3FB0:  MOVLW  20
3FB2:  MOVWF  FF6
3FB4:  MOVLW  09
3FB6:  MOVWF  FF7
3FB8:  CALL   0B3E
....................       } 
....................       else 
3FBC:  BRA    3FD6
....................       {          
....................          lcd_gotoxy(13,4); 
3FBE:  MOVLW  0D
3FC0:  MOVWF  xFA
3FC2:  MOVLW  04
3FC4:  MOVWF  xFB
3FC6:  CALL   0A78
....................          printf(lcd_putc,"UV:OFF"); 
3FCA:  MOVLW  28
3FCC:  MOVWF  FF6
3FCE:  MOVLW  09
3FD0:  MOVWF  FF7
3FD2:  CALL   0B3E
....................       } 
....................        
....................       if(estadofl==1) 
3FD6:  BTFSS  29.1
3FD8:  BRA    3FF4
....................       { 
....................          lcd_gotoxy(1,3); 
3FDA:  MOVLW  01
3FDC:  MOVWF  xFA
3FDE:  MOVLW  03
3FE0:  MOVWF  xFB
3FE2:  CALL   0A78
....................          printf(lcd_putc,"Luz:ON "); 
3FE6:  MOVLW  30
3FE8:  MOVWF  FF6
3FEA:  MOVLW  09
3FEC:  MOVWF  FF7
3FEE:  CALL   0B3E
....................       } 
....................       else 
3FF2:  BRA    400C
....................       { 
....................          lcd_gotoxy(1,3); 
3FF4:  MOVLW  01
3FF6:  MOVWF  xFA
3FF8:  MOVLW  03
3FFA:  MOVWF  xFB
3FFC:  CALL   0A78
....................          printf(lcd_putc,"Luz:OFF"); 
4000:  MOVLW  38
4002:  MOVWF  FF6
4004:  MOVLW  09
4006:  MOVWF  FF7
4008:  CALL   0B3E
....................       }  
....................       Cambio=OFF; 
400C:  BCF    2B.3
....................    //} 
....................     
....................    if(estadomv==1){  
400E:  BTFSS  29.2
4010:  BRA    403C
....................       if(flagmv==0){ 
4012:  BTFSC  2B.4
4014:  BRA    4036
....................          VelMotor=6; 
4016:  MOVLW  06
4018:  MOVWF  xD0
....................          lcd_init();delay_ms(200);lcd_init(); 
401A:  CALL   09D6
401E:  MOVLW  C8
4020:  MOVWF  xFF
4022:  CALL   0940
4026:  CALL   09D6
....................          flagmv=1;Cambio=ON;delay_ms(200); 
402A:  BSF    2B.4
402C:  BSF    2B.3
402E:  MOVLW  C8
4030:  MOVWF  xFF
4032:  CALL   0940
....................       } 
....................       VelMotor=Vel1; 
4036:  MOVFF  56,D0
....................    }else{ 
403A:  BRA    4056
....................       VelMotor=0; 
403C:  CLRF   xD0
....................       if(flagmv==1){ 
403E:  BTFSS  2B.4
4040:  BRA    4056
....................          lcd_init();delay_ms(200);lcd_init(); 
4042:  CALL   09D6
4046:  MOVLW  C8
4048:  MOVWF  xFF
404A:  CALL   0940
404E:  CALL   09D6
....................          flagmv=0;Cambio=ON; 
4052:  BCF    2B.4
4054:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
4056:  BTFSS  29.1
4058:  BRA    4078
....................    { 
....................       Luz_Blanca_on; 
405A:  BCF    F8A.4
405C:  BCF    F93.4
....................       if(flagfl==0) 
405E:  BTFSC  2A.2
4060:  BRA    4076
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4062:  CALL   09D6
4066:  MOVLW  C8
4068:  MOVWF  xFF
406A:  CALL   0940
406E:  CALL   09D6
....................          flagfl=1;Cambio=ON; 
4072:  BSF    2A.2
4074:  BSF    2B.3
....................       } 
....................    } 
....................    else 
4076:  BRA    4094
....................    { 
....................       Luz_Blanca_off; 
4078:  BSF    F8A.4
407A:  BCF    F93.4
....................       if(flagfl==1) 
407C:  BTFSS  2A.2
407E:  BRA    4094
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4080:  CALL   09D6
4084:  MOVLW  C8
4086:  MOVWF  xFF
4088:  CALL   0940
408C:  CALL   09D6
....................          flagfl=0;Cambio=ON; 
4090:  BCF    2A.2
4092:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    //if(VIDRIODN){ 
....................       //estadomv=0; 
....................       //VelMotor=0; 
....................       //estadofl=0; 
....................       //Luz_Blanca_off; 
....................       if(estadouv==1){ 
4094:  BTFSS  29.0
4096:  BRA    40C6
....................          Luz_UV_on; 
4098:  BCF    F8A.3
409A:  BCF    F93.3
....................          tiempo_cumplido=0;       
409C:  BCF    29.7
....................          estadomv=0; 
409E:  BCF    29.2
....................          VelMotor=0; 
40A0:  CLRF   xD0
....................          estadofl=0; 
40A2:  BCF    29.1
....................          Luz_Blanca_off; 
40A4:  BSF    F8A.4
40A6:  BCF    F93.4
....................          if(flaguv==0){ 
40A8:  BTFSC  2A.1
40AA:  BRA    40C4
....................             lcd_init();delay_ms(200);lcd_init(); 
40AC:  CALL   09D6
40B0:  MOVLW  C8
40B2:  MOVWF  xFF
40B4:  CALL   0940
40B8:  CALL   09D6
....................             flaguv=1;guardaruv=1;Cambio=ON; 
40BC:  BSF    2A.1
40BE:  MOVLW  01
40C0:  MOVWF  44
40C2:  BSF    2B.3
....................          } 
....................       }else{ 
40C4:  BRA    40E8
....................          estadouv=0; 
40C6:  BCF    29.0
....................          Luz_UV_off; 
40C8:  BSF    F8A.3
40CA:  BCF    F93.3
....................          if(flaguv==1){ 
40CC:  BTFSS  2A.1
40CE:  BRA    40E8
....................             lcd_init();delay_ms(200);lcd_init(); 
40D0:  CALL   09D6
40D4:  MOVLW  C8
40D6:  MOVWF  xFF
40D8:  CALL   0940
40DC:  CALL   09D6
....................             flaguv=0;guardaruv=1;Cambio=ON; 
40E0:  BCF    2A.1
40E2:  MOVLW  01
40E4:  MOVWF  44
40E6:  BSF    2B.3
....................          } 
....................       } 
....................    //}else{ 
....................    //   estadouv=0; 
....................    //   Luz_UV_off; 
....................    //   if(flaguv==1){ 
....................          //lcd_init();delay_ms(200);lcd_init(); 
....................    //      flaguv=0;guardaruv=1;Cambio=ON; 
....................    //   } 
....................    //} 
....................     
....................    if(tdown>=60){ //Si oprimio tecla abajo por 300ms o mas 
40E8:  MOVF   xC8,F
40EA:  BNZ   40F2
40EC:  MOVF   xC7,W
40EE:  SUBLW  3B
40F0:  BC    410E
....................       if(!Flanco){ 
40F2:  BTFSC  29.3
40F4:  BRA    410C
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
40F6:  BTG    29.1
40F8:  BSF    29.3
40FA:  MOVLW  02
40FC:  MOVWF  xE8
40FE:  MOVLW  96
4100:  MOVWF  xFF
4102:  CALL   0940
4106:  DECFSZ xE8,F
4108:  BRA    40FE
410A:  BSF    2B.3
....................       } 
....................    }else{ 
410C:  BRA    4110
....................       Flanco=0; 
410E:  BCF    29.3
....................    } 
....................     
....................    if(tright>=60){ //Si oprimio tecla derecha por 300ms o mas 
4110:  MOVF   xCA,F
4112:  BNZ   411A
4114:  MOVF   xC9,W
4116:  SUBLW  3B
4118:  BC    4136
....................       if(!Flanco2){ 
411A:  BTFSC  29.5
411C:  BRA    4134
....................          estadomv=!estadomv;Flanco2 = 1;delay_ms(300);Cambio=ON; 
411E:  BTG    29.2
4120:  BSF    29.5
4122:  MOVLW  02
4124:  MOVWF  xE8
4126:  MOVLW  96
4128:  MOVWF  xFF
412A:  CALL   0940
412E:  DECFSZ xE8,F
4130:  BRA    4126
4132:  BSF    2B.3
....................       } 
....................    }else{ 
4134:  BRA    4138
....................       Flanco2=0; 
4136:  BCF    29.5
....................    } 
....................     
....................    if(tleft>=60){ //Si oprimio tecla izquierda por 300ms o mas 
4138:  MOVF   xCC,F
413A:  BNZ   4142
413C:  MOVF   xCB,W
413E:  SUBLW  3B
4140:  BC    4156
....................       if(!Flanco3){ 
4142:  BTFSC  29.6
4144:  BRA    4154
....................          delay_ms(150);  
4146:  MOVLW  96
4148:  MOVWF  xFF
414A:  CALL   0940
....................          estadouv=!estadouv; 
414E:  BTG    29.0
....................          Cambio=ON; 
4150:  BSF    2B.3
....................          Flanco3=1; 
4152:  BSF    29.6
....................       } 
....................    }else{ 
4154:  BRA    4158
....................       Flanco3=0; 
4156:  BCF    29.6
....................    } 
....................     
....................    if(tup>=60){ //Si oprimio tecla arriba por 300ms o mas 
4158:  MOVF   xC6,F
415A:  BNZ   4162
415C:  MOVF   xC5,W
415E:  SUBLW  3B
4160:  BC    4198
....................       if(!Flanco1){ 
4162:  BTFSC  29.4
4164:  BRA    4196
....................          delay_ms(200); 
4166:  MOVLW  C8
4168:  MOVWF  xFF
416A:  CALL   0940
....................          printf(lcd_putc,"\f"); 
416E:  MOVLW  0C
4170:  MOVWF  xF9
4172:  CALL   0AE0
....................          delay_ms(300); 
4176:  MOVLW  02
4178:  MOVWF  xE8
417A:  MOVLW  96
417C:  MOVWF  xFF
417E:  CALL   0940
4182:  DECFSZ xE8,F
4184:  BRA    417A
....................          Menu=1;  
4186:  MOVLW  01
4188:  MOVWF  2C
....................          paso=0; 
418A:  CLRF   45
....................          Flecha=2; 
418C:  MOVLW  02
418E:  MOVWF  30
....................          Flecha2=2; 
4190:  MOVWF  32
....................          Cambio=ON; 
4192:  BSF    2B.3
....................          Flanco1=1; 
4194:  BSF    29.4
....................       } 
....................    }else{ 
4196:  BRA    419A
....................       Flanco1=0; 
4198:  BCF    29.4
....................    } 
....................        
....................    if(guardaruv==1) 
419A:  DECFSZ 44,W
419C:  BRA    4268
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
419E:  MOVLW  07
41A0:  MOVWF  FA9
41A2:  MOVFF  35,FA8
41A6:  BCF    FA6.6
41A8:  BCF    FA6.7
41AA:  BSF    FA6.2
41AC:  MOVF   FF2,W
41AE:  MOVWF  00
41B0:  BCF    FF2.6
41B2:  BCF    FF2.7
41B4:  MOVLB  F
41B6:  MOVLW  55
41B8:  MOVWF  FA7
41BA:  MOVLW  AA
41BC:  MOVWF  FA7
41BE:  BSF    FA6.1
41C0:  BTFSC  FA6.1
41C2:  BRA    41C0
41C4:  BCF    FA6.2
41C6:  MOVF   00,W
41C8:  IORWF  FF2,F
41CA:  MOVLW  08
41CC:  MOVWF  FA9
41CE:  MOVFF  36,FA8
41D2:  BCF    FA6.6
41D4:  BCF    FA6.7
41D6:  BSF    FA6.2
41D8:  MOVF   FF2,W
41DA:  MOVWF  00
41DC:  BCF    FF2.6
41DE:  BCF    FF2.7
41E0:  MOVLW  55
41E2:  MOVWF  FA7
41E4:  MOVLW  AA
41E6:  MOVWF  FA7
41E8:  BSF    FA6.1
41EA:  BTFSC  FA6.1
41EC:  BRA    41EA
41EE:  BCF    FA6.2
41F0:  MOVF   00,W
41F2:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
41F4:  MOVFF  59,37
....................       horasH=make8(horas,1); 
41F8:  MOVFF  5A,38
....................       write_eeprom(9,horasL); 
41FC:  MOVLW  09
41FE:  MOVWF  FA9
4200:  MOVFF  37,FA8
4204:  BCF    FA6.6
4206:  BCF    FA6.7
4208:  BSF    FA6.2
420A:  MOVFF  FF2,00
420E:  BCF    FF2.6
4210:  BCF    FF2.7
4212:  MOVLW  55
4214:  MOVWF  FA7
4216:  MOVLW  AA
4218:  MOVWF  FA7
421A:  BSF    FA6.1
421C:  BTFSC  FA6.1
421E:  BRA    421C
4220:  BCF    FA6.2
4222:  MOVF   00,W
4224:  IORWF  FF2,F
....................       delay_ms(20); 
4226:  MOVLW  14
4228:  MOVLB  0
422A:  MOVWF  xFF
422C:  CALL   0940
....................       write_eeprom(10,horasH); 
4230:  MOVLW  0A
4232:  MOVWF  FA9
4234:  MOVFF  38,FA8
4238:  BCF    FA6.6
423A:  BCF    FA6.7
423C:  BSF    FA6.2
423E:  MOVF   FF2,W
4240:  MOVWF  00
4242:  BCF    FF2.6
4244:  BCF    FF2.7
4246:  MOVLB  F
4248:  MOVLW  55
424A:  MOVWF  FA7
424C:  MOVLW  AA
424E:  MOVWF  FA7
4250:  BSF    FA6.1
4252:  BTFSC  FA6.1
4254:  BRA    4252
4256:  BCF    FA6.2
4258:  MOVF   00,W
425A:  IORWF  FF2,F
....................       delay_ms(20); 
425C:  MOVLW  14
425E:  MOVLB  0
4260:  MOVWF  xFF
4262:  CALL   0940
....................       guardaruv=0; 
4266:  CLRF   44
....................    } 
....................     
....................    if(segundos>=60) 
4268:  MOVF   35,W
426A:  SUBLW  3B
426C:  BC    4272
....................    { 
....................       segundos=0;minutos++; 
426E:  CLRF   35
4270:  INCF   36,F
....................    } 
....................    if(minutos==60) 
4272:  MOVF   36,W
4274:  SUBLW  3C
4276:  BNZ   4280
....................    { 
....................       minutos=0;horas++; 
4278:  CLRF   36
427A:  INCF   59,F
427C:  BTFSC  FD8.2
427E:  INCF   5A,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
4280:  MOVF   43,W
4282:  SUBLW  3B
4284:  BC    429E
....................    { 
....................       printf(lcd_putc,"\f"); 
4286:  MOVLW  0C
4288:  MOVWF  xF9
428A:  CALL   0AE0
....................       lcd_init(); 
428E:  CALL   09D6
....................       delay_ms(200); 
4292:  MOVLW  C8
4294:  MOVWF  xFF
4296:  CALL   0940
....................       tiemporeset=0; 
429A:  CLRF   43
....................       Cambio=ON; 
429C:  BSF    2B.3
....................    }    
....................    } 
429E:  GOTO   253A
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
42A2:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0E3C   NOIESO NOFCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E39   NOBROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0100   NOPBADEN CCP2C1 NOMCLR NOLPT1OSC
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
