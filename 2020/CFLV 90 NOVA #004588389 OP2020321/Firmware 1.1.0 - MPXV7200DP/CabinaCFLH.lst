CCS PCH C Compiler, Version 4.104, 5967               13-oct.-20 15:23

               Filename: D:\Laboratorio\Cabina de Flujo Laminar Vertical\2020\CFLV 90 NOVA #004588387 OP2020321\Firmware 1.1.0 - MPXV7200DP\CabinaCFLH.lst

               ROM used: 17240 bytes (53%)
                         Largest free fragment is 15526
               RAM used: 236 (12%) at main() level
                         276 (13%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   2414
*
0008:  GOTO   00A6
000C:  NOP   
000E:  NOP   
0010:  NOP   
0012:  NOP   
0014:  NOP   
0016:  NOP   
0018:  MOVWF  04
001A:  MOVFF  FD8,05
001E:  MOVFF  FE0,06
0022:  MOVLB  0
0024:  MOVFF  FE9,0C
0028:  MOVFF  FEA,07
002C:  MOVFF  FE1,08
0030:  MOVFF  FE2,09
0034:  MOVFF  FD9,0A
0038:  MOVFF  FDA,0B
003C:  MOVFF  FF3,12
0040:  MOVFF  FF4,13
0044:  MOVFF  FFA,14
0048:  MOVFF  00,0E
004C:  MOVFF  01,0F
0050:  MOVFF  02,10
0054:  MOVFF  03,11
0058:  BTFSS  F9D.0
005A:  GOTO   0064
005E:  BTFSC  F9E.0
0060:  GOTO   02F2
0064:  MOVFF  0E,00
0068:  MOVFF  0F,01
006C:  MOVFF  10,02
0070:  MOVFF  11,03
0074:  MOVFF  0C,FE9
0078:  MOVFF  07,FEA
007C:  BSF    07.7
007E:  MOVFF  08,FE1
0082:  MOVFF  09,FE2
0086:  MOVFF  0A,FD9
008A:  MOVFF  0B,FDA
008E:  MOVFF  12,FF3
0092:  MOVFF  13,FF4
0096:  MOVFF  14,FFA
009A:  MOVF   04,W
009C:  MOVFF  06,FE0
00A0:  MOVFF  05,FD8
00A4:  RETFIE 0
00A6:  MOVWF  16
00A8:  MOVFF  FD8,17
00AC:  MOVFF  FE0,18
00B0:  MOVLB  0
00B2:  MOVFF  FE9,1E
00B6:  MOVFF  FEA,19
00BA:  MOVFF  FE1,1A
00BE:  MOVFF  FE2,1B
00C2:  MOVFF  FD9,1C
00C6:  MOVFF  FDA,1D
00CA:  MOVFF  FF3,24
00CE:  MOVFF  FF4,25
00D2:  MOVFF  FFA,26
00D6:  MOVFF  00,20
00DA:  MOVFF  01,21
00DE:  MOVFF  02,22
00E2:  MOVFF  03,23
00E6:  BTFSS  FF2.5
00E8:  GOTO   00F2
00EC:  BTFSC  FF2.2
00EE:  GOTO   02C0
00F2:  BTFSS  FF2.4
00F4:  GOTO   00FE
00F8:  BTFSC  FF2.1
00FA:  GOTO   0248
00FE:  MOVFF  20,00
0102:  MOVFF  21,01
0106:  MOVFF  22,02
010A:  MOVFF  23,03
010E:  MOVFF  1E,FE9
0112:  MOVFF  19,FEA
0116:  BSF    19.7
0118:  MOVFF  1A,FE1
011C:  MOVFF  1B,FE2
0120:  MOVFF  1C,FD9
0124:  MOVFF  1D,FDA
0128:  MOVFF  24,FF3
012C:  MOVFF  25,FF4
0130:  MOVFF  26,FFA
0134:  MOVF   16,W
0136:  MOVFF  18,FE0
013A:  MOVFF  17,FD8
013E:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #device HIGH_INTS=TRUE //Activamos niveles de prioridad 
.................... #priority TIMER2 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL5,CPUDIV4,VREGEN,NOMCLR,NOBROWNOUT,NOPUT,NOCPD,NOSTVREN,NOWRT,NOWRTD,NOIESO,NOFCMEN,NOPBADEN,NOWRTC,NOWRTB,NOEBTR,NOEBTRB,NOCPB,NOLPT1OSC,NOXINST,NOICPRT// PLL1 para 4 MHz 
.................... #use delay(clock=16000000) 
*
0940:  CLRF   FEA
0942:  MOVLW  FF
0944:  MOVWF  FE9
0946:  MOVF   FEF,W
0948:  BZ    0966
094A:  MOVLW  05
094C:  MOVWF  01
094E:  CLRF   00
0950:  DECFSZ 00,F
0952:  BRA    0950
0954:  DECFSZ 01,F
0956:  BRA    094E
0958:  MOVLW  2E
095A:  MOVWF  00
095C:  DECFSZ 00,F
095E:  BRA    095C
0960:  BRA    0962
0962:  DECFSZ FEF,F
0964:  BRA    094A
0966:  RETLW  00
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
209C:  BCF    xFB.0
....................    y = x; 
209E:  MOVFF  EF,F4
20A2:  MOVFF  EE,F3
20A6:  MOVFF  ED,F2
20AA:  MOVFF  EC,F1
....................  
....................    if (x < 0) 
20AE:  MOVFF  EF,FF
20B2:  MOVFF  EE,FE
20B6:  MOVFF  ED,FD
20BA:  MOVFF  EC,FC
20BE:  MOVLB  1
20C0:  CLRF   x03
20C2:  CLRF   x02
20C4:  CLRF   x01
20C6:  CLRF   x00
20C8:  MOVLB  0
20CA:  CALL   0E98
20CE:  BNC   20D8
....................    { 
....................       s = 1; 
20D0:  BSF    xFB.0
....................       y = -y; 
20D2:  MOVF   xF2,W
20D4:  XORLW  80
20D6:  MOVWF  xF2
....................    } 
....................  
....................    if (y <= 32768.0) 
20D8:  MOVFF  F4,FF
20DC:  MOVFF  F3,FE
20E0:  MOVFF  F2,FD
20E4:  MOVFF  F1,FC
20E8:  MOVLB  1
20EA:  CLRF   x03
20EC:  CLRF   x02
20EE:  CLRF   x01
20F0:  MOVLW  8E
20F2:  MOVWF  x00
20F4:  MOVLB  0
20F6:  CALL   0E98
20FA:  BC    20FE
20FC:  BNZ   212E
....................   res = (float32)(unsigned int16)y; 
20FE:  MOVFF  F4,FF
2102:  MOVFF  F3,FE
2106:  MOVFF  F2,FD
210A:  MOVFF  F1,FC
210E:  RCALL  2064
2110:  MOVFF  02,101
2114:  MOVFF  01,100
2118:  CALL   0BC4
211C:  MOVFF  03,F8
2120:  MOVFF  02,F7
2124:  MOVFF  01,F6
2128:  MOVFF  00,F5
....................  
....................  else if (y < 10000000.0) 
212C:  BRA    22C8
212E:  MOVFF  F4,FF
2132:  MOVFF  F3,FE
2136:  MOVFF  F2,FD
213A:  MOVFF  F1,FC
213E:  MOVLW  80
2140:  MOVLB  1
2142:  MOVWF  x03
2144:  MOVLW  96
2146:  MOVWF  x02
2148:  MOVLW  18
214A:  MOVWF  x01
214C:  MOVLW  96
214E:  MOVWF  x00
2150:  MOVLB  0
2152:  CALL   0E98
2156:  BTFSS  FD8.0
2158:  BRA    22B8
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
215A:  MOVFF  F4,100
215E:  MOVFF  F3,FF
2162:  MOVFF  F2,FE
2166:  MOVFF  F1,FD
216A:  MOVLB  1
216C:  CLRF   x04
216E:  CLRF   x03
2170:  CLRF   x02
2172:  MOVLW  8E
2174:  MOVWF  x01
2176:  MOVLB  0
2178:  CALL   178E
217C:  MOVFF  03,FF
2180:  MOVFF  02,FE
2184:  MOVFF  01,FD
2188:  MOVFF  00,FC
218C:  RCALL  2064
218E:  MOVFF  02,FA
2192:  MOVFF  01,F9
....................       y = 32768.0*(y/32768.0 - (float32)l); 
2196:  MOVFF  F4,100
219A:  MOVFF  F3,FF
219E:  MOVFF  F2,FE
21A2:  MOVFF  F1,FD
21A6:  MOVLB  1
21A8:  CLRF   x04
21AA:  CLRF   x03
21AC:  CLRF   x02
21AE:  MOVLW  8E
21B0:  MOVWF  x01
21B2:  MOVLB  0
21B4:  CALL   178E
21B8:  MOVFF  00,FC
21BC:  MOVFF  01,FD
21C0:  MOVFF  02,FE
21C4:  MOVFF  03,FF
21C8:  MOVFF  FA,101
21CC:  MOVFF  F9,100
21D0:  CALL   0BC4
21D4:  BSF    FD8.1
21D6:  MOVFF  FF,103
21DA:  MOVFF  FE,102
21DE:  MOVFF  FD,101
21E2:  MOVFF  FC,100
21E6:  MOVFF  03,107
21EA:  MOVFF  02,106
21EE:  MOVFF  01,105
21F2:  MOVFF  00,104
21F6:  CALL   190A
21FA:  CLRF   xFF
21FC:  CLRF   xFE
21FE:  CLRF   xFD
2200:  MOVLW  8E
2202:  MOVWF  xFC
2204:  MOVFF  03,103
2208:  MOVFF  02,102
220C:  MOVFF  01,101
2210:  MOVFF  00,100
2214:  CALL   165A
2218:  MOVFF  03,F4
221C:  MOVFF  02,F3
2220:  MOVFF  01,F2
2224:  MOVFF  00,F1
....................   res = 32768.0*(float32)l; 
2228:  MOVFF  FA,101
222C:  MOVFF  F9,100
2230:  CALL   0BC4
2234:  CLRF   xFF
2236:  CLRF   xFE
2238:  CLRF   xFD
223A:  MOVLW  8E
223C:  MOVWF  xFC
223E:  MOVFF  03,103
2242:  MOVFF  02,102
2246:  MOVFF  01,101
224A:  MOVFF  00,100
224E:  CALL   165A
2252:  MOVFF  03,F8
2256:  MOVFF  02,F7
225A:  MOVFF  01,F6
225E:  MOVFF  00,F5
....................   res += (float32)(unsigned int16)y; 
2262:  MOVFF  F4,FF
2266:  MOVFF  F3,FE
226A:  MOVFF  F2,FD
226E:  MOVFF  F1,FC
2272:  RCALL  2064
2274:  MOVFF  02,101
2278:  MOVFF  01,100
227C:  CALL   0BC4
2280:  BCF    FD8.1
2282:  MOVFF  F8,103
2286:  MOVFF  F7,102
228A:  MOVFF  F6,101
228E:  MOVFF  F5,100
2292:  MOVFF  03,107
2296:  MOVFF  02,106
229A:  MOVFF  01,105
229E:  MOVFF  00,104
22A2:  CALL   190A
22A6:  MOVFF  03,F8
22AA:  MOVFF  02,F7
22AE:  MOVFF  01,F6
22B2:  MOVFF  00,F5
....................  } 
....................  
....................  else 
22B6:  BRA    22C8
....................   res = y; 
22B8:  MOVFF  F4,F8
22BC:  MOVFF  F3,F7
22C0:  MOVFF  F2,F6
22C4:  MOVFF  F1,F5
....................  
....................  y = y - (float32)(unsigned int16)y; 
22C8:  MOVFF  F4,FF
22CC:  MOVFF  F3,FE
22D0:  MOVFF  F2,FD
22D4:  MOVFF  F1,FC
22D8:  RCALL  2064
22DA:  MOVFF  02,101
22DE:  MOVFF  01,100
22E2:  CALL   0BC4
22E6:  BSF    FD8.1
22E8:  MOVFF  F4,103
22EC:  MOVFF  F3,102
22F0:  MOVFF  F2,101
22F4:  MOVFF  F1,100
22F8:  MOVFF  03,107
22FC:  MOVFF  02,106
2300:  MOVFF  01,105
2304:  MOVFF  00,104
2308:  CALL   190A
230C:  MOVFF  03,F4
2310:  MOVFF  02,F3
2314:  MOVFF  01,F2
2318:  MOVFF  00,F1
....................  
....................  if (s) 
231C:  BTFSS  xFB.0
231E:  BRA    2326
....................   res = -res; 
2320:  MOVF   xF6,W
2322:  XORLW  80
2324:  MOVWF  xF6
....................  
....................  if (y != 0) 
2326:  MOVFF  F4,FF
232A:  MOVFF  F3,FE
232E:  MOVFF  F2,FD
2332:  MOVFF  F1,FC
2336:  MOVLB  1
2338:  CLRF   x03
233A:  CLRF   x02
233C:  CLRF   x01
233E:  CLRF   x00
2340:  MOVLB  0
2342:  CALL   0E98
2346:  BZ    23C0
....................  { 
....................   if (s == 1 && n == 0) 
2348:  BTFSS  xFB.0
234A:  BRA    2384
234C:  MOVF   xF0,F
234E:  BNZ   2384
....................    res -= 1.0; 
2350:  BSF    FD8.1
2352:  MOVFF  F8,103
2356:  MOVFF  F7,102
235A:  MOVFF  F6,101
235E:  MOVFF  F5,100
2362:  MOVLB  1
2364:  CLRF   x07
2366:  CLRF   x06
2368:  CLRF   x05
236A:  MOVLW  7F
236C:  MOVWF  x04
236E:  MOVLB  0
2370:  CALL   190A
2374:  MOVFF  03,F8
2378:  MOVFF  02,F7
237C:  MOVFF  01,F6
2380:  MOVFF  00,F5
....................  
....................   if (s == 0 && n == 1) 
2384:  BTFSC  xFB.0
2386:  BRA    23C0
2388:  DECFSZ xF0,W
238A:  BRA    23C0
....................    res += 1.0; 
238C:  BCF    FD8.1
238E:  MOVFF  F8,103
2392:  MOVFF  F7,102
2396:  MOVFF  F6,101
239A:  MOVFF  F5,100
239E:  MOVLB  1
23A0:  CLRF   x07
23A2:  CLRF   x06
23A4:  CLRF   x05
23A6:  MOVLW  7F
23A8:  MOVWF  x04
23AA:  MOVLB  0
23AC:  CALL   190A
23B0:  MOVFF  03,F8
23B4:  MOVFF  02,F7
23B8:  MOVFF  01,F6
23BC:  MOVFF  00,F5
....................  } 
....................  if (x == 0) 
23C0:  MOVFF  EF,FF
23C4:  MOVFF  EE,FE
23C8:  MOVFF  ED,FD
23CC:  MOVFF  EC,FC
23D0:  MOVLB  1
23D2:  CLRF   x03
23D4:  CLRF   x02
23D6:  CLRF   x01
23D8:  CLRF   x00
23DA:  MOVLB  0
23DC:  CALL   0E98
23E0:  BNZ   23EA
....................     res = 0; 
23E2:  CLRF   xF8
23E4:  CLRF   xF7
23E6:  CLRF   xF6
23E8:  CLRF   xF5
....................  
....................  return (res); 
23EA:  MOVFF  F5,00
23EE:  MOVFF  F6,01
23F2:  MOVFF  F7,02
23F6:  MOVFF  F8,03
.................... } 
23FA:  GOTO   2412 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
23FE:  MOVFF  EB,EF
2402:  MOVFF  EA,EE
2406:  MOVFF  E9,ED
240A:  MOVFF  E8,EC
240E:  CLRF   xF0
2410:  BRA    209C
.................... } 
2412:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTD")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_d(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_d(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0968:  MOVLB  1
096A:  SWAPF  x00,W
096C:  ANDLW  F0
096E:  MOVWF  00
0970:  MOVLW  0F
0972:  ANDWF  F83,W
0974:  IORWF  00,W
0976:  MOVWF  F83
....................       delay_cycles(30);//30 
0978:  MOVLW  09
097A:  MOVWF  00
097C:  DECFSZ 00,F
097E:  BRA    097C
0980:  BRA    0982
....................       lcd.enable = 1; 
0982:  BSF    F83.3
....................       delay_us(55);//55 
0984:  MOVLW  49
0986:  MOVWF  00
0988:  DECFSZ 00,F
098A:  BRA    0988
....................       lcd.enable = 0; 
098C:  BCF    F83.3
.................... } 
098E:  MOVLB  0
0990:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0992:  BCF    F83.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0994:  MOVLW  01
0996:  MOVWF  xFF
0998:  RCALL  0940
....................       lcd.rs = address; 
099A:  BTFSS  xFD.0
099C:  BCF    F83.1
099E:  BTFSC  xFD.0
09A0:  BSF    F83.1
....................       delay_cycles(30);//30 
09A2:  MOVLW  09
09A4:  MOVWF  00
09A6:  DECFSZ 00,F
09A8:  BRA    09A6
09AA:  BRA    09AC
....................       lcd.rw = 0; 
09AC:  BCF    F83.2
....................       delay_cycles(30);//30 
09AE:  MOVLW  09
09B0:  MOVWF  00
09B2:  DECFSZ 00,F
09B4:  BRA    09B2
09B6:  BRA    09B8
....................       lcd.enable = 0; 
09B8:  BCF    F83.3
....................       lcd_send_nibble(n >> 4); 
09BA:  SWAPF  xFE,W
09BC:  MOVWF  xFF
09BE:  MOVLW  0F
09C0:  ANDWF  xFF,F
09C2:  MOVFF  FF,100
09C6:  RCALL  0968
....................       lcd_send_nibble(n & 0xf); 
09C8:  MOVF   xFE,W
09CA:  ANDLW  0F
09CC:  MOVWF  xFF
09CE:  MOVFF  FE8,100
09D2:  RCALL  0968
.................... } 
09D4:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_d(LCD_WRITE); 
09D6:  MOVLW  00
09D8:  MOVWF  F95
....................     lcd.rs = 0; 
09DA:  BCF    F83.1
....................     lcd.rw = 0; 
09DC:  BCF    F83.2
....................     lcd.enable = 0; 
09DE:  BCF    F83.3
....................     delay_ms(15); 
09E0:  MOVLW  0F
09E2:  MOVWF  xFF
09E4:  RCALL  0940
....................     for(i=1;i<=3;++i) { 
09E6:  MOVLW  01
09E8:  MOVWF  xE8
09EA:  MOVF   xE8,W
09EC:  SUBLW  03
09EE:  BNC   0A04
....................        lcd_send_nibble(3); 
09F0:  MOVLW  03
09F2:  MOVLB  1
09F4:  MOVWF  x00
09F6:  MOVLB  0
09F8:  RCALL  0968
....................        delay_ms(5); 
09FA:  MOVLW  05
09FC:  MOVWF  xFF
09FE:  RCALL  0940
....................     } 
0A00:  INCF   xE8,F
0A02:  BRA    09EA
....................     lcd_send_nibble(2); 
0A04:  MOVLW  02
0A06:  MOVLB  1
0A08:  MOVWF  x00
0A0A:  MOVLB  0
0A0C:  RCALL  0968
....................     for(i=0;i<=3;++i) 
0A0E:  CLRF   xE8
0A10:  MOVF   xE8,W
0A12:  SUBLW  03
0A14:  BNC   0A3A
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0A16:  CLRF   03
0A18:  MOVF   xE8,W
0A1A:  MOVFF  FF2,E9
0A1E:  BCF    FF2.6
0A20:  BCF    FF2.7
0A22:  CALL   0140
0A26:  BTFSC  xE9.6
0A28:  BSF    FF2.6
0A2A:  BTFSC  xE9.7
0A2C:  BSF    FF2.7
0A2E:  MOVWF  xE9
0A30:  CLRF   xFD
0A32:  MOVWF  xFE
0A34:  RCALL  0992
0A36:  INCF   xE8,F
0A38:  BRA    0A10
.................... } 
0A3A:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0A78:  MOVLW  01
0A7A:  SUBWF  xFB,W
0A7C:  ADDLW  FC
0A7E:  BC    0A9E
0A80:  ADDLW  04
0A82:  GOTO   0AAE
....................      case 1 : address=0x80;break; 
0A86:  MOVLW  80
0A88:  MOVWF  xFC
0A8A:  BRA    0A9E
....................      case 2 : address=0xc0;break; 
0A8C:  MOVLW  C0
0A8E:  MOVWF  xFC
0A90:  BRA    0A9E
....................      case 3 : address=0x94;break; 
0A92:  MOVLW  94
0A94:  MOVWF  xFC
0A96:  BRA    0A9E
....................      case 4 : address=0xd4;break; 
0A98:  MOVLW  D4
0A9A:  MOVWF  xFC
0A9C:  BRA    0A9E
....................    } 
....................    address+=x-1; 
0A9E:  MOVLW  01
0AA0:  SUBWF  xFA,W
0AA2:  ADDWF  xFC,F
....................    lcd_send_byte(0,address); 
0AA4:  CLRF   xFD
0AA6:  MOVFF  FC,FE
0AAA:  RCALL  0992
.................... } 
0AAC:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
0AE0:  MOVF   xF9,W
0AE2:  SUBLW  F1
0AE4:  BNZ   0AEA
....................    { 
....................       c=238; 
0AE6:  MOVLW  EE
0AE8:  MOVWF  xF9
....................    } 
....................    if(c=='Ñ') 
0AEA:  MOVF   xF9,W
0AEC:  SUBLW  D1
0AEE:  BNZ   0AF4
....................    { 
....................       c=255; 
0AF0:  MOVLW  FF
0AF2:  MOVWF  xF9
....................    } 
....................     
....................    switch (c) { 
0AF4:  MOVF   xF9,W
0AF6:  XORLW  0C
0AF8:  BZ    0B04
0AFA:  XORLW  06
0AFC:  BZ    0B18
0AFE:  XORLW  02
0B00:  BZ    0B26
0B02:  BRA    0B30
....................      case '\f'   : lcd_send_byte(0,1); 
0B04:  CLRF   xFD
0B06:  MOVLW  01
0B08:  MOVWF  xFE
0B0A:  RCALL  0992
....................                    lcdline=1; 
0B0C:  MOVLW  01
0B0E:  MOVWF  28
....................                    delay_ms(2); 
0B10:  MOVLW  02
0B12:  MOVWF  xFF
0B14:  RCALL  0940
....................                                            break; 
0B16:  BRA    0B3C
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0B18:  INCF   28,F
0B1A:  MOVLW  01
0B1C:  MOVWF  xFA
0B1E:  MOVFF  28,FB
0B22:  RCALL  0A78
0B24:  BRA    0B3C
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0B26:  CLRF   xFD
0B28:  MOVLW  10
0B2A:  MOVWF  xFE
0B2C:  RCALL  0992
0B2E:  BRA    0B3C
....................      default     : lcd_send_byte(1,c);     break; 
0B30:  MOVLW  01
0B32:  MOVWF  xFD
0B34:  MOVFF  F9,FE
0B38:  RCALL  0992
0B3A:  BRA    0B3C
....................    } 
.................... } 
0B3C:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIOUUP     !input(PIN_A1) 
.................... #define   VIDRIODN      !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_B3,0) 
.................... #define   Luz_UV_off        output_bit(PIN_B3,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_B4,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_B4,1) 
.................... #define   Motor_on          output_bit(PIN_C2,1) 
.................... #define   Motor_off         output_bit(PIN_C2,0) 
.................... #define   Motor2_on         output_bit(PIN_C1,1) 
.................... #define   Motor2_off        output_bit(PIN_C1,0) 
.................... #define   Buzzer_on         output_bit(PIN_C0,1) 
.................... #define   Buzzer_off        output_bit(PIN_C0,0) 
.................... #define   O1_on             output_bit(PIN_B6,1) 
.................... #define   O1_off            output_bit(PIN_B6,0) 
.................... #define   O2_on             output_bit(PIN_B7,1) 
.................... #define   O2_off            output_bit(PIN_B7,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0,pulsoSubir=OFF,pulsoBajar=OFF,flag_arriba=OFF,Entro=0; 
.................... short flagdn=0,flagup=0; 
.................... int8 Menu=0, n_opcionH=7,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0,codigoSubir=0,codigoBajar=0,codigoDetener=0,n=0,Vel1=4; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0; 
....................  
.................... int16 pulsos=0,retardo=0,tup=0,tdown=0,tright=0,tleft=0; 
.................... short Cruce=OFF,Purga=OFF; 
.................... int16 tiempocruce=0; 
.................... int8 Porcentaje=0,VelMotor=0; 
.................... float Tcruce=0.0,Tcruce2=0; 
....................  
.................... int1 BITS[32]; 
.................... int16 Ta,Tb,TICK=0; 
.................... Int1 BIT_START, NUEVO_DATO; 
.................... int BYTE_IR[4]; 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... #include <Funciones.h> 
.................... int8 BIT_BYTE(int1 D7, int1 D6, int1 D5, int1 D4, int1 D3, int1 D2, int1 D1, int1 D0); 
....................  
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
1410:  DECFSZ xE9,W
1412:  BRA    142C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
1414:  MOVLW  02
1416:  MOVWF  xFA
1418:  MOVFF  EA,FB
141C:  CALL   0A78
1420:  MOVLW  64
1422:  MOVWF  FF6
1424:  MOVLW  01
1426:  MOVWF  FF7
1428:  CALL   0B3E
....................    if(x==2) 
142C:  MOVF   xE9,W
142E:  SUBLW  02
1430:  BNZ   144A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
1432:  MOVLW  02
1434:  MOVWF  xFA
1436:  MOVFF  EA,FB
143A:  CALL   0A78
143E:  MOVLW  78
1440:  MOVWF  FF6
1442:  MOVLW  01
1444:  MOVWF  FF7
1446:  CALL   0B3E
....................    if(x==3) 
144A:  MOVF   xE9,W
144C:  SUBLW  03
144E:  BNZ   1468
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
1450:  MOVLW  02
1452:  MOVWF  xFA
1454:  MOVFF  EA,FB
1458:  CALL   0A78
145C:  MOVLW  8C
145E:  MOVWF  FF6
1460:  MOVLW  01
1462:  MOVWF  FF7
1464:  CALL   0B3E
....................    if(x==4) 
1468:  MOVF   xE9,W
146A:  SUBLW  04
146C:  BNZ   1486
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
146E:  MOVLW  02
1470:  MOVWF  xFA
1472:  MOVFF  EA,FB
1476:  CALL   0A78
147A:  MOVLW  A0
147C:  MOVWF  FF6
147E:  MOVLW  01
1480:  MOVWF  FF7
1482:  CALL   0B3E
....................     
....................    if(x==5) 
1486:  MOVF   xE9,W
1488:  SUBLW  05
148A:  BNZ   14C4
....................    {if(estadoalarma==0) 
148C:  BTFSC  2A.4
148E:  BRA    14A8
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
1490:  MOVLW  02
1492:  MOVWF  xFA
1494:  MOVFF  EA,FB
1498:  CALL   0A78
149C:  MOVLW  B4
149E:  MOVWF  FF6
14A0:  MOVLW  01
14A2:  MOVWF  FF7
14A4:  CALL   0B3E
....................    if(estadoalarma==1) 
14A8:  BTFSS  2A.4
14AA:  BRA    14C4
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
14AC:  MOVLW  02
14AE:  MOVWF  xFA
14B0:  MOVFF  EA,FB
14B4:  CALL   0A78
14B8:  MOVLW  C8
14BA:  MOVWF  FF6
14BC:  MOVLW  01
14BE:  MOVWF  FF7
14C0:  CALL   0B3E
....................    } 
....................     
....................    if(x==6) 
14C4:  MOVF   xE9,W
14C6:  SUBLW  06
14C8:  BNZ   14E2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad          ");} 
14CA:  MOVLW  02
14CC:  MOVWF  xFA
14CE:  MOVFF  EA,FB
14D2:  CALL   0A78
14D6:  MOVLW  DC
14D8:  MOVWF  FF6
14DA:  MOVLW  01
14DC:  MOVWF  FF7
14DE:  CALL   0B3E
.................... } 
14E2:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
1606:  RLCF   xF9,W
1608:  MOVWF  00
160A:  RLCF   00,F
160C:  MOVLW  FC
160E:  ANDWF  00,F
1610:  MOVFF  00,01
1614:  MOVF   FC2,W
1616:  ANDLW  C3
1618:  IORWF  00,W
161A:  MOVWF  FC2
161C:  MOVLW  0A
161E:  MOVWF  xFF
1620:  CALL   0940
1624:  BSF    FC2.1
1626:  BTFSC  FC2.1
1628:  BRA    1626
162A:  MOVFF  FC4,101
162E:  MOVFF  FC3,100
1632:  MOVLB  0
1634:  CALL   0BC4
1638:  MOVFF  03,FD
163C:  MOVFF  02,FC
1640:  MOVFF  01,FB
1644:  MOVFF  00,FA
1648:  MOVFF  FA,00
164C:  MOVFF  FB,01
1650:  MOVFF  FC,02
1654:  MOVFF  FD,03
.................... } 
1658:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1B82:  CLRF   xEC
1B84:  CLRF   xEB
1B86:  CLRF   xEA
1B88:  CLRF   xE9
1B8A:  CLRF   xF0
1B8C:  CLRF   xEF
1B8E:  CLRF   xEE
1B90:  CLRF   xED
1B92:  CLRF   xF4
1B94:  CLRF   xF3
1B96:  CLRF   xF2
1B98:  CLRF   xF1
1B9A:  CLRF   xF8
1B9C:  CLRF   xF7
1B9E:  CLRF   xF6
1BA0:  CLRF   xF5
....................    float promediopresion=0.0; 
....................    float VG=0.0,VS=0.0,G2=0.0; 
....................     
....................    V1=sensores(0);  
1BA2:  CLRF   xF9
1BA4:  RCALL  1606
1BA6:  MOVFF  03,B0
1BAA:  MOVFF  02,AF
1BAE:  MOVFF  01,AE
1BB2:  MOVFF  00,AD
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    //Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
....................    VS = (V1*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
1BB6:  MOVFF  B0,FF
1BBA:  MOVFF  AF,FE
1BBE:  MOVFF  AE,FD
1BC2:  MOVFF  AD,FC
1BC6:  MOVLB  1
1BC8:  CLRF   x03
1BCA:  CLRF   x02
1BCC:  MOVLW  20
1BCE:  MOVWF  x01
1BD0:  MOVLW  81
1BD2:  MOVWF  x00
1BD4:  MOVLB  0
1BD6:  RCALL  165A
1BD8:  MOVFF  00,F9
1BDC:  MOVFF  01,FA
1BE0:  MOVFF  02,FB
1BE4:  MOVFF  03,FC
1BE8:  MOVFF  03,100
1BEC:  MOVFF  02,FF
1BF0:  MOVFF  01,FE
1BF4:  MOVFF  00,FD
1BF8:  MOVLB  1
1BFA:  CLRF   x04
1BFC:  MOVLW  C0
1BFE:  MOVWF  x03
1C00:  MOVLW  7F
1C02:  MOVWF  x02
1C04:  MOVLW  88
1C06:  MOVWF  x01
1C08:  MOVLB  0
1C0A:  RCALL  178E
1C0C:  MOVFF  03,F4
1C10:  MOVFF  02,F3
1C14:  MOVFF  01,F2
1C18:  MOVFF  00,F1
....................    G2=G; 
1C1C:  MOVFF  C0,F8
1C20:  MOVFF  BF,F7
1C24:  MOVFF  BE,F6
1C28:  MOVFF  BD,F5
....................    VG = (G2*5.0)/1023.0; 
1C2C:  MOVFF  F8,FF
1C30:  MOVFF  F7,FE
1C34:  MOVFF  F6,FD
1C38:  MOVFF  F5,FC
1C3C:  MOVLB  1
1C3E:  CLRF   x03
1C40:  CLRF   x02
1C42:  MOVLW  20
1C44:  MOVWF  x01
1C46:  MOVLW  81
1C48:  MOVWF  x00
1C4A:  MOVLB  0
1C4C:  RCALL  165A
1C4E:  MOVFF  00,F9
1C52:  MOVFF  01,FA
1C56:  MOVFF  02,FB
1C5A:  MOVFF  03,FC
1C5E:  MOVFF  03,100
1C62:  MOVFF  02,FF
1C66:  MOVFF  01,FE
1C6A:  MOVFF  00,FD
1C6E:  MOVLB  1
1C70:  CLRF   x04
1C72:  MOVLW  C0
1C74:  MOVWF  x03
1C76:  MOVLW  7F
1C78:  MOVWF  x02
1C7A:  MOVLW  88
1C7C:  MOVWF  x01
1C7E:  MOVLB  0
1C80:  RCALL  178E
1C82:  MOVFF  03,F0
1C86:  MOVFF  02,EF
1C8A:  MOVFF  01,EE
1C8E:  MOVFF  00,ED
....................    Presion=(VS-VG);// Presion=(Voltaje/Ganancia)-1 
1C92:  BSF    FD8.1
1C94:  MOVFF  F4,103
1C98:  MOVFF  F3,102
1C9C:  MOVFF  F2,101
1CA0:  MOVFF  F1,100
1CA4:  MOVFF  F0,107
1CA8:  MOVFF  EF,106
1CAC:  MOVFF  EE,105
1CB0:  MOVFF  ED,104
1CB4:  RCALL  190A
1CB6:  MOVFF  03,B4
1CBA:  MOVFF  02,B3
1CBE:  MOVFF  01,B2
1CC2:  MOVFF  00,B1
....................     
....................    if(Presion<0.0) 
1CC6:  MOVFF  B4,FF
1CCA:  MOVFF  B3,FE
1CCE:  MOVFF  B2,FD
1CD2:  MOVFF  B1,FC
1CD6:  MOVLB  1
1CD8:  CLRF   x03
1CDA:  CLRF   x02
1CDC:  CLRF   x01
1CDE:  CLRF   x00
1CE0:  MOVLB  0
1CE2:  CALL   0E98
1CE6:  BNC   1CF0
....................    { 
....................       Presion=0.0; 
1CE8:  CLRF   xB4
1CEA:  CLRF   xB3
1CEC:  CLRF   xB2
1CEE:  CLRF   xB1
....................    } 
....................  
....................    if(r>media-1) 
1CF0:  MOVLW  01
1CF2:  SUBWF  xE8,W
1CF4:  SUBWF  3F,W
1CF6:  BZ    1CFC
1CF8:  BNC   1CFC
....................    {r=0;} 
1CFA:  CLRF   3F
....................    PromPresion[r]=Presion;r++; 
1CFC:  MOVF   3F,W
1CFE:  MULLW  04
1D00:  MOVF   FF3,W
1D02:  CLRF   03
1D04:  ADDLW  5D
1D06:  MOVWF  FE9
1D08:  MOVLW  00
1D0A:  ADDWFC 03,W
1D0C:  MOVWF  FEA
1D0E:  MOVFF  B1,FEF
1D12:  MOVFF  B2,FEC
1D16:  MOVFF  B3,FEC
1D1A:  MOVFF  B4,FEC
1D1E:  INCF   3F,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1D20:  CLRF   40
1D22:  MOVLW  01
1D24:  SUBWF  xE8,W
1D26:  SUBWF  40,W
1D28:  BZ    1D2C
1D2A:  BC    1D96
....................    { 
....................       promediopresion+=PromPresion[q]; 
1D2C:  MOVF   40,W
1D2E:  MULLW  04
1D30:  MOVF   FF3,W
1D32:  CLRF   03
1D34:  ADDLW  5D
1D36:  MOVWF  FE9
1D38:  MOVLW  00
1D3A:  ADDWFC 03,W
1D3C:  MOVWF  FEA
1D3E:  MOVFF  FEF,00
1D42:  MOVFF  FEC,01
1D46:  MOVFF  FEC,02
1D4A:  MOVFF  FEC,03
1D4E:  MOVFF  FEA,FA
1D52:  MOVFF  FE9,F9
1D56:  BCF    FD8.1
1D58:  MOVFF  EC,103
1D5C:  MOVFF  EB,102
1D60:  MOVFF  EA,101
1D64:  MOVFF  E9,100
1D68:  MOVFF  03,107
1D6C:  MOVFF  02,106
1D70:  MOVFF  01,105
1D74:  MOVFF  00,104
1D78:  RCALL  190A
1D7A:  MOVFF  FA,FEA
1D7E:  MOVFF  F9,FE9
1D82:  MOVFF  03,EC
1D86:  MOVFF  02,EB
1D8A:  MOVFF  01,EA
1D8E:  MOVFF  00,E9
....................    }  
1D92:  INCF   40,F
1D94:  BRA    1D22
....................    promediopresion=promediopresion/media;    
1D96:  MOVLB  1
1D98:  CLRF   x01
1D9A:  MOVFF  E8,100
1D9E:  MOVLB  0
1DA0:  CALL   0BC4
1DA4:  MOVFF  EC,100
1DA8:  MOVFF  EB,FF
1DAC:  MOVFF  EA,FE
1DB0:  MOVFF  E9,FD
1DB4:  MOVFF  03,104
1DB8:  MOVFF  02,103
1DBC:  MOVFF  01,102
1DC0:  MOVFF  00,101
1DC4:  RCALL  178E
1DC6:  MOVFF  03,EC
1DCA:  MOVFF  02,EB
1DCE:  MOVFF  01,EA
1DD2:  MOVFF  00,E9
....................     
....................    return promediopresion; 
1DD6:  MOVFF  E9,00
1DDA:  MOVFF  EA,01
1DDE:  MOVFF  EB,02
1DE2:  MOVFF  EC,03
.................... } 
1DE6:  RETLW  00
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void ConfigInterrupciones (void){ 
....................    delay_ms(200); 
*
0A3C:  MOVLW  C8
0A3E:  MOVWF  xFF
0A40:  RCALL  0940
....................    lcd_init(); 
0A42:  RCALL  09D6
....................    set_tris_a(0XFF); 
0A44:  MOVLW  FF
0A46:  MOVWF  F92
....................    set_tris_e(0XFF); 
0A48:  MOVWF  F96
....................    enable_interrupts(global); 
0A4A:  MOVLW  C0
0A4C:  IORWF  FF2,F
....................    enable_interrupts(INT_EXT_L2H); 
0A4E:  BSF    FF2.4
0A50:  BSF    FF1.6
....................    //enable_interrupts(INT_EXT1_H2L); 
....................    setup_timer_0(RTCC_8_BIT|RTCC_DIV_256); 
0A52:  MOVLW  C7
0A54:  MOVWF  FD5
....................    enable_interrupts(INT_TIMER0); 
0A56:  BSF    FF2.5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0A58:  MOVLW  85
0A5A:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
0A5C:  BSF    F9D.0
....................    //setup_timer_2(T2_DIV_BY_16,0xfd,1); 
....................    //enable_interrupts(INT_TIMER2); 
....................    setup_adc_ports(AN0); 
0A5E:  MOVF   FC1,W
0A60:  ANDLW  C0
0A62:  IORLW  0E
0A64:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0A66:  BCF    FC0.0
0A68:  BSF    FC0.1
0A6A:  BCF    FC0.2
0A6C:  BSF    FC0.7
0A6E:  BSF    FC2.0
....................    enable_interrupts(global); 
0A70:  MOVLW  C0
0A72:  IORWF  FF2,F
.................... } 
0A74:  GOTO   25DC (RETURN)
....................  
.................... void MensajeBienvenida (void){ 
....................    lcd_gotoxy(1,1); 
*
0B5E:  MOVLW  01
0B60:  MOVWF  xFA
0B62:  MOVWF  xFB
0B64:  RCALL  0A78
....................    printf(lcd_putc,"CABINA FLUJO LAMINAR"); 
0B66:  MOVLW  F0
0B68:  MOVWF  FF6
0B6A:  MOVLW  01
0B6C:  MOVWF  FF7
0B6E:  RCALL  0B3E
....................    lcd_gotoxy(1,2); 
0B70:  MOVLW  01
0B72:  MOVWF  xFA
0B74:  MOVLW  02
0B76:  MOVWF  xFB
0B78:  RCALL  0A78
....................    printf(lcd_putc,"      VERTICAL      "); 
0B7A:  MOVLW  06
0B7C:  MOVWF  FF6
0B7E:  MOVLW  02
0B80:  MOVWF  FF7
0B82:  RCALL  0B3E
....................    lcd_gotoxy(1,3); 
0B84:  MOVLW  01
0B86:  MOVWF  xFA
0B88:  MOVLW  03
0B8A:  MOVWF  xFB
0B8C:  RCALL  0A78
....................    printf(lcd_putc,"    JP  INGLOBAL    "); 
0B8E:  MOVLW  1C
0B90:  MOVWF  FF6
0B92:  MOVLW  02
0B94:  MOVWF  FF7
0B96:  RCALL  0B3E
....................    lcd_gotoxy(1,4); 
0B98:  MOVLW  01
0B9A:  MOVWF  xFA
0B9C:  MOVLW  04
0B9E:  MOVWF  xFB
0BA0:  RCALL  0A78
....................    printf(lcd_putc,"     REF:JPCV48     "); 
0BA2:  MOVLW  32
0BA4:  MOVWF  FF6
0BA6:  MOVLW  02
0BA8:  MOVWF  FF7
0BAA:  RCALL  0B3E
....................    delay_ms(2000); 
0BAC:  MOVLW  08
0BAE:  MOVWF  xE8
0BB0:  MOVLW  FA
0BB2:  MOVWF  xFF
0BB4:  RCALL  0940
0BB6:  DECFSZ xE8,F
0BB8:  BRA    0BB0
....................    printf(lcd_putc,"\f"); 
0BBA:  MOVLW  0C
0BBC:  MOVWF  xF9
0BBE:  RCALL  0AE0
.................... } 
0BC0:  GOTO   25E0 (RETURN)
....................  
.................... void LeeEEPROM (void){ 
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
*
0BFA:  MOVFF  FF2,E8
0BFE:  BCF    FF2.6
0C00:  BCF    FF2.7
0C02:  CLRF   FA9
0C04:  BCF    FA6.6
0C06:  BCF    FA6.7
0C08:  BSF    FA6.0
0C0A:  MOVF   FA8,W
0C0C:  BTFSC  xE8.6
0C0E:  BSF    FF2.6
0C10:  BTFSC  xE8.7
0C12:  BSF    FF2.7
0C14:  MOVWF  4D
....................    delay_ms(20);  
0C16:  MOVLW  14
0C18:  MOVWF  xFF
0C1A:  RCALL  0940
....................    contrasena[1]=read_eeprom(1); 
0C1C:  MOVFF  FF2,E8
0C20:  BCF    FF2.6
0C22:  BCF    FF2.7
0C24:  MOVLW  01
0C26:  MOVWF  FA9
0C28:  BCF    FA6.6
0C2A:  BCF    FA6.7
0C2C:  BSF    FA6.0
0C2E:  MOVF   FA8,W
0C30:  BTFSC  xE8.6
0C32:  BSF    FF2.6
0C34:  BTFSC  xE8.7
0C36:  BSF    FF2.7
0C38:  MOVWF  4E
....................    delay_ms(20); 
0C3A:  MOVLW  14
0C3C:  MOVWF  xFF
0C3E:  RCALL  0940
....................    contrasena[2]=read_eeprom(2); 
0C40:  MOVFF  FF2,E8
0C44:  BCF    FF2.6
0C46:  BCF    FF2.7
0C48:  MOVLW  02
0C4A:  MOVWF  FA9
0C4C:  BCF    FA6.6
0C4E:  BCF    FA6.7
0C50:  BSF    FA6.0
0C52:  MOVF   FA8,W
0C54:  BTFSC  xE8.6
0C56:  BSF    FF2.6
0C58:  BTFSC  xE8.7
0C5A:  BSF    FF2.7
0C5C:  MOVWF  4F
....................    delay_ms(20);  
0C5E:  MOVLW  14
0C60:  MOVWF  xFF
0C62:  RCALL  0940
....................    contrasena[3]=read_eeprom(3); 
0C64:  MOVFF  FF2,E8
0C68:  BCF    FF2.6
0C6A:  BCF    FF2.7
0C6C:  MOVLW  03
0C6E:  MOVWF  FA9
0C70:  BCF    FA6.6
0C72:  BCF    FA6.7
0C74:  BSF    FA6.0
0C76:  MOVF   FA8,W
0C78:  BTFSC  xE8.6
0C7A:  BSF    FF2.6
0C7C:  BTFSC  xE8.7
0C7E:  BSF    FF2.7
0C80:  MOVWF  50
....................    delay_ms(20); 
0C82:  MOVLW  14
0C84:  MOVWF  xFF
0C86:  RCALL  0940
....................    estadoalarma=read_eeprom(4); 
0C88:  MOVFF  FF2,E8
0C8C:  BCF    FF2.6
0C8E:  BCF    FF2.7
0C90:  MOVLW  04
0C92:  MOVWF  FA9
0C94:  BCF    FA6.6
0C96:  BCF    FA6.7
0C98:  BSF    FA6.0
0C9A:  MOVF   FA8,W
0C9C:  BTFSC  xE8.6
0C9E:  BSF    FF2.6
0CA0:  BTFSC  xE8.7
0CA2:  BSF    FF2.7
0CA4:  MOVWF  01
0CA6:  BCF    2A.4
0CA8:  BTFSC  01.0
0CAA:  BSF    2A.4
....................    delay_ms(20); 
0CAC:  MOVLW  14
0CAE:  MOVWF  xFF
0CB0:  RCALL  0940
....................    tempo_minutos=read_eeprom(5); 
0CB2:  MOVFF  FF2,E8
0CB6:  BCF    FF2.6
0CB8:  BCF    FF2.7
0CBA:  MOVLW  05
0CBC:  MOVWF  FA9
0CBE:  BCF    FA6.6
0CC0:  BCF    FA6.7
0CC2:  BSF    FA6.0
0CC4:  MOVF   FA8,W
0CC6:  BTFSC  xE8.6
0CC8:  BSF    FF2.6
0CCA:  BTFSC  xE8.7
0CCC:  BSF    FF2.7
0CCE:  MOVWF  3B
....................    delay_ms(20); 
0CD0:  MOVLW  14
0CD2:  MOVWF  xFF
0CD4:  RCALL  0940
....................    tempo_segundos=read_eeprom(6); 
0CD6:  MOVFF  FF2,E8
0CDA:  BCF    FF2.6
0CDC:  BCF    FF2.7
0CDE:  MOVLW  06
0CE0:  MOVWF  FA9
0CE2:  BCF    FA6.6
0CE4:  BCF    FA6.7
0CE6:  BSF    FA6.0
0CE8:  MOVF   FA8,W
0CEA:  BTFSC  xE8.6
0CEC:  BSF    FF2.6
0CEE:  BTFSC  xE8.7
0CF0:  BSF    FF2.7
0CF2:  MOVWF  3C
....................    delay_ms(20); 
0CF4:  MOVLW  14
0CF6:  MOVWF  xFF
0CF8:  RCALL  0940
....................    segundos=read_eeprom(7); 
0CFA:  MOVFF  FF2,E8
0CFE:  BCF    FF2.6
0D00:  BCF    FF2.7
0D02:  MOVLW  07
0D04:  MOVWF  FA9
0D06:  BCF    FA6.6
0D08:  BCF    FA6.7
0D0A:  BSF    FA6.0
0D0C:  MOVF   FA8,W
0D0E:  BTFSC  xE8.6
0D10:  BSF    FF2.6
0D12:  BTFSC  xE8.7
0D14:  BSF    FF2.7
0D16:  MOVWF  35
....................    delay_ms(20); 
0D18:  MOVLW  14
0D1A:  MOVWF  xFF
0D1C:  RCALL  0940
....................    minutos=read_eeprom(8); 
0D1E:  MOVFF  FF2,E8
0D22:  BCF    FF2.6
0D24:  BCF    FF2.7
0D26:  MOVLW  08
0D28:  MOVWF  FA9
0D2A:  BCF    FA6.6
0D2C:  BCF    FA6.7
0D2E:  BSF    FA6.0
0D30:  MOVF   FA8,W
0D32:  BTFSC  xE8.6
0D34:  BSF    FF2.6
0D36:  BTFSC  xE8.7
0D38:  BSF    FF2.7
0D3A:  MOVWF  36
....................    delay_ms(20); 
0D3C:  MOVLW  14
0D3E:  MOVWF  xFF
0D40:  RCALL  0940
....................    horasL=read_eeprom(9); 
0D42:  MOVFF  FF2,E8
0D46:  BCF    FF2.6
0D48:  BCF    FF2.7
0D4A:  MOVLW  09
0D4C:  MOVWF  FA9
0D4E:  BCF    FA6.6
0D50:  BCF    FA6.7
0D52:  BSF    FA6.0
0D54:  MOVF   FA8,W
0D56:  BTFSC  xE8.6
0D58:  BSF    FF2.6
0D5A:  BTFSC  xE8.7
0D5C:  BSF    FF2.7
0D5E:  MOVWF  37
....................    delay_ms(20); 
0D60:  MOVLW  14
0D62:  MOVWF  xFF
0D64:  RCALL  0940
....................    horasH=read_eeprom(10); 
0D66:  MOVFF  FF2,E8
0D6A:  BCF    FF2.6
0D6C:  BCF    FF2.7
0D6E:  MOVLW  0A
0D70:  MOVWF  FA9
0D72:  BCF    FA6.6
0D74:  BCF    FA6.7
0D76:  BSF    FA6.0
0D78:  MOVF   FA8,W
0D7A:  BTFSC  xE8.6
0D7C:  BSF    FF2.6
0D7E:  BTFSC  xE8.7
0D80:  BSF    FF2.7
0D82:  MOVWF  38
....................    delay_ms(20); 
0D84:  MOVLW  14
0D86:  MOVWF  xFF
0D88:  RCALL  0940
....................    G_l=read_eeprom(11); 
0D8A:  MOVFF  FF2,E8
0D8E:  BCF    FF2.6
0D90:  BCF    FF2.7
0D92:  MOVLW  0B
0D94:  MOVWF  FA9
0D96:  BCF    FA6.6
0D98:  BCF    FA6.7
0D9A:  BSF    FA6.0
0D9C:  MOVF   FA8,W
0D9E:  BTFSC  xE8.6
0DA0:  BSF    FF2.6
0DA2:  BTFSC  xE8.7
0DA4:  BSF    FF2.7
0DA6:  MOVWF  39
....................    delay_ms(20); 
0DA8:  MOVLW  14
0DAA:  MOVWF  xFF
0DAC:  RCALL  0940
....................    G_h=read_eeprom(12); 
0DAE:  MOVFF  FF2,E8
0DB2:  BCF    FF2.6
0DB4:  BCF    FF2.7
0DB6:  MOVLW  0C
0DB8:  MOVWF  FA9
0DBA:  BCF    FA6.6
0DBC:  BCF    FA6.7
0DBE:  BSF    FA6.0
0DC0:  MOVF   FA8,W
0DC2:  BTFSC  xE8.6
0DC4:  BSF    FF2.6
0DC6:  BTFSC  xE8.7
0DC8:  BSF    FF2.7
0DCA:  MOVWF  3A
....................    delay_ms(20); 
0DCC:  MOVLW  14
0DCE:  MOVWF  xFF
0DD0:  RCALL  0940
....................    Vel1=read_eeprom(13); 
0DD2:  MOVFF  FF2,E8
0DD6:  BCF    FF2.6
0DD8:  BCF    FF2.7
0DDA:  MOVLW  0D
0DDC:  MOVWF  FA9
0DDE:  BCF    FA6.6
0DE0:  BCF    FA6.7
0DE2:  BSF    FA6.0
0DE4:  MOVF   FA8,W
0DE6:  BTFSC  xE8.6
0DE8:  BSF    FF2.6
0DEA:  BTFSC  xE8.7
0DEC:  BSF    FF2.7
0DEE:  MOVWF  56
....................    delay_ms(20); 
0DF0:  MOVLW  14
0DF2:  MOVWF  xFF
0DF4:  RCALL  0940
....................    codigoSubir=read_eeprom(15); 
0DF6:  MOVFF  FF2,E8
0DFA:  BCF    FF2.6
0DFC:  BCF    FF2.7
0DFE:  MOVLW  0F
0E00:  MOVWF  FA9
0E02:  BCF    FA6.6
0E04:  BCF    FA6.7
0E06:  BSF    FA6.0
0E08:  MOVF   FA8,W
0E0A:  BTFSC  xE8.6
0E0C:  BSF    FF2.6
0E0E:  BTFSC  xE8.7
0E10:  BSF    FF2.7
0E12:  MOVWF  52
....................    delay_ms(20); 
0E14:  MOVLW  14
0E16:  MOVWF  xFF
0E18:  RCALL  0940
....................    codigoBajar=read_eeprom(16); 
0E1A:  MOVFF  FF2,E8
0E1E:  BCF    FF2.6
0E20:  BCF    FF2.7
0E22:  MOVLW  10
0E24:  MOVWF  FA9
0E26:  BCF    FA6.6
0E28:  BCF    FA6.7
0E2A:  BSF    FA6.0
0E2C:  MOVF   FA8,W
0E2E:  BTFSC  xE8.6
0E30:  BSF    FF2.6
0E32:  BTFSC  xE8.7
0E34:  BSF    FF2.7
0E36:  MOVWF  53
....................    delay_ms(20); 
0E38:  MOVLW  14
0E3A:  MOVWF  xFF
0E3C:  RCALL  0940
....................    codigoDetener=read_eeprom(17); 
0E3E:  MOVFF  FF2,E8
0E42:  BCF    FF2.6
0E44:  BCF    FF2.7
0E46:  MOVLW  11
0E48:  MOVWF  FA9
0E4A:  BCF    FA6.6
0E4C:  BCF    FA6.7
0E4E:  BSF    FA6.0
0E50:  MOVF   FA8,W
0E52:  BTFSC  xE8.6
0E54:  BSF    FF2.6
0E56:  BTFSC  xE8.7
0E58:  BSF    FF2.7
0E5A:  MOVWF  54
....................    delay_ms(20); 
0E5C:  MOVLW  14
0E5E:  MOVWF  xFF
0E60:  RCALL  0940
....................    G16=make16(G_h,G_l); 
0E62:  MOVFF  3A,5C
0E66:  MOVFF  39,5B
....................    G=G16; 
0E6A:  MOVFF  5C,101
0E6E:  MOVFF  5B,100
0E72:  RCALL  0BC4
0E74:  MOVFF  03,C0
0E78:  MOVFF  02,BF
0E7C:  MOVFF  01,BE
0E80:  MOVFF  00,BD
....................    horas=make16(horasH,horasL); 
0E84:  MOVFF  38,5A
0E88:  MOVFF  37,59
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
0E8C:  MOVFF  3B,3D
0E90:  MOVFF  3C,3E
.................... } 
0E94:  GOTO   25E4 (RETURN)
....................  
.................... void LimitaValores(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0){ 
*
0F3E:  BTFSC  4D.7
0F40:  BRA    0F48
0F42:  MOVF   4D,W
0F44:  SUBLW  09
0F46:  BNC   0F4C
0F48:  BTFSS  4D.7
0F4A:  BRA    0F7E
....................       Contrasena[0]=0;write_eeprom(0,0);delay_ms(20); 
0F4C:  CLRF   4D
0F4E:  CLRF   FA9
0F50:  CLRF   FA8
0F52:  BCF    FA6.6
0F54:  BCF    FA6.7
0F56:  BSF    FA6.2
0F58:  MOVF   FF2,W
0F5A:  MOVWF  00
0F5C:  BCF    FF2.6
0F5E:  BCF    FF2.7
0F60:  MOVLB  F
0F62:  MOVLW  55
0F64:  MOVWF  FA7
0F66:  MOVLW  AA
0F68:  MOVWF  FA7
0F6A:  BSF    FA6.1
0F6C:  BTFSC  FA6.1
0F6E:  BRA    0F6C
0F70:  BCF    FA6.2
0F72:  MOVF   00,W
0F74:  IORWF  FF2,F
0F76:  MOVLW  14
0F78:  MOVLB  0
0F7A:  MOVWF  xFF
0F7C:  RCALL  0940
....................    } 
....................    if(Contrasena[1]>9 || Contrasena[1]<0){ 
0F7E:  BTFSC  4E.7
0F80:  BRA    0F88
0F82:  MOVF   4E,W
0F84:  SUBLW  09
0F86:  BNC   0F8E
0F88:  BTFSC  4E.7
0F8A:  BRA    0F8E
0F8C:  BRA    0FC2
....................       Contrasena[1]=0;write_eeprom(1,0);delay_ms(20); 
0F8E:  CLRF   4E
0F90:  MOVLW  01
0F92:  MOVWF  FA9
0F94:  CLRF   FA8
0F96:  BCF    FA6.6
0F98:  BCF    FA6.7
0F9A:  BSF    FA6.2
0F9C:  MOVF   FF2,W
0F9E:  MOVWF  00
0FA0:  BCF    FF2.6
0FA2:  BCF    FF2.7
0FA4:  MOVLB  F
0FA6:  MOVLW  55
0FA8:  MOVWF  FA7
0FAA:  MOVLW  AA
0FAC:  MOVWF  FA7
0FAE:  BSF    FA6.1
0FB0:  BTFSC  FA6.1
0FB2:  BRA    0FB0
0FB4:  BCF    FA6.2
0FB6:  MOVF   00,W
0FB8:  IORWF  FF2,F
0FBA:  MOVLW  14
0FBC:  MOVLB  0
0FBE:  MOVWF  xFF
0FC0:  RCALL  0940
....................    } 
....................    if(Contrasena[2]>9 || Contrasena[2]<0){ 
0FC2:  BTFSC  4F.7
0FC4:  BRA    0FCC
0FC6:  MOVF   4F,W
0FC8:  SUBLW  09
0FCA:  BNC   0FD2
0FCC:  BTFSC  4F.7
0FCE:  BRA    0FD2
0FD0:  BRA    1006
....................       Contrasena[2]=0;write_eeprom(2,0);delay_ms(20); 
0FD2:  CLRF   4F
0FD4:  MOVLW  02
0FD6:  MOVWF  FA9
0FD8:  CLRF   FA8
0FDA:  BCF    FA6.6
0FDC:  BCF    FA6.7
0FDE:  BSF    FA6.2
0FE0:  MOVF   FF2,W
0FE2:  MOVWF  00
0FE4:  BCF    FF2.6
0FE6:  BCF    FF2.7
0FE8:  MOVLB  F
0FEA:  MOVLW  55
0FEC:  MOVWF  FA7
0FEE:  MOVLW  AA
0FF0:  MOVWF  FA7
0FF2:  BSF    FA6.1
0FF4:  BTFSC  FA6.1
0FF6:  BRA    0FF4
0FF8:  BCF    FA6.2
0FFA:  MOVF   00,W
0FFC:  IORWF  FF2,F
0FFE:  MOVLW  14
1000:  MOVLB  0
1002:  MOVWF  xFF
1004:  RCALL  0940
....................    } 
....................    if(Contrasena[3]>9 || Contrasena[3]<0){ 
1006:  BTFSC  50.7
1008:  BRA    1010
100A:  MOVF   50,W
100C:  SUBLW  09
100E:  BNC   1016
1010:  BTFSC  50.7
1012:  BRA    1016
1014:  BRA    104A
....................       Contrasena[3]=0;write_eeprom(3,0);delay_ms(20); 
1016:  CLRF   50
1018:  MOVLW  03
101A:  MOVWF  FA9
101C:  CLRF   FA8
101E:  BCF    FA6.6
1020:  BCF    FA6.7
1022:  BSF    FA6.2
1024:  MOVF   FF2,W
1026:  MOVWF  00
1028:  BCF    FF2.6
102A:  BCF    FF2.7
102C:  MOVLB  F
102E:  MOVLW  55
1030:  MOVWF  FA7
1032:  MOVLW  AA
1034:  MOVWF  FA7
1036:  BSF    FA6.1
1038:  BTFSC  FA6.1
103A:  BRA    1038
103C:  BCF    FA6.2
103E:  MOVF   00,W
1040:  IORWF  FF2,F
1042:  MOVLW  14
1044:  MOVLB  0
1046:  MOVWF  xFF
1048:  RCALL  0940
....................    } 
....................    if(estadoalarma>1){ 
104A:  MOVLW  00
104C:  BTFSC  2A.4
104E:  MOVLW  01
1050:  SUBLW  01
1052:  BC    108A
....................       estadoalarma=1;write_eeprom(4,1);delay_ms(20); 
1054:  BSF    2A.4
1056:  MOVLW  04
1058:  MOVWF  FA9
105A:  MOVLW  01
105C:  MOVWF  FA8
105E:  BCF    FA6.6
1060:  BCF    FA6.7
1062:  BSF    FA6.2
1064:  MOVF   FF2,W
1066:  MOVWF  00
1068:  BCF    FF2.6
106A:  BCF    FF2.7
106C:  MOVLB  F
106E:  MOVLW  55
1070:  MOVWF  FA7
1072:  MOVLW  AA
1074:  MOVWF  FA7
1076:  BSF    FA6.1
1078:  BTFSC  FA6.1
107A:  BRA    1078
107C:  BCF    FA6.2
107E:  MOVF   00,W
1080:  IORWF  FF2,F
1082:  MOVLW  14
1084:  MOVLB  0
1086:  MOVWF  xFF
1088:  RCALL  0940
....................    } 
....................    if(tempo_minutos>200){ 
108A:  MOVF   3B,W
108C:  SUBLW  C8
108E:  BC    10C8
....................       tempo_minutos=20;write_eeprom(5,20);delay_ms(20); 
1090:  MOVLW  14
1092:  MOVWF  3B
1094:  MOVLW  05
1096:  MOVWF  FA9
1098:  MOVLW  14
109A:  MOVWF  FA8
109C:  BCF    FA6.6
109E:  BCF    FA6.7
10A0:  BSF    FA6.2
10A2:  MOVF   FF2,W
10A4:  MOVWF  00
10A6:  BCF    FF2.6
10A8:  BCF    FF2.7
10AA:  MOVLB  F
10AC:  MOVLW  55
10AE:  MOVWF  FA7
10B0:  MOVLW  AA
10B2:  MOVWF  FA7
10B4:  BSF    FA6.1
10B6:  BTFSC  FA6.1
10B8:  BRA    10B6
10BA:  BCF    FA6.2
10BC:  MOVF   00,W
10BE:  IORWF  FF2,F
10C0:  MOVLW  14
10C2:  MOVLB  0
10C4:  MOVWF  xFF
10C6:  RCALL  0940
....................    } 
....................    if(tempo_segundos>59){ 
10C8:  MOVF   3C,W
10CA:  SUBLW  3B
10CC:  BC    1102
....................       tempo_segundos=0;write_eeprom(6,0);delay_ms(20); 
10CE:  CLRF   3C
10D0:  MOVLW  06
10D2:  MOVWF  FA9
10D4:  CLRF   FA8
10D6:  BCF    FA6.6
10D8:  BCF    FA6.7
10DA:  BSF    FA6.2
10DC:  MOVF   FF2,W
10DE:  MOVWF  00
10E0:  BCF    FF2.6
10E2:  BCF    FF2.7
10E4:  MOVLB  F
10E6:  MOVLW  55
10E8:  MOVWF  FA7
10EA:  MOVLW  AA
10EC:  MOVWF  FA7
10EE:  BSF    FA6.1
10F0:  BTFSC  FA6.1
10F2:  BRA    10F0
10F4:  BCF    FA6.2
10F6:  MOVF   00,W
10F8:  IORWF  FF2,F
10FA:  MOVLW  14
10FC:  MOVLB  0
10FE:  MOVWF  xFF
1100:  RCALL  0940
....................    } 
....................    if(segundos>60){ 
1102:  MOVF   35,W
1104:  SUBLW  3C
1106:  BC    113C
....................       segundos=0;write_eeprom(7,0);delay_ms(20); 
1108:  CLRF   35
110A:  MOVLW  07
110C:  MOVWF  FA9
110E:  CLRF   FA8
1110:  BCF    FA6.6
1112:  BCF    FA6.7
1114:  BSF    FA6.2
1116:  MOVF   FF2,W
1118:  MOVWF  00
111A:  BCF    FF2.6
111C:  BCF    FF2.7
111E:  MOVLB  F
1120:  MOVLW  55
1122:  MOVWF  FA7
1124:  MOVLW  AA
1126:  MOVWF  FA7
1128:  BSF    FA6.1
112A:  BTFSC  FA6.1
112C:  BRA    112A
112E:  BCF    FA6.2
1130:  MOVF   00,W
1132:  IORWF  FF2,F
1134:  MOVLW  14
1136:  MOVLB  0
1138:  MOVWF  xFF
113A:  RCALL  0940
....................    } 
....................    if(minutos>60){ 
113C:  MOVF   36,W
113E:  SUBLW  3C
1140:  BC    1178
....................       minutos=0;write_eeprom(8,0);delay_ms(20); 
1142:  CLRF   36
1144:  MOVLW  08
1146:  MOVWF  FA9
1148:  CLRF   FA8
114A:  BCF    FA6.6
114C:  BCF    FA6.7
114E:  BSF    FA6.2
1150:  MOVF   FF2,W
1152:  MOVWF  00
1154:  BCF    FF2.6
1156:  BCF    FF2.7
1158:  MOVLB  F
115A:  MOVLW  55
115C:  MOVWF  FA7
115E:  MOVLW  AA
1160:  MOVWF  FA7
1162:  BSF    FA6.1
1164:  BTFSC  FA6.1
1166:  BRA    1164
1168:  BCF    FA6.2
116A:  MOVF   00,W
116C:  IORWF  FF2,F
116E:  MOVLW  14
1170:  MOVLB  0
1172:  MOVWF  xFF
1174:  CALL   0940
....................    } 
....................    if(horas>10000){ 
1178:  MOVF   5A,W
117A:  SUBLW  26
117C:  BC    11F6
117E:  XORLW  FF
1180:  BNZ   1188
1182:  MOVF   59,W
1184:  SUBLW  10
1186:  BC    11F6
....................       horas=0;write_eeprom(9,10);delay_ms(20);write_eeprom(10,0);delay_ms(20); 
1188:  CLRF   5A
118A:  CLRF   59
118C:  MOVLW  09
118E:  MOVWF  FA9
1190:  MOVLW  0A
1192:  MOVWF  FA8
1194:  BCF    FA6.6
1196:  BCF    FA6.7
1198:  BSF    FA6.2
119A:  MOVF   FF2,W
119C:  MOVWF  00
119E:  BCF    FF2.6
11A0:  BCF    FF2.7
11A2:  MOVLB  F
11A4:  MOVLW  55
11A6:  MOVWF  FA7
11A8:  MOVLW  AA
11AA:  MOVWF  FA7
11AC:  BSF    FA6.1
11AE:  BTFSC  FA6.1
11B0:  BRA    11AE
11B2:  BCF    FA6.2
11B4:  MOVF   00,W
11B6:  IORWF  FF2,F
11B8:  MOVLW  14
11BA:  MOVLB  0
11BC:  MOVWF  xFF
11BE:  CALL   0940
11C2:  MOVLW  0A
11C4:  MOVWF  FA9
11C6:  CLRF   FA8
11C8:  BCF    FA6.6
11CA:  BCF    FA6.7
11CC:  BSF    FA6.2
11CE:  MOVF   FF2,W
11D0:  MOVWF  00
11D2:  BCF    FF2.6
11D4:  BCF    FF2.7
11D6:  MOVLB  F
11D8:  MOVLW  55
11DA:  MOVWF  FA7
11DC:  MOVLW  AA
11DE:  MOVWF  FA7
11E0:  BSF    FA6.1
11E2:  BTFSC  FA6.1
11E4:  BRA    11E2
11E6:  BCF    FA6.2
11E8:  MOVF   00,W
11EA:  IORWF  FF2,F
11EC:  MOVLW  14
11EE:  MOVLB  0
11F0:  MOVWF  xFF
11F2:  CALL   0940
....................    } 
....................    if(G<450 || G>600){ 
11F6:  MOVFF  C0,FF
11FA:  MOVFF  BF,FE
11FE:  MOVFF  BE,FD
1202:  MOVFF  BD,FC
1206:  MOVLB  1
1208:  CLRF   x03
120A:  CLRF   x02
120C:  MOVLW  61
120E:  MOVWF  x01
1210:  MOVLW  87
1212:  MOVWF  x00
1214:  MOVLB  0
1216:  RCALL  0E98
1218:  BC    123A
121A:  CLRF   xFF
121C:  CLRF   xFE
121E:  MOVLW  16
1220:  MOVWF  xFD
1222:  MOVLW  88
1224:  MOVWF  xFC
1226:  MOVFF  C0,103
122A:  MOVFF  BF,102
122E:  MOVFF  BE,101
1232:  MOVFF  BD,100
1236:  RCALL  0E98
1238:  BNC   12B4
....................       G=511;write_eeprom(11,0xff);delay_ms(20);write_eeprom(12,0x01);delay_ms(20); 
123A:  CLRF   xC0
123C:  MOVLW  80
123E:  MOVWF  xBF
1240:  MOVLW  7F
1242:  MOVWF  xBE
1244:  MOVLW  87
1246:  MOVWF  xBD
1248:  MOVLW  0B
124A:  MOVWF  FA9
124C:  MOVLW  FF
124E:  MOVWF  FA8
1250:  BCF    FA6.6
1252:  BCF    FA6.7
1254:  BSF    FA6.2
1256:  MOVF   FF2,W
1258:  MOVWF  00
125A:  BCF    FF2.6
125C:  BCF    FF2.7
125E:  MOVLB  F
1260:  MOVLW  55
1262:  MOVWF  FA7
1264:  MOVLW  AA
1266:  MOVWF  FA7
1268:  BSF    FA6.1
126A:  BTFSC  FA6.1
126C:  BRA    126A
126E:  BCF    FA6.2
1270:  MOVF   00,W
1272:  IORWF  FF2,F
1274:  MOVLW  14
1276:  MOVLB  0
1278:  MOVWF  xFF
127A:  CALL   0940
127E:  MOVLW  0C
1280:  MOVWF  FA9
1282:  MOVLW  01
1284:  MOVWF  FA8
1286:  BCF    FA6.6
1288:  BCF    FA6.7
128A:  BSF    FA6.2
128C:  MOVF   FF2,W
128E:  MOVWF  00
1290:  BCF    FF2.6
1292:  BCF    FF2.7
1294:  MOVLB  F
1296:  MOVLW  55
1298:  MOVWF  FA7
129A:  MOVLW  AA
129C:  MOVWF  FA7
129E:  BSF    FA6.1
12A0:  BTFSC  FA6.1
12A2:  BRA    12A0
12A4:  BCF    FA6.2
12A6:  MOVF   00,W
12A8:  IORWF  FF2,F
12AA:  MOVLW  14
12AC:  MOVLB  0
12AE:  MOVWF  xFF
12B0:  CALL   0940
....................    } 
....................    if(Vel1>6){ 
12B4:  MOVF   56,W
12B6:  SUBLW  06
12B8:  BC    12F4
....................       Vel1=4;write_eeprom(13,4);delay_ms(20); 
12BA:  MOVLW  04
12BC:  MOVWF  56
12BE:  MOVLW  0D
12C0:  MOVWF  FA9
12C2:  MOVLW  04
12C4:  MOVWF  FA8
12C6:  BCF    FA6.6
12C8:  BCF    FA6.7
12CA:  BSF    FA6.2
12CC:  MOVF   FF2,W
12CE:  MOVWF  00
12D0:  BCF    FF2.6
12D2:  BCF    FF2.7
12D4:  MOVLB  F
12D6:  MOVLW  55
12D8:  MOVWF  FA7
12DA:  MOVLW  AA
12DC:  MOVWF  FA7
12DE:  BSF    FA6.1
12E0:  BTFSC  FA6.1
12E2:  BRA    12E0
12E4:  BCF    FA6.2
12E6:  MOVF   00,W
12E8:  IORWF  FF2,F
12EA:  MOVLW  14
12EC:  MOVLB  0
12EE:  MOVWF  xFF
12F0:  CALL   0940
....................    } 
.................... } 
12F4:  GOTO   25E8 (RETURN)
....................  
.................... void bajarVidrio(){ 
....................    pulsoSubir=OFF; 
....................    if(VIDRIOUUP || !VIDRIODN){ 
....................       O1_on;O2_off; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoBajar=OFF; 
....................    } 
.................... } 
....................  
.................... void subirVidrio(){ 
....................    pulsoBajar=OFF; 
....................    if(!VIDRIOUUP || VIDRIODN){ 
....................       O1_off;O2_on; 
....................    }else{ 
....................       O1_off;O2_off; 
....................       pulsoSubir=OFF; 
....................    } 
.................... } 
....................  
.................... void detenerVidrio(){ 
....................    O1_off;O2_off; 
.................... } 
....................  
.................... void leeControlRemoto(){ 
....................    if(NUEVO_DATO==1){ 
....................       NUEVO_DATO=0; 
....................       BYTE_IR[0]=BIT_BYTE(BITS[0],BITS[1],BITS[2],BITS[3],BITS[4],BITS[5],BITS[6],BITS[7]); 
....................       BYTE_IR[1]=BIT_BYTE(BITS[8],BITS[9],BITS[10],BITS[11],BITS[12],BITS[13],BITS[14],BITS[15]); 
....................       BYTE_IR[2]=BIT_BYTE(BITS[16],BITS[17],BITS[18],BITS[19],BITS[20],BITS[21],BITS[22],BITS[23]); 
....................       BYTE_IR[3]=BIT_BYTE(BITS[24],BITS[25],BITS[26],BITS[27],BITS[28],BITS[29],BITS[30],BITS[31]); 
....................     
....................       if(BYTE_IR[3]==codigoBajar){ //Bajar Vidrio  //AD 
....................          pulsoBajar=ON; 
....................       } 
....................        
....................       if(BYTE_IR[3]==codigoSubir){ // Subir Vidrio //E7 
....................          pulsoSubir=ON; 
....................       } 
....................       
....................       if(BYTE_IR[3]==codigoDetener){ //F7 E3 A5 
....................          O1_off;O2_off; 
....................          pulsoSubir=OFF; 
....................          pulsoBajar=OFF; 
....................       } 
....................    } 
....................     
....................    if(pulsoBajar) 
....................       bajarVidrio(); 
....................        
....................    if(pulsoSubir) 
....................       subirVidrio();     
....................       
.................... } 
....................  
....................  
.................... /* 
.................... #int_EXT1 HIGH 
.................... void RB1(){ 
....................    Ta=get_timer1(); 
....................    TICK = Ta-tb; 
....................    Tb = Ta; 
....................     
....................    Entro=1; 
....................     
....................    if(BIT_START==1){ 
....................        //BIT 1 
....................        if(TICK>960 && TICK < 1280)  // 700 con Pres 4 y 20MHz  
....................       { 
....................          BITS[n]=1; n++; 
....................       } 
....................       //BIT 0 
....................        if(TICK>400 && TICK < 720)  // 350 con Pres 4 y 20MHz  
....................       { 
....................          BITS[n]=0; n++; 
....................       } 
....................       if(n>=32){ 
....................          NUEVO_DATO=1; 
....................          BIT_START=0; 
....................       } 
....................     
....................    } 
....................    //BIT START 
....................    if(TICK>2800 && TICK < 5800 && BIT_START==0)  //3500 con Pres 4 y 20MHz  
....................    { 
....................       BIT_START=1; 
....................       n=0;  
....................    } 
.................... } 
.................... */ 
.................... #int_EXT HIGH 
.................... void ext0() {   
....................    Cruce=ON; 
*
0248:  BSF    2B.5
....................     
....................    if(VelMotor==5){ 
024A:  MOVF   xD0,W
024C:  SUBLW  05
024E:  BNZ   0260
....................       set_timer0(228); // Cada cuenta del timer0 es 51.2us y timer1 es 1.59us 
0250:  CLRF   FD7
0252:  MOVLW  E4
0254:  MOVWF  FD6
....................       Motor_off;  
0256:  BCF    F8B.2
0258:  BCF    F94.2
....................       Motor2_off;  
025A:  BCF    F8B.1
025C:  BCF    F94.1
....................    }else if(VelMotor==4){ 
025E:  BRA    02B4
0260:  MOVF   xD0,W
0262:  SUBLW  04
0264:  BNZ   0276
....................       set_timer0(201);       
0266:  CLRF   FD7
0268:  MOVLW  C9
026A:  MOVWF  FD6
....................       Motor_off;  
026C:  BCF    F8B.2
026E:  BCF    F94.2
....................       Motor2_off;  
0270:  BCF    F8B.1
0272:  BCF    F94.1
....................    }else if(VelMotor==3){ 
0274:  BRA    02B4
0276:  MOVF   xD0,W
0278:  SUBLW  03
027A:  BNZ   028C
....................       set_timer0(196); 
027C:  CLRF   FD7
027E:  MOVLW  C4
0280:  MOVWF  FD6
....................       Motor_off;  
0282:  BCF    F8B.2
0284:  BCF    F94.2
....................       Motor2_off;  
0286:  BCF    F8B.1
0288:  BCF    F94.1
....................    }else if(VelMotor==2){ 
028A:  BRA    02B4
028C:  MOVF   xD0,W
028E:  SUBLW  02
0290:  BNZ   02A2
....................       set_timer0(188); 
0292:  CLRF   FD7
0294:  MOVLW  BC
0296:  MOVWF  FD6
....................       Motor_off;  
0298:  BCF    F8B.2
029A:  BCF    F94.2
....................       Motor2_off;  
029C:  BCF    F8B.1
029E:  BCF    F94.1
....................    }else if(VelMotor==1){ 
02A0:  BRA    02B4
02A2:  DECFSZ xD0,W
02A4:  BRA    02B4
....................       set_timer0(180); 
02A6:  CLRF   FD7
02A8:  MOVLW  B4
02AA:  MOVWF  FD6
....................       Motor_off;  
02AC:  BCF    F8B.2
02AE:  BCF    F94.2
....................       Motor2_off;  
02B0:  BCF    F8B.1
02B2:  BCF    F94.1
....................    } 
....................    pulsos++;    
02B4:  INCF   xC1,F
02B6:  BTFSC  FD8.2
02B8:  INCF   xC2,F
.................... } 
....................  
02BA:  BCF    FF2.1
02BC:  GOTO   00FE
.................... #int_TIMER0 HIGH 
.................... void temp0s(void){ 
....................    if(VelMotor>0 && VelMotor<6){ 
02C0:  MOVF   xD0,F
02C2:  BZ    02EC
02C4:  MOVF   xD0,W
02C6:  SUBLW  05
02C8:  BNC   02EC
....................    if(Cruce){         //If the triac pin is low we change the state and prepare the timer 
02CA:  BTFSS  2B.5
02CC:  BRA    02E0
....................       Motor_on; 
02CE:  BSF    F8B.2
02D0:  BCF    F94.2
....................       Motor2_on;  
02D2:  BSF    F8B.1
02D4:  BCF    F94.1
....................       set_timer0(253);         // Next timer overflow will clear the triac pin 
02D6:  CLRF   FD7
02D8:  MOVLW  FD
02DA:  MOVWF  FD6
....................       Cruce=OFF;         // Flag now signals that we need to turn off the triac output pin 
02DC:  BCF    2B.5
....................    } else {            //The triac has been triggered, cut the pulse 
02DE:  BRA    02EC
....................       Motor_off; 
02E0:  BCF    F8B.2
02E2:  BCF    F94.2
....................       Motor2_off;  
02E4:  BCF    F8B.1
02E6:  BCF    F94.1
....................       set_timer0(0);         //Set timer period to maximum, timer should not overflow untill next zero cross interrupt 
02E8:  CLRF   FD7
02EA:  CLRF   FD6
....................    } 
....................    } 
.................... } 
....................  
.................... //#int_TIMER2 
02EC:  BCF    FF2.2
02EE:  GOTO   00FE
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    //set_timer2(231);//100.25uS 
....................    set_timer1(45536);//5ms 
02F2:  MOVLW  B1
02F4:  MOVWF  FCF
02F6:  MOVLW  E0
02F8:  MOVWF  FCE
....................    tiempos++; 
02FA:  INCF   57,F
02FC:  BTFSC  FD8.2
02FE:  INCF   58,F
....................    // 
....................      
....................    //if(tiempos>=10000){ 
....................    //if(tiempos>=9710){//1s 
....................    if(tiempos>=200){//1s 
0300:  MOVF   58,F
0302:  BNZ   030A
0304:  MOVF   57,W
0306:  SUBLW  C7
0308:  BC    03A4
....................       if(UP) 
030A:  BSF    F92.5
030C:  BTFSC  F80.5
030E:  BRA    0318
....................          tup++; 
0310:  INCF   xC5,F
0312:  BTFSC  FD8.2
0314:  INCF   xC6,F
....................       else 
0316:  BRA    031C
....................          tup=0; 
0318:  CLRF   xC6
031A:  CLRF   xC5
....................           
....................       if(DOWN) 
031C:  BSF    F96.0
031E:  BTFSC  F84.0
0320:  BRA    032A
....................          tdown++; 
0322:  INCF   xC7,F
0324:  BTFSC  FD8.2
0326:  INCF   xC8,F
....................       else 
0328:  BRA    032E
....................          tdown=0; 
032A:  CLRF   xC8
032C:  CLRF   xC7
....................           
....................       if(RIGHT) 
032E:  BSF    F96.1
0330:  BTFSC  F84.1
0332:  BRA    033C
....................          tright++; 
0334:  INCF   xC9,F
0336:  BTFSC  FD8.2
0338:  INCF   xCA,F
....................       else 
033A:  BRA    0340
....................          tright=0; 
033C:  CLRF   xCA
033E:  CLRF   xC9
....................        
....................       if(IZQU) 
0340:  BSF    F96.2
0342:  BTFSC  F84.2
0344:  BRA    034E
....................          tleft++; 
0346:  INCF   xCB,F
0348:  BTFSC  FD8.2
034A:  INCF   xCC,F
....................       else 
034C:  BRA    0352
....................          tleft=0; 
034E:  CLRF   xCC
0350:  CLRF   xCB
....................       output_toggle(PIN_A3); 
0352:  BCF    F92.3
0354:  BTG    F89.3
....................       tiempos=0;tiemporeset++;Lectura=1; 
0356:  CLRF   58
0358:  CLRF   57
035A:  INCF   43,F
035C:  BSF    2A.0
....................     
....................       if(ActivaBuzzer==1){ 
035E:  DECFSZ 51,W
0360:  BRA    0376
....................          if(estadobuzzer==0){ 
0362:  BTFSC  2A.3
0364:  BRA    036C
....................             Buzzer_off; 
0366:  BCF    F8B.0
0368:  BCF    F94.0
....................          }else{ 
036A:  BRA    0374
....................             if(estadoalarma==1) 
036C:  BTFSS  2A.4
036E:  BRA    0374
....................                Buzzer_on; 
0370:  BSF    F8B.0
0372:  BCF    F94.0
....................          } 
....................          estadobuzzer=!estadobuzzer; 
0374:  BTG    2A.3
....................       } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................       if(estadouv==1){ 
0376:  BTFSS  29.0
0378:  BRA    03A4
....................          segundos++; 
037A:  INCF   35,F
....................          if(tiempo_cumplido==0){ 
037C:  BTFSC  29.7
037E:  BRA    03A4
....................             if(tempo_segundos>0){ 
0380:  MOVF   3C,F
0382:  BZ    0388
....................                tempo_segundos--; 
0384:  DECF   3C,F
....................             }else{ 
0386:  BRA    03A4
....................                if(tempo_minutos>0){ 
0388:  MOVF   3B,F
038A:  BZ    0394
....................                   tempo_minutos--; 
038C:  DECF   3B,F
....................                   tempo_segundos=59; 
038E:  MOVLW  3B
0390:  MOVWF  3C
....................                }else{ 
0392:  BRA    03A4
....................                   tiempo_cumplido=1; 
0394:  BSF    29.7
....................                   estadouv=0;Luz_UV_off; 
0396:  BCF    29.0
0398:  BSF    F8A.3
039A:  BCF    F93.3
....................                   tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
039C:  MOVFF  3D,3B
03A0:  MOVFF  3E,3C
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
03A4:  BCF    F9E.0
03A6:  GOTO   0064
.................... void main () 
.................... { 
*
2414:  CLRF   FF8
2416:  BSF    FF1.2
2418:  BCF    F9F.0
241A:  BSF    FD0.7
241C:  BSF    07.7
241E:  CLRF   FEA
2420:  CLRF   FE9
2422:  BCF    29.0
2424:  BCF    29.1
2426:  BCF    29.2
2428:  BCF    29.3
242A:  BCF    29.4
242C:  BCF    29.5
242E:  BCF    29.6
2430:  BCF    29.7
2432:  BCF    2A.0
2434:  BCF    2A.1
2436:  BCF    2A.2
2438:  BCF    2A.3
243A:  BCF    2A.4
243C:  BCF    2A.5
243E:  BCF    2A.6
2440:  BCF    2A.7
2442:  BCF    2B.0
2444:  BCF    2B.1
2446:  BCF    2B.2
2448:  CLRF   2C
244A:  MOVLW  07
244C:  MOVWF  2D
244E:  MOVLW  02
2450:  MOVWF  2E
2452:  MOVLW  0B
2454:  MOVWF  2F
2456:  MOVLW  02
2458:  MOVWF  30
245A:  MOVLW  03
245C:  MOVWF  31
245E:  MOVLW  02
2460:  MOVWF  32
2462:  MOVWF  33
2464:  MOVLW  04
2466:  MOVWF  34
2468:  CLRF   35
246A:  CLRF   36
246C:  CLRF   37
246E:  CLRF   38
2470:  CLRF   39
2472:  CLRF   3A
2474:  CLRF   3B
2476:  CLRF   3C
2478:  CLRF   3D
247A:  CLRF   3E
247C:  CLRF   3F
247E:  CLRF   40
2480:  CLRF   41
2482:  MOVLW  01
2484:  MOVWF  42
2486:  CLRF   43
2488:  CLRF   44
248A:  CLRF   45
248C:  CLRF   51
248E:  CLRF   52
2490:  CLRF   53
2492:  CLRF   54
2494:  CLRF   55
2496:  MOVLW  04
2498:  MOVWF  56
249A:  CLRF   5A
249C:  CLRF   59
249E:  CLRF   5C
24A0:  CLRF   5B
24A2:  CLRF   xB0
24A4:  CLRF   xAF
24A6:  CLRF   xAE
24A8:  CLRF   xAD
24AA:  CLRF   xB4
24AC:  CLRF   xB3
24AE:  CLRF   xB2
24B0:  CLRF   xB1
24B2:  CLRF   xB8
24B4:  CLRF   xB7
24B6:  CLRF   xB6
24B8:  CLRF   xB5
24BA:  CLRF   xBC
24BC:  CLRF   xBB
24BE:  CLRF   xBA
24C0:  CLRF   xB9
24C2:  CLRF   xC0
24C4:  CLRF   xBF
24C6:  CLRF   xBE
24C8:  MOVLW  80
24CA:  MOVWF  xBD
24CC:  BSF    2B.3
24CE:  BCF    2B.4
24D0:  CLRF   xC2
24D2:  CLRF   xC1
24D4:  CLRF   xC4
24D6:  CLRF   xC3
24D8:  CLRF   xC6
24DA:  CLRF   xC5
24DC:  CLRF   xC8
24DE:  CLRF   xC7
24E0:  CLRF   xCA
24E2:  CLRF   xC9
24E4:  CLRF   xCC
24E6:  CLRF   xCB
24E8:  BCF    2B.5
24EA:  BCF    2B.6
24EC:  CLRF   xCE
24EE:  CLRF   xCD
24F0:  CLRF   xCF
24F2:  CLRF   xD0
24F4:  CLRF   xD4
24F6:  CLRF   xD3
24F8:  CLRF   xD2
24FA:  CLRF   xD1
24FC:  CLRF   xD8
24FE:  CLRF   xD7
2500:  CLRF   xD6
2502:  CLRF   xD5
2504:  CLRF   xE2
2506:  CLRF   xE1
2508:  MOVF   FC1,W
250A:  ANDLW  C0
250C:  IORLW  0F
250E:  MOVWF  FC1
2510:  MOVLW  07
2512:  MOVWF  FB4
2514:  MOVLW  3E
2516:  MOVWF  46
2518:  MOVLW  20
251A:  MOVWF  47
251C:  MOVLW  5E
251E:  MOVWF  48
2520:  CLRF   49
2522:  CLRF   4A
2524:  CLRF   4B
2526:  CLRF   4C
2528:  CLRF   4D
252A:  CLRF   4E
252C:  CLRF   4F
252E:  CLRF   50
2530:  CLRF   5D
2532:  CLRF   5E
2534:  CLRF   5F
2536:  CLRF   x60
2538:  CLRF   x61
253A:  CLRF   x62
253C:  CLRF   x63
253E:  CLRF   x64
2540:  CLRF   x65
2542:  CLRF   x66
2544:  CLRF   x67
2546:  CLRF   x68
2548:  CLRF   x69
254A:  CLRF   x6A
254C:  CLRF   x6B
254E:  CLRF   x6C
2550:  CLRF   x6D
2552:  CLRF   x6E
2554:  CLRF   x6F
2556:  CLRF   x70
2558:  CLRF   x71
255A:  CLRF   x72
255C:  CLRF   x73
255E:  CLRF   x74
2560:  CLRF   x75
2562:  CLRF   x76
2564:  CLRF   x77
2566:  CLRF   x78
2568:  CLRF   x79
256A:  CLRF   x7A
256C:  CLRF   x7B
256E:  CLRF   x7C
2570:  CLRF   x7D
2572:  CLRF   x7E
2574:  CLRF   x7F
2576:  CLRF   x80
2578:  CLRF   x81
257A:  CLRF   x82
257C:  CLRF   x83
257E:  CLRF   x84
2580:  CLRF   x85
2582:  CLRF   x86
2584:  CLRF   x87
2586:  CLRF   x88
2588:  CLRF   x89
258A:  CLRF   x8A
258C:  CLRF   x8B
258E:  CLRF   x8C
2590:  CLRF   x8D
2592:  CLRF   x8E
2594:  CLRF   x8F
2596:  CLRF   x90
2598:  CLRF   x91
259A:  CLRF   x92
259C:  CLRF   x93
259E:  CLRF   x94
25A0:  CLRF   x95
25A2:  CLRF   x96
25A4:  CLRF   x97
25A6:  CLRF   x98
25A8:  CLRF   x99
25AA:  CLRF   x9A
25AC:  CLRF   x9B
25AE:  CLRF   x9C
25B0:  CLRF   x9D
25B2:  CLRF   x9E
25B4:  CLRF   x9F
25B6:  CLRF   xA0
25B8:  CLRF   xA1
25BA:  CLRF   xA2
25BC:  CLRF   xA3
25BE:  CLRF   xA4
25C0:  CLRF   xA5
25C2:  CLRF   xA6
25C4:  CLRF   xA7
25C6:  CLRF   xA8
25C8:  CLRF   xA9
25CA:  CLRF   xAA
25CC:  CLRF   xAB
25CE:  CLRF   xAC
....................    Motor_off; 
25D0:  BCF    F8B.2
25D2:  BCF    F94.2
....................    Motor2_off; 
25D4:  BCF    F8B.1
25D6:  BCF    F94.1
....................    ConfigInterrupciones(); 
25D8:  GOTO   0A3C
....................    MensajeBienvenida(); 
25DC:  GOTO   0B5E
....................    LeeEEPROM();  
25E0:  GOTO   0BFA
....................    LimitaValores(); 
25E4:  GOTO   0F3E
....................    Motor_off; 
25E8:  BCF    F8B.2
25EA:  BCF    F94.2
....................    Motor2_off; 
25EC:  BCF    F8B.1
25EE:  BCF    F94.1
.................... /*    
....................    if(UP && DOWN){ 
....................       delay_ms(500); 
....................       if(UP && DOWN){ 
....................          lcd_gotoxy(1,1); 
....................          printf(lcd_putc,"Cargando..."); 
....................          delay_ms(500); 
....................          printf(lcd_putc,"\f"); 
....................          for(;;){ 
....................             leeControlRemoto(); 
....................             lcd_gotoxy(1,1); 
....................             printf(lcd_putc,"Codigo Subir: %X   ",CodigoSubir); 
....................             lcd_gotoxy(1,2); 
....................             printf(lcd_putc,"Codigo Bajar: %X   ",CodigoBajar); 
....................             lcd_gotoxy(1,3); 
....................             printf(lcd_putc,"Codigo Detener: %X ",CodigoDetener); 
....................             lcd_gotoxy(1,4); 
....................             printf(lcd_putc,"Codigo:%X %X %X %X",BYTE_IR[0],BYTE_IR[1],BYTE_IR[2],BYTE_IR[3]); 
....................              
....................             if(UP){ 
....................                delay_ms(500); 
....................                if(UP){ 
....................                   codigoSubir=BYTE_IR[3]; 
....................                   write_eeprom(15,codigoSubir); 
....................                   delay_ms(20); 
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
....................                } 
....................             } 
....................              
....................             if(DOWN){ 
....................                delay_ms(500); 
....................                if(DOWN){ 
....................                   codigoBajar=BYTE_IR[3]; 
....................                   write_eeprom(16,codigoBajar); 
....................                   delay_ms(20); 
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
....................                } 
....................             } 
....................              
....................             if(RIGHT){ 
....................                delay_ms(500); 
....................                if(RIGHT){ 
....................                   codigoDetener=BYTE_IR[3]; 
....................                   write_eeprom(17,codigoDetener); 
....................                   delay_ms(20); 
....................                   Buzzer_on;delay_ms(500);Buzzer_off;    
....................                } 
....................             } 
....................              
....................             if(IZQU){ 
....................                delay_ms(500); 
....................                if(IZQU){ 
....................                   reset_cpu(); 
....................                } 
....................             } 
....................          } 
....................       } 
....................    } 
....................    */ 
....................    while(true){ 
....................    //leeControlRemoto(); 
....................     
....................    if(VelMotor==6){ 
25F0:  MOVF   xD0,W
25F2:  SUBLW  06
25F4:  BNZ   2602
....................       Motor_on; 
25F6:  BSF    F8B.2
25F8:  BCF    F94.2
....................       Motor2_on;  
25FA:  BSF    F8B.1
25FC:  BCF    F94.1
....................       set_timer0(0); 
25FE:  CLRF   FD7
2600:  CLRF   FD6
....................    } 
....................     
....................    if(VelMotor==0){ 
2602:  MOVF   xD0,F
2604:  BNZ   2612
....................       Motor_off; 
2606:  BCF    F8B.2
2608:  BCF    F94.2
....................       Motor2_off;  
260A:  BCF    F8B.1
260C:  BCF    F94.1
....................       set_timer0(0); 
260E:  CLRF   FD7
2610:  CLRF   FD6
....................    } 
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
2612:  MOVF   2C,F
2614:  BTFSS  FD8.2
2616:  BRA    2A22
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2618:  MOVLW  01
261A:  MOVWF  xFA
261C:  MOVWF  xFB
261E:  CALL   0A78
....................          printf(lcd_putc,"     Ingrese        "); 
2622:  MOVLW  AA
2624:  MOVWF  FF6
2626:  MOVLW  03
2628:  MOVWF  FF7
262A:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
262E:  MOVLW  01
2630:  MOVWF  xFA
2632:  MOVLW  02
2634:  MOVWF  xFB
2636:  CALL   0A78
....................          printf(lcd_putc,"    Contraseña      "); 
263A:  MOVLW  C0
263C:  MOVWF  FF6
263E:  MOVLW  03
2640:  MOVWF  FF7
2642:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
2646:  MOVLW  01
2648:  MOVWF  xFA
264A:  MOVLW  03
264C:  MOVWF  xFB
264E:  CALL   0A78
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2652:  MOVLW  D6
2654:  MOVWF  FF6
2656:  MOVLW  03
2658:  MOVWF  FF7
265A:  MOVLW  0A
265C:  MOVWF  xEC
265E:  CALL   12F8
2662:  MOVFF  49,E8
2666:  MOVLW  1F
2668:  MOVWF  xE9
266A:  CALL   1340
266E:  MOVFF  4A,E8
2672:  MOVLW  1F
2674:  MOVWF  xE9
2676:  CALL   1340
267A:  MOVFF  4B,E8
267E:  MOVLW  1F
2680:  MOVWF  xE9
2682:  CALL   1340
2686:  MOVFF  4C,E8
268A:  MOVLW  1F
268C:  MOVWF  xE9
268E:  CALL   1340
2692:  MOVLW  20
2694:  MOVWF  xF9
2696:  CALL   0AE0
269A:  MOVLW  20
269C:  MOVWF  xF9
269E:  CALL   0AE0
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
26A2:  MOVFF  2F,FA
26A6:  MOVLW  04
26A8:  MOVWF  xFB
26AA:  CALL   0A78
....................          lcd_putc(t[2]); 
26AE:  MOVFF  48,F9
26B2:  CALL   0AE0
....................           
....................          if(unidad>11&&unidad<14){ 
26B6:  MOVF   2F,W
26B8:  SUBLW  0B
26BA:  BC    26DA
26BC:  MOVF   2F,W
26BE:  SUBLW  0D
26C0:  BNC   26DA
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
26C2:  MOVLW  01
26C4:  SUBWF  2F,W
26C6:  MOVWF  xE8
26C8:  MOVWF  xFA
26CA:  MOVLW  04
26CC:  MOVWF  xFB
26CE:  CALL   0A78
....................             lcd_putc(t[1]); 
26D2:  MOVFF  47,F9
26D6:  CALL   0AE0
....................          } 
....................           
....................          Cambio=OFF; 
26DA:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
26DC:  BSF    F92.5
26DE:  BTFSC  F80.5
26E0:  BRA    2714
....................          delay_ms(20); 
26E2:  MOVLW  14
26E4:  MOVWF  xFF
26E6:  CALL   0940
....................          if(UP){ 
26EA:  BSF    F92.5
26EC:  BTFSC  F80.5
26EE:  BRA    2712
....................             if(Flanco == 0) { 
26F0:  BTFSC  29.3
26F2:  BRA    2712
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
26F4:  MOVLW  0B
26F6:  SUBWF  2F,W
26F8:  CLRF   03
26FA:  ADDLW  49
26FC:  MOVWF  FE9
26FE:  MOVLW  00
2700:  ADDWFC 03,W
2702:  MOVWF  FEA
2704:  INCF   FEF,F
2706:  BSF    29.3
2708:  MOVLW  1E
270A:  MOVWF  xFF
270C:  CALL   0940
2710:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2712:  BRA    2716
....................          Flanco = 0; 
2714:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2716:  BSF    F96.0
2718:  BTFSC  F84.0
271A:  BRA    274E
....................          delay_ms(20); 
271C:  MOVLW  14
271E:  MOVWF  xFF
2720:  CALL   0940
....................          if(DOWN){ 
2724:  BSF    F96.0
2726:  BTFSC  F84.0
2728:  BRA    274C
....................             if(Flanco2 == 0) { 
272A:  BTFSC  29.5
272C:  BRA    274C
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
272E:  MOVLW  0B
2730:  SUBWF  2F,W
2732:  CLRF   03
2734:  ADDLW  49
2736:  MOVWF  FE9
2738:  MOVLW  00
273A:  ADDWFC 03,W
273C:  MOVWF  FEA
273E:  DECF   FEF,F
2740:  BSF    29.5
2742:  MOVLW  1E
2744:  MOVWF  xFF
2746:  CALL   0940
274A:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
274C:  BRA    2750
....................          Flanco2 = 0; 
274E:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2750:  BSF    F96.1
2752:  BTFSC  F84.1
2754:  BRA    2780
....................          delay_ms(20); 
2756:  MOVLW  14
2758:  MOVWF  xFF
275A:  CALL   0940
....................          if(RIGHT){ 
275E:  BSF    F96.1
2760:  BTFSC  F84.1
2762:  BRA    277E
....................             if(Flanco1 == 0) { 
2764:  BTFSC  29.4
2766:  BRA    277E
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2768:  BSF    29.4
276A:  INCF   2F,F
276C:  MOVLW  1E
276E:  MOVWF  xFF
2770:  CALL   0940
2774:  MOVLW  0C
2776:  MOVWF  xF9
2778:  CALL   0AE0
277C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
277E:  BRA    2782
....................          Flanco1 = 0; 
2780:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2782:  BSF    F96.2
2784:  BTFSC  F84.2
2786:  BRA    27B2
....................          delay_ms(150); 
2788:  MOVLW  96
278A:  MOVWF  xFF
278C:  CALL   0940
....................          if(IZQU){ 
2790:  BSF    F96.2
2792:  BTFSC  F84.2
2794:  BRA    27B0
....................             if(Flanco3 == 0){ 
2796:  BTFSC  29.6
2798:  BRA    27B0
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
279A:  BSF    29.6
279C:  DECF   2F,F
279E:  MOVLW  1E
27A0:  MOVWF  xFF
27A2:  CALL   0940
27A6:  MOVLW  0C
27A8:  MOVWF  xF9
27AA:  CALL   0AE0
27AE:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
27B0:  BRA    27B4
....................         Flanco3 = 0; 
27B2:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
27B4:  MOVLW  0B
27B6:  SUBWF  2F,W
27B8:  CLRF   03
27BA:  ADDLW  49
27BC:  MOVWF  FE9
27BE:  MOVLW  00
27C0:  ADDWFC 03,W
27C2:  MOVWF  FEA
27C4:  BTFSC  FEF.7
27C6:  BRA    27CA
27C8:  BRA    27DE
....................          clave[unidad-11]=9; 
27CA:  MOVLW  0B
27CC:  SUBWF  2F,W
27CE:  CLRF   03
27D0:  ADDLW  49
27D2:  MOVWF  FE9
27D4:  MOVLW  00
27D6:  ADDWFC 03,W
27D8:  MOVWF  FEA
27DA:  MOVLW  09
27DC:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
27DE:  MOVLW  0B
27E0:  SUBWF  2F,W
27E2:  CLRF   03
27E4:  ADDLW  49
27E6:  MOVWF  FE9
27E8:  MOVLW  00
27EA:  ADDWFC 03,W
27EC:  MOVWF  FEA
27EE:  BTFSC  FEF.7
27F0:  BRA    280A
27F2:  MOVF   FEF,W
27F4:  SUBLW  09
27F6:  BC    280A
....................          clave[unidad-11]=0; 
27F8:  MOVLW  0B
27FA:  SUBWF  2F,W
27FC:  CLRF   03
27FE:  ADDLW  49
2800:  MOVWF  FE9
2802:  MOVLW  00
2804:  ADDWFC 03,W
2806:  MOVWF  FEA
2808:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
280A:  MOVF   2F,W
280C:  SUBLW  0A
280E:  BNC   2814
....................          unidad=11; 
2810:  MOVLW  0B
2812:  MOVWF  2F
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
2814:  MOVF   2F,W
2816:  SUBLW  0E
2818:  BTFSC  FD8.0
281A:  BRA    2A22
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
281C:  MOVF   49,W
281E:  SUBLW  03
2820:  BNZ   2904
2822:  MOVF   4A,W
2824:  SUBLW  08
2826:  BNZ   2904
2828:  MOVF   4B,W
282A:  SUBLW  09
282C:  BNZ   2904
282E:  MOVF   4C,W
2830:  SUBLW  02
2832:  BNZ   2904
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
2834:  CLRF   FA9
2836:  CLRF   FA8
2838:  BCF    FA6.6
283A:  BCF    FA6.7
283C:  BSF    FA6.2
283E:  MOVF   FF2,W
2840:  MOVWF  00
2842:  BCF    FF2.6
2844:  BCF    FF2.7
2846:  MOVLB  F
2848:  MOVLW  55
284A:  MOVWF  FA7
284C:  MOVLW  AA
284E:  MOVWF  FA7
2850:  BSF    FA6.1
2852:  BTFSC  FA6.1
2854:  BRA    2852
2856:  BCF    FA6.2
2858:  MOVF   00,W
285A:  IORWF  FF2,F
285C:  MOVLW  14
285E:  MOVLB  0
2860:  MOVWF  xFF
2862:  CALL   0940
2866:  MOVLW  01
2868:  MOVWF  FA9
286A:  CLRF   FA8
286C:  BCF    FA6.6
286E:  BCF    FA6.7
2870:  BSF    FA6.2
2872:  MOVF   FF2,W
2874:  MOVWF  00
2876:  BCF    FF2.6
2878:  BCF    FF2.7
287A:  MOVLB  F
287C:  MOVLW  55
287E:  MOVWF  FA7
2880:  MOVLW  AA
2882:  MOVWF  FA7
2884:  BSF    FA6.1
2886:  BTFSC  FA6.1
2888:  BRA    2886
288A:  BCF    FA6.2
288C:  MOVF   00,W
288E:  IORWF  FF2,F
2890:  MOVLW  14
2892:  MOVLB  0
2894:  MOVWF  xFF
2896:  CALL   0940
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
289A:  MOVLW  02
289C:  MOVWF  FA9
289E:  CLRF   FA8
28A0:  BCF    FA6.6
28A2:  BCF    FA6.7
28A4:  BSF    FA6.2
28A6:  MOVF   FF2,W
28A8:  MOVWF  00
28AA:  BCF    FF2.6
28AC:  BCF    FF2.7
28AE:  MOVLB  F
28B0:  MOVLW  55
28B2:  MOVWF  FA7
28B4:  MOVLW  AA
28B6:  MOVWF  FA7
28B8:  BSF    FA6.1
28BA:  BTFSC  FA6.1
28BC:  BRA    28BA
28BE:  BCF    FA6.2
28C0:  MOVF   00,W
28C2:  IORWF  FF2,F
28C4:  MOVLW  14
28C6:  MOVLB  0
28C8:  MOVWF  xFF
28CA:  CALL   0940
28CE:  MOVLW  03
28D0:  MOVWF  FA9
28D2:  CLRF   FA8
28D4:  BCF    FA6.6
28D6:  BCF    FA6.7
28D8:  BSF    FA6.2
28DA:  MOVF   FF2,W
28DC:  MOVWF  00
28DE:  BCF    FF2.6
28E0:  BCF    FF2.7
28E2:  MOVLB  F
28E4:  MOVLW  55
28E6:  MOVWF  FA7
28E8:  MOVLW  AA
28EA:  MOVWF  FA7
28EC:  BSF    FA6.1
28EE:  BTFSC  FA6.1
28F0:  BRA    28EE
28F2:  BCF    FA6.2
28F4:  MOVF   00,W
28F6:  IORWF  FF2,F
28F8:  MOVLW  14
28FA:  MOVLB  0
28FC:  MOVWF  xFF
28FE:  CALL   0940
....................              reset_cpu(); 
2902:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
2904:  MOVF   4D,W
2906:  SUBWF  49,W
2908:  BNZ   29A8
290A:  MOVF   4E,W
290C:  SUBWF  4A,W
290E:  BNZ   29A8
2910:  MOVF   4F,W
2912:  SUBWF  4B,W
2914:  BNZ   29A8
2916:  MOVF   50,W
2918:  SUBWF  4C,W
291A:  BNZ   29A8
....................             lcd_gotoxy(1,1); 
291C:  MOVLW  01
291E:  MOVWF  xFA
2920:  MOVWF  xFB
2922:  CALL   0A78
....................             printf(lcd_putc,"                   "); 
2926:  MOVLW  EC
2928:  MOVWF  FF6
292A:  MOVLW  03
292C:  MOVWF  FF7
292E:  CALL   0B3E
....................             lcd_gotoxy(1,2); 
2932:  MOVLW  01
2934:  MOVWF  xFA
2936:  MOVLW  02
2938:  MOVWF  xFB
293A:  CALL   0A78
....................             printf(lcd_putc,"     Contraseña    "); 
293E:  MOVLW  00
2940:  MOVWF  FF6
2942:  MOVLW  04
2944:  MOVWF  FF7
2946:  CALL   0B3E
....................             lcd_gotoxy(1,3); 
294A:  MOVLW  01
294C:  MOVWF  xFA
294E:  MOVLW  03
2950:  MOVWF  xFB
2952:  CALL   0A78
....................             printf(lcd_putc,"      Correcta     "); 
2956:  MOVLW  14
2958:  MOVWF  FF6
295A:  MOVLW  04
295C:  MOVWF  FF7
295E:  CALL   0B3E
....................             lcd_gotoxy(1,4); 
2962:  MOVLW  01
2964:  MOVWF  xFA
2966:  MOVLW  04
2968:  MOVWF  xFB
296A:  CALL   0A78
....................             printf(lcd_putc,"                   "); 
296E:  MOVLW  28
2970:  MOVWF  FF6
2972:  MOVLW  04
2974:  MOVWF  FF7
2976:  CALL   0B3E
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
297A:  MOVLW  04
297C:  MOVWF  xE8
297E:  MOVLW  FA
2980:  MOVWF  xFF
2982:  CALL   0940
2986:  DECFSZ xE8,F
2988:  BRA    297E
298A:  MOVLW  32
298C:  MOVWF  2C
298E:  MOVLW  0B
2990:  MOVWF  2F
2992:  MOVLW  0C
2994:  MOVWF  xF9
2996:  CALL   0AE0
299A:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
299C:  CLRF   49
299E:  CLRF   4A
29A0:  CLRF   4B
29A2:  CLRF   4C
29A4:  BSF    2B.3
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
29A6:  BRA    2A22
....................             lcd_gotoxy(1,1); 
29A8:  MOVLW  01
29AA:  MOVWF  xFA
29AC:  MOVWF  xFB
29AE:  CALL   0A78
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
29B2:  MOVLW  01
29B4:  MOVWF  xFA
29B6:  MOVLW  02
29B8:  MOVWF  xFB
29BA:  CALL   0A78
....................             printf(lcd_putc,"     Contraseña    "); 
29BE:  MOVLW  3C
29C0:  MOVWF  FF6
29C2:  MOVLW  04
29C4:  MOVWF  FF7
29C6:  CALL   0B3E
....................             lcd_gotoxy(1,3); 
29CA:  MOVLW  01
29CC:  MOVWF  xFA
29CE:  MOVLW  03
29D0:  MOVWF  xFB
29D2:  CALL   0A78
....................             printf(lcd_putc,"     Incorrecta    "); 
29D6:  MOVLW  50
29D8:  MOVWF  FF6
29DA:  MOVLW  04
29DC:  MOVWF  FF7
29DE:  CALL   0B3E
....................             lcd_gotoxy(1,4); 
29E2:  MOVLW  01
29E4:  MOVWF  xFA
29E6:  MOVLW  04
29E8:  MOVWF  xFB
29EA:  CALL   0A78
....................             printf(lcd_putc,"                   "); 
29EE:  MOVLW  64
29F0:  MOVWF  FF6
29F2:  MOVLW  04
29F4:  MOVWF  FF7
29F6:  CALL   0B3E
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
29FA:  MOVLW  04
29FC:  MOVWF  xE8
29FE:  MOVLW  FA
2A00:  MOVWF  xFF
2A02:  CALL   0940
2A06:  DECFSZ xE8,F
2A08:  BRA    29FE
2A0A:  MOVLW  0B
2A0C:  MOVWF  2F
2A0E:  MOVLW  0C
2A10:  MOVWF  xF9
2A12:  CALL   0AE0
2A16:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2A18:  CLRF   49
2A1A:  CLRF   4A
2A1C:  CLRF   4B
2A1E:  CLRF   4C
2A20:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2A22:  DECFSZ 2C,W
2A24:  BRA    2C5C
....................       EliminaRuido(); 
2A26:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2A2A:  MOVLW  01
2A2C:  MOVWF  xFA
2A2E:  MOVWF  xFB
2A30:  CALL   0A78
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2A34:  MOVLW  78
2A36:  MOVWF  FF6
2A38:  MOVLW  04
2A3A:  MOVWF  FF7
2A3C:  CALL   0B3E
....................          mensajes(1+paso,2); 
2A40:  MOVLW  01
2A42:  ADDWF  45,W
2A44:  MOVWF  xE8
2A46:  MOVWF  xE9
2A48:  MOVLW  02
2A4A:  MOVWF  xEA
2A4C:  CALL   1410
....................          mensajes(2+paso,3); 
2A50:  MOVLW  02
2A52:  ADDWF  45,W
2A54:  MOVWF  xE8
2A56:  MOVWF  xE9
2A58:  MOVLW  03
2A5A:  MOVWF  xEA
2A5C:  CALL   1410
....................          mensajes(3+paso,4); 
2A60:  MOVLW  03
2A62:  ADDWF  45,W
2A64:  MOVWF  xE8
2A66:  MOVWF  xE9
2A68:  MOVLW  04
2A6A:  MOVWF  xEA
2A6C:  CALL   1410
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2A70:  MOVLW  01
2A72:  MOVWF  xFA
2A74:  MOVFF  30,FB
2A78:  CALL   0A78
....................         lcd_putc(t[0]); 
2A7C:  MOVFF  46,F9
2A80:  CALL   0AE0
....................  
....................         if(Flecha==2) 
2A84:  MOVF   30,W
2A86:  SUBLW  02
2A88:  BNZ   2AB2
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2A8A:  MOVLW  01
2A8C:  MOVWF  xFA
2A8E:  MOVLW  04
2A90:  MOVWF  xFB
2A92:  CALL   0A78
....................             lcd_putc(t[1]); 
2A96:  MOVFF  47,F9
2A9A:  CALL   0AE0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2A9E:  MOVLW  01
2AA0:  MOVWF  xFA
2AA2:  MOVLW  03
2AA4:  MOVWF  xFB
2AA6:  CALL   0A78
....................             lcd_putc(t[1]); 
2AAA:  MOVFF  47,F9
2AAE:  CALL   0AE0
....................           } 
....................          
....................         if(Flecha==4) 
2AB2:  MOVF   30,W
2AB4:  SUBLW  04
2AB6:  BNZ   2AE0
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2AB8:  MOVLW  01
2ABA:  MOVWF  xFA
2ABC:  MOVLW  02
2ABE:  MOVWF  xFB
2AC0:  CALL   0A78
....................             lcd_putc(t[1]); 
2AC4:  MOVFF  47,F9
2AC8:  CALL   0AE0
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2ACC:  MOVLW  01
2ACE:  MOVWF  xFA
2AD0:  MOVLW  03
2AD2:  MOVWF  xFB
2AD4:  CALL   0A78
....................             lcd_putc(t[1]); 
2AD8:  MOVFF  47,F9
2ADC:  CALL   0AE0
....................           } 
....................          
....................         if(Flecha==3) 
2AE0:  MOVF   30,W
2AE2:  SUBLW  03
2AE4:  BNZ   2B0E
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2AE6:  MOVLW  01
2AE8:  MOVWF  xFA
2AEA:  MOVLW  04
2AEC:  MOVWF  xFB
2AEE:  CALL   0A78
....................             lcd_putc(t[1]); 
2AF2:  MOVFF  47,F9
2AF6:  CALL   0AE0
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2AFA:  MOVLW  01
2AFC:  MOVWF  xFA
2AFE:  MOVLW  02
2B00:  MOVWF  xFB
2B02:  CALL   0A78
....................             lcd_putc(t[1]); 
2B06:  MOVFF  47,F9
2B0A:  CALL   0AE0
....................           } 
....................          Cambio=OFF; 
2B0E:  BCF    2B.3
....................      // } 
....................          
....................       if(UP){//Si oprime hacia arriba 
2B10:  BSF    F92.5
2B12:  BTFSC  F80.5
2B14:  BRA    2B40
....................          delay_ms(20); 
2B16:  MOVLW  14
2B18:  MOVWF  xFF
2B1A:  CALL   0940
....................          if(UP){ 
2B1E:  BSF    F92.5
2B20:  BTFSC  F80.5
2B22:  BRA    2B3E
....................             if(Flanco == 0){ 
2B24:  BTFSC  29.3
2B26:  BRA    2B3E
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
2B28:  DECF   32,F
2B2A:  DECF   30,F
2B2C:  MOVLW  01
2B2E:  ADDWF  30,W
2B30:  MOVWF  31
2B32:  BSF    29.3
2B34:  MOVLW  1E
2B36:  MOVWF  xFF
2B38:  CALL   0940
2B3C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2B3E:  BRA    2B42
....................          Flanco = 0; 
2B40:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2B42:  BSF    F96.0
2B44:  BTFSC  F84.0
2B46:  BRA    2B72
....................          delay_ms(20); 
2B48:  MOVLW  14
2B4A:  MOVWF  xFF
2B4C:  CALL   0940
....................          if(DOWN){ 
2B50:  BSF    F96.0
2B52:  BTFSC  F84.0
2B54:  BRA    2B70
....................             if(Flanco2 == 0){ 
2B56:  BTFSC  29.5
2B58:  BRA    2B70
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2B5A:  INCF   32,F
2B5C:  INCF   30,F
2B5E:  MOVLW  01
2B60:  SUBWF  30,W
2B62:  MOVWF  31
2B64:  BSF    29.5
2B66:  MOVLW  1E
2B68:  MOVWF  xFF
2B6A:  CALL   0940
2B6E:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2B70:  BRA    2B74
....................          Flanco2 = 0; 
2B72:  BCF    29.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
2B74:  MOVF   32,W
2B76:  SUBWF  34,W
2B78:  BC    2B8A
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
2B7A:  INCF   45,F
2B7C:  MOVFF  32,34
2B80:  MOVLW  02
2B82:  SUBWF  34,W
2B84:  MOVWF  33
2B86:  MOVLW  04
2B88:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
2B8A:  MOVF   33,W
2B8C:  SUBWF  32,W
2B8E:  BC    2BA0
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
2B90:  DECF   45,F
2B92:  MOVFF  32,33
2B96:  MOVLW  02
2B98:  ADDWF  33,W
2B9A:  MOVWF  34
2B9C:  MOVLW  02
2B9E:  MOVWF  30
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
2BA0:  MOVF   32,W
2BA2:  SUBWF  2D,W
2BA4:  BC    2BB8
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
2BA6:  MOVFF  2E,32
2BAA:  MOVLW  02
2BAC:  MOVWF  30
2BAE:  CLRF   45
2BB0:  MOVFF  32,33
2BB4:  ADDWF  33,W
2BB6:  MOVWF  34
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
2BB8:  MOVF   2E,W
2BBA:  SUBWF  32,W
2BBC:  BC    2BD4
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
2BBE:  MOVFF  2D,32
2BC2:  MOVLW  04
2BC4:  MOVWF  30
2BC6:  SUBWF  2D,W
2BC8:  MOVWF  45
2BCA:  MOVFF  32,34
2BCE:  MOVLW  02
2BD0:  SUBWF  34,W
2BD2:  MOVWF  33
....................       } 
....................          
....................       if(paso<0) 
2BD4:  BTFSC  45.7
2BD6:  BRA    2BDA
2BD8:  BRA    2BDC
....................          paso=0; 
2BDA:  CLRF   45
....................           
....................       if(RIGHT){// Si oprime derecha 
2BDC:  BSF    F96.1
2BDE:  BTFSC  F84.1
2BE0:  BRA    2C28
....................          delay_ms(20); 
2BE2:  MOVLW  14
2BE4:  MOVWF  xFF
2BE6:  CALL   0940
....................          if(RIGHT){ 
2BEA:  BSF    F96.1
2BEC:  BTFSC  F84.1
2BEE:  BRA    2C24
....................             if(Flanco1 == 0){ 
2BF0:  BTFSC  29.4
2BF2:  BRA    2C24
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2BF4:  BSF    29.4
2BF6:  MOVFF  32,2C
2BFA:  MOVLW  03
2BFC:  MOVWF  30
2BFE:  MOVLW  02
2C00:  MOVWF  xE8
2C02:  MOVLW  96
2C04:  MOVWF  xFF
2C06:  CALL   0940
2C0A:  DECFSZ xE8,F
2C0C:  BRA    2C02
2C0E:  MOVLW  0C
2C10:  MOVWF  xF9
2C12:  CALL   0AE0
....................                if(Menu==6){ 
2C16:  MOVF   2C,W
2C18:  SUBLW  06
2C1A:  BNZ   2C24
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2C1C:  CLRF   49
2C1E:  CLRF   4A
2C20:  CLRF   4B
2C22:  CLRF   4C
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2C24:  BSF    2B.3
....................       }else{ 
2C26:  BRA    2C2A
....................         Flanco1 = 0; 
2C28:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){ 
2C2A:  BSF    F96.2
2C2C:  BTFSC  F84.2
2C2E:  BRA    2C5C
....................          delay_ms(20); 
2C30:  MOVLW  14
2C32:  MOVWF  xFF
2C34:  CALL   0940
....................          if(IZQU){ 
2C38:  BSF    F96.2
2C3A:  BTFSC  F84.2
2C3C:  BRA    2C5C
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2C3E:  MOVLW  02
2C40:  MOVWF  xE8
2C42:  MOVLW  FA
2C44:  MOVWF  xFF
2C46:  CALL   0940
2C4A:  DECFSZ xE8,F
2C4C:  BRA    2C42
2C4E:  MOVLW  32
2C50:  MOVWF  2C
2C52:  MOVLW  0C
2C54:  MOVWF  xF9
2C56:  CALL   0AE0
2C5A:  BSF    2B.3
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2C5C:  MOVF   2C,W
2C5E:  SUBLW  02
2C60:  BTFSS  FD8.2
2C62:  BRA    2EBC
....................    EliminaRuido(); 
2C64:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2C68:  MOVLW  01
2C6A:  MOVWF  xFA
2C6C:  MOVWF  xFB
2C6E:  CALL   0A78
....................       printf(lcd_putc,"    Temporizador     "); 
2C72:  MOVLW  8E
2C74:  MOVWF  FF6
2C76:  MOVLW  04
2C78:  MOVWF  FF7
2C7A:  CALL   0B3E
....................       lcd_gotoxy(1,2); 
2C7E:  MOVLW  01
2C80:  MOVWF  xFA
2C82:  MOVLW  02
2C84:  MOVWF  xFB
2C86:  CALL   0A78
....................       printf(lcd_putc,"       Luz UV        "); 
2C8A:  MOVLW  A4
2C8C:  MOVWF  FF6
2C8E:  MOVLW  04
2C90:  MOVWF  FF7
2C92:  CALL   0B3E
....................       lcd_gotoxy(6,3); 
2C96:  MOVLW  06
2C98:  MOVWF  xFA
2C9A:  MOVLW  03
2C9C:  MOVWF  xFB
2C9E:  CALL   0A78
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2CA2:  MOVFF  3D,E8
2CA6:  MOVLW  03
2CA8:  MOVWF  xE9
2CAA:  CALL   14E4
2CAE:  MOVLW  3A
2CB0:  MOVWF  xF9
2CB2:  CALL   0AE0
2CB6:  MOVFF  3E,E8
2CBA:  MOVLW  01
2CBC:  MOVWF  xE9
2CBE:  CALL   14E4
2CC2:  MOVLW  C3
2CC4:  MOVWF  FF6
2CC6:  MOVLW  04
2CC8:  MOVWF  FF7
2CCA:  MOVLW  08
2CCC:  MOVWF  xEC
2CCE:  CALL   12F8
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2CD2:  MOVLW  06
2CD4:  ADDWF  42,W
2CD6:  MOVWF  xE8
2CD8:  MOVWF  xFA
2CDA:  MOVLW  04
2CDC:  MOVWF  xFB
2CDE:  CALL   0A78
....................       lcd_putc(t[2]); 
2CE2:  MOVFF  48,F9
2CE6:  CALL   0AE0
....................        
....................       Cambio=OFF; 
2CEA:  BCF    2B.3
.................... //   } 
....................     
....................    if(UP) 
2CEC:  BSF    F92.5
2CEE:  BTFSC  F80.5
2CF0:  BRA    2D3E
....................    { 
....................       delay_ms(20); 
2CF2:  MOVLW  14
2CF4:  MOVWF  xFF
2CF6:  CALL   0940
....................       if(UP){ 
2CFA:  BSF    F92.5
2CFC:  BTFSC  F80.5
2CFE:  BRA    2D3E
....................          if(unidad2==1) 
2D00:  DECFSZ 42,W
2D02:  BRA    2D1E
....................          { 
....................             if(tempo_minutos_pro<240) 
2D04:  MOVF   3D,W
2D06:  SUBLW  EF
2D08:  BNC   2D1E
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
2D0A:  MOVLW  05
2D0C:  ADDWF  3D,F
2D0E:  MOVLW  02
2D10:  MOVWF  xE8
2D12:  MOVLW  96
2D14:  MOVWF  xFF
2D16:  CALL   0940
2D1A:  DECFSZ xE8,F
2D1C:  BRA    2D12
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2D1E:  MOVF   42,W
2D20:  SUBLW  04
2D22:  BNZ   2D3C
....................          { 
....................             if(tempo_segundos_pro<59) 
2D24:  MOVF   3E,W
2D26:  SUBLW  3A
2D28:  BNC   2D3C
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
2D2A:  INCF   3E,F
2D2C:  MOVLW  02
2D2E:  MOVWF  xE8
2D30:  MOVLW  96
2D32:  MOVWF  xFF
2D34:  CALL   0940
2D38:  DECFSZ xE8,F
2D3A:  BRA    2D30
....................             } 
....................          }      
....................       Cambio=ON; 
2D3C:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2D3E:  BSF    F96.0
2D40:  BTFSC  F84.0
2D42:  BRA    2D8C
....................    { 
....................       delay_ms(20); 
2D44:  MOVLW  14
2D46:  MOVWF  xFF
2D48:  CALL   0940
....................       if(DOWN){ 
2D4C:  BSF    F96.0
2D4E:  BTFSC  F84.0
2D50:  BRA    2D8C
....................          if(unidad2==1) 
2D52:  DECFSZ 42,W
2D54:  BRA    2D6E
....................          { 
....................             if(tempo_minutos_pro>0) 
2D56:  MOVF   3D,F
2D58:  BZ    2D6E
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
2D5A:  MOVLW  05
2D5C:  SUBWF  3D,F
2D5E:  MOVLW  02
2D60:  MOVWF  xE8
2D62:  MOVLW  96
2D64:  MOVWF  xFF
2D66:  CALL   0940
2D6A:  DECFSZ xE8,F
2D6C:  BRA    2D62
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
2D6E:  MOVF   42,W
2D70:  SUBLW  04
2D72:  BNZ   2D8A
....................          { 
....................             if(tempo_segundos_pro>0) 
2D74:  MOVF   3E,F
2D76:  BZ    2D8A
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
2D78:  DECF   3E,F
2D7A:  MOVLW  02
2D7C:  MOVWF  xE8
2D7E:  MOVLW  96
2D80:  MOVWF  xFF
2D82:  CALL   0940
2D86:  DECFSZ xE8,F
2D88:  BRA    2D7E
....................             }    
....................          } 
....................       Cambio=ON; 
2D8A:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2D8C:  BSF    F96.1
2D8E:  BTFSC  F84.1
2D90:  BRA    2DCE
....................    { 
....................       delay_ms(20); 
2D92:  MOVLW  14
2D94:  MOVWF  xFF
2D96:  CALL   0940
....................       if(RIGHT){ 
2D9A:  BSF    F96.1
2D9C:  BTFSC  F84.1
2D9E:  BRA    2DCE
....................          if(unidad2==1) 
2DA0:  DECFSZ 42,W
2DA2:  BRA    2DAA
....................          { 
....................             unidad2=4; 
2DA4:  MOVLW  04
2DA6:  MOVWF  42
....................          } 
....................          else 
2DA8:  BRA    2DB4
....................          { 
....................             if(unidad2==4) 
2DAA:  MOVF   42,W
2DAC:  SUBLW  04
2DAE:  BNZ   2DB4
....................             { 
....................                unidad2=1; 
2DB0:  MOVLW  01
2DB2:  MOVWF  42
....................             } 
....................          } 
....................       delay_ms(500); 
2DB4:  MOVLW  02
2DB6:  MOVWF  xE8
2DB8:  MOVLW  FA
2DBA:  MOVWF  xFF
2DBC:  CALL   0940
2DC0:  DECFSZ xE8,F
2DC2:  BRA    2DB8
....................       printf(lcd_putc,"\f"); 
2DC4:  MOVLW  0C
2DC6:  MOVWF  xF9
2DC8:  CALL   0AE0
....................       Cambio=ON; 
2DCC:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(IZQU) 
2DCE:  BSF    F96.2
2DD0:  BTFSC  F84.2
2DD2:  BRA    2EBC
....................    { 
....................       if(IZQU){ 
2DD4:  BSF    F96.2
2DD6:  BTFSC  F84.2
2DD8:  BRA    2EBC
....................          delay_ms(200); 
2DDA:  MOVLW  C8
2DDC:  MOVWF  xFF
2DDE:  CALL   0940
....................          printf(lcd_putc,"\f"); 
2DE2:  MOVLW  0C
2DE4:  MOVWF  xF9
2DE6:  CALL   0AE0
....................          lcd_gotoxy(1,2); 
2DEA:  MOVLW  01
2DEC:  MOVWF  xFA
2DEE:  MOVLW  02
2DF0:  MOVWF  xFB
2DF2:  CALL   0A78
....................          printf(lcd_putc,"Tiempo Almacenado"); 
2DF6:  MOVLW  CC
2DF8:  MOVWF  FF6
2DFA:  MOVLW  04
2DFC:  MOVWF  FF7
2DFE:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
2E02:  MOVLW  01
2E04:  MOVWF  xFA
2E06:  MOVLW  03
2E08:  MOVWF  xFB
2E0A:  CALL   0A78
....................          printf(lcd_putc,"  Correctamente  "); 
2E0E:  MOVLW  DE
2E10:  MOVWF  FF6
2E12:  MOVLW  04
2E14:  MOVWF  FF7
2E16:  CALL   0B3E
....................          write_eeprom(5,tempo_minutos_pro); 
2E1A:  MOVLW  05
2E1C:  MOVWF  FA9
2E1E:  MOVFF  3D,FA8
2E22:  BCF    FA6.6
2E24:  BCF    FA6.7
2E26:  BSF    FA6.2
2E28:  MOVF   FF2,W
2E2A:  MOVWF  00
2E2C:  BCF    FF2.6
2E2E:  BCF    FF2.7
2E30:  MOVLB  F
2E32:  MOVLW  55
2E34:  MOVWF  FA7
2E36:  MOVLW  AA
2E38:  MOVWF  FA7
2E3A:  BSF    FA6.1
2E3C:  BTFSC  FA6.1
2E3E:  BRA    2E3C
2E40:  BCF    FA6.2
2E42:  MOVF   00,W
2E44:  IORWF  FF2,F
....................          delay_ms(20); 
2E46:  MOVLW  14
2E48:  MOVLB  0
2E4A:  MOVWF  xFF
2E4C:  CALL   0940
....................          write_eeprom(6,tempo_segundos_pro); 
2E50:  MOVLW  06
2E52:  MOVWF  FA9
2E54:  MOVFF  3E,FA8
2E58:  BCF    FA6.6
2E5A:  BCF    FA6.7
2E5C:  BSF    FA6.2
2E5E:  MOVF   FF2,W
2E60:  MOVWF  00
2E62:  BCF    FF2.6
2E64:  BCF    FF2.7
2E66:  MOVLB  F
2E68:  MOVLW  55
2E6A:  MOVWF  FA7
2E6C:  MOVLW  AA
2E6E:  MOVWF  FA7
2E70:  BSF    FA6.1
2E72:  BTFSC  FA6.1
2E74:  BRA    2E72
2E76:  BCF    FA6.2
2E78:  MOVF   00,W
2E7A:  IORWF  FF2,F
....................          delay_ms(20); 
2E7C:  MOVLW  14
2E7E:  MOVLB  0
2E80:  MOVWF  xFF
2E82:  CALL   0940
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2E86:  MOVFF  3D,3B
2E8A:  MOVFF  3E,3C
....................          delay_ms(700); 
2E8E:  MOVLW  04
2E90:  MOVWF  xE8
2E92:  MOVLW  AF
2E94:  MOVWF  xFF
2E96:  CALL   0940
2E9A:  DECFSZ xE8,F
2E9C:  BRA    2E92
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2E9E:  MOVLW  1E
2EA0:  MOVWF  xFF
2EA2:  CALL   0940
2EA6:  MOVLW  01
2EA8:  MOVWF  2C
2EAA:  CLRF   45
2EAC:  MOVLW  02
2EAE:  MOVWF  30
2EB0:  MOVWF  32
2EB2:  MOVLW  0C
2EB4:  MOVWF  xF9
2EB6:  CALL   0AE0
....................          Cambio=ON; 
2EBA:  BSF    2B.3
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2EBC:  MOVF   2C,W
2EBE:  SUBLW  03
2EC0:  BTFSS  FD8.2
2EC2:  BRA    320E
....................       EliminaRuido(); 
2EC4:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2EC8:  MOVLW  01
2ECA:  MOVWF  xFA
2ECC:  MOVWF  xFB
2ECE:  CALL   0A78
....................          printf(lcd_putc,"     Ingrese        "); 
2ED2:  MOVLW  F0
2ED4:  MOVWF  FF6
2ED6:  MOVLW  04
2ED8:  MOVWF  FF7
2EDA:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
2EDE:  MOVLW  01
2EE0:  MOVWF  xFA
2EE2:  MOVLW  02
2EE4:  MOVWF  xFB
2EE6:  CALL   0A78
....................          printf(lcd_putc,"    Contraseña      "); 
2EEA:  MOVLW  06
2EEC:  MOVWF  FF6
2EEE:  MOVLW  05
2EF0:  MOVWF  FF7
2EF2:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
2EF6:  MOVLW  01
2EF8:  MOVWF  xFA
2EFA:  MOVLW  03
2EFC:  MOVWF  xFB
2EFE:  CALL   0A78
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2F02:  MOVLW  1C
2F04:  MOVWF  FF6
2F06:  MOVLW  05
2F08:  MOVWF  FF7
2F0A:  MOVLW  0A
2F0C:  MOVWF  xEC
2F0E:  CALL   12F8
2F12:  MOVFF  49,E8
2F16:  MOVLW  1F
2F18:  MOVWF  xE9
2F1A:  CALL   1340
2F1E:  MOVFF  4A,E8
2F22:  MOVLW  1F
2F24:  MOVWF  xE9
2F26:  CALL   1340
2F2A:  MOVFF  4B,E8
2F2E:  MOVLW  1F
2F30:  MOVWF  xE9
2F32:  CALL   1340
2F36:  MOVFF  4C,E8
2F3A:  MOVLW  1F
2F3C:  MOVWF  xE9
2F3E:  CALL   1340
2F42:  MOVLW  20
2F44:  MOVWF  xF9
2F46:  CALL   0AE0
2F4A:  MOVLW  20
2F4C:  MOVWF  xF9
2F4E:  CALL   0AE0
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2F52:  MOVFF  2F,FA
2F56:  MOVLW  04
2F58:  MOVWF  xFB
2F5A:  CALL   0A78
....................          lcd_putc(t[2]); 
2F5E:  MOVFF  48,F9
2F62:  CALL   0AE0
....................           
....................          if(unidad>11&&unidad<14){ 
2F66:  MOVF   2F,W
2F68:  SUBLW  0B
2F6A:  BC    2F8A
2F6C:  MOVF   2F,W
2F6E:  SUBLW  0D
2F70:  BNC   2F8A
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2F72:  MOVLW  01
2F74:  SUBWF  2F,W
2F76:  MOVWF  xE8
2F78:  MOVWF  xFA
2F7A:  MOVLW  04
2F7C:  MOVWF  xFB
2F7E:  CALL   0A78
....................             lcd_putc(t[1]); 
2F82:  MOVFF  47,F9
2F86:  CALL   0AE0
....................          } 
....................           
....................          Cambio=OFF; 
2F8A:  BCF    2B.3
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
2F8C:  BSF    F92.5
2F8E:  BTFSC  F80.5
2F90:  BRA    2FC4
....................          delay_ms(20); 
2F92:  MOVLW  14
2F94:  MOVWF  xFF
2F96:  CALL   0940
....................          if(UP){ 
2F9A:  BSF    F92.5
2F9C:  BTFSC  F80.5
2F9E:  BRA    2FC2
....................             if(Flanco == 0) { 
2FA0:  BTFSC  29.3
2FA2:  BRA    2FC2
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
2FA4:  MOVLW  0B
2FA6:  SUBWF  2F,W
2FA8:  CLRF   03
2FAA:  ADDLW  49
2FAC:  MOVWF  FE9
2FAE:  MOVLW  00
2FB0:  ADDWFC 03,W
2FB2:  MOVWF  FEA
2FB4:  INCF   FEF,F
2FB6:  BSF    29.3
2FB8:  MOVLW  1E
2FBA:  MOVWF  xFF
2FBC:  CALL   0940
2FC0:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2FC2:  BRA    2FC6
....................          Flanco = 0; 
2FC4:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2FC6:  BSF    F96.0
2FC8:  BTFSC  F84.0
2FCA:  BRA    2FFE
....................          delay_ms(20); 
2FCC:  MOVLW  14
2FCE:  MOVWF  xFF
2FD0:  CALL   0940
....................          if(DOWN){ 
2FD4:  BSF    F96.0
2FD6:  BTFSC  F84.0
2FD8:  BRA    2FFC
....................             if(Flanco2 == 0) { 
2FDA:  BTFSC  29.5
2FDC:  BRA    2FFC
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2FDE:  MOVLW  0B
2FE0:  SUBWF  2F,W
2FE2:  CLRF   03
2FE4:  ADDLW  49
2FE6:  MOVWF  FE9
2FE8:  MOVLW  00
2FEA:  ADDWFC 03,W
2FEC:  MOVWF  FEA
2FEE:  DECF   FEF,F
2FF0:  BSF    29.5
2FF2:  MOVLW  1E
2FF4:  MOVWF  xFF
2FF6:  CALL   0940
2FFA:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
2FFC:  BRA    3000
....................          Flanco2 = 0; 
2FFE:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3000:  BSF    F96.1
3002:  BTFSC  F84.1
3004:  BRA    3030
....................          delay_ms(20); 
3006:  MOVLW  14
3008:  MOVWF  xFF
300A:  CALL   0940
....................          if(RIGHT){ 
300E:  BSF    F96.1
3010:  BTFSC  F84.1
3012:  BRA    302E
....................             if(Flanco1 == 0) { 
3014:  BTFSC  29.4
3016:  BRA    302E
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3018:  BSF    29.4
301A:  INCF   2F,F
301C:  MOVLW  1E
301E:  MOVWF  xFF
3020:  CALL   0940
3024:  MOVLW  0C
3026:  MOVWF  xF9
3028:  CALL   0AE0
302C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
302E:  BRA    3032
....................          Flanco1 = 0; 
3030:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
3032:  BSF    F96.2
3034:  BTFSC  F84.2
3036:  BRA    3062
....................          delay_ms(150); 
3038:  MOVLW  96
303A:  MOVWF  xFF
303C:  CALL   0940
....................          if(IZQU){ 
3040:  BSF    F96.2
3042:  BTFSC  F84.2
3044:  BRA    3060
....................             if(Flanco3 == 0){ 
3046:  BTFSC  29.6
3048:  BRA    3060
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
304A:  BSF    29.6
304C:  DECF   2F,F
304E:  MOVLW  1E
3050:  MOVWF  xFF
3052:  CALL   0940
3056:  MOVLW  0C
3058:  MOVWF  xF9
305A:  CALL   0AE0
305E:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3060:  BRA    3064
....................         Flanco3 = 0; 
3062:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
3064:  MOVLW  0B
3066:  SUBWF  2F,W
3068:  CLRF   03
306A:  ADDLW  49
306C:  MOVWF  FE9
306E:  MOVLW  00
3070:  ADDWFC 03,W
3072:  MOVWF  FEA
3074:  BTFSC  FEF.7
3076:  BRA    307A
3078:  BRA    308E
....................          clave[unidad-11]=9; 
307A:  MOVLW  0B
307C:  SUBWF  2F,W
307E:  CLRF   03
3080:  ADDLW  49
3082:  MOVWF  FE9
3084:  MOVLW  00
3086:  ADDWFC 03,W
3088:  MOVWF  FEA
308A:  MOVLW  09
308C:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
308E:  MOVLW  0B
3090:  SUBWF  2F,W
3092:  CLRF   03
3094:  ADDLW  49
3096:  MOVWF  FE9
3098:  MOVLW  00
309A:  ADDWFC 03,W
309C:  MOVWF  FEA
309E:  BTFSC  FEF.7
30A0:  BRA    30BA
30A2:  MOVF   FEF,W
30A4:  SUBLW  09
30A6:  BC    30BA
....................          clave[unidad-11]=0; 
30A8:  MOVLW  0B
30AA:  SUBWF  2F,W
30AC:  CLRF   03
30AE:  ADDLW  49
30B0:  MOVWF  FE9
30B2:  MOVLW  00
30B4:  ADDWFC 03,W
30B6:  MOVWF  FEA
30B8:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
30BA:  MOVF   2F,W
30BC:  SUBLW  0A
30BE:  BNC   30E0
....................          unidad=11; 
30C0:  MOVLW  0B
30C2:  MOVWF  2F
....................          Menu=1; 
30C4:  MOVLW  01
30C6:  MOVWF  2C
....................          paso=0; 
30C8:  CLRF   45
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
30CA:  CLRF   49
30CC:  CLRF   4A
30CE:  CLRF   4B
30D0:  CLRF   4C
30D2:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
30D4:  MOVLW  0B
30D6:  MOVWF  2F
30D8:  MOVLW  0C
30DA:  MOVWF  xF9
30DC:  CALL   0AE0
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
30E0:  MOVF   2F,W
30E2:  SUBLW  0E
30E4:  BTFSC  FD8.0
30E6:  BRA    320E
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
30E8:  MOVF   4D,W
30EA:  SUBWF  49,W
30EC:  BNZ   318A
30EE:  MOVF   4E,W
30F0:  SUBWF  4A,W
30F2:  BNZ   318A
30F4:  MOVF   4F,W
30F6:  SUBWF  4B,W
30F8:  BNZ   318A
30FA:  MOVF   50,W
30FC:  SUBWF  4C,W
30FE:  BNZ   318A
....................             lcd_gotoxy(1,1); 
3100:  MOVLW  01
3102:  MOVWF  xFA
3104:  MOVWF  xFB
3106:  CALL   0A78
....................             printf(lcd_putc,"                    "); 
310A:  MOVLW  32
310C:  MOVWF  FF6
310E:  MOVLW  05
3110:  MOVWF  FF7
3112:  CALL   0B3E
....................             lcd_gotoxy(1,2); 
3116:  MOVLW  01
3118:  MOVWF  xFA
311A:  MOVLW  02
311C:  MOVWF  xFB
311E:  CALL   0A78
....................             printf(lcd_putc,"     Contraseña     "); 
3122:  MOVLW  48
3124:  MOVWF  FF6
3126:  MOVLW  05
3128:  MOVWF  FF7
312A:  CALL   0B3E
....................             lcd_gotoxy(1,3); 
312E:  MOVLW  01
3130:  MOVWF  xFA
3132:  MOVLW  03
3134:  MOVWF  xFB
3136:  CALL   0A78
....................             printf(lcd_putc,"      Correcta      "); 
313A:  MOVLW  5E
313C:  MOVWF  FF6
313E:  MOVLW  05
3140:  MOVWF  FF7
3142:  CALL   0B3E
....................             lcd_gotoxy(1,4); 
3146:  MOVLW  01
3148:  MOVWF  xFA
314A:  MOVLW  04
314C:  MOVWF  xFB
314E:  CALL   0A78
....................             printf(lcd_putc,"                    "); 
3152:  MOVLW  74
3154:  MOVWF  FF6
3156:  MOVLW  05
3158:  MOVWF  FF7
315A:  CALL   0B3E
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
315E:  MOVLW  02
3160:  MOVWF  xE8
3162:  MOVLW  FA
3164:  MOVWF  xFF
3166:  CALL   0940
316A:  DECFSZ xE8,F
316C:  BRA    3162
316E:  MOVLW  3D
3170:  MOVWF  2C
3172:  MOVLW  0B
3174:  MOVWF  2F
3176:  MOVLW  0C
3178:  MOVWF  xF9
317A:  CALL   0AE0
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
317E:  CLRF   49
3180:  CLRF   4A
3182:  CLRF   4B
3184:  CLRF   4C
3186:  BSF    2B.3
....................          }else{ 
3188:  BRA    320E
....................             lcd_gotoxy(1,1); 
318A:  MOVLW  01
318C:  MOVWF  xFA
318E:  MOVWF  xFB
3190:  CALL   0A78
....................             printf(lcd_putc,"                    "); 
3194:  MOVLW  8A
3196:  MOVWF  FF6
3198:  MOVLW  05
319A:  MOVWF  FF7
319C:  CALL   0B3E
....................             lcd_gotoxy(1,2); 
31A0:  MOVLW  01
31A2:  MOVWF  xFA
31A4:  MOVLW  02
31A6:  MOVWF  xFB
31A8:  CALL   0A78
....................             printf(lcd_putc,"     Contraseña     "); 
31AC:  MOVLW  A0
31AE:  MOVWF  FF6
31B0:  MOVLW  05
31B2:  MOVWF  FF7
31B4:  CALL   0B3E
....................             lcd_gotoxy(1,3); 
31B8:  MOVLW  01
31BA:  MOVWF  xFA
31BC:  MOVLW  03
31BE:  MOVWF  xFB
31C0:  CALL   0A78
....................             printf(lcd_putc,"     Incorrecta     "); 
31C4:  MOVLW  B6
31C6:  MOVWF  FF6
31C8:  MOVLW  05
31CA:  MOVWF  FF7
31CC:  CALL   0B3E
....................             lcd_gotoxy(1,4); 
31D0:  MOVLW  01
31D2:  MOVWF  xFA
31D4:  MOVLW  04
31D6:  MOVWF  xFB
31D8:  CALL   0A78
....................             printf(lcd_putc,"                    "); 
31DC:  MOVLW  CC
31DE:  MOVWF  FF6
31E0:  MOVLW  05
31E2:  MOVWF  FF7
31E4:  CALL   0B3E
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
31E8:  MOVLW  02
31EA:  MOVWF  xE8
31EC:  MOVLW  FA
31EE:  MOVWF  xFF
31F0:  CALL   0940
31F4:  DECFSZ xE8,F
31F6:  BRA    31EC
31F8:  MOVLW  0B
31FA:  MOVWF  2F
31FC:  MOVLW  0C
31FE:  MOVWF  xF9
3200:  CALL   0AE0
3204:  BSF    2B.3
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
3206:  CLRF   49
3208:  CLRF   4A
320A:  CLRF   4B
320C:  CLRF   4C
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
320E:  MOVF   2C,W
3210:  SUBLW  3D
3212:  BTFSS  FD8.2
3214:  BRA    35A6
....................       EliminaRuido(); 
3216:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
321A:  MOVLW  01
321C:  MOVWF  xFA
321E:  MOVWF  xFB
3220:  CALL   0A78
....................          printf(lcd_putc,"   Ingrese Nueva    "); 
3224:  MOVLW  E2
3226:  MOVWF  FF6
3228:  MOVLW  05
322A:  MOVWF  FF7
322C:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
3230:  MOVLW  01
3232:  MOVWF  xFA
3234:  MOVLW  02
3236:  MOVWF  xFB
3238:  CALL   0A78
....................          printf(lcd_putc,"     Contraseña     "); 
323C:  MOVLW  F8
323E:  MOVWF  FF6
3240:  MOVLW  05
3242:  MOVWF  FF7
3244:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
3248:  MOVLW  01
324A:  MOVWF  xFA
324C:  MOVLW  03
324E:  MOVWF  xFB
3250:  CALL   0A78
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
3254:  MOVLW  0E
3256:  MOVWF  FF6
3258:  MOVLW  06
325A:  MOVWF  FF7
325C:  MOVLW  0A
325E:  MOVWF  xEC
3260:  CALL   12F8
3264:  MOVFF  49,E8
3268:  MOVLW  1F
326A:  MOVWF  xE9
326C:  CALL   1340
3270:  MOVFF  4A,E8
3274:  MOVLW  1F
3276:  MOVWF  xE9
3278:  CALL   1340
327C:  MOVFF  4B,E8
3280:  MOVLW  1F
3282:  MOVWF  xE9
3284:  CALL   1340
3288:  MOVFF  4C,E8
328C:  MOVLW  1F
328E:  MOVWF  xE9
3290:  CALL   1340
3294:  MOVLW  20
3296:  MOVWF  xF9
3298:  CALL   0AE0
329C:  MOVLW  20
329E:  MOVWF  xF9
32A0:  CALL   0AE0
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
32A4:  MOVFF  2F,FA
32A8:  MOVLW  04
32AA:  MOVWF  xFB
32AC:  CALL   0A78
....................          lcd_putc(t[2]); 
32B0:  MOVFF  48,F9
32B4:  CALL   0AE0
....................           
....................          if(unidad>11&&unidad<14){ 
32B8:  MOVF   2F,W
32BA:  SUBLW  0B
32BC:  BC    32DC
32BE:  MOVF   2F,W
32C0:  SUBLW  0D
32C2:  BNC   32DC
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
32C4:  MOVLW  01
32C6:  SUBWF  2F,W
32C8:  MOVWF  xE8
32CA:  MOVWF  xFA
32CC:  MOVLW  04
32CE:  MOVWF  xFB
32D0:  CALL   0A78
....................             lcd_putc(t[1]); 
32D4:  MOVFF  47,F9
32D8:  CALL   0AE0
....................          } 
....................           
....................          Cambio=OFF; 
32DC:  BCF    2B.3
.................... //      } 
....................        
....................       if(UP){//Si oprime hacia arriba 
32DE:  BSF    F92.5
32E0:  BTFSC  F80.5
32E2:  BRA    3316
....................          delay_ms(20); 
32E4:  MOVLW  14
32E6:  MOVWF  xFF
32E8:  CALL   0940
....................          if(UP){ 
32EC:  BSF    F92.5
32EE:  BTFSC  F80.5
32F0:  BRA    3314
....................             if(Flanco == 0) { 
32F2:  BTFSC  29.3
32F4:  BRA    3314
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
32F6:  MOVLW  0B
32F8:  SUBWF  2F,W
32FA:  CLRF   03
32FC:  ADDLW  49
32FE:  MOVWF  FE9
3300:  MOVLW  00
3302:  ADDWFC 03,W
3304:  MOVWF  FEA
3306:  INCF   FEF,F
3308:  BSF    29.3
330A:  MOVLW  1E
330C:  MOVWF  xFF
330E:  CALL   0940
3312:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3314:  BRA    3318
....................          Flanco = 0; 
3316:  BCF    29.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
3318:  BSF    F96.0
331A:  BTFSC  F84.0
331C:  BRA    3350
....................          delay_ms(20); 
331E:  MOVLW  14
3320:  MOVWF  xFF
3322:  CALL   0940
....................          if(DOWN){ 
3326:  BSF    F96.0
3328:  BTFSC  F84.0
332A:  BRA    334E
....................             if(Flanco2 == 0) { 
332C:  BTFSC  29.5
332E:  BRA    334E
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
3330:  MOVLW  0B
3332:  SUBWF  2F,W
3334:  CLRF   03
3336:  ADDLW  49
3338:  MOVWF  FE9
333A:  MOVLW  00
333C:  ADDWFC 03,W
333E:  MOVWF  FEA
3340:  DECF   FEF,F
3342:  BSF    29.5
3344:  MOVLW  1E
3346:  MOVWF  xFF
3348:  CALL   0940
334C:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
334E:  BRA    3352
....................          Flanco2 = 0; 
3350:  BCF    29.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
3352:  BSF    F96.1
3354:  BTFSC  F84.1
3356:  BRA    337A
....................          if(RIGHT){ 
3358:  BSF    F96.1
335A:  BTFSC  F84.1
335C:  BRA    3378
....................             if(Flanco1 == 0) { 
335E:  BTFSC  29.4
3360:  BRA    3378
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3362:  BSF    29.4
3364:  INCF   2F,F
3366:  MOVLW  1E
3368:  MOVWF  xFF
336A:  CALL   0940
336E:  MOVLW  0C
3370:  MOVWF  xF9
3372:  CALL   0AE0
3376:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3378:  BRA    337C
....................          Flanco1 = 0; 
337A:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
337C:  BSF    F96.2
337E:  BTFSC  F84.2
3380:  BRA    33AC
....................          delay_ms(150); 
3382:  MOVLW  96
3384:  MOVWF  xFF
3386:  CALL   0940
....................          if(IZQU){ 
338A:  BSF    F96.2
338C:  BTFSC  F84.2
338E:  BRA    33AA
....................             if(Flanco3 == 0){ 
3390:  BTFSC  29.6
3392:  BRA    33AA
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
3394:  BSF    29.6
3396:  DECF   2F,F
3398:  MOVLW  1E
339A:  MOVWF  xFF
339C:  CALL   0940
33A0:  MOVLW  0C
33A2:  MOVWF  xF9
33A4:  CALL   0AE0
33A8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
33AA:  BRA    33AE
....................         Flanco3 = 0; 
33AC:  BCF    29.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
33AE:  MOVLW  0B
33B0:  SUBWF  2F,W
33B2:  CLRF   03
33B4:  ADDLW  49
33B6:  MOVWF  FE9
33B8:  MOVLW  00
33BA:  ADDWFC 03,W
33BC:  MOVWF  FEA
33BE:  BTFSC  FEF.7
33C0:  BRA    33C4
33C2:  BRA    33D8
....................          clave[unidad-11]=9; 
33C4:  MOVLW  0B
33C6:  SUBWF  2F,W
33C8:  CLRF   03
33CA:  ADDLW  49
33CC:  MOVWF  FE9
33CE:  MOVLW  00
33D0:  ADDWFC 03,W
33D2:  MOVWF  FEA
33D4:  MOVLW  09
33D6:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
33D8:  MOVLW  0B
33DA:  SUBWF  2F,W
33DC:  CLRF   03
33DE:  ADDLW  49
33E0:  MOVWF  FE9
33E2:  MOVLW  00
33E4:  ADDWFC 03,W
33E6:  MOVWF  FEA
33E8:  BTFSC  FEF.7
33EA:  BRA    3404
33EC:  MOVF   FEF,W
33EE:  SUBLW  09
33F0:  BC    3404
....................          clave[unidad-11]=0; 
33F2:  MOVLW  0B
33F4:  SUBWF  2F,W
33F6:  CLRF   03
33F8:  ADDLW  49
33FA:  MOVWF  FE9
33FC:  MOVLW  00
33FE:  ADDWFC 03,W
3400:  MOVWF  FEA
3402:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
3404:  MOVF   2F,W
3406:  SUBLW  0A
3408:  BNC   3428
....................          unidad=11; 
340A:  MOVLW  0B
340C:  MOVWF  2F
....................          Menu=1; 
340E:  MOVLW  01
3410:  MOVWF  2C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3412:  CLRF   49
3414:  CLRF   4A
3416:  CLRF   4B
3418:  CLRF   4C
341A:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f"); 
341C:  MOVLW  0B
341E:  MOVWF  2F
3420:  MOVLW  0C
3422:  MOVWF  xF9
3424:  CALL   0AE0
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
3428:  MOVF   2F,W
342A:  SUBLW  0E
342C:  BTFSC  FD8.0
342E:  BRA    35A6
....................          lcd_gotoxy(1,1); 
3430:  MOVLW  01
3432:  MOVWF  xFA
3434:  MOVWF  xFB
3436:  CALL   0A78
....................          printf(lcd_putc,"                    "); 
343A:  MOVLW  24
343C:  MOVWF  FF6
343E:  MOVLW  06
3440:  MOVWF  FF7
3442:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
3446:  MOVLW  01
3448:  MOVWF  xFA
344A:  MOVLW  02
344C:  MOVWF  xFB
344E:  CALL   0A78
....................          printf(lcd_putc,"     Contraseña     "); 
3452:  MOVLW  3A
3454:  MOVWF  FF6
3456:  MOVLW  06
3458:  MOVWF  FF7
345A:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
345E:  MOVLW  01
3460:  MOVWF  xFA
3462:  MOVLW  03
3464:  MOVWF  xFB
3466:  CALL   0A78
....................          printf(lcd_putc,"     Almacenada     "); 
346A:  MOVLW  50
346C:  MOVWF  FF6
346E:  MOVLW  06
3470:  MOVWF  FF7
3472:  CALL   0B3E
....................          lcd_gotoxy(1,4); 
3476:  MOVLW  01
3478:  MOVWF  xFA
347A:  MOVLW  04
347C:  MOVWF  xFB
347E:  CALL   0A78
....................          printf(lcd_putc,"                    "); 
3482:  MOVLW  66
3484:  MOVWF  FF6
3486:  MOVLW  06
3488:  MOVWF  FF7
348A:  CALL   0B3E
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
348E:  CLRF   FA9
3490:  MOVFF  49,FA8
3494:  BCF    FA6.6
3496:  BCF    FA6.7
3498:  BSF    FA6.2
349A:  MOVF   FF2,W
349C:  MOVWF  00
349E:  BCF    FF2.6
34A0:  BCF    FF2.7
34A2:  MOVLB  F
34A4:  MOVLW  55
34A6:  MOVWF  FA7
34A8:  MOVLW  AA
34AA:  MOVWF  FA7
34AC:  BSF    FA6.1
34AE:  BTFSC  FA6.1
34B0:  BRA    34AE
34B2:  BCF    FA6.2
34B4:  MOVF   00,W
34B6:  IORWF  FF2,F
34B8:  MOVLW  14
34BA:  MOVLB  0
34BC:  MOVWF  xFF
34BE:  CALL   0940
34C2:  MOVLW  01
34C4:  MOVWF  FA9
34C6:  MOVFF  4A,FA8
34CA:  BCF    FA6.6
34CC:  BCF    FA6.7
34CE:  BSF    FA6.2
34D0:  MOVF   FF2,W
34D2:  MOVWF  00
34D4:  BCF    FF2.6
34D6:  BCF    FF2.7
34D8:  MOVLB  F
34DA:  MOVLW  55
34DC:  MOVWF  FA7
34DE:  MOVLW  AA
34E0:  MOVWF  FA7
34E2:  BSF    FA6.1
34E4:  BTFSC  FA6.1
34E6:  BRA    34E4
34E8:  BCF    FA6.2
34EA:  MOVF   00,W
34EC:  IORWF  FF2,F
34EE:  MOVLW  14
34F0:  MOVLB  0
34F2:  MOVWF  xFF
34F4:  CALL   0940
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
34F8:  MOVLW  02
34FA:  MOVWF  FA9
34FC:  MOVFF  4B,FA8
3500:  BCF    FA6.6
3502:  BCF    FA6.7
3504:  BSF    FA6.2
3506:  MOVF   FF2,W
3508:  MOVWF  00
350A:  BCF    FF2.6
350C:  BCF    FF2.7
350E:  MOVLB  F
3510:  MOVLW  55
3512:  MOVWF  FA7
3514:  MOVLW  AA
3516:  MOVWF  FA7
3518:  BSF    FA6.1
351A:  BTFSC  FA6.1
351C:  BRA    351A
351E:  BCF    FA6.2
3520:  MOVF   00,W
3522:  IORWF  FF2,F
3524:  MOVLW  14
3526:  MOVLB  0
3528:  MOVWF  xFF
352A:  CALL   0940
352E:  MOVLW  03
3530:  MOVWF  FA9
3532:  MOVFF  4C,FA8
3536:  BCF    FA6.6
3538:  BCF    FA6.7
353A:  BSF    FA6.2
353C:  MOVF   FF2,W
353E:  MOVWF  00
3540:  BCF    FF2.6
3542:  BCF    FF2.7
3544:  MOVLB  F
3546:  MOVLW  55
3548:  MOVWF  FA7
354A:  MOVLW  AA
354C:  MOVWF  FA7
354E:  BSF    FA6.1
3550:  BTFSC  FA6.1
3552:  BRA    3550
3554:  BCF    FA6.2
3556:  MOVF   00,W
3558:  IORWF  FF2,F
355A:  MOVLW  14
355C:  MOVLB  0
355E:  MOVWF  xFF
3560:  CALL   0940
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
3564:  MOVLW  02
3566:  MOVWF  xE8
3568:  MOVLW  FA
356A:  MOVWF  xFF
356C:  CALL   0940
3570:  DECFSZ xE8,F
3572:  BRA    3568
3574:  MOVLW  01
3576:  MOVWF  2C
3578:  CLRF   45
357A:  MOVLW  02
357C:  MOVWF  30
357E:  MOVWF  32
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
3580:  MOVFF  49,4D
3584:  MOVFF  4A,4E
3588:  MOVFF  4B,4F
358C:  MOVFF  4C,50
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
3590:  CLRF   49
3592:  CLRF   4A
3594:  CLRF   4B
3596:  CLRF   4C
3598:  BSF    2B.3
....................          unidad=11;printf(lcd_putc,"\f");          
359A:  MOVLW  0B
359C:  MOVWF  2F
359E:  MOVLW  0C
35A0:  MOVWF  xF9
35A2:  CALL   0AE0
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
35A6:  MOVF   2C,W
35A8:  SUBLW  04
35AA:  BTFSS  FD8.2
35AC:  BRA    37C8
....................    EliminaRuido(); 
35AE:  CALL   0004
.................... //   if(Cambio){ 
....................       lcd_gotoxy(1,1); 
35B2:  MOVLW  01
35B4:  MOVWF  xFA
35B6:  MOVWF  xFB
35B8:  CALL   0A78
....................       printf(lcd_putc,"  Duracion Actual   "); 
35BC:  MOVLW  7C
35BE:  MOVWF  FF6
35C0:  MOVLW  06
35C2:  MOVWF  FF7
35C4:  CALL   0B3E
....................       lcd_gotoxy(1,2); 
35C8:  MOVLW  01
35CA:  MOVWF  xFA
35CC:  MOVLW  02
35CE:  MOVWF  xFB
35D0:  CALL   0A78
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
35D4:  MOVLW  92
35D6:  MOVWF  FF6
35D8:  MOVLW  06
35DA:  MOVWF  FF7
35DC:  MOVLW  0B
35DE:  MOVWF  xEC
35E0:  CALL   12F8
35E4:  MOVLW  08
35E6:  MOVWF  FE9
35E8:  MOVFF  5A,E9
35EC:  MOVFF  59,E8
35F0:  GOTO   1550
35F4:  MOVLW  20
35F6:  MOVWF  xF9
35F8:  CALL   0AE0
35FC:  MOVLW  20
35FE:  MOVWF  xF9
3600:  CALL   0AE0
3604:  MOVLW  20
3606:  MOVWF  xF9
3608:  CALL   0AE0
....................       lcd_gotoxy(1,4); 
360C:  MOVLW  01
360E:  MOVWF  xFA
3610:  MOVLW  04
3612:  MOVWF  xFB
3614:  CALL   0A78
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
3618:  MOVLW  A6
361A:  MOVWF  FF6
361C:  MOVLW  06
361E:  MOVWF  FF7
3620:  CALL   0B3E
....................        
....................       Cambio=OFF; 
3624:  BCF    2B.3
.................... //   } 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
3626:  BSF    F92.5
3628:  BTFSC  F80.5
362A:  BRA    3784
362C:  BSF    F96.1
362E:  BTFSC  F84.1
3630:  BRA    3784
....................          delay_ms(20); 
3632:  MOVLW  14
3634:  MOVWF  xFF
3636:  CALL   0940
....................          if(UP && RIGHT){ 
363A:  BSF    F92.5
363C:  BTFSC  F80.5
363E:  BRA    3784
3640:  BSF    F96.1
3642:  BTFSC  F84.1
3644:  BRA    3784
....................             delay_ms(200); 
3646:  MOVLW  C8
3648:  MOVWF  xFF
364A:  CALL   0940
....................             printf(lcd_putc,"\f"); 
364E:  MOVLW  0C
3650:  MOVWF  xF9
3652:  CALL   0AE0
....................             lcd_gotoxy(1,2); 
3656:  MOVLW  01
3658:  MOVWF  xFA
365A:  MOVLW  02
365C:  MOVWF  xFB
365E:  CALL   0A78
....................             printf(lcd_putc," Reset de tiempo "); 
3662:  MOVLW  BC
3664:  MOVWF  FF6
3666:  MOVLW  06
3668:  MOVWF  FF7
366A:  CALL   0B3E
....................             lcd_gotoxy(1,3); 
366E:  MOVLW  01
3670:  MOVWF  xFA
3672:  MOVLW  03
3674:  MOVWF  xFB
3676:  CALL   0A78
....................             printf(lcd_putc,"     Exitoso     "); 
367A:  MOVLW  CE
367C:  MOVWF  FF6
367E:  MOVLW  06
3680:  MOVWF  FF7
3682:  CALL   0B3E
....................             write_eeprom(7,0); 
3686:  MOVLW  07
3688:  MOVWF  FA9
368A:  CLRF   FA8
368C:  BCF    FA6.6
368E:  BCF    FA6.7
3690:  BSF    FA6.2
3692:  MOVF   FF2,W
3694:  MOVWF  00
3696:  BCF    FF2.6
3698:  BCF    FF2.7
369A:  MOVLB  F
369C:  MOVLW  55
369E:  MOVWF  FA7
36A0:  MOVLW  AA
36A2:  MOVWF  FA7
36A4:  BSF    FA6.1
36A6:  BTFSC  FA6.1
36A8:  BRA    36A6
36AA:  BCF    FA6.2
36AC:  MOVF   00,W
36AE:  IORWF  FF2,F
....................             delay_ms(20); 
36B0:  MOVLW  14
36B2:  MOVLB  0
36B4:  MOVWF  xFF
36B6:  CALL   0940
....................             write_eeprom(8,0); 
36BA:  MOVLW  08
36BC:  MOVWF  FA9
36BE:  CLRF   FA8
36C0:  BCF    FA6.6
36C2:  BCF    FA6.7
36C4:  BSF    FA6.2
36C6:  MOVF   FF2,W
36C8:  MOVWF  00
36CA:  BCF    FF2.6
36CC:  BCF    FF2.7
36CE:  MOVLB  F
36D0:  MOVLW  55
36D2:  MOVWF  FA7
36D4:  MOVLW  AA
36D6:  MOVWF  FA7
36D8:  BSF    FA6.1
36DA:  BTFSC  FA6.1
36DC:  BRA    36DA
36DE:  BCF    FA6.2
36E0:  MOVF   00,W
36E2:  IORWF  FF2,F
....................             delay_ms(20); 
36E4:  MOVLW  14
36E6:  MOVLB  0
36E8:  MOVWF  xFF
36EA:  CALL   0940
....................             write_eeprom(9,0); 
36EE:  MOVLW  09
36F0:  MOVWF  FA9
36F2:  CLRF   FA8
36F4:  BCF    FA6.6
36F6:  BCF    FA6.7
36F8:  BSF    FA6.2
36FA:  MOVF   FF2,W
36FC:  MOVWF  00
36FE:  BCF    FF2.6
3700:  BCF    FF2.7
3702:  MOVLB  F
3704:  MOVLW  55
3706:  MOVWF  FA7
3708:  MOVLW  AA
370A:  MOVWF  FA7
370C:  BSF    FA6.1
370E:  BTFSC  FA6.1
3710:  BRA    370E
3712:  BCF    FA6.2
3714:  MOVF   00,W
3716:  IORWF  FF2,F
....................             delay_ms(20); 
3718:  MOVLW  14
371A:  MOVLB  0
371C:  MOVWF  xFF
371E:  CALL   0940
....................             write_eeprom(10,0); 
3722:  MOVLW  0A
3724:  MOVWF  FA9
3726:  CLRF   FA8
3728:  BCF    FA6.6
372A:  BCF    FA6.7
372C:  BSF    FA6.2
372E:  MOVF   FF2,W
3730:  MOVWF  00
3732:  BCF    FF2.6
3734:  BCF    FF2.7
3736:  MOVLB  F
3738:  MOVLW  55
373A:  MOVWF  FA7
373C:  MOVLW  AA
373E:  MOVWF  FA7
3740:  BSF    FA6.1
3742:  BTFSC  FA6.1
3744:  BRA    3742
3746:  BCF    FA6.2
3748:  MOVF   00,W
374A:  IORWF  FF2,F
....................             delay_ms(700); 
374C:  MOVLW  04
374E:  MOVLB  0
3750:  MOVWF  xE8
3752:  MOVLW  AF
3754:  MOVWF  xFF
3756:  CALL   0940
375A:  DECFSZ xE8,F
375C:  BRA    3752
....................             segundos=0;minutos=0;horas=0; 
375E:  CLRF   35
3760:  CLRF   36
3762:  CLRF   5A
3764:  CLRF   59
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3766:  MOVLW  1E
3768:  MOVWF  xFF
376A:  CALL   0940
376E:  MOVLW  01
3770:  MOVWF  2C
3772:  CLRF   45
3774:  MOVLW  02
3776:  MOVWF  30
3778:  MOVWF  32
377A:  MOVLW  0C
377C:  MOVWF  xF9
377E:  CALL   0AE0
....................             Cambio=ON; 
3782:  BSF    2B.3
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
3784:  BSF    F96.2
3786:  BTFSC  F84.2
3788:  BRA    37C6
....................          delay_ms(20); 
378A:  MOVLW  14
378C:  MOVWF  xFF
378E:  CALL   0940
....................          if(IZQU){ 
3792:  BSF    F96.2
3794:  BTFSC  F84.2
3796:  BRA    37C4
....................             if(Flanco3 == 0){ 
3798:  BTFSC  29.6
379A:  BRA    37C4
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
379C:  BSF    29.6
379E:  MOVLW  02
37A0:  MOVWF  xE8
37A2:  MOVLW  FA
37A4:  MOVWF  xFF
37A6:  CALL   0940
37AA:  DECFSZ xE8,F
37AC:  BRA    37A2
37AE:  MOVLW  01
37B0:  MOVWF  2C
37B2:  CLRF   45
37B4:  MOVLW  02
37B6:  MOVWF  30
37B8:  MOVWF  32
37BA:  MOVLW  0C
37BC:  MOVWF  xF9
37BE:  CALL   0AE0
37C2:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
37C4:  BRA    37C8
....................          Flanco3 = 0; 
37C6:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
37C8:  MOVF   2C,W
37CA:  SUBLW  05
37CC:  BTFSS  FD8.2
37CE:  BRA    3A2C
....................       EliminaRuido(); 
37D0:  CALL   0004
.................... //      if(Cambio){ 
....................          lcd_gotoxy(1,1); 
37D4:  MOVLW  01
37D6:  MOVWF  xFA
37D8:  MOVWF  xFB
37DA:  CALL   0A78
....................          printf(lcd_putc,"  Zero Point Config "); 
37DE:  MOVLW  E0
37E0:  MOVWF  FF6
37E2:  MOVLW  06
37E4:  MOVWF  FF7
37E6:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
37EA:  MOVLW  01
37EC:  MOVWF  xFA
37EE:  MOVLW  02
37F0:  MOVWF  xFB
37F2:  CALL   0A78
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
37F6:  MOVLW  05
37F8:  MOVWF  xE8
37FA:  CALL   1B82
37FE:  MOVFF  00,E8
3802:  MOVFF  01,E9
3806:  MOVFF  02,EA
380A:  MOVFF  03,EB
380E:  MOVFF  03,FF
3812:  MOVFF  02,FE
3816:  MOVFF  01,FD
381A:  MOVFF  00,FC
381E:  MOVLW  D7
3820:  MOVLB  1
3822:  MOVWF  x03
3824:  MOVLW  A3
3826:  MOVWF  x02
3828:  CLRF   x01
382A:  MOVLW  81
382C:  MOVWF  x00
382E:  MOVLB  0
3830:  CALL   165A
3834:  MOVFF  00,E8
3838:  MOVFF  01,E9
383C:  MOVFF  02,EA
3840:  MOVFF  03,EB
3844:  MOVLW  F6
3846:  MOVWF  FF6
3848:  MOVLW  06
384A:  MOVWF  FF7
384C:  MOVLW  09
384E:  MOVWF  xEC
3850:  CALL   12F8
3854:  MOVLW  02
3856:  MOVWF  FE9
3858:  MOVFF  EB,EF
385C:  MOVFF  EA,EE
3860:  MOVFF  E9,ED
3864:  MOVFF  E8,EC
3868:  MOVWF  xF0
386A:  CALL   1ED4
386E:  MOVLW  04
3870:  MOVWF  FF6
3872:  MOVLW  07
3874:  MOVWF  FF7
3876:  MOVLW  07
3878:  MOVWF  xEC
387A:  CALL   12F8
....................          lcd_gotoxy(1,3); 
387E:  MOVLW  01
3880:  MOVWF  xFA
3882:  MOVLW  03
3884:  MOVWF  xFB
3886:  CALL   0A78
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
388A:  CLRF   xF9
388C:  CALL   1606
3890:  MOVFF  00,E8
3894:  MOVFF  01,E9
3898:  MOVFF  02,EA
389C:  MOVFF  03,EB
38A0:  MOVLW  0C
38A2:  MOVWF  FF6
38A4:  MOVLW  07
38A6:  MOVWF  FF7
38A8:  MOVLW  08
38AA:  MOVWF  xEC
38AC:  CALL   12F8
38B0:  MOVLW  01
38B2:  MOVWF  FE9
38B4:  MOVFF  EB,EF
38B8:  MOVFF  EA,EE
38BC:  MOVFF  E9,ED
38C0:  MOVFF  E8,EC
38C4:  CLRF   xF0
38C6:  CALL   1ED4
....................          lcd_gotoxy(1,4); 
38CA:  MOVLW  01
38CC:  MOVWF  xFA
38CE:  MOVLW  04
38D0:  MOVWF  xFB
38D2:  CALL   0A78
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
38D6:  MOVLW  1A
38D8:  MOVWF  FF6
38DA:  MOVLW  07
38DC:  MOVWF  FF7
38DE:  MOVLW  07
38E0:  MOVWF  xEC
38E2:  CALL   12F8
38E6:  MOVLW  01
38E8:  MOVWF  FE9
38EA:  MOVFF  C0,EF
38EE:  MOVFF  BF,EE
38F2:  MOVFF  BE,ED
38F6:  MOVFF  BD,EC
38FA:  CLRF   xF0
38FC:  CALL   1ED4
....................           
....................          Cambio=OFF; 
3900:  BCF    2B.3
.................... //      } 
....................      
....................       if(RIGHT){// Si oprime derecha 
3902:  BSF    F96.1
3904:  BTFSC  F84.1
3906:  BRA    39EC
....................          delay_ms(20); 
3908:  MOVLW  14
390A:  MOVWF  xFF
390C:  CALL   0940
....................          if(RIGHT){ 
3910:  BSF    F96.1
3912:  BTFSC  F84.1
3914:  BRA    39EA
....................             if(Flanco1 == 0){ 
3916:  BTFSC  29.4
3918:  BRA    39EA
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
391A:  MOVLW  01
391C:  MOVWF  2C
391E:  CLRF   45
3920:  MOVLW  02
3922:  MOVWF  30
3924:  MOVWF  32
3926:  MOVLW  0B
3928:  MOVWF  2F
392A:  MOVLW  02
392C:  MOVWF  xE8
392E:  MOVLW  FA
3930:  MOVWF  xFF
3932:  CALL   0940
3936:  DECFSZ xE8,F
3938:  BRA    392E
393A:  MOVLW  0C
393C:  MOVWF  xF9
393E:  CALL   0AE0
....................                G=sensores(0); 
3942:  CLRF   xF9
3944:  CALL   1606
3948:  MOVFF  03,C0
394C:  MOVFF  02,BF
3950:  MOVFF  01,BE
3954:  MOVFF  00,BD
....................                G16=(int16)G; 
3958:  MOVFF  C0,FF
395C:  MOVFF  BF,FE
3960:  MOVFF  BE,FD
3964:  MOVFF  BD,FC
3968:  CALL   2064
396C:  MOVFF  02,5C
3970:  MOVFF  01,5B
....................                G_l=G16; G_h=(G16>>8); 
3974:  MOVFF  5B,39
3978:  MOVFF  5C,3A
....................                 
....................                write_eeprom(11,G_l); 
397C:  MOVLW  0B
397E:  MOVWF  FA9
3980:  MOVFF  39,FA8
3984:  BCF    FA6.6
3986:  BCF    FA6.7
3988:  BSF    FA6.2
398A:  MOVF   FF2,W
398C:  MOVWF  00
398E:  BCF    FF2.6
3990:  BCF    FF2.7
3992:  MOVLB  F
3994:  MOVLW  55
3996:  MOVWF  FA7
3998:  MOVLW  AA
399A:  MOVWF  FA7
399C:  BSF    FA6.1
399E:  BTFSC  FA6.1
39A0:  BRA    399E
39A2:  BCF    FA6.2
39A4:  MOVF   00,W
39A6:  IORWF  FF2,F
....................                delay_ms(20); 
39A8:  MOVLW  14
39AA:  MOVLB  0
39AC:  MOVWF  xFF
39AE:  CALL   0940
....................                write_eeprom(12,G_h);//Guardar valor de Setpoint en eeprom 
39B2:  MOVLW  0C
39B4:  MOVWF  FA9
39B6:  MOVFF  3A,FA8
39BA:  BCF    FA6.6
39BC:  BCF    FA6.7
39BE:  BSF    FA6.2
39C0:  MOVF   FF2,W
39C2:  MOVWF  00
39C4:  BCF    FF2.6
39C6:  BCF    FF2.7
39C8:  MOVLB  F
39CA:  MOVLW  55
39CC:  MOVWF  FA7
39CE:  MOVLW  AA
39D0:  MOVWF  FA7
39D2:  BSF    FA6.1
39D4:  BTFSC  FA6.1
39D6:  BRA    39D4
39D8:  BCF    FA6.2
39DA:  MOVF   00,W
39DC:  IORWF  FF2,F
....................                delay_ms(20); 
39DE:  MOVLW  14
39E0:  MOVLB  0
39E2:  MOVWF  xFF
39E4:  CALL   0940
....................                Cambio=ON; 
39E8:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
39EA:  BRA    39EE
....................          Flanco1 = 0; 
39EC:  BCF    29.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
39EE:  BSF    F96.2
39F0:  BTFSC  F84.2
39F2:  BRA    3A2A
....................          delay_ms(20); 
39F4:  MOVLW  14
39F6:  MOVWF  xFF
39F8:  CALL   0940
....................          if(IZQU){ 
39FC:  BSF    F96.2
39FE:  BTFSC  F84.2
3A00:  BRA    3A28
....................             if(Flanco3 == 0){ 
3A02:  BTFSC  29.6
3A04:  BRA    3A28
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
3A06:  MOVLW  01
3A08:  MOVWF  2C
3A0A:  CLRF   45
3A0C:  MOVLW  02
3A0E:  MOVWF  30
3A10:  MOVWF  32
3A12:  MOVLW  0B
3A14:  MOVWF  2F
3A16:  MOVLW  1E
3A18:  MOVWF  xFF
3A1A:  CALL   0940
3A1E:  MOVLW  0C
3A20:  MOVWF  xF9
3A22:  CALL   0AE0
....................                Cambio=ON; 
3A26:  BSF    2B.3
....................             } 
....................          } 
....................       }else{ 
3A28:  BRA    3A2C
....................          Flanco3 = 0; 
3A2A:  BCF    29.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
3A2C:  MOVF   2C,W
3A2E:  SUBLW  06
3A30:  BTFSS  FD8.2
3A32:  BRA    3B5C
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
3A34:  BTG    2A.4
3A36:  BSF    29.4
3A38:  MOVLW  01
3A3A:  MOVWF  2C
3A3C:  CLRF   45
....................                        
....................             if(estadoalarma==1) 
3A3E:  BTFSS  2A.4
3A40:  BRA    3AA2
....................             {estadoalarma=1; 
3A42:  BSF    2A.4
....................                lcd_gotoxy(1,1); 
3A44:  MOVLW  01
3A46:  MOVWF  xFA
3A48:  MOVWF  xFB
3A4A:  CALL   0A78
....................                printf(lcd_putc,"                    "); 
3A4E:  MOVLW  28
3A50:  MOVWF  FF6
3A52:  MOVLW  07
3A54:  MOVWF  FF7
3A56:  CALL   0B3E
....................                lcd_gotoxy(1,2); 
3A5A:  MOVLW  01
3A5C:  MOVWF  xFA
3A5E:  MOVLW  02
3A60:  MOVWF  xFB
3A62:  CALL   0A78
....................                printf(lcd_putc,"        Activo      "); 
3A66:  MOVLW  3E
3A68:  MOVWF  FF6
3A6A:  MOVLW  07
3A6C:  MOVWF  FF7
3A6E:  CALL   0B3E
....................                lcd_gotoxy(1,3); 
3A72:  MOVLW  01
3A74:  MOVWF  xFA
3A76:  MOVLW  03
3A78:  MOVWF  xFB
3A7A:  CALL   0A78
....................                printf(lcd_putc,"        Alarma      "); 
3A7E:  MOVLW  54
3A80:  MOVWF  FF6
3A82:  MOVLW  07
3A84:  MOVWF  FF7
3A86:  CALL   0B3E
....................                lcd_gotoxy(1,4); 
3A8A:  MOVLW  01
3A8C:  MOVWF  xFA
3A8E:  MOVLW  04
3A90:  MOVWF  xFB
3A92:  CALL   0A78
....................                printf(lcd_putc,"                    ");} 
3A96:  MOVLW  6A
3A98:  MOVWF  FF6
3A9A:  MOVLW  07
3A9C:  MOVWF  FF7
3A9E:  CALL   0B3E
....................                 
....................             if(estadoalarma==0) 
3AA2:  BTFSC  2A.4
3AA4:  BRA    3B06
....................             {estadoalarma=0; 
3AA6:  BCF    2A.4
....................                lcd_gotoxy(1,1); 
3AA8:  MOVLW  01
3AAA:  MOVWF  xFA
3AAC:  MOVWF  xFB
3AAE:  CALL   0A78
....................                printf(lcd_putc,"                    "); 
3AB2:  MOVLW  80
3AB4:  MOVWF  FF6
3AB6:  MOVLW  07
3AB8:  MOVWF  FF7
3ABA:  CALL   0B3E
....................                lcd_gotoxy(1,2); 
3ABE:  MOVLW  01
3AC0:  MOVWF  xFA
3AC2:  MOVLW  02
3AC4:  MOVWF  xFB
3AC6:  CALL   0A78
....................                printf(lcd_putc,"      Desactivo     "); 
3ACA:  MOVLW  96
3ACC:  MOVWF  FF6
3ACE:  MOVLW  07
3AD0:  MOVWF  FF7
3AD2:  CALL   0B3E
....................                lcd_gotoxy(1,3); 
3AD6:  MOVLW  01
3AD8:  MOVWF  xFA
3ADA:  MOVLW  03
3ADC:  MOVWF  xFB
3ADE:  CALL   0A78
....................                printf(lcd_putc,"       Alarma       "); 
3AE2:  MOVLW  AC
3AE4:  MOVWF  FF6
3AE6:  MOVLW  07
3AE8:  MOVWF  FF7
3AEA:  CALL   0B3E
....................                lcd_gotoxy(1,4); 
3AEE:  MOVLW  01
3AF0:  MOVWF  xFA
3AF2:  MOVLW  04
3AF4:  MOVWF  xFB
3AF6:  CALL   0A78
....................                printf(lcd_putc,"                    ");} 
3AFA:  MOVLW  C2
3AFC:  MOVWF  FF6
3AFE:  MOVLW  07
3B00:  MOVWF  FF7
3B02:  CALL   0B3E
....................               
....................             write_eeprom(4,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3B06:  MOVLW  00
3B08:  BTFSC  2A.4
3B0A:  MOVLW  01
3B0C:  MOVWF  xE8
3B0E:  MOVLW  04
3B10:  MOVWF  FA9
3B12:  MOVFF  E8,FA8
3B16:  BCF    FA6.6
3B18:  BCF    FA6.7
3B1A:  BSF    FA6.2
3B1C:  MOVF   FF2,W
3B1E:  MOVWF  00
3B20:  BCF    FF2.6
3B22:  BCF    FF2.7
3B24:  MOVLB  F
3B26:  MOVLW  55
3B28:  MOVWF  FA7
3B2A:  MOVLW  AA
3B2C:  MOVWF  FA7
3B2E:  BSF    FA6.1
3B30:  BTFSC  FA6.1
3B32:  BRA    3B30
3B34:  BCF    FA6.2
3B36:  MOVF   00,W
3B38:  IORWF  FF2,F
3B3A:  MOVLW  04
3B3C:  MOVLB  0
3B3E:  MOVWF  xE8
3B40:  MOVLW  FA
3B42:  MOVWF  xFF
3B44:  CALL   0940
3B48:  DECFSZ xE8,F
3B4A:  BRA    3B40
3B4C:  MOVLW  02
3B4E:  MOVWF  30
3B50:  MOVWF  32
3B52:  MOVLW  0C
3B54:  MOVWF  xF9
3B56:  CALL   0AE0
....................             Cambio=ON; 
3B5A:  BSF    2B.3
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu7--------------------------------------------------------------- 
....................    if(Menu == 7){ // Menu de seleccion de Velocidad 
3B5C:  MOVF   2C,W
3B5E:  SUBLW  07
3B60:  BTFSS  FD8.2
3B62:  BRA    3CFA
....................       if(Vel1>6) 
3B64:  MOVF   56,W
3B66:  SUBLW  06
3B68:  BC    3B6E
....................          Vel1=6; 
3B6A:  MOVLW  06
3B6C:  MOVWF  56
....................       if(Vel1<1) 
3B6E:  MOVF   56,F
3B70:  BNZ   3B76
....................          Vel1=1; 
3B72:  MOVLW  01
3B74:  MOVWF  56
....................        
....................       lcd_gotoxy(1,1); 
3B76:  MOVLW  01
3B78:  MOVWF  xFA
3B7A:  MOVWF  xFB
3B7C:  CALL   0A78
....................       printf(lcd_putc,"Seleccione Velocidad"); 
3B80:  MOVLW  D8
3B82:  MOVWF  FF6
3B84:  MOVLW  07
3B86:  MOVWF  FF7
3B88:  CALL   0B3E
....................       lcd_gotoxy(1,2); 
3B8C:  MOVLW  01
3B8E:  MOVWF  xFA
3B90:  MOVLW  02
3B92:  MOVWF  xFB
3B94:  CALL   0A78
....................       printf(lcd_putc,"   del Ventilador   "); 
3B98:  MOVLW  EE
3B9A:  MOVWF  FF6
3B9C:  MOVLW  07
3B9E:  MOVWF  FF7
3BA0:  CALL   0B3E
....................       lcd_gotoxy(1,3); 
3BA4:  MOVLW  01
3BA6:  MOVWF  xFA
3BA8:  MOVLW  03
3BAA:  MOVWF  xFB
3BAC:  CALL   0A78
....................       printf(lcd_putc,"     Vel: %u       ",Vel1); 
3BB0:  MOVLW  04
3BB2:  MOVWF  FF6
3BB4:  MOVLW  08
3BB6:  MOVWF  FF7
3BB8:  MOVLW  0A
3BBA:  MOVWF  xEC
3BBC:  CALL   12F8
3BC0:  MOVFF  56,E8
3BC4:  MOVLW  1B
3BC6:  MOVWF  xE9
3BC8:  CALL   14E4
3BCC:  MOVLW  10
3BCE:  MOVWF  FF6
3BD0:  MOVLW  08
3BD2:  MOVWF  FF7
3BD4:  MOVLW  07
3BD6:  MOVWF  xEC
3BD8:  CALL   12F8
....................       lcd_gotoxy(1,4); 
3BDC:  MOVLW  01
3BDE:  MOVWF  xFA
3BE0:  MOVLW  04
3BE2:  MOVWF  xFB
3BE4:  CALL   0A78
....................       printf(lcd_putc,"                    ");       
3BE8:  MOVLW  18
3BEA:  MOVWF  FF6
3BEC:  MOVLW  08
3BEE:  MOVWF  FF7
3BF0:  CALL   0B3E
....................        
....................       if(UP && Vel1<6)//Si oprime hacia arriba 
3BF4:  BSF    F92.5
3BF6:  BTFSC  F80.5
3BF8:  BRA    3C0A
3BFA:  MOVF   56,W
3BFC:  SUBLW  05
3BFE:  BNC   3C0A
....................       {   
....................          delay_ms(200);Vel1++; 
3C00:  MOVLW  C8
3C02:  MOVWF  xFF
3C04:  CALL   0940
3C08:  INCF   56,F
....................       } 
....................              
....................       if(DOWN && Vel1>0)//Si oprime hacia abajo 
3C0A:  BSF    F96.0
3C0C:  BTFSC  F84.0
3C0E:  BRA    3C1E
3C10:  MOVF   56,F
3C12:  BZ    3C1E
....................       {   
....................          delay_ms(200);Vel1--; 
3C14:  MOVLW  C8
3C16:  MOVWF  xFF
3C18:  CALL   0940
3C1C:  DECF   56,F
....................       } 
....................              
....................       if(RIGHT)//Si oprime SET 
3C1E:  BSF    F96.1
3C20:  BTFSC  F84.1
3C22:  BRA    3C28
....................       {            
....................          VelMotor=Vel1; 
3C24:  MOVFF  56,D0
....................       }  
....................              
....................       if(IZQU)//Si oprime boton de Toma. 
3C28:  BSF    F96.2
3C2A:  BTFSC  F84.2
3C2C:  BRA    3CFA
....................       {                   
....................          delay_ms(100);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
3C2E:  MOVLW  64
3C30:  MOVWF  xFF
3C32:  CALL   0940
3C36:  MOVLW  02
3C38:  MOVWF  30
3C3A:  MOVWF  32
3C3C:  MOVLW  0C
3C3E:  MOVWF  xF9
3C40:  CALL   0AE0
....................          write_eeprom(13,Vel1);//Guardar valor de Setpoint en eeprom 
3C44:  MOVLW  0D
3C46:  MOVWF  FA9
3C48:  MOVFF  56,FA8
3C4C:  BCF    FA6.6
3C4E:  BCF    FA6.7
3C50:  BSF    FA6.2
3C52:  MOVF   FF2,W
3C54:  MOVWF  00
3C56:  BCF    FF2.6
3C58:  BCF    FF2.7
3C5A:  MOVLB  F
3C5C:  MOVLW  55
3C5E:  MOVWF  FA7
3C60:  MOVLW  AA
3C62:  MOVWF  FA7
3C64:  BSF    FA6.1
3C66:  BTFSC  FA6.1
3C68:  BRA    3C66
3C6A:  BCF    FA6.2
3C6C:  MOVF   00,W
3C6E:  IORWF  FF2,F
....................          delay_ms(20); 
3C70:  MOVLW  14
3C72:  MOVLB  0
3C74:  MOVWF  xFF
3C76:  CALL   0940
....................          lcd_gotoxy(1,1); 
3C7A:  MOVLW  01
3C7C:  MOVWF  xFA
3C7E:  MOVWF  xFB
3C80:  CALL   0A78
....................          printf(lcd_putc,"                    "); 
3C84:  MOVLW  2E
3C86:  MOVWF  FF6
3C88:  MOVLW  08
3C8A:  MOVWF  FF7
3C8C:  CALL   0B3E
....................          lcd_gotoxy(1,2); 
3C90:  MOVLW  01
3C92:  MOVWF  xFA
3C94:  MOVLW  02
3C96:  MOVWF  xFB
3C98:  CALL   0A78
....................          printf(lcd_putc,"     Velocidad      "); 
3C9C:  MOVLW  44
3C9E:  MOVWF  FF6
3CA0:  MOVLW  08
3CA2:  MOVWF  FF7
3CA4:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
3CA8:  MOVLW  01
3CAA:  MOVWF  xFA
3CAC:  MOVLW  03
3CAE:  MOVWF  xFB
3CB0:  CALL   0A78
....................          printf(lcd_putc,"      Almacenada    "); 
3CB4:  MOVLW  5A
3CB6:  MOVWF  FF6
3CB8:  MOVLW  08
3CBA:  MOVWF  FF7
3CBC:  CALL   0B3E
....................          lcd_gotoxy(1,4); 
3CC0:  MOVLW  01
3CC2:  MOVWF  xFA
3CC4:  MOVLW  04
3CC6:  MOVWF  xFB
3CC8:  CALL   0A78
....................          printf(lcd_putc,"                    ");  
3CCC:  MOVLW  70
3CCE:  MOVWF  FF6
3CD0:  MOVLW  08
3CD2:  MOVWF  FF7
3CD4:  CALL   0B3E
....................          delay_ms(1000); 
3CD8:  MOVLW  04
3CDA:  MOVWF  xE8
3CDC:  MOVLW  FA
3CDE:  MOVWF  xFF
3CE0:  CALL   0940
3CE4:  DECFSZ xE8,F
3CE6:  BRA    3CDC
....................          printf(lcd_putc,"\f"); 
3CE8:  MOVLW  0C
3CEA:  MOVWF  xF9
3CEC:  CALL   0AE0
....................          lcd_init(); 
3CF0:  CALL   09D6
....................          Menu=1; paso=0; 
3CF4:  MOVLW  01
3CF6:  MOVWF  2C
3CF8:  CLRF   45
....................       } 
....................    }       
.................... //----------------Fin-Menu7--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
3CFA:  MOVF   2C,W
3CFC:  SUBLW  32
3CFE:  BTFSS  FD8.2
3D00:  BRA    4336
....................    if(Lectura==1){ 
3D02:  BTFSS  2A.0
3D04:  BRA    3F38
....................       Lectura=0; 
3D06:  BCF    2A.0
....................       CaidaPresion=Leer_Sensor_Presion(8); 
3D08:  MOVLW  08
3D0A:  MOVWF  xE8
3D0C:  CALL   1B82
3D10:  MOVFF  03,BC
3D14:  MOVFF  02,BB
3D18:  MOVFF  01,BA
3D1C:  MOVFF  00,B9
....................       lcd_gotoxy(1,1); 
3D20:  MOVLW  01
3D22:  MOVWF  xFA
3D24:  MOVWF  xFB
3D26:  CALL   0A78
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
3D2A:  MOVFF  BC,FF
3D2E:  MOVFF  BB,FE
3D32:  MOVFF  BA,FD
3D36:  MOVFF  B9,FC
3D3A:  MOVLW  D7
3D3C:  MOVLB  1
3D3E:  MOVWF  x03
3D40:  MOVLW  A3
3D42:  MOVWF  x02
3D44:  CLRF   x01
3D46:  MOVLW  81
3D48:  MOVWF  x00
3D4A:  MOVLB  0
3D4C:  CALL   165A
3D50:  MOVFF  00,E8
3D54:  MOVFF  01,E9
3D58:  MOVFF  02,EA
3D5C:  MOVFF  03,EB
3D60:  MOVLW  86
3D62:  MOVWF  FF6
3D64:  MOVLW  08
3D66:  MOVWF  FF7
3D68:  MOVLW  08
3D6A:  MOVWF  xEC
3D6C:  CALL   12F8
3D70:  MOVLW  02
3D72:  MOVWF  FE9
3D74:  MOVFF  EB,EF
3D78:  MOVFF  EA,EE
3D7C:  MOVFF  E9,ED
3D80:  MOVFF  E8,EC
3D84:  MOVWF  xF0
3D86:  CALL   1ED4
3D8A:  MOVLW  93
3D8C:  MOVWF  FF6
3D8E:  MOVLW  08
3D90:  MOVWF  FF7
3D92:  MOVLW  07
3D94:  MOVWF  xEC
3D96:  CALL   12F8
....................       Saturacion=(CaidaPresion/0.24)*11; 
3D9A:  MOVFF  BC,100
3D9E:  MOVFF  BB,FF
3DA2:  MOVFF  BA,FE
3DA6:  MOVFF  B9,FD
3DAA:  MOVLW  8F
3DAC:  MOVLB  1
3DAE:  MOVWF  x04
3DB0:  MOVLW  C2
3DB2:  MOVWF  x03
3DB4:  MOVLW  75
3DB6:  MOVWF  x02
3DB8:  MOVLW  7C
3DBA:  MOVWF  x01
3DBC:  MOVLB  0
3DBE:  CALL   178E
3DC2:  MOVFF  00,E8
3DC6:  MOVFF  01,E9
3DCA:  MOVFF  02,EA
3DCE:  MOVFF  03,EB
3DD2:  MOVFF  03,FF
3DD6:  MOVFF  02,FE
3DDA:  MOVFF  01,FD
3DDE:  MOVFF  00,FC
3DE2:  MOVLB  1
3DE4:  CLRF   x03
3DE6:  CLRF   x02
3DE8:  MOVLW  30
3DEA:  MOVWF  x01
3DEC:  MOVLW  82
3DEE:  MOVWF  x00
3DF0:  MOVLB  0
3DF2:  CALL   165A
3DF6:  MOVFF  03,B8
3DFA:  MOVFF  02,B7
3DFE:  MOVFF  01,B6
3E02:  MOVFF  00,B5
....................        
....................       if(Saturacion>11) 
3E06:  CLRF   xFF
3E08:  CLRF   xFE
3E0A:  MOVLW  30
3E0C:  MOVWF  xFD
3E0E:  MOVLW  82
3E10:  MOVWF  xFC
3E12:  MOVFF  B8,103
3E16:  MOVFF  B7,102
3E1A:  MOVFF  B6,101
3E1E:  MOVFF  B5,100
3E22:  CALL   0E98
3E26:  BNC   3E34
....................       { 
....................          Saturacion=11; 
3E28:  CLRF   xB8
3E2A:  CLRF   xB7
3E2C:  MOVLW  30
3E2E:  MOVWF  xB6
3E30:  MOVLW  82
3E32:  MOVWF  xB5
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
3E34:  CLRF   41
3E36:  MOVFF  B8,EB
3E3A:  MOVFF  B7,EA
3E3E:  MOVFF  B6,E9
3E42:  MOVFF  B5,E8
3E46:  CALL   23FE
3E4A:  MOVFF  00,E8
3E4E:  MOVFF  01,E9
3E52:  MOVFF  02,EA
3E56:  MOVFF  03,EB
3E5A:  MOVLB  1
3E5C:  CLRF   x01
3E5E:  MOVFF  41,100
3E62:  MOVLB  0
3E64:  CALL   0BC4
3E68:  MOVFF  03,FF
3E6C:  MOVFF  02,FE
3E70:  MOVFF  01,FD
3E74:  MOVFF  00,FC
3E78:  MOVFF  EB,103
3E7C:  MOVFF  EA,102
3E80:  MOVFF  E9,101
3E84:  MOVFF  E8,100
3E88:  CALL   0E98
3E8C:  BNC   3EAA
....................       { 
....................          lcd_gotoxy(i+8,2); 
3E8E:  MOVLW  08
3E90:  ADDWF  41,W
3E92:  MOVWF  xE8
3E94:  MOVWF  xFA
3E96:  MOVLW  02
3E98:  MOVWF  xFB
3E9A:  CALL   0A78
....................          printf(lcd_putc,"Ñ"); 
3E9E:  MOVLW  D1
3EA0:  MOVWF  xF9
3EA2:  CALL   0AE0
....................       } 
3EA6:  INCF   41,F
3EA8:  BRA    3E36
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
3EAA:  MOVFF  B8,EB
3EAE:  MOVFF  B7,EA
3EB2:  MOVFF  B6,E9
3EB6:  MOVFF  B5,E8
3EBA:  CALL   23FE
3EBE:  MOVFF  03,FF
3EC2:  MOVFF  02,FE
3EC6:  MOVFF  01,FD
3ECA:  MOVFF  00,FC
3ECE:  CALL   2064
3ED2:  MOVFF  01,41
3ED6:  MOVF   41,W
3ED8:  SUBLW  0A
3EDA:  BNC   3EF8
....................       { 
....................          lcd_gotoxy(i+8,2); 
3EDC:  MOVLW  08
3EDE:  ADDWF  41,W
3EE0:  MOVWF  xE8
3EE2:  MOVWF  xFA
3EE4:  MOVLW  02
3EE6:  MOVWF  xFB
3EE8:  CALL   0A78
....................          printf(lcd_putc," "); 
3EEC:  MOVLW  20
3EEE:  MOVWF  xF9
3EF0:  CALL   0AE0
....................       } 
3EF4:  INCF   41,F
3EF6:  BRA    3ED6
....................        
....................       lcd_gotoxy(9,3); 
3EF8:  MOVLW  09
3EFA:  MOVWF  xFA
3EFC:  MOVLW  03
3EFE:  MOVWF  xFB
3F00:  CALL   0A78
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3F04:  MOVLW  9C
3F06:  MOVWF  FF6
3F08:  MOVLW  08
3F0A:  MOVWF  FF7
3F0C:  MOVLW  06
3F0E:  MOVWF  xEC
3F10:  CALL   12F8
3F14:  MOVFF  3B,E8
3F18:  MOVLW  03
3F1A:  MOVWF  xE9
3F1C:  CALL   14E4
3F20:  MOVLW  3A
3F22:  MOVWF  xF9
3F24:  CALL   0AE0
3F28:  MOVFF  3C,E8
3F2C:  MOVLW  01
3F2E:  MOVWF  xE9
3F30:  CALL   14E4
....................       EliminaRuido(); 
3F34:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
3F38:  BTFSS  29.7
3F3A:  BRA    3FD4
....................    { 
....................       if(estadoalarma==1) 
3F3C:  BTFSS  2A.4
3F3E:  BRA    3FCA
....................       { 
....................          printf(lcd_putc,"\f"); 
3F40:  MOVLW  0C
3F42:  MOVWF  xF9
3F44:  CALL   0AE0
....................          lcd_gotoxy(1,2); 
3F48:  MOVLW  01
3F4A:  MOVWF  xFA
3F4C:  MOVLW  02
3F4E:  MOVWF  xFB
3F50:  CALL   0A78
....................          printf(lcd_putc,"  Temporizador  de  "); 
3F54:  MOVLW  AC
3F56:  MOVWF  FF6
3F58:  MOVLW  08
3F5A:  MOVWF  FF7
3F5C:  CALL   0B3E
....................          lcd_gotoxy(1,3); 
3F60:  MOVLW  01
3F62:  MOVWF  xFA
3F64:  MOVLW  03
3F66:  MOVWF  xFB
3F68:  CALL   0A78
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3F6C:  MOVLW  C2
3F6E:  MOVWF  FF6
3F70:  MOVLW  08
3F72:  MOVWF  FF7
3F74:  CALL   0B3E
....................          lcd_gotoxy(1,4); 
3F78:  MOVLW  01
3F7A:  MOVWF  xFA
3F7C:  MOVLW  04
3F7E:  MOVWF  xFB
3F80:  CALL   0A78
....................          printf(lcd_putc,"                    "); 
3F84:  MOVLW  D8
3F86:  MOVWF  FF6
3F88:  MOVLW  08
3F8A:  MOVWF  FF7
3F8C:  CALL   0B3E
....................          lcd_gotoxy(1,1); 
3F90:  MOVLW  01
3F92:  MOVWF  xFA
3F94:  MOVWF  xFB
3F96:  CALL   0A78
....................          printf(lcd_putc,"                    "); 
3F9A:  MOVLW  EE
3F9C:  MOVWF  FF6
3F9E:  MOVLW  08
3FA0:  MOVWF  FF7
3FA2:  CALL   0B3E
....................          for(i=0;i<5;i++) 
3FA6:  CLRF   41
3FA8:  MOVF   41,W
3FAA:  SUBLW  04
3FAC:  BNC   3FCA
....................          { 
....................             Buzzer_on; 
3FAE:  BSF    F8B.0
3FB0:  BCF    F94.0
....................             delay_ms(200); 
3FB2:  MOVLW  C8
3FB4:  MOVWF  xFF
3FB6:  CALL   0940
....................             Buzzer_off; 
3FBA:  BCF    F8B.0
3FBC:  BCF    F94.0
....................             delay_ms(200); 
3FBE:  MOVLW  C8
3FC0:  MOVWF  xFF
3FC2:  CALL   0940
....................          } 
3FC6:  INCF   41,F
3FC8:  BRA    3FA8
....................       } 
....................       tiempo_cumplido=0; 
3FCA:  BCF    29.7
....................       printf(lcd_putc,"\f"); 
3FCC:  MOVLW  0C
3FCE:  MOVWF  xF9
3FD0:  CALL   0AE0
....................    } 
....................     
....................    if(CaidaPresion>=0.23) 
3FD4:  MOVLW  1F
3FD6:  MOVWF  xFF
3FD8:  MOVLW  85
3FDA:  MOVWF  xFE
3FDC:  MOVLW  6B
3FDE:  MOVWF  xFD
3FE0:  MOVLW  7C
3FE2:  MOVWF  xFC
3FE4:  MOVFF  BC,103
3FE8:  MOVFF  BB,102
3FEC:  MOVFF  BA,101
3FF0:  MOVFF  B9,100
3FF4:  CALL   0E98
3FF8:  BC    3FFC
3FFA:  BNZ   4002
....................    {  
....................       ActivaBuzzer=1; 
3FFC:  MOVLW  01
3FFE:  MOVWF  51
....................    } 
....................    else 
4000:  BRA    4008
....................    { 
....................       ActivaBuzzer=0; 
4002:  CLRF   51
....................       Buzzer_off; 
4004:  BCF    F8B.0
4006:  BCF    F94.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
4008:  MOVLW  01
400A:  MOVWF  xFA
400C:  MOVLW  02
400E:  MOVWF  xFB
4010:  CALL   0A78
....................       printf(lcd_putc,"Filtro:"); 
4014:  MOVLW  04
4016:  MOVWF  FF6
4018:  MOVLW  09
401A:  MOVWF  FF7
401C:  CALL   0B3E
....................        
....................       if(estadomv==1) 
4020:  BTFSS  29.2
4022:  BRA    403E
....................       { 
....................          lcd_gotoxy(1,4); 
4024:  MOVLW  01
4026:  MOVWF  xFA
4028:  MOVLW  04
402A:  MOVWF  xFB
402C:  CALL   0A78
....................          printf(lcd_putc,"Motor:ON ");       
4030:  MOVLW  0C
4032:  MOVWF  FF6
4034:  MOVLW  09
4036:  MOVWF  FF7
4038:  CALL   0B3E
....................       } 
....................       else 
403C:  BRA    4056
....................       { 
....................          lcd_gotoxy(1,4); 
403E:  MOVLW  01
4040:  MOVWF  xFA
4042:  MOVLW  04
4044:  MOVWF  xFB
4046:  CALL   0A78
....................          printf(lcd_putc,"Motor:OFF"); 
404A:  MOVLW  16
404C:  MOVWF  FF6
404E:  MOVLW  09
4050:  MOVWF  FF7
4052:  CALL   0B3E
....................       } 
....................        
....................       if(estadouv==1) 
4056:  BTFSS  29.0
4058:  BRA    4074
....................       { 
....................          lcd_gotoxy(13,4); 
405A:  MOVLW  0D
405C:  MOVWF  xFA
405E:  MOVLW  04
4060:  MOVWF  xFB
4062:  CALL   0A78
....................          printf(lcd_putc,"UV:ON "); 
4066:  MOVLW  20
4068:  MOVWF  FF6
406A:  MOVLW  09
406C:  MOVWF  FF7
406E:  CALL   0B3E
....................       } 
....................       else 
4072:  BRA    408C
....................       {          
....................          lcd_gotoxy(13,4); 
4074:  MOVLW  0D
4076:  MOVWF  xFA
4078:  MOVLW  04
407A:  MOVWF  xFB
407C:  CALL   0A78
....................          printf(lcd_putc,"UV:OFF"); 
4080:  MOVLW  28
4082:  MOVWF  FF6
4084:  MOVLW  09
4086:  MOVWF  FF7
4088:  CALL   0B3E
....................       } 
....................        
....................       if(estadofl==1) 
408C:  BTFSS  29.1
408E:  BRA    40AA
....................       { 
....................          lcd_gotoxy(1,3); 
4090:  MOVLW  01
4092:  MOVWF  xFA
4094:  MOVLW  03
4096:  MOVWF  xFB
4098:  CALL   0A78
....................          printf(lcd_putc,"Luz:ON "); 
409C:  MOVLW  30
409E:  MOVWF  FF6
40A0:  MOVLW  09
40A2:  MOVWF  FF7
40A4:  CALL   0B3E
....................       } 
....................       else 
40A8:  BRA    40C2
....................       { 
....................          lcd_gotoxy(1,3); 
40AA:  MOVLW  01
40AC:  MOVWF  xFA
40AE:  MOVLW  03
40B0:  MOVWF  xFB
40B2:  CALL   0A78
....................          printf(lcd_putc,"Luz:OFF"); 
40B6:  MOVLW  38
40B8:  MOVWF  FF6
40BA:  MOVLW  09
40BC:  MOVWF  FF7
40BE:  CALL   0B3E
....................       }  
....................       Cambio=OFF; 
40C2:  BCF    2B.3
....................    //} 
....................     
....................    if(estadomv==1){  
40C4:  BTFSS  29.2
40C6:  BRA    40F2
....................       if(flagmv==0){ 
40C8:  BTFSC  2B.4
40CA:  BRA    40EC
....................          VelMotor=6; 
40CC:  MOVLW  06
40CE:  MOVWF  xD0
....................          lcd_init();delay_ms(200);lcd_init(); 
40D0:  CALL   09D6
40D4:  MOVLW  C8
40D6:  MOVWF  xFF
40D8:  CALL   0940
40DC:  CALL   09D6
....................          flagmv=1;Cambio=ON;delay_ms(200); 
40E0:  BSF    2B.4
40E2:  BSF    2B.3
40E4:  MOVLW  C8
40E6:  MOVWF  xFF
40E8:  CALL   0940
....................       } 
....................       VelMotor=Vel1; 
40EC:  MOVFF  56,D0
....................    }else{ 
40F0:  BRA    410C
....................       VelMotor=0; 
40F2:  CLRF   xD0
....................       if(flagmv==1){ 
40F4:  BTFSS  2B.4
40F6:  BRA    410C
....................          lcd_init();delay_ms(200);lcd_init(); 
40F8:  CALL   09D6
40FC:  MOVLW  C8
40FE:  MOVWF  xFF
4100:  CALL   0940
4104:  CALL   09D6
....................          flagmv=0;Cambio=ON; 
4108:  BCF    2B.4
410A:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
410C:  BTFSS  29.1
410E:  BRA    412E
....................    { 
....................       Luz_Blanca_on; 
4110:  BCF    F8A.4
4112:  BCF    F93.4
....................       if(flagfl==0) 
4114:  BTFSC  2A.2
4116:  BRA    412C
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4118:  CALL   09D6
411C:  MOVLW  C8
411E:  MOVWF  xFF
4120:  CALL   0940
4124:  CALL   09D6
....................          flagfl=1;Cambio=ON; 
4128:  BSF    2A.2
412A:  BSF    2B.3
....................       } 
....................    } 
....................    else 
412C:  BRA    414A
....................    { 
....................       Luz_Blanca_off; 
412E:  BSF    F8A.4
4130:  BCF    F93.4
....................       if(flagfl==1) 
4132:  BTFSS  2A.2
4134:  BRA    414A
....................       { 
....................          lcd_init();delay_ms(200);lcd_init(); 
4136:  CALL   09D6
413A:  MOVLW  C8
413C:  MOVWF  xFF
413E:  CALL   0940
4142:  CALL   09D6
....................          flagfl=0;Cambio=ON; 
4146:  BCF    2A.2
4148:  BSF    2B.3
....................       } 
....................    } 
....................     
....................    //if(VIDRIODN){ 
....................       //estadomv=0; 
....................       //VelMotor=0; 
....................       //estadofl=0; 
....................       //Luz_Blanca_off; 
....................       if(estadouv==1){ 
414A:  BTFSS  29.0
414C:  BRA    417C
....................          Luz_UV_on; 
414E:  BCF    F8A.3
4150:  BCF    F93.3
....................          tiempo_cumplido=0;       
4152:  BCF    29.7
....................          estadomv=0; 
4154:  BCF    29.2
....................          VelMotor=0; 
4156:  CLRF   xD0
....................          estadofl=0; 
4158:  BCF    29.1
....................          Luz_Blanca_off; 
415A:  BSF    F8A.4
415C:  BCF    F93.4
....................          if(flaguv==0){ 
415E:  BTFSC  2A.1
4160:  BRA    417A
....................             lcd_init();delay_ms(200);lcd_init(); 
4162:  CALL   09D6
4166:  MOVLW  C8
4168:  MOVWF  xFF
416A:  CALL   0940
416E:  CALL   09D6
....................             flaguv=1;guardaruv=1;Cambio=ON; 
4172:  BSF    2A.1
4174:  MOVLW  01
4176:  MOVWF  44
4178:  BSF    2B.3
....................          } 
....................       }else{ 
417A:  BRA    419E
....................          estadouv=0; 
417C:  BCF    29.0
....................          Luz_UV_off; 
417E:  BSF    F8A.3
4180:  BCF    F93.3
....................          if(flaguv==1){ 
4182:  BTFSS  2A.1
4184:  BRA    419E
....................             lcd_init();delay_ms(200);lcd_init(); 
4186:  CALL   09D6
418A:  MOVLW  C8
418C:  MOVWF  xFF
418E:  CALL   0940
4192:  CALL   09D6
....................             flaguv=0;guardaruv=1;Cambio=ON; 
4196:  BCF    2A.1
4198:  MOVLW  01
419A:  MOVWF  44
419C:  BSF    2B.3
....................          } 
....................       } 
....................    //}else{ 
....................    //   estadouv=0; 
....................    //   Luz_UV_off; 
....................    //   if(flaguv==1){ 
....................          //lcd_init();delay_ms(200);lcd_init(); 
....................    //      flaguv=0;guardaruv=1;Cambio=ON; 
....................    //   } 
....................    //} 
....................     
....................    if(tdown>=60){ //Si oprimio tecla abajo por 300ms o mas 
419E:  MOVF   xC8,F
41A0:  BNZ   41A8
41A2:  MOVF   xC7,W
41A4:  SUBLW  3B
41A6:  BC    41C4
....................       if(!Flanco){ 
41A8:  BTFSC  29.3
41AA:  BRA    41C2
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
41AC:  BTG    29.1
41AE:  BSF    29.3
41B0:  MOVLW  02
41B2:  MOVWF  xE8
41B4:  MOVLW  96
41B6:  MOVWF  xFF
41B8:  CALL   0940
41BC:  DECFSZ xE8,F
41BE:  BRA    41B4
41C0:  BSF    2B.3
....................       } 
....................    }else{ 
41C2:  BRA    41C6
....................       Flanco=0; 
41C4:  BCF    29.3
....................    } 
....................     
....................    if(tright>=60){ //Si oprimio tecla derecha por 300ms o mas 
41C6:  MOVF   xCA,F
41C8:  BNZ   41D0
41CA:  MOVF   xC9,W
41CC:  SUBLW  3B
41CE:  BC    41EC
....................       if(!Flanco2){ 
41D0:  BTFSC  29.5
41D2:  BRA    41EA
....................          estadomv=!estadomv;Flanco2 = 1;delay_ms(300);Cambio=ON; 
41D4:  BTG    29.2
41D6:  BSF    29.5
41D8:  MOVLW  02
41DA:  MOVWF  xE8
41DC:  MOVLW  96
41DE:  MOVWF  xFF
41E0:  CALL   0940
41E4:  DECFSZ xE8,F
41E6:  BRA    41DC
41E8:  BSF    2B.3
....................       } 
....................    }else{ 
41EA:  BRA    41EE
....................       Flanco2=0; 
41EC:  BCF    29.5
....................    } 
....................     
....................    if(tleft>=60){ //Si oprimio tecla izquierda por 300ms o mas 
41EE:  MOVF   xCC,F
41F0:  BNZ   41F8
41F2:  MOVF   xCB,W
41F4:  SUBLW  3B
41F6:  BC    420C
....................       if(!Flanco3){ 
41F8:  BTFSC  29.6
41FA:  BRA    420A
....................          delay_ms(150);  
41FC:  MOVLW  96
41FE:  MOVWF  xFF
4200:  CALL   0940
....................          estadouv=!estadouv; 
4204:  BTG    29.0
....................          Cambio=ON; 
4206:  BSF    2B.3
....................          Flanco3=1; 
4208:  BSF    29.6
....................       } 
....................    }else{ 
420A:  BRA    420E
....................       Flanco3=0; 
420C:  BCF    29.6
....................    } 
....................     
....................    if(tup>=60){ //Si oprimio tecla arriba por 300ms o mas 
420E:  MOVF   xC6,F
4210:  BNZ   4218
4212:  MOVF   xC5,W
4214:  SUBLW  3B
4216:  BC    424E
....................       if(!Flanco1){ 
4218:  BTFSC  29.4
421A:  BRA    424C
....................          delay_ms(200); 
421C:  MOVLW  C8
421E:  MOVWF  xFF
4220:  CALL   0940
....................          printf(lcd_putc,"\f"); 
4224:  MOVLW  0C
4226:  MOVWF  xF9
4228:  CALL   0AE0
....................          delay_ms(300); 
422C:  MOVLW  02
422E:  MOVWF  xE8
4230:  MOVLW  96
4232:  MOVWF  xFF
4234:  CALL   0940
4238:  DECFSZ xE8,F
423A:  BRA    4230
....................          Menu=1;  
423C:  MOVLW  01
423E:  MOVWF  2C
....................          paso=0; 
4240:  CLRF   45
....................          Flecha=2; 
4242:  MOVLW  02
4244:  MOVWF  30
....................          Flecha2=2; 
4246:  MOVWF  32
....................          Cambio=ON; 
4248:  BSF    2B.3
....................          Flanco1=1; 
424A:  BSF    29.4
....................       } 
....................    }else{ 
424C:  BRA    4250
....................       Flanco1=0; 
424E:  BCF    29.4
....................    } 
....................        
....................    if(guardaruv==1) 
4250:  DECFSZ 44,W
4252:  BRA    431E
....................    { 
....................       write_eeprom(7,segundos);write_eeprom(8,minutos); 
4254:  MOVLW  07
4256:  MOVWF  FA9
4258:  MOVFF  35,FA8
425C:  BCF    FA6.6
425E:  BCF    FA6.7
4260:  BSF    FA6.2
4262:  MOVF   FF2,W
4264:  MOVWF  00
4266:  BCF    FF2.6
4268:  BCF    FF2.7
426A:  MOVLB  F
426C:  MOVLW  55
426E:  MOVWF  FA7
4270:  MOVLW  AA
4272:  MOVWF  FA7
4274:  BSF    FA6.1
4276:  BTFSC  FA6.1
4278:  BRA    4276
427A:  BCF    FA6.2
427C:  MOVF   00,W
427E:  IORWF  FF2,F
4280:  MOVLW  08
4282:  MOVWF  FA9
4284:  MOVFF  36,FA8
4288:  BCF    FA6.6
428A:  BCF    FA6.7
428C:  BSF    FA6.2
428E:  MOVF   FF2,W
4290:  MOVWF  00
4292:  BCF    FF2.6
4294:  BCF    FF2.7
4296:  MOVLW  55
4298:  MOVWF  FA7
429A:  MOVLW  AA
429C:  MOVWF  FA7
429E:  BSF    FA6.1
42A0:  BTFSC  FA6.1
42A2:  BRA    42A0
42A4:  BCF    FA6.2
42A6:  MOVF   00,W
42A8:  IORWF  FF2,F
....................       horasL=make8(horas,0); 
42AA:  MOVFF  59,37
....................       horasH=make8(horas,1); 
42AE:  MOVFF  5A,38
....................       write_eeprom(9,horasL); 
42B2:  MOVLW  09
42B4:  MOVWF  FA9
42B6:  MOVFF  37,FA8
42BA:  BCF    FA6.6
42BC:  BCF    FA6.7
42BE:  BSF    FA6.2
42C0:  MOVFF  FF2,00
42C4:  BCF    FF2.6
42C6:  BCF    FF2.7
42C8:  MOVLW  55
42CA:  MOVWF  FA7
42CC:  MOVLW  AA
42CE:  MOVWF  FA7
42D0:  BSF    FA6.1
42D2:  BTFSC  FA6.1
42D4:  BRA    42D2
42D6:  BCF    FA6.2
42D8:  MOVF   00,W
42DA:  IORWF  FF2,F
....................       delay_ms(20); 
42DC:  MOVLW  14
42DE:  MOVLB  0
42E0:  MOVWF  xFF
42E2:  CALL   0940
....................       write_eeprom(10,horasH); 
42E6:  MOVLW  0A
42E8:  MOVWF  FA9
42EA:  MOVFF  38,FA8
42EE:  BCF    FA6.6
42F0:  BCF    FA6.7
42F2:  BSF    FA6.2
42F4:  MOVF   FF2,W
42F6:  MOVWF  00
42F8:  BCF    FF2.6
42FA:  BCF    FF2.7
42FC:  MOVLB  F
42FE:  MOVLW  55
4300:  MOVWF  FA7
4302:  MOVLW  AA
4304:  MOVWF  FA7
4306:  BSF    FA6.1
4308:  BTFSC  FA6.1
430A:  BRA    4308
430C:  BCF    FA6.2
430E:  MOVF   00,W
4310:  IORWF  FF2,F
....................       delay_ms(20); 
4312:  MOVLW  14
4314:  MOVLB  0
4316:  MOVWF  xFF
4318:  CALL   0940
....................       guardaruv=0; 
431C:  CLRF   44
....................    } 
....................     
....................    if(segundos>=60) 
431E:  MOVF   35,W
4320:  SUBLW  3B
4322:  BC    4328
....................    { 
....................       segundos=0;minutos++; 
4324:  CLRF   35
4326:  INCF   36,F
....................    } 
....................    if(minutos==60) 
4328:  MOVF   36,W
432A:  SUBLW  3C
432C:  BNZ   4336
....................    { 
....................       minutos=0;horas++; 
432E:  CLRF   36
4330:  INCF   59,F
4332:  BTFSC  FD8.2
4334:  INCF   5A,F
....................    }   
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................    if(tiemporeset>=60) 
4336:  MOVF   43,W
4338:  SUBLW  3B
433A:  BC    4354
....................    { 
....................       printf(lcd_putc,"\f"); 
433C:  MOVLW  0C
433E:  MOVWF  xF9
4340:  CALL   0AE0
....................       lcd_init(); 
4344:  CALL   09D6
....................       delay_ms(200); 
4348:  MOVLW  C8
434A:  MOVWF  xFF
434C:  CALL   0940
....................       tiemporeset=0; 
4350:  CLRF   43
....................       Cambio=ON; 
4352:  BSF    2B.3
....................    }    
....................    } 
4354:  GOTO   25F0
.................... } 
....................  
.................... int8 BIT_BYTE(int1 D0, int1 D1, int1 D2, int1 D3, int1 D4, int1 D5, int1 D6, int1 D7){ 
....................    int8 dato; 
4358:  SLEEP 
....................    dato= D7*128 + D6*64 + D5*32 + D4*16 + D3*8 + D2*4 + D1*2 +D0*1; // 0 al 255  
....................    return dato;  
.................... } 

Configuration Fuses:
   Word  1: 0E3C   NOIESO NOFCMEN HSPLL PLL5 CPUDIV4 USBDIV
   Word  2: 1E39   NOBROWNOUT NOWDT BORV20 NOPUT WDT32768 VREGEN
   Word  3: 0100   NOPBADEN CCP2C1 NOMCLR NOLPT1OSC
   Word  4: 0080   NOSTVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
