CCS PCH C Compiler, Version 4.104, 5967               09-Sept.-16 16:11

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Vertical\2016\CFLV 120 UPTC\Firmware\CabinaFlujo.lst

               ROM used: 13678 bytes (42%)
                         Largest free fragment is 19086
               RAM used: 183 (9%) at main() level
                         220 (11%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1862
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
0626:  CLRF   FEA
0628:  MOVLW  CA
062A:  MOVWF  FE9
062C:  MOVF   FEF,W
062E:  BZ    064C
0630:  MOVLW  0F
0632:  MOVWF  01
0634:  CLRF   00
0636:  DECFSZ 00,F
0638:  BRA    0636
063A:  DECFSZ 01,F
063C:  BRA    0634
063E:  MOVLW  8F
0640:  MOVWF  00
0642:  DECFSZ 00,F
0644:  BRA    0642
0646:  NOP   
0648:  DECFSZ FEF,F
064A:  BRA    0630
064C:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
064E:  SWAPF  xCB,W
0650:  ANDLW  F0
0652:  MOVWF  00
0654:  MOVLW  0F
0656:  ANDWF  F81,W
0658:  IORWF  00,W
065A:  MOVWF  F81
....................       delay_cycles(30); 
065C:  MOVLW  09
065E:  MOVWF  00
0660:  DECFSZ 00,F
0662:  BRA    0660
0664:  BRA    0666
....................       lcd.enable = 1; 
0666:  BSF    F81.3
....................       delay_us(55); 
0668:  MOVLW  DB
066A:  MOVWF  00
066C:  DECFSZ 00,F
066E:  BRA    066C
0670:  BRA    0672
....................       lcd.enable = 0; 
0672:  BCF    F81.3
.................... } 
0674:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0676:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0678:  MOVLW  01
067A:  MOVWF  xCA
067C:  RCALL  0626
....................       lcd.rs = address; 
067E:  BTFSS  xC8.0
0680:  BCF    F81.1
0682:  BTFSC  xC8.0
0684:  BSF    F81.1
....................       delay_cycles(30); 
0686:  MOVLW  09
0688:  MOVWF  00
068A:  DECFSZ 00,F
068C:  BRA    068A
068E:  BRA    0690
....................       lcd.rw = 0; 
0690:  BCF    F81.2
....................       delay_cycles(30); 
0692:  MOVLW  09
0694:  MOVWF  00
0696:  DECFSZ 00,F
0698:  BRA    0696
069A:  BRA    069C
....................       lcd.enable = 0; 
069C:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
069E:  SWAPF  xC9,W
06A0:  MOVWF  xCA
06A2:  MOVLW  0F
06A4:  ANDWF  xCA,F
06A6:  MOVFF  CA,CB
06AA:  RCALL  064E
....................       lcd_send_nibble(n & 0xf); 
06AC:  MOVF   xC9,W
06AE:  ANDLW  0F
06B0:  MOVWF  xCA
06B2:  MOVWF  xCB
06B4:  RCALL  064E
.................... } 
06B6:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
06B8:  MOVLW  00
06BA:  MOVWF  F93
....................     lcd.rs = 0; 
06BC:  BCF    F81.1
....................     lcd.rw = 0; 
06BE:  BCF    F81.2
....................     lcd.enable = 0; 
06C0:  BCF    F81.3
....................     delay_ms(15); 
06C2:  MOVLW  0F
06C4:  MOVWF  xCA
06C6:  RCALL  0626
....................     for(i=1;i<=3;++i) { 
06C8:  MOVLW  01
06CA:  MOVWF  xB3
06CC:  MOVF   xB3,W
06CE:  SUBLW  03
06D0:  BNC   06E2
....................        lcd_send_nibble(3); 
06D2:  MOVLW  03
06D4:  MOVWF  xCB
06D6:  RCALL  064E
....................        delay_ms(5); 
06D8:  MOVLW  05
06DA:  MOVWF  xCA
06DC:  RCALL  0626
....................     } 
06DE:  INCF   xB3,F
06E0:  BRA    06CC
....................     lcd_send_nibble(2); 
06E2:  MOVLW  02
06E4:  MOVWF  xCB
06E6:  RCALL  064E
....................     for(i=0;i<=3;++i) 
06E8:  CLRF   xB3
06EA:  MOVF   xB3,W
06EC:  SUBLW  03
06EE:  BNC   070C
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
06F0:  CLRF   03
06F2:  MOVF   xB3,W
06F4:  MOVFF  FF2,B4
06F8:  BCF    FF2.7
06FA:  RCALL  0096
06FC:  BTFSC  xB4.7
06FE:  BSF    FF2.7
0700:  MOVWF  xB4
0702:  CLRF   xC8
0704:  MOVWF  xC9
0706:  RCALL  0676
0708:  INCF   xB3,F
070A:  BRA    06EA
.................... } 
070C:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0796:  MOVLW  01
0798:  SUBWF  xC6,W
079A:  ADDLW  FC
079C:  BC    07BC
079E:  ADDLW  04
07A0:  GOTO   07CC
....................      case 1 : address=0x80;break; 
07A4:  MOVLW  80
07A6:  MOVWF  xC7
07A8:  BRA    07BC
....................      case 2 : address=0xc0;break; 
07AA:  MOVLW  C0
07AC:  MOVWF  xC7
07AE:  BRA    07BC
....................      case 3 : address=0x94;break; 
07B0:  MOVLW  94
07B2:  MOVWF  xC7
07B4:  BRA    07BC
....................      case 4 : address=0xd4;break; 
07B6:  MOVLW  D4
07B8:  MOVWF  xC7
07BA:  BRA    07BC
....................    } 
....................    address+=x-1; 
07BC:  MOVLW  01
07BE:  SUBWF  xC5,W
07C0:  ADDWF  xC7,F
....................    lcd_send_byte(0,address); 
07C2:  CLRF   xC8
07C4:  MOVFF  C7,C9
07C8:  RCALL  0676
.................... } 
07CA:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
07F8:  MOVF   xC4,W
07FA:  SUBLW  F1
07FC:  BNZ   0802
....................    { 
....................       c=238; 
07FE:  MOVLW  EE
0800:  MOVWF  xC4
....................    } 
....................    if(c=='Ñ') 
0802:  MOVF   xC4,W
0804:  SUBLW  D1
0806:  BNZ   080C
....................    { 
....................       c=255; 
0808:  MOVLW  FF
080A:  MOVWF  xC4
....................    } 
....................     
....................    switch (c) { 
080C:  MOVF   xC4,W
080E:  XORLW  0C
0810:  BZ    081C
0812:  XORLW  06
0814:  BZ    0830
0816:  XORLW  02
0818:  BZ    083E
081A:  BRA    0848
....................      case '\f'   : lcd_send_byte(0,1); 
081C:  CLRF   xC8
081E:  MOVLW  01
0820:  MOVWF  xC9
0822:  RCALL  0676
....................                    lcdline=1; 
0824:  MOVLW  01
0826:  MOVWF  16
....................                    delay_ms(2); 
0828:  MOVLW  02
082A:  MOVWF  xCA
082C:  RCALL  0626
....................                                            break; 
082E:  BRA    0854
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0830:  INCF   16,F
0832:  MOVLW  01
0834:  MOVWF  xC5
0836:  MOVFF  16,C6
083A:  RCALL  0796
083C:  BRA    0854
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
083E:  CLRF   xC8
0840:  MOVLW  10
0842:  MOVWF  xC9
0844:  RCALL  0676
0846:  BRA    0854
....................      default     : lcd_send_byte(1,c);     break; 
0848:  MOVLW  01
084A:  MOVWF  xC8
084C:  MOVFF  C4,C9
0850:  RCALL  0676
0852:  BRA    0854
....................    } 
.................... } 
0854:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
151A:  BCF    xC6.0
....................    y = x; 
151C:  MOVFF  BA,BF
1520:  MOVFF  B9,BE
1524:  MOVFF  B8,BD
1528:  MOVFF  B7,BC
....................  
....................    if (x < 0) 
152C:  MOVFF  BA,CA
1530:  MOVFF  B9,C9
1534:  MOVFF  B8,C8
1538:  MOVFF  B7,C7
153C:  CLRF   xCE
153E:  CLRF   xCD
1540:  CLRF   xCC
1542:  CLRF   xCB
1544:  RCALL  0FA0
1546:  BNC   1550
....................    { 
....................       s = 1; 
1548:  BSF    xC6.0
....................       y = -y; 
154A:  MOVF   xBD,W
154C:  XORLW  80
154E:  MOVWF  xBD
....................    } 
....................  
....................    if (y <= 32768.0) 
1550:  MOVFF  BF,CA
1554:  MOVFF  BE,C9
1558:  MOVFF  BD,C8
155C:  MOVFF  BC,C7
1560:  CLRF   xCE
1562:  CLRF   xCD
1564:  CLRF   xCC
1566:  MOVLW  8E
1568:  MOVWF  xCB
156A:  RCALL  0FA0
156C:  BC    1570
156E:  BNZ   15A0
....................   res = (float32)(unsigned int16)y; 
1570:  MOVFF  BF,CA
1574:  MOVFF  BE,C9
1578:  MOVFF  BD,C8
157C:  MOVFF  BC,C7
1580:  RCALL  14E2
1582:  MOVFF  02,CC
1586:  MOVFF  01,CB
158A:  CALL   070E
158E:  MOVFF  03,C3
1592:  MOVFF  02,C2
1596:  MOVFF  01,C1
159A:  MOVFF  00,C0
....................  
....................  else if (y < 10000000.0) 
159E:  BRA    1728
15A0:  MOVFF  BF,CA
15A4:  MOVFF  BE,C9
15A8:  MOVFF  BD,C8
15AC:  MOVFF  BC,C7
15B0:  MOVLW  80
15B2:  MOVWF  xCE
15B4:  MOVLW  96
15B6:  MOVWF  xCD
15B8:  MOVLW  18
15BA:  MOVWF  xCC
15BC:  MOVLW  96
15BE:  MOVWF  xCB
15C0:  RCALL  0FA0
15C2:  BTFSS  FD8.0
15C4:  BRA    1718
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
15C6:  MOVFF  BF,CA
15CA:  MOVFF  BE,C9
15CE:  MOVFF  BD,C8
15D2:  MOVFF  BC,C7
15D6:  CLRF   xCE
15D8:  CLRF   xCD
15DA:  CLRF   xCC
15DC:  MOVLW  8E
15DE:  MOVWF  xCB
15E0:  CALL   0876
15E4:  MOVFF  03,CA
15E8:  MOVFF  02,C9
15EC:  MOVFF  01,C8
15F0:  MOVFF  00,C7
15F4:  RCALL  14E2
15F6:  MOVFF  02,C5
15FA:  MOVFF  01,C4
....................       y = 32768.0*(y/32768.0 - (float32)l); 
15FE:  MOVFF  BF,CA
1602:  MOVFF  BE,C9
1606:  MOVFF  BD,C8
160A:  MOVFF  BC,C7
160E:  CLRF   xCE
1610:  CLRF   xCD
1612:  CLRF   xCC
1614:  MOVLW  8E
1616:  MOVWF  xCB
1618:  CALL   0876
161C:  MOVFF  00,C7
1620:  MOVFF  01,C8
1624:  MOVFF  02,C9
1628:  MOVFF  03,CA
162C:  MOVFF  C5,CC
1630:  MOVFF  C4,CB
1634:  CALL   070E
1638:  BSF    FD8.1
163A:  MOVFF  CA,CE
163E:  MOVFF  C9,CD
1642:  MOVFF  C8,CC
1646:  MOVFF  C7,CB
164A:  MOVFF  03,D2
164E:  MOVFF  02,D1
1652:  MOVFF  01,D0
1656:  MOVFF  00,CF
165A:  CALL   09D0
165E:  CLRF   xCA
1660:  CLRF   xC9
1662:  CLRF   xC8
1664:  MOVLW  8E
1666:  MOVWF  xC7
1668:  MOVFF  03,CE
166C:  MOVFF  02,CD
1670:  MOVFF  01,CC
1674:  MOVFF  00,CB
1678:  RCALL  11B0
167A:  MOVFF  03,BF
167E:  MOVFF  02,BE
1682:  MOVFF  01,BD
1686:  MOVFF  00,BC
....................   res = 32768.0*(float32)l; 
168A:  MOVFF  C5,CC
168E:  MOVFF  C4,CB
1692:  CALL   070E
1696:  CLRF   xCA
1698:  CLRF   xC9
169A:  CLRF   xC8
169C:  MOVLW  8E
169E:  MOVWF  xC7
16A0:  MOVFF  03,CE
16A4:  MOVFF  02,CD
16A8:  MOVFF  01,CC
16AC:  MOVFF  00,CB
16B0:  RCALL  11B0
16B2:  MOVFF  03,C3
16B6:  MOVFF  02,C2
16BA:  MOVFF  01,C1
16BE:  MOVFF  00,C0
....................   res += (float32)(unsigned int16)y; 
16C2:  MOVFF  BF,CA
16C6:  MOVFF  BE,C9
16CA:  MOVFF  BD,C8
16CE:  MOVFF  BC,C7
16D2:  RCALL  14E2
16D4:  MOVFF  02,CC
16D8:  MOVFF  01,CB
16DC:  CALL   070E
16E0:  BCF    FD8.1
16E2:  MOVFF  C3,CE
16E6:  MOVFF  C2,CD
16EA:  MOVFF  C1,CC
16EE:  MOVFF  C0,CB
16F2:  MOVFF  03,D2
16F6:  MOVFF  02,D1
16FA:  MOVFF  01,D0
16FE:  MOVFF  00,CF
1702:  CALL   09D0
1706:  MOVFF  03,C3
170A:  MOVFF  02,C2
170E:  MOVFF  01,C1
1712:  MOVFF  00,C0
....................  } 
....................  
....................  else 
1716:  BRA    1728
....................   res = y; 
1718:  MOVFF  BF,C3
171C:  MOVFF  BE,C2
1720:  MOVFF  BD,C1
1724:  MOVFF  BC,C0
....................  
....................  y = y - (float32)(unsigned int16)y; 
1728:  MOVFF  BF,CA
172C:  MOVFF  BE,C9
1730:  MOVFF  BD,C8
1734:  MOVFF  BC,C7
1738:  RCALL  14E2
173A:  MOVFF  02,CC
173E:  MOVFF  01,CB
1742:  CALL   070E
1746:  BSF    FD8.1
1748:  MOVFF  BF,CE
174C:  MOVFF  BE,CD
1750:  MOVFF  BD,CC
1754:  MOVFF  BC,CB
1758:  MOVFF  03,D2
175C:  MOVFF  02,D1
1760:  MOVFF  01,D0
1764:  MOVFF  00,CF
1768:  CALL   09D0
176C:  MOVFF  03,BF
1770:  MOVFF  02,BE
1774:  MOVFF  01,BD
1778:  MOVFF  00,BC
....................  
....................  if (s) 
177C:  BTFSS  xC6.0
177E:  BRA    1786
....................   res = -res; 
1780:  MOVF   xC1,W
1782:  XORLW  80
1784:  MOVWF  xC1
....................  
....................  if (y != 0) 
1786:  MOVFF  BF,CA
178A:  MOVFF  BE,C9
178E:  MOVFF  BD,C8
1792:  MOVFF  BC,C7
1796:  CLRF   xCE
1798:  CLRF   xCD
179A:  CLRF   xCC
179C:  CLRF   xCB
179E:  RCALL  0FA0
17A0:  BZ    1812
....................  { 
....................   if (s == 1 && n == 0) 
17A2:  BTFSS  xC6.0
17A4:  BRA    17DA
17A6:  MOVF   xBB,F
17A8:  BNZ   17DA
....................    res -= 1.0; 
17AA:  BSF    FD8.1
17AC:  MOVFF  C3,CE
17B0:  MOVFF  C2,CD
17B4:  MOVFF  C1,CC
17B8:  MOVFF  C0,CB
17BC:  CLRF   xD2
17BE:  CLRF   xD1
17C0:  CLRF   xD0
17C2:  MOVLW  7F
17C4:  MOVWF  xCF
17C6:  CALL   09D0
17CA:  MOVFF  03,C3
17CE:  MOVFF  02,C2
17D2:  MOVFF  01,C1
17D6:  MOVFF  00,C0
....................  
....................   if (s == 0 && n == 1) 
17DA:  BTFSC  xC6.0
17DC:  BRA    1812
17DE:  DECFSZ xBB,W
17E0:  BRA    1812
....................    res += 1.0; 
17E2:  BCF    FD8.1
17E4:  MOVFF  C3,CE
17E8:  MOVFF  C2,CD
17EC:  MOVFF  C1,CC
17F0:  MOVFF  C0,CB
17F4:  CLRF   xD2
17F6:  CLRF   xD1
17F8:  CLRF   xD0
17FA:  MOVLW  7F
17FC:  MOVWF  xCF
17FE:  CALL   09D0
1802:  MOVFF  03,C3
1806:  MOVFF  02,C2
180A:  MOVFF  01,C1
180E:  MOVFF  00,C0
....................  } 
....................  if (x == 0) 
1812:  MOVFF  BA,CA
1816:  MOVFF  B9,C9
181A:  MOVFF  B8,C8
181E:  MOVFF  B7,C7
1822:  CLRF   xCE
1824:  CLRF   xCD
1826:  CLRF   xCC
1828:  CLRF   xCB
182A:  CALL   0FA0
182E:  BNZ   1838
....................     res = 0; 
1830:  CLRF   xC3
1832:  CLRF   xC2
1834:  CLRF   xC1
1836:  CLRF   xC0
....................  
....................  return (res); 
1838:  MOVFF  C0,00
183C:  MOVFF  C1,01
1840:  MOVFF  C2,02
1844:  MOVFF  C3,03
.................... } 
1848:  GOTO   1860 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
184C:  MOVFF  B6,BA
1850:  MOVFF  B5,B9
1854:  MOVFF  B4,B8
1858:  MOVFF  B3,B7
185C:  CLRF   xBB
185E:  BRA    151A
.................... } 
1860:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D0,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D0,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D1,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D1,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D2,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D2,0) 
.................... #define   Motor_L2_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L2_off      output_bit(PIN_D3,0) 
.................... #define   Motor_L3_on       output_bit(PIN_D4,1) 
.................... #define   Motor_L3_off      output_bit(PIN_D4,0) 
.................... #define   Motor_L4_on       output_bit(PIN_D5,1) 
.................... #define   Motor_L4_off      output_bit(PIN_D5,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,negativo=10; 
.................... signed int8   paso=0,Velocidad=1; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 Entero1=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0,Diferencia=0.0; 
.................... float Temporal1=0.0,G=2; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   41,F
00BE:  BTFSC  FD8.2
00C0:  INCF   42,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   42,F
00C4:  BNZ   00CC
00C6:  MOVF   41,W
00C8:  SUBLW  C7
00CA:  BC    0100
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   42
00CE:  CLRF   41
00D0:  INCF   30,F
00D2:  BSF    18.0
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00D4:  BTFSS  17.0
00D6:  BRA    0100
....................    { 
....................       segundos++; 
00D8:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00DA:  BTFSC  17.7
00DC:  BRA    0100
....................       { 
....................          if(tempo_segundos>0) 
00DE:  MOVF   29,F
00E0:  BZ    00E6
....................          { 
....................             tempo_segundos--; 
00E2:  DECF   29,F
....................          } 
....................          else 
00E4:  BRA    0100
....................          { 
....................             if(tempo_minutos>0) 
00E6:  MOVF   28,F
00E8:  BZ    00F2
....................             { 
....................                tempo_minutos--; 
00EA:  DECF   28,F
....................                tempo_segundos=59; 
00EC:  MOVLW  3B
00EE:  MOVWF  29
....................             } 
....................             else 
00F0:  BRA    0100
....................             { 
....................                //tiempo_cumplido=1; 
....................                estadouv=0;Luz_UV_off; 
00F2:  BCF    17.0
00F4:  BCF    F8C.0
00F6:  BCF    F95.0
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
00F8:  MOVFF  2A,28
00FC:  MOVFF  2B,29
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
0100:  BCF    F9E.0
0102:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0D98:  DECFSZ xB4,W
0D9A:  BRA    0DB0
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0D9C:  MOVLW  02
0D9E:  MOVWF  xC5
0DA0:  MOVFF  B5,C6
0DA4:  RCALL  0796
0DA6:  MOVLW  06
0DA8:  MOVWF  FF6
0DAA:  MOVLW  01
0DAC:  MOVWF  FF7
0DAE:  RCALL  0856
....................    if(x==2) 
0DB0:  MOVF   xB4,W
0DB2:  SUBLW  02
0DB4:  BNZ   0DCA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad Motor    ");} 
0DB6:  MOVLW  02
0DB8:  MOVWF  xC5
0DBA:  MOVFF  B5,C6
0DBE:  RCALL  0796
0DC0:  MOVLW  1A
0DC2:  MOVWF  FF6
0DC4:  MOVLW  01
0DC6:  MOVWF  FF7
0DC8:  RCALL  0856
....................    if(x==3) 
0DCA:  MOVF   xB4,W
0DCC:  SUBLW  03
0DCE:  BNZ   0DE4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0DD0:  MOVLW  02
0DD2:  MOVWF  xC5
0DD4:  MOVFF  B5,C6
0DD8:  RCALL  0796
0DDA:  MOVLW  2E
0DDC:  MOVWF  FF6
0DDE:  MOVLW  01
0DE0:  MOVWF  FF7
0DE2:  RCALL  0856
....................    if(x==4) 
0DE4:  MOVF   xB4,W
0DE6:  SUBLW  04
0DE8:  BNZ   0DFE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0DEA:  MOVLW  02
0DEC:  MOVWF  xC5
0DEE:  MOVFF  B5,C6
0DF2:  RCALL  0796
0DF4:  MOVLW  42
0DF6:  MOVWF  FF6
0DF8:  MOVLW  01
0DFA:  MOVWF  FF7
0DFC:  RCALL  0856
....................    if(x==5) 
0DFE:  MOVF   xB4,W
0E00:  SUBLW  05
0E02:  BNZ   0E18
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0E04:  MOVLW  02
0E06:  MOVWF  xC5
0E08:  MOVFF  B5,C6
0E0C:  RCALL  0796
0E0E:  MOVLW  56
0E10:  MOVWF  FF6
0E12:  MOVLW  01
0E14:  MOVWF  FF7
0E16:  RCALL  0856
.................... } 
0E18:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
0E80:  MOVF   xB5,F
0E82:  BNZ   0E94
....................       {Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_off;} 
0E84:  BCF    F8C.3
0E86:  BCF    F95.3
0E88:  BCF    F8C.4
0E8A:  BCF    F95.4
0E8C:  BCF    F8C.5
0E8E:  BCF    F95.5
0E90:  BCF    F8C.2
0E92:  BCF    F95.2
....................    if(x==1) 
0E94:  DECFSZ xB5,W
0E96:  BRA    0EA8
....................       {Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_on;} 
0E98:  BCF    F8C.3
0E9A:  BCF    F95.3
0E9C:  BCF    F8C.4
0E9E:  BCF    F95.4
0EA0:  BCF    F8C.5
0EA2:  BCF    F95.5
0EA4:  BSF    F8C.2
0EA6:  BCF    F95.2
....................    if(x==2) 
0EA8:  MOVF   xB5,W
0EAA:  SUBLW  02
0EAC:  BNZ   0EBE
....................       {Motor_L3_off;Motor_L4_off;Motor_L1_off;Motor_L2_on;} 
0EAE:  BCF    F8C.4
0EB0:  BCF    F95.4
0EB2:  BCF    F8C.5
0EB4:  BCF    F95.5
0EB6:  BCF    F8C.2
0EB8:  BCF    F95.2
0EBA:  BSF    F8C.3
0EBC:  BCF    F95.3
....................    if(x==3) 
0EBE:  MOVF   xB5,W
0EC0:  SUBLW  03
0EC2:  BNZ   0ED4
....................       {Motor_L4_off;Motor_L1_off;Motor_L2_off;Motor_L3_on;} 
0EC4:  BCF    F8C.5
0EC6:  BCF    F95.5
0EC8:  BCF    F8C.2
0ECA:  BCF    F95.2
0ECC:  BCF    F8C.3
0ECE:  BCF    F95.3
0ED0:  BSF    F8C.4
0ED2:  BCF    F95.4
....................    if(x==4) 
0ED4:  MOVF   xB5,W
0ED6:  SUBLW  04
0ED8:  BNZ   0EEA
....................       {Motor_L2_off;Motor_L3_off;Motor_L1_off;Motor_L4_on;} 
0EDA:  BCF    F8C.3
0EDC:  BCF    F95.3
0EDE:  BCF    F8C.4
0EE0:  BCF    F95.4
0EE2:  BCF    F8C.2
0EE4:  BCF    F95.2
0EE6:  BSF    F8C.5
0EE8:  BCF    F95.5
.................... } 
0EEA:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
0744:  RLCF   xB8,W
0746:  MOVWF  00
0748:  RLCF   00,F
074A:  MOVLW  FC
074C:  ANDWF  00,F
074E:  MOVFF  00,01
0752:  MOVF   FC2,W
0754:  ANDLW  C3
0756:  IORWF  00,W
0758:  MOVWF  FC2
075A:  MOVLW  0A
075C:  MOVWF  xCA
075E:  RCALL  0626
0760:  BSF    FC2.1
0762:  BTFSC  FC2.1
0764:  BRA    0762
0766:  MOVFF  FC4,03
076A:  MOVFF  FC3,CB
076E:  MOVFF  FC4,CC
0772:  RCALL  070E
0774:  MOVFF  03,BC
0778:  MOVFF  02,BB
077C:  MOVFF  01,BA
0780:  MOVFF  00,B9
0784:  MOVFF  B9,00
0788:  MOVFF  BA,01
078C:  MOVFF  BB,02
0790:  MOVFF  BC,03
.................... } 
0794:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1016:  CLRF   xB7
1018:  CLRF   xB6
101A:  CLRF   xB5
101C:  CLRF   xB4
....................    float promediopresion=0.0; 
....................    /*if(negativo==10) 
....................     { 
....................       x_uno=sensores(1)+Diferencia; 
....................     } 
....................     if(negativo==20) 
....................     { 
....................       x_uno=sensores(1)-Diferencia; 
....................     }*/ 
....................    V1=sensores(1);  
101E:  MOVLW  01
1020:  MOVWF  xB8
1022:  CALL   0744
1026:  MOVFF  03,9A
102A:  MOVFF  02,99
102E:  MOVFF  01,98
1032:  MOVFF  00,97
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1036:  MOVFF  9A,CA
103A:  MOVFF  99,C9
103E:  MOVFF  98,C8
1042:  MOVFF  97,C7
1046:  MOVFF  B2,CE
104A:  MOVFF  B1,CD
104E:  MOVFF  B0,CC
1052:  MOVFF  AF,CB
1056:  RCALL  0876
1058:  MOVFF  00,B8
105C:  MOVFF  01,B9
1060:  MOVFF  02,BA
1064:  MOVFF  03,BB
1068:  BSF    FD8.1
106A:  MOVFF  03,CE
106E:  MOVFF  02,CD
1072:  MOVFF  01,CC
1076:  MOVFF  00,CB
107A:  CLRF   xD2
107C:  CLRF   xD1
107E:  CLRF   xD0
1080:  MOVLW  7F
1082:  MOVWF  xCF
1084:  RCALL  09D0
1086:  MOVFF  03,9E
108A:  MOVFF  02,9D
108E:  MOVFF  01,9C
1092:  MOVFF  00,9B
....................     
....................    if(Presion<0.0) 
1096:  MOVFF  9E,CA
109A:  MOVFF  9D,C9
109E:  MOVFF  9C,C8
10A2:  MOVFF  9B,C7
10A6:  CLRF   xCE
10A8:  CLRF   xCD
10AA:  CLRF   xCC
10AC:  CLRF   xCB
10AE:  RCALL  0FA0
10B0:  BNC   10BA
....................    { 
....................       Presion=0.0; 
10B2:  CLRF   x9E
10B4:  CLRF   x9D
10B6:  CLRF   x9C
10B8:  CLRF   x9B
....................    } 
....................  
....................    if(r>media-1) 
10BA:  MOVLW  01
10BC:  SUBWF  xB3,W
10BE:  SUBWF  2C,W
10C0:  BZ    10C6
10C2:  BNC   10C6
....................    {r=0;} 
10C4:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
10C6:  MOVF   2C,W
10C8:  MULLW  04
10CA:  MOVF   FF3,W
10CC:  CLRF   03
10CE:  ADDLW  47
10D0:  MOVWF  FE9
10D2:  MOVLW  00
10D4:  ADDWFC 03,W
10D6:  MOVWF  FEA
10D8:  MOVFF  9B,FEF
10DC:  MOVFF  9C,FEC
10E0:  MOVFF  9D,FEC
10E4:  MOVFF  9E,FEC
10E8:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
10EA:  CLRF   2D
10EC:  MOVLW  01
10EE:  SUBWF  xB3,W
10F0:  SUBWF  2D,W
10F2:  BZ    10F6
10F4:  BC    1160
....................    { 
....................       promediopresion+=PromPresion[q]; 
10F6:  MOVF   2D,W
10F8:  MULLW  04
10FA:  MOVF   FF3,W
10FC:  CLRF   03
10FE:  ADDLW  47
1100:  MOVWF  FE9
1102:  MOVLW  00
1104:  ADDWFC 03,W
1106:  MOVWF  FEA
1108:  MOVFF  FEF,00
110C:  MOVFF  FEC,01
1110:  MOVFF  FEC,02
1114:  MOVFF  FEC,03
1118:  MOVFF  FEA,B9
111C:  MOVFF  FE9,B8
1120:  BCF    FD8.1
1122:  MOVFF  B7,CE
1126:  MOVFF  B6,CD
112A:  MOVFF  B5,CC
112E:  MOVFF  B4,CB
1132:  MOVFF  03,D2
1136:  MOVFF  02,D1
113A:  MOVFF  01,D0
113E:  MOVFF  00,CF
1142:  RCALL  09D0
1144:  MOVFF  B9,FEA
1148:  MOVFF  B8,FE9
114C:  MOVFF  03,B7
1150:  MOVFF  02,B6
1154:  MOVFF  01,B5
1158:  MOVFF  00,B4
....................    }  
115C:  INCF   2D,F
115E:  BRA    10EC
....................    promediopresion=promediopresion/media;    
1160:  CLRF   xCC
1162:  MOVFF  B3,CB
1166:  CALL   070E
116A:  MOVFF  B7,CA
116E:  MOVFF  B6,C9
1172:  MOVFF  B5,C8
1176:  MOVFF  B4,C7
117A:  MOVFF  03,CE
117E:  MOVFF  02,CD
1182:  MOVFF  01,CC
1186:  MOVFF  00,CB
118A:  CALL   0876
118E:  MOVFF  03,B7
1192:  MOVFF  02,B6
1196:  MOVFF  01,B5
119A:  MOVFF  00,B4
....................     
....................    return promediopresion; 
119E:  MOVFF  B4,00
11A2:  MOVFF  B5,01
11A6:  MOVFF  B6,02
11AA:  MOVFF  B7,03
.................... } 
11AE:  RETLW  00
....................  
.................... void Limita(void){ 
....................    if(Velocidad>4) 
*
0C3A:  BTFSC  34.7
0C3C:  BRA    0C48
0C3E:  MOVF   34,W
0C40:  SUBLW  04
0C42:  BC    0C48
....................       Velocidad=1; 
0C44:  MOVLW  01
0C46:  MOVWF  34
....................    if(Contrasena[0]>9) 
0C48:  MOVF   3C,W
0C4A:  SUBLW  09
0C4C:  BC    0C50
....................       Contrasena[0]=0; 
0C4E:  CLRF   3C
....................    if(Contrasena[1]>9) 
0C50:  MOVF   3D,W
0C52:  SUBLW  09
0C54:  BC    0C58
....................       Contrasena[1]=0; 
0C56:  CLRF   3D
....................    if(Contrasena[2]>9) 
0C58:  MOVF   3E,W
0C5A:  SUBLW  09
0C5C:  BC    0C60
....................       Contrasena[2]=0; 
0C5E:  CLRF   3E
....................    if(Contrasena[3]>9) 
0C60:  MOVF   3F,W
0C62:  SUBLW  09
0C64:  BC    0C68
....................       Contrasena[3]=0; 
0C66:  CLRF   3F
....................    if(tempo_minutos>60) 
0C68:  MOVF   28,W
0C6A:  SUBLW  3C
0C6C:  BC    0C70
....................       tempo_minutos=0; 
0C6E:  CLRF   28
....................    if(tempo_segundos) 
0C70:  MOVF   29,F
0C72:  BZ    0C76
....................       tempo_segundos=0; 
0C74:  CLRF   29
....................    if(segundos>60) 
0C76:  MOVF   22,W
0C78:  SUBLW  3C
0C7A:  BC    0C7E
....................       segundos=0; 
0C7C:  CLRF   22
....................    if(minutos>60) 
0C7E:  MOVF   23,W
0C80:  SUBLW  3C
0C82:  BC    0C86
....................       minutos=0;  
0C84:  CLRF   23
.................... } 
0C86:  GOTO   1CC6 (RETURN)
.................... void main () 
.................... { 
*
1862:  CLRF   FF8
1864:  BCF    FD0.7
1866:  BSF    07.7
1868:  CLRF   FEA
186A:  CLRF   FE9
186C:  BCF    17.0
186E:  BCF    17.1
1870:  BCF    17.2
1872:  BCF    17.3
1874:  BCF    17.4
1876:  BCF    17.5
1878:  BCF    17.6
187A:  BCF    17.7
187C:  BCF    18.0
187E:  BCF    18.1
1880:  BCF    18.2
1882:  CLRF   19
1884:  MOVLW  06
1886:  MOVWF  1A
1888:  MOVLW  02
188A:  MOVWF  1B
188C:  MOVLW  0B
188E:  MOVWF  1C
1890:  MOVLW  02
1892:  MOVWF  1D
1894:  MOVLW  03
1896:  MOVWF  1E
1898:  MOVLW  02
189A:  MOVWF  1F
189C:  MOVWF  20
189E:  MOVLW  04
18A0:  MOVWF  21
18A2:  CLRF   22
18A4:  CLRF   23
18A6:  CLRF   24
18A8:  CLRF   25
18AA:  CLRF   26
18AC:  CLRF   27
18AE:  CLRF   28
18B0:  CLRF   29
18B2:  CLRF   2A
18B4:  CLRF   2B
18B6:  CLRF   2C
18B8:  CLRF   2D
18BA:  CLRF   2E
18BC:  MOVLW  01
18BE:  MOVWF  2F
18C0:  CLRF   30
18C2:  CLRF   31
18C4:  MOVLW  0A
18C6:  MOVWF  32
18C8:  CLRF   33
18CA:  MOVLW  01
18CC:  MOVWF  34
18CE:  CLRF   40
18D0:  CLRF   44
18D2:  CLRF   43
18D4:  CLRF   46
18D6:  CLRF   45
18D8:  CLRF   x9A
18DA:  CLRF   x99
18DC:  CLRF   x98
18DE:  CLRF   x97
18E0:  CLRF   x9E
18E2:  CLRF   x9D
18E4:  CLRF   x9C
18E6:  CLRF   x9B
18E8:  CLRF   xA2
18EA:  CLRF   xA1
18EC:  CLRF   xA0
18EE:  CLRF   x9F
18F0:  CLRF   xA6
18F2:  CLRF   xA5
18F4:  CLRF   xA4
18F6:  CLRF   xA3
18F8:  CLRF   xAA
18FA:  CLRF   xA9
18FC:  CLRF   xA8
18FE:  CLRF   xA7
1900:  CLRF   xAE
1902:  CLRF   xAD
1904:  CLRF   xAC
1906:  CLRF   xAB
1908:  CLRF   xB2
190A:  CLRF   xB1
190C:  CLRF   xB0
190E:  MOVLW  80
1910:  MOVWF  xAF
1912:  MOVF   FC1,W
1914:  ANDLW  C0
1916:  IORLW  0F
1918:  MOVWF  FC1
191A:  MOVLW  07
191C:  MOVWF  FB4
191E:  MOVLW  3E
1920:  MOVWF  35
1922:  MOVLW  20
1924:  MOVWF  36
1926:  MOVLW  5E
1928:  MOVWF  37
192A:  CLRF   38
192C:  CLRF   39
192E:  CLRF   3A
1930:  CLRF   3B
1932:  CLRF   3C
1934:  CLRF   3D
1936:  CLRF   3E
1938:  CLRF   3F
193A:  CLRF   47
193C:  CLRF   48
193E:  CLRF   49
1940:  CLRF   4A
1942:  CLRF   4B
1944:  CLRF   4C
1946:  CLRF   4D
1948:  CLRF   4E
194A:  CLRF   4F
194C:  CLRF   50
194E:  CLRF   51
1950:  CLRF   52
1952:  CLRF   53
1954:  CLRF   54
1956:  CLRF   55
1958:  CLRF   56
195A:  CLRF   57
195C:  CLRF   58
195E:  CLRF   59
1960:  CLRF   5A
1962:  CLRF   5B
1964:  CLRF   5C
1966:  CLRF   5D
1968:  CLRF   5E
196A:  CLRF   5F
196C:  CLRF   x60
196E:  CLRF   x61
1970:  CLRF   x62
1972:  CLRF   x63
1974:  CLRF   x64
1976:  CLRF   x65
1978:  CLRF   x66
197A:  CLRF   x67
197C:  CLRF   x68
197E:  CLRF   x69
1980:  CLRF   x6A
1982:  CLRF   x6B
1984:  CLRF   x6C
1986:  CLRF   x6D
1988:  CLRF   x6E
198A:  CLRF   x6F
198C:  CLRF   x70
198E:  CLRF   x71
1990:  CLRF   x72
1992:  CLRF   x73
1994:  CLRF   x74
1996:  CLRF   x75
1998:  CLRF   x76
199A:  CLRF   x77
199C:  CLRF   x78
199E:  CLRF   x79
19A0:  CLRF   x7A
19A2:  CLRF   x7B
19A4:  CLRF   x7C
19A6:  CLRF   x7D
19A8:  CLRF   x7E
19AA:  CLRF   x7F
19AC:  CLRF   x80
19AE:  CLRF   x81
19B0:  CLRF   x82
19B2:  CLRF   x83
19B4:  CLRF   x84
19B6:  CLRF   x85
19B8:  CLRF   x86
19BA:  CLRF   x87
19BC:  CLRF   x88
19BE:  CLRF   x89
19C0:  CLRF   x8A
19C2:  CLRF   x8B
19C4:  CLRF   x8C
19C6:  CLRF   x8D
19C8:  CLRF   x8E
19CA:  CLRF   x8F
19CC:  CLRF   x90
19CE:  CLRF   x91
19D0:  CLRF   x92
19D2:  CLRF   x93
19D4:  CLRF   x94
19D6:  CLRF   x95
19D8:  CLRF   x96
....................    output_d(0); 
19DA:  CLRF   F95
19DC:  CLRF   F8C
....................    lcd_init(); 
19DE:  CALL   06B8
....................    enable_interrupts(global); 
19E2:  MOVLW  C0
19E4:  IORWF  FF2,F
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
19E6:  MOVLW  85
19E8:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
19EA:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
19EC:  MOVF   FC1,W
19EE:  ANDLW  C0
19F0:  IORLW  0D
19F2:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
19F4:  BCF    FC0.0
19F6:  BSF    FC0.1
19F8:  BCF    FC0.2
19FA:  BSF    FC0.7
19FC:  BSF    FC2.0
....................    sensores(0); 
19FE:  CLRF   xB8
1A00:  CALL   0744
....................    lcd_gotoxy(1,1); 
1A04:  MOVLW  01
1A06:  MOVWF  xC5
1A08:  MOVWF  xC6
1A0A:  CALL   0796
....................    printf(lcd_putc,"  CABINA DE FLUJO   "); 
1A0E:  MOVLW  6A
1A10:  MOVWF  FF6
1A12:  MOVLW  01
1A14:  MOVWF  FF7
1A16:  CALL   0856
....................    lcd_gotoxy(1,2); 
1A1A:  MOVLW  01
1A1C:  MOVWF  xC5
1A1E:  MOVLW  02
1A20:  MOVWF  xC6
1A22:  CALL   0796
....................    printf(lcd_putc,"  LAMINAR VERTICAL  "); 
1A26:  MOVLW  80
1A28:  MOVWF  FF6
1A2A:  MOVLW  01
1A2C:  MOVWF  FF7
1A2E:  CALL   0856
....................    lcd_gotoxy(1,3); 
1A32:  MOVLW  01
1A34:  MOVWF  xC5
1A36:  MOVLW  03
1A38:  MOVWF  xC6
1A3A:  CALL   0796
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1A3E:  MOVLW  96
1A40:  MOVWF  FF6
1A42:  MOVLW  01
1A44:  MOVWF  FF7
1A46:  CALL   0856
....................    lcd_gotoxy(1,4); 
1A4A:  MOVLW  01
1A4C:  MOVWF  xC5
1A4E:  MOVLW  04
1A50:  MOVWF  xC6
1A52:  CALL   0796
....................    printf(lcd_putc,"   REF:  JPCFV120   "); 
1A56:  MOVLW  AC
1A58:  MOVWF  FF6
1A5A:  MOVLW  01
1A5C:  MOVWF  FF7
1A5E:  CALL   0856
....................    delay_ms(2000); 
1A62:  MOVLW  08
1A64:  MOVWF  xB3
1A66:  MOVLW  FA
1A68:  MOVWF  xCA
1A6A:  CALL   0626
1A6E:  DECFSZ xB3,F
1A70:  BRA    1A66
....................    printf(lcd_putc,"\f"); 
1A72:  MOVLW  0C
1A74:  MOVWF  xC4
1A76:  CALL   07F8
....................     
....................    //Solo para simulacion 
....................    //write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20); 
....................    //write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
....................    Velocidad=read_eeprom(5); 
1A7A:  MOVFF  FF2,B3
1A7E:  BCF    FF2.7
1A80:  MOVLW  05
1A82:  MOVWF  FA9
1A84:  BCF    FA6.6
1A86:  BCF    FA6.7
1A88:  BSF    FA6.0
1A8A:  MOVF   FA8,W
1A8C:  BTFSC  xB3.7
1A8E:  BSF    FF2.7
1A90:  MOVWF  34
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1A92:  MOVFF  FF2,B3
1A96:  BCF    FF2.7
1A98:  CLRF   FA9
1A9A:  BCF    FA6.6
1A9C:  BCF    FA6.7
1A9E:  BSF    FA6.0
1AA0:  MOVF   FA8,W
1AA2:  BTFSC  xB3.7
1AA4:  BSF    FF2.7
1AA6:  MOVWF  3C
1AA8:  MOVLW  14
1AAA:  MOVWF  xCA
1AAC:  CALL   0626
1AB0:  MOVFF  FF2,B3
1AB4:  BCF    FF2.7
1AB6:  MOVLW  01
1AB8:  MOVWF  FA9
1ABA:  BCF    FA6.6
1ABC:  BCF    FA6.7
1ABE:  BSF    FA6.0
1AC0:  MOVF   FA8,W
1AC2:  BTFSC  xB3.7
1AC4:  BSF    FF2.7
1AC6:  MOVWF  3D
1AC8:  MOVLW  14
1ACA:  MOVWF  xCA
1ACC:  CALL   0626
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1AD0:  MOVFF  FF2,B3
1AD4:  BCF    FF2.7
1AD6:  MOVLW  02
1AD8:  MOVWF  FA9
1ADA:  BCF    FA6.6
1ADC:  BCF    FA6.7
1ADE:  BSF    FA6.0
1AE0:  MOVF   FA8,W
1AE2:  BTFSC  xB3.7
1AE4:  BSF    FF2.7
1AE6:  MOVWF  3E
1AE8:  MOVLW  14
1AEA:  MOVWF  xCA
1AEC:  CALL   0626
1AF0:  MOVFF  FF2,B3
1AF4:  BCF    FF2.7
1AF6:  MOVLW  03
1AF8:  MOVWF  FA9
1AFA:  BCF    FA6.6
1AFC:  BCF    FA6.7
1AFE:  BSF    FA6.0
1B00:  MOVF   FA8,W
1B02:  BTFSC  xB3.7
1B04:  BSF    FF2.7
1B06:  MOVWF  3F
1B08:  MOVLW  14
1B0A:  MOVWF  xCA
1B0C:  CALL   0626
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(21); 
1B10:  MOVFF  FF2,B3
1B14:  BCF    FF2.7
1B16:  MOVLW  14
1B18:  MOVWF  FA9
1B1A:  BCF    FA6.6
1B1C:  BCF    FA6.7
1B1E:  BSF    FA6.0
1B20:  MOVF   FA8,W
1B22:  BTFSC  xB3.7
1B24:  BSF    FF2.7
1B26:  MOVWF  28
1B28:  MOVFF  FF2,B3
1B2C:  BCF    FF2.7
1B2E:  MOVLW  15
1B30:  MOVWF  FA9
1B32:  BCF    FA6.6
1B34:  BCF    FA6.7
1B36:  BSF    FA6.0
1B38:  MOVF   FA8,W
1B3A:  BTFSC  xB3.7
1B3C:  BSF    FF2.7
1B3E:  MOVWF  29
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horasL=read_eeprom(52);horasH=read_eeprom(53);  
1B40:  MOVFF  FF2,B3
1B44:  BCF    FF2.7
1B46:  MOVLW  32
1B48:  MOVWF  FA9
1B4A:  BCF    FA6.6
1B4C:  BCF    FA6.7
1B4E:  BSF    FA6.0
1B50:  MOVF   FA8,W
1B52:  BTFSC  xB3.7
1B54:  BSF    FF2.7
1B56:  MOVWF  22
1B58:  MOVFF  FF2,B3
1B5C:  BCF    FF2.7
1B5E:  MOVLW  33
1B60:  MOVWF  FA9
1B62:  BCF    FA6.6
1B64:  BCF    FA6.7
1B66:  BSF    FA6.0
1B68:  MOVF   FA8,W
1B6A:  BTFSC  xB3.7
1B6C:  BSF    FF2.7
1B6E:  MOVWF  23
1B70:  MOVFF  FF2,B3
1B74:  BCF    FF2.7
1B76:  MOVLW  34
1B78:  MOVWF  FA9
1B7A:  BCF    FA6.6
1B7C:  BCF    FA6.7
1B7E:  BSF    FA6.0
1B80:  MOVF   FA8,W
1B82:  BTFSC  xB3.7
1B84:  BSF    FF2.7
1B86:  MOVWF  24
1B88:  MOVFF  FF2,B3
1B8C:  BCF    FF2.7
1B8E:  MOVLW  35
1B90:  MOVWF  FA9
1B92:  BCF    FA6.6
1B94:  BCF    FA6.7
1B96:  BSF    FA6.0
1B98:  MOVF   FA8,W
1B9A:  BTFSC  xB3.7
1B9C:  BSF    FF2.7
1B9E:  MOVWF  25
....................     
....................    G_l=read_eeprom(60); 
1BA0:  MOVFF  FF2,B3
1BA4:  BCF    FF2.7
1BA6:  MOVLW  3C
1BA8:  MOVWF  FA9
1BAA:  BCF    FA6.6
1BAC:  BCF    FA6.7
1BAE:  BSF    FA6.0
1BB0:  MOVF   FA8,W
1BB2:  BTFSC  xB3.7
1BB4:  BSF    FF2.7
1BB6:  MOVWF  26
....................    G_h=read_eeprom(61); 
1BB8:  MOVFF  FF2,B3
1BBC:  BCF    FF2.7
1BBE:  MOVLW  3D
1BC0:  MOVWF  FA9
1BC2:  BCF    FA6.6
1BC4:  BCF    FA6.7
1BC6:  BSF    FA6.0
1BC8:  MOVF   FA8,W
1BCA:  BTFSC  xB3.7
1BCC:  BSF    FF2.7
1BCE:  MOVWF  27
....................    G16=make16(G_h,G_l); 
1BD0:  MOVFF  27,46
1BD4:  MOVFF  26,45
....................    G=G16; 
1BD8:  MOVFF  46,CC
1BDC:  MOVFF  45,CB
1BE0:  CALL   070E
1BE4:  MOVFF  03,B2
1BE8:  MOVFF  02,B1
1BEC:  MOVFF  01,B0
1BF0:  MOVFF  00,AF
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
1BF4:  MOVFF  FF2,B3
1BF8:  BCF    FF2.7
1BFA:  MOVLW  3C
1BFC:  MOVWF  FA9
1BFE:  BCF    FA6.6
1C00:  BCF    FA6.7
1C02:  BSF    FA6.0
1C04:  MOVF   FA8,W
1C06:  BTFSC  xB3.7
1C08:  BSF    FF2.7
1C0A:  MOVWF  40
....................    Temporal1=read_eeprom(61); 
1C0C:  MOVFF  FF2,B3
1C10:  BCF    FF2.7
1C12:  MOVLW  3D
1C14:  MOVWF  FA9
1C16:  BCF    FA6.6
1C18:  BCF    FA6.7
1C1A:  BSF    FA6.0
1C1C:  MOVF   FA8,W
1C1E:  BTFSC  xB3.7
1C20:  BSF    FF2.7
1C22:  CLRF   xCC
1C24:  MOVWF  xCB
1C26:  CALL   070E
1C2A:  MOVFF  03,AE
1C2E:  MOVFF  02,AD
1C32:  MOVFF  01,AC
1C36:  MOVFF  00,AB
....................    Temporal1=Temporal1/100.0; 
1C3A:  MOVFF  AE,CA
1C3E:  MOVFF  AD,C9
1C42:  MOVFF  AC,C8
1C46:  MOVFF  AB,C7
1C4A:  CLRF   xCE
1C4C:  CLRF   xCD
1C4E:  MOVLW  48
1C50:  MOVWF  xCC
1C52:  MOVLW  85
1C54:  MOVWF  xCB
1C56:  CALL   0876
1C5A:  MOVFF  03,AE
1C5E:  MOVFF  02,AD
1C62:  MOVFF  01,AC
1C66:  MOVFF  00,AB
....................    Diferencia=Entero1+Temporal1; 
1C6A:  CLRF   xCC
1C6C:  MOVFF  40,CB
1C70:  CALL   070E
1C74:  BCF    FD8.1
1C76:  MOVFF  03,CE
1C7A:  MOVFF  02,CD
1C7E:  MOVFF  01,CC
1C82:  MOVFF  00,CB
1C86:  MOVFF  AE,D2
1C8A:  MOVFF  AD,D1
1C8E:  MOVFF  AC,D0
1C92:  MOVFF  AB,CF
1C96:  CALL   09D0
1C9A:  MOVFF  03,AA
1C9E:  MOVFF  02,A9
1CA2:  MOVFF  01,A8
1CA6:  MOVFF  00,A7
....................     
....................    negativo=read_eeprom(70); 
1CAA:  MOVFF  FF2,B3
1CAE:  BCF    FF2.7
1CB0:  MOVLW  46
1CB2:  MOVWF  FA9
1CB4:  BCF    FA6.6
1CB6:  BCF    FA6.7
1CB8:  BSF    FA6.0
1CBA:  MOVF   FA8,W
1CBC:  BTFSC  xB3.7
1CBE:  BSF    FF2.7
1CC0:  MOVWF  32
....................    Limita(); 
1CC2:  GOTO   0C3A
....................    horas=make16(horasH,horasL); 
1CC6:  MOVFF  25,44
1CCA:  MOVFF  24,43
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1CCE:  MOVFF  28,2A
1CD2:  MOVFF  29,2B
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1CD6:  MOVF   19,F
1CD8:  BTFSS  FD8.2
1CDA:  BRA    2084
....................    lcd_gotoxy(1,1); 
1CDC:  MOVLW  01
1CDE:  MOVWF  xC5
1CE0:  MOVWF  xC6
1CE2:  CALL   0796
....................    printf(lcd_putc,"     Ingrese        "); 
1CE6:  MOVLW  C2
1CE8:  MOVWF  FF6
1CEA:  MOVLW  01
1CEC:  MOVWF  FF7
1CEE:  CALL   0856
....................    lcd_gotoxy(1,2); 
1CF2:  MOVLW  01
1CF4:  MOVWF  xC5
1CF6:  MOVLW  02
1CF8:  MOVWF  xC6
1CFA:  CALL   0796
....................    printf(lcd_putc,"    Contraseña      "); 
1CFE:  MOVLW  D8
1D00:  MOVWF  FF6
1D02:  MOVLW  01
1D04:  MOVWF  FF7
1D06:  CALL   0856
....................    lcd_gotoxy(1,3); 
1D0A:  MOVLW  01
1D0C:  MOVWF  xC5
1D0E:  MOVLW  03
1D10:  MOVWF  xC6
1D12:  CALL   0796
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1D16:  MOVLW  EE
1D18:  MOVWF  FF6
1D1A:  MOVLW  01
1D1C:  MOVWF  FF7
1D1E:  MOVLW  0A
1D20:  MOVWF  xB7
1D22:  CALL   0C8A
1D26:  MOVFF  38,B3
1D2A:  MOVLW  1F
1D2C:  MOVWF  xB4
1D2E:  CALL   0CD0
1D32:  MOVFF  39,B3
1D36:  MOVLW  1F
1D38:  MOVWF  xB4
1D3A:  CALL   0CD0
1D3E:  MOVFF  3A,B3
1D42:  MOVLW  1F
1D44:  MOVWF  xB4
1D46:  CALL   0CD0
1D4A:  MOVFF  3B,B3
1D4E:  MOVLW  1F
1D50:  MOVWF  xB4
1D52:  CALL   0CD0
1D56:  MOVLW  20
1D58:  MOVWF  xC4
1D5A:  CALL   07F8
1D5E:  MOVLW  20
1D60:  MOVWF  xC4
1D62:  CALL   07F8
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1D66:  BSF    F92.5
1D68:  BTFSS  F80.5
1D6A:  BRA    1D8E
....................       {  if(Flanco == 0)  
1D6C:  BTFSC  17.3
1D6E:  BRA    1D8C
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1D70:  MOVLW  0B
1D72:  SUBWF  1C,W
1D74:  CLRF   03
1D76:  ADDLW  38
1D78:  MOVWF  FE9
1D7A:  MOVLW  00
1D7C:  ADDWFC 03,W
1D7E:  MOVWF  FEA
1D80:  INCF   FEF,F
1D82:  BSF    17.3
1D84:  MOVLW  1E
1D86:  MOVWF  xCA
1D88:  CALL   0626
....................          else 
1D8C:  BRA    1D90
....................             {Flanco = 0;} 
1D8E:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1D90:  BSF    F96.0
1D92:  BTFSS  F84.0
1D94:  BRA    1DB8
....................       {  if(Flanco2 == 0)  
1D96:  BTFSC  17.5
1D98:  BRA    1DB6
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1D9A:  MOVLW  0B
1D9C:  SUBWF  1C,W
1D9E:  CLRF   03
1DA0:  ADDLW  38
1DA2:  MOVWF  FE9
1DA4:  MOVLW  00
1DA6:  ADDWFC 03,W
1DA8:  MOVWF  FEA
1DAA:  DECF   FEF,F
1DAC:  BSF    17.5
1DAE:  MOVLW  1E
1DB0:  MOVWF  xCA
1DB2:  CALL   0626
....................          else 
1DB6:  BRA    1DBA
....................             {Flanco2 = 0;} 
1DB8:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1DBA:  BSF    F96.1
1DBC:  BTFSS  F84.1
1DBE:  BRA    1DDA
....................       {  if(Flanco1 == 0)  
1DC0:  BTFSC  17.4
1DC2:  BRA    1DD8
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1DC4:  BSF    17.4
1DC6:  INCF   1C,F
1DC8:  MOVLW  1E
1DCA:  MOVWF  xCA
1DCC:  CALL   0626
1DD0:  MOVLW  0C
1DD2:  MOVWF  xC4
1DD4:  CALL   07F8
....................          else 
1DD8:  BRA    1DDC
....................             {Flanco1 = 0;}    
1DDA:  BCF    17.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
1DDC:  BSF    F96.2
1DDE:  BTFSS  F84.2
1DE0:  BRA    1DFC
....................       {  if(Flanco3 == 0)  
1DE2:  BTFSC  17.6
1DE4:  BRA    1DFA
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
1DE6:  BSF    17.6
1DE8:  DECF   1C,F
1DEA:  MOVLW  1E
1DEC:  MOVWF  xCA
1DEE:  CALL   0626
1DF2:  MOVLW  0C
1DF4:  MOVWF  xC4
1DF6:  CALL   07F8
....................          else 
1DFA:  BRA    1DFE
....................             {Flanco3 = 0;}     
1DFC:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1DFE:  MOVLW  0B
1E00:  SUBWF  1C,W
1E02:  CLRF   03
1E04:  ADDLW  38
1E06:  MOVWF  FE9
1E08:  MOVLW  00
1E0A:  ADDWFC 03,W
1E0C:  MOVWF  FEA
1E0E:  BTFSC  FEF.7
1E10:  BRA    1E14
1E12:  BRA    1E28
....................        {clave[unidad-11]=9;} 
1E14:  MOVLW  0B
1E16:  SUBWF  1C,W
1E18:  CLRF   03
1E1A:  ADDLW  38
1E1C:  MOVWF  FE9
1E1E:  MOVLW  00
1E20:  ADDWFC 03,W
1E22:  MOVWF  FEA
1E24:  MOVLW  09
1E26:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1E28:  MOVLW  0B
1E2A:  SUBWF  1C,W
1E2C:  CLRF   03
1E2E:  ADDLW  38
1E30:  MOVWF  FE9
1E32:  MOVLW  00
1E34:  ADDWFC 03,W
1E36:  MOVWF  FEA
1E38:  BTFSC  FEF.7
1E3A:  BRA    1E54
1E3C:  MOVF   FEF,W
1E3E:  SUBLW  09
1E40:  BC    1E54
....................        {clave[unidad-11]=0;} 
1E42:  MOVLW  0B
1E44:  SUBWF  1C,W
1E46:  CLRF   03
1E48:  ADDLW  38
1E4A:  MOVWF  FE9
1E4C:  MOVLW  00
1E4E:  ADDWFC 03,W
1E50:  MOVWF  FEA
1E52:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1E54:  MOVF   1C,W
1E56:  SUBLW  0A
1E58:  BNC   1E5E
....................        {unidad=11;} 
1E5A:  MOVLW  0B
1E5C:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1E5E:  MOVFF  1C,C5
1E62:  MOVLW  04
1E64:  MOVWF  xC6
1E66:  CALL   0796
....................        lcd_putc(t[2]); 
1E6A:  MOVFF  37,C4
1E6E:  CALL   07F8
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1E72:  MOVF   1C,W
1E74:  SUBLW  0E
1E76:  BTFSC  FD8.0
1E78:  BRA    2060
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1E7A:  MOVF   38,W
1E7C:  SUBLW  03
1E7E:  BNZ   1F5A
1E80:  MOVF   39,W
1E82:  SUBLW  08
1E84:  BNZ   1F5A
1E86:  MOVF   3A,W
1E88:  SUBLW  09
1E8A:  BNZ   1F5A
1E8C:  MOVF   3B,W
1E8E:  SUBLW  02
1E90:  BNZ   1F5A
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1E92:  CLRF   FA9
1E94:  CLRF   FA8
1E96:  BCF    FA6.6
1E98:  BCF    FA6.7
1E9A:  BSF    FA6.2
1E9C:  MOVF   FF2,W
1E9E:  MOVWF  00
1EA0:  BCF    FF2.7
1EA2:  MOVLB  F
1EA4:  MOVLW  55
1EA6:  MOVWF  FA7
1EA8:  MOVLW  AA
1EAA:  MOVWF  FA7
1EAC:  BSF    FA6.1
1EAE:  BTFSC  FA6.1
1EB0:  BRA    1EAE
1EB2:  BCF    FA6.2
1EB4:  MOVF   00,W
1EB6:  IORWF  FF2,F
1EB8:  MOVLW  14
1EBA:  MOVLB  0
1EBC:  MOVWF  xCA
1EBE:  CALL   0626
1EC2:  MOVLW  01
1EC4:  MOVWF  FA9
1EC6:  CLRF   FA8
1EC8:  BCF    FA6.6
1ECA:  BCF    FA6.7
1ECC:  BSF    FA6.2
1ECE:  MOVF   FF2,W
1ED0:  MOVWF  00
1ED2:  BCF    FF2.7
1ED4:  MOVLB  F
1ED6:  MOVLW  55
1ED8:  MOVWF  FA7
1EDA:  MOVLW  AA
1EDC:  MOVWF  FA7
1EDE:  BSF    FA6.1
1EE0:  BTFSC  FA6.1
1EE2:  BRA    1EE0
1EE4:  BCF    FA6.2
1EE6:  MOVF   00,W
1EE8:  IORWF  FF2,F
1EEA:  MOVLW  14
1EEC:  MOVLB  0
1EEE:  MOVWF  xCA
1EF0:  CALL   0626
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1EF4:  MOVLW  02
1EF6:  MOVWF  FA9
1EF8:  CLRF   FA8
1EFA:  BCF    FA6.6
1EFC:  BCF    FA6.7
1EFE:  BSF    FA6.2
1F00:  MOVF   FF2,W
1F02:  MOVWF  00
1F04:  BCF    FF2.7
1F06:  MOVLB  F
1F08:  MOVLW  55
1F0A:  MOVWF  FA7
1F0C:  MOVLW  AA
1F0E:  MOVWF  FA7
1F10:  BSF    FA6.1
1F12:  BTFSC  FA6.1
1F14:  BRA    1F12
1F16:  BCF    FA6.2
1F18:  MOVF   00,W
1F1A:  IORWF  FF2,F
1F1C:  MOVLW  14
1F1E:  MOVLB  0
1F20:  MOVWF  xCA
1F22:  CALL   0626
1F26:  MOVLW  03
1F28:  MOVWF  FA9
1F2A:  CLRF   FA8
1F2C:  BCF    FA6.6
1F2E:  BCF    FA6.7
1F30:  BSF    FA6.2
1F32:  MOVF   FF2,W
1F34:  MOVWF  00
1F36:  BCF    FF2.7
1F38:  MOVLB  F
1F3A:  MOVLW  55
1F3C:  MOVWF  FA7
1F3E:  MOVLW  AA
1F40:  MOVWF  FA7
1F42:  BSF    FA6.1
1F44:  BTFSC  FA6.1
1F46:  BRA    1F44
1F48:  BCF    FA6.2
1F4A:  MOVF   00,W
1F4C:  IORWF  FF2,F
1F4E:  MOVLW  14
1F50:  MOVLB  0
1F52:  MOVWF  xCA
1F54:  CALL   0626
....................              reset_cpu();} 
1F58:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1F5A:  MOVF   3C,W
1F5C:  SUBWF  38,W
1F5E:  BNZ   1FF2
1F60:  MOVF   3D,W
1F62:  SUBWF  39,W
1F64:  BNZ   1FF2
1F66:  MOVF   3E,W
1F68:  SUBWF  3A,W
1F6A:  BNZ   1FF2
1F6C:  MOVF   3F,W
1F6E:  SUBWF  3B,W
1F70:  BNZ   1FF2
....................             {lcd_gotoxy(1,1); 
1F72:  MOVLW  01
1F74:  MOVWF  xC5
1F76:  MOVWF  xC6
1F78:  CALL   0796
....................             printf(lcd_putc,"                   "); 
1F7C:  MOVLW  04
1F7E:  MOVWF  FF6
1F80:  MOVLW  02
1F82:  MOVWF  FF7
1F84:  CALL   0856
....................             lcd_gotoxy(1,2); 
1F88:  MOVLW  01
1F8A:  MOVWF  xC5
1F8C:  MOVLW  02
1F8E:  MOVWF  xC6
1F90:  CALL   0796
....................             printf(lcd_putc,"     Contraseña    "); 
1F94:  MOVLW  18
1F96:  MOVWF  FF6
1F98:  MOVLW  02
1F9A:  MOVWF  FF7
1F9C:  CALL   0856
....................             lcd_gotoxy(1,3); 
1FA0:  MOVLW  01
1FA2:  MOVWF  xC5
1FA4:  MOVLW  03
1FA6:  MOVWF  xC6
1FA8:  CALL   0796
....................             printf(lcd_putc,"      Correcta     "); 
1FAC:  MOVLW  2C
1FAE:  MOVWF  FF6
1FB0:  MOVLW  02
1FB2:  MOVWF  FF7
1FB4:  CALL   0856
....................             lcd_gotoxy(1,4); 
1FB8:  MOVLW  01
1FBA:  MOVWF  xC5
1FBC:  MOVLW  04
1FBE:  MOVWF  xC6
1FC0:  CALL   0796
....................             printf(lcd_putc,"                   "); 
1FC4:  MOVLW  40
1FC6:  MOVWF  FF6
1FC8:  MOVLW  02
1FCA:  MOVWF  FF7
1FCC:  CALL   0856
....................             delay_ms(1000);Menu=100;unidad=11;printf(lcd_putc,"\f");} 
1FD0:  MOVLW  04
1FD2:  MOVWF  xB3
1FD4:  MOVLW  FA
1FD6:  MOVWF  xCA
1FD8:  CALL   0626
1FDC:  DECFSZ xB3,F
1FDE:  BRA    1FD4
1FE0:  MOVLW  64
1FE2:  MOVWF  19
1FE4:  MOVLW  0B
1FE6:  MOVWF  1C
1FE8:  MOVLW  0C
1FEA:  MOVWF  xC4
1FEC:  CALL   07F8
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1FF0:  BRA    2060
....................          {lcd_gotoxy(1,1); 
1FF2:  MOVLW  01
1FF4:  MOVWF  xC5
1FF6:  MOVWF  xC6
1FF8:  CALL   0796
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1FFC:  MOVLW  01
1FFE:  MOVWF  xC5
2000:  MOVLW  02
2002:  MOVWF  xC6
2004:  CALL   0796
....................             printf(lcd_putc,"     Contraseña    "); 
2008:  MOVLW  54
200A:  MOVWF  FF6
200C:  MOVLW  02
200E:  MOVWF  FF7
2010:  CALL   0856
....................             lcd_gotoxy(1,3); 
2014:  MOVLW  01
2016:  MOVWF  xC5
2018:  MOVLW  03
201A:  MOVWF  xC6
201C:  CALL   0796
....................             printf(lcd_putc,"     Incorrecta    "); 
2020:  MOVLW  68
2022:  MOVWF  FF6
2024:  MOVLW  02
2026:  MOVWF  FF7
2028:  CALL   0856
....................             lcd_gotoxy(1,4); 
202C:  MOVLW  01
202E:  MOVWF  xC5
2030:  MOVLW  04
2032:  MOVWF  xC6
2034:  CALL   0796
....................             printf(lcd_putc,"                   "); 
2038:  MOVLW  7C
203A:  MOVWF  FF6
203C:  MOVLW  02
203E:  MOVWF  FF7
2040:  CALL   0856
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
2044:  MOVLW  04
2046:  MOVWF  xB3
2048:  MOVLW  FA
204A:  MOVWF  xCA
204C:  CALL   0626
2050:  DECFSZ xB3,F
2052:  BRA    2048
2054:  MOVLW  0B
2056:  MOVWF  1C
2058:  MOVLW  0C
205A:  MOVWF  xC4
205C:  CALL   07F8
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
2060:  MOVF   1C,W
2062:  SUBLW  0B
2064:  BC    2084
2066:  MOVF   1C,W
2068:  SUBLW  0D
206A:  BNC   2084
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
206C:  MOVLW  01
206E:  SUBWF  1C,W
2070:  MOVWF  xB3
2072:  MOVWF  xC5
2074:  MOVLW  04
2076:  MOVWF  xC6
2078:  CALL   0796
....................             lcd_putc(t[1]); 
207C:  MOVFF  36,C4
2080:  CALL   07F8
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2084:  DECFSZ 19,W
2086:  BRA    2278
....................    lcd_gotoxy(1,1); 
2088:  MOVLW  01
208A:  MOVWF  xC5
208C:  MOVWF  xC6
208E:  CALL   0796
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
2092:  MOVLW  90
2094:  MOVWF  FF6
2096:  MOVLW  02
2098:  MOVWF  FF7
209A:  CALL   0856
....................       if(paso<0) 
209E:  BTFSC  33.7
20A0:  BRA    20A4
20A2:  BRA    20A6
....................         {paso=0;} 
20A4:  CLRF   33
....................          
....................       if(UP)//Si oprime hacia arriba 
20A6:  BSF    F92.5
20A8:  BTFSS  F80.5
20AA:  BRA    20C6
....................       { 
....................          if(Flanco == 0) 
20AC:  BTFSC  17.3
20AE:  BRA    20C4
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
20B0:  DECF   1F,F
20B2:  DECF   1D,F
20B4:  MOVLW  01
20B6:  ADDWF  1D,W
20B8:  MOVWF  1E
20BA:  BSF    17.3
20BC:  MOVLW  1E
20BE:  MOVWF  xCA
20C0:  CALL   0626
....................          } 
....................       } 
....................       else 
20C4:  BRA    20C8
....................       { 
....................          Flanco = 0; 
20C6:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
20C8:  BSF    F96.0
20CA:  BTFSS  F84.0
20CC:  BRA    20E8
....................       { 
....................          if(Flanco2 == 0) 
20CE:  BTFSC  17.5
20D0:  BRA    20E6
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
20D2:  INCF   1F,F
20D4:  INCF   1D,F
20D6:  MOVLW  01
20D8:  SUBWF  1D,W
20DA:  MOVWF  1E
20DC:  BSF    17.5
20DE:  MOVLW  1E
20E0:  MOVWF  xCA
20E2:  CALL   0626
....................          } 
....................       } 
....................       else 
20E6:  BRA    20EA
....................       { 
....................          Flanco2 = 0; 
20E8:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
20EA:  MOVF   1F,W
20EC:  SUBWF  21,W
20EE:  BC    2100
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
20F0:  INCF   33,F
20F2:  MOVFF  1F,21
20F6:  MOVLW  02
20F8:  SUBWF  21,W
20FA:  MOVWF  20
20FC:  MOVLW  04
20FE:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
2100:  MOVF   20,W
2102:  SUBWF  1F,W
2104:  BC    2116
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2106:  DECF   33,F
2108:  MOVFF  1F,20
210C:  MOVLW  02
210E:  ADDWF  20,W
2110:  MOVWF  21
2112:  MOVLW  02
2114:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
2116:  MOVF   1F,W
2118:  SUBWF  1A,W
211A:  BC    212E
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
211C:  MOVFF  1B,1F
2120:  MOVLW  02
2122:  MOVWF  1D
2124:  CLRF   33
2126:  MOVFF  1F,20
212A:  ADDWF  20,W
212C:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
212E:  MOVF   1B,W
2130:  SUBWF  1F,W
2132:  BC    214A
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
2134:  MOVFF  1A,1F
2138:  MOVLW  04
213A:  MOVWF  1D
213C:  SUBWF  1A,W
213E:  MOVWF  33
2140:  MOVFF  1F,21
2144:  MOVLW  02
2146:  SUBWF  21,W
2148:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
214A:  MOVLW  01
214C:  ADDWF  33,W
214E:  MOVWF  xB3
2150:  MOVWF  xB4
2152:  MOVLW  02
2154:  MOVWF  xB5
2156:  CALL   0D98
....................         mensajes(2+paso,3); 
215A:  MOVLW  02
215C:  ADDWF  33,W
215E:  MOVWF  xB3
2160:  MOVWF  xB4
2162:  MOVLW  03
2164:  MOVWF  xB5
2166:  CALL   0D98
....................         mensajes(3+paso,4); 
216A:  MOVLW  03
216C:  ADDWF  33,W
216E:  MOVWF  xB3
2170:  MOVWF  xB4
2172:  MOVLW  04
2174:  MOVWF  xB5
2176:  CALL   0D98
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
217A:  MOVLW  01
217C:  MOVWF  xC5
217E:  MOVFF  1D,C6
2182:  CALL   0796
....................         lcd_putc(t[0]); 
2186:  MOVFF  35,C4
218A:  CALL   07F8
....................  
....................         if(Flecha==2) 
218E:  MOVF   1D,W
2190:  SUBLW  02
2192:  BNZ   21BC
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2194:  MOVLW  01
2196:  MOVWF  xC5
2198:  MOVLW  04
219A:  MOVWF  xC6
219C:  CALL   0796
....................             lcd_putc(t[1]); 
21A0:  MOVFF  36,C4
21A4:  CALL   07F8
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
21A8:  MOVLW  01
21AA:  MOVWF  xC5
21AC:  MOVLW  03
21AE:  MOVWF  xC6
21B0:  CALL   0796
....................             lcd_putc(t[1]); 
21B4:  MOVFF  36,C4
21B8:  CALL   07F8
....................           } 
....................          
....................         if(Flecha==4) 
21BC:  MOVF   1D,W
21BE:  SUBLW  04
21C0:  BNZ   21EA
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
21C2:  MOVLW  01
21C4:  MOVWF  xC5
21C6:  MOVLW  02
21C8:  MOVWF  xC6
21CA:  CALL   0796
....................             lcd_putc(t[1]); 
21CE:  MOVFF  36,C4
21D2:  CALL   07F8
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
21D6:  MOVLW  01
21D8:  MOVWF  xC5
21DA:  MOVLW  03
21DC:  MOVWF  xC6
21DE:  CALL   0796
....................             lcd_putc(t[1]); 
21E2:  MOVFF  36,C4
21E6:  CALL   07F8
....................           } 
....................          
....................         if(Flecha==3) 
21EA:  MOVF   1D,W
21EC:  SUBLW  03
21EE:  BNZ   2218
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
21F0:  MOVLW  01
21F2:  MOVWF  xC5
21F4:  MOVLW  04
21F6:  MOVWF  xC6
21F8:  CALL   0796
....................             lcd_putc(t[1]); 
21FC:  MOVFF  36,C4
2200:  CALL   07F8
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2204:  MOVLW  01
2206:  MOVWF  xC5
2208:  MOVLW  02
220A:  MOVWF  xC6
220C:  CALL   0796
....................             lcd_putc(t[1]); 
2210:  MOVFF  36,C4
2214:  CALL   07F8
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
2218:  BSF    F96.1
221A:  BTFSS  F84.1
221C:  BRA    2254
....................        { 
....................          if(Flanco1 == 0) 
221E:  BTFSC  17.4
2220:  BRA    2252
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2222:  BSF    17.4
2224:  MOVFF  1F,19
2228:  MOVLW  03
222A:  MOVWF  1D
222C:  MOVLW  02
222E:  MOVWF  xB3
2230:  MOVLW  96
2232:  MOVWF  xCA
2234:  CALL   0626
2238:  DECFSZ xB3,F
223A:  BRA    2230
223C:  MOVLW  0C
223E:  MOVWF  xC4
2240:  CALL   07F8
....................             if(Menu==6) 
2244:  MOVF   19,W
2246:  SUBLW  06
2248:  BNZ   2252
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
224A:  CLRF   38
224C:  CLRF   39
224E:  CLRF   3A
2250:  CLRF   3B
....................             } 
....................          } 
....................        } 
....................        else 
2252:  BRA    2256
....................        { 
....................          Flanco1 = 0; 
2254:  BCF    17.4
....................        } 
....................              
....................        if(LEFT) 
2256:  BSF    F96.2
2258:  BTFSS  F84.2
225A:  BRA    2278
....................        { 
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
225C:  MOVLW  64
225E:  MOVWF  19
2260:  MOVLW  0C
2262:  MOVWF  xC4
2264:  CALL   07F8
2268:  MOVLW  02
226A:  MOVWF  xB3
226C:  MOVLW  FA
226E:  MOVWF  xCA
2270:  CALL   0626
2274:  DECFSZ xB3,F
2276:  BRA    226C
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2278:  MOVF   19,W
227A:  SUBLW  02
227C:  BTFSS  FD8.2
227E:  BRA    24B2
....................     
....................    lcd_gotoxy(1,1); 
2280:  MOVLW  01
2282:  MOVWF  xC5
2284:  MOVWF  xC6
2286:  CALL   0796
....................    printf(lcd_putc,"    Temporizador     "); 
228A:  MOVLW  A6
228C:  MOVWF  FF6
228E:  MOVLW  02
2290:  MOVWF  FF7
2292:  CALL   0856
....................    lcd_gotoxy(1,2); 
2296:  MOVLW  01
2298:  MOVWF  xC5
229A:  MOVLW  02
229C:  MOVWF  xC6
229E:  CALL   0796
....................    printf(lcd_putc,"       Luz UV        "); 
22A2:  MOVLW  BC
22A4:  MOVWF  FF6
22A6:  MOVLW  02
22A8:  MOVWF  FF7
22AA:  CALL   0856
....................    lcd_gotoxy(6,3); 
22AE:  MOVLW  06
22B0:  MOVWF  xC5
22B2:  MOVLW  03
22B4:  MOVWF  xC6
22B6:  CALL   0796
....................    printf(lcd_putc,"%02u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
22BA:  MOVFF  2A,B3
22BE:  MOVLW  01
22C0:  MOVWF  xB4
22C2:  CALL   0E1A
22C6:  MOVLW  3A
22C8:  MOVWF  xC4
22CA:  CALL   07F8
22CE:  MOVFF  2B,B3
22D2:  MOVLW  01
22D4:  MOVWF  xB4
22D6:  CALL   0E1A
22DA:  MOVLW  DB
22DC:  MOVWF  FF6
22DE:  MOVLW  02
22E0:  MOVWF  FF7
22E2:  MOVLW  08
22E4:  MOVWF  xB7
22E6:  CALL   0C8A
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
22EA:  MOVLW  06
22EC:  ADDWF  2F,W
22EE:  MOVWF  xB3
22F0:  MOVWF  xC5
22F2:  MOVLW  04
22F4:  MOVWF  xC6
22F6:  CALL   0796
....................    lcd_putc(t[2]); 
22FA:  MOVFF  37,C4
22FE:  CALL   07F8
....................     
....................    if(UP) 
2302:  BSF    F92.5
2304:  BTFSS  F80.5
2306:  BRA    2342
....................    { 
....................       if(unidad2==1) 
2308:  DECFSZ 2F,W
230A:  BRA    2324
....................       { 
....................          if(tempo_minutos_pro<61) 
230C:  MOVF   2A,W
230E:  SUBLW  3C
2310:  BNC   2324
....................          { 
....................             tempo_minutos_pro++;delay_ms(300); 
2312:  INCF   2A,F
2314:  MOVLW  02
2316:  MOVWF  xB3
2318:  MOVLW  96
231A:  MOVWF  xCA
231C:  CALL   0626
2320:  DECFSZ xB3,F
2322:  BRA    2318
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
2324:  MOVF   2F,W
2326:  SUBLW  03
2328:  BNZ   2342
....................       { 
....................          if(tempo_segundos_pro<60) 
232A:  MOVF   2B,W
232C:  SUBLW  3B
232E:  BNC   2342
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
2330:  INCF   2B,F
2332:  MOVLW  02
2334:  MOVWF  xB3
2336:  MOVLW  96
2338:  MOVWF  xCA
233A:  CALL   0626
233E:  DECFSZ xB3,F
2340:  BRA    2336
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2342:  BSF    F96.0
2344:  BTFSS  F84.0
2346:  BRA    23B2
....................    { 
....................       if(unidad2==1) 
2348:  DECFSZ 2F,W
234A:  BRA    237C
....................       { 
....................          if(tempo_minutos_pro>0) 
234C:  MOVF   2A,F
234E:  BZ    2362
....................          { 
....................             tempo_minutos_pro--;delay_ms(300); 
2350:  DECF   2A,F
2352:  MOVLW  02
2354:  MOVWF  xB3
2356:  MOVLW  96
2358:  MOVWF  xCA
235A:  CALL   0626
235E:  DECFSZ xB3,F
2360:  BRA    2356
....................          } 
....................           
....................          if(tempo_minutos_pro>60) 
2362:  MOVF   2A,W
2364:  SUBLW  3C
2366:  BC    237C
....................          { 
....................             tempo_minutos_pro=60;delay_ms(300); 
2368:  MOVLW  3C
236A:  MOVWF  2A
236C:  MOVLW  02
236E:  MOVWF  xB3
2370:  MOVLW  96
2372:  MOVWF  xCA
2374:  CALL   0626
2378:  DECFSZ xB3,F
237A:  BRA    2370
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
237C:  MOVF   2F,W
237E:  SUBLW  03
2380:  BNZ   23B2
....................       { 
....................          if(tempo_segundos_pro>0) 
2382:  MOVF   2B,F
2384:  BZ    2398
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
2386:  DECF   2B,F
2388:  MOVLW  02
238A:  MOVWF  xB3
238C:  MOVLW  96
238E:  MOVWF  xCA
2390:  CALL   0626
2394:  DECFSZ xB3,F
2396:  BRA    238C
....................          } 
....................           
....................          if(tempo_segundos_pro>60) 
2398:  MOVF   2B,W
239A:  SUBLW  3C
239C:  BC    23B2
....................          { 
....................             tempo_segundos_pro=60;delay_ms(300); 
239E:  MOVLW  3C
23A0:  MOVWF  2B
23A2:  MOVLW  02
23A4:  MOVWF  xB3
23A6:  MOVLW  96
23A8:  MOVWF  xCA
23AA:  CALL   0626
23AE:  DECFSZ xB3,F
23B0:  BRA    23A6
....................          } 
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
23B2:  BSF    F96.1
23B4:  BTFSS  F84.1
23B6:  BRA    23E4
....................    { 
....................       if(unidad2==1) 
23B8:  DECFSZ 2F,W
23BA:  BRA    23C2
....................       { 
....................          unidad2=3; 
23BC:  MOVLW  03
23BE:  MOVWF  2F
....................       } 
....................       else 
23C0:  BRA    23CC
....................       { 
....................          if(unidad2==3) 
23C2:  MOVF   2F,W
23C4:  SUBLW  03
23C6:  BNZ   23CC
....................          { 
....................             unidad2=1; 
23C8:  MOVLW  01
23CA:  MOVWF  2F
....................          } 
....................       } 
....................       delay_ms(500); 
23CC:  MOVLW  02
23CE:  MOVWF  xB3
23D0:  MOVLW  FA
23D2:  MOVWF  xCA
23D4:  CALL   0626
23D8:  DECFSZ xB3,F
23DA:  BRA    23D0
....................       printf(lcd_putc,"\f"); 
23DC:  MOVLW  0C
23DE:  MOVWF  xC4
23E0:  CALL   07F8
....................    } 
....................     
....................    if(LEFT) 
23E4:  BSF    F96.2
23E6:  BTFSS  F84.2
23E8:  BRA    24B2
....................    { 
....................       delay_ms(200); 
23EA:  MOVLW  C8
23EC:  MOVWF  xCA
23EE:  CALL   0626
....................       printf(lcd_putc,"\f"); 
23F2:  MOVLW  0C
23F4:  MOVWF  xC4
23F6:  CALL   07F8
....................       lcd_gotoxy(1,2); 
23FA:  MOVLW  01
23FC:  MOVWF  xC5
23FE:  MOVLW  02
2400:  MOVWF  xC6
2402:  CALL   0796
....................       printf(lcd_putc,"Tiempo Almacenado"); 
2406:  MOVLW  E4
2408:  MOVWF  FF6
240A:  MOVLW  02
240C:  MOVWF  FF7
240E:  CALL   0856
....................       lcd_gotoxy(1,3); 
2412:  MOVLW  01
2414:  MOVWF  xC5
2416:  MOVLW  03
2418:  MOVWF  xC6
241A:  CALL   0796
....................       printf(lcd_putc,"  Correctamente  "); 
241E:  MOVLW  F6
2420:  MOVWF  FF6
2422:  MOVLW  02
2424:  MOVWF  FF7
2426:  CALL   0856
....................       write_eeprom(20,tempo_minutos_pro);write_eeprom(21,tempo_segundos_pro); 
242A:  MOVLW  14
242C:  MOVWF  FA9
242E:  MOVFF  2A,FA8
2432:  BCF    FA6.6
2434:  BCF    FA6.7
2436:  BSF    FA6.2
2438:  MOVF   FF2,W
243A:  MOVWF  00
243C:  BCF    FF2.7
243E:  MOVLB  F
2440:  MOVLW  55
2442:  MOVWF  FA7
2444:  MOVLW  AA
2446:  MOVWF  FA7
2448:  BSF    FA6.1
244A:  BTFSC  FA6.1
244C:  BRA    244A
244E:  BCF    FA6.2
2450:  MOVF   00,W
2452:  IORWF  FF2,F
2454:  MOVLW  15
2456:  MOVWF  FA9
2458:  MOVFF  2B,FA8
245C:  BCF    FA6.6
245E:  BCF    FA6.7
2460:  BSF    FA6.2
2462:  MOVF   FF2,W
2464:  MOVWF  00
2466:  BCF    FF2.7
2468:  MOVLW  55
246A:  MOVWF  FA7
246C:  MOVLW  AA
246E:  MOVWF  FA7
2470:  BSF    FA6.1
2472:  BTFSC  FA6.1
2474:  BRA    2472
2476:  BCF    FA6.2
2478:  MOVF   00,W
247A:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
247C:  MOVFF  2A,28
2480:  MOVFF  2B,29
....................       delay_ms(700); 
2484:  MOVLW  04
2486:  MOVLB  0
2488:  MOVWF  xB3
248A:  MOVLW  AF
248C:  MOVWF  xCA
248E:  CALL   0626
2492:  DECFSZ xB3,F
2494:  BRA    248A
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2496:  MOVLW  1E
2498:  MOVWF  xCA
249A:  CALL   0626
249E:  MOVLW  01
24A0:  MOVWF  19
24A2:  CLRF   33
24A4:  MOVLW  02
24A6:  MOVWF  1D
24A8:  MOVWF  1F
24AA:  MOVLW  0C
24AC:  MOVWF  xC4
24AE:  CALL   07F8
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................    
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de estado de Motor Ventilador 
24B2:  MOVF   19,W
24B4:  SUBLW  03
24B6:  BTFSS  FD8.2
24B8:  BRA    2684
....................    lcd_gotoxy(1,1); 
24BA:  MOVLW  01
24BC:  MOVWF  xC5
24BE:  MOVWF  xC6
24C0:  CALL   0796
....................    printf(lcd_putc,"Seleccione Velocidad"); 
24C4:  MOVLW  08
24C6:  MOVWF  FF6
24C8:  MOVLW  03
24CA:  MOVWF  FF7
24CC:  CALL   0856
....................    lcd_gotoxy(1,2); 
24D0:  MOVLW  01
24D2:  MOVWF  xC5
24D4:  MOVLW  02
24D6:  MOVWF  xC6
24D8:  CALL   0796
....................    printf(lcd_putc,"    de Ventilador   "); 
24DC:  MOVLW  1E
24DE:  MOVWF  FF6
24E0:  MOVLW  03
24E2:  MOVWF  FF7
24E4:  CALL   0856
....................    lcd_gotoxy(8,3); 
24E8:  MOVLW  08
24EA:  MOVWF  xC5
24EC:  MOVLW  03
24EE:  MOVWF  xC6
24F0:  CALL   0796
....................    printf(lcd_putc,"%i ",Velocidad); 
24F4:  MOVFF  34,B3
24F8:  MOVLW  1F
24FA:  MOVWF  xB4
24FC:  CALL   0CD0
2500:  MOVLW  20
2502:  MOVWF  xC4
2504:  CALL   07F8
....................  
....................    if(UP)//Si oprime hacia arriba 
2508:  BSF    F92.5
250A:  BTFSS  F80.5
250C:  BRA    2520
....................       {  if(Flanco == 0)  
250E:  BTFSC  17.3
2510:  BRA    251E
....................             {Velocidad++;Flanco = 1;delay_ms(30);}} 
2512:  INCF   34,F
2514:  BSF    17.3
2516:  MOVLW  1E
2518:  MOVWF  xCA
251A:  CALL   0626
....................          else 
251E:  BRA    2522
....................             {Flanco = 0;} 
2520:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2522:  BSF    F96.0
2524:  BTFSS  F84.0
2526:  BRA    253A
....................       {  if(Flanco2 == 0)  
2528:  BTFSC  17.5
252A:  BRA    2538
....................             {Velocidad--;Flanco2 = 1;delay_ms(30);}} 
252C:  DECF   34,F
252E:  BSF    17.5
2530:  MOVLW  1E
2532:  MOVWF  xCA
2534:  CALL   0626
....................          else 
2538:  BRA    253C
....................             {Flanco2 = 0;} 
253A:  BCF    17.5
....................        
....................              
....................       if(LEFT)//Si oprime Izquierda 
253C:  BSF    F96.2
253E:  BTFSS  F84.2
2540:  BRA    2566
....................       {  if(Flanco3 == 0)  
2542:  BTFSC  17.6
2544:  BRA    2564
....................             {Flecha=2;Flecha2=2;Flanco3 = 1;Menu=1; paso=0;delay_ms(500);}} 
2546:  MOVLW  02
2548:  MOVWF  1D
254A:  MOVWF  1F
254C:  BSF    17.6
254E:  MOVLW  01
2550:  MOVWF  19
2552:  CLRF   33
2554:  MOVLW  02
2556:  MOVWF  xB3
2558:  MOVLW  FA
255A:  MOVWF  xCA
255C:  CALL   0626
2560:  DECFSZ xB3,F
2562:  BRA    2558
....................          else 
2564:  BRA    2568
....................             {Flanco3 = 0;} 
2566:  BCF    17.6
....................          if(Velocidad<1) 
2568:  BTFSC  34.7
256A:  BRA    2572
256C:  MOVF   34,W
256E:  SUBLW  00
2570:  BNC   2576
....................             {Velocidad=4;} 
2572:  MOVLW  04
2574:  MOVWF  34
....................          if(Velocidad>4) 
2576:  BTFSC  34.7
2578:  BRA    2584
257A:  MOVF   34,W
257C:  SUBLW  04
257E:  BC    2584
....................             {Velocidad=1;}     
2580:  MOVLW  01
2582:  MOVWF  34
....................                      
....................       if(RIGHT)// Si oprime Derecha 
2584:  BSF    F96.1
2586:  BTFSS  F84.1
2588:  BRA    266E
....................       {  if(Flanco1 == 0)  
258A:  BTFSC  17.4
258C:  BRA    266C
....................             {Flanco1 = 1;Menu=1;paso=0; write_eeprom(5,Velocidad); 
258E:  BSF    17.4
2590:  MOVLW  01
2592:  MOVWF  19
2594:  CLRF   33
2596:  MOVLW  05
2598:  MOVWF  FA9
259A:  MOVFF  34,FA8
259E:  BCF    FA6.6
25A0:  BCF    FA6.7
25A2:  BSF    FA6.2
25A4:  MOVF   FF2,W
25A6:  MOVWF  00
25A8:  BCF    FF2.7
25AA:  MOVLB  F
25AC:  MOVLW  55
25AE:  MOVWF  FA7
25B0:  MOVLW  AA
25B2:  MOVWF  FA7
25B4:  BSF    FA6.1
25B6:  BTFSC  FA6.1
25B8:  BRA    25B6
25BA:  BCF    FA6.2
25BC:  MOVF   00,W
25BE:  IORWF  FF2,F
....................                 
....................              if(estadomv==1) 
25C0:  BTFSS  17.2
25C2:  BRA    25CE
....................                {velocidades(Velocidad);} 
25C4:  MOVFF  34,B5
25C8:  MOVLB  0
25CA:  CALL   0E80
....................                 
....................                lcd_gotoxy(1,1); 
25CE:  MOVLW  01
25D0:  MOVLB  0
25D2:  MOVWF  xC5
25D4:  MOVWF  xC6
25D6:  CALL   0796
....................                printf(lcd_putc,"                    "); 
25DA:  MOVLW  34
25DC:  MOVWF  FF6
25DE:  MOVLW  03
25E0:  MOVWF  FF7
25E2:  CALL   0856
....................                lcd_gotoxy(1,2); 
25E6:  MOVLW  01
25E8:  MOVWF  xC5
25EA:  MOVLW  02
25EC:  MOVWF  xC6
25EE:  CALL   0796
....................                printf(lcd_putc,"   Ha seleccionado  "); 
25F2:  MOVLW  4A
25F4:  MOVWF  FF6
25F6:  MOVLW  03
25F8:  MOVWF  FF7
25FA:  CALL   0856
....................                lcd_gotoxy(1,3); 
25FE:  MOVLW  01
2600:  MOVWF  xC5
2602:  MOVLW  03
2604:  MOVWF  xC6
2606:  CALL   0796
....................                printf(lcd_putc,"  la velocidad  %i  ",Velocidad); 
260A:  MOVLW  60
260C:  MOVWF  FF6
260E:  MOVLW  03
2610:  MOVWF  FF7
2612:  MOVLW  10
2614:  MOVWF  xB7
2616:  CALL   0C8A
261A:  MOVFF  34,B3
261E:  MOVLW  1F
2620:  MOVWF  xB4
2622:  CALL   0CD0
2626:  MOVLW  20
2628:  MOVWF  xC4
262A:  CALL   07F8
262E:  MOVLW  20
2630:  MOVWF  xC4
2632:  CALL   07F8
....................                lcd_gotoxy(1,4); 
2636:  MOVLW  01
2638:  MOVWF  xC5
263A:  MOVLW  04
263C:  MOVWF  xC6
263E:  CALL   0796
....................                printf(lcd_putc,"                    "); 
2642:  MOVLW  76
2644:  MOVWF  FF6
2646:  MOVLW  03
2648:  MOVWF  FF7
264A:  CALL   0856
....................               
....................             delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
264E:  MOVLW  04
2650:  MOVWF  xB3
2652:  MOVLW  FA
2654:  MOVWF  xCA
2656:  CALL   0626
265A:  DECFSZ xB3,F
265C:  BRA    2652
265E:  MOVLW  02
2660:  MOVWF  1D
2662:  MOVWF  1F
2664:  MOVLW  0C
2666:  MOVWF  xC4
2668:  CALL   07F8
....................          else 
266C:  BRA    2670
....................             {Flanco1 = 0;}    
266E:  BCF    17.4
....................  
....................         lcd_gotoxy(6,Flecha);// Para mostrar la flecha de seleccion 
2670:  MOVLW  06
2672:  MOVWF  xC5
2674:  MOVFF  1D,C6
2678:  CALL   0796
....................         lcd_putc(t[0]); 
267C:  MOVFF  35,C4
2680:  CALL   07F8
....................          
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu para Cambio de Contraseña 
2684:  MOVF   19,W
2686:  SUBLW  04
2688:  BTFSS  FD8.2
268A:  BRA    2984
....................    lcd_gotoxy(1,1); 
268C:  MOVLW  01
268E:  MOVWF  xC5
2690:  MOVWF  xC6
2692:  CALL   0796
....................    printf(lcd_putc,"      Ingrese       "); 
2696:  MOVLW  8C
2698:  MOVWF  FF6
269A:  MOVLW  03
269C:  MOVWF  FF7
269E:  CALL   0856
....................    lcd_gotoxy(1,2); 
26A2:  MOVLW  01
26A4:  MOVWF  xC5
26A6:  MOVLW  02
26A8:  MOVWF  xC6
26AA:  CALL   0796
....................    printf(lcd_putc," Contraseña Actual  "); 
26AE:  MOVLW  A2
26B0:  MOVWF  FF6
26B2:  MOVLW  03
26B4:  MOVWF  FF7
26B6:  CALL   0856
....................    lcd_gotoxy(1,3); 
26BA:  MOVLW  01
26BC:  MOVWF  xC5
26BE:  MOVLW  03
26C0:  MOVWF  xC6
26C2:  CALL   0796
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
26C6:  MOVLW  B8
26C8:  MOVWF  FF6
26CA:  MOVLW  03
26CC:  MOVWF  FF7
26CE:  MOVLW  0A
26D0:  MOVWF  xB7
26D2:  CALL   0C8A
26D6:  MOVFF  38,B3
26DA:  MOVLW  1F
26DC:  MOVWF  xB4
26DE:  CALL   0CD0
26E2:  MOVFF  39,B3
26E6:  MOVLW  1F
26E8:  MOVWF  xB4
26EA:  CALL   0CD0
26EE:  MOVFF  3A,B3
26F2:  MOVLW  1F
26F4:  MOVWF  xB4
26F6:  CALL   0CD0
26FA:  MOVFF  3B,B3
26FE:  MOVLW  1F
2700:  MOVWF  xB4
2702:  CALL   0CD0
2706:  MOVLW  20
2708:  MOVWF  xC4
270A:  CALL   07F8
270E:  MOVLW  20
2710:  MOVWF  xC4
2712:  CALL   07F8
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2716:  BSF    F92.5
2718:  BTFSS  F80.5
271A:  BRA    273E
....................       {  if(Flanco == 0)  
271C:  BTFSC  17.3
271E:  BRA    273C
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2720:  MOVLW  0B
2722:  SUBWF  1C,W
2724:  CLRF   03
2726:  ADDLW  38
2728:  MOVWF  FE9
272A:  MOVLW  00
272C:  ADDWFC 03,W
272E:  MOVWF  FEA
2730:  INCF   FEF,F
2732:  BSF    17.3
2734:  MOVLW  1E
2736:  MOVWF  xCA
2738:  CALL   0626
....................          else 
273C:  BRA    2740
....................             {Flanco = 0;} 
273E:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2740:  BSF    F96.0
2742:  BTFSS  F84.0
2744:  BRA    2768
....................       {  if(Flanco2 == 0)  
2746:  BTFSC  17.5
2748:  BRA    2766
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
274A:  MOVLW  0B
274C:  SUBWF  1C,W
274E:  CLRF   03
2750:  ADDLW  38
2752:  MOVWF  FE9
2754:  MOVLW  00
2756:  ADDWFC 03,W
2758:  MOVWF  FEA
275A:  DECF   FEF,F
275C:  BSF    17.5
275E:  MOVLW  1E
2760:  MOVWF  xCA
2762:  CALL   0626
....................          else 
2766:  BRA    276A
....................             {Flanco2 = 0;} 
2768:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
276A:  BSF    F96.1
276C:  BTFSS  F84.1
276E:  BRA    278A
....................       {  if(Flanco1 == 0)  
2770:  BTFSC  17.4
2772:  BRA    2788
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2774:  BSF    17.4
2776:  INCF   1C,F
2778:  MOVLW  1E
277A:  MOVWF  xCA
277C:  CALL   0626
2780:  MOVLW  0C
2782:  MOVWF  xC4
2784:  CALL   07F8
....................          else 
2788:  BRA    278C
....................             {Flanco1 = 0;}    
278A:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
278C:  BSF    F96.2
278E:  BTFSS  F84.2
2790:  BRA    27AC
....................       {  if(Flanco3 == 0)  
2792:  BTFSC  17.6
2794:  BRA    27AA
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2796:  BSF    17.6
2798:  DECF   1C,F
279A:  MOVLW  1E
279C:  MOVWF  xCA
279E:  CALL   0626
27A2:  MOVLW  0C
27A4:  MOVWF  xC4
27A6:  CALL   07F8
....................          else 
27AA:  BRA    27AE
....................             {Flanco3 = 0;}     
27AC:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
27AE:  MOVLW  0B
27B0:  SUBWF  1C,W
27B2:  CLRF   03
27B4:  ADDLW  38
27B6:  MOVWF  FE9
27B8:  MOVLW  00
27BA:  ADDWFC 03,W
27BC:  MOVWF  FEA
27BE:  BTFSC  FEF.7
27C0:  BRA    27C4
27C2:  BRA    27D8
....................        {clave[unidad-11]=9;} 
27C4:  MOVLW  0B
27C6:  SUBWF  1C,W
27C8:  CLRF   03
27CA:  ADDLW  38
27CC:  MOVWF  FE9
27CE:  MOVLW  00
27D0:  ADDWFC 03,W
27D2:  MOVWF  FEA
27D4:  MOVLW  09
27D6:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
27D8:  MOVLW  0B
27DA:  SUBWF  1C,W
27DC:  CLRF   03
27DE:  ADDLW  38
27E0:  MOVWF  FE9
27E2:  MOVLW  00
27E4:  ADDWFC 03,W
27E6:  MOVWF  FEA
27E8:  BTFSC  FEF.7
27EA:  BRA    2804
27EC:  MOVF   FEF,W
27EE:  SUBLW  09
27F0:  BC    2804
....................        {clave[unidad-11]=0;} 
27F2:  MOVLW  0B
27F4:  SUBWF  1C,W
27F6:  CLRF   03
27F8:  ADDLW  38
27FA:  MOVWF  FE9
27FC:  MOVLW  00
27FE:  ADDWFC 03,W
2800:  MOVWF  FEA
2802:  CLRF   FEF
....................        if(unidad<11) 
2804:  MOVF   1C,W
2806:  SUBLW  0A
2808:  BNC   282A
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
280A:  MOVLW  01
280C:  MOVWF  19
280E:  CLRF   33
2810:  MOVLW  02
2812:  MOVWF  1D
2814:  MOVWF  1F
2816:  MOVLW  0B
2818:  MOVWF  1C
281A:  MOVLW  02
281C:  MOVWF  xB3
281E:  MOVLW  FA
2820:  MOVWF  xCA
2822:  CALL   0626
2826:  DECFSZ xB3,F
2828:  BRA    281E
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
282A:  MOVFF  1C,C5
282E:  MOVLW  04
2830:  MOVWF  xC6
2832:  CALL   0796
....................        lcd_putc(t[2]); 
2836:  MOVFF  37,C4
283A:  CALL   07F8
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
283E:  MOVF   1C,W
2840:  SUBLW  0E
2842:  BTFSC  FD8.0
2844:  BRA    2960
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2846:  MOVF   3C,W
2848:  SUBWF  38,W
284A:  BNZ   28E6
284C:  MOVF   3D,W
284E:  SUBWF  39,W
2850:  BNZ   28E6
2852:  MOVF   3E,W
2854:  SUBWF  3A,W
2856:  BNZ   28E6
2858:  MOVF   3F,W
285A:  SUBWF  3B,W
285C:  BNZ   28E6
....................             {lcd_gotoxy(1,1); 
285E:  MOVLW  01
2860:  MOVWF  xC5
2862:  MOVWF  xC6
2864:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2868:  MOVLW  CE
286A:  MOVWF  FF6
286C:  MOVLW  03
286E:  MOVWF  FF7
2870:  CALL   0856
....................             lcd_gotoxy(1,2); 
2874:  MOVLW  01
2876:  MOVWF  xC5
2878:  MOVLW  02
287A:  MOVWF  xC6
287C:  CALL   0796
....................             printf(lcd_putc,"     Contraseña     "); 
2880:  MOVLW  E4
2882:  MOVWF  FF6
2884:  MOVLW  03
2886:  MOVWF  FF7
2888:  CALL   0856
....................             lcd_gotoxy(1,3); 
288C:  MOVLW  01
288E:  MOVWF  xC5
2890:  MOVLW  03
2892:  MOVWF  xC6
2894:  CALL   0796
....................             printf(lcd_putc,"      Correcta      "); 
2898:  MOVLW  FA
289A:  MOVWF  FF6
289C:  MOVLW  03
289E:  MOVWF  FF7
28A0:  CALL   0856
....................             lcd_gotoxy(1,4); 
28A4:  MOVLW  01
28A6:  MOVWF  xC5
28A8:  MOVLW  04
28AA:  MOVWF  xC6
28AC:  CALL   0796
....................             printf(lcd_putc,"                    "); 
28B0:  MOVLW  10
28B2:  MOVWF  FF6
28B4:  MOVLW  04
28B6:  MOVWF  FF7
28B8:  CALL   0856
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
28BC:  MOVLW  02
28BE:  MOVWF  xB3
28C0:  MOVLW  FA
28C2:  MOVWF  xCA
28C4:  CALL   0626
28C8:  DECFSZ xB3,F
28CA:  BRA    28C0
28CC:  MOVLW  3D
28CE:  MOVWF  19
28D0:  MOVLW  0B
28D2:  MOVWF  1C
28D4:  MOVLW  0C
28D6:  MOVWF  xC4
28D8:  CALL   07F8
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
28DC:  CLRF   38
28DE:  CLRF   39
28E0:  CLRF   3A
28E2:  CLRF   3B
....................          else 
28E4:  BRA    2960
....................          {lcd_gotoxy(1,1); 
28E6:  MOVLW  01
28E8:  MOVWF  xC5
28EA:  MOVWF  xC6
28EC:  CALL   0796
....................             printf(lcd_putc,"                    "); 
28F0:  MOVLW  26
28F2:  MOVWF  FF6
28F4:  MOVLW  04
28F6:  MOVWF  FF7
28F8:  CALL   0856
....................             lcd_gotoxy(1,2); 
28FC:  MOVLW  01
28FE:  MOVWF  xC5
2900:  MOVLW  02
2902:  MOVWF  xC6
2904:  CALL   0796
....................             printf(lcd_putc,"     Contraseña     "); 
2908:  MOVLW  3C
290A:  MOVWF  FF6
290C:  MOVLW  04
290E:  MOVWF  FF7
2910:  CALL   0856
....................             lcd_gotoxy(1,3); 
2914:  MOVLW  01
2916:  MOVWF  xC5
2918:  MOVLW  03
291A:  MOVWF  xC6
291C:  CALL   0796
....................             printf(lcd_putc,"     Incorrecta     "); 
2920:  MOVLW  52
2922:  MOVWF  FF6
2924:  MOVLW  04
2926:  MOVWF  FF7
2928:  CALL   0856
....................             lcd_gotoxy(1,4); 
292C:  MOVLW  01
292E:  MOVWF  xC5
2930:  MOVLW  04
2932:  MOVWF  xC6
2934:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2938:  MOVLW  68
293A:  MOVWF  FF6
293C:  MOVLW  04
293E:  MOVWF  FF7
2940:  CALL   0856
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2944:  MOVLW  02
2946:  MOVWF  xB3
2948:  MOVLW  FA
294A:  MOVWF  xCA
294C:  CALL   0626
2950:  DECFSZ xB3,F
2952:  BRA    2948
2954:  MOVLW  0B
2956:  MOVWF  1C
2958:  MOVLW  0C
295A:  MOVWF  xC4
295C:  CALL   07F8
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
2960:  MOVF   1C,W
2962:  SUBLW  0B
2964:  BC    2984
2966:  MOVF   1C,W
2968:  SUBLW  0D
296A:  BNC   2984
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
296C:  MOVLW  01
296E:  SUBWF  1C,W
2970:  MOVWF  xB3
2972:  MOVWF  xC5
2974:  MOVLW  04
2976:  MOVWF  xC6
2978:  CALL   0796
....................             lcd_putc(t[1]); 
297C:  MOVFF  36,C4
2980:  CALL   07F8
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2984:  MOVF   19,W
2986:  SUBLW  3D
2988:  BTFSS  FD8.2
298A:  BRA    2C9A
....................    lcd_gotoxy(1,1); 
298C:  MOVLW  01
298E:  MOVWF  xC5
2990:  MOVWF  xC6
2992:  CALL   0796
....................    printf(lcd_putc,"     Ingrese        "); 
2996:  MOVLW  7E
2998:  MOVWF  FF6
299A:  MOVLW  04
299C:  MOVWF  FF7
299E:  CALL   0856
....................    lcd_gotoxy(1,2); 
29A2:  MOVLW  01
29A4:  MOVWF  xC5
29A6:  MOVLW  02
29A8:  MOVWF  xC6
29AA:  CALL   0796
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
29AE:  MOVLW  94
29B0:  MOVWF  FF6
29B2:  MOVLW  04
29B4:  MOVWF  FF7
29B6:  CALL   0856
....................    lcd_gotoxy(1,3); 
29BA:  MOVLW  01
29BC:  MOVWF  xC5
29BE:  MOVLW  03
29C0:  MOVWF  xC6
29C2:  CALL   0796
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
29C6:  MOVLW  AA
29C8:  MOVWF  FF6
29CA:  MOVLW  04
29CC:  MOVWF  FF7
29CE:  MOVLW  0A
29D0:  MOVWF  xB7
29D2:  CALL   0C8A
29D6:  MOVFF  38,B3
29DA:  MOVLW  1F
29DC:  MOVWF  xB4
29DE:  CALL   0CD0
29E2:  MOVFF  39,B3
29E6:  MOVLW  1F
29E8:  MOVWF  xB4
29EA:  CALL   0CD0
29EE:  MOVFF  3A,B3
29F2:  MOVLW  1F
29F4:  MOVWF  xB4
29F6:  CALL   0CD0
29FA:  MOVFF  3B,B3
29FE:  MOVLW  1F
2A00:  MOVWF  xB4
2A02:  CALL   0CD0
2A06:  MOVLW  20
2A08:  MOVWF  xC4
2A0A:  CALL   07F8
2A0E:  MOVLW  20
2A10:  MOVWF  xC4
2A12:  CALL   07F8
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2A16:  BSF    F92.5
2A18:  BTFSS  F80.5
2A1A:  BRA    2A3E
....................       {  if(Flanco == 0)  
2A1C:  BTFSC  17.3
2A1E:  BRA    2A3C
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2A20:  MOVLW  0B
2A22:  SUBWF  1C,W
2A24:  CLRF   03
2A26:  ADDLW  38
2A28:  MOVWF  FE9
2A2A:  MOVLW  00
2A2C:  ADDWFC 03,W
2A2E:  MOVWF  FEA
2A30:  INCF   FEF,F
2A32:  BSF    17.3
2A34:  MOVLW  1E
2A36:  MOVWF  xCA
2A38:  CALL   0626
....................          else 
2A3C:  BRA    2A40
....................             {Flanco = 0;} 
2A3E:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2A40:  BSF    F96.0
2A42:  BTFSS  F84.0
2A44:  BRA    2A68
....................       {  if(Flanco2 == 0)  
2A46:  BTFSC  17.5
2A48:  BRA    2A66
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2A4A:  MOVLW  0B
2A4C:  SUBWF  1C,W
2A4E:  CLRF   03
2A50:  ADDLW  38
2A52:  MOVWF  FE9
2A54:  MOVLW  00
2A56:  ADDWFC 03,W
2A58:  MOVWF  FEA
2A5A:  DECF   FEF,F
2A5C:  BSF    17.5
2A5E:  MOVLW  1E
2A60:  MOVWF  xCA
2A62:  CALL   0626
....................          else 
2A66:  BRA    2A6A
....................             {Flanco2 = 0;} 
2A68:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
2A6A:  BSF    F96.1
2A6C:  BTFSS  F84.1
2A6E:  BRA    2A8A
....................       {  if(Flanco1 == 0)  
2A70:  BTFSC  17.4
2A72:  BRA    2A88
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2A74:  BSF    17.4
2A76:  INCF   1C,F
2A78:  MOVLW  1E
2A7A:  MOVWF  xCA
2A7C:  CALL   0626
2A80:  MOVLW  0C
2A82:  MOVWF  xC4
2A84:  CALL   07F8
....................          else 
2A88:  BRA    2A8C
....................             {Flanco1 = 0;}    
2A8A:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2A8C:  BSF    F96.2
2A8E:  BTFSS  F84.2
2A90:  BRA    2AAC
....................       {  if(Flanco3 == 0)  
2A92:  BTFSC  17.6
2A94:  BRA    2AAA
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2A96:  BSF    17.6
2A98:  DECF   1C,F
2A9A:  MOVLW  1E
2A9C:  MOVWF  xCA
2A9E:  CALL   0626
2AA2:  MOVLW  0C
2AA4:  MOVWF  xC4
2AA6:  CALL   07F8
....................          else 
2AAA:  BRA    2AAE
....................             {Flanco3 = 0;}     
2AAC:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2AAE:  MOVLW  0B
2AB0:  SUBWF  1C,W
2AB2:  CLRF   03
2AB4:  ADDLW  38
2AB6:  MOVWF  FE9
2AB8:  MOVLW  00
2ABA:  ADDWFC 03,W
2ABC:  MOVWF  FEA
2ABE:  BTFSC  FEF.7
2AC0:  BRA    2AC4
2AC2:  BRA    2AD8
....................        {clave[unidad-11]=9;} 
2AC4:  MOVLW  0B
2AC6:  SUBWF  1C,W
2AC8:  CLRF   03
2ACA:  ADDLW  38
2ACC:  MOVWF  FE9
2ACE:  MOVLW  00
2AD0:  ADDWFC 03,W
2AD2:  MOVWF  FEA
2AD4:  MOVLW  09
2AD6:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2AD8:  MOVLW  0B
2ADA:  SUBWF  1C,W
2ADC:  CLRF   03
2ADE:  ADDLW  38
2AE0:  MOVWF  FE9
2AE2:  MOVLW  00
2AE4:  ADDWFC 03,W
2AE6:  MOVWF  FEA
2AE8:  BTFSC  FEF.7
2AEA:  BRA    2B04
2AEC:  MOVF   FEF,W
2AEE:  SUBLW  09
2AF0:  BC    2B04
....................        {clave[unidad-11]=0;} 
2AF2:  MOVLW  0B
2AF4:  SUBWF  1C,W
2AF6:  CLRF   03
2AF8:  ADDLW  38
2AFA:  MOVWF  FE9
2AFC:  MOVLW  00
2AFE:  ADDWFC 03,W
2B00:  MOVWF  FEA
2B02:  CLRF   FEF
....................        if(unidad<11) 
2B04:  MOVF   1C,W
2B06:  SUBLW  0A
2B08:  BNC   2B12
....................        {Menu=5;unidad=11;} 
2B0A:  MOVLW  05
2B0C:  MOVWF  19
2B0E:  MOVLW  0B
2B10:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2B12:  MOVFF  1C,C5
2B16:  MOVLW  04
2B18:  MOVWF  xC6
2B1A:  CALL   0796
....................        lcd_putc(t[2]); 
2B1E:  MOVFF  37,C4
2B22:  CALL   07F8
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
2B26:  MOVF   1C,W
2B28:  SUBLW  0E
2B2A:  BTFSC  FD8.0
2B2C:  BRA    2C76
....................        { 
....................             lcd_gotoxy(1,1); 
2B2E:  MOVLW  01
2B30:  MOVWF  xC5
2B32:  MOVWF  xC6
2B34:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2B38:  MOVLW  C0
2B3A:  MOVWF  FF6
2B3C:  MOVLW  04
2B3E:  MOVWF  FF7
2B40:  CALL   0856
....................             lcd_gotoxy(1,2); 
2B44:  MOVLW  01
2B46:  MOVWF  xC5
2B48:  MOVLW  02
2B4A:  MOVWF  xC6
2B4C:  CALL   0796
....................             printf(lcd_putc,"     Contraseña     "); 
2B50:  MOVLW  D6
2B52:  MOVWF  FF6
2B54:  MOVLW  04
2B56:  MOVWF  FF7
2B58:  CALL   0856
....................             lcd_gotoxy(1,3); 
2B5C:  MOVLW  01
2B5E:  MOVWF  xC5
2B60:  MOVLW  03
2B62:  MOVWF  xC6
2B64:  CALL   0796
....................             printf(lcd_putc,"     Almacenada     "); 
2B68:  MOVLW  EC
2B6A:  MOVWF  FF6
2B6C:  MOVLW  04
2B6E:  MOVWF  FF7
2B70:  CALL   0856
....................             lcd_gotoxy(1,4); 
2B74:  MOVLW  01
2B76:  MOVWF  xC5
2B78:  MOVLW  04
2B7A:  MOVWF  xC6
2B7C:  CALL   0796
....................             printf(lcd_putc,"                    "); 
2B80:  MOVLW  02
2B82:  MOVWF  FF6
2B84:  MOVLW  05
2B86:  MOVWF  FF7
2B88:  CALL   0856
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2B8C:  CLRF   FA9
2B8E:  MOVFF  38,FA8
2B92:  BCF    FA6.6
2B94:  BCF    FA6.7
2B96:  BSF    FA6.2
2B98:  MOVF   FF2,W
2B9A:  MOVWF  00
2B9C:  BCF    FF2.7
2B9E:  MOVLB  F
2BA0:  MOVLW  55
2BA2:  MOVWF  FA7
2BA4:  MOVLW  AA
2BA6:  MOVWF  FA7
2BA8:  BSF    FA6.1
2BAA:  BTFSC  FA6.1
2BAC:  BRA    2BAA
2BAE:  BCF    FA6.2
2BB0:  MOVF   00,W
2BB2:  IORWF  FF2,F
2BB4:  MOVLW  14
2BB6:  MOVLB  0
2BB8:  MOVWF  xCA
2BBA:  CALL   0626
2BBE:  MOVLW  01
2BC0:  MOVWF  FA9
2BC2:  MOVFF  39,FA8
2BC6:  BCF    FA6.6
2BC8:  BCF    FA6.7
2BCA:  BSF    FA6.2
2BCC:  MOVF   FF2,W
2BCE:  MOVWF  00
2BD0:  BCF    FF2.7
2BD2:  MOVLB  F
2BD4:  MOVLW  55
2BD6:  MOVWF  FA7
2BD8:  MOVLW  AA
2BDA:  MOVWF  FA7
2BDC:  BSF    FA6.1
2BDE:  BTFSC  FA6.1
2BE0:  BRA    2BDE
2BE2:  BCF    FA6.2
2BE4:  MOVF   00,W
2BE6:  IORWF  FF2,F
2BE8:  MOVLW  14
2BEA:  MOVLB  0
2BEC:  MOVWF  xCA
2BEE:  CALL   0626
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2BF2:  MOVLW  02
2BF4:  MOVWF  FA9
2BF6:  MOVFF  3A,FA8
2BFA:  BCF    FA6.6
2BFC:  BCF    FA6.7
2BFE:  BSF    FA6.2
2C00:  MOVF   FF2,W
2C02:  MOVWF  00
2C04:  BCF    FF2.7
2C06:  MOVLB  F
2C08:  MOVLW  55
2C0A:  MOVWF  FA7
2C0C:  MOVLW  AA
2C0E:  MOVWF  FA7
2C10:  BSF    FA6.1
2C12:  BTFSC  FA6.1
2C14:  BRA    2C12
2C16:  BCF    FA6.2
2C18:  MOVF   00,W
2C1A:  IORWF  FF2,F
2C1C:  MOVLW  14
2C1E:  MOVLB  0
2C20:  MOVWF  xCA
2C22:  CALL   0626
2C26:  MOVLW  03
2C28:  MOVWF  FA9
2C2A:  MOVFF  3B,FA8
2C2E:  BCF    FA6.6
2C30:  BCF    FA6.7
2C32:  BSF    FA6.2
2C34:  MOVF   FF2,W
2C36:  MOVWF  00
2C38:  BCF    FF2.7
2C3A:  MOVLB  F
2C3C:  MOVLW  55
2C3E:  MOVWF  FA7
2C40:  MOVLW  AA
2C42:  MOVWF  FA7
2C44:  BSF    FA6.1
2C46:  BTFSC  FA6.1
2C48:  BRA    2C46
2C4A:  BCF    FA6.2
2C4C:  MOVF   00,W
2C4E:  IORWF  FF2,F
2C50:  MOVLW  14
2C52:  MOVLB  0
2C54:  MOVWF  xCA
2C56:  CALL   0626
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2C5A:  MOVLW  02
2C5C:  MOVWF  xB3
2C5E:  MOVLW  FA
2C60:  MOVWF  xCA
2C62:  CALL   0626
2C66:  DECFSZ xB3,F
2C68:  BRA    2C5E
2C6A:  MOVLW  01
2C6C:  MOVWF  19
2C6E:  CLRF   33
2C70:  MOVLW  02
2C72:  MOVWF  1D
2C74:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2C76:  MOVF   1C,W
2C78:  SUBLW  0B
2C7A:  BC    2C9A
2C7C:  MOVF   1C,W
2C7E:  SUBLW  0D
2C80:  BNC   2C9A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2C82:  MOVLW  01
2C84:  SUBWF  1C,W
2C86:  MOVWF  xB3
2C88:  MOVWF  xC5
2C8A:  MOVLW  04
2C8C:  MOVWF  xC6
2C8E:  CALL   0796
....................             lcd_putc(t[1]); 
2C92:  MOVFF  36,C4
2C96:  CALL   07F8
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de tiempo de trabajo de Luz UV 
2C9A:  MOVF   19,W
2C9C:  SUBLW  05
2C9E:  BNZ   2D12
....................    lcd_gotoxy(1,1); 
2CA0:  MOVLW  01
2CA2:  MOVWF  xC5
2CA4:  MOVWF  xC6
2CA6:  CALL   0796
....................    printf(lcd_putc,"  Duracion Actual   "); 
2CAA:  MOVLW  18
2CAC:  MOVWF  FF6
2CAE:  MOVLW  05
2CB0:  MOVWF  FF7
2CB2:  CALL   0856
....................    lcd_gotoxy(1,2); 
2CB6:  MOVLW  01
2CB8:  MOVWF  xC5
2CBA:  MOVLW  02
2CBC:  MOVWF  xC6
2CBE:  CALL   0796
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2CC2:  MOVLW  2E
2CC4:  MOVWF  FF6
2CC6:  MOVLW  05
2CC8:  MOVWF  FF7
2CCA:  MOVLW  0B
2CCC:  MOVWF  xB7
2CCE:  CALL   0C8A
2CD2:  MOVLW  08
2CD4:  MOVWF  FE9
2CD6:  MOVFF  44,B4
2CDA:  MOVFF  43,B3
2CDE:  GOTO   0EEC
2CE2:  MOVLW  20
2CE4:  MOVWF  xC4
2CE6:  CALL   07F8
2CEA:  MOVLW  20
2CEC:  MOVWF  xC4
2CEE:  CALL   07F8
2CF2:  MOVLW  20
2CF4:  MOVWF  xC4
2CF6:  CALL   07F8
....................    lcd_gotoxy(1,4); 
2CFA:  MOVLW  01
2CFC:  MOVWF  xC5
2CFE:  MOVLW  04
2D00:  MOVWF  xC6
2D02:  CALL   0796
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2D06:  MOVLW  42
2D08:  MOVWF  FF6
2D0A:  MOVLW  05
2D0C:  MOVWF  FF7
2D0E:  CALL   0856
....................     
....................    } 
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2D12:  BSF    F92.5
2D14:  BTFSS  F80.5
2D16:  BRA    2E08
2D18:  BSF    F96.1
2D1A:  BTFSS  F84.1
2D1C:  BRA    2E08
....................       {   
....................          delay_ms(200); 
2D1E:  MOVLW  C8
2D20:  MOVWF  xCA
2D22:  CALL   0626
....................          printf(lcd_putc,"\f"); 
2D26:  MOVLW  0C
2D28:  MOVWF  xC4
2D2A:  CALL   07F8
....................          lcd_gotoxy(1,2); 
2D2E:  MOVLW  01
2D30:  MOVWF  xC5
2D32:  MOVLW  02
2D34:  MOVWF  xC6
2D36:  CALL   0796
....................          printf(lcd_putc," Reset de tiempo "); 
2D3A:  MOVLW  58
2D3C:  MOVWF  FF6
2D3E:  MOVLW  05
2D40:  MOVWF  FF7
2D42:  CALL   0856
....................          lcd_gotoxy(1,3); 
2D46:  MOVLW  01
2D48:  MOVWF  xC5
2D4A:  MOVLW  03
2D4C:  MOVWF  xC6
2D4E:  CALL   0796
....................          printf(lcd_putc,"     Exitoso     "); 
2D52:  MOVLW  6A
2D54:  MOVWF  FF6
2D56:  MOVLW  05
2D58:  MOVWF  FF7
2D5A:  CALL   0856
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2D5E:  MOVLW  32
2D60:  MOVWF  FA9
2D62:  CLRF   FA8
2D64:  BCF    FA6.6
2D66:  BCF    FA6.7
2D68:  BSF    FA6.2
2D6A:  MOVF   FF2,W
2D6C:  MOVWF  00
2D6E:  BCF    FF2.7
2D70:  MOVLB  F
2D72:  MOVLW  55
2D74:  MOVWF  FA7
2D76:  MOVLW  AA
2D78:  MOVWF  FA7
2D7A:  BSF    FA6.1
2D7C:  BTFSC  FA6.1
2D7E:  BRA    2D7C
2D80:  BCF    FA6.2
2D82:  MOVF   00,W
2D84:  IORWF  FF2,F
2D86:  MOVLW  33
2D88:  MOVWF  FA9
2D8A:  CLRF   FA8
2D8C:  BCF    FA6.6
2D8E:  BCF    FA6.7
2D90:  BSF    FA6.2
2D92:  MOVF   FF2,W
2D94:  MOVWF  00
2D96:  BCF    FF2.7
2D98:  MOVLW  55
2D9A:  MOVWF  FA7
2D9C:  MOVLW  AA
2D9E:  MOVWF  FA7
2DA0:  BSF    FA6.1
2DA2:  BTFSC  FA6.1
2DA4:  BRA    2DA2
2DA6:  BCF    FA6.2
2DA8:  MOVF   00,W
2DAA:  IORWF  FF2,F
2DAC:  MOVLW  34
2DAE:  MOVWF  FA9
2DB0:  CLRF   FA8
2DB2:  BCF    FA6.6
2DB4:  BCF    FA6.7
2DB6:  BSF    FA6.2
2DB8:  MOVF   FF2,W
2DBA:  MOVWF  00
2DBC:  BCF    FF2.7
2DBE:  MOVLW  55
2DC0:  MOVWF  FA7
2DC2:  MOVLW  AA
2DC4:  MOVWF  FA7
2DC6:  BSF    FA6.1
2DC8:  BTFSC  FA6.1
2DCA:  BRA    2DC8
2DCC:  BCF    FA6.2
2DCE:  MOVF   00,W
2DD0:  IORWF  FF2,F
....................          delay_ms(700); 
2DD2:  MOVLW  04
2DD4:  MOVLB  0
2DD6:  MOVWF  xB3
2DD8:  MOVLW  AF
2DDA:  MOVWF  xCA
2DDC:  CALL   0626
2DE0:  DECFSZ xB3,F
2DE2:  BRA    2DD8
....................          segundos=0;minutos=0;horas=0; 
2DE4:  CLRF   22
2DE6:  CLRF   23
2DE8:  CLRF   44
2DEA:  CLRF   43
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2DEC:  MOVLW  1E
2DEE:  MOVWF  xCA
2DF0:  CALL   0626
2DF4:  MOVLW  01
2DF6:  MOVWF  19
2DF8:  CLRF   33
2DFA:  MOVLW  02
2DFC:  MOVWF  1D
2DFE:  MOVWF  1F
2E00:  MOVLW  0C
2E02:  MOVWF  xC4
2E04:  CALL   07F8
....................       } 
....................              
....................       if(LEFT)// Si oprime Izquierda 
2E08:  BSF    F96.2
2E0A:  BTFSS  F84.2
2E0C:  BRA    2E3A
....................       { 
....................          if(Flanco3 == 0) 
2E0E:  BTFSC  17.6
2E10:  BRA    2E38
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2E12:  BSF    17.6
2E14:  MOVLW  02
2E16:  MOVWF  xB3
2E18:  MOVLW  FA
2E1A:  MOVWF  xCA
2E1C:  CALL   0626
2E20:  DECFSZ xB3,F
2E22:  BRA    2E18
2E24:  MOVLW  01
2E26:  MOVWF  19
2E28:  CLRF   33
2E2A:  MOVLW  02
2E2C:  MOVWF  1D
2E2E:  MOVWF  1F
2E30:  MOVLW  0C
2E32:  MOVWF  xC4
2E34:  CALL   07F8
....................          } 
....................       } 
....................       else 
2E38:  BRA    2E3C
....................       { 
....................          Flanco3 = 0; 
2E3A:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de Punto Cero 
2E3C:  MOVF   19,W
2E3E:  SUBLW  06
2E40:  BTFSS  FD8.2
2E42:  BRA    3062
....................       lcd_gotoxy(1,1); 
2E44:  MOVLW  01
2E46:  MOVWF  xC5
2E48:  MOVWF  xC6
2E4A:  CALL   0796
....................       printf(lcd_putc,"  Zero Point Config "); 
2E4E:  MOVLW  7C
2E50:  MOVWF  FF6
2E52:  MOVLW  05
2E54:  MOVWF  FF7
2E56:  CALL   0856
....................       lcd_gotoxy(1,2); 
2E5A:  MOVLW  01
2E5C:  MOVWF  xC5
2E5E:  MOVLW  02
2E60:  MOVWF  xC6
2E62:  CALL   0796
....................       printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2E66:  MOVLW  05
2E68:  MOVWF  xB3
2E6A:  CALL   1016
2E6E:  MOVFF  00,B3
2E72:  MOVFF  01,B4
2E76:  MOVFF  02,B5
2E7A:  MOVFF  03,B6
2E7E:  MOVFF  03,CA
2E82:  MOVFF  02,C9
2E86:  MOVFF  01,C8
2E8A:  MOVFF  00,C7
2E8E:  MOVLW  D7
2E90:  MOVWF  xCE
2E92:  MOVLW  A3
2E94:  MOVWF  xCD
2E96:  CLRF   xCC
2E98:  MOVLW  81
2E9A:  MOVWF  xCB
2E9C:  CALL   11B0
2EA0:  MOVFF  00,B3
2EA4:  MOVFF  01,B4
2EA8:  MOVFF  02,B5
2EAC:  MOVFF  03,B6
2EB0:  MOVLW  92
2EB2:  MOVWF  FF6
2EB4:  MOVLW  05
2EB6:  MOVWF  FF7
2EB8:  MOVLW  09
2EBA:  MOVWF  xB7
2EBC:  CALL   0C8A
2EC0:  MOVLW  02
2EC2:  MOVWF  FE9
2EC4:  MOVFF  B6,BA
2EC8:  MOVFF  B5,B9
2ECC:  MOVFF  B4,B8
2ED0:  MOVFF  B3,B7
2ED4:  MOVWF  xBB
2ED6:  CALL   135C
2EDA:  MOVLW  A0
2EDC:  MOVWF  FF6
2EDE:  MOVLW  05
2EE0:  MOVWF  FF7
2EE2:  MOVLW  07
2EE4:  MOVWF  xB7
2EE6:  CALL   0C8A
....................       lcd_gotoxy(1,3); 
2EEA:  MOVLW  01
2EEC:  MOVWF  xC5
2EEE:  MOVLW  03
2EF0:  MOVWF  xC6
2EF2:  CALL   0796
....................       printf(lcd_putc,"    ADC=%2.0f",sensores(1)); 
2EF6:  MOVLW  01
2EF8:  MOVWF  xB8
2EFA:  CALL   0744
2EFE:  MOVFF  00,B3
2F02:  MOVFF  01,B4
2F06:  MOVFF  02,B5
2F0A:  MOVFF  03,B6
2F0E:  MOVLW  A8
2F10:  MOVWF  FF6
2F12:  MOVLW  05
2F14:  MOVWF  FF7
2F16:  MOVLW  08
2F18:  MOVWF  xB7
2F1A:  CALL   0C8A
2F1E:  MOVLW  01
2F20:  MOVWF  FE9
2F22:  MOVFF  B6,BA
2F26:  MOVFF  B5,B9
2F2A:  MOVFF  B4,B8
2F2E:  MOVFF  B3,B7
2F32:  CLRF   xBB
2F34:  CALL   135C
....................       lcd_gotoxy(1,4); 
2F38:  MOVLW  01
2F3A:  MOVWF  xC5
2F3C:  MOVLW  04
2F3E:  MOVWF  xC6
2F40:  CALL   0796
....................       printf(lcd_putc,"    ZF=%2.0f",G); 
2F44:  MOVLW  B6
2F46:  MOVWF  FF6
2F48:  MOVLW  05
2F4A:  MOVWF  FF7
2F4C:  MOVLW  07
2F4E:  MOVWF  xB7
2F50:  CALL   0C8A
2F54:  MOVLW  01
2F56:  MOVWF  FE9
2F58:  MOVFF  B2,BA
2F5C:  MOVFF  B1,B9
2F60:  MOVFF  B0,B8
2F64:  MOVFF  AF,B7
2F68:  CLRF   xBB
2F6A:  CALL   135C
....................      
....................       if(RIGHT)// Si oprime derecha 
2F6E:  BSF    F96.1
2F70:  BTFSS  F84.1
2F72:  BRA    3032
....................       {  if(Flanco1 == 0)  
2F74:  BTFSC  17.4
2F76:  BRA    3030
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2F78:  MOVLW  01
2F7A:  MOVWF  19
2F7C:  CLRF   33
2F7E:  MOVLW  02
2F80:  MOVWF  1D
2F82:  MOVWF  1F
2F84:  MOVLW  0B
2F86:  MOVWF  1C
2F88:  MOVLW  02
2F8A:  MOVWF  xB3
2F8C:  MOVLW  FA
2F8E:  MOVWF  xCA
2F90:  CALL   0626
2F94:  DECFSZ xB3,F
2F96:  BRA    2F8C
2F98:  MOVLW  0C
2F9A:  MOVWF  xC4
2F9C:  CALL   07F8
....................             G=sensores(1); 
2FA0:  MOVLW  01
2FA2:  MOVWF  xB8
2FA4:  CALL   0744
2FA8:  MOVFF  03,B2
2FAC:  MOVFF  02,B1
2FB0:  MOVFF  01,B0
2FB4:  MOVFF  00,AF
....................             G16=(int16)G; 
2FB8:  MOVFF  B2,CA
2FBC:  MOVFF  B1,C9
2FC0:  MOVFF  B0,C8
2FC4:  MOVFF  AF,C7
2FC8:  CALL   14E2
2FCC:  MOVFF  02,46
2FD0:  MOVFF  01,45
....................             G_l=G16; G_h=(G16>>8); 
2FD4:  MOVFF  45,26
2FD8:  MOVFF  46,27
....................              
....................             write_eeprom(60,G_l);write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
2FDC:  MOVLW  3C
2FDE:  MOVWF  FA9
2FE0:  MOVFF  26,FA8
2FE4:  BCF    FA6.6
2FE6:  BCF    FA6.7
2FE8:  BSF    FA6.2
2FEA:  MOVF   FF2,W
2FEC:  MOVWF  00
2FEE:  BCF    FF2.7
2FF0:  MOVLB  F
2FF2:  MOVLW  55
2FF4:  MOVWF  FA7
2FF6:  MOVLW  AA
2FF8:  MOVWF  FA7
2FFA:  BSF    FA6.1
2FFC:  BTFSC  FA6.1
2FFE:  BRA    2FFC
3000:  BCF    FA6.2
3002:  MOVF   00,W
3004:  IORWF  FF2,F
3006:  MOVLW  3D
3008:  MOVWF  FA9
300A:  MOVFF  27,FA8
300E:  BCF    FA6.6
3010:  BCF    FA6.7
3012:  BSF    FA6.2
3014:  MOVF   FF2,W
3016:  MOVWF  00
3018:  BCF    FF2.7
301A:  MOVLW  55
301C:  MOVWF  FA7
301E:  MOVLW  AA
3020:  MOVWF  FA7
3022:  BSF    FA6.1
3024:  BTFSC  FA6.1
3026:  BRA    3024
3028:  BCF    FA6.2
302A:  MOVF   00,W
302C:  IORWF  FF2,F
302E:  MOVLB  0
....................             }} 
....................          else 
3030:  BRA    3034
....................             {Flanco1 = 0;}    
3032:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
3034:  BSF    F96.2
3036:  BTFSS  F84.2
3038:  BRA    3060
....................       {  if(Flanco3 == 0)  
303A:  BTFSC  17.6
303C:  BRA    305E
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
303E:  MOVLW  01
3040:  MOVWF  19
3042:  CLRF   33
3044:  MOVLW  02
3046:  MOVWF  1D
3048:  MOVWF  1F
304A:  MOVLW  0B
304C:  MOVWF  1C
304E:  MOVLW  1E
3050:  MOVWF  xCA
3052:  CALL   0626
3056:  MOVLW  0C
3058:  MOVWF  xC4
305A:  CALL   07F8
....................          else 
305E:  BRA    3062
....................             {Flanco3 = 0;}   
3060:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
3062:  MOVF   19,W
3064:  SUBLW  64
3066:  BTFSS  FD8.2
3068:  BRA    3496
....................     
....................    lcd_gotoxy(1,1); 
306A:  MOVLW  01
306C:  MOVWF  xC5
306E:  MOVWF  xC6
3070:  CALL   0796
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
3074:  MOVFF  A6,CA
3078:  MOVFF  A5,C9
307C:  MOVFF  A4,C8
3080:  MOVFF  A3,C7
3084:  MOVLW  D7
3086:  MOVWF  xCE
3088:  MOVLW  A3
308A:  MOVWF  xCD
308C:  CLRF   xCC
308E:  MOVLW  81
3090:  MOVWF  xCB
3092:  CALL   11B0
3096:  MOVFF  00,B3
309A:  MOVFF  01,B4
309E:  MOVFF  02,B5
30A2:  MOVFF  03,B6
30A6:  MOVLW  C4
30A8:  MOVWF  FF6
30AA:  MOVLW  05
30AC:  MOVWF  FF7
30AE:  MOVLW  08
30B0:  MOVWF  xB7
30B2:  CALL   0C8A
30B6:  MOVLW  02
30B8:  MOVWF  FE9
30BA:  MOVFF  B6,BA
30BE:  MOVFF  B5,B9
30C2:  MOVFF  B4,B8
30C6:  MOVFF  B3,B7
30CA:  MOVWF  xBB
30CC:  CALL   135C
30D0:  MOVLW  D1
30D2:  MOVWF  FF6
30D4:  MOVLW  05
30D6:  MOVWF  FF7
30D8:  MOVLW  07
30DA:  MOVWF  xB7
30DC:  CALL   0C8A
....................    lcd_gotoxy(1,2); 
30E0:  MOVLW  01
30E2:  MOVWF  xC5
30E4:  MOVLW  02
30E6:  MOVWF  xC6
30E8:  CALL   0796
....................    printf(lcd_putc,"Filtro:"); 
30EC:  MOVLW  DA
30EE:  MOVWF  FF6
30F0:  MOVLW  05
30F2:  MOVWF  FF7
30F4:  CALL   0856
....................     
....................    if(Lectura==1) 
30F8:  BTFSS  18.0
30FA:  BRA    3116
....................    { 
....................       Lectura=0; 
30FC:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
30FE:  MOVLW  05
3100:  MOVWF  xB3
3102:  CALL   1016
3106:  MOVFF  03,A6
310A:  MOVFF  02,A5
310E:  MOVFF  01,A4
3112:  MOVFF  00,A3
....................    } 
....................     
....................    lcd_gotoxy(10,3); 
3116:  MOVLW  0A
3118:  MOVWF  xC5
311A:  MOVLW  03
311C:  MOVWF  xC6
311E:  CALL   0796
....................    printf(lcd_putc,"Tempo:%02u:%02u",tempo_minutos,tempo_segundos); 
3122:  MOVLW  E2
3124:  MOVWF  FF6
3126:  MOVLW  05
3128:  MOVWF  FF7
312A:  MOVLW  06
312C:  MOVWF  xB7
312E:  CALL   0C8A
3132:  MOVFF  28,B3
3136:  MOVLW  01
3138:  MOVWF  xB4
313A:  CALL   0E1A
313E:  MOVLW  3A
3140:  MOVWF  xC4
3142:  CALL   07F8
3146:  MOVFF  29,B3
314A:  MOVLW  01
314C:  MOVWF  xB4
314E:  CALL   0E1A
....................     
....................    if(estadomv==1) 
3152:  BTFSS  17.2
3154:  BRA    3190
....................    { 
....................       lcd_gotoxy(1,4); 
3156:  MOVLW  01
3158:  MOVWF  xC5
315A:  MOVLW  04
315C:  MOVWF  xC6
315E:  CALL   0796
....................       printf(lcd_putc,"Motor:ON "); 
3162:  MOVLW  F2
3164:  MOVWF  FF6
3166:  MOVLW  05
3168:  MOVWF  FF7
316A:  CALL   0856
....................       velocidades(read_eeprom(5)); 
316E:  MOVFF  FF2,B3
3172:  BCF    FF2.7
3174:  MOVLW  05
3176:  MOVWF  FA9
3178:  BCF    FA6.6
317A:  BCF    FA6.7
317C:  BSF    FA6.0
317E:  MOVF   FA8,W
3180:  BTFSC  xB3.7
3182:  BSF    FF2.7
3184:  MOVWF  xB4
3186:  MOVFF  B4,B5
318A:  CALL   0E80
....................    } 
....................    else 
318E:  BRA    31B6
....................    { 
....................       lcd_gotoxy(1,4); 
3190:  MOVLW  01
3192:  MOVWF  xC5
3194:  MOVLW  04
3196:  MOVWF  xC6
3198:  CALL   0796
....................       printf(lcd_putc,"Motor:OFF"); 
319C:  MOVLW  FC
319E:  MOVWF  FF6
31A0:  MOVLW  05
31A2:  MOVWF  FF7
31A4:  CALL   0856
....................       velocidades(0);  
31A8:  CLRF   xB5
31AA:  CALL   0E80
....................       CaidaPresion=0; 
31AE:  CLRF   xA6
31B0:  CLRF   xA5
31B2:  CLRF   xA4
31B4:  CLRF   xA3
....................    } 
....................     
....................    if(estadouv==1) 
31B6:  BTFSS  17.0
31B8:  BRA    320E
....................    { 
....................       lcd_gotoxy(13,4); 
31BA:  MOVLW  0D
31BC:  MOVWF  xC5
31BE:  MOVLW  04
31C0:  MOVWF  xC6
31C2:  CALL   0796
....................       printf(lcd_putc,"UV:ON "); 
31C6:  MOVLW  06
31C8:  MOVWF  FF6
31CA:  MOVLW  06
31CC:  MOVWF  FF7
31CE:  CALL   0856
....................       estadomv=0; 
31D2:  BCF    17.2
....................       velocidades(0); 
31D4:  CLRF   xB5
31D6:  CALL   0E80
....................       estadofl=0; 
31DA:  BCF    17.1
....................       Luz_Blanca_off; 
31DC:  BCF    F8C.1
31DE:  BCF    F95.1
....................       Luz_UV_on; 
31E0:  BSF    F8C.0
31E2:  BCF    F95.0
....................       tiempo_cumplido=0; 
31E4:  BCF    17.7
....................       if(flaguv==0) 
31E6:  BTFSC  18.1
31E8:  BRA    320C
....................       { 
....................          delay_ms(500);delay_ms(50);lcd_init();flaguv=1;guardaruv=1; 
31EA:  MOVLW  02
31EC:  MOVWF  xB3
31EE:  MOVLW  FA
31F0:  MOVWF  xCA
31F2:  CALL   0626
31F6:  DECFSZ xB3,F
31F8:  BRA    31EE
31FA:  MOVLW  32
31FC:  MOVWF  xCA
31FE:  CALL   0626
3202:  CALL   06B8
3206:  BSF    18.1
3208:  MOVLW  01
320A:  MOVWF  31
....................       } 
....................    } 
....................    else 
320C:  BRA    3252
....................    { 
....................       estadouv=0; 
320E:  BCF    17.0
....................       lcd_gotoxy(13,4); 
3210:  MOVLW  0D
3212:  MOVWF  xC5
3214:  MOVLW  04
3216:  MOVWF  xC6
3218:  CALL   0796
....................       printf(lcd_putc,"UV:OFF"); 
321C:  MOVLW  0E
321E:  MOVWF  FF6
3220:  MOVLW  06
3222:  MOVWF  FF7
3224:  CALL   0856
....................       Luz_UV_off; 
3228:  BCF    F8C.0
322A:  BCF    F95.0
....................       if(flaguv==1) 
322C:  BTFSS  18.1
322E:  BRA    3252
....................       { 
....................          delay_ms(500);delay_ms(50);lcd_init();flaguv=0;guardaruv=1; 
3230:  MOVLW  02
3232:  MOVWF  xB3
3234:  MOVLW  FA
3236:  MOVWF  xCA
3238:  CALL   0626
323C:  DECFSZ xB3,F
323E:  BRA    3234
3240:  MOVLW  32
3242:  MOVWF  xCA
3244:  CALL   0626
3248:  CALL   06B8
324C:  BCF    18.1
324E:  MOVLW  01
3250:  MOVWF  31
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
3252:  BTFSS  17.1
3254:  BRA    3286
....................    { 
....................       lcd_gotoxy(1,3); 
3256:  MOVLW  01
3258:  MOVWF  xC5
325A:  MOVLW  03
325C:  MOVWF  xC6
325E:  CALL   0796
....................       printf(lcd_putc,"Luz:ON "); 
3262:  MOVLW  16
3264:  MOVWF  FF6
3266:  MOVLW  06
3268:  MOVWF  FF7
326A:  CALL   0856
....................       Luz_Blanca_on; 
326E:  BSF    F8C.1
3270:  BCF    F95.1
....................       if(flagfl==0) 
3272:  BTFSC  18.2
3274:  BRA    3284
....................       { 
....................          delay_ms(50);lcd_init();flagfl=1; 
3276:  MOVLW  32
3278:  MOVWF  xCA
327A:  CALL   0626
327E:  CALL   06B8
3282:  BSF    18.2
....................       } 
....................    } 
....................    else 
3284:  BRA    32B4
....................    { 
....................       lcd_gotoxy(1,3); 
3286:  MOVLW  01
3288:  MOVWF  xC5
328A:  MOVLW  03
328C:  MOVWF  xC6
328E:  CALL   0796
....................       printf(lcd_putc,"Luz:OFF"); 
3292:  MOVLW  1E
3294:  MOVWF  FF6
3296:  MOVLW  06
3298:  MOVWF  FF7
329A:  CALL   0856
....................       Luz_Blanca_off; 
329E:  BCF    F8C.1
32A0:  BCF    F95.1
....................       if(flagfl==1) 
32A2:  BTFSS  18.2
32A4:  BRA    32B4
....................       { 
....................          delay_ms(50);lcd_init();flagfl=0; 
32A6:  MOVLW  32
32A8:  MOVWF  xCA
32AA:  CALL   0626
32AE:  CALL   06B8
32B2:  BCF    18.2
....................       } 
....................    } 
....................     
....................     Saturacion=(CaidaPresion/0.37)*11; 
32B4:  MOVFF  A6,CA
32B8:  MOVFF  A5,C9
32BC:  MOVFF  A4,C8
32C0:  MOVFF  A3,C7
32C4:  MOVLW  A4
32C6:  MOVWF  xCE
32C8:  MOVLW  70
32CA:  MOVWF  xCD
32CC:  MOVLW  3D
32CE:  MOVWF  xCC
32D0:  MOVLW  7D
32D2:  MOVWF  xCB
32D4:  CALL   0876
32D8:  MOVFF  00,B3
32DC:  MOVFF  01,B4
32E0:  MOVFF  02,B5
32E4:  MOVFF  03,B6
32E8:  MOVFF  03,CA
32EC:  MOVFF  02,C9
32F0:  MOVFF  01,C8
32F4:  MOVFF  00,C7
32F8:  CLRF   xCE
32FA:  CLRF   xCD
32FC:  MOVLW  30
32FE:  MOVWF  xCC
3300:  MOVLW  82
3302:  MOVWF  xCB
3304:  CALL   11B0
3308:  MOVFF  03,A2
330C:  MOVFF  02,A1
3310:  MOVFF  01,A0
3314:  MOVFF  00,9F
....................    if(Saturacion>11) 
3318:  CLRF   xCA
331A:  CLRF   xC9
331C:  MOVLW  30
331E:  MOVWF  xC8
3320:  MOVLW  82
3322:  MOVWF  xC7
3324:  MOVFF  A2,CE
3328:  MOVFF  A1,CD
332C:  MOVFF  A0,CC
3330:  MOVFF  9F,CB
3334:  CALL   0FA0
3338:  BNC   3346
....................    { 
....................       Saturacion=11; 
333A:  CLRF   xA2
333C:  CLRF   xA1
333E:  MOVLW  30
3340:  MOVWF  xA0
3342:  MOVLW  82
3344:  MOVWF  x9F
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
3346:  CLRF   2E
3348:  MOVFF  A2,B6
334C:  MOVFF  A1,B5
3350:  MOVFF  A0,B4
3354:  MOVFF  9F,B3
3358:  CALL   184C
335C:  MOVFF  00,B3
3360:  MOVFF  01,B4
3364:  MOVFF  02,B5
3368:  MOVFF  03,B6
336C:  CLRF   xCC
336E:  MOVFF  2E,CB
3372:  CALL   070E
3376:  MOVFF  03,CA
337A:  MOVFF  02,C9
337E:  MOVFF  01,C8
3382:  MOVFF  00,C7
3386:  MOVFF  B6,CE
338A:  MOVFF  B5,CD
338E:  MOVFF  B4,CC
3392:  MOVFF  B3,CB
3396:  CALL   0FA0
339A:  BNC   33B8
....................    { 
....................       lcd_gotoxy(i+8,2); 
339C:  MOVLW  08
339E:  ADDWF  2E,W
33A0:  MOVWF  xB3
33A2:  MOVWF  xC5
33A4:  MOVLW  02
33A6:  MOVWF  xC6
33A8:  CALL   0796
....................       printf(lcd_putc,"Ñ"); 
33AC:  MOVLW  D1
33AE:  MOVWF  xC4
33B0:  CALL   07F8
....................    } 
33B4:  INCF   2E,F
33B6:  BRA    3348
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
33B8:  MOVFF  A2,B6
33BC:  MOVFF  A1,B5
33C0:  MOVFF  A0,B4
33C4:  MOVFF  9F,B3
33C8:  CALL   184C
33CC:  MOVFF  03,CA
33D0:  MOVFF  02,C9
33D4:  MOVFF  01,C8
33D8:  MOVFF  00,C7
33DC:  CALL   14E2
33E0:  MOVFF  01,2E
33E4:  MOVF   2E,W
33E6:  SUBLW  0A
33E8:  BNC   3406
....................    { 
....................       lcd_gotoxy(i+8,2); 
33EA:  MOVLW  08
33EC:  ADDWF  2E,W
33EE:  MOVWF  xB3
33F0:  MOVWF  xC5
33F2:  MOVLW  02
33F4:  MOVWF  xC6
33F6:  CALL   0796
....................       printf(lcd_putc," "); 
33FA:  MOVLW  20
33FC:  MOVWF  xC4
33FE:  CALL   07F8
....................    } 
3402:  INCF   2E,F
3404:  BRA    33E4
....................     
....................    if(DOWN)//Si oprime hacia arriba 
3406:  BSF    F96.0
3408:  BTFSS  F84.0
340A:  BRA    3426
....................    { 
....................       if(Flanco == 0) 
340C:  BTFSC  17.3
340E:  BRA    3424
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
3410:  BTG    17.1
3412:  BSF    17.3
3414:  MOVLW  02
3416:  MOVWF  xB3
3418:  MOVLW  96
341A:  MOVWF  xCA
341C:  CALL   0626
3420:  DECFSZ xB3,F
3422:  BRA    3418
....................       } 
....................    } 
....................    else 
3424:  BRA    3428
....................    { 
....................       Flanco = 0; 
3426:  BCF    17.3
....................    } 
....................     
....................    if(LEFT)//Si oprime hacia abajo 
3428:  BSF    F96.2
342A:  BTFSS  F84.2
342C:  BRA    3448
....................    { 
....................       if(Flanco1 == 0) 
342E:  BTFSC  17.4
3430:  BRA    3446
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
3432:  BTG    17.2
3434:  BSF    17.4
3436:  MOVLW  02
3438:  MOVWF  xB3
343A:  MOVLW  96
343C:  MOVWF  xCA
343E:  CALL   0626
3442:  DECFSZ xB3,F
3444:  BRA    343A
....................       } 
....................    } 
....................    else 
3446:  BRA    344A
....................    { 
....................       Flanco1 = 0; 
3448:  BCF    17.4
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
344A:  BSF    F92.5
344C:  BTFSS  F80.5
344E:  BRA    3474
....................    { 
....................       printf(lcd_putc,"\f");delay_ms(300);Menu=1; paso=0;Flecha=2;Flecha2=2;    
3450:  MOVLW  0C
3452:  MOVWF  xC4
3454:  CALL   07F8
3458:  MOVLW  02
345A:  MOVWF  xB3
345C:  MOVLW  96
345E:  MOVWF  xCA
3460:  CALL   0626
3464:  DECFSZ xB3,F
3466:  BRA    345C
3468:  MOVLW  01
346A:  MOVWF  19
346C:  CLRF   33
346E:  MOVLW  02
3470:  MOVWF  1D
3472:  MOVWF  1F
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia izquierda 
3474:  BSF    F96.1
3476:  BTFSS  F84.1
3478:  BRA    3494
....................    { 
....................       if(Flanco2 == 0) 
347A:  BTFSC  17.5
347C:  BRA    3492
....................       { 
....................          estadouv=!estadouv;Flanco2 = 1;delay_ms(300); 
347E:  BTG    17.0
3480:  BSF    17.5
3482:  MOVLW  02
3484:  MOVWF  xB3
3486:  MOVLW  96
3488:  MOVWF  xCA
348A:  CALL   0626
348E:  DECFSZ xB3,F
3490:  BRA    3486
....................       } 
....................    } 
....................    else 
3492:  BRA    3496
....................    { 
....................       Flanco2 = 0; 
3494:  BCF    17.5
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................    if(guardaruv==1) 
3496:  DECFSZ 31,W
3498:  BRA    3548
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
349A:  MOVLW  32
349C:  MOVWF  FA9
349E:  MOVFF  22,FA8
34A2:  BCF    FA6.6
34A4:  BCF    FA6.7
34A6:  BSF    FA6.2
34A8:  MOVF   FF2,W
34AA:  MOVWF  00
34AC:  BCF    FF2.7
34AE:  MOVLB  F
34B0:  MOVLW  55
34B2:  MOVWF  FA7
34B4:  MOVLW  AA
34B6:  MOVWF  FA7
34B8:  BSF    FA6.1
34BA:  BTFSC  FA6.1
34BC:  BRA    34BA
34BE:  BCF    FA6.2
34C0:  MOVF   00,W
34C2:  IORWF  FF2,F
34C4:  MOVLW  33
34C6:  MOVWF  FA9
34C8:  MOVFF  23,FA8
34CC:  BCF    FA6.6
34CE:  BCF    FA6.7
34D0:  BSF    FA6.2
34D2:  MOVF   FF2,W
34D4:  MOVWF  00
34D6:  BCF    FF2.7
34D8:  MOVLW  55
34DA:  MOVWF  FA7
34DC:  MOVLW  AA
34DE:  MOVWF  FA7
34E0:  BSF    FA6.1
34E2:  BTFSC  FA6.1
34E4:  BRA    34E2
34E6:  BCF    FA6.2
34E8:  MOVF   00,W
34EA:  IORWF  FF2,F
....................       horasL=(int8)horas; 
34EC:  MOVFF  43,24
....................       horasH=(int8)(horas>>8); 
34F0:  MOVF   44,W
34F2:  MOVWF  25
....................       write_eeprom(52,horasL); 
34F4:  MOVLW  34
34F6:  MOVWF  FA9
34F8:  MOVFF  24,FA8
34FC:  BCF    FA6.6
34FE:  BCF    FA6.7
3500:  BSF    FA6.2
3502:  MOVFF  FF2,00
3506:  BCF    FF2.7
3508:  MOVLW  55
350A:  MOVWF  FA7
350C:  MOVLW  AA
350E:  MOVWF  FA7
3510:  BSF    FA6.1
3512:  BTFSC  FA6.1
3514:  BRA    3512
3516:  BCF    FA6.2
3518:  MOVF   00,W
351A:  IORWF  FF2,F
....................       write_eeprom(53,horasH); 
351C:  MOVLW  35
351E:  MOVWF  FA9
3520:  MOVFF  25,FA8
3524:  BCF    FA6.6
3526:  BCF    FA6.7
3528:  BSF    FA6.2
352A:  MOVFF  FF2,00
352E:  BCF    FF2.7
3530:  MOVLW  55
3532:  MOVWF  FA7
3534:  MOVLW  AA
3536:  MOVWF  FA7
3538:  BSF    FA6.1
353A:  BTFSC  FA6.1
353C:  BRA    353A
353E:  BCF    FA6.2
3540:  MOVF   00,W
3542:  IORWF  FF2,F
....................       guardaruv=0; 
3544:  CLRF   31
3546:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
3548:  MOVF   30,W
354A:  SUBLW  13
354C:  BC    3554
....................    { 
....................       lcd_init(); 
354E:  CALL   06B8
....................       tiemporeset=0; 
3552:  CLRF   30
....................    }    
....................     
....................    if(segundos>=60) 
3554:  MOVF   22,W
3556:  SUBLW  3B
3558:  BC    355E
....................    { 
....................       segundos=0;minutos++; 
355A:  CLRF   22
355C:  INCF   23,F
....................    } 
....................    if(minutos==60) 
355E:  MOVF   23,W
3560:  SUBLW  3C
3562:  BNZ   356C
....................    { 
....................       minutos=0;horas++; 
3564:  CLRF   23
3566:  INCF   43,F
3568:  BTFSC  FD8.2
356A:  INCF   44,F
....................    } 
....................     
....................    } 
356C:  GOTO   1CD6
.................... } 
....................  
3570:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
