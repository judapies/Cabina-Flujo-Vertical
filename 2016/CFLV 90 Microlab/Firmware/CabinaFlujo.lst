CCS PCH C Compiler, Version 4.104, 5967               22-may.-18 14:56

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Vertical\2016\CFLV 90 Microlab\Firmware\CabinaFlujo.lst

               ROM used: 13676 bytes (42%)
                         Largest free fragment is 19088
               RAM used: 183 (9%) at main() level
                         220 (11%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1860
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... //#fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=4000000) 
*
0626:  CLRF   FEA
0628:  MOVLW  CA
062A:  MOVWF  FE9
062C:  MOVF   FEF,W
062E:  BZ    064C
0630:  MOVLW  01
0632:  MOVWF  01
0634:  CLRF   00
0636:  DECFSZ 00,F
0638:  BRA    0636
063A:  DECFSZ 01,F
063C:  BRA    0634
063E:  MOVLW  4A
0640:  MOVWF  00
0642:  DECFSZ 00,F
0644:  BRA    0642
0646:  BRA    0648
0648:  DECFSZ FEF,F
064A:  BRA    0630
064C:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
064E:  SWAPF  xCB,W
0650:  ANDLW  F0
0652:  MOVWF  00
0654:  MOVLW  0F
0656:  ANDWF  F81,W
0658:  IORWF  00,W
065A:  MOVWF  F81
....................       delay_cycles(30); 
065C:  MOVLW  09
065E:  MOVWF  00
0660:  DECFSZ 00,F
0662:  BRA    0660
0664:  BRA    0666
....................       lcd.enable = 1; 
0666:  BSF    F81.3
....................       delay_us(55); 
0668:  MOVLW  12
066A:  MOVWF  00
066C:  DECFSZ 00,F
066E:  BRA    066C
....................       lcd.enable = 0; 
0670:  BCF    F81.3
.................... } 
0672:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0674:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
0676:  MOVLW  01
0678:  MOVWF  xCA
067A:  RCALL  0626
....................       lcd.rs = address; 
067C:  BTFSS  xC8.0
067E:  BCF    F81.1
0680:  BTFSC  xC8.0
0682:  BSF    F81.1
....................       delay_cycles(30); 
0684:  MOVLW  09
0686:  MOVWF  00
0688:  DECFSZ 00,F
068A:  BRA    0688
068C:  BRA    068E
....................       lcd.rw = 0; 
068E:  BCF    F81.2
....................       delay_cycles(30); 
0690:  MOVLW  09
0692:  MOVWF  00
0694:  DECFSZ 00,F
0696:  BRA    0694
0698:  BRA    069A
....................       lcd.enable = 0; 
069A:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
069C:  SWAPF  xC9,W
069E:  MOVWF  xCA
06A0:  MOVLW  0F
06A2:  ANDWF  xCA,F
06A4:  MOVFF  CA,CB
06A8:  RCALL  064E
....................       lcd_send_nibble(n & 0xf); 
06AA:  MOVF   xC9,W
06AC:  ANDLW  0F
06AE:  MOVWF  xCA
06B0:  MOVWF  xCB
06B2:  RCALL  064E
.................... } 
06B4:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
06B6:  MOVLW  00
06B8:  MOVWF  F93
....................     lcd.rs = 0; 
06BA:  BCF    F81.1
....................     lcd.rw = 0; 
06BC:  BCF    F81.2
....................     lcd.enable = 0; 
06BE:  BCF    F81.3
....................     delay_ms(15); 
06C0:  MOVLW  0F
06C2:  MOVWF  xCA
06C4:  RCALL  0626
....................     for(i=1;i<=3;++i) { 
06C6:  MOVLW  01
06C8:  MOVWF  xB3
06CA:  MOVF   xB3,W
06CC:  SUBLW  03
06CE:  BNC   06E0
....................        lcd_send_nibble(3); 
06D0:  MOVLW  03
06D2:  MOVWF  xCB
06D4:  RCALL  064E
....................        delay_ms(5); 
06D6:  MOVLW  05
06D8:  MOVWF  xCA
06DA:  RCALL  0626
....................     } 
06DC:  INCF   xB3,F
06DE:  BRA    06CA
....................     lcd_send_nibble(2); 
06E0:  MOVLW  02
06E2:  MOVWF  xCB
06E4:  RCALL  064E
....................     for(i=0;i<=3;++i) 
06E6:  CLRF   xB3
06E8:  MOVF   xB3,W
06EA:  SUBLW  03
06EC:  BNC   070A
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
06EE:  CLRF   03
06F0:  MOVF   xB3,W
06F2:  MOVFF  FF2,B4
06F6:  BCF    FF2.7
06F8:  RCALL  0096
06FA:  BTFSC  xB4.7
06FC:  BSF    FF2.7
06FE:  MOVWF  xB4
0700:  CLRF   xC8
0702:  MOVWF  xC9
0704:  RCALL  0674
0706:  INCF   xB3,F
0708:  BRA    06E8
.................... } 
070A:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
0794:  MOVLW  01
0796:  SUBWF  xC6,W
0798:  ADDLW  FC
079A:  BC    07BA
079C:  ADDLW  04
079E:  GOTO   07CA
....................      case 1 : address=0x80;break; 
07A2:  MOVLW  80
07A4:  MOVWF  xC7
07A6:  BRA    07BA
....................      case 2 : address=0xc0;break; 
07A8:  MOVLW  C0
07AA:  MOVWF  xC7
07AC:  BRA    07BA
....................      case 3 : address=0x94;break; 
07AE:  MOVLW  94
07B0:  MOVWF  xC7
07B2:  BRA    07BA
....................      case 4 : address=0xd4;break; 
07B4:  MOVLW  D4
07B6:  MOVWF  xC7
07B8:  BRA    07BA
....................    } 
....................    address+=x-1; 
07BA:  MOVLW  01
07BC:  SUBWF  xC5,W
07BE:  ADDWF  xC7,F
....................    lcd_send_byte(0,address); 
07C0:  CLRF   xC8
07C2:  MOVFF  C7,C9
07C6:  RCALL  0674
.................... } 
07C8:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
07F6:  MOVF   xC4,W
07F8:  SUBLW  F1
07FA:  BNZ   0800
....................    { 
....................       c=238; 
07FC:  MOVLW  EE
07FE:  MOVWF  xC4
....................    } 
....................    if(c=='Ñ') 
0800:  MOVF   xC4,W
0802:  SUBLW  D1
0804:  BNZ   080A
....................    { 
....................       c=255; 
0806:  MOVLW  FF
0808:  MOVWF  xC4
....................    } 
....................     
....................    switch (c) { 
080A:  MOVF   xC4,W
080C:  XORLW  0C
080E:  BZ    081A
0810:  XORLW  06
0812:  BZ    082E
0814:  XORLW  02
0816:  BZ    083C
0818:  BRA    0846
....................      case '\f'   : lcd_send_byte(0,1); 
081A:  CLRF   xC8
081C:  MOVLW  01
081E:  MOVWF  xC9
0820:  RCALL  0674
....................                    lcdline=1; 
0822:  MOVLW  01
0824:  MOVWF  16
....................                    delay_ms(2); 
0826:  MOVLW  02
0828:  MOVWF  xCA
082A:  RCALL  0626
....................                                            break; 
082C:  BRA    0852
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
082E:  INCF   16,F
0830:  MOVLW  01
0832:  MOVWF  xC5
0834:  MOVFF  16,C6
0838:  RCALL  0794
083A:  BRA    0852
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
083C:  CLRF   xC8
083E:  MOVLW  10
0840:  MOVWF  xC9
0842:  RCALL  0674
0844:  BRA    0852
....................      default     : lcd_send_byte(1,c);     break; 
0846:  MOVLW  01
0848:  MOVWF  xC8
084A:  MOVFF  C4,C9
084E:  RCALL  0674
0850:  BRA    0852
....................    } 
.................... } 
0852:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1518:  BCF    xC6.0
....................    y = x; 
151A:  MOVFF  BA,BF
151E:  MOVFF  B9,BE
1522:  MOVFF  B8,BD
1526:  MOVFF  B7,BC
....................  
....................    if (x < 0) 
152A:  MOVFF  BA,CA
152E:  MOVFF  B9,C9
1532:  MOVFF  B8,C8
1536:  MOVFF  B7,C7
153A:  CLRF   xCE
153C:  CLRF   xCD
153E:  CLRF   xCC
1540:  CLRF   xCB
1542:  RCALL  0F9E
1544:  BNC   154E
....................    { 
....................       s = 1; 
1546:  BSF    xC6.0
....................       y = -y; 
1548:  MOVF   xBD,W
154A:  XORLW  80
154C:  MOVWF  xBD
....................    } 
....................  
....................    if (y <= 32768.0) 
154E:  MOVFF  BF,CA
1552:  MOVFF  BE,C9
1556:  MOVFF  BD,C8
155A:  MOVFF  BC,C7
155E:  CLRF   xCE
1560:  CLRF   xCD
1562:  CLRF   xCC
1564:  MOVLW  8E
1566:  MOVWF  xCB
1568:  RCALL  0F9E
156A:  BC    156E
156C:  BNZ   159E
....................   res = (float32)(unsigned int16)y; 
156E:  MOVFF  BF,CA
1572:  MOVFF  BE,C9
1576:  MOVFF  BD,C8
157A:  MOVFF  BC,C7
157E:  RCALL  14E0
1580:  MOVFF  02,CC
1584:  MOVFF  01,CB
1588:  CALL   070C
158C:  MOVFF  03,C3
1590:  MOVFF  02,C2
1594:  MOVFF  01,C1
1598:  MOVFF  00,C0
....................  
....................  else if (y < 10000000.0) 
159C:  BRA    1726
159E:  MOVFF  BF,CA
15A2:  MOVFF  BE,C9
15A6:  MOVFF  BD,C8
15AA:  MOVFF  BC,C7
15AE:  MOVLW  80
15B0:  MOVWF  xCE
15B2:  MOVLW  96
15B4:  MOVWF  xCD
15B6:  MOVLW  18
15B8:  MOVWF  xCC
15BA:  MOVLW  96
15BC:  MOVWF  xCB
15BE:  RCALL  0F9E
15C0:  BTFSS  FD8.0
15C2:  BRA    1716
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
15C4:  MOVFF  BF,CA
15C8:  MOVFF  BE,C9
15CC:  MOVFF  BD,C8
15D0:  MOVFF  BC,C7
15D4:  CLRF   xCE
15D6:  CLRF   xCD
15D8:  CLRF   xCC
15DA:  MOVLW  8E
15DC:  MOVWF  xCB
15DE:  CALL   0874
15E2:  MOVFF  03,CA
15E6:  MOVFF  02,C9
15EA:  MOVFF  01,C8
15EE:  MOVFF  00,C7
15F2:  RCALL  14E0
15F4:  MOVFF  02,C5
15F8:  MOVFF  01,C4
....................       y = 32768.0*(y/32768.0 - (float32)l); 
15FC:  MOVFF  BF,CA
1600:  MOVFF  BE,C9
1604:  MOVFF  BD,C8
1608:  MOVFF  BC,C7
160C:  CLRF   xCE
160E:  CLRF   xCD
1610:  CLRF   xCC
1612:  MOVLW  8E
1614:  MOVWF  xCB
1616:  CALL   0874
161A:  MOVFF  00,C7
161E:  MOVFF  01,C8
1622:  MOVFF  02,C9
1626:  MOVFF  03,CA
162A:  MOVFF  C5,CC
162E:  MOVFF  C4,CB
1632:  CALL   070C
1636:  BSF    FD8.1
1638:  MOVFF  CA,CE
163C:  MOVFF  C9,CD
1640:  MOVFF  C8,CC
1644:  MOVFF  C7,CB
1648:  MOVFF  03,D2
164C:  MOVFF  02,D1
1650:  MOVFF  01,D0
1654:  MOVFF  00,CF
1658:  CALL   09CE
165C:  CLRF   xCA
165E:  CLRF   xC9
1660:  CLRF   xC8
1662:  MOVLW  8E
1664:  MOVWF  xC7
1666:  MOVFF  03,CE
166A:  MOVFF  02,CD
166E:  MOVFF  01,CC
1672:  MOVFF  00,CB
1676:  RCALL  11AE
1678:  MOVFF  03,BF
167C:  MOVFF  02,BE
1680:  MOVFF  01,BD
1684:  MOVFF  00,BC
....................   res = 32768.0*(float32)l; 
1688:  MOVFF  C5,CC
168C:  MOVFF  C4,CB
1690:  CALL   070C
1694:  CLRF   xCA
1696:  CLRF   xC9
1698:  CLRF   xC8
169A:  MOVLW  8E
169C:  MOVWF  xC7
169E:  MOVFF  03,CE
16A2:  MOVFF  02,CD
16A6:  MOVFF  01,CC
16AA:  MOVFF  00,CB
16AE:  RCALL  11AE
16B0:  MOVFF  03,C3
16B4:  MOVFF  02,C2
16B8:  MOVFF  01,C1
16BC:  MOVFF  00,C0
....................   res += (float32)(unsigned int16)y; 
16C0:  MOVFF  BF,CA
16C4:  MOVFF  BE,C9
16C8:  MOVFF  BD,C8
16CC:  MOVFF  BC,C7
16D0:  RCALL  14E0
16D2:  MOVFF  02,CC
16D6:  MOVFF  01,CB
16DA:  CALL   070C
16DE:  BCF    FD8.1
16E0:  MOVFF  C3,CE
16E4:  MOVFF  C2,CD
16E8:  MOVFF  C1,CC
16EC:  MOVFF  C0,CB
16F0:  MOVFF  03,D2
16F4:  MOVFF  02,D1
16F8:  MOVFF  01,D0
16FC:  MOVFF  00,CF
1700:  CALL   09CE
1704:  MOVFF  03,C3
1708:  MOVFF  02,C2
170C:  MOVFF  01,C1
1710:  MOVFF  00,C0
....................  } 
....................  
....................  else 
1714:  BRA    1726
....................   res = y; 
1716:  MOVFF  BF,C3
171A:  MOVFF  BE,C2
171E:  MOVFF  BD,C1
1722:  MOVFF  BC,C0
....................  
....................  y = y - (float32)(unsigned int16)y; 
1726:  MOVFF  BF,CA
172A:  MOVFF  BE,C9
172E:  MOVFF  BD,C8
1732:  MOVFF  BC,C7
1736:  RCALL  14E0
1738:  MOVFF  02,CC
173C:  MOVFF  01,CB
1740:  CALL   070C
1744:  BSF    FD8.1
1746:  MOVFF  BF,CE
174A:  MOVFF  BE,CD
174E:  MOVFF  BD,CC
1752:  MOVFF  BC,CB
1756:  MOVFF  03,D2
175A:  MOVFF  02,D1
175E:  MOVFF  01,D0
1762:  MOVFF  00,CF
1766:  CALL   09CE
176A:  MOVFF  03,BF
176E:  MOVFF  02,BE
1772:  MOVFF  01,BD
1776:  MOVFF  00,BC
....................  
....................  if (s) 
177A:  BTFSS  xC6.0
177C:  BRA    1784
....................   res = -res; 
177E:  MOVF   xC1,W
1780:  XORLW  80
1782:  MOVWF  xC1
....................  
....................  if (y != 0) 
1784:  MOVFF  BF,CA
1788:  MOVFF  BE,C9
178C:  MOVFF  BD,C8
1790:  MOVFF  BC,C7
1794:  CLRF   xCE
1796:  CLRF   xCD
1798:  CLRF   xCC
179A:  CLRF   xCB
179C:  RCALL  0F9E
179E:  BZ    1810
....................  { 
....................   if (s == 1 && n == 0) 
17A0:  BTFSS  xC6.0
17A2:  BRA    17D8
17A4:  MOVF   xBB,F
17A6:  BNZ   17D8
....................    res -= 1.0; 
17A8:  BSF    FD8.1
17AA:  MOVFF  C3,CE
17AE:  MOVFF  C2,CD
17B2:  MOVFF  C1,CC
17B6:  MOVFF  C0,CB
17BA:  CLRF   xD2
17BC:  CLRF   xD1
17BE:  CLRF   xD0
17C0:  MOVLW  7F
17C2:  MOVWF  xCF
17C4:  CALL   09CE
17C8:  MOVFF  03,C3
17CC:  MOVFF  02,C2
17D0:  MOVFF  01,C1
17D4:  MOVFF  00,C0
....................  
....................   if (s == 0 && n == 1) 
17D8:  BTFSC  xC6.0
17DA:  BRA    1810
17DC:  DECFSZ xBB,W
17DE:  BRA    1810
....................    res += 1.0; 
17E0:  BCF    FD8.1
17E2:  MOVFF  C3,CE
17E6:  MOVFF  C2,CD
17EA:  MOVFF  C1,CC
17EE:  MOVFF  C0,CB
17F2:  CLRF   xD2
17F4:  CLRF   xD1
17F6:  CLRF   xD0
17F8:  MOVLW  7F
17FA:  MOVWF  xCF
17FC:  CALL   09CE
1800:  MOVFF  03,C3
1804:  MOVFF  02,C2
1808:  MOVFF  01,C1
180C:  MOVFF  00,C0
....................  } 
....................  if (x == 0) 
1810:  MOVFF  BA,CA
1814:  MOVFF  B9,C9
1818:  MOVFF  B8,C8
181C:  MOVFF  B7,C7
1820:  CLRF   xCE
1822:  CLRF   xCD
1824:  CLRF   xCC
1826:  CLRF   xCB
1828:  CALL   0F9E
182C:  BNZ   1836
....................     res = 0; 
182E:  CLRF   xC3
1830:  CLRF   xC2
1832:  CLRF   xC1
1834:  CLRF   xC0
....................  
....................  return (res); 
1836:  MOVFF  C0,00
183A:  MOVFF  C1,01
183E:  MOVFF  C2,02
1842:  MOVFF  C3,03
.................... } 
1846:  GOTO   185E (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
184A:  MOVFF  B6,BA
184E:  MOVFF  B5,B9
1852:  MOVFF  B4,B8
1856:  MOVFF  B3,B7
185A:  CLRF   xBB
185C:  BRA    1518
.................... } 
185E:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D0,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D0,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D1,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D1,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D2,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D2,0) 
.................... #define   Motor_L2_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L2_off      output_bit(PIN_D3,0) 
.................... #define   Motor_L3_on       output_bit(PIN_D4,1) 
.................... #define   Motor_L3_off      output_bit(PIN_D4,0) 
.................... #define   Motor_L4_on       output_bit(PIN_D5,1) 
.................... #define   Motor_L4_off      output_bit(PIN_D5,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0,negativo=10; 
.................... signed int8   paso=0,Velocidad=1; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 Entero1=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0,Diferencia=0.0; 
.................... float Temporal1=0.0,G=2; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(60536);  // 5 ms 
*
00B4:  MOVLW  EC
00B6:  MOVWF  FCF
00B8:  MOVLW  78
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   41,F
00BE:  BTFSC  FD8.2
00C0:  INCF   42,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   42,F
00C4:  BNZ   00CC
00C6:  MOVF   41,W
00C8:  SUBLW  C7
00CA:  BC    0100
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   42
00CE:  CLRF   41
00D0:  INCF   30,F
00D2:  BSF    18.0
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00D4:  BTFSS  17.0
00D6:  BRA    0100
....................    { 
....................       segundos++; 
00D8:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00DA:  BTFSC  17.7
00DC:  BRA    0100
....................       { 
....................          if(tempo_segundos>0) 
00DE:  MOVF   29,F
00E0:  BZ    00E6
....................          { 
....................             tempo_segundos--; 
00E2:  DECF   29,F
....................          } 
....................          else 
00E4:  BRA    0100
....................          { 
....................             if(tempo_minutos>0) 
00E6:  MOVF   28,F
00E8:  BZ    00F2
....................             { 
....................                tempo_minutos--; 
00EA:  DECF   28,F
....................                tempo_segundos=59; 
00EC:  MOVLW  3B
00EE:  MOVWF  29
....................             } 
....................             else 
00F0:  BRA    0100
....................             { 
....................                //tiempo_cumplido=1; 
....................                estadouv=0;Luz_UV_off; 
00F2:  BCF    17.0
00F4:  BCF    F8C.0
00F6:  BCF    F95.0
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
00F8:  MOVFF  2A,28
00FC:  MOVFF  2B,29
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
0100:  BCF    F9E.0
0102:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0D96:  DECFSZ xB4,W
0D98:  BRA    0DAE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0D9A:  MOVLW  02
0D9C:  MOVWF  xC5
0D9E:  MOVFF  B5,C6
0DA2:  RCALL  0794
0DA4:  MOVLW  06
0DA6:  MOVWF  FF6
0DA8:  MOVLW  01
0DAA:  MOVWF  FF7
0DAC:  RCALL  0854
....................    if(x==2) 
0DAE:  MOVF   xB4,W
0DB0:  SUBLW  02
0DB2:  BNZ   0DC8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad Motor    ");} 
0DB4:  MOVLW  02
0DB6:  MOVWF  xC5
0DB8:  MOVFF  B5,C6
0DBC:  RCALL  0794
0DBE:  MOVLW  1A
0DC0:  MOVWF  FF6
0DC2:  MOVLW  01
0DC4:  MOVWF  FF7
0DC6:  RCALL  0854
....................    if(x==3) 
0DC8:  MOVF   xB4,W
0DCA:  SUBLW  03
0DCC:  BNZ   0DE2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0DCE:  MOVLW  02
0DD0:  MOVWF  xC5
0DD2:  MOVFF  B5,C6
0DD6:  RCALL  0794
0DD8:  MOVLW  2E
0DDA:  MOVWF  FF6
0DDC:  MOVLW  01
0DDE:  MOVWF  FF7
0DE0:  RCALL  0854
....................    if(x==4) 
0DE2:  MOVF   xB4,W
0DE4:  SUBLW  04
0DE6:  BNZ   0DFC
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0DE8:  MOVLW  02
0DEA:  MOVWF  xC5
0DEC:  MOVFF  B5,C6
0DF0:  RCALL  0794
0DF2:  MOVLW  42
0DF4:  MOVWF  FF6
0DF6:  MOVLW  01
0DF8:  MOVWF  FF7
0DFA:  RCALL  0854
....................    if(x==5) 
0DFC:  MOVF   xB4,W
0DFE:  SUBLW  05
0E00:  BNZ   0E16
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0E02:  MOVLW  02
0E04:  MOVWF  xC5
0E06:  MOVFF  B5,C6
0E0A:  RCALL  0794
0E0C:  MOVLW  56
0E0E:  MOVWF  FF6
0E10:  MOVLW  01
0E12:  MOVWF  FF7
0E14:  RCALL  0854
.................... } 
0E16:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
0E7E:  MOVF   xB5,F
0E80:  BNZ   0E92
....................       {Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_off;} 
0E82:  BCF    F8C.3
0E84:  BCF    F95.3
0E86:  BCF    F8C.4
0E88:  BCF    F95.4
0E8A:  BCF    F8C.5
0E8C:  BCF    F95.5
0E8E:  BCF    F8C.2
0E90:  BCF    F95.2
....................    if(x==1) 
0E92:  DECFSZ xB5,W
0E94:  BRA    0EA6
....................       {Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_on;} 
0E96:  BCF    F8C.3
0E98:  BCF    F95.3
0E9A:  BCF    F8C.4
0E9C:  BCF    F95.4
0E9E:  BCF    F8C.5
0EA0:  BCF    F95.5
0EA2:  BSF    F8C.2
0EA4:  BCF    F95.2
....................    if(x==2) 
0EA6:  MOVF   xB5,W
0EA8:  SUBLW  02
0EAA:  BNZ   0EBC
....................       {Motor_L3_off;Motor_L4_off;Motor_L1_off;Motor_L2_on;} 
0EAC:  BCF    F8C.4
0EAE:  BCF    F95.4
0EB0:  BCF    F8C.5
0EB2:  BCF    F95.5
0EB4:  BCF    F8C.2
0EB6:  BCF    F95.2
0EB8:  BSF    F8C.3
0EBA:  BCF    F95.3
....................    if(x==3) 
0EBC:  MOVF   xB5,W
0EBE:  SUBLW  03
0EC0:  BNZ   0ED2
....................       {Motor_L4_off;Motor_L1_off;Motor_L2_off;Motor_L3_on;} 
0EC2:  BCF    F8C.5
0EC4:  BCF    F95.5
0EC6:  BCF    F8C.2
0EC8:  BCF    F95.2
0ECA:  BCF    F8C.3
0ECC:  BCF    F95.3
0ECE:  BSF    F8C.4
0ED0:  BCF    F95.4
....................    if(x==4) 
0ED2:  MOVF   xB5,W
0ED4:  SUBLW  04
0ED6:  BNZ   0EE8
....................       {Motor_L2_off;Motor_L3_off;Motor_L1_off;Motor_L4_on;} 
0ED8:  BCF    F8C.3
0EDA:  BCF    F95.3
0EDC:  BCF    F8C.4
0EDE:  BCF    F95.4
0EE0:  BCF    F8C.2
0EE2:  BCF    F95.2
0EE4:  BSF    F8C.5
0EE6:  BCF    F95.5
.................... } 
0EE8:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
0742:  RLCF   xB8,W
0744:  MOVWF  00
0746:  RLCF   00,F
0748:  MOVLW  FC
074A:  ANDWF  00,F
074C:  MOVFF  00,01
0750:  MOVF   FC2,W
0752:  ANDLW  C3
0754:  IORWF  00,W
0756:  MOVWF  FC2
0758:  MOVLW  0A
075A:  MOVWF  xCA
075C:  RCALL  0626
075E:  BSF    FC2.1
0760:  BTFSC  FC2.1
0762:  BRA    0760
0764:  MOVFF  FC4,03
0768:  MOVFF  FC3,CB
076C:  MOVFF  FC4,CC
0770:  RCALL  070C
0772:  MOVFF  03,BC
0776:  MOVFF  02,BB
077A:  MOVFF  01,BA
077E:  MOVFF  00,B9
0782:  MOVFF  B9,00
0786:  MOVFF  BA,01
078A:  MOVFF  BB,02
078E:  MOVFF  BC,03
.................... } 
0792:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1014:  CLRF   xB7
1016:  CLRF   xB6
1018:  CLRF   xB5
101A:  CLRF   xB4
....................    float promediopresion=0.0; 
....................    /*if(negativo==10) 
....................     { 
....................       x_uno=sensores(1)+Diferencia; 
....................     } 
....................     if(negativo==20) 
....................     { 
....................       x_uno=sensores(1)-Diferencia; 
....................     }*/ 
....................    V1=sensores(1);  
101C:  MOVLW  01
101E:  MOVWF  xB8
1020:  CALL   0742
1024:  MOVFF  03,9A
1028:  MOVFF  02,99
102C:  MOVFF  01,98
1030:  MOVFF  00,97
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
1034:  MOVFF  9A,CA
1038:  MOVFF  99,C9
103C:  MOVFF  98,C8
1040:  MOVFF  97,C7
1044:  MOVFF  B2,CE
1048:  MOVFF  B1,CD
104C:  MOVFF  B0,CC
1050:  MOVFF  AF,CB
1054:  RCALL  0874
1056:  MOVFF  00,B8
105A:  MOVFF  01,B9
105E:  MOVFF  02,BA
1062:  MOVFF  03,BB
1066:  BSF    FD8.1
1068:  MOVFF  03,CE
106C:  MOVFF  02,CD
1070:  MOVFF  01,CC
1074:  MOVFF  00,CB
1078:  CLRF   xD2
107A:  CLRF   xD1
107C:  CLRF   xD0
107E:  MOVLW  7F
1080:  MOVWF  xCF
1082:  RCALL  09CE
1084:  MOVFF  03,9E
1088:  MOVFF  02,9D
108C:  MOVFF  01,9C
1090:  MOVFF  00,9B
....................     
....................    if(Presion<0.0) 
1094:  MOVFF  9E,CA
1098:  MOVFF  9D,C9
109C:  MOVFF  9C,C8
10A0:  MOVFF  9B,C7
10A4:  CLRF   xCE
10A6:  CLRF   xCD
10A8:  CLRF   xCC
10AA:  CLRF   xCB
10AC:  RCALL  0F9E
10AE:  BNC   10B8
....................    { 
....................       Presion=0.0; 
10B0:  CLRF   x9E
10B2:  CLRF   x9D
10B4:  CLRF   x9C
10B6:  CLRF   x9B
....................    } 
....................  
....................    if(r>media-1) 
10B8:  MOVLW  01
10BA:  SUBWF  xB3,W
10BC:  SUBWF  2C,W
10BE:  BZ    10C4
10C0:  BNC   10C4
....................    {r=0;} 
10C2:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
10C4:  MOVF   2C,W
10C6:  MULLW  04
10C8:  MOVF   FF3,W
10CA:  CLRF   03
10CC:  ADDLW  47
10CE:  MOVWF  FE9
10D0:  MOVLW  00
10D2:  ADDWFC 03,W
10D4:  MOVWF  FEA
10D6:  MOVFF  9B,FEF
10DA:  MOVFF  9C,FEC
10DE:  MOVFF  9D,FEC
10E2:  MOVFF  9E,FEC
10E6:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
10E8:  CLRF   2D
10EA:  MOVLW  01
10EC:  SUBWF  xB3,W
10EE:  SUBWF  2D,W
10F0:  BZ    10F4
10F2:  BC    115E
....................    { 
....................       promediopresion+=PromPresion[q]; 
10F4:  MOVF   2D,W
10F6:  MULLW  04
10F8:  MOVF   FF3,W
10FA:  CLRF   03
10FC:  ADDLW  47
10FE:  MOVWF  FE9
1100:  MOVLW  00
1102:  ADDWFC 03,W
1104:  MOVWF  FEA
1106:  MOVFF  FEF,00
110A:  MOVFF  FEC,01
110E:  MOVFF  FEC,02
1112:  MOVFF  FEC,03
1116:  MOVFF  FEA,B9
111A:  MOVFF  FE9,B8
111E:  BCF    FD8.1
1120:  MOVFF  B7,CE
1124:  MOVFF  B6,CD
1128:  MOVFF  B5,CC
112C:  MOVFF  B4,CB
1130:  MOVFF  03,D2
1134:  MOVFF  02,D1
1138:  MOVFF  01,D0
113C:  MOVFF  00,CF
1140:  RCALL  09CE
1142:  MOVFF  B9,FEA
1146:  MOVFF  B8,FE9
114A:  MOVFF  03,B7
114E:  MOVFF  02,B6
1152:  MOVFF  01,B5
1156:  MOVFF  00,B4
....................    }  
115A:  INCF   2D,F
115C:  BRA    10EA
....................    promediopresion=promediopresion/media;    
115E:  CLRF   xCC
1160:  MOVFF  B3,CB
1164:  CALL   070C
1168:  MOVFF  B7,CA
116C:  MOVFF  B6,C9
1170:  MOVFF  B5,C8
1174:  MOVFF  B4,C7
1178:  MOVFF  03,CE
117C:  MOVFF  02,CD
1180:  MOVFF  01,CC
1184:  MOVFF  00,CB
1188:  CALL   0874
118C:  MOVFF  03,B7
1190:  MOVFF  02,B6
1194:  MOVFF  01,B5
1198:  MOVFF  00,B4
....................     
....................    return promediopresion; 
119C:  MOVFF  B4,00
11A0:  MOVFF  B5,01
11A4:  MOVFF  B6,02
11A8:  MOVFF  B7,03
.................... } 
11AC:  RETLW  00
....................  
.................... void Limita(void){ 
....................    if(Velocidad>4) 
*
0C38:  BTFSC  34.7
0C3A:  BRA    0C46
0C3C:  MOVF   34,W
0C3E:  SUBLW  04
0C40:  BC    0C46
....................       Velocidad=1; 
0C42:  MOVLW  01
0C44:  MOVWF  34
....................    if(Contrasena[0]>9) 
0C46:  MOVF   3C,W
0C48:  SUBLW  09
0C4A:  BC    0C4E
....................       Contrasena[0]=0; 
0C4C:  CLRF   3C
....................    if(Contrasena[1]>9) 
0C4E:  MOVF   3D,W
0C50:  SUBLW  09
0C52:  BC    0C56
....................       Contrasena[1]=0; 
0C54:  CLRF   3D
....................    if(Contrasena[2]>9) 
0C56:  MOVF   3E,W
0C58:  SUBLW  09
0C5A:  BC    0C5E
....................       Contrasena[2]=0; 
0C5C:  CLRF   3E
....................    if(Contrasena[3]>9) 
0C5E:  MOVF   3F,W
0C60:  SUBLW  09
0C62:  BC    0C66
....................       Contrasena[3]=0; 
0C64:  CLRF   3F
....................    if(tempo_minutos>60) 
0C66:  MOVF   28,W
0C68:  SUBLW  3C
0C6A:  BC    0C6E
....................       tempo_minutos=0; 
0C6C:  CLRF   28
....................    if(tempo_segundos) 
0C6E:  MOVF   29,F
0C70:  BZ    0C74
....................       tempo_segundos=0; 
0C72:  CLRF   29
....................    if(segundos>60) 
0C74:  MOVF   22,W
0C76:  SUBLW  3C
0C78:  BC    0C7C
....................       segundos=0; 
0C7A:  CLRF   22
....................    if(minutos>60) 
0C7C:  MOVF   23,W
0C7E:  SUBLW  3C
0C80:  BC    0C84
....................       minutos=0;  
0C82:  CLRF   23
.................... } 
0C84:  GOTO   1CC4 (RETURN)
.................... void main () 
.................... { 
*
1860:  CLRF   FF8
1862:  BCF    FD0.7
1864:  BSF    07.7
1866:  CLRF   FEA
1868:  CLRF   FE9
186A:  BCF    17.0
186C:  BCF    17.1
186E:  BCF    17.2
1870:  BCF    17.3
1872:  BCF    17.4
1874:  BCF    17.5
1876:  BCF    17.6
1878:  BCF    17.7
187A:  BCF    18.0
187C:  BCF    18.1
187E:  BCF    18.2
1880:  CLRF   19
1882:  MOVLW  06
1884:  MOVWF  1A
1886:  MOVLW  02
1888:  MOVWF  1B
188A:  MOVLW  0B
188C:  MOVWF  1C
188E:  MOVLW  02
1890:  MOVWF  1D
1892:  MOVLW  03
1894:  MOVWF  1E
1896:  MOVLW  02
1898:  MOVWF  1F
189A:  MOVWF  20
189C:  MOVLW  04
189E:  MOVWF  21
18A0:  CLRF   22
18A2:  CLRF   23
18A4:  CLRF   24
18A6:  CLRF   25
18A8:  CLRF   26
18AA:  CLRF   27
18AC:  CLRF   28
18AE:  CLRF   29
18B0:  CLRF   2A
18B2:  CLRF   2B
18B4:  CLRF   2C
18B6:  CLRF   2D
18B8:  CLRF   2E
18BA:  MOVLW  01
18BC:  MOVWF  2F
18BE:  CLRF   30
18C0:  CLRF   31
18C2:  MOVLW  0A
18C4:  MOVWF  32
18C6:  CLRF   33
18C8:  MOVLW  01
18CA:  MOVWF  34
18CC:  CLRF   40
18CE:  CLRF   44
18D0:  CLRF   43
18D2:  CLRF   46
18D4:  CLRF   45
18D6:  CLRF   x9A
18D8:  CLRF   x99
18DA:  CLRF   x98
18DC:  CLRF   x97
18DE:  CLRF   x9E
18E0:  CLRF   x9D
18E2:  CLRF   x9C
18E4:  CLRF   x9B
18E6:  CLRF   xA2
18E8:  CLRF   xA1
18EA:  CLRF   xA0
18EC:  CLRF   x9F
18EE:  CLRF   xA6
18F0:  CLRF   xA5
18F2:  CLRF   xA4
18F4:  CLRF   xA3
18F6:  CLRF   xAA
18F8:  CLRF   xA9
18FA:  CLRF   xA8
18FC:  CLRF   xA7
18FE:  CLRF   xAE
1900:  CLRF   xAD
1902:  CLRF   xAC
1904:  CLRF   xAB
1906:  CLRF   xB2
1908:  CLRF   xB1
190A:  CLRF   xB0
190C:  MOVLW  80
190E:  MOVWF  xAF
1910:  MOVF   FC1,W
1912:  ANDLW  C0
1914:  IORLW  0F
1916:  MOVWF  FC1
1918:  MOVLW  07
191A:  MOVWF  FB4
191C:  MOVLW  3E
191E:  MOVWF  35
1920:  MOVLW  20
1922:  MOVWF  36
1924:  MOVLW  5E
1926:  MOVWF  37
1928:  CLRF   38
192A:  CLRF   39
192C:  CLRF   3A
192E:  CLRF   3B
1930:  CLRF   3C
1932:  CLRF   3D
1934:  CLRF   3E
1936:  CLRF   3F
1938:  CLRF   47
193A:  CLRF   48
193C:  CLRF   49
193E:  CLRF   4A
1940:  CLRF   4B
1942:  CLRF   4C
1944:  CLRF   4D
1946:  CLRF   4E
1948:  CLRF   4F
194A:  CLRF   50
194C:  CLRF   51
194E:  CLRF   52
1950:  CLRF   53
1952:  CLRF   54
1954:  CLRF   55
1956:  CLRF   56
1958:  CLRF   57
195A:  CLRF   58
195C:  CLRF   59
195E:  CLRF   5A
1960:  CLRF   5B
1962:  CLRF   5C
1964:  CLRF   5D
1966:  CLRF   5E
1968:  CLRF   5F
196A:  CLRF   x60
196C:  CLRF   x61
196E:  CLRF   x62
1970:  CLRF   x63
1972:  CLRF   x64
1974:  CLRF   x65
1976:  CLRF   x66
1978:  CLRF   x67
197A:  CLRF   x68
197C:  CLRF   x69
197E:  CLRF   x6A
1980:  CLRF   x6B
1982:  CLRF   x6C
1984:  CLRF   x6D
1986:  CLRF   x6E
1988:  CLRF   x6F
198A:  CLRF   x70
198C:  CLRF   x71
198E:  CLRF   x72
1990:  CLRF   x73
1992:  CLRF   x74
1994:  CLRF   x75
1996:  CLRF   x76
1998:  CLRF   x77
199A:  CLRF   x78
199C:  CLRF   x79
199E:  CLRF   x7A
19A0:  CLRF   x7B
19A2:  CLRF   x7C
19A4:  CLRF   x7D
19A6:  CLRF   x7E
19A8:  CLRF   x7F
19AA:  CLRF   x80
19AC:  CLRF   x81
19AE:  CLRF   x82
19B0:  CLRF   x83
19B2:  CLRF   x84
19B4:  CLRF   x85
19B6:  CLRF   x86
19B8:  CLRF   x87
19BA:  CLRF   x88
19BC:  CLRF   x89
19BE:  CLRF   x8A
19C0:  CLRF   x8B
19C2:  CLRF   x8C
19C4:  CLRF   x8D
19C6:  CLRF   x8E
19C8:  CLRF   x8F
19CA:  CLRF   x90
19CC:  CLRF   x91
19CE:  CLRF   x92
19D0:  CLRF   x93
19D2:  CLRF   x94
19D4:  CLRF   x95
19D6:  CLRF   x96
....................    output_d(0); 
19D8:  CLRF   F95
19DA:  CLRF   F8C
....................    lcd_init(); 
19DC:  CALL   06B6
....................    enable_interrupts(global); 
19E0:  MOVLW  C0
19E2:  IORWF  FF2,F
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
19E4:  MOVLW  85
19E6:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
19E8:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
19EA:  MOVF   FC1,W
19EC:  ANDLW  C0
19EE:  IORLW  0D
19F0:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
19F2:  BCF    FC0.0
19F4:  BSF    FC0.1
19F6:  BCF    FC0.2
19F8:  BSF    FC0.7
19FA:  BSF    FC2.0
....................    sensores(0); 
19FC:  CLRF   xB8
19FE:  CALL   0742
....................    lcd_gotoxy(1,1); 
1A02:  MOVLW  01
1A04:  MOVWF  xC5
1A06:  MOVWF  xC6
1A08:  CALL   0794
....................    printf(lcd_putc,"  CABINA DE FLUJO   "); 
1A0C:  MOVLW  6A
1A0E:  MOVWF  FF6
1A10:  MOVLW  01
1A12:  MOVWF  FF7
1A14:  CALL   0854
....................    lcd_gotoxy(1,2); 
1A18:  MOVLW  01
1A1A:  MOVWF  xC5
1A1C:  MOVLW  02
1A1E:  MOVWF  xC6
1A20:  CALL   0794
....................    printf(lcd_putc,"  LAMINAR VERTICAL  "); 
1A24:  MOVLW  80
1A26:  MOVWF  FF6
1A28:  MOVLW  01
1A2A:  MOVWF  FF7
1A2C:  CALL   0854
....................    lcd_gotoxy(1,3); 
1A30:  MOVLW  01
1A32:  MOVWF  xC5
1A34:  MOVLW  03
1A36:  MOVWF  xC6
1A38:  CALL   0794
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1A3C:  MOVLW  96
1A3E:  MOVWF  FF6
1A40:  MOVLW  01
1A42:  MOVWF  FF7
1A44:  CALL   0854
....................    lcd_gotoxy(1,4); 
1A48:  MOVLW  01
1A4A:  MOVWF  xC5
1A4C:  MOVLW  04
1A4E:  MOVWF  xC6
1A50:  CALL   0794
....................    printf(lcd_putc,"   REF:  JPCFV90    "); 
1A54:  MOVLW  AC
1A56:  MOVWF  FF6
1A58:  MOVLW  01
1A5A:  MOVWF  FF7
1A5C:  CALL   0854
....................    delay_ms(2000); 
1A60:  MOVLW  08
1A62:  MOVWF  xB3
1A64:  MOVLW  FA
1A66:  MOVWF  xCA
1A68:  CALL   0626
1A6C:  DECFSZ xB3,F
1A6E:  BRA    1A64
....................    printf(lcd_putc,"\f"); 
1A70:  MOVLW  0C
1A72:  MOVWF  xC4
1A74:  CALL   07F6
....................     
....................    //Solo para simulacion 
....................    //write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20); 
....................    //write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
....................    Velocidad=read_eeprom(5); 
1A78:  MOVFF  FF2,B3
1A7C:  BCF    FF2.7
1A7E:  MOVLW  05
1A80:  MOVWF  FA9
1A82:  BCF    FA6.6
1A84:  BCF    FA6.7
1A86:  BSF    FA6.0
1A88:  MOVF   FA8,W
1A8A:  BTFSC  xB3.7
1A8C:  BSF    FF2.7
1A8E:  MOVWF  34
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1A90:  MOVFF  FF2,B3
1A94:  BCF    FF2.7
1A96:  CLRF   FA9
1A98:  BCF    FA6.6
1A9A:  BCF    FA6.7
1A9C:  BSF    FA6.0
1A9E:  MOVF   FA8,W
1AA0:  BTFSC  xB3.7
1AA2:  BSF    FF2.7
1AA4:  MOVWF  3C
1AA6:  MOVLW  14
1AA8:  MOVWF  xCA
1AAA:  CALL   0626
1AAE:  MOVFF  FF2,B3
1AB2:  BCF    FF2.7
1AB4:  MOVLW  01
1AB6:  MOVWF  FA9
1AB8:  BCF    FA6.6
1ABA:  BCF    FA6.7
1ABC:  BSF    FA6.0
1ABE:  MOVF   FA8,W
1AC0:  BTFSC  xB3.7
1AC2:  BSF    FF2.7
1AC4:  MOVWF  3D
1AC6:  MOVLW  14
1AC8:  MOVWF  xCA
1ACA:  CALL   0626
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1ACE:  MOVFF  FF2,B3
1AD2:  BCF    FF2.7
1AD4:  MOVLW  02
1AD6:  MOVWF  FA9
1AD8:  BCF    FA6.6
1ADA:  BCF    FA6.7
1ADC:  BSF    FA6.0
1ADE:  MOVF   FA8,W
1AE0:  BTFSC  xB3.7
1AE2:  BSF    FF2.7
1AE4:  MOVWF  3E
1AE6:  MOVLW  14
1AE8:  MOVWF  xCA
1AEA:  CALL   0626
1AEE:  MOVFF  FF2,B3
1AF2:  BCF    FF2.7
1AF4:  MOVLW  03
1AF6:  MOVWF  FA9
1AF8:  BCF    FA6.6
1AFA:  BCF    FA6.7
1AFC:  BSF    FA6.0
1AFE:  MOVF   FA8,W
1B00:  BTFSC  xB3.7
1B02:  BSF    FF2.7
1B04:  MOVWF  3F
1B06:  MOVLW  14
1B08:  MOVWF  xCA
1B0A:  CALL   0626
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(21); 
1B0E:  MOVFF  FF2,B3
1B12:  BCF    FF2.7
1B14:  MOVLW  14
1B16:  MOVWF  FA9
1B18:  BCF    FA6.6
1B1A:  BCF    FA6.7
1B1C:  BSF    FA6.0
1B1E:  MOVF   FA8,W
1B20:  BTFSC  xB3.7
1B22:  BSF    FF2.7
1B24:  MOVWF  28
1B26:  MOVFF  FF2,B3
1B2A:  BCF    FF2.7
1B2C:  MOVLW  15
1B2E:  MOVWF  FA9
1B30:  BCF    FA6.6
1B32:  BCF    FA6.7
1B34:  BSF    FA6.0
1B36:  MOVF   FA8,W
1B38:  BTFSC  xB3.7
1B3A:  BSF    FF2.7
1B3C:  MOVWF  29
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horasL=read_eeprom(52);horasH=read_eeprom(53);  
1B3E:  MOVFF  FF2,B3
1B42:  BCF    FF2.7
1B44:  MOVLW  32
1B46:  MOVWF  FA9
1B48:  BCF    FA6.6
1B4A:  BCF    FA6.7
1B4C:  BSF    FA6.0
1B4E:  MOVF   FA8,W
1B50:  BTFSC  xB3.7
1B52:  BSF    FF2.7
1B54:  MOVWF  22
1B56:  MOVFF  FF2,B3
1B5A:  BCF    FF2.7
1B5C:  MOVLW  33
1B5E:  MOVWF  FA9
1B60:  BCF    FA6.6
1B62:  BCF    FA6.7
1B64:  BSF    FA6.0
1B66:  MOVF   FA8,W
1B68:  BTFSC  xB3.7
1B6A:  BSF    FF2.7
1B6C:  MOVWF  23
1B6E:  MOVFF  FF2,B3
1B72:  BCF    FF2.7
1B74:  MOVLW  34
1B76:  MOVWF  FA9
1B78:  BCF    FA6.6
1B7A:  BCF    FA6.7
1B7C:  BSF    FA6.0
1B7E:  MOVF   FA8,W
1B80:  BTFSC  xB3.7
1B82:  BSF    FF2.7
1B84:  MOVWF  24
1B86:  MOVFF  FF2,B3
1B8A:  BCF    FF2.7
1B8C:  MOVLW  35
1B8E:  MOVWF  FA9
1B90:  BCF    FA6.6
1B92:  BCF    FA6.7
1B94:  BSF    FA6.0
1B96:  MOVF   FA8,W
1B98:  BTFSC  xB3.7
1B9A:  BSF    FF2.7
1B9C:  MOVWF  25
....................     
....................    G_l=read_eeprom(60); 
1B9E:  MOVFF  FF2,B3
1BA2:  BCF    FF2.7
1BA4:  MOVLW  3C
1BA6:  MOVWF  FA9
1BA8:  BCF    FA6.6
1BAA:  BCF    FA6.7
1BAC:  BSF    FA6.0
1BAE:  MOVF   FA8,W
1BB0:  BTFSC  xB3.7
1BB2:  BSF    FF2.7
1BB4:  MOVWF  26
....................    G_h=read_eeprom(61); 
1BB6:  MOVFF  FF2,B3
1BBA:  BCF    FF2.7
1BBC:  MOVLW  3D
1BBE:  MOVWF  FA9
1BC0:  BCF    FA6.6
1BC2:  BCF    FA6.7
1BC4:  BSF    FA6.0
1BC6:  MOVF   FA8,W
1BC8:  BTFSC  xB3.7
1BCA:  BSF    FF2.7
1BCC:  MOVWF  27
....................    G16=make16(G_h,G_l); 
1BCE:  MOVFF  27,46
1BD2:  MOVFF  26,45
....................    G=G16; 
1BD6:  MOVFF  46,CC
1BDA:  MOVFF  45,CB
1BDE:  CALL   070C
1BE2:  MOVFF  03,B2
1BE6:  MOVFF  02,B1
1BEA:  MOVFF  01,B0
1BEE:  MOVFF  00,AF
....................    Entero1=read_eeprom(60);//Decimal2=read_eeprom(41); 
1BF2:  MOVFF  FF2,B3
1BF6:  BCF    FF2.7
1BF8:  MOVLW  3C
1BFA:  MOVWF  FA9
1BFC:  BCF    FA6.6
1BFE:  BCF    FA6.7
1C00:  BSF    FA6.0
1C02:  MOVF   FA8,W
1C04:  BTFSC  xB3.7
1C06:  BSF    FF2.7
1C08:  MOVWF  40
....................    Temporal1=read_eeprom(61); 
1C0A:  MOVFF  FF2,B3
1C0E:  BCF    FF2.7
1C10:  MOVLW  3D
1C12:  MOVWF  FA9
1C14:  BCF    FA6.6
1C16:  BCF    FA6.7
1C18:  BSF    FA6.0
1C1A:  MOVF   FA8,W
1C1C:  BTFSC  xB3.7
1C1E:  BSF    FF2.7
1C20:  CLRF   xCC
1C22:  MOVWF  xCB
1C24:  CALL   070C
1C28:  MOVFF  03,AE
1C2C:  MOVFF  02,AD
1C30:  MOVFF  01,AC
1C34:  MOVFF  00,AB
....................    Temporal1=Temporal1/100.0; 
1C38:  MOVFF  AE,CA
1C3C:  MOVFF  AD,C9
1C40:  MOVFF  AC,C8
1C44:  MOVFF  AB,C7
1C48:  CLRF   xCE
1C4A:  CLRF   xCD
1C4C:  MOVLW  48
1C4E:  MOVWF  xCC
1C50:  MOVLW  85
1C52:  MOVWF  xCB
1C54:  CALL   0874
1C58:  MOVFF  03,AE
1C5C:  MOVFF  02,AD
1C60:  MOVFF  01,AC
1C64:  MOVFF  00,AB
....................    Diferencia=Entero1+Temporal1; 
1C68:  CLRF   xCC
1C6A:  MOVFF  40,CB
1C6E:  CALL   070C
1C72:  BCF    FD8.1
1C74:  MOVFF  03,CE
1C78:  MOVFF  02,CD
1C7C:  MOVFF  01,CC
1C80:  MOVFF  00,CB
1C84:  MOVFF  AE,D2
1C88:  MOVFF  AD,D1
1C8C:  MOVFF  AC,D0
1C90:  MOVFF  AB,CF
1C94:  CALL   09CE
1C98:  MOVFF  03,AA
1C9C:  MOVFF  02,A9
1CA0:  MOVFF  01,A8
1CA4:  MOVFF  00,A7
....................     
....................    negativo=read_eeprom(70); 
1CA8:  MOVFF  FF2,B3
1CAC:  BCF    FF2.7
1CAE:  MOVLW  46
1CB0:  MOVWF  FA9
1CB2:  BCF    FA6.6
1CB4:  BCF    FA6.7
1CB6:  BSF    FA6.0
1CB8:  MOVF   FA8,W
1CBA:  BTFSC  xB3.7
1CBC:  BSF    FF2.7
1CBE:  MOVWF  32
....................    Limita(); 
1CC0:  GOTO   0C38
....................    horas=make16(horasH,horasL); 
1CC4:  MOVFF  25,44
1CC8:  MOVFF  24,43
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1CCC:  MOVFF  28,2A
1CD0:  MOVFF  29,2B
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1CD4:  MOVF   19,F
1CD6:  BTFSS  FD8.2
1CD8:  BRA    2082
....................    lcd_gotoxy(1,1); 
1CDA:  MOVLW  01
1CDC:  MOVWF  xC5
1CDE:  MOVWF  xC6
1CE0:  CALL   0794
....................    printf(lcd_putc,"     Ingrese        "); 
1CE4:  MOVLW  C2
1CE6:  MOVWF  FF6
1CE8:  MOVLW  01
1CEA:  MOVWF  FF7
1CEC:  CALL   0854
....................    lcd_gotoxy(1,2); 
1CF0:  MOVLW  01
1CF2:  MOVWF  xC5
1CF4:  MOVLW  02
1CF6:  MOVWF  xC6
1CF8:  CALL   0794
....................    printf(lcd_putc,"    Contraseña      "); 
1CFC:  MOVLW  D8
1CFE:  MOVWF  FF6
1D00:  MOVLW  01
1D02:  MOVWF  FF7
1D04:  CALL   0854
....................    lcd_gotoxy(1,3); 
1D08:  MOVLW  01
1D0A:  MOVWF  xC5
1D0C:  MOVLW  03
1D0E:  MOVWF  xC6
1D10:  CALL   0794
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1D14:  MOVLW  EE
1D16:  MOVWF  FF6
1D18:  MOVLW  01
1D1A:  MOVWF  FF7
1D1C:  MOVLW  0A
1D1E:  MOVWF  xB7
1D20:  CALL   0C88
1D24:  MOVFF  38,B3
1D28:  MOVLW  1F
1D2A:  MOVWF  xB4
1D2C:  CALL   0CCE
1D30:  MOVFF  39,B3
1D34:  MOVLW  1F
1D36:  MOVWF  xB4
1D38:  CALL   0CCE
1D3C:  MOVFF  3A,B3
1D40:  MOVLW  1F
1D42:  MOVWF  xB4
1D44:  CALL   0CCE
1D48:  MOVFF  3B,B3
1D4C:  MOVLW  1F
1D4E:  MOVWF  xB4
1D50:  CALL   0CCE
1D54:  MOVLW  20
1D56:  MOVWF  xC4
1D58:  CALL   07F6
1D5C:  MOVLW  20
1D5E:  MOVWF  xC4
1D60:  CALL   07F6
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1D64:  BSF    F92.5
1D66:  BTFSS  F80.5
1D68:  BRA    1D8C
....................       {  if(Flanco == 0)  
1D6A:  BTFSC  17.3
1D6C:  BRA    1D8A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1D6E:  MOVLW  0B
1D70:  SUBWF  1C,W
1D72:  CLRF   03
1D74:  ADDLW  38
1D76:  MOVWF  FE9
1D78:  MOVLW  00
1D7A:  ADDWFC 03,W
1D7C:  MOVWF  FEA
1D7E:  INCF   FEF,F
1D80:  BSF    17.3
1D82:  MOVLW  1E
1D84:  MOVWF  xCA
1D86:  CALL   0626
....................          else 
1D8A:  BRA    1D8E
....................             {Flanco = 0;} 
1D8C:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1D8E:  BSF    F96.0
1D90:  BTFSS  F84.0
1D92:  BRA    1DB6
....................       {  if(Flanco2 == 0)  
1D94:  BTFSC  17.5
1D96:  BRA    1DB4
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1D98:  MOVLW  0B
1D9A:  SUBWF  1C,W
1D9C:  CLRF   03
1D9E:  ADDLW  38
1DA0:  MOVWF  FE9
1DA2:  MOVLW  00
1DA4:  ADDWFC 03,W
1DA6:  MOVWF  FEA
1DA8:  DECF   FEF,F
1DAA:  BSF    17.5
1DAC:  MOVLW  1E
1DAE:  MOVWF  xCA
1DB0:  CALL   0626
....................          else 
1DB4:  BRA    1DB8
....................             {Flanco2 = 0;} 
1DB6:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1DB8:  BSF    F96.1
1DBA:  BTFSS  F84.1
1DBC:  BRA    1DD8
....................       {  if(Flanco1 == 0)  
1DBE:  BTFSC  17.4
1DC0:  BRA    1DD6
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1DC2:  BSF    17.4
1DC4:  INCF   1C,F
1DC6:  MOVLW  1E
1DC8:  MOVWF  xCA
1DCA:  CALL   0626
1DCE:  MOVLW  0C
1DD0:  MOVWF  xC4
1DD2:  CALL   07F6
....................          else 
1DD6:  BRA    1DDA
....................             {Flanco1 = 0;}    
1DD8:  BCF    17.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
1DDA:  BSF    F96.2
1DDC:  BTFSS  F84.2
1DDE:  BRA    1DFA
....................       {  if(Flanco3 == 0)  
1DE0:  BTFSC  17.6
1DE2:  BRA    1DF8
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
1DE4:  BSF    17.6
1DE6:  DECF   1C,F
1DE8:  MOVLW  1E
1DEA:  MOVWF  xCA
1DEC:  CALL   0626
1DF0:  MOVLW  0C
1DF2:  MOVWF  xC4
1DF4:  CALL   07F6
....................          else 
1DF8:  BRA    1DFC
....................             {Flanco3 = 0;}     
1DFA:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1DFC:  MOVLW  0B
1DFE:  SUBWF  1C,W
1E00:  CLRF   03
1E02:  ADDLW  38
1E04:  MOVWF  FE9
1E06:  MOVLW  00
1E08:  ADDWFC 03,W
1E0A:  MOVWF  FEA
1E0C:  BTFSC  FEF.7
1E0E:  BRA    1E12
1E10:  BRA    1E26
....................        {clave[unidad-11]=9;} 
1E12:  MOVLW  0B
1E14:  SUBWF  1C,W
1E16:  CLRF   03
1E18:  ADDLW  38
1E1A:  MOVWF  FE9
1E1C:  MOVLW  00
1E1E:  ADDWFC 03,W
1E20:  MOVWF  FEA
1E22:  MOVLW  09
1E24:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1E26:  MOVLW  0B
1E28:  SUBWF  1C,W
1E2A:  CLRF   03
1E2C:  ADDLW  38
1E2E:  MOVWF  FE9
1E30:  MOVLW  00
1E32:  ADDWFC 03,W
1E34:  MOVWF  FEA
1E36:  BTFSC  FEF.7
1E38:  BRA    1E52
1E3A:  MOVF   FEF,W
1E3C:  SUBLW  09
1E3E:  BC    1E52
....................        {clave[unidad-11]=0;} 
1E40:  MOVLW  0B
1E42:  SUBWF  1C,W
1E44:  CLRF   03
1E46:  ADDLW  38
1E48:  MOVWF  FE9
1E4A:  MOVLW  00
1E4C:  ADDWFC 03,W
1E4E:  MOVWF  FEA
1E50:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1E52:  MOVF   1C,W
1E54:  SUBLW  0A
1E56:  BNC   1E5C
....................        {unidad=11;} 
1E58:  MOVLW  0B
1E5A:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1E5C:  MOVFF  1C,C5
1E60:  MOVLW  04
1E62:  MOVWF  xC6
1E64:  CALL   0794
....................        lcd_putc(t[2]); 
1E68:  MOVFF  37,C4
1E6C:  CALL   07F6
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1E70:  MOVF   1C,W
1E72:  SUBLW  0E
1E74:  BTFSC  FD8.0
1E76:  BRA    205E
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1E78:  MOVF   38,W
1E7A:  SUBLW  03
1E7C:  BNZ   1F58
1E7E:  MOVF   39,W
1E80:  SUBLW  08
1E82:  BNZ   1F58
1E84:  MOVF   3A,W
1E86:  SUBLW  09
1E88:  BNZ   1F58
1E8A:  MOVF   3B,W
1E8C:  SUBLW  02
1E8E:  BNZ   1F58
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1E90:  CLRF   FA9
1E92:  CLRF   FA8
1E94:  BCF    FA6.6
1E96:  BCF    FA6.7
1E98:  BSF    FA6.2
1E9A:  MOVF   FF2,W
1E9C:  MOVWF  00
1E9E:  BCF    FF2.7
1EA0:  MOVLB  F
1EA2:  MOVLW  55
1EA4:  MOVWF  FA7
1EA6:  MOVLW  AA
1EA8:  MOVWF  FA7
1EAA:  BSF    FA6.1
1EAC:  BTFSC  FA6.1
1EAE:  BRA    1EAC
1EB0:  BCF    FA6.2
1EB2:  MOVF   00,W
1EB4:  IORWF  FF2,F
1EB6:  MOVLW  14
1EB8:  MOVLB  0
1EBA:  MOVWF  xCA
1EBC:  CALL   0626
1EC0:  MOVLW  01
1EC2:  MOVWF  FA9
1EC4:  CLRF   FA8
1EC6:  BCF    FA6.6
1EC8:  BCF    FA6.7
1ECA:  BSF    FA6.2
1ECC:  MOVF   FF2,W
1ECE:  MOVWF  00
1ED0:  BCF    FF2.7
1ED2:  MOVLB  F
1ED4:  MOVLW  55
1ED6:  MOVWF  FA7
1ED8:  MOVLW  AA
1EDA:  MOVWF  FA7
1EDC:  BSF    FA6.1
1EDE:  BTFSC  FA6.1
1EE0:  BRA    1EDE
1EE2:  BCF    FA6.2
1EE4:  MOVF   00,W
1EE6:  IORWF  FF2,F
1EE8:  MOVLW  14
1EEA:  MOVLB  0
1EEC:  MOVWF  xCA
1EEE:  CALL   0626
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1EF2:  MOVLW  02
1EF4:  MOVWF  FA9
1EF6:  CLRF   FA8
1EF8:  BCF    FA6.6
1EFA:  BCF    FA6.7
1EFC:  BSF    FA6.2
1EFE:  MOVF   FF2,W
1F00:  MOVWF  00
1F02:  BCF    FF2.7
1F04:  MOVLB  F
1F06:  MOVLW  55
1F08:  MOVWF  FA7
1F0A:  MOVLW  AA
1F0C:  MOVWF  FA7
1F0E:  BSF    FA6.1
1F10:  BTFSC  FA6.1
1F12:  BRA    1F10
1F14:  BCF    FA6.2
1F16:  MOVF   00,W
1F18:  IORWF  FF2,F
1F1A:  MOVLW  14
1F1C:  MOVLB  0
1F1E:  MOVWF  xCA
1F20:  CALL   0626
1F24:  MOVLW  03
1F26:  MOVWF  FA9
1F28:  CLRF   FA8
1F2A:  BCF    FA6.6
1F2C:  BCF    FA6.7
1F2E:  BSF    FA6.2
1F30:  MOVF   FF2,W
1F32:  MOVWF  00
1F34:  BCF    FF2.7
1F36:  MOVLB  F
1F38:  MOVLW  55
1F3A:  MOVWF  FA7
1F3C:  MOVLW  AA
1F3E:  MOVWF  FA7
1F40:  BSF    FA6.1
1F42:  BTFSC  FA6.1
1F44:  BRA    1F42
1F46:  BCF    FA6.2
1F48:  MOVF   00,W
1F4A:  IORWF  FF2,F
1F4C:  MOVLW  14
1F4E:  MOVLB  0
1F50:  MOVWF  xCA
1F52:  CALL   0626
....................              reset_cpu();} 
1F56:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1F58:  MOVF   3C,W
1F5A:  SUBWF  38,W
1F5C:  BNZ   1FF0
1F5E:  MOVF   3D,W
1F60:  SUBWF  39,W
1F62:  BNZ   1FF0
1F64:  MOVF   3E,W
1F66:  SUBWF  3A,W
1F68:  BNZ   1FF0
1F6A:  MOVF   3F,W
1F6C:  SUBWF  3B,W
1F6E:  BNZ   1FF0
....................             {lcd_gotoxy(1,1); 
1F70:  MOVLW  01
1F72:  MOVWF  xC5
1F74:  MOVWF  xC6
1F76:  CALL   0794
....................             printf(lcd_putc,"                   "); 
1F7A:  MOVLW  04
1F7C:  MOVWF  FF6
1F7E:  MOVLW  02
1F80:  MOVWF  FF7
1F82:  CALL   0854
....................             lcd_gotoxy(1,2); 
1F86:  MOVLW  01
1F88:  MOVWF  xC5
1F8A:  MOVLW  02
1F8C:  MOVWF  xC6
1F8E:  CALL   0794
....................             printf(lcd_putc,"     Contraseña    "); 
1F92:  MOVLW  18
1F94:  MOVWF  FF6
1F96:  MOVLW  02
1F98:  MOVWF  FF7
1F9A:  CALL   0854
....................             lcd_gotoxy(1,3); 
1F9E:  MOVLW  01
1FA0:  MOVWF  xC5
1FA2:  MOVLW  03
1FA4:  MOVWF  xC6
1FA6:  CALL   0794
....................             printf(lcd_putc,"      Correcta     "); 
1FAA:  MOVLW  2C
1FAC:  MOVWF  FF6
1FAE:  MOVLW  02
1FB0:  MOVWF  FF7
1FB2:  CALL   0854
....................             lcd_gotoxy(1,4); 
1FB6:  MOVLW  01
1FB8:  MOVWF  xC5
1FBA:  MOVLW  04
1FBC:  MOVWF  xC6
1FBE:  CALL   0794
....................             printf(lcd_putc,"                   "); 
1FC2:  MOVLW  40
1FC4:  MOVWF  FF6
1FC6:  MOVLW  02
1FC8:  MOVWF  FF7
1FCA:  CALL   0854
....................             delay_ms(1000);Menu=100;unidad=11;printf(lcd_putc,"\f");} 
1FCE:  MOVLW  04
1FD0:  MOVWF  xB3
1FD2:  MOVLW  FA
1FD4:  MOVWF  xCA
1FD6:  CALL   0626
1FDA:  DECFSZ xB3,F
1FDC:  BRA    1FD2
1FDE:  MOVLW  64
1FE0:  MOVWF  19
1FE2:  MOVLW  0B
1FE4:  MOVWF  1C
1FE6:  MOVLW  0C
1FE8:  MOVWF  xC4
1FEA:  CALL   07F6
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1FEE:  BRA    205E
....................          {lcd_gotoxy(1,1); 
1FF0:  MOVLW  01
1FF2:  MOVWF  xC5
1FF4:  MOVWF  xC6
1FF6:  CALL   0794
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1FFA:  MOVLW  01
1FFC:  MOVWF  xC5
1FFE:  MOVLW  02
2000:  MOVWF  xC6
2002:  CALL   0794
....................             printf(lcd_putc,"     Contraseña    "); 
2006:  MOVLW  54
2008:  MOVWF  FF6
200A:  MOVLW  02
200C:  MOVWF  FF7
200E:  CALL   0854
....................             lcd_gotoxy(1,3); 
2012:  MOVLW  01
2014:  MOVWF  xC5
2016:  MOVLW  03
2018:  MOVWF  xC6
201A:  CALL   0794
....................             printf(lcd_putc,"     Incorrecta    "); 
201E:  MOVLW  68
2020:  MOVWF  FF6
2022:  MOVLW  02
2024:  MOVWF  FF7
2026:  CALL   0854
....................             lcd_gotoxy(1,4); 
202A:  MOVLW  01
202C:  MOVWF  xC5
202E:  MOVLW  04
2030:  MOVWF  xC6
2032:  CALL   0794
....................             printf(lcd_putc,"                   "); 
2036:  MOVLW  7C
2038:  MOVWF  FF6
203A:  MOVLW  02
203C:  MOVWF  FF7
203E:  CALL   0854
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
2042:  MOVLW  04
2044:  MOVWF  xB3
2046:  MOVLW  FA
2048:  MOVWF  xCA
204A:  CALL   0626
204E:  DECFSZ xB3,F
2050:  BRA    2046
2052:  MOVLW  0B
2054:  MOVWF  1C
2056:  MOVLW  0C
2058:  MOVWF  xC4
205A:  CALL   07F6
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
205E:  MOVF   1C,W
2060:  SUBLW  0B
2062:  BC    2082
2064:  MOVF   1C,W
2066:  SUBLW  0D
2068:  BNC   2082
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
206A:  MOVLW  01
206C:  SUBWF  1C,W
206E:  MOVWF  xB3
2070:  MOVWF  xC5
2072:  MOVLW  04
2074:  MOVWF  xC6
2076:  CALL   0794
....................             lcd_putc(t[1]); 
207A:  MOVFF  36,C4
207E:  CALL   07F6
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2082:  DECFSZ 19,W
2084:  BRA    2276
....................    lcd_gotoxy(1,1); 
2086:  MOVLW  01
2088:  MOVWF  xC5
208A:  MOVWF  xC6
208C:  CALL   0794
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
2090:  MOVLW  90
2092:  MOVWF  FF6
2094:  MOVLW  02
2096:  MOVWF  FF7
2098:  CALL   0854
....................       if(paso<0) 
209C:  BTFSC  33.7
209E:  BRA    20A2
20A0:  BRA    20A4
....................         {paso=0;} 
20A2:  CLRF   33
....................          
....................       if(UP)//Si oprime hacia arriba 
20A4:  BSF    F92.5
20A6:  BTFSS  F80.5
20A8:  BRA    20C4
....................       { 
....................          if(Flanco == 0) 
20AA:  BTFSC  17.3
20AC:  BRA    20C2
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
20AE:  DECF   1F,F
20B0:  DECF   1D,F
20B2:  MOVLW  01
20B4:  ADDWF  1D,W
20B6:  MOVWF  1E
20B8:  BSF    17.3
20BA:  MOVLW  1E
20BC:  MOVWF  xCA
20BE:  CALL   0626
....................          } 
....................       } 
....................       else 
20C2:  BRA    20C6
....................       { 
....................          Flanco = 0; 
20C4:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
20C6:  BSF    F96.0
20C8:  BTFSS  F84.0
20CA:  BRA    20E6
....................       { 
....................          if(Flanco2 == 0) 
20CC:  BTFSC  17.5
20CE:  BRA    20E4
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
20D0:  INCF   1F,F
20D2:  INCF   1D,F
20D4:  MOVLW  01
20D6:  SUBWF  1D,W
20D8:  MOVWF  1E
20DA:  BSF    17.5
20DC:  MOVLW  1E
20DE:  MOVWF  xCA
20E0:  CALL   0626
....................          } 
....................       } 
....................       else 
20E4:  BRA    20E8
....................       { 
....................          Flanco2 = 0; 
20E6:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
20E8:  MOVF   1F,W
20EA:  SUBWF  21,W
20EC:  BC    20FE
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
20EE:  INCF   33,F
20F0:  MOVFF  1F,21
20F4:  MOVLW  02
20F6:  SUBWF  21,W
20F8:  MOVWF  20
20FA:  MOVLW  04
20FC:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
20FE:  MOVF   20,W
2100:  SUBWF  1F,W
2102:  BC    2114
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2104:  DECF   33,F
2106:  MOVFF  1F,20
210A:  MOVLW  02
210C:  ADDWF  20,W
210E:  MOVWF  21
2110:  MOVLW  02
2112:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
2114:  MOVF   1F,W
2116:  SUBWF  1A,W
2118:  BC    212C
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
211A:  MOVFF  1B,1F
211E:  MOVLW  02
2120:  MOVWF  1D
2122:  CLRF   33
2124:  MOVFF  1F,20
2128:  ADDWF  20,W
212A:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
212C:  MOVF   1B,W
212E:  SUBWF  1F,W
2130:  BC    2148
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
2132:  MOVFF  1A,1F
2136:  MOVLW  04
2138:  MOVWF  1D
213A:  SUBWF  1A,W
213C:  MOVWF  33
213E:  MOVFF  1F,21
2142:  MOVLW  02
2144:  SUBWF  21,W
2146:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
2148:  MOVLW  01
214A:  ADDWF  33,W
214C:  MOVWF  xB3
214E:  MOVWF  xB4
2150:  MOVLW  02
2152:  MOVWF  xB5
2154:  CALL   0D96
....................         mensajes(2+paso,3); 
2158:  MOVLW  02
215A:  ADDWF  33,W
215C:  MOVWF  xB3
215E:  MOVWF  xB4
2160:  MOVLW  03
2162:  MOVWF  xB5
2164:  CALL   0D96
....................         mensajes(3+paso,4); 
2168:  MOVLW  03
216A:  ADDWF  33,W
216C:  MOVWF  xB3
216E:  MOVWF  xB4
2170:  MOVLW  04
2172:  MOVWF  xB5
2174:  CALL   0D96
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2178:  MOVLW  01
217A:  MOVWF  xC5
217C:  MOVFF  1D,C6
2180:  CALL   0794
....................         lcd_putc(t[0]); 
2184:  MOVFF  35,C4
2188:  CALL   07F6
....................  
....................         if(Flecha==2) 
218C:  MOVF   1D,W
218E:  SUBLW  02
2190:  BNZ   21BA
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2192:  MOVLW  01
2194:  MOVWF  xC5
2196:  MOVLW  04
2198:  MOVWF  xC6
219A:  CALL   0794
....................             lcd_putc(t[1]); 
219E:  MOVFF  36,C4
21A2:  CALL   07F6
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
21A6:  MOVLW  01
21A8:  MOVWF  xC5
21AA:  MOVLW  03
21AC:  MOVWF  xC6
21AE:  CALL   0794
....................             lcd_putc(t[1]); 
21B2:  MOVFF  36,C4
21B6:  CALL   07F6
....................           } 
....................          
....................         if(Flecha==4) 
21BA:  MOVF   1D,W
21BC:  SUBLW  04
21BE:  BNZ   21E8
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
21C0:  MOVLW  01
21C2:  MOVWF  xC5
21C4:  MOVLW  02
21C6:  MOVWF  xC6
21C8:  CALL   0794
....................             lcd_putc(t[1]); 
21CC:  MOVFF  36,C4
21D0:  CALL   07F6
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
21D4:  MOVLW  01
21D6:  MOVWF  xC5
21D8:  MOVLW  03
21DA:  MOVWF  xC6
21DC:  CALL   0794
....................             lcd_putc(t[1]); 
21E0:  MOVFF  36,C4
21E4:  CALL   07F6
....................           } 
....................          
....................         if(Flecha==3) 
21E8:  MOVF   1D,W
21EA:  SUBLW  03
21EC:  BNZ   2216
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
21EE:  MOVLW  01
21F0:  MOVWF  xC5
21F2:  MOVLW  04
21F4:  MOVWF  xC6
21F6:  CALL   0794
....................             lcd_putc(t[1]); 
21FA:  MOVFF  36,C4
21FE:  CALL   07F6
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2202:  MOVLW  01
2204:  MOVWF  xC5
2206:  MOVLW  02
2208:  MOVWF  xC6
220A:  CALL   0794
....................             lcd_putc(t[1]); 
220E:  MOVFF  36,C4
2212:  CALL   07F6
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
2216:  BSF    F96.1
2218:  BTFSS  F84.1
221A:  BRA    2252
....................        { 
....................          if(Flanco1 == 0) 
221C:  BTFSC  17.4
221E:  BRA    2250
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
2220:  BSF    17.4
2222:  MOVFF  1F,19
2226:  MOVLW  03
2228:  MOVWF  1D
222A:  MOVLW  02
222C:  MOVWF  xB3
222E:  MOVLW  96
2230:  MOVWF  xCA
2232:  CALL   0626
2236:  DECFSZ xB3,F
2238:  BRA    222E
223A:  MOVLW  0C
223C:  MOVWF  xC4
223E:  CALL   07F6
....................             if(Menu==6) 
2242:  MOVF   19,W
2244:  SUBLW  06
2246:  BNZ   2250
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2248:  CLRF   38
224A:  CLRF   39
224C:  CLRF   3A
224E:  CLRF   3B
....................             } 
....................          } 
....................        } 
....................        else 
2250:  BRA    2254
....................        { 
....................          Flanco1 = 0; 
2252:  BCF    17.4
....................        } 
....................              
....................        if(LEFT) 
2254:  BSF    F96.2
2256:  BTFSS  F84.2
2258:  BRA    2276
....................        { 
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
225A:  MOVLW  64
225C:  MOVWF  19
225E:  MOVLW  0C
2260:  MOVWF  xC4
2262:  CALL   07F6
2266:  MOVLW  02
2268:  MOVWF  xB3
226A:  MOVLW  FA
226C:  MOVWF  xCA
226E:  CALL   0626
2272:  DECFSZ xB3,F
2274:  BRA    226A
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2276:  MOVF   19,W
2278:  SUBLW  02
227A:  BTFSS  FD8.2
227C:  BRA    24B0
....................     
....................    lcd_gotoxy(1,1); 
227E:  MOVLW  01
2280:  MOVWF  xC5
2282:  MOVWF  xC6
2284:  CALL   0794
....................    printf(lcd_putc,"    Temporizador     "); 
2288:  MOVLW  A6
228A:  MOVWF  FF6
228C:  MOVLW  02
228E:  MOVWF  FF7
2290:  CALL   0854
....................    lcd_gotoxy(1,2); 
2294:  MOVLW  01
2296:  MOVWF  xC5
2298:  MOVLW  02
229A:  MOVWF  xC6
229C:  CALL   0794
....................    printf(lcd_putc,"       Luz UV        "); 
22A0:  MOVLW  BC
22A2:  MOVWF  FF6
22A4:  MOVLW  02
22A6:  MOVWF  FF7
22A8:  CALL   0854
....................    lcd_gotoxy(6,3); 
22AC:  MOVLW  06
22AE:  MOVWF  xC5
22B0:  MOVLW  03
22B2:  MOVWF  xC6
22B4:  CALL   0794
....................    printf(lcd_putc,"%02u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
22B8:  MOVFF  2A,B3
22BC:  MOVLW  01
22BE:  MOVWF  xB4
22C0:  CALL   0E18
22C4:  MOVLW  3A
22C6:  MOVWF  xC4
22C8:  CALL   07F6
22CC:  MOVFF  2B,B3
22D0:  MOVLW  01
22D2:  MOVWF  xB4
22D4:  CALL   0E18
22D8:  MOVLW  DB
22DA:  MOVWF  FF6
22DC:  MOVLW  02
22DE:  MOVWF  FF7
22E0:  MOVLW  08
22E2:  MOVWF  xB7
22E4:  CALL   0C88
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
22E8:  MOVLW  06
22EA:  ADDWF  2F,W
22EC:  MOVWF  xB3
22EE:  MOVWF  xC5
22F0:  MOVLW  04
22F2:  MOVWF  xC6
22F4:  CALL   0794
....................    lcd_putc(t[2]); 
22F8:  MOVFF  37,C4
22FC:  CALL   07F6
....................     
....................    if(UP) 
2300:  BSF    F92.5
2302:  BTFSS  F80.5
2304:  BRA    2340
....................    { 
....................       if(unidad2==1) 
2306:  DECFSZ 2F,W
2308:  BRA    2322
....................       { 
....................          if(tempo_minutos_pro<61) 
230A:  MOVF   2A,W
230C:  SUBLW  3C
230E:  BNC   2322
....................          { 
....................             tempo_minutos_pro++;delay_ms(300); 
2310:  INCF   2A,F
2312:  MOVLW  02
2314:  MOVWF  xB3
2316:  MOVLW  96
2318:  MOVWF  xCA
231A:  CALL   0626
231E:  DECFSZ xB3,F
2320:  BRA    2316
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
2322:  MOVF   2F,W
2324:  SUBLW  03
2326:  BNZ   2340
....................       { 
....................          if(tempo_segundos_pro<60) 
2328:  MOVF   2B,W
232A:  SUBLW  3B
232C:  BNC   2340
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
232E:  INCF   2B,F
2330:  MOVLW  02
2332:  MOVWF  xB3
2334:  MOVLW  96
2336:  MOVWF  xCA
2338:  CALL   0626
233C:  DECFSZ xB3,F
233E:  BRA    2334
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2340:  BSF    F96.0
2342:  BTFSS  F84.0
2344:  BRA    23B0
....................    { 
....................       if(unidad2==1) 
2346:  DECFSZ 2F,W
2348:  BRA    237A
....................       { 
....................          if(tempo_minutos_pro>0) 
234A:  MOVF   2A,F
234C:  BZ    2360
....................          { 
....................             tempo_minutos_pro--;delay_ms(300); 
234E:  DECF   2A,F
2350:  MOVLW  02
2352:  MOVWF  xB3
2354:  MOVLW  96
2356:  MOVWF  xCA
2358:  CALL   0626
235C:  DECFSZ xB3,F
235E:  BRA    2354
....................          } 
....................           
....................          if(tempo_minutos_pro>60) 
2360:  MOVF   2A,W
2362:  SUBLW  3C
2364:  BC    237A
....................          { 
....................             tempo_minutos_pro=60;delay_ms(300); 
2366:  MOVLW  3C
2368:  MOVWF  2A
236A:  MOVLW  02
236C:  MOVWF  xB3
236E:  MOVLW  96
2370:  MOVWF  xCA
2372:  CALL   0626
2376:  DECFSZ xB3,F
2378:  BRA    236E
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
237A:  MOVF   2F,W
237C:  SUBLW  03
237E:  BNZ   23B0
....................       { 
....................          if(tempo_segundos_pro>0) 
2380:  MOVF   2B,F
2382:  BZ    2396
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
2384:  DECF   2B,F
2386:  MOVLW  02
2388:  MOVWF  xB3
238A:  MOVLW  96
238C:  MOVWF  xCA
238E:  CALL   0626
2392:  DECFSZ xB3,F
2394:  BRA    238A
....................          } 
....................           
....................          if(tempo_segundos_pro>60) 
2396:  MOVF   2B,W
2398:  SUBLW  3C
239A:  BC    23B0
....................          { 
....................             tempo_segundos_pro=60;delay_ms(300); 
239C:  MOVLW  3C
239E:  MOVWF  2B
23A0:  MOVLW  02
23A2:  MOVWF  xB3
23A4:  MOVLW  96
23A6:  MOVWF  xCA
23A8:  CALL   0626
23AC:  DECFSZ xB3,F
23AE:  BRA    23A4
....................          } 
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
23B0:  BSF    F96.1
23B2:  BTFSS  F84.1
23B4:  BRA    23E2
....................    { 
....................       if(unidad2==1) 
23B6:  DECFSZ 2F,W
23B8:  BRA    23C0
....................       { 
....................          unidad2=3; 
23BA:  MOVLW  03
23BC:  MOVWF  2F
....................       } 
....................       else 
23BE:  BRA    23CA
....................       { 
....................          if(unidad2==3) 
23C0:  MOVF   2F,W
23C2:  SUBLW  03
23C4:  BNZ   23CA
....................          { 
....................             unidad2=1; 
23C6:  MOVLW  01
23C8:  MOVWF  2F
....................          } 
....................       } 
....................       delay_ms(500); 
23CA:  MOVLW  02
23CC:  MOVWF  xB3
23CE:  MOVLW  FA
23D0:  MOVWF  xCA
23D2:  CALL   0626
23D6:  DECFSZ xB3,F
23D8:  BRA    23CE
....................       printf(lcd_putc,"\f"); 
23DA:  MOVLW  0C
23DC:  MOVWF  xC4
23DE:  CALL   07F6
....................    } 
....................     
....................    if(LEFT) 
23E2:  BSF    F96.2
23E4:  BTFSS  F84.2
23E6:  BRA    24B0
....................    { 
....................       delay_ms(200); 
23E8:  MOVLW  C8
23EA:  MOVWF  xCA
23EC:  CALL   0626
....................       printf(lcd_putc,"\f"); 
23F0:  MOVLW  0C
23F2:  MOVWF  xC4
23F4:  CALL   07F6
....................       lcd_gotoxy(1,2); 
23F8:  MOVLW  01
23FA:  MOVWF  xC5
23FC:  MOVLW  02
23FE:  MOVWF  xC6
2400:  CALL   0794
....................       printf(lcd_putc,"Tiempo Almacenado"); 
2404:  MOVLW  E4
2406:  MOVWF  FF6
2408:  MOVLW  02
240A:  MOVWF  FF7
240C:  CALL   0854
....................       lcd_gotoxy(1,3); 
2410:  MOVLW  01
2412:  MOVWF  xC5
2414:  MOVLW  03
2416:  MOVWF  xC6
2418:  CALL   0794
....................       printf(lcd_putc,"  Correctamente  "); 
241C:  MOVLW  F6
241E:  MOVWF  FF6
2420:  MOVLW  02
2422:  MOVWF  FF7
2424:  CALL   0854
....................       write_eeprom(20,tempo_minutos_pro);write_eeprom(21,tempo_segundos_pro); 
2428:  MOVLW  14
242A:  MOVWF  FA9
242C:  MOVFF  2A,FA8
2430:  BCF    FA6.6
2432:  BCF    FA6.7
2434:  BSF    FA6.2
2436:  MOVF   FF2,W
2438:  MOVWF  00
243A:  BCF    FF2.7
243C:  MOVLB  F
243E:  MOVLW  55
2440:  MOVWF  FA7
2442:  MOVLW  AA
2444:  MOVWF  FA7
2446:  BSF    FA6.1
2448:  BTFSC  FA6.1
244A:  BRA    2448
244C:  BCF    FA6.2
244E:  MOVF   00,W
2450:  IORWF  FF2,F
2452:  MOVLW  15
2454:  MOVWF  FA9
2456:  MOVFF  2B,FA8
245A:  BCF    FA6.6
245C:  BCF    FA6.7
245E:  BSF    FA6.2
2460:  MOVF   FF2,W
2462:  MOVWF  00
2464:  BCF    FF2.7
2466:  MOVLW  55
2468:  MOVWF  FA7
246A:  MOVLW  AA
246C:  MOVWF  FA7
246E:  BSF    FA6.1
2470:  BTFSC  FA6.1
2472:  BRA    2470
2474:  BCF    FA6.2
2476:  MOVF   00,W
2478:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
247A:  MOVFF  2A,28
247E:  MOVFF  2B,29
....................       delay_ms(700); 
2482:  MOVLW  04
2484:  MOVLB  0
2486:  MOVWF  xB3
2488:  MOVLW  AF
248A:  MOVWF  xCA
248C:  CALL   0626
2490:  DECFSZ xB3,F
2492:  BRA    2488
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2494:  MOVLW  1E
2496:  MOVWF  xCA
2498:  CALL   0626
249C:  MOVLW  01
249E:  MOVWF  19
24A0:  CLRF   33
24A2:  MOVLW  02
24A4:  MOVWF  1D
24A6:  MOVWF  1F
24A8:  MOVLW  0C
24AA:  MOVWF  xC4
24AC:  CALL   07F6
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................    
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de estado de Motor Ventilador 
24B0:  MOVF   19,W
24B2:  SUBLW  03
24B4:  BTFSS  FD8.2
24B6:  BRA    2682
....................    lcd_gotoxy(1,1); 
24B8:  MOVLW  01
24BA:  MOVWF  xC5
24BC:  MOVWF  xC6
24BE:  CALL   0794
....................    printf(lcd_putc,"Seleccione Velocidad"); 
24C2:  MOVLW  08
24C4:  MOVWF  FF6
24C6:  MOVLW  03
24C8:  MOVWF  FF7
24CA:  CALL   0854
....................    lcd_gotoxy(1,2); 
24CE:  MOVLW  01
24D0:  MOVWF  xC5
24D2:  MOVLW  02
24D4:  MOVWF  xC6
24D6:  CALL   0794
....................    printf(lcd_putc,"    de Ventilador   "); 
24DA:  MOVLW  1E
24DC:  MOVWF  FF6
24DE:  MOVLW  03
24E0:  MOVWF  FF7
24E2:  CALL   0854
....................    lcd_gotoxy(8,3); 
24E6:  MOVLW  08
24E8:  MOVWF  xC5
24EA:  MOVLW  03
24EC:  MOVWF  xC6
24EE:  CALL   0794
....................    printf(lcd_putc,"%i ",Velocidad); 
24F2:  MOVFF  34,B3
24F6:  MOVLW  1F
24F8:  MOVWF  xB4
24FA:  CALL   0CCE
24FE:  MOVLW  20
2500:  MOVWF  xC4
2502:  CALL   07F6
....................  
....................    if(UP)//Si oprime hacia arriba 
2506:  BSF    F92.5
2508:  BTFSS  F80.5
250A:  BRA    251E
....................       {  if(Flanco == 0)  
250C:  BTFSC  17.3
250E:  BRA    251C
....................             {Velocidad++;Flanco = 1;delay_ms(30);}} 
2510:  INCF   34,F
2512:  BSF    17.3
2514:  MOVLW  1E
2516:  MOVWF  xCA
2518:  CALL   0626
....................          else 
251C:  BRA    2520
....................             {Flanco = 0;} 
251E:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2520:  BSF    F96.0
2522:  BTFSS  F84.0
2524:  BRA    2538
....................       {  if(Flanco2 == 0)  
2526:  BTFSC  17.5
2528:  BRA    2536
....................             {Velocidad--;Flanco2 = 1;delay_ms(30);}} 
252A:  DECF   34,F
252C:  BSF    17.5
252E:  MOVLW  1E
2530:  MOVWF  xCA
2532:  CALL   0626
....................          else 
2536:  BRA    253A
....................             {Flanco2 = 0;} 
2538:  BCF    17.5
....................        
....................              
....................       if(LEFT)//Si oprime Izquierda 
253A:  BSF    F96.2
253C:  BTFSS  F84.2
253E:  BRA    2564
....................       {  if(Flanco3 == 0)  
2540:  BTFSC  17.6
2542:  BRA    2562
....................             {Flecha=2;Flecha2=2;Flanco3 = 1;Menu=1; paso=0;delay_ms(500);}} 
2544:  MOVLW  02
2546:  MOVWF  1D
2548:  MOVWF  1F
254A:  BSF    17.6
254C:  MOVLW  01
254E:  MOVWF  19
2550:  CLRF   33
2552:  MOVLW  02
2554:  MOVWF  xB3
2556:  MOVLW  FA
2558:  MOVWF  xCA
255A:  CALL   0626
255E:  DECFSZ xB3,F
2560:  BRA    2556
....................          else 
2562:  BRA    2566
....................             {Flanco3 = 0;} 
2564:  BCF    17.6
....................          if(Velocidad<1) 
2566:  BTFSC  34.7
2568:  BRA    2570
256A:  MOVF   34,W
256C:  SUBLW  00
256E:  BNC   2574
....................             {Velocidad=4;} 
2570:  MOVLW  04
2572:  MOVWF  34
....................          if(Velocidad>4) 
2574:  BTFSC  34.7
2576:  BRA    2582
2578:  MOVF   34,W
257A:  SUBLW  04
257C:  BC    2582
....................             {Velocidad=1;}     
257E:  MOVLW  01
2580:  MOVWF  34
....................                      
....................       if(RIGHT)// Si oprime Derecha 
2582:  BSF    F96.1
2584:  BTFSS  F84.1
2586:  BRA    266C
....................       {  if(Flanco1 == 0)  
2588:  BTFSC  17.4
258A:  BRA    266A
....................             {Flanco1 = 1;Menu=1;paso=0; write_eeprom(5,Velocidad); 
258C:  BSF    17.4
258E:  MOVLW  01
2590:  MOVWF  19
2592:  CLRF   33
2594:  MOVLW  05
2596:  MOVWF  FA9
2598:  MOVFF  34,FA8
259C:  BCF    FA6.6
259E:  BCF    FA6.7
25A0:  BSF    FA6.2
25A2:  MOVF   FF2,W
25A4:  MOVWF  00
25A6:  BCF    FF2.7
25A8:  MOVLB  F
25AA:  MOVLW  55
25AC:  MOVWF  FA7
25AE:  MOVLW  AA
25B0:  MOVWF  FA7
25B2:  BSF    FA6.1
25B4:  BTFSC  FA6.1
25B6:  BRA    25B4
25B8:  BCF    FA6.2
25BA:  MOVF   00,W
25BC:  IORWF  FF2,F
....................                 
....................              if(estadomv==1) 
25BE:  BTFSS  17.2
25C0:  BRA    25CC
....................                {velocidades(Velocidad);} 
25C2:  MOVFF  34,B5
25C6:  MOVLB  0
25C8:  CALL   0E7E
....................                 
....................                lcd_gotoxy(1,1); 
25CC:  MOVLW  01
25CE:  MOVLB  0
25D0:  MOVWF  xC5
25D2:  MOVWF  xC6
25D4:  CALL   0794
....................                printf(lcd_putc,"                    "); 
25D8:  MOVLW  34
25DA:  MOVWF  FF6
25DC:  MOVLW  03
25DE:  MOVWF  FF7
25E0:  CALL   0854
....................                lcd_gotoxy(1,2); 
25E4:  MOVLW  01
25E6:  MOVWF  xC5
25E8:  MOVLW  02
25EA:  MOVWF  xC6
25EC:  CALL   0794
....................                printf(lcd_putc,"   Ha seleccionado  "); 
25F0:  MOVLW  4A
25F2:  MOVWF  FF6
25F4:  MOVLW  03
25F6:  MOVWF  FF7
25F8:  CALL   0854
....................                lcd_gotoxy(1,3); 
25FC:  MOVLW  01
25FE:  MOVWF  xC5
2600:  MOVLW  03
2602:  MOVWF  xC6
2604:  CALL   0794
....................                printf(lcd_putc,"  la velocidad  %i  ",Velocidad); 
2608:  MOVLW  60
260A:  MOVWF  FF6
260C:  MOVLW  03
260E:  MOVWF  FF7
2610:  MOVLW  10
2612:  MOVWF  xB7
2614:  CALL   0C88
2618:  MOVFF  34,B3
261C:  MOVLW  1F
261E:  MOVWF  xB4
2620:  CALL   0CCE
2624:  MOVLW  20
2626:  MOVWF  xC4
2628:  CALL   07F6
262C:  MOVLW  20
262E:  MOVWF  xC4
2630:  CALL   07F6
....................                lcd_gotoxy(1,4); 
2634:  MOVLW  01
2636:  MOVWF  xC5
2638:  MOVLW  04
263A:  MOVWF  xC6
263C:  CALL   0794
....................                printf(lcd_putc,"                    "); 
2640:  MOVLW  76
2642:  MOVWF  FF6
2644:  MOVLW  03
2646:  MOVWF  FF7
2648:  CALL   0854
....................               
....................             delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
264C:  MOVLW  04
264E:  MOVWF  xB3
2650:  MOVLW  FA
2652:  MOVWF  xCA
2654:  CALL   0626
2658:  DECFSZ xB3,F
265A:  BRA    2650
265C:  MOVLW  02
265E:  MOVWF  1D
2660:  MOVWF  1F
2662:  MOVLW  0C
2664:  MOVWF  xC4
2666:  CALL   07F6
....................          else 
266A:  BRA    266E
....................             {Flanco1 = 0;}    
266C:  BCF    17.4
....................  
....................         lcd_gotoxy(6,Flecha);// Para mostrar la flecha de seleccion 
266E:  MOVLW  06
2670:  MOVWF  xC5
2672:  MOVFF  1D,C6
2676:  CALL   0794
....................         lcd_putc(t[0]); 
267A:  MOVFF  35,C4
267E:  CALL   07F6
....................          
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu para Cambio de Contraseña 
2682:  MOVF   19,W
2684:  SUBLW  04
2686:  BTFSS  FD8.2
2688:  BRA    2982
....................    lcd_gotoxy(1,1); 
268A:  MOVLW  01
268C:  MOVWF  xC5
268E:  MOVWF  xC6
2690:  CALL   0794
....................    printf(lcd_putc,"      Ingrese       "); 
2694:  MOVLW  8C
2696:  MOVWF  FF6
2698:  MOVLW  03
269A:  MOVWF  FF7
269C:  CALL   0854
....................    lcd_gotoxy(1,2); 
26A0:  MOVLW  01
26A2:  MOVWF  xC5
26A4:  MOVLW  02
26A6:  MOVWF  xC6
26A8:  CALL   0794
....................    printf(lcd_putc," Contraseña Actual  "); 
26AC:  MOVLW  A2
26AE:  MOVWF  FF6
26B0:  MOVLW  03
26B2:  MOVWF  FF7
26B4:  CALL   0854
....................    lcd_gotoxy(1,3); 
26B8:  MOVLW  01
26BA:  MOVWF  xC5
26BC:  MOVLW  03
26BE:  MOVWF  xC6
26C0:  CALL   0794
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
26C4:  MOVLW  B8
26C6:  MOVWF  FF6
26C8:  MOVLW  03
26CA:  MOVWF  FF7
26CC:  MOVLW  0A
26CE:  MOVWF  xB7
26D0:  CALL   0C88
26D4:  MOVFF  38,B3
26D8:  MOVLW  1F
26DA:  MOVWF  xB4
26DC:  CALL   0CCE
26E0:  MOVFF  39,B3
26E4:  MOVLW  1F
26E6:  MOVWF  xB4
26E8:  CALL   0CCE
26EC:  MOVFF  3A,B3
26F0:  MOVLW  1F
26F2:  MOVWF  xB4
26F4:  CALL   0CCE
26F8:  MOVFF  3B,B3
26FC:  MOVLW  1F
26FE:  MOVWF  xB4
2700:  CALL   0CCE
2704:  MOVLW  20
2706:  MOVWF  xC4
2708:  CALL   07F6
270C:  MOVLW  20
270E:  MOVWF  xC4
2710:  CALL   07F6
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2714:  BSF    F92.5
2716:  BTFSS  F80.5
2718:  BRA    273C
....................       {  if(Flanco == 0)  
271A:  BTFSC  17.3
271C:  BRA    273A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
271E:  MOVLW  0B
2720:  SUBWF  1C,W
2722:  CLRF   03
2724:  ADDLW  38
2726:  MOVWF  FE9
2728:  MOVLW  00
272A:  ADDWFC 03,W
272C:  MOVWF  FEA
272E:  INCF   FEF,F
2730:  BSF    17.3
2732:  MOVLW  1E
2734:  MOVWF  xCA
2736:  CALL   0626
....................          else 
273A:  BRA    273E
....................             {Flanco = 0;} 
273C:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
273E:  BSF    F96.0
2740:  BTFSS  F84.0
2742:  BRA    2766
....................       {  if(Flanco2 == 0)  
2744:  BTFSC  17.5
2746:  BRA    2764
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2748:  MOVLW  0B
274A:  SUBWF  1C,W
274C:  CLRF   03
274E:  ADDLW  38
2750:  MOVWF  FE9
2752:  MOVLW  00
2754:  ADDWFC 03,W
2756:  MOVWF  FEA
2758:  DECF   FEF,F
275A:  BSF    17.5
275C:  MOVLW  1E
275E:  MOVWF  xCA
2760:  CALL   0626
....................          else 
2764:  BRA    2768
....................             {Flanco2 = 0;} 
2766:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
2768:  BSF    F96.1
276A:  BTFSS  F84.1
276C:  BRA    2788
....................       {  if(Flanco1 == 0)  
276E:  BTFSC  17.4
2770:  BRA    2786
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2772:  BSF    17.4
2774:  INCF   1C,F
2776:  MOVLW  1E
2778:  MOVWF  xCA
277A:  CALL   0626
277E:  MOVLW  0C
2780:  MOVWF  xC4
2782:  CALL   07F6
....................          else 
2786:  BRA    278A
....................             {Flanco1 = 0;}    
2788:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
278A:  BSF    F96.2
278C:  BTFSS  F84.2
278E:  BRA    27AA
....................       {  if(Flanco3 == 0)  
2790:  BTFSC  17.6
2792:  BRA    27A8
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2794:  BSF    17.6
2796:  DECF   1C,F
2798:  MOVLW  1E
279A:  MOVWF  xCA
279C:  CALL   0626
27A0:  MOVLW  0C
27A2:  MOVWF  xC4
27A4:  CALL   07F6
....................          else 
27A8:  BRA    27AC
....................             {Flanco3 = 0;}     
27AA:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
27AC:  MOVLW  0B
27AE:  SUBWF  1C,W
27B0:  CLRF   03
27B2:  ADDLW  38
27B4:  MOVWF  FE9
27B6:  MOVLW  00
27B8:  ADDWFC 03,W
27BA:  MOVWF  FEA
27BC:  BTFSC  FEF.7
27BE:  BRA    27C2
27C0:  BRA    27D6
....................        {clave[unidad-11]=9;} 
27C2:  MOVLW  0B
27C4:  SUBWF  1C,W
27C6:  CLRF   03
27C8:  ADDLW  38
27CA:  MOVWF  FE9
27CC:  MOVLW  00
27CE:  ADDWFC 03,W
27D0:  MOVWF  FEA
27D2:  MOVLW  09
27D4:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
27D6:  MOVLW  0B
27D8:  SUBWF  1C,W
27DA:  CLRF   03
27DC:  ADDLW  38
27DE:  MOVWF  FE9
27E0:  MOVLW  00
27E2:  ADDWFC 03,W
27E4:  MOVWF  FEA
27E6:  BTFSC  FEF.7
27E8:  BRA    2802
27EA:  MOVF   FEF,W
27EC:  SUBLW  09
27EE:  BC    2802
....................        {clave[unidad-11]=0;} 
27F0:  MOVLW  0B
27F2:  SUBWF  1C,W
27F4:  CLRF   03
27F6:  ADDLW  38
27F8:  MOVWF  FE9
27FA:  MOVLW  00
27FC:  ADDWFC 03,W
27FE:  MOVWF  FEA
2800:  CLRF   FEF
....................        if(unidad<11) 
2802:  MOVF   1C,W
2804:  SUBLW  0A
2806:  BNC   2828
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
2808:  MOVLW  01
280A:  MOVWF  19
280C:  CLRF   33
280E:  MOVLW  02
2810:  MOVWF  1D
2812:  MOVWF  1F
2814:  MOVLW  0B
2816:  MOVWF  1C
2818:  MOVLW  02
281A:  MOVWF  xB3
281C:  MOVLW  FA
281E:  MOVWF  xCA
2820:  CALL   0626
2824:  DECFSZ xB3,F
2826:  BRA    281C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2828:  MOVFF  1C,C5
282C:  MOVLW  04
282E:  MOVWF  xC6
2830:  CALL   0794
....................        lcd_putc(t[2]); 
2834:  MOVFF  37,C4
2838:  CALL   07F6
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
283C:  MOVF   1C,W
283E:  SUBLW  0E
2840:  BTFSC  FD8.0
2842:  BRA    295E
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
2844:  MOVF   3C,W
2846:  SUBWF  38,W
2848:  BNZ   28E4
284A:  MOVF   3D,W
284C:  SUBWF  39,W
284E:  BNZ   28E4
2850:  MOVF   3E,W
2852:  SUBWF  3A,W
2854:  BNZ   28E4
2856:  MOVF   3F,W
2858:  SUBWF  3B,W
285A:  BNZ   28E4
....................             {lcd_gotoxy(1,1); 
285C:  MOVLW  01
285E:  MOVWF  xC5
2860:  MOVWF  xC6
2862:  CALL   0794
....................             printf(lcd_putc,"                    "); 
2866:  MOVLW  CE
2868:  MOVWF  FF6
286A:  MOVLW  03
286C:  MOVWF  FF7
286E:  CALL   0854
....................             lcd_gotoxy(1,2); 
2872:  MOVLW  01
2874:  MOVWF  xC5
2876:  MOVLW  02
2878:  MOVWF  xC6
287A:  CALL   0794
....................             printf(lcd_putc,"     Contraseña     "); 
287E:  MOVLW  E4
2880:  MOVWF  FF6
2882:  MOVLW  03
2884:  MOVWF  FF7
2886:  CALL   0854
....................             lcd_gotoxy(1,3); 
288A:  MOVLW  01
288C:  MOVWF  xC5
288E:  MOVLW  03
2890:  MOVWF  xC6
2892:  CALL   0794
....................             printf(lcd_putc,"      Correcta      "); 
2896:  MOVLW  FA
2898:  MOVWF  FF6
289A:  MOVLW  03
289C:  MOVWF  FF7
289E:  CALL   0854
....................             lcd_gotoxy(1,4); 
28A2:  MOVLW  01
28A4:  MOVWF  xC5
28A6:  MOVLW  04
28A8:  MOVWF  xC6
28AA:  CALL   0794
....................             printf(lcd_putc,"                    "); 
28AE:  MOVLW  10
28B0:  MOVWF  FF6
28B2:  MOVLW  04
28B4:  MOVWF  FF7
28B6:  CALL   0854
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
28BA:  MOVLW  02
28BC:  MOVWF  xB3
28BE:  MOVLW  FA
28C0:  MOVWF  xCA
28C2:  CALL   0626
28C6:  DECFSZ xB3,F
28C8:  BRA    28BE
28CA:  MOVLW  3D
28CC:  MOVWF  19
28CE:  MOVLW  0B
28D0:  MOVWF  1C
28D2:  MOVLW  0C
28D4:  MOVWF  xC4
28D6:  CALL   07F6
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
28DA:  CLRF   38
28DC:  CLRF   39
28DE:  CLRF   3A
28E0:  CLRF   3B
....................          else 
28E2:  BRA    295E
....................          {lcd_gotoxy(1,1); 
28E4:  MOVLW  01
28E6:  MOVWF  xC5
28E8:  MOVWF  xC6
28EA:  CALL   0794
....................             printf(lcd_putc,"                    "); 
28EE:  MOVLW  26
28F0:  MOVWF  FF6
28F2:  MOVLW  04
28F4:  MOVWF  FF7
28F6:  CALL   0854
....................             lcd_gotoxy(1,2); 
28FA:  MOVLW  01
28FC:  MOVWF  xC5
28FE:  MOVLW  02
2900:  MOVWF  xC6
2902:  CALL   0794
....................             printf(lcd_putc,"     Contraseña     "); 
2906:  MOVLW  3C
2908:  MOVWF  FF6
290A:  MOVLW  04
290C:  MOVWF  FF7
290E:  CALL   0854
....................             lcd_gotoxy(1,3); 
2912:  MOVLW  01
2914:  MOVWF  xC5
2916:  MOVLW  03
2918:  MOVWF  xC6
291A:  CALL   0794
....................             printf(lcd_putc,"     Incorrecta     "); 
291E:  MOVLW  52
2920:  MOVWF  FF6
2922:  MOVLW  04
2924:  MOVWF  FF7
2926:  CALL   0854
....................             lcd_gotoxy(1,4); 
292A:  MOVLW  01
292C:  MOVWF  xC5
292E:  MOVLW  04
2930:  MOVWF  xC6
2932:  CALL   0794
....................             printf(lcd_putc,"                    "); 
2936:  MOVLW  68
2938:  MOVWF  FF6
293A:  MOVLW  04
293C:  MOVWF  FF7
293E:  CALL   0854
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
2942:  MOVLW  02
2944:  MOVWF  xB3
2946:  MOVLW  FA
2948:  MOVWF  xCA
294A:  CALL   0626
294E:  DECFSZ xB3,F
2950:  BRA    2946
2952:  MOVLW  0B
2954:  MOVWF  1C
2956:  MOVLW  0C
2958:  MOVWF  xC4
295A:  CALL   07F6
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
295E:  MOVF   1C,W
2960:  SUBLW  0B
2962:  BC    2982
2964:  MOVF   1C,W
2966:  SUBLW  0D
2968:  BNC   2982
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
296A:  MOVLW  01
296C:  SUBWF  1C,W
296E:  MOVWF  xB3
2970:  MOVWF  xC5
2972:  MOVLW  04
2974:  MOVWF  xC6
2976:  CALL   0794
....................             lcd_putc(t[1]); 
297A:  MOVFF  36,C4
297E:  CALL   07F6
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2982:  MOVF   19,W
2984:  SUBLW  3D
2986:  BTFSS  FD8.2
2988:  BRA    2C98
....................    lcd_gotoxy(1,1); 
298A:  MOVLW  01
298C:  MOVWF  xC5
298E:  MOVWF  xC6
2990:  CALL   0794
....................    printf(lcd_putc,"     Ingrese        "); 
2994:  MOVLW  7E
2996:  MOVWF  FF6
2998:  MOVLW  04
299A:  MOVWF  FF7
299C:  CALL   0854
....................    lcd_gotoxy(1,2); 
29A0:  MOVLW  01
29A2:  MOVWF  xC5
29A4:  MOVLW  02
29A6:  MOVWF  xC6
29A8:  CALL   0794
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
29AC:  MOVLW  94
29AE:  MOVWF  FF6
29B0:  MOVLW  04
29B2:  MOVWF  FF7
29B4:  CALL   0854
....................    lcd_gotoxy(1,3); 
29B8:  MOVLW  01
29BA:  MOVWF  xC5
29BC:  MOVLW  03
29BE:  MOVWF  xC6
29C0:  CALL   0794
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
29C4:  MOVLW  AA
29C6:  MOVWF  FF6
29C8:  MOVLW  04
29CA:  MOVWF  FF7
29CC:  MOVLW  0A
29CE:  MOVWF  xB7
29D0:  CALL   0C88
29D4:  MOVFF  38,B3
29D8:  MOVLW  1F
29DA:  MOVWF  xB4
29DC:  CALL   0CCE
29E0:  MOVFF  39,B3
29E4:  MOVLW  1F
29E6:  MOVWF  xB4
29E8:  CALL   0CCE
29EC:  MOVFF  3A,B3
29F0:  MOVLW  1F
29F2:  MOVWF  xB4
29F4:  CALL   0CCE
29F8:  MOVFF  3B,B3
29FC:  MOVLW  1F
29FE:  MOVWF  xB4
2A00:  CALL   0CCE
2A04:  MOVLW  20
2A06:  MOVWF  xC4
2A08:  CALL   07F6
2A0C:  MOVLW  20
2A0E:  MOVWF  xC4
2A10:  CALL   07F6
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
2A14:  BSF    F92.5
2A16:  BTFSS  F80.5
2A18:  BRA    2A3C
....................       {  if(Flanco == 0)  
2A1A:  BTFSC  17.3
2A1C:  BRA    2A3A
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
2A1E:  MOVLW  0B
2A20:  SUBWF  1C,W
2A22:  CLRF   03
2A24:  ADDLW  38
2A26:  MOVWF  FE9
2A28:  MOVLW  00
2A2A:  ADDWFC 03,W
2A2C:  MOVWF  FEA
2A2E:  INCF   FEF,F
2A30:  BSF    17.3
2A32:  MOVLW  1E
2A34:  MOVWF  xCA
2A36:  CALL   0626
....................          else 
2A3A:  BRA    2A3E
....................             {Flanco = 0;} 
2A3C:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2A3E:  BSF    F96.0
2A40:  BTFSS  F84.0
2A42:  BRA    2A66
....................       {  if(Flanco2 == 0)  
2A44:  BTFSC  17.5
2A46:  BRA    2A64
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
2A48:  MOVLW  0B
2A4A:  SUBWF  1C,W
2A4C:  CLRF   03
2A4E:  ADDLW  38
2A50:  MOVWF  FE9
2A52:  MOVLW  00
2A54:  ADDWFC 03,W
2A56:  MOVWF  FEA
2A58:  DECF   FEF,F
2A5A:  BSF    17.5
2A5C:  MOVLW  1E
2A5E:  MOVWF  xCA
2A60:  CALL   0626
....................          else 
2A64:  BRA    2A68
....................             {Flanco2 = 0;} 
2A66:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
2A68:  BSF    F96.1
2A6A:  BTFSS  F84.1
2A6C:  BRA    2A88
....................       {  if(Flanco1 == 0)  
2A6E:  BTFSC  17.4
2A70:  BRA    2A86
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2A72:  BSF    17.4
2A74:  INCF   1C,F
2A76:  MOVLW  1E
2A78:  MOVWF  xCA
2A7A:  CALL   0626
2A7E:  MOVLW  0C
2A80:  MOVWF  xC4
2A82:  CALL   07F6
....................          else 
2A86:  BRA    2A8A
....................             {Flanco1 = 0;}    
2A88:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2A8A:  BSF    F96.2
2A8C:  BTFSS  F84.2
2A8E:  BRA    2AAA
....................       {  if(Flanco3 == 0)  
2A90:  BTFSC  17.6
2A92:  BRA    2AA8
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
2A94:  BSF    17.6
2A96:  DECF   1C,F
2A98:  MOVLW  1E
2A9A:  MOVWF  xCA
2A9C:  CALL   0626
2AA0:  MOVLW  0C
2AA2:  MOVWF  xC4
2AA4:  CALL   07F6
....................          else 
2AA8:  BRA    2AAC
....................             {Flanco3 = 0;}     
2AAA:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2AAC:  MOVLW  0B
2AAE:  SUBWF  1C,W
2AB0:  CLRF   03
2AB2:  ADDLW  38
2AB4:  MOVWF  FE9
2AB6:  MOVLW  00
2AB8:  ADDWFC 03,W
2ABA:  MOVWF  FEA
2ABC:  BTFSC  FEF.7
2ABE:  BRA    2AC2
2AC0:  BRA    2AD6
....................        {clave[unidad-11]=9;} 
2AC2:  MOVLW  0B
2AC4:  SUBWF  1C,W
2AC6:  CLRF   03
2AC8:  ADDLW  38
2ACA:  MOVWF  FE9
2ACC:  MOVLW  00
2ACE:  ADDWFC 03,W
2AD0:  MOVWF  FEA
2AD2:  MOVLW  09
2AD4:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
2AD6:  MOVLW  0B
2AD8:  SUBWF  1C,W
2ADA:  CLRF   03
2ADC:  ADDLW  38
2ADE:  MOVWF  FE9
2AE0:  MOVLW  00
2AE2:  ADDWFC 03,W
2AE4:  MOVWF  FEA
2AE6:  BTFSC  FEF.7
2AE8:  BRA    2B02
2AEA:  MOVF   FEF,W
2AEC:  SUBLW  09
2AEE:  BC    2B02
....................        {clave[unidad-11]=0;} 
2AF0:  MOVLW  0B
2AF2:  SUBWF  1C,W
2AF4:  CLRF   03
2AF6:  ADDLW  38
2AF8:  MOVWF  FE9
2AFA:  MOVLW  00
2AFC:  ADDWFC 03,W
2AFE:  MOVWF  FEA
2B00:  CLRF   FEF
....................        if(unidad<11) 
2B02:  MOVF   1C,W
2B04:  SUBLW  0A
2B06:  BNC   2B10
....................        {Menu=5;unidad=11;} 
2B08:  MOVLW  05
2B0A:  MOVWF  19
2B0C:  MOVLW  0B
2B0E:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2B10:  MOVFF  1C,C5
2B14:  MOVLW  04
2B16:  MOVWF  xC6
2B18:  CALL   0794
....................        lcd_putc(t[2]); 
2B1C:  MOVFF  37,C4
2B20:  CALL   07F6
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
2B24:  MOVF   1C,W
2B26:  SUBLW  0E
2B28:  BTFSC  FD8.0
2B2A:  BRA    2C74
....................        { 
....................             lcd_gotoxy(1,1); 
2B2C:  MOVLW  01
2B2E:  MOVWF  xC5
2B30:  MOVWF  xC6
2B32:  CALL   0794
....................             printf(lcd_putc,"                    "); 
2B36:  MOVLW  C0
2B38:  MOVWF  FF6
2B3A:  MOVLW  04
2B3C:  MOVWF  FF7
2B3E:  CALL   0854
....................             lcd_gotoxy(1,2); 
2B42:  MOVLW  01
2B44:  MOVWF  xC5
2B46:  MOVLW  02
2B48:  MOVWF  xC6
2B4A:  CALL   0794
....................             printf(lcd_putc,"     Contraseña     "); 
2B4E:  MOVLW  D6
2B50:  MOVWF  FF6
2B52:  MOVLW  04
2B54:  MOVWF  FF7
2B56:  CALL   0854
....................             lcd_gotoxy(1,3); 
2B5A:  MOVLW  01
2B5C:  MOVWF  xC5
2B5E:  MOVLW  03
2B60:  MOVWF  xC6
2B62:  CALL   0794
....................             printf(lcd_putc,"     Almacenada     "); 
2B66:  MOVLW  EC
2B68:  MOVWF  FF6
2B6A:  MOVLW  04
2B6C:  MOVWF  FF7
2B6E:  CALL   0854
....................             lcd_gotoxy(1,4); 
2B72:  MOVLW  01
2B74:  MOVWF  xC5
2B76:  MOVLW  04
2B78:  MOVWF  xC6
2B7A:  CALL   0794
....................             printf(lcd_putc,"                    "); 
2B7E:  MOVLW  02
2B80:  MOVWF  FF6
2B82:  MOVLW  05
2B84:  MOVWF  FF7
2B86:  CALL   0854
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2B8A:  CLRF   FA9
2B8C:  MOVFF  38,FA8
2B90:  BCF    FA6.6
2B92:  BCF    FA6.7
2B94:  BSF    FA6.2
2B96:  MOVF   FF2,W
2B98:  MOVWF  00
2B9A:  BCF    FF2.7
2B9C:  MOVLB  F
2B9E:  MOVLW  55
2BA0:  MOVWF  FA7
2BA2:  MOVLW  AA
2BA4:  MOVWF  FA7
2BA6:  BSF    FA6.1
2BA8:  BTFSC  FA6.1
2BAA:  BRA    2BA8
2BAC:  BCF    FA6.2
2BAE:  MOVF   00,W
2BB0:  IORWF  FF2,F
2BB2:  MOVLW  14
2BB4:  MOVLB  0
2BB6:  MOVWF  xCA
2BB8:  CALL   0626
2BBC:  MOVLW  01
2BBE:  MOVWF  FA9
2BC0:  MOVFF  39,FA8
2BC4:  BCF    FA6.6
2BC6:  BCF    FA6.7
2BC8:  BSF    FA6.2
2BCA:  MOVF   FF2,W
2BCC:  MOVWF  00
2BCE:  BCF    FF2.7
2BD0:  MOVLB  F
2BD2:  MOVLW  55
2BD4:  MOVWF  FA7
2BD6:  MOVLW  AA
2BD8:  MOVWF  FA7
2BDA:  BSF    FA6.1
2BDC:  BTFSC  FA6.1
2BDE:  BRA    2BDC
2BE0:  BCF    FA6.2
2BE2:  MOVF   00,W
2BE4:  IORWF  FF2,F
2BE6:  MOVLW  14
2BE8:  MOVLB  0
2BEA:  MOVWF  xCA
2BEC:  CALL   0626
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2BF0:  MOVLW  02
2BF2:  MOVWF  FA9
2BF4:  MOVFF  3A,FA8
2BF8:  BCF    FA6.6
2BFA:  BCF    FA6.7
2BFC:  BSF    FA6.2
2BFE:  MOVF   FF2,W
2C00:  MOVWF  00
2C02:  BCF    FF2.7
2C04:  MOVLB  F
2C06:  MOVLW  55
2C08:  MOVWF  FA7
2C0A:  MOVLW  AA
2C0C:  MOVWF  FA7
2C0E:  BSF    FA6.1
2C10:  BTFSC  FA6.1
2C12:  BRA    2C10
2C14:  BCF    FA6.2
2C16:  MOVF   00,W
2C18:  IORWF  FF2,F
2C1A:  MOVLW  14
2C1C:  MOVLB  0
2C1E:  MOVWF  xCA
2C20:  CALL   0626
2C24:  MOVLW  03
2C26:  MOVWF  FA9
2C28:  MOVFF  3B,FA8
2C2C:  BCF    FA6.6
2C2E:  BCF    FA6.7
2C30:  BSF    FA6.2
2C32:  MOVF   FF2,W
2C34:  MOVWF  00
2C36:  BCF    FF2.7
2C38:  MOVLB  F
2C3A:  MOVLW  55
2C3C:  MOVWF  FA7
2C3E:  MOVLW  AA
2C40:  MOVWF  FA7
2C42:  BSF    FA6.1
2C44:  BTFSC  FA6.1
2C46:  BRA    2C44
2C48:  BCF    FA6.2
2C4A:  MOVF   00,W
2C4C:  IORWF  FF2,F
2C4E:  MOVLW  14
2C50:  MOVLB  0
2C52:  MOVWF  xCA
2C54:  CALL   0626
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2C58:  MOVLW  02
2C5A:  MOVWF  xB3
2C5C:  MOVLW  FA
2C5E:  MOVWF  xCA
2C60:  CALL   0626
2C64:  DECFSZ xB3,F
2C66:  BRA    2C5C
2C68:  MOVLW  01
2C6A:  MOVWF  19
2C6C:  CLRF   33
2C6E:  MOVLW  02
2C70:  MOVWF  1D
2C72:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2C74:  MOVF   1C,W
2C76:  SUBLW  0B
2C78:  BC    2C98
2C7A:  MOVF   1C,W
2C7C:  SUBLW  0D
2C7E:  BNC   2C98
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2C80:  MOVLW  01
2C82:  SUBWF  1C,W
2C84:  MOVWF  xB3
2C86:  MOVWF  xC5
2C88:  MOVLW  04
2C8A:  MOVWF  xC6
2C8C:  CALL   0794
....................             lcd_putc(t[1]); 
2C90:  MOVFF  36,C4
2C94:  CALL   07F6
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de tiempo de trabajo de Luz UV 
2C98:  MOVF   19,W
2C9A:  SUBLW  05
2C9C:  BNZ   2D10
....................    lcd_gotoxy(1,1); 
2C9E:  MOVLW  01
2CA0:  MOVWF  xC5
2CA2:  MOVWF  xC6
2CA4:  CALL   0794
....................    printf(lcd_putc,"  Duracion Actual   "); 
2CA8:  MOVLW  18
2CAA:  MOVWF  FF6
2CAC:  MOVLW  05
2CAE:  MOVWF  FF7
2CB0:  CALL   0854
....................    lcd_gotoxy(1,2); 
2CB4:  MOVLW  01
2CB6:  MOVWF  xC5
2CB8:  MOVLW  02
2CBA:  MOVWF  xC6
2CBC:  CALL   0794
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2CC0:  MOVLW  2E
2CC2:  MOVWF  FF6
2CC4:  MOVLW  05
2CC6:  MOVWF  FF7
2CC8:  MOVLW  0B
2CCA:  MOVWF  xB7
2CCC:  CALL   0C88
2CD0:  MOVLW  08
2CD2:  MOVWF  FE9
2CD4:  MOVFF  44,B4
2CD8:  MOVFF  43,B3
2CDC:  GOTO   0EEA
2CE0:  MOVLW  20
2CE2:  MOVWF  xC4
2CE4:  CALL   07F6
2CE8:  MOVLW  20
2CEA:  MOVWF  xC4
2CEC:  CALL   07F6
2CF0:  MOVLW  20
2CF2:  MOVWF  xC4
2CF4:  CALL   07F6
....................    lcd_gotoxy(1,4); 
2CF8:  MOVLW  01
2CFA:  MOVWF  xC5
2CFC:  MOVLW  04
2CFE:  MOVWF  xC6
2D00:  CALL   0794
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2D04:  MOVLW  42
2D06:  MOVWF  FF6
2D08:  MOVLW  05
2D0A:  MOVWF  FF7
2D0C:  CALL   0854
....................     
....................    } 
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2D10:  BSF    F92.5
2D12:  BTFSS  F80.5
2D14:  BRA    2E06
2D16:  BSF    F96.1
2D18:  BTFSS  F84.1
2D1A:  BRA    2E06
....................       {   
....................          delay_ms(200); 
2D1C:  MOVLW  C8
2D1E:  MOVWF  xCA
2D20:  CALL   0626
....................          printf(lcd_putc,"\f"); 
2D24:  MOVLW  0C
2D26:  MOVWF  xC4
2D28:  CALL   07F6
....................          lcd_gotoxy(1,2); 
2D2C:  MOVLW  01
2D2E:  MOVWF  xC5
2D30:  MOVLW  02
2D32:  MOVWF  xC6
2D34:  CALL   0794
....................          printf(lcd_putc," Reset de tiempo "); 
2D38:  MOVLW  58
2D3A:  MOVWF  FF6
2D3C:  MOVLW  05
2D3E:  MOVWF  FF7
2D40:  CALL   0854
....................          lcd_gotoxy(1,3); 
2D44:  MOVLW  01
2D46:  MOVWF  xC5
2D48:  MOVLW  03
2D4A:  MOVWF  xC6
2D4C:  CALL   0794
....................          printf(lcd_putc,"     Exitoso     "); 
2D50:  MOVLW  6A
2D52:  MOVWF  FF6
2D54:  MOVLW  05
2D56:  MOVWF  FF7
2D58:  CALL   0854
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2D5C:  MOVLW  32
2D5E:  MOVWF  FA9
2D60:  CLRF   FA8
2D62:  BCF    FA6.6
2D64:  BCF    FA6.7
2D66:  BSF    FA6.2
2D68:  MOVF   FF2,W
2D6A:  MOVWF  00
2D6C:  BCF    FF2.7
2D6E:  MOVLB  F
2D70:  MOVLW  55
2D72:  MOVWF  FA7
2D74:  MOVLW  AA
2D76:  MOVWF  FA7
2D78:  BSF    FA6.1
2D7A:  BTFSC  FA6.1
2D7C:  BRA    2D7A
2D7E:  BCF    FA6.2
2D80:  MOVF   00,W
2D82:  IORWF  FF2,F
2D84:  MOVLW  33
2D86:  MOVWF  FA9
2D88:  CLRF   FA8
2D8A:  BCF    FA6.6
2D8C:  BCF    FA6.7
2D8E:  BSF    FA6.2
2D90:  MOVF   FF2,W
2D92:  MOVWF  00
2D94:  BCF    FF2.7
2D96:  MOVLW  55
2D98:  MOVWF  FA7
2D9A:  MOVLW  AA
2D9C:  MOVWF  FA7
2D9E:  BSF    FA6.1
2DA0:  BTFSC  FA6.1
2DA2:  BRA    2DA0
2DA4:  BCF    FA6.2
2DA6:  MOVF   00,W
2DA8:  IORWF  FF2,F
2DAA:  MOVLW  34
2DAC:  MOVWF  FA9
2DAE:  CLRF   FA8
2DB0:  BCF    FA6.6
2DB2:  BCF    FA6.7
2DB4:  BSF    FA6.2
2DB6:  MOVF   FF2,W
2DB8:  MOVWF  00
2DBA:  BCF    FF2.7
2DBC:  MOVLW  55
2DBE:  MOVWF  FA7
2DC0:  MOVLW  AA
2DC2:  MOVWF  FA7
2DC4:  BSF    FA6.1
2DC6:  BTFSC  FA6.1
2DC8:  BRA    2DC6
2DCA:  BCF    FA6.2
2DCC:  MOVF   00,W
2DCE:  IORWF  FF2,F
....................          delay_ms(700); 
2DD0:  MOVLW  04
2DD2:  MOVLB  0
2DD4:  MOVWF  xB3
2DD6:  MOVLW  AF
2DD8:  MOVWF  xCA
2DDA:  CALL   0626
2DDE:  DECFSZ xB3,F
2DE0:  BRA    2DD6
....................          segundos=0;minutos=0;horas=0; 
2DE2:  CLRF   22
2DE4:  CLRF   23
2DE6:  CLRF   44
2DE8:  CLRF   43
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2DEA:  MOVLW  1E
2DEC:  MOVWF  xCA
2DEE:  CALL   0626
2DF2:  MOVLW  01
2DF4:  MOVWF  19
2DF6:  CLRF   33
2DF8:  MOVLW  02
2DFA:  MOVWF  1D
2DFC:  MOVWF  1F
2DFE:  MOVLW  0C
2E00:  MOVWF  xC4
2E02:  CALL   07F6
....................       } 
....................              
....................       if(LEFT)// Si oprime Izquierda 
2E06:  BSF    F96.2
2E08:  BTFSS  F84.2
2E0A:  BRA    2E38
....................       { 
....................          if(Flanco3 == 0) 
2E0C:  BTFSC  17.6
2E0E:  BRA    2E36
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2E10:  BSF    17.6
2E12:  MOVLW  02
2E14:  MOVWF  xB3
2E16:  MOVLW  FA
2E18:  MOVWF  xCA
2E1A:  CALL   0626
2E1E:  DECFSZ xB3,F
2E20:  BRA    2E16
2E22:  MOVLW  01
2E24:  MOVWF  19
2E26:  CLRF   33
2E28:  MOVLW  02
2E2A:  MOVWF  1D
2E2C:  MOVWF  1F
2E2E:  MOVLW  0C
2E30:  MOVWF  xC4
2E32:  CALL   07F6
....................          } 
....................       } 
....................       else 
2E36:  BRA    2E3A
....................       { 
....................          Flanco3 = 0; 
2E38:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de Punto Cero 
2E3A:  MOVF   19,W
2E3C:  SUBLW  06
2E3E:  BTFSS  FD8.2
2E40:  BRA    3060
....................       lcd_gotoxy(1,1); 
2E42:  MOVLW  01
2E44:  MOVWF  xC5
2E46:  MOVWF  xC6
2E48:  CALL   0794
....................       printf(lcd_putc,"  Zero Point Config "); 
2E4C:  MOVLW  7C
2E4E:  MOVWF  FF6
2E50:  MOVLW  05
2E52:  MOVWF  FF7
2E54:  CALL   0854
....................       lcd_gotoxy(1,2); 
2E58:  MOVLW  01
2E5A:  MOVWF  xC5
2E5C:  MOVLW  02
2E5E:  MOVWF  xC6
2E60:  CALL   0794
....................       printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2E64:  MOVLW  05
2E66:  MOVWF  xB3
2E68:  CALL   1014
2E6C:  MOVFF  00,B3
2E70:  MOVFF  01,B4
2E74:  MOVFF  02,B5
2E78:  MOVFF  03,B6
2E7C:  MOVFF  03,CA
2E80:  MOVFF  02,C9
2E84:  MOVFF  01,C8
2E88:  MOVFF  00,C7
2E8C:  MOVLW  D7
2E8E:  MOVWF  xCE
2E90:  MOVLW  A3
2E92:  MOVWF  xCD
2E94:  CLRF   xCC
2E96:  MOVLW  81
2E98:  MOVWF  xCB
2E9A:  CALL   11AE
2E9E:  MOVFF  00,B3
2EA2:  MOVFF  01,B4
2EA6:  MOVFF  02,B5
2EAA:  MOVFF  03,B6
2EAE:  MOVLW  92
2EB0:  MOVWF  FF6
2EB2:  MOVLW  05
2EB4:  MOVWF  FF7
2EB6:  MOVLW  09
2EB8:  MOVWF  xB7
2EBA:  CALL   0C88
2EBE:  MOVLW  02
2EC0:  MOVWF  FE9
2EC2:  MOVFF  B6,BA
2EC6:  MOVFF  B5,B9
2ECA:  MOVFF  B4,B8
2ECE:  MOVFF  B3,B7
2ED2:  MOVWF  xBB
2ED4:  CALL   135A
2ED8:  MOVLW  A0
2EDA:  MOVWF  FF6
2EDC:  MOVLW  05
2EDE:  MOVWF  FF7
2EE0:  MOVLW  07
2EE2:  MOVWF  xB7
2EE4:  CALL   0C88
....................       lcd_gotoxy(1,3); 
2EE8:  MOVLW  01
2EEA:  MOVWF  xC5
2EEC:  MOVLW  03
2EEE:  MOVWF  xC6
2EF0:  CALL   0794
....................       printf(lcd_putc,"    ADC=%2.0f",sensores(1)); 
2EF4:  MOVLW  01
2EF6:  MOVWF  xB8
2EF8:  CALL   0742
2EFC:  MOVFF  00,B3
2F00:  MOVFF  01,B4
2F04:  MOVFF  02,B5
2F08:  MOVFF  03,B6
2F0C:  MOVLW  A8
2F0E:  MOVWF  FF6
2F10:  MOVLW  05
2F12:  MOVWF  FF7
2F14:  MOVLW  08
2F16:  MOVWF  xB7
2F18:  CALL   0C88
2F1C:  MOVLW  01
2F1E:  MOVWF  FE9
2F20:  MOVFF  B6,BA
2F24:  MOVFF  B5,B9
2F28:  MOVFF  B4,B8
2F2C:  MOVFF  B3,B7
2F30:  CLRF   xBB
2F32:  CALL   135A
....................       lcd_gotoxy(1,4); 
2F36:  MOVLW  01
2F38:  MOVWF  xC5
2F3A:  MOVLW  04
2F3C:  MOVWF  xC6
2F3E:  CALL   0794
....................       printf(lcd_putc,"    ZF=%2.0f",G); 
2F42:  MOVLW  B6
2F44:  MOVWF  FF6
2F46:  MOVLW  05
2F48:  MOVWF  FF7
2F4A:  MOVLW  07
2F4C:  MOVWF  xB7
2F4E:  CALL   0C88
2F52:  MOVLW  01
2F54:  MOVWF  FE9
2F56:  MOVFF  B2,BA
2F5A:  MOVFF  B1,B9
2F5E:  MOVFF  B0,B8
2F62:  MOVFF  AF,B7
2F66:  CLRF   xBB
2F68:  CALL   135A
....................      
....................       if(RIGHT)// Si oprime derecha 
2F6C:  BSF    F96.1
2F6E:  BTFSS  F84.1
2F70:  BRA    3030
....................       {  if(Flanco1 == 0)  
2F72:  BTFSC  17.4
2F74:  BRA    302E
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2F76:  MOVLW  01
2F78:  MOVWF  19
2F7A:  CLRF   33
2F7C:  MOVLW  02
2F7E:  MOVWF  1D
2F80:  MOVWF  1F
2F82:  MOVLW  0B
2F84:  MOVWF  1C
2F86:  MOVLW  02
2F88:  MOVWF  xB3
2F8A:  MOVLW  FA
2F8C:  MOVWF  xCA
2F8E:  CALL   0626
2F92:  DECFSZ xB3,F
2F94:  BRA    2F8A
2F96:  MOVLW  0C
2F98:  MOVWF  xC4
2F9A:  CALL   07F6
....................             G=sensores(1); 
2F9E:  MOVLW  01
2FA0:  MOVWF  xB8
2FA2:  CALL   0742
2FA6:  MOVFF  03,B2
2FAA:  MOVFF  02,B1
2FAE:  MOVFF  01,B0
2FB2:  MOVFF  00,AF
....................             G16=(int16)G; 
2FB6:  MOVFF  B2,CA
2FBA:  MOVFF  B1,C9
2FBE:  MOVFF  B0,C8
2FC2:  MOVFF  AF,C7
2FC6:  CALL   14E0
2FCA:  MOVFF  02,46
2FCE:  MOVFF  01,45
....................             G_l=G16; G_h=(G16>>8); 
2FD2:  MOVFF  45,26
2FD6:  MOVFF  46,27
....................              
....................             write_eeprom(60,G_l);write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
2FDA:  MOVLW  3C
2FDC:  MOVWF  FA9
2FDE:  MOVFF  26,FA8
2FE2:  BCF    FA6.6
2FE4:  BCF    FA6.7
2FE6:  BSF    FA6.2
2FE8:  MOVF   FF2,W
2FEA:  MOVWF  00
2FEC:  BCF    FF2.7
2FEE:  MOVLB  F
2FF0:  MOVLW  55
2FF2:  MOVWF  FA7
2FF4:  MOVLW  AA
2FF6:  MOVWF  FA7
2FF8:  BSF    FA6.1
2FFA:  BTFSC  FA6.1
2FFC:  BRA    2FFA
2FFE:  BCF    FA6.2
3000:  MOVF   00,W
3002:  IORWF  FF2,F
3004:  MOVLW  3D
3006:  MOVWF  FA9
3008:  MOVFF  27,FA8
300C:  BCF    FA6.6
300E:  BCF    FA6.7
3010:  BSF    FA6.2
3012:  MOVF   FF2,W
3014:  MOVWF  00
3016:  BCF    FF2.7
3018:  MOVLW  55
301A:  MOVWF  FA7
301C:  MOVLW  AA
301E:  MOVWF  FA7
3020:  BSF    FA6.1
3022:  BTFSC  FA6.1
3024:  BRA    3022
3026:  BCF    FA6.2
3028:  MOVF   00,W
302A:  IORWF  FF2,F
302C:  MOVLB  0
....................             }} 
....................          else 
302E:  BRA    3032
....................             {Flanco1 = 0;}    
3030:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
3032:  BSF    F96.2
3034:  BTFSS  F84.2
3036:  BRA    305E
....................       {  if(Flanco3 == 0)  
3038:  BTFSC  17.6
303A:  BRA    305C
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
303C:  MOVLW  01
303E:  MOVWF  19
3040:  CLRF   33
3042:  MOVLW  02
3044:  MOVWF  1D
3046:  MOVWF  1F
3048:  MOVLW  0B
304A:  MOVWF  1C
304C:  MOVLW  1E
304E:  MOVWF  xCA
3050:  CALL   0626
3054:  MOVLW  0C
3056:  MOVWF  xC4
3058:  CALL   07F6
....................          else 
305C:  BRA    3060
....................             {Flanco3 = 0;}   
305E:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
3060:  MOVF   19,W
3062:  SUBLW  64
3064:  BTFSS  FD8.2
3066:  BRA    3494
....................     
....................    lcd_gotoxy(1,1); 
3068:  MOVLW  01
306A:  MOVWF  xC5
306C:  MOVWF  xC6
306E:  CALL   0794
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
3072:  MOVFF  A6,CA
3076:  MOVFF  A5,C9
307A:  MOVFF  A4,C8
307E:  MOVFF  A3,C7
3082:  MOVLW  D7
3084:  MOVWF  xCE
3086:  MOVLW  A3
3088:  MOVWF  xCD
308A:  CLRF   xCC
308C:  MOVLW  81
308E:  MOVWF  xCB
3090:  CALL   11AE
3094:  MOVFF  00,B3
3098:  MOVFF  01,B4
309C:  MOVFF  02,B5
30A0:  MOVFF  03,B6
30A4:  MOVLW  C4
30A6:  MOVWF  FF6
30A8:  MOVLW  05
30AA:  MOVWF  FF7
30AC:  MOVLW  08
30AE:  MOVWF  xB7
30B0:  CALL   0C88
30B4:  MOVLW  02
30B6:  MOVWF  FE9
30B8:  MOVFF  B6,BA
30BC:  MOVFF  B5,B9
30C0:  MOVFF  B4,B8
30C4:  MOVFF  B3,B7
30C8:  MOVWF  xBB
30CA:  CALL   135A
30CE:  MOVLW  D1
30D0:  MOVWF  FF6
30D2:  MOVLW  05
30D4:  MOVWF  FF7
30D6:  MOVLW  07
30D8:  MOVWF  xB7
30DA:  CALL   0C88
....................    lcd_gotoxy(1,2); 
30DE:  MOVLW  01
30E0:  MOVWF  xC5
30E2:  MOVLW  02
30E4:  MOVWF  xC6
30E6:  CALL   0794
....................    printf(lcd_putc,"Filtro:"); 
30EA:  MOVLW  DA
30EC:  MOVWF  FF6
30EE:  MOVLW  05
30F0:  MOVWF  FF7
30F2:  CALL   0854
....................     
....................    if(Lectura==1) 
30F6:  BTFSS  18.0
30F8:  BRA    3114
....................    { 
....................       Lectura=0; 
30FA:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
30FC:  MOVLW  05
30FE:  MOVWF  xB3
3100:  CALL   1014
3104:  MOVFF  03,A6
3108:  MOVFF  02,A5
310C:  MOVFF  01,A4
3110:  MOVFF  00,A3
....................    } 
....................     
....................    lcd_gotoxy(10,3); 
3114:  MOVLW  0A
3116:  MOVWF  xC5
3118:  MOVLW  03
311A:  MOVWF  xC6
311C:  CALL   0794
....................    printf(lcd_putc,"Tempo:%02u:%02u",tempo_minutos,tempo_segundos); 
3120:  MOVLW  E2
3122:  MOVWF  FF6
3124:  MOVLW  05
3126:  MOVWF  FF7
3128:  MOVLW  06
312A:  MOVWF  xB7
312C:  CALL   0C88
3130:  MOVFF  28,B3
3134:  MOVLW  01
3136:  MOVWF  xB4
3138:  CALL   0E18
313C:  MOVLW  3A
313E:  MOVWF  xC4
3140:  CALL   07F6
3144:  MOVFF  29,B3
3148:  MOVLW  01
314A:  MOVWF  xB4
314C:  CALL   0E18
....................     
....................    if(estadomv==1) 
3150:  BTFSS  17.2
3152:  BRA    318E
....................    { 
....................       lcd_gotoxy(1,4); 
3154:  MOVLW  01
3156:  MOVWF  xC5
3158:  MOVLW  04
315A:  MOVWF  xC6
315C:  CALL   0794
....................       printf(lcd_putc,"Motor:ON "); 
3160:  MOVLW  F2
3162:  MOVWF  FF6
3164:  MOVLW  05
3166:  MOVWF  FF7
3168:  CALL   0854
....................       velocidades(read_eeprom(5)); 
316C:  MOVFF  FF2,B3
3170:  BCF    FF2.7
3172:  MOVLW  05
3174:  MOVWF  FA9
3176:  BCF    FA6.6
3178:  BCF    FA6.7
317A:  BSF    FA6.0
317C:  MOVF   FA8,W
317E:  BTFSC  xB3.7
3180:  BSF    FF2.7
3182:  MOVWF  xB4
3184:  MOVFF  B4,B5
3188:  CALL   0E7E
....................    } 
....................    else 
318C:  BRA    31B4
....................    { 
....................       lcd_gotoxy(1,4); 
318E:  MOVLW  01
3190:  MOVWF  xC5
3192:  MOVLW  04
3194:  MOVWF  xC6
3196:  CALL   0794
....................       printf(lcd_putc,"Motor:OFF"); 
319A:  MOVLW  FC
319C:  MOVWF  FF6
319E:  MOVLW  05
31A0:  MOVWF  FF7
31A2:  CALL   0854
....................       velocidades(0);  
31A6:  CLRF   xB5
31A8:  CALL   0E7E
....................       CaidaPresion=0; 
31AC:  CLRF   xA6
31AE:  CLRF   xA5
31B0:  CLRF   xA4
31B2:  CLRF   xA3
....................    } 
....................     
....................    if(estadouv==1) 
31B4:  BTFSS  17.0
31B6:  BRA    320C
....................    { 
....................       lcd_gotoxy(13,4); 
31B8:  MOVLW  0D
31BA:  MOVWF  xC5
31BC:  MOVLW  04
31BE:  MOVWF  xC6
31C0:  CALL   0794
....................       printf(lcd_putc,"UV:ON "); 
31C4:  MOVLW  06
31C6:  MOVWF  FF6
31C8:  MOVLW  06
31CA:  MOVWF  FF7
31CC:  CALL   0854
....................       estadomv=0; 
31D0:  BCF    17.2
....................       velocidades(0); 
31D2:  CLRF   xB5
31D4:  CALL   0E7E
....................       estadofl=0; 
31D8:  BCF    17.1
....................       Luz_Blanca_off; 
31DA:  BCF    F8C.1
31DC:  BCF    F95.1
....................       Luz_UV_on; 
31DE:  BSF    F8C.0
31E0:  BCF    F95.0
....................       tiempo_cumplido=0; 
31E2:  BCF    17.7
....................       if(flaguv==0) 
31E4:  BTFSC  18.1
31E6:  BRA    320A
....................       { 
....................          delay_ms(500);delay_ms(50);lcd_init();flaguv=1;guardaruv=1; 
31E8:  MOVLW  02
31EA:  MOVWF  xB3
31EC:  MOVLW  FA
31EE:  MOVWF  xCA
31F0:  CALL   0626
31F4:  DECFSZ xB3,F
31F6:  BRA    31EC
31F8:  MOVLW  32
31FA:  MOVWF  xCA
31FC:  CALL   0626
3200:  CALL   06B6
3204:  BSF    18.1
3206:  MOVLW  01
3208:  MOVWF  31
....................       } 
....................    } 
....................    else 
320A:  BRA    3250
....................    { 
....................       estadouv=0; 
320C:  BCF    17.0
....................       lcd_gotoxy(13,4); 
320E:  MOVLW  0D
3210:  MOVWF  xC5
3212:  MOVLW  04
3214:  MOVWF  xC6
3216:  CALL   0794
....................       printf(lcd_putc,"UV:OFF"); 
321A:  MOVLW  0E
321C:  MOVWF  FF6
321E:  MOVLW  06
3220:  MOVWF  FF7
3222:  CALL   0854
....................       Luz_UV_off; 
3226:  BCF    F8C.0
3228:  BCF    F95.0
....................       if(flaguv==1) 
322A:  BTFSS  18.1
322C:  BRA    3250
....................       { 
....................          delay_ms(500);delay_ms(50);lcd_init();flaguv=0;guardaruv=1; 
322E:  MOVLW  02
3230:  MOVWF  xB3
3232:  MOVLW  FA
3234:  MOVWF  xCA
3236:  CALL   0626
323A:  DECFSZ xB3,F
323C:  BRA    3232
323E:  MOVLW  32
3240:  MOVWF  xCA
3242:  CALL   0626
3246:  CALL   06B6
324A:  BCF    18.1
324C:  MOVLW  01
324E:  MOVWF  31
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
3250:  BTFSS  17.1
3252:  BRA    3284
....................    { 
....................       lcd_gotoxy(1,3); 
3254:  MOVLW  01
3256:  MOVWF  xC5
3258:  MOVLW  03
325A:  MOVWF  xC6
325C:  CALL   0794
....................       printf(lcd_putc,"Luz:ON "); 
3260:  MOVLW  16
3262:  MOVWF  FF6
3264:  MOVLW  06
3266:  MOVWF  FF7
3268:  CALL   0854
....................       Luz_Blanca_on; 
326C:  BSF    F8C.1
326E:  BCF    F95.1
....................       if(flagfl==0) 
3270:  BTFSC  18.2
3272:  BRA    3282
....................       { 
....................          delay_ms(50);lcd_init();flagfl=1; 
3274:  MOVLW  32
3276:  MOVWF  xCA
3278:  CALL   0626
327C:  CALL   06B6
3280:  BSF    18.2
....................       } 
....................    } 
....................    else 
3282:  BRA    32B2
....................    { 
....................       lcd_gotoxy(1,3); 
3284:  MOVLW  01
3286:  MOVWF  xC5
3288:  MOVLW  03
328A:  MOVWF  xC6
328C:  CALL   0794
....................       printf(lcd_putc,"Luz:OFF"); 
3290:  MOVLW  1E
3292:  MOVWF  FF6
3294:  MOVLW  06
3296:  MOVWF  FF7
3298:  CALL   0854
....................       Luz_Blanca_off; 
329C:  BCF    F8C.1
329E:  BCF    F95.1
....................       if(flagfl==1) 
32A0:  BTFSS  18.2
32A2:  BRA    32B2
....................       { 
....................          delay_ms(50);lcd_init();flagfl=0; 
32A4:  MOVLW  32
32A6:  MOVWF  xCA
32A8:  CALL   0626
32AC:  CALL   06B6
32B0:  BCF    18.2
....................       } 
....................    } 
....................     
....................     Saturacion=(CaidaPresion/0.37)*11; 
32B2:  MOVFF  A6,CA
32B6:  MOVFF  A5,C9
32BA:  MOVFF  A4,C8
32BE:  MOVFF  A3,C7
32C2:  MOVLW  A4
32C4:  MOVWF  xCE
32C6:  MOVLW  70
32C8:  MOVWF  xCD
32CA:  MOVLW  3D
32CC:  MOVWF  xCC
32CE:  MOVLW  7D
32D0:  MOVWF  xCB
32D2:  CALL   0874
32D6:  MOVFF  00,B3
32DA:  MOVFF  01,B4
32DE:  MOVFF  02,B5
32E2:  MOVFF  03,B6
32E6:  MOVFF  03,CA
32EA:  MOVFF  02,C9
32EE:  MOVFF  01,C8
32F2:  MOVFF  00,C7
32F6:  CLRF   xCE
32F8:  CLRF   xCD
32FA:  MOVLW  30
32FC:  MOVWF  xCC
32FE:  MOVLW  82
3300:  MOVWF  xCB
3302:  CALL   11AE
3306:  MOVFF  03,A2
330A:  MOVFF  02,A1
330E:  MOVFF  01,A0
3312:  MOVFF  00,9F
....................    if(Saturacion>11) 
3316:  CLRF   xCA
3318:  CLRF   xC9
331A:  MOVLW  30
331C:  MOVWF  xC8
331E:  MOVLW  82
3320:  MOVWF  xC7
3322:  MOVFF  A2,CE
3326:  MOVFF  A1,CD
332A:  MOVFF  A0,CC
332E:  MOVFF  9F,CB
3332:  CALL   0F9E
3336:  BNC   3344
....................    { 
....................       Saturacion=11; 
3338:  CLRF   xA2
333A:  CLRF   xA1
333C:  MOVLW  30
333E:  MOVWF  xA0
3340:  MOVLW  82
3342:  MOVWF  x9F
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
3344:  CLRF   2E
3346:  MOVFF  A2,B6
334A:  MOVFF  A1,B5
334E:  MOVFF  A0,B4
3352:  MOVFF  9F,B3
3356:  CALL   184A
335A:  MOVFF  00,B3
335E:  MOVFF  01,B4
3362:  MOVFF  02,B5
3366:  MOVFF  03,B6
336A:  CLRF   xCC
336C:  MOVFF  2E,CB
3370:  CALL   070C
3374:  MOVFF  03,CA
3378:  MOVFF  02,C9
337C:  MOVFF  01,C8
3380:  MOVFF  00,C7
3384:  MOVFF  B6,CE
3388:  MOVFF  B5,CD
338C:  MOVFF  B4,CC
3390:  MOVFF  B3,CB
3394:  CALL   0F9E
3398:  BNC   33B6
....................    { 
....................       lcd_gotoxy(i+8,2); 
339A:  MOVLW  08
339C:  ADDWF  2E,W
339E:  MOVWF  xB3
33A0:  MOVWF  xC5
33A2:  MOVLW  02
33A4:  MOVWF  xC6
33A6:  CALL   0794
....................       printf(lcd_putc,"Ñ"); 
33AA:  MOVLW  D1
33AC:  MOVWF  xC4
33AE:  CALL   07F6
....................    } 
33B2:  INCF   2E,F
33B4:  BRA    3346
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
33B6:  MOVFF  A2,B6
33BA:  MOVFF  A1,B5
33BE:  MOVFF  A0,B4
33C2:  MOVFF  9F,B3
33C6:  CALL   184A
33CA:  MOVFF  03,CA
33CE:  MOVFF  02,C9
33D2:  MOVFF  01,C8
33D6:  MOVFF  00,C7
33DA:  CALL   14E0
33DE:  MOVFF  01,2E
33E2:  MOVF   2E,W
33E4:  SUBLW  0A
33E6:  BNC   3404
....................    { 
....................       lcd_gotoxy(i+8,2); 
33E8:  MOVLW  08
33EA:  ADDWF  2E,W
33EC:  MOVWF  xB3
33EE:  MOVWF  xC5
33F0:  MOVLW  02
33F2:  MOVWF  xC6
33F4:  CALL   0794
....................       printf(lcd_putc," "); 
33F8:  MOVLW  20
33FA:  MOVWF  xC4
33FC:  CALL   07F6
....................    } 
3400:  INCF   2E,F
3402:  BRA    33E2
....................     
....................    if(DOWN)//Si oprime hacia arriba 
3404:  BSF    F96.0
3406:  BTFSS  F84.0
3408:  BRA    3424
....................    { 
....................       if(Flanco == 0) 
340A:  BTFSC  17.3
340C:  BRA    3422
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
340E:  BTG    17.1
3410:  BSF    17.3
3412:  MOVLW  02
3414:  MOVWF  xB3
3416:  MOVLW  96
3418:  MOVWF  xCA
341A:  CALL   0626
341E:  DECFSZ xB3,F
3420:  BRA    3416
....................       } 
....................    } 
....................    else 
3422:  BRA    3426
....................    { 
....................       Flanco = 0; 
3424:  BCF    17.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3426:  BSF    F96.1
3428:  BTFSS  F84.1
342A:  BRA    3446
....................    { 
....................       if(Flanco1 == 0) 
342C:  BTFSC  17.4
342E:  BRA    3444
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
3430:  BTG    17.2
3432:  BSF    17.4
3434:  MOVLW  02
3436:  MOVWF  xB3
3438:  MOVLW  96
343A:  MOVWF  xCA
343C:  CALL   0626
3440:  DECFSZ xB3,F
3442:  BRA    3438
....................       } 
....................    } 
....................    else 
3444:  BRA    3448
....................    { 
....................       Flanco1 = 0; 
3446:  BCF    17.4
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3448:  BSF    F92.5
344A:  BTFSS  F80.5
344C:  BRA    3472
....................    { 
....................       printf(lcd_putc,"\f");delay_ms(300);Menu=1; paso=0;Flecha=2;Flecha2=2;    
344E:  MOVLW  0C
3450:  MOVWF  xC4
3452:  CALL   07F6
3456:  MOVLW  02
3458:  MOVWF  xB3
345A:  MOVLW  96
345C:  MOVWF  xCA
345E:  CALL   0626
3462:  DECFSZ xB3,F
3464:  BRA    345A
3466:  MOVLW  01
3468:  MOVWF  19
346A:  CLRF   33
346C:  MOVLW  02
346E:  MOVWF  1D
3470:  MOVWF  1F
....................    } 
....................     
....................    if(LEFT)//Si oprime hacia izquierda 
3472:  BSF    F96.2
3474:  BTFSS  F84.2
3476:  BRA    3492
....................    { 
....................       if(Flanco2 == 0) 
3478:  BTFSC  17.5
347A:  BRA    3490
....................       { 
....................          estadouv=!estadouv;Flanco2 = 1;delay_ms(300); 
347C:  BTG    17.0
347E:  BSF    17.5
3480:  MOVLW  02
3482:  MOVWF  xB3
3484:  MOVLW  96
3486:  MOVWF  xCA
3488:  CALL   0626
348C:  DECFSZ xB3,F
348E:  BRA    3484
....................       } 
....................    } 
....................    else 
3490:  BRA    3494
....................    { 
....................       Flanco2 = 0; 
3492:  BCF    17.5
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................    if(guardaruv==1) 
3494:  DECFSZ 31,W
3496:  BRA    3546
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
3498:  MOVLW  32
349A:  MOVWF  FA9
349C:  MOVFF  22,FA8
34A0:  BCF    FA6.6
34A2:  BCF    FA6.7
34A4:  BSF    FA6.2
34A6:  MOVF   FF2,W
34A8:  MOVWF  00
34AA:  BCF    FF2.7
34AC:  MOVLB  F
34AE:  MOVLW  55
34B0:  MOVWF  FA7
34B2:  MOVLW  AA
34B4:  MOVWF  FA7
34B6:  BSF    FA6.1
34B8:  BTFSC  FA6.1
34BA:  BRA    34B8
34BC:  BCF    FA6.2
34BE:  MOVF   00,W
34C0:  IORWF  FF2,F
34C2:  MOVLW  33
34C4:  MOVWF  FA9
34C6:  MOVFF  23,FA8
34CA:  BCF    FA6.6
34CC:  BCF    FA6.7
34CE:  BSF    FA6.2
34D0:  MOVF   FF2,W
34D2:  MOVWF  00
34D4:  BCF    FF2.7
34D6:  MOVLW  55
34D8:  MOVWF  FA7
34DA:  MOVLW  AA
34DC:  MOVWF  FA7
34DE:  BSF    FA6.1
34E0:  BTFSC  FA6.1
34E2:  BRA    34E0
34E4:  BCF    FA6.2
34E6:  MOVF   00,W
34E8:  IORWF  FF2,F
....................       horasL=(int8)horas; 
34EA:  MOVFF  43,24
....................       horasH=(int8)(horas>>8); 
34EE:  MOVF   44,W
34F0:  MOVWF  25
....................       write_eeprom(52,horasL); 
34F2:  MOVLW  34
34F4:  MOVWF  FA9
34F6:  MOVFF  24,FA8
34FA:  BCF    FA6.6
34FC:  BCF    FA6.7
34FE:  BSF    FA6.2
3500:  MOVFF  FF2,00
3504:  BCF    FF2.7
3506:  MOVLW  55
3508:  MOVWF  FA7
350A:  MOVLW  AA
350C:  MOVWF  FA7
350E:  BSF    FA6.1
3510:  BTFSC  FA6.1
3512:  BRA    3510
3514:  BCF    FA6.2
3516:  MOVF   00,W
3518:  IORWF  FF2,F
....................       write_eeprom(53,horasH); 
351A:  MOVLW  35
351C:  MOVWF  FA9
351E:  MOVFF  25,FA8
3522:  BCF    FA6.6
3524:  BCF    FA6.7
3526:  BSF    FA6.2
3528:  MOVFF  FF2,00
352C:  BCF    FF2.7
352E:  MOVLW  55
3530:  MOVWF  FA7
3532:  MOVLW  AA
3534:  MOVWF  FA7
3536:  BSF    FA6.1
3538:  BTFSC  FA6.1
353A:  BRA    3538
353C:  BCF    FA6.2
353E:  MOVF   00,W
3540:  IORWF  FF2,F
....................       guardaruv=0; 
3542:  CLRF   31
3544:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
3546:  MOVF   30,W
3548:  SUBLW  13
354A:  BC    3552
....................    { 
....................       lcd_init(); 
354C:  CALL   06B6
....................       tiemporeset=0; 
3550:  CLRF   30
....................    }    
....................     
....................    if(segundos>=60) 
3552:  MOVF   22,W
3554:  SUBLW  3B
3556:  BC    355C
....................    { 
....................       segundos=0;minutos++; 
3558:  CLRF   22
355A:  INCF   23,F
....................    } 
....................    if(minutos==60) 
355C:  MOVF   23,W
355E:  SUBLW  3C
3560:  BNZ   356A
....................    { 
....................       minutos=0;horas++; 
3562:  CLRF   23
3564:  INCF   43,F
3566:  BTFSC  FD8.2
3568:  INCF   44,F
....................    } 
....................     
....................    } 
356A:  GOTO   1CD4
.................... } 
....................  
356E:  SLEEP 

Configuration Fuses:
   Word  1: C03F   XT IESO FCMEN PLL12 CPUDIV4 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
