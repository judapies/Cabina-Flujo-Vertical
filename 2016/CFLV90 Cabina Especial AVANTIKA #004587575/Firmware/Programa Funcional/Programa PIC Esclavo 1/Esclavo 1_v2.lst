CCS PCH C Compiler, Version 4.104, 5967               07-dic.-16 16:08

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Vertical\2016\CFLV90 Cabina Especial AVANTIKA #004587575\Firmware\Programa Funcional\Programa PIC Esclavo 1\Esclavo 1_v2.lst

               ROM used: 3304 bytes (10%)
                         Largest free fragment is 29460
               RAM used: 486 (24%) at main() level
                         508 (25%) worst case
               Stack:    6 worst case (3 in main + 3 for interrupts)

*
0000:  GOTO   084A
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   06AE
0054:  BTFSS  F9D.3
0056:  GOTO   0060
005A:  BTFSC  F9E.3
005C:  GOTO   00BA
0060:  MOVFF  0E,00
0064:  MOVFF  0F,01
0068:  MOVFF  10,02
006C:  MOVFF  11,03
0070:  MOVFF  0C,FE9
0074:  MOVFF  07,FEA
0078:  BSF    07.7
007A:  MOVFF  08,FE1
007E:  MOVFF  09,FE2
0082:  MOVFF  0A,FD9
0086:  MOVFF  0B,FDA
008A:  MOVFF  12,FF3
008E:  MOVFF  13,FF4
0092:  MOVFF  14,FFA
0096:  MOVF   04,W
0098:  MOVFF  06,FE0
009C:  MOVFF  05,FD8
00A0:  RETFIE 0
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Bioseguridad A2 
.................... // Esclavo controlador de Hardware 
.................... // Ing. Juan David Piñeros Espinosa. 
.................... // JP Inglobal. 2016 
.................... // Pin A2, Analogo Damper 
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,VREGEN,NOMCLR 
.................... #use delay(clock=48000000) 
*
06E8:  MOVLW  01
06EA:  MOVWF  FEA
06EC:  MOVLW  E7
06EE:  MOVWF  FE9
06F0:  MOVF   FEF,W
06F2:  BZ    0710
06F4:  MOVLW  0F
06F6:  MOVWF  01
06F8:  CLRF   00
06FA:  DECFSZ 00,F
06FC:  BRA    06FA
06FE:  DECFSZ 01,F
0700:  BRA    06F8
0702:  MOVLW  8F
0704:  MOVWF  00
0706:  DECFSZ 00,F
0708:  BRA    0706
070A:  NOP   
070C:  DECFSZ FEF,F
070E:  BRA    06F4
0710:  GOTO   0734 (RETURN)
.................... #include <math.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float32)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float32)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float32)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float32)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
.................... #use i2c(slave, fast, sda=PIN_B0, scl=PIN_B1, address=0xA0) 
*
00A2:  MOVF   FC9,W
00A4:  MOVFF  1EA,FC9
00A8:  BSF    FC6.4
00AA:  BCF    F9E.3
00AC:  BTFSC  FC7.0
00AE:  BRA    00AC
00B0:  CLRF   01
00B2:  BTFSC  FC6.4
00B4:  INCF   01,F
00B6:  GOTO   00EE (RETURN)
....................  
.................... #define   UP               input(PIN_D2) 
.................... #define   DOWN             input(PIN_D3) 
....................  
.................... // Definición de otros puertos 
.................... #define   LuzBlanca_on           output_bit(PIN_B2,1) 
.................... #define   LuzBlanca_off          output_bit(PIN_B2,0) 
.................... #define   LuzUV_on               output_bit(PIN_B3,1) 
.................... #define   LuzUV_off              output_bit(PIN_B3,0) 
.................... #define   Motor_on               output_bit(PIN_B4,1) 
.................... #define   Motor_off              output_bit(PIN_B4,0) 
.................... #define   Toma_on                output_bit(PIN_B5,1) 
.................... #define   Toma_off               output_bit(PIN_B5,0) 
.................... #define   Alarma_on              output_bit(PIN_B6,1) 
.................... #define   Alarma_off             output_bit(PIN_B6,0) 
.................... #define   Motor1_off             output_bit(PIN_D0,0) 
.................... #define   Motor1_on              output_bit(PIN_D0,1) 
.................... #define   Motor2_off             output_bit(PIN_D1,0) 
.................... #define   Motor2_on              output_bit(PIN_D1,1) 
....................  
.................... byte fstate;                     //Guardara el estado del bus I2C 
.................... byte posicion, buffer[0x10], txbuf[0x11],rxbuf[0x11];     //Buffer de memoria 
.................... short EnvioMaster;               //Indicación de fin del byte enviado por el master 
.................... short SolicitudMaster=0;         //Indicación de fin de la entrega del byte solicitado por el master 
.................... int16 tiempos=0,tiempos2=0; 
.................... // Variables para Pt100 
.................... short capturar=0; 
.................... int8 h=0,l=0,posicionvector=0,r=0,q=0,tmp=0; 
.................... float V0=0.0,V2=0.0,V3=0.0,RPM=0.0,pH=0.0,OD=0.0; 
.................... float R1=6200.0,Pt,Prom=0.0,Temperature=0.0; 
.................... float promedio[80]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float pulsos1=0; 
.................... float rpm_actual=0.0,n_pulsos=512.0,Inflowpic=0.0; 
.................... unsigned int16 pwm1=0,pwm2=0; 
.................... unsigned int8 Inflow_l=0,Inflow_h=0,Downflow_l=0,Downflow_h=0,Vidrio_abajo=0,Vidrio_ok=0,Filtro_Inflow_l=0,Filtro_Inflow_h=0; 
.................... unsigned int8 Filtro_Downflow_l=0,Filtro_Downflow_h=0; 
.................... unsigned int16 Inflow=0.0,Downflow=0.0,Filtro_Inflow=0.0,Filtro_Downflow=0.0; 
....................  
.................... // Funcion para conversor analogo-digital 
.................... unsigned int16 sensores(int x){ 
.................... unsigned int16 y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
0714:  MOVLB  1
0716:  RLCF   xE4,W
0718:  MOVWF  00
071A:  RLCF   00,F
071C:  MOVLW  FC
071E:  ANDWF  00,F
0720:  MOVFF  00,01
0724:  MOVF   FC2,W
0726:  ANDLW  C3
0728:  IORWF  00,W
072A:  MOVWF  FC2
072C:  MOVLW  0A
072E:  MOVWF  xE7
0730:  MOVLB  0
0732:  BRA    06E8
0734:  BSF    FC2.1
0736:  BTFSC  FC2.1
0738:  BRA    0736
073A:  MOVFF  FC4,1E6
073E:  MOVLB  1
0740:  MOVFF  FC3,1E5
0744:  MOVFF  1E5,01
0748:  MOVFF  1E6,02
.................... } 
074C:  MOVLB  0
074E:  RETLW  00
....................  
.................... #INT_SSP 
.................... void ssp_interupt (){ 
....................     
....................    int incoming;                //Variable donde se recibe el byte que manda el maestro 
....................     
....................    fstate = i2c_isr_state();    //Lectura del estado del bus I2c la interrupción 
*
00BA:  BTFSC  FC7.5
00BC:  BRA    00C6
00BE:  MOVLB  1
00C0:  CLRF   xE3
00C2:  BTFSC  FC7.2
00C4:  BSF    xE3.7
00C6:  MOVLB  1
00C8:  MOVF   xE3,W
00CA:  INCF   xE3,F
00CC:  MOVWF  16
....................  
....................    /* Solicitud de lectura del esclavo por el master */ 
....................    if(fstate == 0x80) {          
00CE:  MOVF   16,W
00D0:  SUBLW  80
00D2:  BNZ   00F6
....................        //Manda al maestro la información contenida en la posición de memoria que le ha solicitado 
....................       i2c_write (txbuf[posicion]); 
00D4:  CLRF   03
00D6:  MOVF   17,W
00D8:  ADDLW  28
00DA:  MOVWF  FE9
00DC:  MOVLW  00
00DE:  ADDWFC 03,W
00E0:  MOVWF  FEA
00E2:  MOVFF  FEF,1E9
00E6:  MOVFF  1E9,1EA
00EA:  MOVLB  0
00EC:  BRA    00A2
....................       //i2c_write (txbuf[0]); 
....................       output_toggle(PIN_B7); 
00EE:  BCF    F93.7
00F0:  BTG    F8A.7
....................       //i2c_write ((int8)V2); 
....................    } 
....................    /* Sino está solicitando lectura es que está enviando algo */ 
....................    else {                              //Sino es que hay dato en el bus I2C... 
00F2:  BRA    0126
00F4:  MOVLB  1
....................       incoming = i2c_read();           //... lo lee 
00F6:  BCF    FC6.6
00F8:  BTFSS  F9E.3
00FA:  BRA    00F8
00FC:  MOVF   FC9,W
00FE:  BSF    FC6.4
0100:  MOVWF  xE8
....................     
....................  
....................       if (fState == 1) {          //Información recibida corresponde a la posicion 
0102:  DECFSZ 16,W
0104:  BRA    010C
....................          posicion = incoming;          //Se guarda posición 
0106:  MOVFF  1E8,17
....................       } 
....................       else if (fState == 2) {          //Información recibida corresponde al dato 
010A:  BRA    0124
010C:  MOVF   16,W
010E:  SUBLW  02
0110:  BNZ   0124
....................          rxbuf[posicion] = incoming; 
0112:  CLRF   03
0114:  MOVF   17,W
0116:  ADDLW  39
0118:  MOVWF  FE9
011A:  MOVLW  00
011C:  ADDWFC 03,W
011E:  MOVWF  FEA
0120:  MOVFF  1E8,FEF
0124:  MOVLB  0
....................       } 
....................   } 
.................... } 
....................  
0126:  BCF    F9E.3
0128:  GOTO   0060
.................... void controlar_flujo(void) 
.................... { 
....................    Inflowpic=rxbuf[5]+(rxbuf[6]/100.0); 
*
05B6:  MOVLB  1
05B8:  CLRF   xED
05BA:  MOVFF  3F,1EC
05BE:  MOVLB  0
05C0:  RCALL  012C
05C2:  MOVFF  03,1EB
05C6:  MOVFF  02,1EA
05CA:  MOVFF  01,1E9
05CE:  MOVFF  00,1E8
05D2:  MOVLB  1
05D4:  CLRF   xEF
05D6:  CLRF   xEE
05D8:  MOVLW  48
05DA:  MOVWF  xED
05DC:  MOVLW  85
05DE:  MOVWF  xEC
05E0:  MOVLB  0
05E2:  BRA    0162
05E4:  MOVFF  00,1E8
05E8:  MOVFF  01,1E9
05EC:  MOVFF  02,1EA
05F0:  MOVFF  03,1EB
05F4:  MOVLB  1
05F6:  CLRF   xED
05F8:  MOVFF  3E,1EC
05FC:  MOVLB  0
05FE:  RCALL  012C
0600:  BCF    FD8.1
0602:  MOVFF  03,1EF
0606:  MOVFF  02,1EE
060A:  MOVFF  01,1ED
060E:  MOVFF  00,1EC
0612:  MOVFF  1EB,1F3
0616:  MOVFF  1EA,1F2
061A:  MOVFF  1E9,1F1
061E:  MOVFF  1E8,1F0
0622:  BRA    02C2
0624:  MOVFF  03,1CC
0628:  MOVFF  02,1CB
062C:  MOVFF  01,1CA
0630:  MOVFF  00,1C9
....................    if(rxbuf[2]==5) 
0634:  MOVF   3B,W
0636:  SUBLW  05
0638:  BNZ   06AA
....................    { 
....................       if(Inflowpic<0.4) 
063A:  MOVFF  1CC,1EB
063E:  MOVFF  1CB,1EA
0642:  MOVFF  1CA,1E9
0646:  MOVFF  1C9,1E8
064A:  MOVLW  CD
064C:  MOVLB  1
064E:  MOVWF  xEF
0650:  MOVLW  CC
0652:  MOVWF  xEE
0654:  MOVLW  4C
0656:  MOVWF  xED
0658:  MOVLW  7D
065A:  MOVWF  xEC
065C:  MOVLB  0
065E:  RCALL  053C
0660:  BNC   0666
....................       { 
....................          tmp+=1; 
0662:  MOVLW  01
0664:  ADDWF  54,F
....................       } 
....................           
....................       if(Inflowpic>0.55) 
0666:  MOVLW  CD
0668:  MOVLB  1
066A:  MOVWF  xEB
066C:  MOVLW  CC
066E:  MOVWF  xEA
0670:  MOVLW  0C
0672:  MOVWF  xE9
0674:  MOVLW  7E
0676:  MOVWF  xE8
0678:  MOVFF  1CC,1EF
067C:  MOVFF  1CB,1EE
0680:  MOVFF  1CA,1ED
0684:  MOVFF  1C9,1EC
0688:  MOVLB  0
068A:  RCALL  053C
068C:  BNC   0692
....................       { 
....................          tmp-=1; 
068E:  MOVLW  01
0690:  SUBWF  54,F
....................       }          
....................           
....................       if(tmp>251) 
0692:  MOVF   54,W
0694:  SUBLW  FB
0696:  BC    069C
....................       {tmp=251;} 
0698:  MOVLW  FB
069A:  MOVWF  54
....................       if(tmp<4)          
069C:  MOVF   54,W
069E:  SUBLW  03
06A0:  BNC   06A6
....................       {tmp=4;}       
06A2:  MOVLW  04
06A4:  MOVWF  54
....................       set_pwm1_duty (tmp); 
06A6:  MOVFF  54,FBE
....................    } 
.................... } 
06AA:  GOTO   06E2 (RETURN)
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536); 
06AE:  MOVLW  15
06B0:  MOVWF  FCF
06B2:  MOVLW  A0
06B4:  MOVWF  FCE
....................    tiempos++; 
06B6:  INCF   4B,F
06B8:  BTFSC  FD8.2
06BA:  INCF   4C,F
....................    tiempos2++; 
06BC:  INCF   4D,F
06BE:  BTFSC  FD8.2
06C0:  INCF   4E,F
....................   
....................    if(tiempos>=20) 
06C2:  MOVF   4C,F
06C4:  BNZ   06CC
06C6:  MOVF   4B,W
06C8:  SUBLW  13
06CA:  BC    06D2
....................    { 
....................       capturar=1;tiempos=0; 
06CC:  BSF    4A.2
06CE:  CLRF   4C
06D0:  CLRF   4B
....................    } 
....................     
....................    if(tiempos2>=200) 
06D2:  MOVF   4E,F
06D4:  BNZ   06DC
06D6:  MOVF   4D,W
06D8:  SUBLW  C7
06DA:  BC    06E2
....................    { 
....................       tiempos2=0;controlar_flujo(); 
06DC:  CLRF   4E
06DE:  CLRF   4D
06E0:  BRA    05B6
....................    } 
.................... } 
....................  
06E2:  BCF    F9E.0
06E4:  GOTO   0060
.................... void LeerInflow(){ 
....................    Inflow=sensores(0); 
*
07C2:  MOVLB  1
07C4:  CLRF   xE4
07C6:  MOVLB  0
07C8:  RCALL  0714
07CA:  MOVFF  02,1DC
07CE:  MOVFF  01,1DB
....................    Inflow_l=(int8)Inflow; 
07D2:  MOVFF  1DB,1D1
....................    Inflow_h=(Inflow>>8); 
07D6:  MOVFF  1DC,1D2
....................    txbuf[0]=(int8)Inflow_l; 
07DA:  MOVFF  1D1,28
....................    txbuf[1]=(int8)Inflow_h; 
07DE:  MOVFF  1D2,29
.................... } 
07E2:  GOTO   0CE2 (RETURN)
....................  
.................... void LeerDownflow(){ 
....................    Downflow=sensores(2); 
*
0750:  MOVLW  02
0752:  MOVLB  1
0754:  MOVWF  xE4
0756:  MOVLB  0
0758:  RCALL  0714
075A:  MOVFF  02,1DE
075E:  MOVFF  01,1DD
....................    Downflow_l=(int8)Downflow; 
0762:  MOVFF  1DD,1D3
....................    Downflow_h=(Downflow>>8); 
0766:  MOVFF  1DE,1D4
....................    txbuf[2]=(int8)Downflow_l; 
076A:  MOVFF  1D3,2A
....................    txbuf[3]=(int8)Downflow_h; 
076E:  MOVFF  1D4,2B
.................... } 
0772:  GOTO   0CDC (RETURN)
....................  
.................... void LeerVidrioAbajo(){ 
....................    if(sensores(4)<696) 
*
07E6:  MOVLW  04
07E8:  MOVLB  1
07EA:  MOVWF  xE4
07EC:  MOVLB  0
07EE:  RCALL  0714
07F0:  MOVFF  02,1E5
07F4:  MOVFF  01,1E4
07F8:  MOVLB  1
07FA:  MOVF   02,W
07FC:  SUBLW  02
07FE:  BNC   080E
0800:  BNZ   0808
0802:  MOVF   xE4,W
0804:  SUBLW  B7
0806:  BNC   080E
....................       txbuf[4]=5; 
0808:  MOVLW  05
080A:  MOVWF  2C
....................    else 
080C:  BRA    0812
....................       txbuf[4]=10; 
080E:  MOVLW  0A
0810:  MOVWF  2C
.................... } 
0812:  MOVLB  0
0814:  GOTO   0CE4 (RETURN)
....................  
.................... void LeerVidriook(){ 
....................    if(sensores(5)<820) 
0818:  MOVLW  05
081A:  MOVLB  1
081C:  MOVWF  xE4
081E:  MOVLB  0
0820:  RCALL  0714
0822:  MOVFF  02,1E5
0826:  MOVFF  01,1E4
082A:  MOVLB  1
082C:  MOVF   02,W
082E:  SUBLW  03
0830:  BNC   0840
0832:  BNZ   083A
0834:  MOVF   xE4,W
0836:  SUBLW  33
0838:  BNC   0840
....................       txbuf[5]=5; 
083A:  MOVLW  05
083C:  MOVWF  2D
....................    else 
083E:  BRA    0844
....................       txbuf[5]=10; 
0840:  MOVLW  0A
0842:  MOVWF  2D
.................... } 
0844:  MOVLB  0
0846:  GOTO   0CE6 (RETURN)
....................  
.................... void LeerFiltroInflow(){ 
....................    Filtro_Inflow=sensores(6); 
*
079C:  MOVLW  06
079E:  MOVLB  1
07A0:  MOVWF  xE4
07A2:  MOVLB  0
07A4:  RCALL  0714
07A6:  MOVFF  02,1E0
07AA:  MOVFF  01,1DF
....................    Filtro_Inflow_l=(int8)Filtro_Inflow; 
07AE:  MOVFF  1DF,1D7
....................    Filtro_Inflow_h=(Filtro_Inflow>>8); 
07B2:  MOVFF  1E0,1D8
....................    txbuf[6]=(int8)Filtro_Inflow_l; 
07B6:  MOVFF  1D7,2E
....................    txbuf[7]=(int8)Filtro_Inflow_h; 
07BA:  MOVFF  1D8,2F
.................... } 
07BE:  GOTO   0CE0 (RETURN)
....................  
.................... void LeerFiltroDownflow(){ 
....................    Filtro_Downflow=sensores(7); 
*
0776:  MOVLW  07
0778:  MOVLB  1
077A:  MOVWF  xE4
077C:  MOVLB  0
077E:  RCALL  0714
0780:  MOVFF  02,1E2
0784:  MOVFF  01,1E1
....................    Filtro_Downflow_l=(int8)Filtro_Downflow; 
0788:  MOVFF  1E1,1D9
....................    Filtro_Downflow_h=(Filtro_Downflow>>8); 
078C:  MOVFF  1E2,1DA
....................    txbuf[8]=(int8)Filtro_Downflow_l; 
0790:  MOVFF  1D9,30
....................    txbuf[9]=(int8)Filtro_Downflow_h; 
0794:  MOVFF  1DA,31
.................... } 
0798:  GOTO   0CDE (RETURN)
....................  
....................  
.................... void main (){ 
*
084A:  CLRF   FF8
084C:  BCF    FD0.7
084E:  BSF    07.7
0850:  CLRF   FEA
0852:  CLRF   FE9
0854:  BSF    F93.1
0856:  BSF    F93.0
0858:  MOVLW  A0
085A:  MOVWF  FC8
085C:  MOVLW  36
085E:  MOVWF  FC6
0860:  BCF    4A.1
0862:  CLRF   4C
0864:  CLRF   4B
0866:  CLRF   4E
0868:  CLRF   4D
086A:  BCF    4A.2
086C:  CLRF   4F
086E:  CLRF   50
0870:  CLRF   51
0872:  CLRF   52
0874:  CLRF   53
0876:  CLRF   54
0878:  CLRF   58
087A:  CLRF   57
087C:  CLRF   56
087E:  CLRF   55
0880:  CLRF   5C
0882:  CLRF   5B
0884:  CLRF   5A
0886:  CLRF   59
0888:  CLRF   x60
088A:  CLRF   5F
088C:  CLRF   5E
088E:  CLRF   5D
0890:  CLRF   x64
0892:  CLRF   x63
0894:  CLRF   x62
0896:  CLRF   x61
0898:  CLRF   x68
089A:  CLRF   x67
089C:  CLRF   x66
089E:  CLRF   x65
08A0:  CLRF   x6C
08A2:  CLRF   x6B
08A4:  CLRF   x6A
08A6:  CLRF   x69
08A8:  CLRF   x70
08AA:  MOVLW  C0
08AC:  MOVWF  x6F
08AE:  MOVLW  41
08B0:  MOVWF  x6E
08B2:  MOVLW  8B
08B4:  MOVWF  x6D
08B6:  CLRF   x78
08B8:  CLRF   x77
08BA:  CLRF   x76
08BC:  CLRF   x75
08BE:  CLRF   x7C
08C0:  CLRF   x7B
08C2:  CLRF   x7A
08C4:  CLRF   x79
08C6:  MOVLB  1
08C8:  CLRF   xC0
08CA:  CLRF   xBF
08CC:  CLRF   xBE
08CE:  CLRF   xBD
08D0:  CLRF   xC4
08D2:  CLRF   xC3
08D4:  CLRF   xC2
08D6:  CLRF   xC1
08D8:  CLRF   xC8
08DA:  CLRF   xC7
08DC:  CLRF   xC6
08DE:  MOVLW  88
08E0:  MOVWF  xC5
08E2:  CLRF   xCC
08E4:  CLRF   xCB
08E6:  CLRF   xCA
08E8:  CLRF   xC9
08EA:  CLRF   xCE
08EC:  CLRF   xCD
08EE:  CLRF   xD0
08F0:  CLRF   xCF
08F2:  CLRF   xD1
08F4:  CLRF   xD2
08F6:  CLRF   xD3
08F8:  CLRF   xD4
08FA:  CLRF   xD5
08FC:  CLRF   xD6
08FE:  CLRF   xD7
0900:  CLRF   xD8
0902:  CLRF   xD9
0904:  CLRF   xDA
0906:  CLRF   xDC
0908:  CLRF   xDB
090A:  CLRF   xDE
090C:  CLRF   xDD
090E:  CLRF   xE0
0910:  CLRF   xDF
0912:  CLRF   xE2
0914:  CLRF   xE1
0916:  MOVF   FC1,W
0918:  ANDLW  C0
091A:  IORLW  0F
091C:  MOVWF  FC1
091E:  MOVLW  07
0920:  MOVWF  FB4
0922:  MOVLB  0
0924:  CLRF   x7D
0926:  CLRF   x7E
0928:  CLRF   x7F
092A:  CLRF   x80
092C:  CLRF   x81
092E:  CLRF   x82
0930:  CLRF   x83
0932:  CLRF   x84
0934:  CLRF   x85
0936:  CLRF   x86
0938:  CLRF   x87
093A:  CLRF   x88
093C:  CLRF   x89
093E:  CLRF   x8A
0940:  CLRF   x8B
0942:  CLRF   x8C
0944:  CLRF   x8D
0946:  CLRF   x8E
0948:  CLRF   x8F
094A:  CLRF   x90
094C:  CLRF   x91
094E:  CLRF   x92
0950:  CLRF   x93
0952:  CLRF   x94
0954:  CLRF   x95
0956:  CLRF   x96
0958:  CLRF   x97
095A:  CLRF   x98
095C:  CLRF   x99
095E:  CLRF   x9A
0960:  CLRF   x9B
0962:  CLRF   x9C
0964:  CLRF   x9D
0966:  CLRF   x9E
0968:  CLRF   x9F
096A:  CLRF   xA0
096C:  CLRF   xA1
096E:  CLRF   xA2
0970:  CLRF   xA3
0972:  CLRF   xA4
0974:  CLRF   xA5
0976:  CLRF   xA6
0978:  CLRF   xA7
097A:  CLRF   xA8
097C:  CLRF   xA9
097E:  CLRF   xAA
0980:  CLRF   xAB
0982:  CLRF   xAC
0984:  CLRF   xAD
0986:  CLRF   xAE
0988:  CLRF   xAF
098A:  CLRF   xB0
098C:  CLRF   xB1
098E:  CLRF   xB2
0990:  CLRF   xB3
0992:  CLRF   xB4
0994:  CLRF   xB5
0996:  CLRF   xB6
0998:  CLRF   xB7
099A:  CLRF   xB8
099C:  CLRF   xB9
099E:  CLRF   xBA
09A0:  CLRF   xBB
09A2:  CLRF   xBC
09A4:  CLRF   xBD
09A6:  CLRF   xBE
09A8:  CLRF   xBF
09AA:  CLRF   xC0
09AC:  CLRF   xC1
09AE:  CLRF   xC2
09B0:  CLRF   xC3
09B2:  CLRF   xC4
09B4:  CLRF   xC5
09B6:  CLRF   xC6
09B8:  CLRF   xC7
09BA:  CLRF   xC8
09BC:  CLRF   xC9
09BE:  CLRF   xCA
09C0:  CLRF   xCB
09C2:  CLRF   xCC
09C4:  CLRF   xCD
09C6:  CLRF   xCE
09C8:  CLRF   xCF
09CA:  CLRF   xD0
09CC:  CLRF   xD1
09CE:  CLRF   xD2
09D0:  CLRF   xD3
09D2:  CLRF   xD4
09D4:  CLRF   xD5
09D6:  CLRF   xD6
09D8:  CLRF   xD7
09DA:  CLRF   xD8
09DC:  CLRF   xD9
09DE:  CLRF   xDA
09E0:  CLRF   xDB
09E2:  CLRF   xDC
09E4:  CLRF   xDD
09E6:  CLRF   xDE
09E8:  CLRF   xDF
09EA:  CLRF   xE0
09EC:  CLRF   xE1
09EE:  CLRF   xE2
09F0:  CLRF   xE3
09F2:  CLRF   xE4
09F4:  CLRF   xE5
09F6:  CLRF   xE6
09F8:  CLRF   xE7
09FA:  CLRF   xE8
09FC:  CLRF   xE9
09FE:  CLRF   xEA
0A00:  CLRF   xEB
0A02:  CLRF   xEC
0A04:  CLRF   xED
0A06:  CLRF   xEE
0A08:  CLRF   xEF
0A0A:  CLRF   xF0
0A0C:  CLRF   xF1
0A0E:  CLRF   xF2
0A10:  CLRF   xF3
0A12:  CLRF   xF4
0A14:  CLRF   xF5
0A16:  CLRF   xF6
0A18:  CLRF   xF7
0A1A:  CLRF   xF8
0A1C:  CLRF   xF9
0A1E:  CLRF   xFA
0A20:  CLRF   xFB
0A22:  CLRF   xFC
0A24:  CLRF   xFD
0A26:  CLRF   xFE
0A28:  CLRF   xFF
0A2A:  MOVLB  1
0A2C:  CLRF   x00
0A2E:  CLRF   x01
0A30:  CLRF   x02
0A32:  CLRF   x03
0A34:  CLRF   x04
0A36:  CLRF   x05
0A38:  CLRF   x06
0A3A:  CLRF   x07
0A3C:  CLRF   x08
0A3E:  CLRF   x09
0A40:  CLRF   x0A
0A42:  CLRF   x0B
0A44:  CLRF   x0C
0A46:  CLRF   x0D
0A48:  CLRF   x0E
0A4A:  CLRF   x0F
0A4C:  CLRF   x10
0A4E:  CLRF   x11
0A50:  CLRF   x12
0A52:  CLRF   x13
0A54:  CLRF   x14
0A56:  CLRF   x15
0A58:  CLRF   x16
0A5A:  CLRF   x17
0A5C:  CLRF   x18
0A5E:  CLRF   x19
0A60:  CLRF   x1A
0A62:  CLRF   x1B
0A64:  CLRF   x1C
0A66:  CLRF   x1D
0A68:  CLRF   x1E
0A6A:  CLRF   x1F
0A6C:  CLRF   x20
0A6E:  CLRF   x21
0A70:  CLRF   x22
0A72:  CLRF   x23
0A74:  CLRF   x24
0A76:  CLRF   x25
0A78:  CLRF   x26
0A7A:  CLRF   x27
0A7C:  CLRF   x28
0A7E:  CLRF   x29
0A80:  CLRF   x2A
0A82:  CLRF   x2B
0A84:  CLRF   x2C
0A86:  CLRF   x2D
0A88:  CLRF   x2E
0A8A:  CLRF   x2F
0A8C:  CLRF   x30
0A8E:  CLRF   x31
0A90:  CLRF   x32
0A92:  CLRF   x33
0A94:  CLRF   x34
0A96:  CLRF   x35
0A98:  CLRF   x36
0A9A:  CLRF   x37
0A9C:  CLRF   x38
0A9E:  CLRF   x39
0AA0:  CLRF   x3A
0AA2:  CLRF   x3B
0AA4:  CLRF   x3C
0AA6:  CLRF   x3D
0AA8:  CLRF   x3E
0AAA:  CLRF   x3F
0AAC:  CLRF   x40
0AAE:  CLRF   x41
0AB0:  CLRF   x42
0AB2:  CLRF   x43
0AB4:  CLRF   x44
0AB6:  CLRF   x45
0AB8:  CLRF   x46
0ABA:  CLRF   x47
0ABC:  CLRF   x48
0ABE:  CLRF   x49
0AC0:  CLRF   x4A
0AC2:  CLRF   x4B
0AC4:  CLRF   x4C
0AC6:  CLRF   x4D
0AC8:  CLRF   x4E
0ACA:  CLRF   x4F
0ACC:  CLRF   x50
0ACE:  CLRF   x51
0AD0:  CLRF   x52
0AD2:  CLRF   x53
0AD4:  CLRF   x54
0AD6:  CLRF   x55
0AD8:  CLRF   x56
0ADA:  CLRF   x57
0ADC:  CLRF   x58
0ADE:  CLRF   x59
0AE0:  CLRF   x5A
0AE2:  CLRF   x5B
0AE4:  CLRF   x5C
0AE6:  CLRF   x5D
0AE8:  CLRF   x5E
0AEA:  CLRF   x5F
0AEC:  CLRF   x60
0AEE:  CLRF   x61
0AF0:  CLRF   x62
0AF2:  CLRF   x63
0AF4:  CLRF   x64
0AF6:  CLRF   x65
0AF8:  CLRF   x66
0AFA:  CLRF   x67
0AFC:  CLRF   x68
0AFE:  CLRF   x69
0B00:  CLRF   x6A
0B02:  CLRF   x6B
0B04:  CLRF   x6C
0B06:  CLRF   x6D
0B08:  CLRF   x6E
0B0A:  CLRF   x6F
0B0C:  CLRF   x70
0B0E:  CLRF   x71
0B10:  CLRF   x72
0B12:  CLRF   x73
0B14:  CLRF   x74
0B16:  CLRF   x75
0B18:  CLRF   x76
0B1A:  CLRF   x77
0B1C:  CLRF   x78
0B1E:  CLRF   x79
0B20:  CLRF   x7A
0B22:  CLRF   x7B
0B24:  CLRF   x7C
0B26:  CLRF   x7D
0B28:  CLRF   x7E
0B2A:  CLRF   x7F
0B2C:  CLRF   x80
0B2E:  CLRF   x81
0B30:  CLRF   x82
0B32:  CLRF   x83
0B34:  CLRF   x84
0B36:  CLRF   x85
0B38:  CLRF   x86
0B3A:  CLRF   x87
0B3C:  CLRF   x88
0B3E:  CLRF   x89
0B40:  CLRF   x8A
0B42:  CLRF   x8B
0B44:  CLRF   x8C
0B46:  CLRF   x8D
0B48:  CLRF   x8E
0B4A:  CLRF   x8F
0B4C:  CLRF   x90
0B4E:  CLRF   x91
0B50:  CLRF   x92
0B52:  CLRF   x93
0B54:  CLRF   x94
0B56:  CLRF   x95
0B58:  CLRF   x96
0B5A:  CLRF   x97
0B5C:  CLRF   x98
0B5E:  CLRF   x99
0B60:  CLRF   x9A
0B62:  CLRF   x9B
0B64:  CLRF   x9C
0B66:  CLRF   x9D
0B68:  CLRF   x9E
0B6A:  CLRF   x9F
0B6C:  CLRF   xA0
0B6E:  CLRF   xA1
0B70:  CLRF   xA2
0B72:  CLRF   xA3
0B74:  CLRF   xA4
0B76:  CLRF   xA5
0B78:  CLRF   xA6
0B7A:  CLRF   xA7
0B7C:  CLRF   xA8
0B7E:  CLRF   xA9
0B80:  CLRF   xAA
0B82:  CLRF   xAB
0B84:  CLRF   xAC
0B86:  CLRF   xAD
0B88:  CLRF   xAE
0B8A:  CLRF   xAF
0B8C:  CLRF   xB0
0B8E:  CLRF   xB1
0B90:  CLRF   xB2
0B92:  CLRF   xB3
0B94:  CLRF   xB4
0B96:  CLRF   xB5
0B98:  CLRF   xB6
0B9A:  CLRF   xB7
0B9C:  CLRF   xB8
0B9E:  CLRF   xB9
0BA0:  CLRF   xBA
0BA2:  CLRF   xBB
0BA4:  CLRF   xBC
0BA6:  MOVLW  03
0BA8:  MOVWF  xE3
....................  
....................    fState = 0; 
0BAA:  CLRF   16
....................    for (posicion=0;posicion<0x10;posicion++) 
0BAC:  CLRF   17
0BAE:  MOVF   17,W
0BB0:  SUBLW  0F
0BB2:  BNC   0BE8
....................    { 
....................       buffer[posicion] = 0x00; 
0BB4:  CLRF   03
0BB6:  MOVF   17,W
0BB8:  ADDLW  18
0BBA:  MOVWF  FE9
0BBC:  MOVLW  00
0BBE:  ADDWFC 03,W
0BC0:  MOVWF  FEA
0BC2:  CLRF   FEF
....................       txbuf[posicion] = 0x00; 
0BC4:  CLRF   03
0BC6:  MOVF   17,W
0BC8:  ADDLW  28
0BCA:  MOVWF  FE9
0BCC:  MOVLW  00
0BCE:  ADDWFC 03,W
0BD0:  MOVWF  FEA
0BD2:  CLRF   FEF
....................       rxbuf[posicion] = 0x00; 
0BD4:  CLRF   03
0BD6:  MOVF   17,W
0BD8:  ADDLW  39
0BDA:  MOVWF  FE9
0BDC:  MOVLW  00
0BDE:  ADDWFC 03,W
0BE0:  MOVWF  FEA
0BE2:  CLRF   FEF
....................    } 
0BE4:  INCF   17,F
0BE6:  BRA    0BAE
....................  
....................    setup_timer_0(RTCC_DIV_1|RTCC_EXT_L_TO_H); 
0BE8:  MOVLW  A8
0BEA:  MOVWF  FD5
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
0BEC:  MOVLW  85
0BEE:  MOVWF  FCD
....................    setup_timer_2(T2_DIV_BY_4, 255, 1);  
0BF0:  MOVLW  00
0BF2:  IORLW  05
0BF4:  MOVWF  FCA
0BF6:  MOVLW  FF
0BF8:  MOVWF  FCB
....................    setup_ccp1 (CCP_PWM); 
0BFA:  BCF    F94.2
0BFC:  BCF    F8B.2
0BFE:  BCF    F96.6
0C00:  MOVLW  0C
0C02:  MOVWF  FBD
0C04:  CLRF   FB7
0C06:  CLRF   FB6
....................    enable_interrupts(INT_TIMER1); 
0C08:  BSF    F9D.0
....................    enable_interrupts(INT_SSP); 
0C0A:  BSF    F9D.3
....................    setup_adc_ports(AN0_TO_AN7); 
0C0C:  MOVF   FC1,W
0C0E:  ANDLW  C0
0C10:  IORLW  07
0C12:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
0C14:  BCF    FC0.0
0C16:  BSF    FC0.1
0C18:  BCF    FC0.2
0C1A:  BSF    FC0.7
0C1C:  BSF    FC2.0
....................    enable_interrupts(global); 
0C1E:  MOVLW  C0
0C20:  IORWF  FF2,F
....................    set_pwm1_duty(128); 
0C22:  MOVLW  80
0C24:  MOVWF  FBE
....................        
....................    while(true){ 
....................       
....................      if(DOWN) 
0C26:  BSF    F95.3
0C28:  BTFSS  F83.3
0C2A:  BRA    0C46
....................      { 
....................          if(txbuf[4]==10) 
0C2C:  MOVF   2C,W
0C2E:  SUBLW  0A
0C30:  BNZ   0C3C
....................          { 
....................             Motor1_on;Motor2_off; 
0C32:  BSF    F8C.0
0C34:  BCF    F95.0
0C36:  BCF    F8C.1
0C38:  BCF    F95.1
....................          } 
....................          else 
0C3A:  BRA    0C44
....................          { 
....................             Motor1_off;Motor2_off; 
0C3C:  BCF    F8C.0
0C3E:  BCF    F95.0
0C40:  BCF    F8C.1
0C42:  BCF    F95.1
....................          } 
....................      } 
....................      else 
0C44:  BRA    0C6E
....................      { 
....................         if(UP) 
0C46:  BSF    F95.2
0C48:  BTFSS  F83.2
0C4A:  BRA    0C66
....................         { 
....................             if(txbuf[5]==10) 
0C4C:  MOVF   2D,W
0C4E:  SUBLW  0A
0C50:  BNZ   0C5C
....................             { 
....................                Motor1_off;Motor2_on;    
0C52:  BCF    F8C.0
0C54:  BCF    F95.0
0C56:  BSF    F8C.1
0C58:  BCF    F95.1
....................             } 
....................             else 
0C5A:  BRA    0C64
....................             { 
....................                Motor1_off;Motor2_off; 
0C5C:  BCF    F8C.0
0C5E:  BCF    F95.0
0C60:  BCF    F8C.1
0C62:  BCF    F95.1
....................             } 
....................         }     
....................         else 
0C64:  BRA    0C6E
....................         { 
....................             Motor1_off;Motor2_off;    
0C66:  BCF    F8C.0
0C68:  BCF    F95.0
0C6A:  BCF    F8C.1
0C6C:  BCF    F95.1
....................         } 
....................      } 
....................       
....................       
....................        
....................      if(rxbuf[0]==5) //Luz Blanca  
0C6E:  MOVF   39,W
0C70:  SUBLW  05
0C72:  BNZ   0C78
....................       { 
....................          LuzBlanca_on; 
0C74:  BSF    F8A.2
0C76:  BCF    F93.2
....................       } 
....................       if(rxbuf[0]==10) //Luz Blanca 
0C78:  MOVF   39,W
0C7A:  SUBLW  0A
0C7C:  BNZ   0C82
....................       { 
....................          LuzBlanca_off; 
0C7E:  BCF    F8A.2
0C80:  BCF    F93.2
....................       } 
....................        
....................       if(rxbuf[1]==5) //Luz UV 
0C82:  MOVF   3A,W
0C84:  SUBLW  05
0C86:  BNZ   0C8C
....................       { 
....................          LuzUV_on; 
0C88:  BSF    F8A.3
0C8A:  BCF    F93.3
....................       } 
....................       if(rxbuf[1]==10) //Luz UV 
0C8C:  MOVF   3A,W
0C8E:  SUBLW  0A
0C90:  BNZ   0C96
....................       { 
....................          LuzUV_off; 
0C92:  BCF    F8A.3
0C94:  BCF    F93.3
....................       } 
....................        
....................       if(rxbuf[2]==5) //Motor 
0C96:  MOVF   3B,W
0C98:  SUBLW  05
0C9A:  BNZ   0CA0
....................       { 
....................          Motor_on; 
0C9C:  BSF    F8A.4
0C9E:  BCF    F93.4
....................       } 
....................       if(rxbuf[2]==10) //Motor 
0CA0:  MOVF   3B,W
0CA2:  SUBLW  0A
0CA4:  BNZ   0CAA
....................       { 
....................          Motor_off; 
0CA6:  BCF    F8A.4
0CA8:  BCF    F93.4
....................       } 
....................        
....................       if(rxbuf[3]==5) //Toma 
0CAA:  MOVF   3C,W
0CAC:  SUBLW  05
0CAE:  BNZ   0CB4
....................       { 
....................          Toma_on; 
0CB0:  BSF    F8A.5
0CB2:  BCF    F93.5
....................       } 
....................       if(rxbuf[3]==10) //Toma 
0CB4:  MOVF   3C,W
0CB6:  SUBLW  0A
0CB8:  BNZ   0CBE
....................       { 
....................          Toma_off; 
0CBA:  BCF    F8A.5
0CBC:  BCF    F93.5
....................       } 
....................        
....................       if(rxbuf[4]==5) //Alarma 
0CBE:  MOVF   3D,W
0CC0:  SUBLW  05
0CC2:  BNZ   0CC8
....................       { 
....................          Alarma_on; 
0CC4:  BSF    F8A.6
0CC6:  BCF    F93.6
....................       } 
....................       if(rxbuf[4]==10) //Alarma 
0CC8:  MOVF   3D,W
0CCA:  SUBLW  0A
0CCC:  BNZ   0CD2
....................       { 
....................          Alarma_off; 
0CCE:  BCF    F8A.6
0CD0:  BCF    F93.6
....................       } 
....................        
....................       if(capturar==1) 
0CD2:  BTFSS  4A.2
0CD4:  BRA    0CE8
....................       { 
....................          capturar=0;        
0CD6:  BCF    4A.2
....................          LeerDownflow(); 
0CD8:  MOVLB  0
0CDA:  BRA    0750
....................          LeerFiltroDownflow(); 
0CDC:  BRA    0776
....................          LeerFiltroInflow(); 
0CDE:  BRA    079C
....................          LeerInflow(); 
0CE0:  BRA    07C2
....................          LeerVidrioAbajo(); 
0CE2:  BRA    07E6
....................          LeerVidriook();    
0CE4:  BRA    0818
0CE6:  MOVLB  1
....................       } 
....................    } 
0CE8:  BRA    0C26
.................... } 
....................  
0CEA:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E3E   BROWNOUT NOWDT BORV20 PUT WDT32768 VREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
