CCS PCH C Compiler, Version 4.104, 5967               19-ene.-16 08:31

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Vertical\2015\Cabina Flujo Vertical 90-Barranquilla\Firmware\Cabina_PCR.lst

               ROM used: 12740 bytes (39%)
                         Largest free fragment is 20024
               RAM used: 165 (8%) at main() level
                         202 (10%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1850
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de Flujo Laminar Vertical. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Permite cambiar la velocidad del motor digitalmente. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
05CA:  CLRF   FEA
05CC:  MOVLW  B8
05CE:  MOVWF  FE9
05D0:  MOVF   FEF,W
05D2:  BZ    05F0
05D4:  MOVLW  0F
05D6:  MOVWF  01
05D8:  CLRF   00
05DA:  DECFSZ 00,F
05DC:  BRA    05DA
05DE:  DECFSZ 01,F
05E0:  BRA    05D8
05E2:  MOVLW  8F
05E4:  MOVWF  00
05E6:  DECFSZ 00,F
05E8:  BRA    05E6
05EA:  NOP   
05EC:  DECFSZ FEF,F
05EE:  BRA    05D4
05F0:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
05F2:  SWAPF  xB9,W
05F4:  ANDLW  F0
05F6:  MOVWF  00
05F8:  MOVLW  0F
05FA:  ANDWF  F81,W
05FC:  IORWF  00,W
05FE:  MOVWF  F81
....................       delay_cycles(30); 
0600:  MOVLW  09
0602:  MOVWF  00
0604:  DECFSZ 00,F
0606:  BRA    0604
0608:  BRA    060A
....................       lcd.enable = 1; 
060A:  BSF    F81.3
....................       delay_us(55); 
060C:  MOVLW  DB
060E:  MOVWF  00
0610:  DECFSZ 00,F
0612:  BRA    0610
0614:  BRA    0616
....................       lcd.enable = 0; 
0616:  BCF    F81.3
.................... } 
0618:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
061A:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7) ) ; 
....................       delay_ms(1); 
061C:  MOVLW  01
061E:  MOVWF  xB8
0620:  RCALL  05CA
....................       lcd.rs = address; 
0622:  BTFSS  xB6.0
0624:  BCF    F81.1
0626:  BTFSC  xB6.0
0628:  BSF    F81.1
....................       delay_cycles(30); 
062A:  MOVLW  09
062C:  MOVWF  00
062E:  DECFSZ 00,F
0630:  BRA    062E
0632:  BRA    0634
....................       lcd.rw = 0; 
0634:  BCF    F81.2
....................       delay_cycles(30); 
0636:  MOVLW  09
0638:  MOVWF  00
063A:  DECFSZ 00,F
063C:  BRA    063A
063E:  BRA    0640
....................       lcd.enable = 0; 
0640:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
0642:  SWAPF  xB7,W
0644:  MOVWF  xB8
0646:  MOVLW  0F
0648:  ANDWF  xB8,F
064A:  MOVFF  B8,B9
064E:  RCALL  05F2
....................       lcd_send_nibble(n & 0xf); 
0650:  MOVF   xB7,W
0652:  ANDLW  0F
0654:  MOVWF  xB8
0656:  MOVWF  xB9
0658:  RCALL  05F2
.................... } 
065A:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
065C:  MOVLW  00
065E:  MOVWF  F93
....................     lcd.rs = 0; 
0660:  BCF    F81.1
....................     lcd.rw = 0; 
0662:  BCF    F81.2
....................     lcd.enable = 0; 
0664:  BCF    F81.3
....................     delay_ms(15); 
0666:  MOVLW  0F
0668:  MOVWF  xB8
066A:  RCALL  05CA
....................     for(i=1;i<=3;++i) { 
066C:  MOVLW  01
066E:  MOVWF  xA1
0670:  MOVF   xA1,W
0672:  SUBLW  03
0674:  BNC   0686
....................        lcd_send_nibble(3); 
0676:  MOVLW  03
0678:  MOVWF  xB9
067A:  RCALL  05F2
....................        delay_ms(5); 
067C:  MOVLW  05
067E:  MOVWF  xB8
0680:  RCALL  05CA
....................     } 
0682:  INCF   xA1,F
0684:  BRA    0670
....................     lcd_send_nibble(2); 
0686:  MOVLW  02
0688:  MOVWF  xB9
068A:  RCALL  05F2
....................     for(i=0;i<=3;++i) 
068C:  CLRF   xA1
068E:  MOVF   xA1,W
0690:  SUBLW  03
0692:  BNC   06B0
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
0694:  CLRF   03
0696:  MOVF   xA1,W
0698:  MOVFF  FF2,A2
069C:  BCF    FF2.7
069E:  RCALL  0096
06A0:  BTFSC  xA2.7
06A2:  BSF    FF2.7
06A4:  MOVWF  xA2
06A6:  CLRF   xB6
06A8:  MOVWF  xB7
06AA:  RCALL  061A
06AC:  INCF   xA1,F
06AE:  BRA    068E
.................... } 
06B0:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
073A:  MOVLW  01
073C:  SUBWF  xB4,W
073E:  ADDLW  FC
0740:  BC    0760
0742:  ADDLW  04
0744:  GOTO   0770
....................      case 1 : address=0x80;break; 
0748:  MOVLW  80
074A:  MOVWF  xB5
074C:  BRA    0760
....................      case 2 : address=0xc0;break; 
074E:  MOVLW  C0
0750:  MOVWF  xB5
0752:  BRA    0760
....................      case 3 : address=0x94;break; 
0754:  MOVLW  94
0756:  MOVWF  xB5
0758:  BRA    0760
....................      case 4 : address=0xd4;break; 
075A:  MOVLW  D4
075C:  MOVWF  xB5
075E:  BRA    0760
....................    } 
....................    address+=x-1; 
0760:  MOVLW  01
0762:  SUBWF  xB3,W
0764:  ADDWF  xB5,F
....................    lcd_send_byte(0,address); 
0766:  CLRF   xB6
0768:  MOVFF  B5,B7
076C:  RCALL  061A
.................... } 
076E:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
079C:  MOVF   xB2,W
079E:  SUBLW  F1
07A0:  BNZ   07A6
....................    { 
....................       c=238; 
07A2:  MOVLW  EE
07A4:  MOVWF  xB2
....................    } 
....................    if(c=='Ñ') 
07A6:  MOVF   xB2,W
07A8:  SUBLW  D1
07AA:  BNZ   07B0
....................    { 
....................       c=255; 
07AC:  MOVLW  FF
07AE:  MOVWF  xB2
....................    } 
....................     
....................    switch (c) { 
07B0:  MOVF   xB2,W
07B2:  XORLW  0C
07B4:  BZ    07C0
07B6:  XORLW  06
07B8:  BZ    07D4
07BA:  XORLW  02
07BC:  BZ    07E2
07BE:  BRA    07EC
....................      case '\f'   : lcd_send_byte(0,1); 
07C0:  CLRF   xB6
07C2:  MOVLW  01
07C4:  MOVWF  xB7
07C6:  RCALL  061A
....................                    lcdline=1; 
07C8:  MOVLW  01
07CA:  MOVWF  16
....................                    delay_ms(2); 
07CC:  MOVLW  02
07CE:  MOVWF  xB8
07D0:  RCALL  05CA
....................                                            break; 
07D2:  BRA    07F8
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
07D4:  INCF   16,F
07D6:  MOVLW  01
07D8:  MOVWF  xB3
07DA:  MOVFF  16,B4
07DE:  RCALL  073A
07E0:  BRA    07F8
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
07E2:  CLRF   xB6
07E4:  MOVLW  10
07E6:  MOVWF  xB7
07E8:  RCALL  061A
07EA:  BRA    07F8
....................      default     : lcd_send_byte(1,c);     break; 
07EC:  MOVLW  01
07EE:  MOVWF  xB6
07F0:  MOVFF  B2,B7
07F4:  RCALL  061A
07F6:  BRA    07F8
....................    } 
.................... } 
07F8:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1506:  BCF    xB4.0
....................    y = x; 
1508:  MOVFF  A8,AD
150C:  MOVFF  A7,AC
1510:  MOVFF  A6,AB
1514:  MOVFF  A5,AA
....................  
....................    if (x < 0) 
1518:  MOVFF  A8,B8
151C:  MOVFF  A7,B7
1520:  MOVFF  A6,B6
1524:  MOVFF  A5,B5
1528:  CLRF   xBC
152A:  CLRF   xBB
152C:  CLRF   xBA
152E:  CLRF   xB9
1530:  RCALL  101C
1532:  BNC   153C
....................    { 
....................       s = 1; 
1534:  BSF    xB4.0
....................       y = -y; 
1536:  MOVF   xAB,W
1538:  XORLW  80
153A:  MOVWF  xAB
....................    } 
....................  
....................    if (y <= 32768.0) 
153C:  MOVFF  AD,B8
1540:  MOVFF  AC,B7
1544:  MOVFF  AB,B6
1548:  MOVFF  AA,B5
154C:  CLRF   xBC
154E:  CLRF   xBB
1550:  CLRF   xBA
1552:  MOVLW  8E
1554:  MOVWF  xB9
1556:  RCALL  101C
1558:  BC    155C
155A:  BNZ   158C
....................   res = (float32)(unsigned int16)y; 
155C:  MOVFF  AD,B8
1560:  MOVFF  AC,B7
1564:  MOVFF  AB,B6
1568:  MOVFF  AA,B5
156C:  RCALL  14CE
156E:  MOVFF  02,BA
1572:  MOVFF  01,B9
1576:  CALL   06B2
157A:  MOVFF  03,B1
157E:  MOVFF  02,B0
1582:  MOVFF  01,AF
1586:  MOVFF  00,AE
....................  
....................  else if (y < 10000000.0) 
158A:  BRA    1718
158C:  MOVFF  AD,B8
1590:  MOVFF  AC,B7
1594:  MOVFF  AB,B6
1598:  MOVFF  AA,B5
159C:  MOVLW  80
159E:  MOVWF  xBC
15A0:  MOVLW  96
15A2:  MOVWF  xBB
15A4:  MOVLW  18
15A6:  MOVWF  xBA
15A8:  MOVLW  96
15AA:  MOVWF  xB9
15AC:  RCALL  101C
15AE:  BTFSS  FD8.0
15B0:  BRA    1708
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
15B2:  MOVFF  AD,B8
15B6:  MOVFF  AC,B7
15BA:  MOVFF  AB,B6
15BE:  MOVFF  AA,B5
15C2:  CLRF   xBC
15C4:  CLRF   xBB
15C6:  CLRF   xBA
15C8:  MOVLW  8E
15CA:  MOVWF  xB9
15CC:  CALL   0C58
15D0:  MOVFF  03,B8
15D4:  MOVFF  02,B7
15D8:  MOVFF  01,B6
15DC:  MOVFF  00,B5
15E0:  RCALL  14CE
15E2:  MOVFF  02,B3
15E6:  MOVFF  01,B2
....................       y = 32768.0*(y/32768.0 - (float32)l); 
15EA:  MOVFF  AD,B8
15EE:  MOVFF  AC,B7
15F2:  MOVFF  AB,B6
15F6:  MOVFF  AA,B5
15FA:  CLRF   xBC
15FC:  CLRF   xBB
15FE:  CLRF   xBA
1600:  MOVLW  8E
1602:  MOVWF  xB9
1604:  CALL   0C58
1608:  MOVFF  00,B5
160C:  MOVFF  01,B6
1610:  MOVFF  02,B7
1614:  MOVFF  03,B8
1618:  MOVFF  B3,BA
161C:  MOVFF  B2,B9
1620:  CALL   06B2
1624:  BSF    FD8.1
1626:  MOVFF  B8,BC
162A:  MOVFF  B7,BB
162E:  MOVFF  B6,BA
1632:  MOVFF  B5,B9
1636:  MOVFF  03,C0
163A:  MOVFF  02,BF
163E:  MOVFF  01,BE
1642:  MOVFF  00,BD
1646:  CALL   0DB2
164A:  CLRF   xB8
164C:  CLRF   xB7
164E:  CLRF   xB6
1650:  MOVLW  8E
1652:  MOVWF  xB5
1654:  MOVFF  03,BC
1658:  MOVFF  02,BB
165C:  MOVFF  01,BA
1660:  MOVFF  00,B9
1664:  CALL   0B66
1668:  MOVFF  03,AD
166C:  MOVFF  02,AC
1670:  MOVFF  01,AB
1674:  MOVFF  00,AA
....................   res = 32768.0*(float32)l; 
1678:  MOVFF  B3,BA
167C:  MOVFF  B2,B9
1680:  CALL   06B2
1684:  CLRF   xB8
1686:  CLRF   xB7
1688:  CLRF   xB6
168A:  MOVLW  8E
168C:  MOVWF  xB5
168E:  MOVFF  03,BC
1692:  MOVFF  02,BB
1696:  MOVFF  01,BA
169A:  MOVFF  00,B9
169E:  CALL   0B66
16A2:  MOVFF  03,B1
16A6:  MOVFF  02,B0
16AA:  MOVFF  01,AF
16AE:  MOVFF  00,AE
....................   res += (float32)(unsigned int16)y; 
16B2:  MOVFF  AD,B8
16B6:  MOVFF  AC,B7
16BA:  MOVFF  AB,B6
16BE:  MOVFF  AA,B5
16C2:  RCALL  14CE
16C4:  MOVFF  02,BA
16C8:  MOVFF  01,B9
16CC:  CALL   06B2
16D0:  BCF    FD8.1
16D2:  MOVFF  B1,BC
16D6:  MOVFF  B0,BB
16DA:  MOVFF  AF,BA
16DE:  MOVFF  AE,B9
16E2:  MOVFF  03,C0
16E6:  MOVFF  02,BF
16EA:  MOVFF  01,BE
16EE:  MOVFF  00,BD
16F2:  CALL   0DB2
16F6:  MOVFF  03,B1
16FA:  MOVFF  02,B0
16FE:  MOVFF  01,AF
1702:  MOVFF  00,AE
....................  } 
....................  
....................  else 
1706:  BRA    1718
....................   res = y; 
1708:  MOVFF  AD,B1
170C:  MOVFF  AC,B0
1710:  MOVFF  AB,AF
1714:  MOVFF  AA,AE
....................  
....................  y = y - (float32)(unsigned int16)y; 
1718:  MOVFF  AD,B8
171C:  MOVFF  AC,B7
1720:  MOVFF  AB,B6
1724:  MOVFF  AA,B5
1728:  RCALL  14CE
172A:  MOVFF  02,BA
172E:  MOVFF  01,B9
1732:  CALL   06B2
1736:  BSF    FD8.1
1738:  MOVFF  AD,BC
173C:  MOVFF  AC,BB
1740:  MOVFF  AB,BA
1744:  MOVFF  AA,B9
1748:  MOVFF  03,C0
174C:  MOVFF  02,BF
1750:  MOVFF  01,BE
1754:  MOVFF  00,BD
1758:  CALL   0DB2
175C:  MOVFF  03,AD
1760:  MOVFF  02,AC
1764:  MOVFF  01,AB
1768:  MOVFF  00,AA
....................  
....................  if (s) 
176C:  BTFSS  xB4.0
176E:  BRA    1776
....................   res = -res; 
1770:  MOVF   xAF,W
1772:  XORLW  80
1774:  MOVWF  xAF
....................  
....................  if (y != 0) 
1776:  MOVFF  AD,B8
177A:  MOVFF  AC,B7
177E:  MOVFF  AB,B6
1782:  MOVFF  AA,B5
1786:  CLRF   xBC
1788:  CLRF   xBB
178A:  CLRF   xBA
178C:  CLRF   xB9
178E:  RCALL  101C
1790:  BZ    1802
....................  { 
....................   if (s == 1 && n == 0) 
1792:  BTFSS  xB4.0
1794:  BRA    17CA
1796:  MOVF   xA9,F
1798:  BNZ   17CA
....................    res -= 1.0; 
179A:  BSF    FD8.1
179C:  MOVFF  B1,BC
17A0:  MOVFF  B0,BB
17A4:  MOVFF  AF,BA
17A8:  MOVFF  AE,B9
17AC:  CLRF   xC0
17AE:  CLRF   xBF
17B0:  CLRF   xBE
17B2:  MOVLW  7F
17B4:  MOVWF  xBD
17B6:  CALL   0DB2
17BA:  MOVFF  03,B1
17BE:  MOVFF  02,B0
17C2:  MOVFF  01,AF
17C6:  MOVFF  00,AE
....................  
....................   if (s == 0 && n == 1) 
17CA:  BTFSC  xB4.0
17CC:  BRA    1802
17CE:  DECFSZ xA9,W
17D0:  BRA    1802
....................    res += 1.0; 
17D2:  BCF    FD8.1
17D4:  MOVFF  B1,BC
17D8:  MOVFF  B0,BB
17DC:  MOVFF  AF,BA
17E0:  MOVFF  AE,B9
17E4:  CLRF   xC0
17E6:  CLRF   xBF
17E8:  CLRF   xBE
17EA:  MOVLW  7F
17EC:  MOVWF  xBD
17EE:  CALL   0DB2
17F2:  MOVFF  03,B1
17F6:  MOVFF  02,B0
17FA:  MOVFF  01,AF
17FE:  MOVFF  00,AE
....................  } 
....................  if (x == 0) 
1802:  MOVFF  A8,B8
1806:  MOVFF  A7,B7
180A:  MOVFF  A6,B6
180E:  MOVFF  A5,B5
1812:  CLRF   xBC
1814:  CLRF   xBB
1816:  CLRF   xBA
1818:  CLRF   xB9
181A:  RCALL  101C
181C:  BNZ   1826
....................     res = 0; 
181E:  CLRF   xB1
1820:  CLRF   xB0
1822:  CLRF   xAF
1824:  CLRF   xAE
....................  
....................  return (res); 
1826:  MOVFF  AE,00
182A:  MOVFF  AF,01
182E:  MOVFF  B0,02
1832:  MOVFF  B1,03
.................... } 
1836:  GOTO   184E (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
183A:  MOVFF  A4,A8
183E:  MOVFF  A3,A7
1842:  MOVFF  A2,A6
1846:  MOVFF  A1,A5
184A:  CLRF   xA9
184C:  BRA    1506
.................... } 
184E:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   LEFT          input(PIN_E2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D0,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D0,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D1,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D1,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... #define   Motor_L2_on       output_bit(PIN_D2,1) 
.................... #define   Motor_L2_off      output_bit(PIN_D2,0) 
.................... #define   Motor_L3_on       output_bit(PIN_D4,1) 
.................... #define   Motor_L3_off      output_bit(PIN_D4,0) 
.................... #define   Motor_L4_on       output_bit(PIN_D5,1) 
.................... #define   Motor_L4_off      output_bit(PIN_D5,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,flagmv=0; 
.................... int8 Menu=0, n_opcionH=5,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0,Velocidad=1; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
....................  
.................... int16 tiempos,horas=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   3D,F
00BE:  BTFSC  FD8.2
00C0:  INCF   3E,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   3E,F
00C4:  BNZ   00CC
00C6:  MOVF   3D,W
00C8:  SUBLW  C7
00CA:  BC    0100
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   3E
00CE:  CLRF   3D
00D0:  INCF   2E,F
00D2:  BSF    18.0
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00D4:  BTFSS  17.0
00D6:  BRA    0100
....................    { 
....................       segundos++; 
00D8:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00DA:  BTFSC  17.7
00DC:  BRA    0100
....................       { 
....................          if(tempo_segundos>0) 
00DE:  MOVF   27,F
00E0:  BZ    00E6
....................          { 
....................             tempo_segundos--; 
00E2:  DECF   27,F
....................          } 
....................          else 
00E4:  BRA    0100
....................          { 
....................             if(tempo_minutos>0) 
00E6:  MOVF   26,F
00E8:  BZ    00F2
....................             { 
....................                tempo_minutos--; 
00EA:  DECF   26,F
....................                tempo_segundos=59; 
00EC:  MOVLW  3B
00EE:  MOVWF  27
....................             } 
....................             else 
00F0:  BRA    0100
....................             { 
....................                //tiempo_cumplido=1; 
....................                estadouv=0;Luz_UV_off; 
00F2:  BCF    17.0
00F4:  BCF    F8C.0
00F6:  BCF    F95.0
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
00F8:  MOVFF  28,26
00FC:  MOVFF  29,27
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
0100:  BCF    F9E.0
0102:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0978:  DECFSZ xA2,W
097A:  BRA    0990
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
097C:  MOVLW  02
097E:  MOVWF  xB3
0980:  MOVFF  A3,B4
0984:  RCALL  073A
0986:  MOVLW  06
0988:  MOVWF  FF6
098A:  MOVLW  01
098C:  MOVWF  FF7
098E:  RCALL  07FA
....................    if(x==2) 
0990:  MOVF   xA2,W
0992:  SUBLW  02
0994:  BNZ   09AA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Velocidad Motor    ");} 
0996:  MOVLW  02
0998:  MOVWF  xB3
099A:  MOVFF  A3,B4
099E:  RCALL  073A
09A0:  MOVLW  1A
09A2:  MOVWF  FF6
09A4:  MOVLW  01
09A6:  MOVWF  FF7
09A8:  RCALL  07FA
....................    if(x==3) 
09AA:  MOVF   xA2,W
09AC:  SUBLW  03
09AE:  BNZ   09C4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
09B0:  MOVLW  02
09B2:  MOVWF  xB3
09B4:  MOVFF  A3,B4
09B8:  RCALL  073A
09BA:  MOVLW  2E
09BC:  MOVWF  FF6
09BE:  MOVLW  01
09C0:  MOVWF  FF7
09C2:  RCALL  07FA
....................    if(x==4) 
09C4:  MOVF   xA2,W
09C6:  SUBLW  04
09C8:  BNZ   09DE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
09CA:  MOVLW  02
09CC:  MOVWF  xB3
09CE:  MOVFF  A3,B4
09D2:  RCALL  073A
09D4:  MOVLW  42
09D6:  MOVWF  FF6
09D8:  MOVLW  01
09DA:  MOVWF  FF7
09DC:  RCALL  07FA
.................... } 
09DE:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
0A46:  MOVF   xA3,F
0A48:  BNZ   0A5A
....................       {Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_off;} 
0A4A:  BCF    F8C.2
0A4C:  BCF    F95.2
0A4E:  BCF    F8C.4
0A50:  BCF    F95.4
0A52:  BCF    F8C.5
0A54:  BCF    F95.5
0A56:  BCF    F8C.3
0A58:  BCF    F95.3
....................    if(x==1) 
0A5A:  DECFSZ xA3,W
0A5C:  BRA    0A6E
....................       {Motor_L2_off;Motor_L3_off;Motor_L4_off;Motor_L1_on;} 
0A5E:  BCF    F8C.2
0A60:  BCF    F95.2
0A62:  BCF    F8C.4
0A64:  BCF    F95.4
0A66:  BCF    F8C.5
0A68:  BCF    F95.5
0A6A:  BSF    F8C.3
0A6C:  BCF    F95.3
....................    if(x==2) 
0A6E:  MOVF   xA3,W
0A70:  SUBLW  02
0A72:  BNZ   0A84
....................       {Motor_L3_off;Motor_L4_off;Motor_L1_off;Motor_L2_on;} 
0A74:  BCF    F8C.4
0A76:  BCF    F95.4
0A78:  BCF    F8C.5
0A7A:  BCF    F95.5
0A7C:  BCF    F8C.3
0A7E:  BCF    F95.3
0A80:  BSF    F8C.2
0A82:  BCF    F95.2
....................    if(x==3) 
0A84:  MOVF   xA3,W
0A86:  SUBLW  03
0A88:  BNZ   0A9A
....................       {Motor_L4_off;Motor_L1_off;Motor_L2_off;Motor_L3_on;} 
0A8A:  BCF    F8C.5
0A8C:  BCF    F95.5
0A8E:  BCF    F8C.3
0A90:  BCF    F95.3
0A92:  BCF    F8C.2
0A94:  BCF    F95.2
0A96:  BSF    F8C.4
0A98:  BCF    F95.4
....................    if(x==4) 
0A9A:  MOVF   xA3,W
0A9C:  SUBLW  04
0A9E:  BNZ   0AB0
....................       {Motor_L2_off;Motor_L3_off;Motor_L1_off;Motor_L4_on;} 
0AA0:  BCF    F8C.2
0AA2:  BCF    F95.2
0AA4:  BCF    F8C.4
0AA6:  BCF    F95.4
0AA8:  BCF    F8C.3
0AAA:  BCF    F95.3
0AAC:  BSF    F8C.5
0AAE:  BCF    F95.5
.................... } 
0AB0:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
06E8:  RLCF   xA6,W
06EA:  MOVWF  00
06EC:  RLCF   00,F
06EE:  MOVLW  FC
06F0:  ANDWF  00,F
06F2:  MOVFF  00,01
06F6:  MOVF   FC2,W
06F8:  ANDLW  C3
06FA:  IORWF  00,W
06FC:  MOVWF  FC2
06FE:  MOVLW  0A
0700:  MOVWF  xB8
0702:  RCALL  05CA
0704:  BSF    FC2.1
0706:  BTFSC  FC2.1
0708:  BRA    0706
070A:  MOVFF  FC4,03
070E:  MOVFF  FC3,B9
0712:  MOVFF  FC4,BA
0716:  RCALL  06B2
0718:  MOVFF  03,AA
071C:  MOVFF  02,A9
0720:  MOVFF  01,A8
0724:  MOVFF  00,A7
0728:  MOVFF  A7,00
072C:  MOVFF  A8,01
0730:  MOVFF  A9,02
0734:  MOVFF  AA,03
.................... } 
0738:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1092:  CLRF   xA5
1094:  CLRF   xA4
1096:  CLRF   xA3
1098:  CLRF   xA2
....................    float promediopresion=0.0; 
....................    V1 = (sensores(1)*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
109A:  MOVLW  01
109C:  MOVWF  xA6
109E:  CALL   06E8
10A2:  MOVFF  00,A6
10A6:  MOVFF  01,A7
10AA:  MOVFF  02,A8
10AE:  MOVFF  03,A9
10B2:  MOVFF  03,B8
10B6:  MOVFF  02,B7
10BA:  MOVFF  01,B6
10BE:  MOVFF  00,B5
10C2:  CLRF   xBC
10C4:  CLRF   xBB
10C6:  MOVLW  20
10C8:  MOVWF  xBA
10CA:  MOVLW  81
10CC:  MOVWF  xB9
10CE:  RCALL  0B66
10D0:  MOVFF  00,A6
10D4:  MOVFF  01,A7
10D8:  MOVFF  02,A8
10DC:  MOVFF  03,A9
10E0:  MOVFF  03,B8
10E4:  MOVFF  02,B7
10E8:  MOVFF  01,B6
10EC:  MOVFF  00,B5
10F0:  CLRF   xBC
10F2:  MOVLW  C0
10F4:  MOVWF  xBB
10F6:  MOVLW  7F
10F8:  MOVWF  xBA
10FA:  MOVLW  88
10FC:  MOVWF  xB9
10FE:  RCALL  0C58
1100:  MOVFF  03,94
1104:  MOVFF  02,93
1108:  MOVFF  01,92
110C:  MOVFF  00,91
....................    Presion=(V1/1.81)-1.0;// Presion=(Voltaje/Ganancia)-1 
1110:  MOVFF  94,B8
1114:  MOVFF  93,B7
1118:  MOVFF  92,B6
111C:  MOVFF  91,B5
1120:  MOVLW  14
1122:  MOVWF  xBC
1124:  MOVLW  AE
1126:  MOVWF  xBB
1128:  MOVLW  67
112A:  MOVWF  xBA
112C:  MOVLW  7F
112E:  MOVWF  xB9
1130:  RCALL  0C58
1132:  MOVFF  00,A6
1136:  MOVFF  01,A7
113A:  MOVFF  02,A8
113E:  MOVFF  03,A9
1142:  BSF    FD8.1
1144:  MOVFF  03,BC
1148:  MOVFF  02,BB
114C:  MOVFF  01,BA
1150:  MOVFF  00,B9
1154:  CLRF   xC0
1156:  CLRF   xBF
1158:  CLRF   xBE
115A:  MOVLW  7F
115C:  MOVWF  xBD
115E:  RCALL  0DB2
1160:  MOVFF  03,98
1164:  MOVFF  02,97
1168:  MOVFF  01,96
116C:  MOVFF  00,95
....................     
....................    if(Presion<0.0) 
1170:  MOVFF  98,B8
1174:  MOVFF  97,B7
1178:  MOVFF  96,B6
117C:  MOVFF  95,B5
1180:  CLRF   xBC
1182:  CLRF   xBB
1184:  CLRF   xBA
1186:  CLRF   xB9
1188:  RCALL  101C
118A:  BNC   1194
....................    { 
....................       Presion=0.0; 
118C:  CLRF   x98
118E:  CLRF   x97
1190:  CLRF   x96
1192:  CLRF   x95
....................    } 
....................  
....................    if(r>media-1) 
1194:  MOVLW  01
1196:  SUBWF  xA1,W
1198:  SUBWF  2A,W
119A:  BZ    11A0
119C:  BNC   11A0
....................    {r=0;} 
119E:  CLRF   2A
....................    PromPresion[r]=Presion;r++; 
11A0:  MOVF   2A,W
11A2:  MULLW  04
11A4:  MOVF   FF3,W
11A6:  CLRF   03
11A8:  ADDLW  41
11AA:  MOVWF  FE9
11AC:  MOVLW  00
11AE:  ADDWFC 03,W
11B0:  MOVWF  FEA
11B2:  MOVFF  95,FEF
11B6:  MOVFF  96,FEC
11BA:  MOVFF  97,FEC
11BE:  MOVFF  98,FEC
11C2:  INCF   2A,F
....................           
....................    for(q=0;q<=(media-1);q++) 
11C4:  CLRF   2B
11C6:  MOVLW  01
11C8:  SUBWF  xA1,W
11CA:  SUBWF  2B,W
11CC:  BZ    11D0
11CE:  BC    123A
....................    { 
....................       promediopresion+=PromPresion[q]; 
11D0:  MOVF   2B,W
11D2:  MULLW  04
11D4:  MOVF   FF3,W
11D6:  CLRF   03
11D8:  ADDLW  41
11DA:  MOVWF  FE9
11DC:  MOVLW  00
11DE:  ADDWFC 03,W
11E0:  MOVWF  FEA
11E2:  MOVFF  FEF,00
11E6:  MOVFF  FEC,01
11EA:  MOVFF  FEC,02
11EE:  MOVFF  FEC,03
11F2:  MOVFF  FEA,A7
11F6:  MOVFF  FE9,A6
11FA:  BCF    FD8.1
11FC:  MOVFF  A5,BC
1200:  MOVFF  A4,BB
1204:  MOVFF  A3,BA
1208:  MOVFF  A2,B9
120C:  MOVFF  03,C0
1210:  MOVFF  02,BF
1214:  MOVFF  01,BE
1218:  MOVFF  00,BD
121C:  RCALL  0DB2
121E:  MOVFF  A7,FEA
1222:  MOVFF  A6,FE9
1226:  MOVFF  03,A5
122A:  MOVFF  02,A4
122E:  MOVFF  01,A3
1232:  MOVFF  00,A2
....................    }  
1236:  INCF   2B,F
1238:  BRA    11C6
....................    promediopresion=promediopresion/media;    
123A:  CLRF   xBA
123C:  MOVFF  A1,B9
1240:  CALL   06B2
1244:  MOVFF  A5,B8
1248:  MOVFF  A4,B7
124C:  MOVFF  A3,B6
1250:  MOVFF  A2,B5
1254:  MOVFF  03,BC
1258:  MOVFF  02,BB
125C:  MOVFF  01,BA
1260:  MOVFF  00,B9
1264:  RCALL  0C58
1266:  MOVFF  03,A5
126A:  MOVFF  02,A4
126E:  MOVFF  01,A3
1272:  MOVFF  00,A2
....................     
....................    return promediopresion; 
1276:  MOVFF  A2,00
127A:  MOVFF  A3,01
127E:  MOVFF  A4,02
1282:  MOVFF  A5,03
.................... } 
1286:  GOTO   2CF6 (RETURN)
....................  
.................... void Limita(void){ 
....................    if(Velocidad>4) 
*
081A:  BTFSC  31.7
081C:  BRA    0828
081E:  MOVF   31,W
0820:  SUBLW  04
0822:  BC    0828
....................       Velocidad=1; 
0824:  MOVLW  01
0826:  MOVWF  31
....................    if(Contrasena[0]>9) 
0828:  MOVF   39,W
082A:  SUBLW  09
082C:  BC    0830
....................       Contrasena[0]=0; 
082E:  CLRF   39
....................    if(Contrasena[1]>9) 
0830:  MOVF   3A,W
0832:  SUBLW  09
0834:  BC    0838
....................       Contrasena[1]=0; 
0836:  CLRF   3A
....................    if(Contrasena[2]>9) 
0838:  MOVF   3B,W
083A:  SUBLW  09
083C:  BC    0840
....................       Contrasena[2]=0; 
083E:  CLRF   3B
....................    if(Contrasena[3]>9) 
0840:  MOVF   3C,W
0842:  SUBLW  09
0844:  BC    0848
....................       Contrasena[3]=0; 
0846:  CLRF   3C
....................    if(tempo_minutos>60) 
0848:  MOVF   26,W
084A:  SUBLW  3C
084C:  BC    0850
....................       tempo_minutos=0; 
084E:  CLRF   26
....................    if(tempo_segundos) 
0850:  MOVF   27,F
0852:  BZ    0856
....................       tempo_segundos=0; 
0854:  CLRF   27
....................    if(segundos>60) 
0856:  MOVF   22,W
0858:  SUBLW  3C
085A:  BC    085E
....................       segundos=0; 
085C:  CLRF   22
....................    if(minutos>60) 
085E:  MOVF   23,W
0860:  SUBLW  3C
0862:  BC    0866
....................       minutos=0;  
0864:  CLRF   23
.................... } 
0866:  GOTO   1B6A (RETURN)
.................... void main () 
.................... { 
*
1850:  CLRF   FF8
1852:  BCF    FD0.7
1854:  BSF    07.7
1856:  CLRF   FEA
1858:  CLRF   FE9
185A:  BCF    17.0
185C:  BCF    17.1
185E:  BCF    17.2
1860:  BCF    17.3
1862:  BCF    17.4
1864:  BCF    17.5
1866:  BCF    17.6
1868:  BCF    17.7
186A:  BCF    18.0
186C:  BCF    18.1
186E:  BCF    18.2
1870:  BCF    18.3
1872:  CLRF   19
1874:  MOVLW  05
1876:  MOVWF  1A
1878:  MOVLW  02
187A:  MOVWF  1B
187C:  MOVLW  0B
187E:  MOVWF  1C
1880:  MOVLW  02
1882:  MOVWF  1D
1884:  MOVLW  03
1886:  MOVWF  1E
1888:  MOVLW  02
188A:  MOVWF  1F
188C:  MOVWF  20
188E:  MOVLW  04
1890:  MOVWF  21
1892:  CLRF   22
1894:  CLRF   23
1896:  CLRF   24
1898:  CLRF   25
189A:  CLRF   26
189C:  CLRF   27
189E:  CLRF   28
18A0:  CLRF   29
18A2:  CLRF   2A
18A4:  CLRF   2B
18A6:  CLRF   2C
18A8:  MOVLW  01
18AA:  MOVWF  2D
18AC:  CLRF   2E
18AE:  CLRF   2F
18B0:  CLRF   30
18B2:  MOVWF  31
18B4:  CLRF   40
18B6:  CLRF   3F
18B8:  CLRF   x94
18BA:  CLRF   x93
18BC:  CLRF   x92
18BE:  CLRF   x91
18C0:  CLRF   x98
18C2:  CLRF   x97
18C4:  CLRF   x96
18C6:  CLRF   x95
18C8:  CLRF   x9C
18CA:  CLRF   x9B
18CC:  CLRF   x9A
18CE:  CLRF   x99
18D0:  CLRF   xA0
18D2:  CLRF   x9F
18D4:  CLRF   x9E
18D6:  CLRF   x9D
18D8:  MOVF   FC1,W
18DA:  ANDLW  C0
18DC:  IORLW  0F
18DE:  MOVWF  FC1
18E0:  MOVLW  07
18E2:  MOVWF  FB4
18E4:  MOVLW  3E
18E6:  MOVWF  32
18E8:  MOVLW  20
18EA:  MOVWF  33
18EC:  MOVLW  5E
18EE:  MOVWF  34
18F0:  CLRF   35
18F2:  CLRF   36
18F4:  CLRF   37
18F6:  CLRF   38
18F8:  CLRF   39
18FA:  CLRF   3A
18FC:  CLRF   3B
18FE:  CLRF   3C
1900:  CLRF   41
1902:  CLRF   42
1904:  CLRF   43
1906:  CLRF   44
1908:  CLRF   45
190A:  CLRF   46
190C:  CLRF   47
190E:  CLRF   48
1910:  CLRF   49
1912:  CLRF   4A
1914:  CLRF   4B
1916:  CLRF   4C
1918:  CLRF   4D
191A:  CLRF   4E
191C:  CLRF   4F
191E:  CLRF   50
1920:  CLRF   51
1922:  CLRF   52
1924:  CLRF   53
1926:  CLRF   54
1928:  CLRF   55
192A:  CLRF   56
192C:  CLRF   57
192E:  CLRF   58
1930:  CLRF   59
1932:  CLRF   5A
1934:  CLRF   5B
1936:  CLRF   5C
1938:  CLRF   5D
193A:  CLRF   5E
193C:  CLRF   5F
193E:  CLRF   x60
1940:  CLRF   x61
1942:  CLRF   x62
1944:  CLRF   x63
1946:  CLRF   x64
1948:  CLRF   x65
194A:  CLRF   x66
194C:  CLRF   x67
194E:  CLRF   x68
1950:  CLRF   x69
1952:  CLRF   x6A
1954:  CLRF   x6B
1956:  CLRF   x6C
1958:  CLRF   x6D
195A:  CLRF   x6E
195C:  CLRF   x6F
195E:  CLRF   x70
1960:  CLRF   x71
1962:  CLRF   x72
1964:  CLRF   x73
1966:  CLRF   x74
1968:  CLRF   x75
196A:  CLRF   x76
196C:  CLRF   x77
196E:  CLRF   x78
1970:  CLRF   x79
1972:  CLRF   x7A
1974:  CLRF   x7B
1976:  CLRF   x7C
1978:  CLRF   x7D
197A:  CLRF   x7E
197C:  CLRF   x7F
197E:  CLRF   x80
1980:  CLRF   x81
1982:  CLRF   x82
1984:  CLRF   x83
1986:  CLRF   x84
1988:  CLRF   x85
198A:  CLRF   x86
198C:  CLRF   x87
198E:  CLRF   x88
1990:  CLRF   x89
1992:  CLRF   x8A
1994:  CLRF   x8B
1996:  CLRF   x8C
1998:  CLRF   x8D
199A:  CLRF   x8E
199C:  CLRF   x8F
199E:  CLRF   x90
....................    output_d(0); 
19A0:  CLRF   F95
19A2:  CLRF   F8C
....................    lcd_init(); 
19A4:  CALL   065C
....................    enable_interrupts(global); 
19A8:  MOVLW  C0
19AA:  IORWF  FF2,F
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
19AC:  MOVLW  85
19AE:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
19B0:  BSF    F9D.0
....................    setup_adc_ports(AN0_TO_AN1); 
19B2:  MOVF   FC1,W
19B4:  ANDLW  C0
19B6:  IORLW  0D
19B8:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
19BA:  BCF    FC0.0
19BC:  BSF    FC0.1
19BE:  BCF    FC0.2
19C0:  BSF    FC0.7
19C2:  BSF    FC2.0
....................    sensores(0); 
19C4:  CLRF   xA6
19C6:  CALL   06E8
....................    lcd_gotoxy(1,1); 
19CA:  MOVLW  01
19CC:  MOVWF  xB3
19CE:  MOVWF  xB4
19D0:  CALL   073A
....................    printf(lcd_putc,"  CABINA DE FLUJO   "); 
19D4:  MOVLW  56
19D6:  MOVWF  FF6
19D8:  MOVLW  01
19DA:  MOVWF  FF7
19DC:  CALL   07FA
....................    lcd_gotoxy(1,2); 
19E0:  MOVLW  01
19E2:  MOVWF  xB3
19E4:  MOVLW  02
19E6:  MOVWF  xB4
19E8:  CALL   073A
....................    printf(lcd_putc,"  LAMINAR VERTICAL  "); 
19EC:  MOVLW  6C
19EE:  MOVWF  FF6
19F0:  MOVLW  01
19F2:  MOVWF  FF7
19F4:  CALL   07FA
....................    lcd_gotoxy(1,3); 
19F8:  MOVLW  01
19FA:  MOVWF  xB3
19FC:  MOVLW  03
19FE:  MOVWF  xB4
1A00:  CALL   073A
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1A04:  MOVLW  82
1A06:  MOVWF  FF6
1A08:  MOVLW  01
1A0A:  MOVWF  FF7
1A0C:  CALL   07FA
....................    lcd_gotoxy(1,4); 
1A10:  MOVLW  01
1A12:  MOVWF  xB3
1A14:  MOVLW  04
1A16:  MOVWF  xB4
1A18:  CALL   073A
....................    printf(lcd_putc,"   REF:  JPCFV90    "); 
1A1C:  MOVLW  98
1A1E:  MOVWF  FF6
1A20:  MOVLW  01
1A22:  MOVWF  FF7
1A24:  CALL   07FA
....................    delay_ms(2000); 
1A28:  MOVLW  08
1A2A:  MOVWF  xA1
1A2C:  MOVLW  FA
1A2E:  MOVWF  xB8
1A30:  CALL   05CA
1A34:  DECFSZ xA1,F
1A36:  BRA    1A2C
....................    printf(lcd_putc,"\f"); 
1A38:  MOVLW  0C
1A3A:  MOVWF  xB2
1A3C:  CALL   079C
....................     
....................    //Solo para simulacion 
....................    //write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20); 
....................    //write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
....................    Velocidad=read_eeprom(5); 
1A40:  MOVFF  FF2,A1
1A44:  BCF    FF2.7
1A46:  MOVLW  05
1A48:  MOVWF  FA9
1A4A:  BCF    FA6.6
1A4C:  BCF    FA6.7
1A4E:  BSF    FA6.0
1A50:  MOVF   FA8,W
1A52:  BTFSC  xA1.7
1A54:  BSF    FF2.7
1A56:  MOVWF  31
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1A58:  MOVFF  FF2,A1
1A5C:  BCF    FF2.7
1A5E:  CLRF   FA9
1A60:  BCF    FA6.6
1A62:  BCF    FA6.7
1A64:  BSF    FA6.0
1A66:  MOVF   FA8,W
1A68:  BTFSC  xA1.7
1A6A:  BSF    FF2.7
1A6C:  MOVWF  39
1A6E:  MOVLW  14
1A70:  MOVWF  xB8
1A72:  CALL   05CA
1A76:  MOVFF  FF2,A1
1A7A:  BCF    FF2.7
1A7C:  MOVLW  01
1A7E:  MOVWF  FA9
1A80:  BCF    FA6.6
1A82:  BCF    FA6.7
1A84:  BSF    FA6.0
1A86:  MOVF   FA8,W
1A88:  BTFSC  xA1.7
1A8A:  BSF    FF2.7
1A8C:  MOVWF  3A
1A8E:  MOVLW  14
1A90:  MOVWF  xB8
1A92:  CALL   05CA
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1A96:  MOVFF  FF2,A1
1A9A:  BCF    FF2.7
1A9C:  MOVLW  02
1A9E:  MOVWF  FA9
1AA0:  BCF    FA6.6
1AA2:  BCF    FA6.7
1AA4:  BSF    FA6.0
1AA6:  MOVF   FA8,W
1AA8:  BTFSC  xA1.7
1AAA:  BSF    FF2.7
1AAC:  MOVWF  3B
1AAE:  MOVLW  14
1AB0:  MOVWF  xB8
1AB2:  CALL   05CA
1AB6:  MOVFF  FF2,A1
1ABA:  BCF    FF2.7
1ABC:  MOVLW  03
1ABE:  MOVWF  FA9
1AC0:  BCF    FA6.6
1AC2:  BCF    FA6.7
1AC4:  BSF    FA6.0
1AC6:  MOVF   FA8,W
1AC8:  BTFSC  xA1.7
1ACA:  BSF    FF2.7
1ACC:  MOVWF  3C
1ACE:  MOVLW  14
1AD0:  MOVWF  xB8
1AD2:  CALL   05CA
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(21); 
1AD6:  MOVFF  FF2,A1
1ADA:  BCF    FF2.7
1ADC:  MOVLW  14
1ADE:  MOVWF  FA9
1AE0:  BCF    FA6.6
1AE2:  BCF    FA6.7
1AE4:  BSF    FA6.0
1AE6:  MOVF   FA8,W
1AE8:  BTFSC  xA1.7
1AEA:  BSF    FF2.7
1AEC:  MOVWF  26
1AEE:  MOVFF  FF2,A1
1AF2:  BCF    FF2.7
1AF4:  MOVLW  15
1AF6:  MOVWF  FA9
1AF8:  BCF    FA6.6
1AFA:  BCF    FA6.7
1AFC:  BSF    FA6.0
1AFE:  MOVF   FA8,W
1B00:  BTFSC  xA1.7
1B02:  BSF    FF2.7
1B04:  MOVWF  27
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horasL=read_eeprom(52);horasH=read_eeprom(53);  
1B06:  MOVFF  FF2,A1
1B0A:  BCF    FF2.7
1B0C:  MOVLW  32
1B0E:  MOVWF  FA9
1B10:  BCF    FA6.6
1B12:  BCF    FA6.7
1B14:  BSF    FA6.0
1B16:  MOVF   FA8,W
1B18:  BTFSC  xA1.7
1B1A:  BSF    FF2.7
1B1C:  MOVWF  22
1B1E:  MOVFF  FF2,A1
1B22:  BCF    FF2.7
1B24:  MOVLW  33
1B26:  MOVWF  FA9
1B28:  BCF    FA6.6
1B2A:  BCF    FA6.7
1B2C:  BSF    FA6.0
1B2E:  MOVF   FA8,W
1B30:  BTFSC  xA1.7
1B32:  BSF    FF2.7
1B34:  MOVWF  23
1B36:  MOVFF  FF2,A1
1B3A:  BCF    FF2.7
1B3C:  MOVLW  34
1B3E:  MOVWF  FA9
1B40:  BCF    FA6.6
1B42:  BCF    FA6.7
1B44:  BSF    FA6.0
1B46:  MOVF   FA8,W
1B48:  BTFSC  xA1.7
1B4A:  BSF    FF2.7
1B4C:  MOVWF  24
1B4E:  MOVFF  FF2,A1
1B52:  BCF    FF2.7
1B54:  MOVLW  35
1B56:  MOVWF  FA9
1B58:  BCF    FA6.6
1B5A:  BCF    FA6.7
1B5C:  BSF    FA6.0
1B5E:  MOVF   FA8,W
1B60:  BTFSC  xA1.7
1B62:  BSF    FF2.7
1B64:  MOVWF  25
....................    Limita(); 
1B66:  GOTO   081A
....................    horas=make16(horasH,horasL); 
1B6A:  MOVFF  25,40
1B6E:  MOVFF  24,3F
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1B72:  MOVFF  26,28
1B76:  MOVFF  27,29
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1B7A:  MOVF   19,F
1B7C:  BTFSS  FD8.2
1B7E:  BRA    1F28
....................    lcd_gotoxy(1,1); 
1B80:  MOVLW  01
1B82:  MOVWF  xB3
1B84:  MOVWF  xB4
1B86:  CALL   073A
....................    printf(lcd_putc,"     Ingrese        "); 
1B8A:  MOVLW  AE
1B8C:  MOVWF  FF6
1B8E:  MOVLW  01
1B90:  MOVWF  FF7
1B92:  CALL   07FA
....................    lcd_gotoxy(1,2); 
1B96:  MOVLW  01
1B98:  MOVWF  xB3
1B9A:  MOVLW  02
1B9C:  MOVWF  xB4
1B9E:  CALL   073A
....................    printf(lcd_putc,"    Contraseña      "); 
1BA2:  MOVLW  C4
1BA4:  MOVWF  FF6
1BA6:  MOVLW  01
1BA8:  MOVWF  FF7
1BAA:  CALL   07FA
....................    lcd_gotoxy(1,3); 
1BAE:  MOVLW  01
1BB0:  MOVWF  xB3
1BB2:  MOVLW  03
1BB4:  MOVWF  xB4
1BB6:  CALL   073A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1BBA:  MOVLW  DA
1BBC:  MOVWF  FF6
1BBE:  MOVLW  01
1BC0:  MOVWF  FF7
1BC2:  MOVLW  0A
1BC4:  MOVWF  xA5
1BC6:  CALL   086A
1BCA:  MOVFF  35,A1
1BCE:  MOVLW  1F
1BD0:  MOVWF  xA2
1BD2:  CALL   08B0
1BD6:  MOVFF  36,A1
1BDA:  MOVLW  1F
1BDC:  MOVWF  xA2
1BDE:  CALL   08B0
1BE2:  MOVFF  37,A1
1BE6:  MOVLW  1F
1BE8:  MOVWF  xA2
1BEA:  CALL   08B0
1BEE:  MOVFF  38,A1
1BF2:  MOVLW  1F
1BF4:  MOVWF  xA2
1BF6:  CALL   08B0
1BFA:  MOVLW  20
1BFC:  MOVWF  xB2
1BFE:  CALL   079C
1C02:  MOVLW  20
1C04:  MOVWF  xB2
1C06:  CALL   079C
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
1C0A:  BSF    F92.5
1C0C:  BTFSS  F80.5
1C0E:  BRA    1C32
....................       {  if(Flanco == 0)  
1C10:  BTFSC  17.3
1C12:  BRA    1C30
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1C14:  MOVLW  0B
1C16:  SUBWF  1C,W
1C18:  CLRF   03
1C1A:  ADDLW  35
1C1C:  MOVWF  FE9
1C1E:  MOVLW  00
1C20:  ADDWFC 03,W
1C22:  MOVWF  FEA
1C24:  INCF   FEF,F
1C26:  BSF    17.3
1C28:  MOVLW  1E
1C2A:  MOVWF  xB8
1C2C:  CALL   05CA
....................          else 
1C30:  BRA    1C34
....................             {Flanco = 0;} 
1C32:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1C34:  BSF    F96.0
1C36:  BTFSS  F84.0
1C38:  BRA    1C5C
....................       {  if(Flanco2 == 0)  
1C3A:  BTFSC  17.5
1C3C:  BRA    1C5A
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1C3E:  MOVLW  0B
1C40:  SUBWF  1C,W
1C42:  CLRF   03
1C44:  ADDLW  35
1C46:  MOVWF  FE9
1C48:  MOVLW  00
1C4A:  ADDWFC 03,W
1C4C:  MOVWF  FEA
1C4E:  DECF   FEF,F
1C50:  BSF    17.5
1C52:  MOVLW  1E
1C54:  MOVWF  xB8
1C56:  CALL   05CA
....................          else 
1C5A:  BRA    1C5E
....................             {Flanco2 = 0;} 
1C5C:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1C5E:  BSF    F96.1
1C60:  BTFSS  F84.1
1C62:  BRA    1C7E
....................       {  if(Flanco1 == 0)  
1C64:  BTFSC  17.4
1C66:  BRA    1C7C
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1C68:  BSF    17.4
1C6A:  INCF   1C,F
1C6C:  MOVLW  1E
1C6E:  MOVWF  xB8
1C70:  CALL   05CA
1C74:  MOVLW  0C
1C76:  MOVWF  xB2
1C78:  CALL   079C
....................          else 
1C7C:  BRA    1C80
....................             {Flanco1 = 0;}    
1C7E:  BCF    17.4
....................              
....................        if(LEFT)// Si Oprime izquierda 
1C80:  BSF    F96.2
1C82:  BTFSS  F84.2
1C84:  BRA    1CA0
....................       {  if(Flanco3 == 0)  
1C86:  BTFSC  17.6
1C88:  BRA    1C9E
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
1C8A:  BSF    17.6
1C8C:  DECF   1C,F
1C8E:  MOVLW  1E
1C90:  MOVWF  xB8
1C92:  CALL   05CA
1C96:  MOVLW  0C
1C98:  MOVWF  xB2
1C9A:  CALL   079C
....................          else 
1C9E:  BRA    1CA2
....................             {Flanco3 = 0;}     
1CA0:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1CA2:  MOVLW  0B
1CA4:  SUBWF  1C,W
1CA6:  CLRF   03
1CA8:  ADDLW  35
1CAA:  MOVWF  FE9
1CAC:  MOVLW  00
1CAE:  ADDWFC 03,W
1CB0:  MOVWF  FEA
1CB2:  BTFSC  FEF.7
1CB4:  BRA    1CB8
1CB6:  BRA    1CCC
....................        {clave[unidad-11]=9;} 
1CB8:  MOVLW  0B
1CBA:  SUBWF  1C,W
1CBC:  CLRF   03
1CBE:  ADDLW  35
1CC0:  MOVWF  FE9
1CC2:  MOVLW  00
1CC4:  ADDWFC 03,W
1CC6:  MOVWF  FEA
1CC8:  MOVLW  09
1CCA:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1CCC:  MOVLW  0B
1CCE:  SUBWF  1C,W
1CD0:  CLRF   03
1CD2:  ADDLW  35
1CD4:  MOVWF  FE9
1CD6:  MOVLW  00
1CD8:  ADDWFC 03,W
1CDA:  MOVWF  FEA
1CDC:  BTFSC  FEF.7
1CDE:  BRA    1CF8
1CE0:  MOVF   FEF,W
1CE2:  SUBLW  09
1CE4:  BC    1CF8
....................        {clave[unidad-11]=0;} 
1CE6:  MOVLW  0B
1CE8:  SUBWF  1C,W
1CEA:  CLRF   03
1CEC:  ADDLW  35
1CEE:  MOVWF  FE9
1CF0:  MOVLW  00
1CF2:  ADDWFC 03,W
1CF4:  MOVWF  FEA
1CF6:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1CF8:  MOVF   1C,W
1CFA:  SUBLW  0A
1CFC:  BNC   1D02
....................        {unidad=11;} 
1CFE:  MOVLW  0B
1D00:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1D02:  MOVFF  1C,B3
1D06:  MOVLW  04
1D08:  MOVWF  xB4
1D0A:  CALL   073A
....................        lcd_putc(t[2]); 
1D0E:  MOVFF  34,B2
1D12:  CALL   079C
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1D16:  MOVF   1C,W
1D18:  SUBLW  0E
1D1A:  BTFSC  FD8.0
1D1C:  BRA    1F04
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1D1E:  MOVF   35,W
1D20:  SUBLW  03
1D22:  BNZ   1DFE
1D24:  MOVF   36,W
1D26:  SUBLW  08
1D28:  BNZ   1DFE
1D2A:  MOVF   37,W
1D2C:  SUBLW  09
1D2E:  BNZ   1DFE
1D30:  MOVF   38,W
1D32:  SUBLW  02
1D34:  BNZ   1DFE
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1D36:  CLRF   FA9
1D38:  CLRF   FA8
1D3A:  BCF    FA6.6
1D3C:  BCF    FA6.7
1D3E:  BSF    FA6.2
1D40:  MOVF   FF2,W
1D42:  MOVWF  00
1D44:  BCF    FF2.7
1D46:  MOVLB  F
1D48:  MOVLW  55
1D4A:  MOVWF  FA7
1D4C:  MOVLW  AA
1D4E:  MOVWF  FA7
1D50:  BSF    FA6.1
1D52:  BTFSC  FA6.1
1D54:  BRA    1D52
1D56:  BCF    FA6.2
1D58:  MOVF   00,W
1D5A:  IORWF  FF2,F
1D5C:  MOVLW  14
1D5E:  MOVLB  0
1D60:  MOVWF  xB8
1D62:  CALL   05CA
1D66:  MOVLW  01
1D68:  MOVWF  FA9
1D6A:  CLRF   FA8
1D6C:  BCF    FA6.6
1D6E:  BCF    FA6.7
1D70:  BSF    FA6.2
1D72:  MOVF   FF2,W
1D74:  MOVWF  00
1D76:  BCF    FF2.7
1D78:  MOVLB  F
1D7A:  MOVLW  55
1D7C:  MOVWF  FA7
1D7E:  MOVLW  AA
1D80:  MOVWF  FA7
1D82:  BSF    FA6.1
1D84:  BTFSC  FA6.1
1D86:  BRA    1D84
1D88:  BCF    FA6.2
1D8A:  MOVF   00,W
1D8C:  IORWF  FF2,F
1D8E:  MOVLW  14
1D90:  MOVLB  0
1D92:  MOVWF  xB8
1D94:  CALL   05CA
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1D98:  MOVLW  02
1D9A:  MOVWF  FA9
1D9C:  CLRF   FA8
1D9E:  BCF    FA6.6
1DA0:  BCF    FA6.7
1DA2:  BSF    FA6.2
1DA4:  MOVF   FF2,W
1DA6:  MOVWF  00
1DA8:  BCF    FF2.7
1DAA:  MOVLB  F
1DAC:  MOVLW  55
1DAE:  MOVWF  FA7
1DB0:  MOVLW  AA
1DB2:  MOVWF  FA7
1DB4:  BSF    FA6.1
1DB6:  BTFSC  FA6.1
1DB8:  BRA    1DB6
1DBA:  BCF    FA6.2
1DBC:  MOVF   00,W
1DBE:  IORWF  FF2,F
1DC0:  MOVLW  14
1DC2:  MOVLB  0
1DC4:  MOVWF  xB8
1DC6:  CALL   05CA
1DCA:  MOVLW  03
1DCC:  MOVWF  FA9
1DCE:  CLRF   FA8
1DD0:  BCF    FA6.6
1DD2:  BCF    FA6.7
1DD4:  BSF    FA6.2
1DD6:  MOVF   FF2,W
1DD8:  MOVWF  00
1DDA:  BCF    FF2.7
1DDC:  MOVLB  F
1DDE:  MOVLW  55
1DE0:  MOVWF  FA7
1DE2:  MOVLW  AA
1DE4:  MOVWF  FA7
1DE6:  BSF    FA6.1
1DE8:  BTFSC  FA6.1
1DEA:  BRA    1DE8
1DEC:  BCF    FA6.2
1DEE:  MOVF   00,W
1DF0:  IORWF  FF2,F
1DF2:  MOVLW  14
1DF4:  MOVLB  0
1DF6:  MOVWF  xB8
1DF8:  CALL   05CA
....................              reset_cpu();} 
1DFC:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1DFE:  MOVF   39,W
1E00:  SUBWF  35,W
1E02:  BNZ   1E96
1E04:  MOVF   3A,W
1E06:  SUBWF  36,W
1E08:  BNZ   1E96
1E0A:  MOVF   3B,W
1E0C:  SUBWF  37,W
1E0E:  BNZ   1E96
1E10:  MOVF   3C,W
1E12:  SUBWF  38,W
1E14:  BNZ   1E96
....................             {lcd_gotoxy(1,1); 
1E16:  MOVLW  01
1E18:  MOVWF  xB3
1E1A:  MOVWF  xB4
1E1C:  CALL   073A
....................             printf(lcd_putc,"                   "); 
1E20:  MOVLW  F0
1E22:  MOVWF  FF6
1E24:  MOVLW  01
1E26:  MOVWF  FF7
1E28:  CALL   07FA
....................             lcd_gotoxy(1,2); 
1E2C:  MOVLW  01
1E2E:  MOVWF  xB3
1E30:  MOVLW  02
1E32:  MOVWF  xB4
1E34:  CALL   073A
....................             printf(lcd_putc,"     Contraseña    "); 
1E38:  MOVLW  04
1E3A:  MOVWF  FF6
1E3C:  MOVLW  02
1E3E:  MOVWF  FF7
1E40:  CALL   07FA
....................             lcd_gotoxy(1,3); 
1E44:  MOVLW  01
1E46:  MOVWF  xB3
1E48:  MOVLW  03
1E4A:  MOVWF  xB4
1E4C:  CALL   073A
....................             printf(lcd_putc,"      Correcta     "); 
1E50:  MOVLW  18
1E52:  MOVWF  FF6
1E54:  MOVLW  02
1E56:  MOVWF  FF7
1E58:  CALL   07FA
....................             lcd_gotoxy(1,4); 
1E5C:  MOVLW  01
1E5E:  MOVWF  xB3
1E60:  MOVLW  04
1E62:  MOVWF  xB4
1E64:  CALL   073A
....................             printf(lcd_putc,"                   "); 
1E68:  MOVLW  2C
1E6A:  MOVWF  FF6
1E6C:  MOVLW  02
1E6E:  MOVWF  FF7
1E70:  CALL   07FA
....................             delay_ms(1000);Menu=100;unidad=11;printf(lcd_putc,"\f");} 
1E74:  MOVLW  04
1E76:  MOVWF  xA1
1E78:  MOVLW  FA
1E7A:  MOVWF  xB8
1E7C:  CALL   05CA
1E80:  DECFSZ xA1,F
1E82:  BRA    1E78
1E84:  MOVLW  64
1E86:  MOVWF  19
1E88:  MOVLW  0B
1E8A:  MOVWF  1C
1E8C:  MOVLW  0C
1E8E:  MOVWF  xB2
1E90:  CALL   079C
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1E94:  BRA    1F04
....................          {lcd_gotoxy(1,1); 
1E96:  MOVLW  01
1E98:  MOVWF  xB3
1E9A:  MOVWF  xB4
1E9C:  CALL   073A
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1EA0:  MOVLW  01
1EA2:  MOVWF  xB3
1EA4:  MOVLW  02
1EA6:  MOVWF  xB4
1EA8:  CALL   073A
....................             printf(lcd_putc,"     Contraseña    "); 
1EAC:  MOVLW  40
1EAE:  MOVWF  FF6
1EB0:  MOVLW  02
1EB2:  MOVWF  FF7
1EB4:  CALL   07FA
....................             lcd_gotoxy(1,3); 
1EB8:  MOVLW  01
1EBA:  MOVWF  xB3
1EBC:  MOVLW  03
1EBE:  MOVWF  xB4
1EC0:  CALL   073A
....................             printf(lcd_putc,"     Incorrecta    "); 
1EC4:  MOVLW  54
1EC6:  MOVWF  FF6
1EC8:  MOVLW  02
1ECA:  MOVWF  FF7
1ECC:  CALL   07FA
....................             lcd_gotoxy(1,4); 
1ED0:  MOVLW  01
1ED2:  MOVWF  xB3
1ED4:  MOVLW  04
1ED6:  MOVWF  xB4
1ED8:  CALL   073A
....................             printf(lcd_putc,"                   "); 
1EDC:  MOVLW  68
1EDE:  MOVWF  FF6
1EE0:  MOVLW  02
1EE2:  MOVWF  FF7
1EE4:  CALL   07FA
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
1EE8:  MOVLW  04
1EEA:  MOVWF  xA1
1EEC:  MOVLW  FA
1EEE:  MOVWF  xB8
1EF0:  CALL   05CA
1EF4:  DECFSZ xA1,F
1EF6:  BRA    1EEC
1EF8:  MOVLW  0B
1EFA:  MOVWF  1C
1EFC:  MOVLW  0C
1EFE:  MOVWF  xB2
1F00:  CALL   079C
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1F04:  MOVF   1C,W
1F06:  SUBLW  0B
1F08:  BC    1F28
1F0A:  MOVF   1C,W
1F0C:  SUBLW  0D
1F0E:  BNC   1F28
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1F10:  MOVLW  01
1F12:  SUBWF  1C,W
1F14:  MOVWF  xA1
1F16:  MOVWF  xB3
1F18:  MOVLW  04
1F1A:  MOVWF  xB4
1F1C:  CALL   073A
....................             lcd_putc(t[1]); 
1F20:  MOVFF  33,B2
1F24:  CALL   079C
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
1F28:  DECFSZ 19,W
1F2A:  BRA    211C
....................    lcd_gotoxy(1,1); 
1F2C:  MOVLW  01
1F2E:  MOVWF  xB3
1F30:  MOVWF  xB4
1F32:  CALL   073A
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
1F36:  MOVLW  7C
1F38:  MOVWF  FF6
1F3A:  MOVLW  02
1F3C:  MOVWF  FF7
1F3E:  CALL   07FA
....................       if(paso<0) 
1F42:  BTFSC  30.7
1F44:  BRA    1F48
1F46:  BRA    1F4A
....................         {paso=0;} 
1F48:  CLRF   30
....................          
....................       if(UP)//Si oprime hacia arriba 
1F4A:  BSF    F92.5
1F4C:  BTFSS  F80.5
1F4E:  BRA    1F6A
....................       { 
....................          if(Flanco == 0) 
1F50:  BTFSC  17.3
1F52:  BRA    1F68
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
1F54:  DECF   1F,F
1F56:  DECF   1D,F
1F58:  MOVLW  01
1F5A:  ADDWF  1D,W
1F5C:  MOVWF  1E
1F5E:  BSF    17.3
1F60:  MOVLW  1E
1F62:  MOVWF  xB8
1F64:  CALL   05CA
....................          } 
....................       } 
....................       else 
1F68:  BRA    1F6C
....................       { 
....................          Flanco = 0; 
1F6A:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1F6C:  BSF    F96.0
1F6E:  BTFSS  F84.0
1F70:  BRA    1F8C
....................       { 
....................          if(Flanco2 == 0) 
1F72:  BTFSC  17.5
1F74:  BRA    1F8A
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
1F76:  INCF   1F,F
1F78:  INCF   1D,F
1F7A:  MOVLW  01
1F7C:  SUBWF  1D,W
1F7E:  MOVWF  1E
1F80:  BSF    17.5
1F82:  MOVLW  1E
1F84:  MOVWF  xB8
1F86:  CALL   05CA
....................          } 
....................       } 
....................       else 
1F8A:  BRA    1F8E
....................       { 
....................          Flanco2 = 0; 
1F8C:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
1F8E:  MOVF   1F,W
1F90:  SUBWF  21,W
1F92:  BC    1FA4
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
1F94:  INCF   30,F
1F96:  MOVFF  1F,21
1F9A:  MOVLW  02
1F9C:  SUBWF  21,W
1F9E:  MOVWF  20
1FA0:  MOVLW  04
1FA2:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
1FA4:  MOVF   20,W
1FA6:  SUBWF  1F,W
1FA8:  BC    1FBA
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
1FAA:  DECF   30,F
1FAC:  MOVFF  1F,20
1FB0:  MOVLW  02
1FB2:  ADDWF  20,W
1FB4:  MOVWF  21
1FB6:  MOVLW  02
1FB8:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
1FBA:  MOVF   1F,W
1FBC:  SUBWF  1A,W
1FBE:  BC    1FD2
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
1FC0:  MOVFF  1B,1F
1FC4:  MOVLW  02
1FC6:  MOVWF  1D
1FC8:  CLRF   30
1FCA:  MOVFF  1F,20
1FCE:  ADDWF  20,W
1FD0:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
1FD2:  MOVF   1B,W
1FD4:  SUBWF  1F,W
1FD6:  BC    1FEE
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
1FD8:  MOVFF  1A,1F
1FDC:  MOVLW  04
1FDE:  MOVWF  1D
1FE0:  SUBWF  1A,W
1FE2:  MOVWF  30
1FE4:  MOVFF  1F,21
1FE8:  MOVLW  02
1FEA:  SUBWF  21,W
1FEC:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
1FEE:  MOVLW  01
1FF0:  ADDWF  30,W
1FF2:  MOVWF  xA1
1FF4:  MOVWF  xA2
1FF6:  MOVLW  02
1FF8:  MOVWF  xA3
1FFA:  CALL   0978
....................         mensajes(2+paso,3); 
1FFE:  MOVLW  02
2000:  ADDWF  30,W
2002:  MOVWF  xA1
2004:  MOVWF  xA2
2006:  MOVLW  03
2008:  MOVWF  xA3
200A:  CALL   0978
....................         mensajes(3+paso,4); 
200E:  MOVLW  03
2010:  ADDWF  30,W
2012:  MOVWF  xA1
2014:  MOVWF  xA2
2016:  MOVLW  04
2018:  MOVWF  xA3
201A:  CALL   0978
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
201E:  MOVLW  01
2020:  MOVWF  xB3
2022:  MOVFF  1D,B4
2026:  CALL   073A
....................         lcd_putc(t[0]); 
202A:  MOVFF  32,B2
202E:  CALL   079C
....................  
....................         if(Flecha==2) 
2032:  MOVF   1D,W
2034:  SUBLW  02
2036:  BNZ   2060
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2038:  MOVLW  01
203A:  MOVWF  xB3
203C:  MOVLW  04
203E:  MOVWF  xB4
2040:  CALL   073A
....................             lcd_putc(t[1]); 
2044:  MOVFF  33,B2
2048:  CALL   079C
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
204C:  MOVLW  01
204E:  MOVWF  xB3
2050:  MOVLW  03
2052:  MOVWF  xB4
2054:  CALL   073A
....................             lcd_putc(t[1]); 
2058:  MOVFF  33,B2
205C:  CALL   079C
....................           } 
....................          
....................         if(Flecha==4) 
2060:  MOVF   1D,W
2062:  SUBLW  04
2064:  BNZ   208E
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2066:  MOVLW  01
2068:  MOVWF  xB3
206A:  MOVLW  02
206C:  MOVWF  xB4
206E:  CALL   073A
....................             lcd_putc(t[1]); 
2072:  MOVFF  33,B2
2076:  CALL   079C
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
207A:  MOVLW  01
207C:  MOVWF  xB3
207E:  MOVLW  03
2080:  MOVWF  xB4
2082:  CALL   073A
....................             lcd_putc(t[1]); 
2086:  MOVFF  33,B2
208A:  CALL   079C
....................           } 
....................          
....................         if(Flecha==3) 
208E:  MOVF   1D,W
2090:  SUBLW  03
2092:  BNZ   20BC
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2094:  MOVLW  01
2096:  MOVWF  xB3
2098:  MOVLW  04
209A:  MOVWF  xB4
209C:  CALL   073A
....................             lcd_putc(t[1]); 
20A0:  MOVFF  33,B2
20A4:  CALL   079C
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
20A8:  MOVLW  01
20AA:  MOVWF  xB3
20AC:  MOVLW  02
20AE:  MOVWF  xB4
20B0:  CALL   073A
....................             lcd_putc(t[1]); 
20B4:  MOVFF  33,B2
20B8:  CALL   079C
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
20BC:  BSF    F96.1
20BE:  BTFSS  F84.1
20C0:  BRA    20F8
....................        { 
....................          if(Flanco1 == 0) 
20C2:  BTFSC  17.4
20C4:  BRA    20F6
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
20C6:  BSF    17.4
20C8:  MOVFF  1F,19
20CC:  MOVLW  03
20CE:  MOVWF  1D
20D0:  MOVLW  02
20D2:  MOVWF  xA1
20D4:  MOVLW  96
20D6:  MOVWF  xB8
20D8:  CALL   05CA
20DC:  DECFSZ xA1,F
20DE:  BRA    20D4
20E0:  MOVLW  0C
20E2:  MOVWF  xB2
20E4:  CALL   079C
....................             if(Menu==6) 
20E8:  MOVF   19,W
20EA:  SUBLW  06
20EC:  BNZ   20F6
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
20EE:  CLRF   35
20F0:  CLRF   36
20F2:  CLRF   37
20F4:  CLRF   38
....................             } 
....................          } 
....................        } 
....................        else 
20F6:  BRA    20FA
....................        { 
....................          Flanco1 = 0; 
20F8:  BCF    17.4
....................        } 
....................              
....................        if(LEFT) 
20FA:  BSF    F96.2
20FC:  BTFSS  F84.2
20FE:  BRA    211C
....................        { 
....................          Menu=100;printf(lcd_putc,"\f");delay_ms(500); 
2100:  MOVLW  64
2102:  MOVWF  19
2104:  MOVLW  0C
2106:  MOVWF  xB2
2108:  CALL   079C
210C:  MOVLW  02
210E:  MOVWF  xA1
2110:  MOVLW  FA
2112:  MOVWF  xB8
2114:  CALL   05CA
2118:  DECFSZ xA1,F
211A:  BRA    2110
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
211C:  MOVF   19,W
211E:  SUBLW  02
2120:  BTFSS  FD8.2
2122:  BRA    2356
....................     
....................    lcd_gotoxy(1,1); 
2124:  MOVLW  01
2126:  MOVWF  xB3
2128:  MOVWF  xB4
212A:  CALL   073A
....................    printf(lcd_putc,"    Temporizador     "); 
212E:  MOVLW  92
2130:  MOVWF  FF6
2132:  MOVLW  02
2134:  MOVWF  FF7
2136:  CALL   07FA
....................    lcd_gotoxy(1,2); 
213A:  MOVLW  01
213C:  MOVWF  xB3
213E:  MOVLW  02
2140:  MOVWF  xB4
2142:  CALL   073A
....................    printf(lcd_putc,"       Luz UV        "); 
2146:  MOVLW  A8
2148:  MOVWF  FF6
214A:  MOVLW  02
214C:  MOVWF  FF7
214E:  CALL   07FA
....................    lcd_gotoxy(6,3); 
2152:  MOVLW  06
2154:  MOVWF  xB3
2156:  MOVLW  03
2158:  MOVWF  xB4
215A:  CALL   073A
....................    printf(lcd_putc,"%02u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
215E:  MOVFF  28,A1
2162:  MOVLW  01
2164:  MOVWF  xA2
2166:  CALL   09E0
216A:  MOVLW  3A
216C:  MOVWF  xB2
216E:  CALL   079C
2172:  MOVFF  29,A1
2176:  MOVLW  01
2178:  MOVWF  xA2
217A:  CALL   09E0
217E:  MOVLW  C7
2180:  MOVWF  FF6
2182:  MOVLW  02
2184:  MOVWF  FF7
2186:  MOVLW  08
2188:  MOVWF  xA5
218A:  CALL   086A
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
218E:  MOVLW  06
2190:  ADDWF  2D,W
2192:  MOVWF  xA1
2194:  MOVWF  xB3
2196:  MOVLW  04
2198:  MOVWF  xB4
219A:  CALL   073A
....................    lcd_putc(t[2]); 
219E:  MOVFF  34,B2
21A2:  CALL   079C
....................     
....................    if(UP) 
21A6:  BSF    F92.5
21A8:  BTFSS  F80.5
21AA:  BRA    21E6
....................    { 
....................       if(unidad2==1) 
21AC:  DECFSZ 2D,W
21AE:  BRA    21C8
....................       { 
....................          if(tempo_minutos_pro<61) 
21B0:  MOVF   28,W
21B2:  SUBLW  3C
21B4:  BNC   21C8
....................          { 
....................             tempo_minutos_pro++;delay_ms(300); 
21B6:  INCF   28,F
21B8:  MOVLW  02
21BA:  MOVWF  xA1
21BC:  MOVLW  96
21BE:  MOVWF  xB8
21C0:  CALL   05CA
21C4:  DECFSZ xA1,F
21C6:  BRA    21BC
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
21C8:  MOVF   2D,W
21CA:  SUBLW  03
21CC:  BNZ   21E6
....................       { 
....................          if(tempo_segundos_pro<60) 
21CE:  MOVF   29,W
21D0:  SUBLW  3B
21D2:  BNC   21E6
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
21D4:  INCF   29,F
21D6:  MOVLW  02
21D8:  MOVWF  xA1
21DA:  MOVLW  96
21DC:  MOVWF  xB8
21DE:  CALL   05CA
21E2:  DECFSZ xA1,F
21E4:  BRA    21DA
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
21E6:  BSF    F96.0
21E8:  BTFSS  F84.0
21EA:  BRA    2256
....................    { 
....................       if(unidad2==1) 
21EC:  DECFSZ 2D,W
21EE:  BRA    2220
....................       { 
....................          if(tempo_minutos_pro>0) 
21F0:  MOVF   28,F
21F2:  BZ    2206
....................          { 
....................             tempo_minutos_pro--;delay_ms(300); 
21F4:  DECF   28,F
21F6:  MOVLW  02
21F8:  MOVWF  xA1
21FA:  MOVLW  96
21FC:  MOVWF  xB8
21FE:  CALL   05CA
2202:  DECFSZ xA1,F
2204:  BRA    21FA
....................          } 
....................           
....................          if(tempo_minutos_pro>60) 
2206:  MOVF   28,W
2208:  SUBLW  3C
220A:  BC    2220
....................          { 
....................             tempo_minutos_pro=60;delay_ms(300); 
220C:  MOVLW  3C
220E:  MOVWF  28
2210:  MOVLW  02
2212:  MOVWF  xA1
2214:  MOVLW  96
2216:  MOVWF  xB8
2218:  CALL   05CA
221C:  DECFSZ xA1,F
221E:  BRA    2214
....................          } 
....................       } 
....................        
....................       if(unidad2==3) 
2220:  MOVF   2D,W
2222:  SUBLW  03
2224:  BNZ   2256
....................       { 
....................          if(tempo_segundos_pro>0) 
2226:  MOVF   29,F
2228:  BZ    223C
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
222A:  DECF   29,F
222C:  MOVLW  02
222E:  MOVWF  xA1
2230:  MOVLW  96
2232:  MOVWF  xB8
2234:  CALL   05CA
2238:  DECFSZ xA1,F
223A:  BRA    2230
....................          } 
....................           
....................          if(tempo_segundos_pro>60) 
223C:  MOVF   29,W
223E:  SUBLW  3C
2240:  BC    2256
....................          { 
....................             tempo_segundos_pro=60;delay_ms(300); 
2242:  MOVLW  3C
2244:  MOVWF  29
2246:  MOVLW  02
2248:  MOVWF  xA1
224A:  MOVLW  96
224C:  MOVWF  xB8
224E:  CALL   05CA
2252:  DECFSZ xA1,F
2254:  BRA    224A
....................          } 
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
2256:  BSF    F96.1
2258:  BTFSS  F84.1
225A:  BRA    2288
....................    { 
....................       if(unidad2==1) 
225C:  DECFSZ 2D,W
225E:  BRA    2266
....................       { 
....................          unidad2=3; 
2260:  MOVLW  03
2262:  MOVWF  2D
....................       } 
....................       else 
2264:  BRA    2270
....................       { 
....................          if(unidad2==3) 
2266:  MOVF   2D,W
2268:  SUBLW  03
226A:  BNZ   2270
....................          { 
....................             unidad2=1; 
226C:  MOVLW  01
226E:  MOVWF  2D
....................          } 
....................       } 
....................       delay_ms(500); 
2270:  MOVLW  02
2272:  MOVWF  xA1
2274:  MOVLW  FA
2276:  MOVWF  xB8
2278:  CALL   05CA
227C:  DECFSZ xA1,F
227E:  BRA    2274
....................       printf(lcd_putc,"\f"); 
2280:  MOVLW  0C
2282:  MOVWF  xB2
2284:  CALL   079C
....................    } 
....................     
....................    if(LEFT) 
2288:  BSF    F96.2
228A:  BTFSS  F84.2
228C:  BRA    2356
....................    { 
....................       delay_ms(200); 
228E:  MOVLW  C8
2290:  MOVWF  xB8
2292:  CALL   05CA
....................       printf(lcd_putc,"\f"); 
2296:  MOVLW  0C
2298:  MOVWF  xB2
229A:  CALL   079C
....................       lcd_gotoxy(1,2); 
229E:  MOVLW  01
22A0:  MOVWF  xB3
22A2:  MOVLW  02
22A4:  MOVWF  xB4
22A6:  CALL   073A
....................       printf(lcd_putc,"Tiempo Almacenado"); 
22AA:  MOVLW  D0
22AC:  MOVWF  FF6
22AE:  MOVLW  02
22B0:  MOVWF  FF7
22B2:  CALL   07FA
....................       lcd_gotoxy(1,3); 
22B6:  MOVLW  01
22B8:  MOVWF  xB3
22BA:  MOVLW  03
22BC:  MOVWF  xB4
22BE:  CALL   073A
....................       printf(lcd_putc,"  Correctamente  "); 
22C2:  MOVLW  E2
22C4:  MOVWF  FF6
22C6:  MOVLW  02
22C8:  MOVWF  FF7
22CA:  CALL   07FA
....................       write_eeprom(20,tempo_minutos_pro);write_eeprom(21,tempo_segundos_pro); 
22CE:  MOVLW  14
22D0:  MOVWF  FA9
22D2:  MOVFF  28,FA8
22D6:  BCF    FA6.6
22D8:  BCF    FA6.7
22DA:  BSF    FA6.2
22DC:  MOVF   FF2,W
22DE:  MOVWF  00
22E0:  BCF    FF2.7
22E2:  MOVLB  F
22E4:  MOVLW  55
22E6:  MOVWF  FA7
22E8:  MOVLW  AA
22EA:  MOVWF  FA7
22EC:  BSF    FA6.1
22EE:  BTFSC  FA6.1
22F0:  BRA    22EE
22F2:  BCF    FA6.2
22F4:  MOVF   00,W
22F6:  IORWF  FF2,F
22F8:  MOVLW  15
22FA:  MOVWF  FA9
22FC:  MOVFF  29,FA8
2300:  BCF    FA6.6
2302:  BCF    FA6.7
2304:  BSF    FA6.2
2306:  MOVF   FF2,W
2308:  MOVWF  00
230A:  BCF    FF2.7
230C:  MOVLW  55
230E:  MOVWF  FA7
2310:  MOVLW  AA
2312:  MOVWF  FA7
2314:  BSF    FA6.1
2316:  BTFSC  FA6.1
2318:  BRA    2316
231A:  BCF    FA6.2
231C:  MOVF   00,W
231E:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2320:  MOVFF  28,26
2324:  MOVFF  29,27
....................       delay_ms(700); 
2328:  MOVLW  04
232A:  MOVLB  0
232C:  MOVWF  xA1
232E:  MOVLW  AF
2330:  MOVWF  xB8
2332:  CALL   05CA
2336:  DECFSZ xA1,F
2338:  BRA    232E
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
233A:  MOVLW  1E
233C:  MOVWF  xB8
233E:  CALL   05CA
2342:  MOVLW  01
2344:  MOVWF  19
2346:  CLRF   30
2348:  MOVLW  02
234A:  MOVWF  1D
234C:  MOVWF  1F
234E:  MOVLW  0C
2350:  MOVWF  xB2
2352:  CALL   079C
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................    
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu de seleccion de estado de Motor Ventilador 
2356:  MOVF   19,W
2358:  SUBLW  03
235A:  BTFSS  FD8.2
235C:  BRA    2528
....................    lcd_gotoxy(1,1); 
235E:  MOVLW  01
2360:  MOVWF  xB3
2362:  MOVWF  xB4
2364:  CALL   073A
....................    printf(lcd_putc,"Seleccione Velocidad"); 
2368:  MOVLW  F4
236A:  MOVWF  FF6
236C:  MOVLW  02
236E:  MOVWF  FF7
2370:  CALL   07FA
....................    lcd_gotoxy(1,2); 
2374:  MOVLW  01
2376:  MOVWF  xB3
2378:  MOVLW  02
237A:  MOVWF  xB4
237C:  CALL   073A
....................    printf(lcd_putc,"    de Ventilador   "); 
2380:  MOVLW  0A
2382:  MOVWF  FF6
2384:  MOVLW  03
2386:  MOVWF  FF7
2388:  CALL   07FA
....................    lcd_gotoxy(8,3); 
238C:  MOVLW  08
238E:  MOVWF  xB3
2390:  MOVLW  03
2392:  MOVWF  xB4
2394:  CALL   073A
....................    printf(lcd_putc,"%i ",Velocidad); 
2398:  MOVFF  31,A1
239C:  MOVLW  1F
239E:  MOVWF  xA2
23A0:  CALL   08B0
23A4:  MOVLW  20
23A6:  MOVWF  xB2
23A8:  CALL   079C
....................  
....................    if(UP)//Si oprime hacia arriba 
23AC:  BSF    F92.5
23AE:  BTFSS  F80.5
23B0:  BRA    23C4
....................       {  if(Flanco == 0)  
23B2:  BTFSC  17.3
23B4:  BRA    23C2
....................             {Velocidad++;Flanco = 1;delay_ms(30);}} 
23B6:  INCF   31,F
23B8:  BSF    17.3
23BA:  MOVLW  1E
23BC:  MOVWF  xB8
23BE:  CALL   05CA
....................          else 
23C2:  BRA    23C6
....................             {Flanco = 0;} 
23C4:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
23C6:  BSF    F96.0
23C8:  BTFSS  F84.0
23CA:  BRA    23DE
....................       {  if(Flanco2 == 0)  
23CC:  BTFSC  17.5
23CE:  BRA    23DC
....................             {Velocidad--;Flanco2 = 1;delay_ms(30);}} 
23D0:  DECF   31,F
23D2:  BSF    17.5
23D4:  MOVLW  1E
23D6:  MOVWF  xB8
23D8:  CALL   05CA
....................          else 
23DC:  BRA    23E0
....................             {Flanco2 = 0;} 
23DE:  BCF    17.5
....................        
....................              
....................       if(LEFT)//Si oprime Izquierda 
23E0:  BSF    F96.2
23E2:  BTFSS  F84.2
23E4:  BRA    240A
....................       {  if(Flanco3 == 0)  
23E6:  BTFSC  17.6
23E8:  BRA    2408
....................             {Flecha=2;Flecha2=2;Flanco3 = 1;Menu=1; paso=0;delay_ms(500);}} 
23EA:  MOVLW  02
23EC:  MOVWF  1D
23EE:  MOVWF  1F
23F0:  BSF    17.6
23F2:  MOVLW  01
23F4:  MOVWF  19
23F6:  CLRF   30
23F8:  MOVLW  02
23FA:  MOVWF  xA1
23FC:  MOVLW  FA
23FE:  MOVWF  xB8
2400:  CALL   05CA
2404:  DECFSZ xA1,F
2406:  BRA    23FC
....................          else 
2408:  BRA    240C
....................             {Flanco3 = 0;} 
240A:  BCF    17.6
....................          if(Velocidad<1) 
240C:  BTFSC  31.7
240E:  BRA    2416
2410:  MOVF   31,W
2412:  SUBLW  00
2414:  BNC   241A
....................             {Velocidad=4;} 
2416:  MOVLW  04
2418:  MOVWF  31
....................          if(Velocidad>4) 
241A:  BTFSC  31.7
241C:  BRA    2428
241E:  MOVF   31,W
2420:  SUBLW  04
2422:  BC    2428
....................             {Velocidad=1;}     
2424:  MOVLW  01
2426:  MOVWF  31
....................                      
....................       if(RIGHT)// Si oprime Derecha 
2428:  BSF    F96.1
242A:  BTFSS  F84.1
242C:  BRA    2512
....................       {  if(Flanco1 == 0)  
242E:  BTFSC  17.4
2430:  BRA    2510
....................             {Flanco1 = 1;Menu=1;paso=0; write_eeprom(5,Velocidad); 
2432:  BSF    17.4
2434:  MOVLW  01
2436:  MOVWF  19
2438:  CLRF   30
243A:  MOVLW  05
243C:  MOVWF  FA9
243E:  MOVFF  31,FA8
2442:  BCF    FA6.6
2444:  BCF    FA6.7
2446:  BSF    FA6.2
2448:  MOVF   FF2,W
244A:  MOVWF  00
244C:  BCF    FF2.7
244E:  MOVLB  F
2450:  MOVLW  55
2452:  MOVWF  FA7
2454:  MOVLW  AA
2456:  MOVWF  FA7
2458:  BSF    FA6.1
245A:  BTFSC  FA6.1
245C:  BRA    245A
245E:  BCF    FA6.2
2460:  MOVF   00,W
2462:  IORWF  FF2,F
....................                 
....................              if(estadomv==1) 
2464:  BTFSS  17.2
2466:  BRA    2472
....................                {velocidades(Velocidad);} 
2468:  MOVFF  31,A3
246C:  MOVLB  0
246E:  CALL   0A46
....................                 
....................                lcd_gotoxy(1,1); 
2472:  MOVLW  01
2474:  MOVLB  0
2476:  MOVWF  xB3
2478:  MOVWF  xB4
247A:  CALL   073A
....................                printf(lcd_putc,"                    "); 
247E:  MOVLW  20
2480:  MOVWF  FF6
2482:  MOVLW  03
2484:  MOVWF  FF7
2486:  CALL   07FA
....................                lcd_gotoxy(1,2); 
248A:  MOVLW  01
248C:  MOVWF  xB3
248E:  MOVLW  02
2490:  MOVWF  xB4
2492:  CALL   073A
....................                printf(lcd_putc,"   Ha seleccionado  "); 
2496:  MOVLW  36
2498:  MOVWF  FF6
249A:  MOVLW  03
249C:  MOVWF  FF7
249E:  CALL   07FA
....................                lcd_gotoxy(1,3); 
24A2:  MOVLW  01
24A4:  MOVWF  xB3
24A6:  MOVLW  03
24A8:  MOVWF  xB4
24AA:  CALL   073A
....................                printf(lcd_putc,"  la velocidad  %i  ",Velocidad); 
24AE:  MOVLW  4C
24B0:  MOVWF  FF6
24B2:  MOVLW  03
24B4:  MOVWF  FF7
24B6:  MOVLW  10
24B8:  MOVWF  xA5
24BA:  CALL   086A
24BE:  MOVFF  31,A1
24C2:  MOVLW  1F
24C4:  MOVWF  xA2
24C6:  CALL   08B0
24CA:  MOVLW  20
24CC:  MOVWF  xB2
24CE:  CALL   079C
24D2:  MOVLW  20
24D4:  MOVWF  xB2
24D6:  CALL   079C
....................                lcd_gotoxy(1,4); 
24DA:  MOVLW  01
24DC:  MOVWF  xB3
24DE:  MOVLW  04
24E0:  MOVWF  xB4
24E2:  CALL   073A
....................                printf(lcd_putc,"                    "); 
24E6:  MOVLW  62
24E8:  MOVWF  FF6
24EA:  MOVLW  03
24EC:  MOVWF  FF7
24EE:  CALL   07FA
....................               
....................             delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f");}} 
24F2:  MOVLW  04
24F4:  MOVWF  xA1
24F6:  MOVLW  FA
24F8:  MOVWF  xB8
24FA:  CALL   05CA
24FE:  DECFSZ xA1,F
2500:  BRA    24F6
2502:  MOVLW  02
2504:  MOVWF  1D
2506:  MOVWF  1F
2508:  MOVLW  0C
250A:  MOVWF  xB2
250C:  CALL   079C
....................          else 
2510:  BRA    2514
....................             {Flanco1 = 0;}    
2512:  BCF    17.4
....................  
....................         lcd_gotoxy(6,Flecha);// Para mostrar la flecha de seleccion 
2514:  MOVLW  06
2516:  MOVWF  xB3
2518:  MOVFF  1D,B4
251C:  CALL   073A
....................         lcd_putc(t[0]); 
2520:  MOVFF  32,B2
2524:  CALL   079C
....................          
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu para Cambio de Contraseña 
2528:  MOVF   19,W
252A:  SUBLW  04
252C:  BTFSS  FD8.2
252E:  BRA    2828
....................    lcd_gotoxy(1,1); 
2530:  MOVLW  01
2532:  MOVWF  xB3
2534:  MOVWF  xB4
2536:  CALL   073A
....................    printf(lcd_putc,"      Ingrese       "); 
253A:  MOVLW  78
253C:  MOVWF  FF6
253E:  MOVLW  03
2540:  MOVWF  FF7
2542:  CALL   07FA
....................    lcd_gotoxy(1,2); 
2546:  MOVLW  01
2548:  MOVWF  xB3
254A:  MOVLW  02
254C:  MOVWF  xB4
254E:  CALL   073A
....................    printf(lcd_putc," Contraseña Actual  "); 
2552:  MOVLW  8E
2554:  MOVWF  FF6
2556:  MOVLW  03
2558:  MOVWF  FF7
255A:  CALL   07FA
....................    lcd_gotoxy(1,3); 
255E:  MOVLW  01
2560:  MOVWF  xB3
2562:  MOVLW  03
2564:  MOVWF  xB4
2566:  CALL   073A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
256A:  MOVLW  A4
256C:  MOVWF  FF6
256E:  MOVLW  03
2570:  MOVWF  FF7
2572:  MOVLW  0A
2574:  MOVWF  xA5
2576:  CALL   086A
257A:  MOVFF  35,A1
257E:  MOVLW  1F
2580:  MOVWF  xA2
2582:  CALL   08B0
2586:  MOVFF  36,A1
258A:  MOVLW  1F
258C:  MOVWF  xA2
258E:  CALL   08B0
2592:  MOVFF  37,A1
2596:  MOVLW  1F
2598:  MOVWF  xA2
259A:  CALL   08B0
259E:  MOVFF  38,A1
25A2:  MOVLW  1F
25A4:  MOVWF  xA2
25A6:  CALL   08B0
25AA:  MOVLW  20
25AC:  MOVWF  xB2
25AE:  CALL   079C
25B2:  MOVLW  20
25B4:  MOVWF  xB2
25B6:  CALL   079C
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
25BA:  BSF    F92.5
25BC:  BTFSS  F80.5
25BE:  BRA    25E2
....................       {  if(Flanco == 0)  
25C0:  BTFSC  17.3
25C2:  BRA    25E0
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
25C4:  MOVLW  0B
25C6:  SUBWF  1C,W
25C8:  CLRF   03
25CA:  ADDLW  35
25CC:  MOVWF  FE9
25CE:  MOVLW  00
25D0:  ADDWFC 03,W
25D2:  MOVWF  FEA
25D4:  INCF   FEF,F
25D6:  BSF    17.3
25D8:  MOVLW  1E
25DA:  MOVWF  xB8
25DC:  CALL   05CA
....................          else 
25E0:  BRA    25E4
....................             {Flanco = 0;} 
25E2:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
25E4:  BSF    F96.0
25E6:  BTFSS  F84.0
25E8:  BRA    260C
....................       {  if(Flanco2 == 0)  
25EA:  BTFSC  17.5
25EC:  BRA    260A
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
25EE:  MOVLW  0B
25F0:  SUBWF  1C,W
25F2:  CLRF   03
25F4:  ADDLW  35
25F6:  MOVWF  FE9
25F8:  MOVLW  00
25FA:  ADDWFC 03,W
25FC:  MOVWF  FEA
25FE:  DECF   FEF,F
2600:  BSF    17.5
2602:  MOVLW  1E
2604:  MOVWF  xB8
2606:  CALL   05CA
....................          else 
260A:  BRA    260E
....................             {Flanco2 = 0;} 
260C:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
260E:  BSF    F96.1
2610:  BTFSS  F84.1
2612:  BRA    262E
....................       {  if(Flanco1 == 0)  
2614:  BTFSC  17.4
2616:  BRA    262C
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2618:  BSF    17.4
261A:  INCF   1C,F
261C:  MOVLW  1E
261E:  MOVWF  xB8
2620:  CALL   05CA
2624:  MOVLW  0C
2626:  MOVWF  xB2
2628:  CALL   079C
....................          else 
262C:  BRA    2630
....................             {Flanco1 = 0;}    
262E:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2630:  BSF    F96.2
2632:  BTFSS  F84.2
2634:  BRA    2650
....................       {  if(Flanco3 == 0)  
2636:  BTFSC  17.6
2638:  BRA    264E
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
263A:  BSF    17.6
263C:  DECF   1C,F
263E:  MOVLW  1E
2640:  MOVWF  xB8
2642:  CALL   05CA
2646:  MOVLW  0C
2648:  MOVWF  xB2
264A:  CALL   079C
....................          else 
264E:  BRA    2652
....................             {Flanco3 = 0;}     
2650:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2652:  MOVLW  0B
2654:  SUBWF  1C,W
2656:  CLRF   03
2658:  ADDLW  35
265A:  MOVWF  FE9
265C:  MOVLW  00
265E:  ADDWFC 03,W
2660:  MOVWF  FEA
2662:  BTFSC  FEF.7
2664:  BRA    2668
2666:  BRA    267C
....................        {clave[unidad-11]=9;} 
2668:  MOVLW  0B
266A:  SUBWF  1C,W
266C:  CLRF   03
266E:  ADDLW  35
2670:  MOVWF  FE9
2672:  MOVLW  00
2674:  ADDWFC 03,W
2676:  MOVWF  FEA
2678:  MOVLW  09
267A:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
267C:  MOVLW  0B
267E:  SUBWF  1C,W
2680:  CLRF   03
2682:  ADDLW  35
2684:  MOVWF  FE9
2686:  MOVLW  00
2688:  ADDWFC 03,W
268A:  MOVWF  FEA
268C:  BTFSC  FEF.7
268E:  BRA    26A8
2690:  MOVF   FEF,W
2692:  SUBLW  09
2694:  BC    26A8
....................        {clave[unidad-11]=0;} 
2696:  MOVLW  0B
2698:  SUBWF  1C,W
269A:  CLRF   03
269C:  ADDLW  35
269E:  MOVWF  FE9
26A0:  MOVLW  00
26A2:  ADDWFC 03,W
26A4:  MOVWF  FEA
26A6:  CLRF   FEF
....................        if(unidad<11) 
26A8:  MOVF   1C,W
26AA:  SUBLW  0A
26AC:  BNC   26CE
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
26AE:  MOVLW  01
26B0:  MOVWF  19
26B2:  CLRF   30
26B4:  MOVLW  02
26B6:  MOVWF  1D
26B8:  MOVWF  1F
26BA:  MOVLW  0B
26BC:  MOVWF  1C
26BE:  MOVLW  02
26C0:  MOVWF  xA1
26C2:  MOVLW  FA
26C4:  MOVWF  xB8
26C6:  CALL   05CA
26CA:  DECFSZ xA1,F
26CC:  BRA    26C2
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
26CE:  MOVFF  1C,B3
26D2:  MOVLW  04
26D4:  MOVWF  xB4
26D6:  CALL   073A
....................        lcd_putc(t[2]); 
26DA:  MOVFF  34,B2
26DE:  CALL   079C
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
26E2:  MOVF   1C,W
26E4:  SUBLW  0E
26E6:  BTFSC  FD8.0
26E8:  BRA    2804
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
26EA:  MOVF   39,W
26EC:  SUBWF  35,W
26EE:  BNZ   278A
26F0:  MOVF   3A,W
26F2:  SUBWF  36,W
26F4:  BNZ   278A
26F6:  MOVF   3B,W
26F8:  SUBWF  37,W
26FA:  BNZ   278A
26FC:  MOVF   3C,W
26FE:  SUBWF  38,W
2700:  BNZ   278A
....................             {lcd_gotoxy(1,1); 
2702:  MOVLW  01
2704:  MOVWF  xB3
2706:  MOVWF  xB4
2708:  CALL   073A
....................             printf(lcd_putc,"                    "); 
270C:  MOVLW  BA
270E:  MOVWF  FF6
2710:  MOVLW  03
2712:  MOVWF  FF7
2714:  CALL   07FA
....................             lcd_gotoxy(1,2); 
2718:  MOVLW  01
271A:  MOVWF  xB3
271C:  MOVLW  02
271E:  MOVWF  xB4
2720:  CALL   073A
....................             printf(lcd_putc,"     Contraseña     "); 
2724:  MOVLW  D0
2726:  MOVWF  FF6
2728:  MOVLW  03
272A:  MOVWF  FF7
272C:  CALL   07FA
....................             lcd_gotoxy(1,3); 
2730:  MOVLW  01
2732:  MOVWF  xB3
2734:  MOVLW  03
2736:  MOVWF  xB4
2738:  CALL   073A
....................             printf(lcd_putc,"      Correcta      "); 
273C:  MOVLW  E6
273E:  MOVWF  FF6
2740:  MOVLW  03
2742:  MOVWF  FF7
2744:  CALL   07FA
....................             lcd_gotoxy(1,4); 
2748:  MOVLW  01
274A:  MOVWF  xB3
274C:  MOVLW  04
274E:  MOVWF  xB4
2750:  CALL   073A
....................             printf(lcd_putc,"                    "); 
2754:  MOVLW  FC
2756:  MOVWF  FF6
2758:  MOVLW  03
275A:  MOVWF  FF7
275C:  CALL   07FA
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2760:  MOVLW  02
2762:  MOVWF  xA1
2764:  MOVLW  FA
2766:  MOVWF  xB8
2768:  CALL   05CA
276C:  DECFSZ xA1,F
276E:  BRA    2764
2770:  MOVLW  3D
2772:  MOVWF  19
2774:  MOVLW  0B
2776:  MOVWF  1C
2778:  MOVLW  0C
277A:  MOVWF  xB2
277C:  CALL   079C
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
2780:  CLRF   35
2782:  CLRF   36
2784:  CLRF   37
2786:  CLRF   38
....................          else 
2788:  BRA    2804
....................          {lcd_gotoxy(1,1); 
278A:  MOVLW  01
278C:  MOVWF  xB3
278E:  MOVWF  xB4
2790:  CALL   073A
....................             printf(lcd_putc,"                    "); 
2794:  MOVLW  12
2796:  MOVWF  FF6
2798:  MOVLW  04
279A:  MOVWF  FF7
279C:  CALL   07FA
....................             lcd_gotoxy(1,2); 
27A0:  MOVLW  01
27A2:  MOVWF  xB3
27A4:  MOVLW  02
27A6:  MOVWF  xB4
27A8:  CALL   073A
....................             printf(lcd_putc,"     Contraseña     "); 
27AC:  MOVLW  28
27AE:  MOVWF  FF6
27B0:  MOVLW  04
27B2:  MOVWF  FF7
27B4:  CALL   07FA
....................             lcd_gotoxy(1,3); 
27B8:  MOVLW  01
27BA:  MOVWF  xB3
27BC:  MOVLW  03
27BE:  MOVWF  xB4
27C0:  CALL   073A
....................             printf(lcd_putc,"     Incorrecta     "); 
27C4:  MOVLW  3E
27C6:  MOVWF  FF6
27C8:  MOVLW  04
27CA:  MOVWF  FF7
27CC:  CALL   07FA
....................             lcd_gotoxy(1,4); 
27D0:  MOVLW  01
27D2:  MOVWF  xB3
27D4:  MOVLW  04
27D6:  MOVWF  xB4
27D8:  CALL   073A
....................             printf(lcd_putc,"                    "); 
27DC:  MOVLW  54
27DE:  MOVWF  FF6
27E0:  MOVLW  04
27E2:  MOVWF  FF7
27E4:  CALL   07FA
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
27E8:  MOVLW  02
27EA:  MOVWF  xA1
27EC:  MOVLW  FA
27EE:  MOVWF  xB8
27F0:  CALL   05CA
27F4:  DECFSZ xA1,F
27F6:  BRA    27EC
27F8:  MOVLW  0B
27FA:  MOVWF  1C
27FC:  MOVLW  0C
27FE:  MOVWF  xB2
2800:  CALL   079C
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
2804:  MOVF   1C,W
2806:  SUBLW  0B
2808:  BC    2828
280A:  MOVF   1C,W
280C:  SUBLW  0D
280E:  BNC   2828
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2810:  MOVLW  01
2812:  SUBWF  1C,W
2814:  MOVWF  xA1
2816:  MOVWF  xB3
2818:  MOVLW  04
281A:  MOVWF  xB4
281C:  CALL   073A
....................             lcd_putc(t[1]); 
2820:  MOVFF  33,B2
2824:  CALL   079C
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2828:  MOVF   19,W
282A:  SUBLW  3D
282C:  BTFSS  FD8.2
282E:  BRA    2B3E
....................    lcd_gotoxy(1,1); 
2830:  MOVLW  01
2832:  MOVWF  xB3
2834:  MOVWF  xB4
2836:  CALL   073A
....................    printf(lcd_putc,"     Ingrese        "); 
283A:  MOVLW  6A
283C:  MOVWF  FF6
283E:  MOVLW  04
2840:  MOVWF  FF7
2842:  CALL   07FA
....................    lcd_gotoxy(1,2); 
2846:  MOVLW  01
2848:  MOVWF  xB3
284A:  MOVLW  02
284C:  MOVWF  xB4
284E:  CALL   073A
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2852:  MOVLW  80
2854:  MOVWF  FF6
2856:  MOVLW  04
2858:  MOVWF  FF7
285A:  CALL   07FA
....................    lcd_gotoxy(1,3); 
285E:  MOVLW  01
2860:  MOVWF  xB3
2862:  MOVLW  03
2864:  MOVWF  xB4
2866:  CALL   073A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
286A:  MOVLW  96
286C:  MOVWF  FF6
286E:  MOVLW  04
2870:  MOVWF  FF7
2872:  MOVLW  0A
2874:  MOVWF  xA5
2876:  CALL   086A
287A:  MOVFF  35,A1
287E:  MOVLW  1F
2880:  MOVWF  xA2
2882:  CALL   08B0
2886:  MOVFF  36,A1
288A:  MOVLW  1F
288C:  MOVWF  xA2
288E:  CALL   08B0
2892:  MOVFF  37,A1
2896:  MOVLW  1F
2898:  MOVWF  xA2
289A:  CALL   08B0
289E:  MOVFF  38,A1
28A2:  MOVLW  1F
28A4:  MOVWF  xA2
28A6:  CALL   08B0
28AA:  MOVLW  20
28AC:  MOVWF  xB2
28AE:  CALL   079C
28B2:  MOVLW  20
28B4:  MOVWF  xB2
28B6:  CALL   079C
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
28BA:  BSF    F92.5
28BC:  BTFSS  F80.5
28BE:  BRA    28E2
....................       {  if(Flanco == 0)  
28C0:  BTFSC  17.3
28C2:  BRA    28E0
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
28C4:  MOVLW  0B
28C6:  SUBWF  1C,W
28C8:  CLRF   03
28CA:  ADDLW  35
28CC:  MOVWF  FE9
28CE:  MOVLW  00
28D0:  ADDWFC 03,W
28D2:  MOVWF  FEA
28D4:  INCF   FEF,F
28D6:  BSF    17.3
28D8:  MOVLW  1E
28DA:  MOVWF  xB8
28DC:  CALL   05CA
....................          else 
28E0:  BRA    28E4
....................             {Flanco = 0;} 
28E2:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
28E4:  BSF    F96.0
28E6:  BTFSS  F84.0
28E8:  BRA    290C
....................       {  if(Flanco2 == 0)  
28EA:  BTFSC  17.5
28EC:  BRA    290A
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
28EE:  MOVLW  0B
28F0:  SUBWF  1C,W
28F2:  CLRF   03
28F4:  ADDLW  35
28F6:  MOVWF  FE9
28F8:  MOVLW  00
28FA:  ADDWFC 03,W
28FC:  MOVWF  FEA
28FE:  DECF   FEF,F
2900:  BSF    17.5
2902:  MOVLW  1E
2904:  MOVWF  xB8
2906:  CALL   05CA
....................          else 
290A:  BRA    290E
....................             {Flanco2 = 0;} 
290C:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
290E:  BSF    F96.1
2910:  BTFSS  F84.1
2912:  BRA    292E
....................       {  if(Flanco1 == 0)  
2914:  BTFSC  17.4
2916:  BRA    292C
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2918:  BSF    17.4
291A:  INCF   1C,F
291C:  MOVLW  1E
291E:  MOVWF  xB8
2920:  CALL   05CA
2924:  MOVLW  0C
2926:  MOVWF  xB2
2928:  CALL   079C
....................          else 
292C:  BRA    2930
....................             {Flanco1 = 0;}    
292E:  BCF    17.4
....................              
....................        if(LEFT)// Si oprime Izquierda 
2930:  BSF    F96.2
2932:  BTFSS  F84.2
2934:  BRA    2950
....................       {  if(Flanco3 == 0)  
2936:  BTFSC  17.6
2938:  BRA    294E
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
293A:  BSF    17.6
293C:  DECF   1C,F
293E:  MOVLW  1E
2940:  MOVWF  xB8
2942:  CALL   05CA
2946:  MOVLW  0C
2948:  MOVWF  xB2
294A:  CALL   079C
....................          else 
294E:  BRA    2952
....................             {Flanco3 = 0;}     
2950:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2952:  MOVLW  0B
2954:  SUBWF  1C,W
2956:  CLRF   03
2958:  ADDLW  35
295A:  MOVWF  FE9
295C:  MOVLW  00
295E:  ADDWFC 03,W
2960:  MOVWF  FEA
2962:  BTFSC  FEF.7
2964:  BRA    2968
2966:  BRA    297C
....................        {clave[unidad-11]=9;} 
2968:  MOVLW  0B
296A:  SUBWF  1C,W
296C:  CLRF   03
296E:  ADDLW  35
2970:  MOVWF  FE9
2972:  MOVLW  00
2974:  ADDWFC 03,W
2976:  MOVWF  FEA
2978:  MOVLW  09
297A:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
297C:  MOVLW  0B
297E:  SUBWF  1C,W
2980:  CLRF   03
2982:  ADDLW  35
2984:  MOVWF  FE9
2986:  MOVLW  00
2988:  ADDWFC 03,W
298A:  MOVWF  FEA
298C:  BTFSC  FEF.7
298E:  BRA    29A8
2990:  MOVF   FEF,W
2992:  SUBLW  09
2994:  BC    29A8
....................        {clave[unidad-11]=0;} 
2996:  MOVLW  0B
2998:  SUBWF  1C,W
299A:  CLRF   03
299C:  ADDLW  35
299E:  MOVWF  FE9
29A0:  MOVLW  00
29A2:  ADDWFC 03,W
29A4:  MOVWF  FEA
29A6:  CLRF   FEF
....................        if(unidad<11) 
29A8:  MOVF   1C,W
29AA:  SUBLW  0A
29AC:  BNC   29B6
....................        {Menu=5;unidad=11;} 
29AE:  MOVLW  05
29B0:  MOVWF  19
29B2:  MOVLW  0B
29B4:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
29B6:  MOVFF  1C,B3
29BA:  MOVLW  04
29BC:  MOVWF  xB4
29BE:  CALL   073A
....................        lcd_putc(t[2]); 
29C2:  MOVFF  34,B2
29C6:  CALL   079C
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
29CA:  MOVF   1C,W
29CC:  SUBLW  0E
29CE:  BTFSC  FD8.0
29D0:  BRA    2B1A
....................        { 
....................             lcd_gotoxy(1,1); 
29D2:  MOVLW  01
29D4:  MOVWF  xB3
29D6:  MOVWF  xB4
29D8:  CALL   073A
....................             printf(lcd_putc,"                    "); 
29DC:  MOVLW  AC
29DE:  MOVWF  FF6
29E0:  MOVLW  04
29E2:  MOVWF  FF7
29E4:  CALL   07FA
....................             lcd_gotoxy(1,2); 
29E8:  MOVLW  01
29EA:  MOVWF  xB3
29EC:  MOVLW  02
29EE:  MOVWF  xB4
29F0:  CALL   073A
....................             printf(lcd_putc,"     Contraseña     "); 
29F4:  MOVLW  C2
29F6:  MOVWF  FF6
29F8:  MOVLW  04
29FA:  MOVWF  FF7
29FC:  CALL   07FA
....................             lcd_gotoxy(1,3); 
2A00:  MOVLW  01
2A02:  MOVWF  xB3
2A04:  MOVLW  03
2A06:  MOVWF  xB4
2A08:  CALL   073A
....................             printf(lcd_putc,"     Almacenada     "); 
2A0C:  MOVLW  D8
2A0E:  MOVWF  FF6
2A10:  MOVLW  04
2A12:  MOVWF  FF7
2A14:  CALL   07FA
....................             lcd_gotoxy(1,4); 
2A18:  MOVLW  01
2A1A:  MOVWF  xB3
2A1C:  MOVLW  04
2A1E:  MOVWF  xB4
2A20:  CALL   073A
....................             printf(lcd_putc,"                    "); 
2A24:  MOVLW  EE
2A26:  MOVWF  FF6
2A28:  MOVLW  04
2A2A:  MOVWF  FF7
2A2C:  CALL   07FA
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2A30:  CLRF   FA9
2A32:  MOVFF  35,FA8
2A36:  BCF    FA6.6
2A38:  BCF    FA6.7
2A3A:  BSF    FA6.2
2A3C:  MOVF   FF2,W
2A3E:  MOVWF  00
2A40:  BCF    FF2.7
2A42:  MOVLB  F
2A44:  MOVLW  55
2A46:  MOVWF  FA7
2A48:  MOVLW  AA
2A4A:  MOVWF  FA7
2A4C:  BSF    FA6.1
2A4E:  BTFSC  FA6.1
2A50:  BRA    2A4E
2A52:  BCF    FA6.2
2A54:  MOVF   00,W
2A56:  IORWF  FF2,F
2A58:  MOVLW  14
2A5A:  MOVLB  0
2A5C:  MOVWF  xB8
2A5E:  CALL   05CA
2A62:  MOVLW  01
2A64:  MOVWF  FA9
2A66:  MOVFF  36,FA8
2A6A:  BCF    FA6.6
2A6C:  BCF    FA6.7
2A6E:  BSF    FA6.2
2A70:  MOVF   FF2,W
2A72:  MOVWF  00
2A74:  BCF    FF2.7
2A76:  MOVLB  F
2A78:  MOVLW  55
2A7A:  MOVWF  FA7
2A7C:  MOVLW  AA
2A7E:  MOVWF  FA7
2A80:  BSF    FA6.1
2A82:  BTFSC  FA6.1
2A84:  BRA    2A82
2A86:  BCF    FA6.2
2A88:  MOVF   00,W
2A8A:  IORWF  FF2,F
2A8C:  MOVLW  14
2A8E:  MOVLB  0
2A90:  MOVWF  xB8
2A92:  CALL   05CA
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2A96:  MOVLW  02
2A98:  MOVWF  FA9
2A9A:  MOVFF  37,FA8
2A9E:  BCF    FA6.6
2AA0:  BCF    FA6.7
2AA2:  BSF    FA6.2
2AA4:  MOVF   FF2,W
2AA6:  MOVWF  00
2AA8:  BCF    FF2.7
2AAA:  MOVLB  F
2AAC:  MOVLW  55
2AAE:  MOVWF  FA7
2AB0:  MOVLW  AA
2AB2:  MOVWF  FA7
2AB4:  BSF    FA6.1
2AB6:  BTFSC  FA6.1
2AB8:  BRA    2AB6
2ABA:  BCF    FA6.2
2ABC:  MOVF   00,W
2ABE:  IORWF  FF2,F
2AC0:  MOVLW  14
2AC2:  MOVLB  0
2AC4:  MOVWF  xB8
2AC6:  CALL   05CA
2ACA:  MOVLW  03
2ACC:  MOVWF  FA9
2ACE:  MOVFF  38,FA8
2AD2:  BCF    FA6.6
2AD4:  BCF    FA6.7
2AD6:  BSF    FA6.2
2AD8:  MOVF   FF2,W
2ADA:  MOVWF  00
2ADC:  BCF    FF2.7
2ADE:  MOVLB  F
2AE0:  MOVLW  55
2AE2:  MOVWF  FA7
2AE4:  MOVLW  AA
2AE6:  MOVWF  FA7
2AE8:  BSF    FA6.1
2AEA:  BTFSC  FA6.1
2AEC:  BRA    2AEA
2AEE:  BCF    FA6.2
2AF0:  MOVF   00,W
2AF2:  IORWF  FF2,F
2AF4:  MOVLW  14
2AF6:  MOVLB  0
2AF8:  MOVWF  xB8
2AFA:  CALL   05CA
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2AFE:  MOVLW  02
2B00:  MOVWF  xA1
2B02:  MOVLW  FA
2B04:  MOVWF  xB8
2B06:  CALL   05CA
2B0A:  DECFSZ xA1,F
2B0C:  BRA    2B02
2B0E:  MOVLW  01
2B10:  MOVWF  19
2B12:  CLRF   30
2B14:  MOVLW  02
2B16:  MOVWF  1D
2B18:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2B1A:  MOVF   1C,W
2B1C:  SUBLW  0B
2B1E:  BC    2B3E
2B20:  MOVF   1C,W
2B22:  SUBLW  0D
2B24:  BNC   2B3E
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2B26:  MOVLW  01
2B28:  SUBWF  1C,W
2B2A:  MOVWF  xA1
2B2C:  MOVWF  xB3
2B2E:  MOVLW  04
2B30:  MOVWF  xB4
2B32:  CALL   073A
....................             lcd_putc(t[1]); 
2B36:  MOVFF  33,B2
2B3A:  CALL   079C
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de tiempo de trabajo de Luz UV 
2B3E:  MOVF   19,W
2B40:  SUBLW  05
2B42:  BNZ   2BB6
....................    lcd_gotoxy(1,1); 
2B44:  MOVLW  01
2B46:  MOVWF  xB3
2B48:  MOVWF  xB4
2B4A:  CALL   073A
....................    printf(lcd_putc,"  Duracion Actual   "); 
2B4E:  MOVLW  04
2B50:  MOVWF  FF6
2B52:  MOVLW  05
2B54:  MOVWF  FF7
2B56:  CALL   07FA
....................    lcd_gotoxy(1,2); 
2B5A:  MOVLW  01
2B5C:  MOVWF  xB3
2B5E:  MOVLW  02
2B60:  MOVWF  xB4
2B62:  CALL   073A
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2B66:  MOVLW  1A
2B68:  MOVWF  FF6
2B6A:  MOVLW  05
2B6C:  MOVWF  FF7
2B6E:  MOVLW  0B
2B70:  MOVWF  xA5
2B72:  CALL   086A
2B76:  MOVLW  08
2B78:  MOVWF  FE9
2B7A:  MOVFF  40,A2
2B7E:  MOVFF  3F,A1
2B82:  GOTO   0AB2
2B86:  MOVLW  20
2B88:  MOVWF  xB2
2B8A:  CALL   079C
2B8E:  MOVLW  20
2B90:  MOVWF  xB2
2B92:  CALL   079C
2B96:  MOVLW  20
2B98:  MOVWF  xB2
2B9A:  CALL   079C
....................    lcd_gotoxy(1,4); 
2B9E:  MOVLW  01
2BA0:  MOVWF  xB3
2BA2:  MOVLW  04
2BA4:  MOVWF  xB4
2BA6:  CALL   073A
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2BAA:  MOVLW  2E
2BAC:  MOVWF  FF6
2BAE:  MOVLW  05
2BB0:  MOVWF  FF7
2BB2:  CALL   07FA
....................     
....................    } 
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2BB6:  BSF    F92.5
2BB8:  BTFSS  F80.5
2BBA:  BRA    2CAC
2BBC:  BSF    F96.1
2BBE:  BTFSS  F84.1
2BC0:  BRA    2CAC
....................       {   
....................          delay_ms(200); 
2BC2:  MOVLW  C8
2BC4:  MOVWF  xB8
2BC6:  CALL   05CA
....................          printf(lcd_putc,"\f"); 
2BCA:  MOVLW  0C
2BCC:  MOVWF  xB2
2BCE:  CALL   079C
....................          lcd_gotoxy(1,2); 
2BD2:  MOVLW  01
2BD4:  MOVWF  xB3
2BD6:  MOVLW  02
2BD8:  MOVWF  xB4
2BDA:  CALL   073A
....................          printf(lcd_putc," Reset de tiempo "); 
2BDE:  MOVLW  44
2BE0:  MOVWF  FF6
2BE2:  MOVLW  05
2BE4:  MOVWF  FF7
2BE6:  CALL   07FA
....................          lcd_gotoxy(1,3); 
2BEA:  MOVLW  01
2BEC:  MOVWF  xB3
2BEE:  MOVLW  03
2BF0:  MOVWF  xB4
2BF2:  CALL   073A
....................          printf(lcd_putc,"     Exitoso     "); 
2BF6:  MOVLW  56
2BF8:  MOVWF  FF6
2BFA:  MOVLW  05
2BFC:  MOVWF  FF7
2BFE:  CALL   07FA
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2C02:  MOVLW  32
2C04:  MOVWF  FA9
2C06:  CLRF   FA8
2C08:  BCF    FA6.6
2C0A:  BCF    FA6.7
2C0C:  BSF    FA6.2
2C0E:  MOVF   FF2,W
2C10:  MOVWF  00
2C12:  BCF    FF2.7
2C14:  MOVLB  F
2C16:  MOVLW  55
2C18:  MOVWF  FA7
2C1A:  MOVLW  AA
2C1C:  MOVWF  FA7
2C1E:  BSF    FA6.1
2C20:  BTFSC  FA6.1
2C22:  BRA    2C20
2C24:  BCF    FA6.2
2C26:  MOVF   00,W
2C28:  IORWF  FF2,F
2C2A:  MOVLW  33
2C2C:  MOVWF  FA9
2C2E:  CLRF   FA8
2C30:  BCF    FA6.6
2C32:  BCF    FA6.7
2C34:  BSF    FA6.2
2C36:  MOVF   FF2,W
2C38:  MOVWF  00
2C3A:  BCF    FF2.7
2C3C:  MOVLW  55
2C3E:  MOVWF  FA7
2C40:  MOVLW  AA
2C42:  MOVWF  FA7
2C44:  BSF    FA6.1
2C46:  BTFSC  FA6.1
2C48:  BRA    2C46
2C4A:  BCF    FA6.2
2C4C:  MOVF   00,W
2C4E:  IORWF  FF2,F
2C50:  MOVLW  34
2C52:  MOVWF  FA9
2C54:  CLRF   FA8
2C56:  BCF    FA6.6
2C58:  BCF    FA6.7
2C5A:  BSF    FA6.2
2C5C:  MOVF   FF2,W
2C5E:  MOVWF  00
2C60:  BCF    FF2.7
2C62:  MOVLW  55
2C64:  MOVWF  FA7
2C66:  MOVLW  AA
2C68:  MOVWF  FA7
2C6A:  BSF    FA6.1
2C6C:  BTFSC  FA6.1
2C6E:  BRA    2C6C
2C70:  BCF    FA6.2
2C72:  MOVF   00,W
2C74:  IORWF  FF2,F
....................          delay_ms(700); 
2C76:  MOVLW  04
2C78:  MOVLB  0
2C7A:  MOVWF  xA1
2C7C:  MOVLW  AF
2C7E:  MOVWF  xB8
2C80:  CALL   05CA
2C84:  DECFSZ xA1,F
2C86:  BRA    2C7C
....................          segundos=0;minutos=0;horas=0; 
2C88:  CLRF   22
2C8A:  CLRF   23
2C8C:  CLRF   40
2C8E:  CLRF   3F
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2C90:  MOVLW  1E
2C92:  MOVWF  xB8
2C94:  CALL   05CA
2C98:  MOVLW  01
2C9A:  MOVWF  19
2C9C:  CLRF   30
2C9E:  MOVLW  02
2CA0:  MOVWF  1D
2CA2:  MOVWF  1F
2CA4:  MOVLW  0C
2CA6:  MOVWF  xB2
2CA8:  CALL   079C
....................       } 
....................              
....................       if(LEFT)// Si oprime Izquierda 
2CAC:  BSF    F96.2
2CAE:  BTFSS  F84.2
2CB0:  BRA    2CDE
....................       { 
....................          if(Flanco3 == 0) 
2CB2:  BTFSC  17.6
2CB4:  BRA    2CDC
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2CB6:  BSF    17.6
2CB8:  MOVLW  02
2CBA:  MOVWF  xA1
2CBC:  MOVLW  FA
2CBE:  MOVWF  xB8
2CC0:  CALL   05CA
2CC4:  DECFSZ xA1,F
2CC6:  BRA    2CBC
2CC8:  MOVLW  01
2CCA:  MOVWF  19
2CCC:  CLRF   30
2CCE:  MOVLW  02
2CD0:  MOVWF  1D
2CD2:  MOVWF  1F
2CD4:  MOVLW  0C
2CD6:  MOVWF  xB2
2CD8:  CALL   079C
....................          } 
....................       } 
....................       else 
2CDC:  BRA    2CE0
....................       { 
....................          Flanco3 = 0; 
2CDE:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 100){ // Menu de seleccion de Estado de Luz UV 
2CE0:  MOVF   19,W
2CE2:  SUBLW  64
2CE4:  BTFSS  FD8.2
2CE6:  BRA    30EC
....................     
....................    if(Lectura==1) 
2CE8:  BTFSS  18.0
2CEA:  BRA    2D06
....................    { 
....................       Lectura=0; 
2CEC:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
2CEE:  MOVLW  05
2CF0:  MOVWF  xA1
2CF2:  GOTO   1092
2CF6:  MOVFF  03,A0
2CFA:  MOVFF  02,9F
2CFE:  MOVFF  01,9E
2D02:  MOVFF  00,9D
....................    } 
....................     
....................    lcd_gotoxy(1,1); 
2D06:  MOVLW  01
2D08:  MOVWF  xB3
2D0A:  MOVWF  xB4
2D0C:  CALL   073A
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
2D10:  MOVFF  A0,B8
2D14:  MOVFF  9F,B7
2D18:  MOVFF  9E,B6
2D1C:  MOVFF  9D,B5
2D20:  MOVLW  D7
2D22:  MOVWF  xBC
2D24:  MOVLW  A3
2D26:  MOVWF  xBB
2D28:  CLRF   xBA
2D2A:  MOVLW  81
2D2C:  MOVWF  xB9
2D2E:  CALL   0B66
2D32:  MOVFF  00,A1
2D36:  MOVFF  01,A2
2D3A:  MOVFF  02,A3
2D3E:  MOVFF  03,A4
2D42:  MOVLW  68
2D44:  MOVWF  FF6
2D46:  MOVLW  05
2D48:  MOVWF  FF7
2D4A:  MOVLW  08
2D4C:  MOVWF  xA5
2D4E:  CALL   086A
2D52:  MOVLW  02
2D54:  MOVWF  FE9
2D56:  MOVFF  A4,A8
2D5A:  MOVFF  A3,A7
2D5E:  MOVFF  A2,A6
2D62:  MOVFF  A1,A5
2D66:  MOVWF  xA9
2D68:  GOTO   1344
2D6C:  MOVLW  75
2D6E:  MOVWF  FF6
2D70:  MOVLW  05
2D72:  MOVWF  FF7
2D74:  MOVLW  07
2D76:  MOVWF  xA5
2D78:  CALL   086A
....................    lcd_gotoxy(1,2); 
2D7C:  MOVLW  01
2D7E:  MOVWF  xB3
2D80:  MOVLW  02
2D82:  MOVWF  xB4
2D84:  CALL   073A
....................    printf(lcd_putc,"Filtro:"); 
2D88:  MOVLW  7E
2D8A:  MOVWF  FF6
2D8C:  MOVLW  05
2D8E:  MOVWF  FF7
2D90:  CALL   07FA
....................     
....................    Saturacion=(CaidaPresion/0.37)*11; 
2D94:  MOVFF  A0,B8
2D98:  MOVFF  9F,B7
2D9C:  MOVFF  9E,B6
2DA0:  MOVFF  9D,B5
2DA4:  MOVLW  A4
2DA6:  MOVWF  xBC
2DA8:  MOVLW  70
2DAA:  MOVWF  xBB
2DAC:  MOVLW  3D
2DAE:  MOVWF  xBA
2DB0:  MOVLW  7D
2DB2:  MOVWF  xB9
2DB4:  CALL   0C58
2DB8:  MOVFF  00,A1
2DBC:  MOVFF  01,A2
2DC0:  MOVFF  02,A3
2DC4:  MOVFF  03,A4
2DC8:  MOVFF  03,B8
2DCC:  MOVFF  02,B7
2DD0:  MOVFF  01,B6
2DD4:  MOVFF  00,B5
2DD8:  CLRF   xBC
2DDA:  CLRF   xBB
2DDC:  MOVLW  30
2DDE:  MOVWF  xBA
2DE0:  MOVLW  82
2DE2:  MOVWF  xB9
2DE4:  CALL   0B66
2DE8:  MOVFF  03,9C
2DEC:  MOVFF  02,9B
2DF0:  MOVFF  01,9A
2DF4:  MOVFF  00,99
....................    if(Saturacion>11) 
2DF8:  CLRF   xB8
2DFA:  CLRF   xB7
2DFC:  MOVLW  30
2DFE:  MOVWF  xB6
2E00:  MOVLW  82
2E02:  MOVWF  xB5
2E04:  MOVFF  9C,BC
2E08:  MOVFF  9B,BB
2E0C:  MOVFF  9A,BA
2E10:  MOVFF  99,B9
2E14:  CALL   101C
2E18:  BNC   2E26
....................    { 
....................       Saturacion=11; 
2E1A:  CLRF   x9C
2E1C:  CLRF   x9B
2E1E:  MOVLW  30
2E20:  MOVWF  x9A
2E22:  MOVLW  82
2E24:  MOVWF  x99
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
2E26:  CLRF   2C
2E28:  MOVFF  9C,A4
2E2C:  MOVFF  9B,A3
2E30:  MOVFF  9A,A2
2E34:  MOVFF  99,A1
2E38:  CALL   183A
2E3C:  MOVFF  00,A1
2E40:  MOVFF  01,A2
2E44:  MOVFF  02,A3
2E48:  MOVFF  03,A4
2E4C:  CLRF   xBA
2E4E:  MOVFF  2C,B9
2E52:  CALL   06B2
2E56:  MOVFF  03,B8
2E5A:  MOVFF  02,B7
2E5E:  MOVFF  01,B6
2E62:  MOVFF  00,B5
2E66:  MOVFF  A4,BC
2E6A:  MOVFF  A3,BB
2E6E:  MOVFF  A2,BA
2E72:  MOVFF  A1,B9
2E76:  CALL   101C
2E7A:  BNC   2E98
....................    { 
....................       lcd_gotoxy(i+8,2); 
2E7C:  MOVLW  08
2E7E:  ADDWF  2C,W
2E80:  MOVWF  xA1
2E82:  MOVWF  xB3
2E84:  MOVLW  02
2E86:  MOVWF  xB4
2E88:  CALL   073A
....................       printf(lcd_putc,"Ñ"); 
2E8C:  MOVLW  D1
2E8E:  MOVWF  xB2
2E90:  CALL   079C
....................    } 
2E94:  INCF   2C,F
2E96:  BRA    2E28
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
2E98:  MOVFF  9C,A4
2E9C:  MOVFF  9B,A3
2EA0:  MOVFF  9A,A2
2EA4:  MOVFF  99,A1
2EA8:  CALL   183A
2EAC:  MOVFF  03,B8
2EB0:  MOVFF  02,B7
2EB4:  MOVFF  01,B6
2EB8:  MOVFF  00,B5
2EBC:  CALL   14CE
2EC0:  MOVFF  01,2C
2EC4:  MOVF   2C,W
2EC6:  SUBLW  0A
2EC8:  BNC   2EE6
....................    { 
....................       lcd_gotoxy(i+8,2); 
2ECA:  MOVLW  08
2ECC:  ADDWF  2C,W
2ECE:  MOVWF  xA1
2ED0:  MOVWF  xB3
2ED2:  MOVLW  02
2ED4:  MOVWF  xB4
2ED6:  CALL   073A
....................       printf(lcd_putc," "); 
2EDA:  MOVLW  20
2EDC:  MOVWF  xB2
2EDE:  CALL   079C
....................    } 
2EE2:  INCF   2C,F
2EE4:  BRA    2EC4
....................     
....................    lcd_gotoxy(10,3); 
2EE6:  MOVLW  0A
2EE8:  MOVWF  xB3
2EEA:  MOVLW  03
2EEC:  MOVWF  xB4
2EEE:  CALL   073A
....................    printf(lcd_putc,"Tempo:%02u:%02u",tempo_minutos,tempo_segundos); 
2EF2:  MOVLW  86
2EF4:  MOVWF  FF6
2EF6:  MOVLW  05
2EF8:  MOVWF  FF7
2EFA:  MOVLW  06
2EFC:  MOVWF  xA5
2EFE:  CALL   086A
2F02:  MOVFF  26,A1
2F06:  MOVLW  01
2F08:  MOVWF  xA2
2F0A:  CALL   09E0
2F0E:  MOVLW  3A
2F10:  MOVWF  xB2
2F12:  CALL   079C
2F16:  MOVFF  27,A1
2F1A:  MOVLW  01
2F1C:  MOVWF  xA2
2F1E:  CALL   09E0
....................     
....................    if(estadomv==1) 
2F22:  BTFSS  17.2
2F24:  BRA    2F60
....................    { 
....................       lcd_gotoxy(1,4); 
2F26:  MOVLW  01
2F28:  MOVWF  xB3
2F2A:  MOVLW  04
2F2C:  MOVWF  xB4
2F2E:  CALL   073A
....................       printf(lcd_putc,"Motor:ON "); 
2F32:  MOVLW  96
2F34:  MOVWF  FF6
2F36:  MOVLW  05
2F38:  MOVWF  FF7
2F3A:  CALL   07FA
....................       velocidades(read_eeprom(5)); 
2F3E:  MOVFF  FF2,A1
2F42:  BCF    FF2.7
2F44:  MOVLW  05
2F46:  MOVWF  FA9
2F48:  BCF    FA6.6
2F4A:  BCF    FA6.7
2F4C:  BSF    FA6.0
2F4E:  MOVF   FA8,W
2F50:  BTFSC  xA1.7
2F52:  BSF    FF2.7
2F54:  MOVWF  xA2
2F56:  MOVFF  A2,A3
2F5A:  CALL   0A46
....................    } 
....................    else 
2F5E:  BRA    2F7E
....................    { 
....................       lcd_gotoxy(1,4); 
2F60:  MOVLW  01
2F62:  MOVWF  xB3
2F64:  MOVLW  04
2F66:  MOVWF  xB4
2F68:  CALL   073A
....................       printf(lcd_putc,"Motor:OFF"); 
2F6C:  MOVLW  A0
2F6E:  MOVWF  FF6
2F70:  MOVLW  05
2F72:  MOVWF  FF7
2F74:  CALL   07FA
....................       velocidades(0);  
2F78:  CLRF   xA3
2F7A:  CALL   0A46
....................    } 
....................     
....................    if(estadouv==1) 
2F7E:  BTFSS  17.0
2F80:  BRA    2FC6
....................    { 
....................       lcd_gotoxy(13,4); 
2F82:  MOVLW  0D
2F84:  MOVWF  xB3
2F86:  MOVLW  04
2F88:  MOVWF  xB4
2F8A:  CALL   073A
....................       printf(lcd_putc,"UV:ON "); 
2F8E:  MOVLW  AA
2F90:  MOVWF  FF6
2F92:  MOVLW  05
2F94:  MOVWF  FF7
2F96:  CALL   07FA
....................       estadomv=0; 
2F9A:  BCF    17.2
....................       velocidades(0); 
2F9C:  CLRF   xA3
2F9E:  CALL   0A46
....................       estadofl=0; 
2FA2:  BCF    17.1
....................       Luz_Blanca_off; 
2FA4:  BCF    F8C.1
2FA6:  BCF    F95.1
....................       Luz_UV_on; 
2FA8:  BSF    F8C.0
2FAA:  BCF    F95.0
....................       tiempo_cumplido=0; 
2FAC:  BCF    17.7
....................       if(flaguv==0) 
2FAE:  BTFSC  18.1
2FB0:  BRA    2FC4
....................       { 
....................          delay_ms(50);lcd_init();flaguv=1;guardaruv=1; 
2FB2:  MOVLW  32
2FB4:  MOVWF  xB8
2FB6:  CALL   05CA
2FBA:  CALL   065C
2FBE:  BSF    18.1
2FC0:  MOVLW  01
2FC2:  MOVWF  2F
....................       } 
....................    } 
....................    else 
2FC4:  BRA    2FFA
....................    { 
....................       estadouv=0; 
2FC6:  BCF    17.0
....................       lcd_gotoxy(13,4); 
2FC8:  MOVLW  0D
2FCA:  MOVWF  xB3
2FCC:  MOVLW  04
2FCE:  MOVWF  xB4
2FD0:  CALL   073A
....................       printf(lcd_putc,"UV:OFF"); 
2FD4:  MOVLW  B2
2FD6:  MOVWF  FF6
2FD8:  MOVLW  05
2FDA:  MOVWF  FF7
2FDC:  CALL   07FA
....................       Luz_UV_off; 
2FE0:  BCF    F8C.0
2FE2:  BCF    F95.0
....................       if(flaguv==1) 
2FE4:  BTFSS  18.1
2FE6:  BRA    2FFA
....................       { 
....................          delay_ms(50);lcd_init();flaguv=0;guardaruv=1; 
2FE8:  MOVLW  32
2FEA:  MOVWF  xB8
2FEC:  CALL   05CA
2FF0:  CALL   065C
2FF4:  BCF    18.1
2FF6:  MOVLW  01
2FF8:  MOVWF  2F
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
2FFA:  BTFSS  17.1
2FFC:  BRA    302E
....................    { 
....................       lcd_gotoxy(1,3); 
2FFE:  MOVLW  01
3000:  MOVWF  xB3
3002:  MOVLW  03
3004:  MOVWF  xB4
3006:  CALL   073A
....................       printf(lcd_putc,"Luz:ON "); 
300A:  MOVLW  BA
300C:  MOVWF  FF6
300E:  MOVLW  05
3010:  MOVWF  FF7
3012:  CALL   07FA
....................       Luz_Blanca_on; 
3016:  BSF    F8C.1
3018:  BCF    F95.1
....................       if(flagfl==0) 
301A:  BTFSC  18.2
301C:  BRA    302C
....................       { 
....................          delay_ms(50);lcd_init();flagfl=1; 
301E:  MOVLW  32
3020:  MOVWF  xB8
3022:  CALL   05CA
3026:  CALL   065C
302A:  BSF    18.2
....................       } 
....................    } 
....................    else 
302C:  BRA    305C
....................    { 
....................       lcd_gotoxy(1,3); 
302E:  MOVLW  01
3030:  MOVWF  xB3
3032:  MOVLW  03
3034:  MOVWF  xB4
3036:  CALL   073A
....................       printf(lcd_putc,"Luz:OFF"); 
303A:  MOVLW  C2
303C:  MOVWF  FF6
303E:  MOVLW  05
3040:  MOVWF  FF7
3042:  CALL   07FA
....................       Luz_Blanca_off; 
3046:  BCF    F8C.1
3048:  BCF    F95.1
....................       if(flagfl==1) 
304A:  BTFSS  18.2
304C:  BRA    305C
....................       { 
....................          delay_ms(50);lcd_init();flagfl=0; 
304E:  MOVLW  32
3050:  MOVWF  xB8
3052:  CALL   05CA
3056:  CALL   065C
305A:  BCF    18.2
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia arriba 
305C:  BSF    F92.5
305E:  BTFSS  F80.5
3060:  BRA    307C
....................    { 
....................       if(Flanco == 0) 
3062:  BTFSC  17.3
3064:  BRA    307A
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
3066:  BTG    17.1
3068:  BSF    17.3
306A:  MOVLW  02
306C:  MOVWF  xA1
306E:  MOVLW  96
3070:  MOVWF  xB8
3072:  CALL   05CA
3076:  DECFSZ xA1,F
3078:  BRA    306E
....................       } 
....................    } 
....................    else 
307A:  BRA    307E
....................    { 
....................       Flanco = 0; 
307C:  BCF    17.3
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia abajo 
307E:  BSF    F96.0
3080:  BTFSS  F84.0
3082:  BRA    309E
....................    { 
....................       if(Flanco1 == 0) 
3084:  BTFSC  17.4
3086:  BRA    309C
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
3088:  BTG    17.2
308A:  BSF    17.4
308C:  MOVLW  02
308E:  MOVWF  xA1
3090:  MOVLW  96
3092:  MOVWF  xB8
3094:  CALL   05CA
3098:  DECFSZ xA1,F
309A:  BRA    3090
....................       } 
....................    } 
....................    else 
309C:  BRA    30A0
....................    { 
....................       Flanco1 = 0; 
309E:  BCF    17.4
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia izquierda 
30A0:  BSF    F96.1
30A2:  BTFSS  F84.1
30A4:  BRA    30CA
....................    { 
....................       printf(lcd_putc,"\f");delay_ms(300);Menu=1; paso=0;Flecha=2;Flecha2=2;    
30A6:  MOVLW  0C
30A8:  MOVWF  xB2
30AA:  CALL   079C
30AE:  MOVLW  02
30B0:  MOVWF  xA1
30B2:  MOVLW  96
30B4:  MOVWF  xB8
30B6:  CALL   05CA
30BA:  DECFSZ xA1,F
30BC:  BRA    30B2
30BE:  MOVLW  01
30C0:  MOVWF  19
30C2:  CLRF   30
30C4:  MOVLW  02
30C6:  MOVWF  1D
30C8:  MOVWF  1F
....................    } 
....................     
....................    if(LEFT)//Si oprime hacia izquierda 
30CA:  BSF    F96.2
30CC:  BTFSS  F84.2
30CE:  BRA    30EA
....................    { 
....................       if(Flanco2 == 0) 
30D0:  BTFSC  17.5
30D2:  BRA    30E8
....................       { 
....................          estadouv=!estadouv;Flanco2 = 1;delay_ms(300); 
30D4:  BTG    17.0
30D6:  BSF    17.5
30D8:  MOVLW  02
30DA:  MOVWF  xA1
30DC:  MOVLW  96
30DE:  MOVWF  xB8
30E0:  CALL   05CA
30E4:  DECFSZ xA1,F
30E6:  BRA    30DC
....................       } 
....................    } 
....................    else 
30E8:  BRA    30EC
....................    { 
....................       Flanco2 = 0; 
30EA:  BCF    17.5
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................    if(guardaruv==1) 
30EC:  DECFSZ 2F,W
30EE:  BRA    319E
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
30F0:  MOVLW  32
30F2:  MOVWF  FA9
30F4:  MOVFF  22,FA8
30F8:  BCF    FA6.6
30FA:  BCF    FA6.7
30FC:  BSF    FA6.2
30FE:  MOVF   FF2,W
3100:  MOVWF  00
3102:  BCF    FF2.7
3104:  MOVLB  F
3106:  MOVLW  55
3108:  MOVWF  FA7
310A:  MOVLW  AA
310C:  MOVWF  FA7
310E:  BSF    FA6.1
3110:  BTFSC  FA6.1
3112:  BRA    3110
3114:  BCF    FA6.2
3116:  MOVF   00,W
3118:  IORWF  FF2,F
311A:  MOVLW  33
311C:  MOVWF  FA9
311E:  MOVFF  23,FA8
3122:  BCF    FA6.6
3124:  BCF    FA6.7
3126:  BSF    FA6.2
3128:  MOVF   FF2,W
312A:  MOVWF  00
312C:  BCF    FF2.7
312E:  MOVLW  55
3130:  MOVWF  FA7
3132:  MOVLW  AA
3134:  MOVWF  FA7
3136:  BSF    FA6.1
3138:  BTFSC  FA6.1
313A:  BRA    3138
313C:  BCF    FA6.2
313E:  MOVF   00,W
3140:  IORWF  FF2,F
....................       horasL=(int8)horas; 
3142:  MOVFF  3F,24
....................       horasH=(int8)(horas>>8); 
3146:  MOVF   40,W
3148:  MOVWF  25
....................       write_eeprom(52,horasL); 
314A:  MOVLW  34
314C:  MOVWF  FA9
314E:  MOVFF  24,FA8
3152:  BCF    FA6.6
3154:  BCF    FA6.7
3156:  BSF    FA6.2
3158:  MOVFF  FF2,00
315C:  BCF    FF2.7
315E:  MOVLW  55
3160:  MOVWF  FA7
3162:  MOVLW  AA
3164:  MOVWF  FA7
3166:  BSF    FA6.1
3168:  BTFSC  FA6.1
316A:  BRA    3168
316C:  BCF    FA6.2
316E:  MOVF   00,W
3170:  IORWF  FF2,F
....................       write_eeprom(53,horasH); 
3172:  MOVLW  35
3174:  MOVWF  FA9
3176:  MOVFF  25,FA8
317A:  BCF    FA6.6
317C:  BCF    FA6.7
317E:  BSF    FA6.2
3180:  MOVFF  FF2,00
3184:  BCF    FF2.7
3186:  MOVLW  55
3188:  MOVWF  FA7
318A:  MOVLW  AA
318C:  MOVWF  FA7
318E:  BSF    FA6.1
3190:  BTFSC  FA6.1
3192:  BRA    3190
3194:  BCF    FA6.2
3196:  MOVF   00,W
3198:  IORWF  FF2,F
....................       guardaruv=0; 
319A:  CLRF   2F
319C:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
319E:  MOVF   2E,W
31A0:  SUBLW  13
31A2:  BC    31AA
....................    { 
....................       lcd_init(); 
31A4:  CALL   065C
....................       tiemporeset=0; 
31A8:  CLRF   2E
....................    }    
....................     
....................    if(segundos>=60) 
31AA:  MOVF   22,W
31AC:  SUBLW  3B
31AE:  BC    31B4
....................    { 
....................       segundos=0;minutos++; 
31B0:  CLRF   22
31B2:  INCF   23,F
....................    } 
....................    if(minutos==60) 
31B4:  MOVF   23,W
31B6:  SUBLW  3C
31B8:  BNZ   31C2
....................    { 
....................       minutos=0;horas++; 
31BA:  CLRF   23
31BC:  INCF   3F,F
31BE:  BTFSC  FD8.2
31C0:  INCF   40,F
....................    } 
....................     
....................    } 
31C2:  GOTO   1B7A
.................... } 
....................  
31C6:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1E   BROWNOUT NOWDT BORV20 PUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
