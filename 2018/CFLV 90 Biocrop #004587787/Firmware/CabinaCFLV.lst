CCS PCH C Compiler, Version 4.104, 5967               29-may.-18 10:41

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Vertical\2018\CFLV 90 Biocrop #004587787\Firmware\CabinaCFLV.lst

               ROM used: 13548 bytes (41%)
                         Largest free fragment is 19216
               RAM used: 173 (8%) at main() level
                         210 (10%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   18C6
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
06D8:  CLRF   FEA
06DA:  MOVLW  BB
06DC:  MOVWF  FE9
06DE:  MOVF   FEF,W
06E0:  BZ    06FE
06E2:  MOVLW  0F
06E4:  MOVWF  01
06E6:  CLRF   00
06E8:  DECFSZ 00,F
06EA:  BRA    06E8
06EC:  DECFSZ 01,F
06EE:  BRA    06E6
06F0:  MOVLW  8F
06F2:  MOVWF  00
06F4:  DECFSZ 00,F
06F6:  BRA    06F4
06F8:  NOP   
06FA:  DECFSZ FEF,F
06FC:  BRA    06E2
06FE:  RETLW  00
*
0728:  MOVLW  01
072A:  SUBWF  xC0,F
072C:  BNC   0746
072E:  CLRF   FEA
0730:  MOVLW  C0
0732:  MOVWF  FE9
0734:  MOVF   FEF,W
0736:  BZ    0746
0738:  MOVLW  02
073A:  MOVWF  00
073C:  DECFSZ 00,F
073E:  BRA    073C
0740:  BRA    0742
0742:  DECFSZ FEF,F
0744:  BRA    0738
0746:  GOTO   0752 (RETURN)
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
0700:  SWAPF  xC1,W
0702:  ANDLW  F0
0704:  MOVWF  00
0706:  MOVLW  0F
0708:  ANDWF  F81,W
070A:  IORWF  00,W
070C:  MOVWF  F81
....................       delay_cycles(30); 
070E:  MOVLW  09
0710:  MOVWF  00
0712:  DECFSZ 00,F
0714:  BRA    0712
0716:  BRA    0718
....................       lcd.enable = 1; 
0718:  BSF    F81.3
....................       delay_us(55); 
071A:  MOVLW  DB
071C:  MOVWF  00
071E:  DECFSZ 00,F
0720:  BRA    071E
0722:  BRA    0724
....................       lcd.enable = 0; 
0724:  BCF    F81.3
.................... } 
0726:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
*
074A:  BCF    F81.1
....................       delay_us(180); 
074C:  MOVLW  B4
074E:  MOVWF  xC0
0750:  BRA    0728
....................       lcd.rs = address; 
0752:  BTFSS  xBE.0
0754:  BCF    F81.1
0756:  BTFSC  xBE.0
0758:  BSF    F81.1
....................       delay_cycles(30); 
075A:  MOVLW  09
075C:  MOVWF  00
075E:  DECFSZ 00,F
0760:  BRA    075E
0762:  BRA    0764
....................       lcd.rw = 0; 
0764:  BCF    F81.2
....................       delay_cycles(30); 
0766:  MOVLW  09
0768:  MOVWF  00
076A:  DECFSZ 00,F
076C:  BRA    076A
076E:  BRA    0770
....................       lcd.enable = 0; 
0770:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
0772:  SWAPF  xBF,W
0774:  MOVWF  xC0
0776:  MOVLW  0F
0778:  ANDWF  xC0,F
077A:  MOVFF  C0,C1
077E:  RCALL  0700
....................       lcd_send_nibble(n & 0xf); 
0780:  MOVF   xBF,W
0782:  ANDLW  0F
0784:  MOVWF  xC0
0786:  MOVWF  xC1
0788:  RCALL  0700
.................... } 
078A:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
078C:  MOVLW  00
078E:  MOVWF  F93
....................     lcd.rs = 0; 
0790:  BCF    F81.1
....................     lcd.rw = 0; 
0792:  BCF    F81.2
....................     lcd.enable = 0; 
0794:  BCF    F81.3
....................     delay_ms(35); 
0796:  MOVLW  23
0798:  MOVWF  xBB
079A:  RCALL  06D8
....................     for(i=1;i<=3;++i) { 
079C:  MOVLW  01
079E:  MOVWF  xA9
07A0:  MOVF   xA9,W
07A2:  SUBLW  03
07A4:  BNC   07B6
....................        lcd_send_nibble(3); 
07A6:  MOVLW  03
07A8:  MOVWF  xC1
07AA:  RCALL  0700
....................        delay_ms(5); 
07AC:  MOVLW  05
07AE:  MOVWF  xBB
07B0:  RCALL  06D8
....................     } 
07B2:  INCF   xA9,F
07B4:  BRA    07A0
....................     lcd_send_nibble(2); 
07B6:  MOVLW  02
07B8:  MOVWF  xC1
07BA:  RCALL  0700
....................     for(i=0;i<=3;++i) 
07BC:  CLRF   xA9
07BE:  MOVF   xA9,W
07C0:  SUBLW  03
07C2:  BNC   07E0
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
07C4:  CLRF   03
07C6:  MOVF   xA9,W
07C8:  MOVFF  FF2,AA
07CC:  BCF    FF2.7
07CE:  RCALL  0096
07D0:  BTFSC  xAA.7
07D2:  BSF    FF2.7
07D4:  MOVWF  xAA
07D6:  CLRF   xBE
07D8:  MOVWF  xBF
07DA:  RCALL  074A
07DC:  INCF   xA9,F
07DE:  BRA    07BE
.................... } 
07E0:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
086A:  MOVLW  01
086C:  SUBWF  xBC,W
086E:  ADDLW  FC
0870:  BC    0890
0872:  ADDLW  04
0874:  GOTO   08A0
....................      case 1 : address=0x80;break; 
0878:  MOVLW  80
087A:  MOVWF  xBD
087C:  BRA    0890
....................      case 2 : address=0xc0;break; 
087E:  MOVLW  C0
0880:  MOVWF  xBD
0882:  BRA    0890
....................      case 3 : address=0x94;break; 
0884:  MOVLW  94
0886:  MOVWF  xBD
0888:  BRA    0890
....................      case 4 : address=0xd4;break; 
088A:  MOVLW  D4
088C:  MOVWF  xBD
088E:  BRA    0890
....................    } 
....................    address+=x-1; 
0890:  MOVLW  01
0892:  SUBWF  xBB,W
0894:  ADDWF  xBD,F
....................    lcd_send_byte(0,address); 
0896:  CLRF   xBE
0898:  MOVFF  BD,BF
089C:  RCALL  074A
.................... } 
089E:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
08CC:  MOVF   xBA,W
08CE:  SUBLW  F1
08D0:  BNZ   08D6
....................    { 
....................       c=238; 
08D2:  MOVLW  EE
08D4:  MOVWF  xBA
....................    } 
....................    if(c=='Ñ') 
08D6:  MOVF   xBA,W
08D8:  SUBLW  D1
08DA:  BNZ   08E0
....................    { 
....................       c=255; 
08DC:  MOVLW  FF
08DE:  MOVWF  xBA
....................    } 
....................     
....................    switch (c) { 
08E0:  MOVF   xBA,W
08E2:  XORLW  0C
08E4:  BZ    08F0
08E6:  XORLW  06
08E8:  BZ    0904
08EA:  XORLW  02
08EC:  BZ    0912
08EE:  BRA    091C
....................      case '\f'   : lcd_send_byte(0,1); 
08F0:  CLRF   xBE
08F2:  MOVLW  01
08F4:  MOVWF  xBF
08F6:  RCALL  074A
....................                    lcdline=1; 
08F8:  MOVLW  01
08FA:  MOVWF  16
....................                    delay_ms(2); 
08FC:  MOVLW  02
08FE:  MOVWF  xBB
0900:  RCALL  06D8
....................                                            break; 
0902:  BRA    0928
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0904:  INCF   16,F
0906:  MOVLW  01
0908:  MOVWF  xBB
090A:  MOVFF  16,BC
090E:  RCALL  086A
0910:  BRA    0928
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0912:  CLRF   xBE
0914:  MOVLW  10
0916:  MOVWF  xBF
0918:  RCALL  074A
091A:  BRA    0928
....................      default     : lcd_send_byte(1,c);     break; 
091C:  MOVLW  01
091E:  MOVWF  xBE
0920:  MOVFF  BA,BF
0924:  RCALL  074A
0926:  BRA    0928
....................    } 
.................... } 
0928:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
156E:  BCF    xBC.0
....................    y = x; 
1570:  MOVFF  B0,B5
1574:  MOVFF  AF,B4
1578:  MOVFF  AE,B3
157C:  MOVFF  AD,B2
....................  
....................    if (x < 0) 
1580:  MOVFF  B0,C0
1584:  MOVFF  AF,BF
1588:  MOVFF  AE,BE
158C:  MOVFF  AD,BD
1590:  CLRF   xC4
1592:  CLRF   xC3
1594:  CLRF   xC2
1596:  CLRF   xC1
1598:  RCALL  0FF8
159A:  BNC   15A4
....................    { 
....................       s = 1; 
159C:  BSF    xBC.0
....................       y = -y; 
159E:  MOVF   xB3,W
15A0:  XORLW  80
15A2:  MOVWF  xB3
....................    } 
....................  
....................    if (y <= 32768.0) 
15A4:  MOVFF  B5,C0
15A8:  MOVFF  B4,BF
15AC:  MOVFF  B3,BE
15B0:  MOVFF  B2,BD
15B4:  CLRF   xC4
15B6:  CLRF   xC3
15B8:  CLRF   xC2
15BA:  MOVLW  8E
15BC:  MOVWF  xC1
15BE:  RCALL  0FF8
15C0:  BC    15C4
15C2:  BNZ   15F4
....................   res = (float32)(unsigned int16)y; 
15C4:  MOVFF  B5,C0
15C8:  MOVFF  B4,BF
15CC:  MOVFF  B3,BE
15D0:  MOVFF  B2,BD
15D4:  RCALL  1536
15D6:  MOVFF  02,C2
15DA:  MOVFF  01,C1
15DE:  CALL   07E2
15E2:  MOVFF  03,B9
15E6:  MOVFF  02,B8
15EA:  MOVFF  01,B7
15EE:  MOVFF  00,B6
....................  
....................  else if (y < 10000000.0) 
15F2:  BRA    177C
15F4:  MOVFF  B5,C0
15F8:  MOVFF  B4,BF
15FC:  MOVFF  B3,BE
1600:  MOVFF  B2,BD
1604:  MOVLW  80
1606:  MOVWF  xC4
1608:  MOVLW  96
160A:  MOVWF  xC3
160C:  MOVLW  18
160E:  MOVWF  xC2
1610:  MOVLW  96
1612:  MOVWF  xC1
1614:  RCALL  0FF8
1616:  BTFSS  FD8.0
1618:  BRA    176C
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
161A:  MOVFF  B5,C0
161E:  MOVFF  B4,BF
1622:  MOVFF  B3,BE
1626:  MOVFF  B2,BD
162A:  CLRF   xC4
162C:  CLRF   xC3
162E:  CLRF   xC2
1630:  MOVLW  8E
1632:  MOVWF  xC1
1634:  CALL   0C34
1638:  MOVFF  03,C0
163C:  MOVFF  02,BF
1640:  MOVFF  01,BE
1644:  MOVFF  00,BD
1648:  RCALL  1536
164A:  MOVFF  02,BB
164E:  MOVFF  01,BA
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1652:  MOVFF  B5,C0
1656:  MOVFF  B4,BF
165A:  MOVFF  B3,BE
165E:  MOVFF  B2,BD
1662:  CLRF   xC4
1664:  CLRF   xC3
1666:  CLRF   xC2
1668:  MOVLW  8E
166A:  MOVWF  xC1
166C:  CALL   0C34
1670:  MOVFF  00,BD
1674:  MOVFF  01,BE
1678:  MOVFF  02,BF
167C:  MOVFF  03,C0
1680:  MOVFF  BB,C2
1684:  MOVFF  BA,C1
1688:  CALL   07E2
168C:  BSF    FD8.1
168E:  MOVFF  C0,C4
1692:  MOVFF  BF,C3
1696:  MOVFF  BE,C2
169A:  MOVFF  BD,C1
169E:  MOVFF  03,C8
16A2:  MOVFF  02,C7
16A6:  MOVFF  01,C6
16AA:  MOVFF  00,C5
16AE:  CALL   0D8E
16B2:  CLRF   xC0
16B4:  CLRF   xBF
16B6:  CLRF   xBE
16B8:  MOVLW  8E
16BA:  MOVWF  xBD
16BC:  MOVFF  03,C4
16C0:  MOVFF  02,C3
16C4:  MOVFF  01,C2
16C8:  MOVFF  00,C1
16CC:  RCALL  1204
16CE:  MOVFF  03,B5
16D2:  MOVFF  02,B4
16D6:  MOVFF  01,B3
16DA:  MOVFF  00,B2
....................   res = 32768.0*(float32)l; 
16DE:  MOVFF  BB,C2
16E2:  MOVFF  BA,C1
16E6:  CALL   07E2
16EA:  CLRF   xC0
16EC:  CLRF   xBF
16EE:  CLRF   xBE
16F0:  MOVLW  8E
16F2:  MOVWF  xBD
16F4:  MOVFF  03,C4
16F8:  MOVFF  02,C3
16FC:  MOVFF  01,C2
1700:  MOVFF  00,C1
1704:  RCALL  1204
1706:  MOVFF  03,B9
170A:  MOVFF  02,B8
170E:  MOVFF  01,B7
1712:  MOVFF  00,B6
....................   res += (float32)(unsigned int16)y; 
1716:  MOVFF  B5,C0
171A:  MOVFF  B4,BF
171E:  MOVFF  B3,BE
1722:  MOVFF  B2,BD
1726:  RCALL  1536
1728:  MOVFF  02,C2
172C:  MOVFF  01,C1
1730:  CALL   07E2
1734:  BCF    FD8.1
1736:  MOVFF  B9,C4
173A:  MOVFF  B8,C3
173E:  MOVFF  B7,C2
1742:  MOVFF  B6,C1
1746:  MOVFF  03,C8
174A:  MOVFF  02,C7
174E:  MOVFF  01,C6
1752:  MOVFF  00,C5
1756:  CALL   0D8E
175A:  MOVFF  03,B9
175E:  MOVFF  02,B8
1762:  MOVFF  01,B7
1766:  MOVFF  00,B6
....................  } 
....................  
....................  else 
176A:  BRA    177C
....................   res = y; 
176C:  MOVFF  B5,B9
1770:  MOVFF  B4,B8
1774:  MOVFF  B3,B7
1778:  MOVFF  B2,B6
....................  
....................  y = y - (float32)(unsigned int16)y; 
177C:  MOVFF  B5,C0
1780:  MOVFF  B4,BF
1784:  MOVFF  B3,BE
1788:  MOVFF  B2,BD
178C:  RCALL  1536
178E:  MOVFF  02,C2
1792:  MOVFF  01,C1
1796:  CALL   07E2
179A:  BSF    FD8.1
179C:  MOVFF  B5,C4
17A0:  MOVFF  B4,C3
17A4:  MOVFF  B3,C2
17A8:  MOVFF  B2,C1
17AC:  MOVFF  03,C8
17B0:  MOVFF  02,C7
17B4:  MOVFF  01,C6
17B8:  MOVFF  00,C5
17BC:  CALL   0D8E
17C0:  MOVFF  03,B5
17C4:  MOVFF  02,B4
17C8:  MOVFF  01,B3
17CC:  MOVFF  00,B2
....................  
....................  if (s) 
17D0:  BTFSS  xBC.0
17D2:  BRA    17DA
....................   res = -res; 
17D4:  MOVF   xB7,W
17D6:  XORLW  80
17D8:  MOVWF  xB7
....................  
....................  if (y != 0) 
17DA:  MOVFF  B5,C0
17DE:  MOVFF  B4,BF
17E2:  MOVFF  B3,BE
17E6:  MOVFF  B2,BD
17EA:  CLRF   xC4
17EC:  CLRF   xC3
17EE:  CLRF   xC2
17F0:  CLRF   xC1
17F2:  RCALL  0FF8
17F4:  BZ    1866
....................  { 
....................   if (s == 1 && n == 0) 
17F6:  BTFSS  xBC.0
17F8:  BRA    182E
17FA:  MOVF   xB1,F
17FC:  BNZ   182E
....................    res -= 1.0; 
17FE:  BSF    FD8.1
1800:  MOVFF  B9,C4
1804:  MOVFF  B8,C3
1808:  MOVFF  B7,C2
180C:  MOVFF  B6,C1
1810:  CLRF   xC8
1812:  CLRF   xC7
1814:  CLRF   xC6
1816:  MOVLW  7F
1818:  MOVWF  xC5
181A:  CALL   0D8E
181E:  MOVFF  03,B9
1822:  MOVFF  02,B8
1826:  MOVFF  01,B7
182A:  MOVFF  00,B6
....................  
....................   if (s == 0 && n == 1) 
182E:  BTFSC  xBC.0
1830:  BRA    1866
1832:  DECFSZ xB1,W
1834:  BRA    1866
....................    res += 1.0; 
1836:  BCF    FD8.1
1838:  MOVFF  B9,C4
183C:  MOVFF  B8,C3
1840:  MOVFF  B7,C2
1844:  MOVFF  B6,C1
1848:  CLRF   xC8
184A:  CLRF   xC7
184C:  CLRF   xC6
184E:  MOVLW  7F
1850:  MOVWF  xC5
1852:  CALL   0D8E
1856:  MOVFF  03,B9
185A:  MOVFF  02,B8
185E:  MOVFF  01,B7
1862:  MOVFF  00,B6
....................  } 
....................  if (x == 0) 
1866:  MOVFF  B0,C0
186A:  MOVFF  AF,BF
186E:  MOVFF  AE,BE
1872:  MOVFF  AD,BD
1876:  CLRF   xC4
1878:  CLRF   xC3
187A:  CLRF   xC2
187C:  CLRF   xC1
187E:  CALL   0FF8
1882:  BNZ   188C
....................     res = 0; 
1884:  CLRF   xB9
1886:  CLRF   xB8
1888:  CLRF   xB7
188A:  CLRF   xB6
....................  
....................  return (res); 
188C:  MOVFF  B6,00
1890:  MOVFF  B7,01
1894:  MOVFF  B8,02
1898:  MOVFF  B9,03
.................... } 
189C:  GOTO   18B4 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
18A0:  MOVFF  AC,B0
18A4:  MOVFF  AB,AF
18A8:  MOVFF  AA,AE
18AC:  MOVFF  A9,AD
18B0:  CLRF   xB1
18B2:  BRA    156E
.................... } 
18B4:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   IZQU          input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D1,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D1,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D2,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D2,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... #define   Buzzer_on         output_bit(PIN_D0,1) 
.................... #define   Buzzer_off        output_bit(PIN_D0,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   3F,F
00BE:  BTFSC  FD8.2
00C0:  INCF   40,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   40,F
00C4:  BNZ   00CC
00C6:  MOVF   3F,W
00C8:  SUBLW  C7
00CA:  BC    011A
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   40
00CE:  CLRF   3F
00D0:  INCF   30,F
00D2:  BSF    18.0
....................     
....................    if(ActivaBuzzer==1) 
00D4:  DECFSZ 3E,W
00D6:  BRA    00EC
....................    { 
....................       if(estadobuzzer==0) 
00D8:  BTFSC  18.3
00DA:  BRA    00E2
....................       { 
....................          Buzzer_off; 
00DC:  BCF    F8C.0
00DE:  BCF    F95.0
....................       } 
....................       else 
00E0:  BRA    00EA
....................       { 
....................          if(estadoalarma==1) 
00E2:  BTFSS  18.4
00E4:  BRA    00EA
....................             Buzzer_on; 
00E6:  BSF    F8C.0
00E8:  BCF    F95.0
....................       } 
....................       estadobuzzer=!estadobuzzer; 
00EA:  BTG    18.3
....................    } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00EC:  BTFSS  17.0
00EE:  BRA    011A
....................    { 
....................       segundos++; 
00F0:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00F2:  BTFSC  17.7
00F4:  BRA    011A
....................       { 
....................          if(tempo_segundos>0) 
00F6:  MOVF   29,F
00F8:  BZ    00FE
....................          { 
....................             tempo_segundos--; 
00FA:  DECF   29,F
....................          } 
....................          else 
00FC:  BRA    011A
....................          { 
....................             if(tempo_minutos>0) 
00FE:  MOVF   28,F
0100:  BZ    010A
....................             { 
....................                tempo_minutos--; 
0102:  DECF   28,F
....................                tempo_segundos=59; 
0104:  MOVLW  3B
0106:  MOVWF  29
....................             } 
....................             else 
0108:  BRA    011A
....................             { 
....................                tiempo_cumplido=1; 
010A:  BSF    17.7
....................                estadouv=0;Luz_UV_off; 
010C:  BCF    17.0
010E:  BCF    F8C.1
0110:  BCF    F95.1
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
0112:  MOVFF  2A,28
0116:  MOVFF  2B,29
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
011A:  BCF    F9E.0
011C:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0A7C:  DECFSZ xAA,W
0A7E:  BRA    0A94
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0A80:  MOVLW  02
0A82:  MOVWF  xBB
0A84:  MOVFF  AB,BC
0A88:  RCALL  086A
0A8A:  MOVLW  20
0A8C:  MOVWF  FF6
0A8E:  MOVLW  01
0A90:  MOVWF  FF7
0A92:  RCALL  092A
....................    if(x==2) 
0A94:  MOVF   xAA,W
0A96:  SUBLW  02
0A98:  BNZ   0AAE
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0A9A:  MOVLW  02
0A9C:  MOVWF  xBB
0A9E:  MOVFF  AB,BC
0AA2:  RCALL  086A
0AA4:  MOVLW  34
0AA6:  MOVWF  FF6
0AA8:  MOVLW  01
0AAA:  MOVWF  FF7
0AAC:  RCALL  092A
....................    if(x==3) 
0AAE:  MOVF   xAA,W
0AB0:  SUBLW  03
0AB2:  BNZ   0AC8
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0AB4:  MOVLW  02
0AB6:  MOVWF  xBB
0AB8:  MOVFF  AB,BC
0ABC:  RCALL  086A
0ABE:  MOVLW  48
0AC0:  MOVWF  FF6
0AC2:  MOVLW  01
0AC4:  MOVWF  FF7
0AC6:  RCALL  092A
....................    if(x==4) 
0AC8:  MOVF   xAA,W
0ACA:  SUBLW  04
0ACC:  BNZ   0AE2
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0ACE:  MOVLW  02
0AD0:  MOVWF  xBB
0AD2:  MOVFF  AB,BC
0AD6:  RCALL  086A
0AD8:  MOVLW  5C
0ADA:  MOVWF  FF6
0ADC:  MOVLW  01
0ADE:  MOVWF  FF7
0AE0:  RCALL  092A
....................     
....................    if(x==5) 
0AE2:  MOVF   xAA,W
0AE4:  SUBLW  05
0AE6:  BNZ   0B18
....................    {if(estadoalarma==0) 
0AE8:  BTFSC  18.4
0AEA:  BRA    0B00
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0AEC:  MOVLW  02
0AEE:  MOVWF  xBB
0AF0:  MOVFF  AB,BC
0AF4:  RCALL  086A
0AF6:  MOVLW  70
0AF8:  MOVWF  FF6
0AFA:  MOVLW  01
0AFC:  MOVWF  FF7
0AFE:  RCALL  092A
....................    if(estadoalarma==1) 
0B00:  BTFSS  18.4
0B02:  BRA    0B18
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0B04:  MOVLW  02
0B06:  MOVWF  xBB
0B08:  MOVFF  AB,BC
0B0C:  RCALL  086A
0B0E:  MOVLW  84
0B10:  MOVWF  FF6
0B12:  MOVLW  01
0B14:  MOVWF  FF7
0B16:  RCALL  092A
....................    } 
.................... } 
0B18:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
18B6:  MOVF   xA9,F
18B8:  BNZ   18C0
....................    { 
....................       Motor_L1_off; 
18BA:  BCF    F8C.3
18BC:  BCF    F95.3
....................    } 
....................    else 
18BE:  BRA    18C4
....................    { 
....................       Motor_L1_on; 
18C0:  BSF    F8C.3
18C2:  BCF    F95.3
....................    } 
.................... } 
18C4:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
0818:  RLCF   xAE,W
081A:  MOVWF  00
081C:  RLCF   00,F
081E:  MOVLW  FC
0820:  ANDWF  00,F
0822:  MOVFF  00,01
0826:  MOVF   FC2,W
0828:  ANDLW  C3
082A:  IORWF  00,W
082C:  MOVWF  FC2
082E:  MOVLW  0A
0830:  MOVWF  xBB
0832:  RCALL  06D8
0834:  BSF    FC2.1
0836:  BTFSC  FC2.1
0838:  BRA    0836
083A:  MOVFF  FC4,03
083E:  MOVFF  FC3,C1
0842:  MOVFF  FC4,C2
0846:  RCALL  07E2
0848:  MOVFF  03,B2
084C:  MOVFF  02,B1
0850:  MOVFF  01,B0
0854:  MOVFF  00,AF
0858:  MOVFF  AF,00
085C:  MOVFF  B0,01
0860:  MOVFF  B1,02
0864:  MOVFF  B2,03
.................... } 
0868:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
106E:  CLRF   xAD
1070:  CLRF   xAC
1072:  CLRF   xAB
1074:  CLRF   xAA
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
1076:  CLRF   xAE
1078:  CALL   0818
107C:  MOVFF  03,98
1080:  MOVFF  02,97
1084:  MOVFF  01,96
1088:  MOVFF  00,95
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
108C:  MOVFF  98,C0
1090:  MOVFF  97,BF
1094:  MOVFF  96,BE
1098:  MOVFF  95,BD
109C:  MOVFF  A8,C4
10A0:  MOVFF  A7,C3
10A4:  MOVFF  A6,C2
10A8:  MOVFF  A5,C1
10AC:  RCALL  0C34
10AE:  MOVFF  00,AE
10B2:  MOVFF  01,AF
10B6:  MOVFF  02,B0
10BA:  MOVFF  03,B1
10BE:  BSF    FD8.1
10C0:  MOVFF  03,C4
10C4:  MOVFF  02,C3
10C8:  MOVFF  01,C2
10CC:  MOVFF  00,C1
10D0:  CLRF   xC8
10D2:  CLRF   xC7
10D4:  CLRF   xC6
10D6:  MOVLW  7F
10D8:  MOVWF  xC5
10DA:  RCALL  0D8E
10DC:  MOVFF  03,9C
10E0:  MOVFF  02,9B
10E4:  MOVFF  01,9A
10E8:  MOVFF  00,99
....................     
....................    if(Presion<0.0) 
10EC:  MOVFF  9C,C0
10F0:  MOVFF  9B,BF
10F4:  MOVFF  9A,BE
10F8:  MOVFF  99,BD
10FC:  CLRF   xC4
10FE:  CLRF   xC3
1100:  CLRF   xC2
1102:  CLRF   xC1
1104:  RCALL  0FF8
1106:  BNC   1110
....................    { 
....................       Presion=0.0; 
1108:  CLRF   x9C
110A:  CLRF   x9B
110C:  CLRF   x9A
110E:  CLRF   x99
....................    } 
....................  
....................    if(r>media-1) 
1110:  MOVLW  01
1112:  SUBWF  xA9,W
1114:  SUBWF  2C,W
1116:  BZ    111C
1118:  BNC   111C
....................    {r=0;} 
111A:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
111C:  MOVF   2C,W
111E:  MULLW  04
1120:  MOVF   FF3,W
1122:  CLRF   03
1124:  ADDLW  45
1126:  MOVWF  FE9
1128:  MOVLW  00
112A:  ADDWFC 03,W
112C:  MOVWF  FEA
112E:  MOVFF  99,FEF
1132:  MOVFF  9A,FEC
1136:  MOVFF  9B,FEC
113A:  MOVFF  9C,FEC
113E:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1140:  CLRF   2D
1142:  MOVLW  01
1144:  SUBWF  xA9,W
1146:  SUBWF  2D,W
1148:  BZ    114C
114A:  BC    11B6
....................    { 
....................       promediopresion+=PromPresion[q]; 
114C:  MOVF   2D,W
114E:  MULLW  04
1150:  MOVF   FF3,W
1152:  CLRF   03
1154:  ADDLW  45
1156:  MOVWF  FE9
1158:  MOVLW  00
115A:  ADDWFC 03,W
115C:  MOVWF  FEA
115E:  MOVFF  FEF,00
1162:  MOVFF  FEC,01
1166:  MOVFF  FEC,02
116A:  MOVFF  FEC,03
116E:  MOVFF  FEA,AF
1172:  MOVFF  FE9,AE
1176:  BCF    FD8.1
1178:  MOVFF  AD,C4
117C:  MOVFF  AC,C3
1180:  MOVFF  AB,C2
1184:  MOVFF  AA,C1
1188:  MOVFF  03,C8
118C:  MOVFF  02,C7
1190:  MOVFF  01,C6
1194:  MOVFF  00,C5
1198:  RCALL  0D8E
119A:  MOVFF  AF,FEA
119E:  MOVFF  AE,FE9
11A2:  MOVFF  03,AD
11A6:  MOVFF  02,AC
11AA:  MOVFF  01,AB
11AE:  MOVFF  00,AA
....................    }  
11B2:  INCF   2D,F
11B4:  BRA    1142
....................    promediopresion=promediopresion/media;    
11B6:  CLRF   xC2
11B8:  MOVFF  A9,C1
11BC:  CALL   07E2
11C0:  MOVFF  AD,C0
11C4:  MOVFF  AC,BF
11C8:  MOVFF  AB,BE
11CC:  MOVFF  AA,BD
11D0:  MOVFF  03,C4
11D4:  MOVFF  02,C3
11D8:  MOVFF  01,C2
11DC:  MOVFF  00,C1
11E0:  RCALL  0C34
11E2:  MOVFF  03,AD
11E6:  MOVFF  02,AC
11EA:  MOVFF  01,AB
11EE:  MOVFF  00,AA
....................     
....................    return promediopresion; 
11F2:  MOVFF  AA,00
11F6:  MOVFF  AB,01
11FA:  MOVFF  AC,02
11FE:  MOVFF  AD,03
.................... } 
1202:  RETLW  00
....................  
.................... void Limita(void){ 
....................     
....................    if(Contrasena[0]>9) 
*
094A:  MOVF   3A,W
094C:  SUBLW  09
094E:  BC    0952
....................       Contrasena[0]=0; 
0950:  CLRF   3A
....................    if(Contrasena[1]>9) 
0952:  MOVF   3B,W
0954:  SUBLW  09
0956:  BC    095A
....................       Contrasena[1]=0; 
0958:  CLRF   3B
....................    if(Contrasena[2]>9) 
095A:  MOVF   3C,W
095C:  SUBLW  09
095E:  BC    0962
....................       Contrasena[2]=0; 
0960:  CLRF   3C
....................    if(Contrasena[3]>9) 
0962:  MOVF   3D,W
0964:  SUBLW  09
0966:  BC    096A
....................       Contrasena[3]=0; 
0968:  CLRF   3D
....................    /*if(tempo_minutos>60) 
....................       tempo_minutos=0; 
....................    if(tempo_segundos) 
....................       tempo_segundos=0; 
....................    if(segundos>60) 
....................       segundos=0; 
....................    if(minutos>60) 
....................       minutos=0;*/  
.................... } 
096A:  GOTO   1C58 (RETURN)
.................... void main () 
.................... { 
*
18C6:  CLRF   FF8
18C8:  BCF    FD0.7
18CA:  BSF    07.7
18CC:  CLRF   FEA
18CE:  CLRF   FE9
18D0:  BCF    17.0
18D2:  BCF    17.1
18D4:  BCF    17.2
18D6:  BCF    17.3
18D8:  BCF    17.4
18DA:  BCF    17.5
18DC:  BCF    17.6
18DE:  BCF    17.7
18E0:  BCF    18.0
18E2:  BCF    18.1
18E4:  BCF    18.2
18E6:  BCF    18.3
18E8:  BCF    18.4
18EA:  CLRF   19
18EC:  MOVLW  06
18EE:  MOVWF  1A
18F0:  MOVLW  02
18F2:  MOVWF  1B
18F4:  MOVLW  0B
18F6:  MOVWF  1C
18F8:  MOVLW  02
18FA:  MOVWF  1D
18FC:  MOVLW  03
18FE:  MOVWF  1E
1900:  MOVLW  02
1902:  MOVWF  1F
1904:  MOVWF  20
1906:  MOVLW  04
1908:  MOVWF  21
190A:  CLRF   22
190C:  CLRF   23
190E:  CLRF   24
1910:  CLRF   25
1912:  CLRF   26
1914:  CLRF   27
1916:  CLRF   28
1918:  CLRF   29
191A:  CLRF   2A
191C:  CLRF   2B
191E:  CLRF   2C
1920:  CLRF   2D
1922:  CLRF   2E
1924:  MOVLW  01
1926:  MOVWF  2F
1928:  CLRF   30
192A:  CLRF   31
192C:  CLRF   32
192E:  CLRF   3E
1930:  CLRF   42
1932:  CLRF   41
1934:  CLRF   44
1936:  CLRF   43
1938:  CLRF   x98
193A:  CLRF   x97
193C:  CLRF   x96
193E:  CLRF   x95
1940:  CLRF   x9C
1942:  CLRF   x9B
1944:  CLRF   x9A
1946:  CLRF   x99
1948:  CLRF   xA0
194A:  CLRF   x9F
194C:  CLRF   x9E
194E:  CLRF   x9D
1950:  CLRF   xA4
1952:  CLRF   xA3
1954:  CLRF   xA2
1956:  CLRF   xA1
1958:  CLRF   xA8
195A:  CLRF   xA7
195C:  CLRF   xA6
195E:  MOVLW  80
1960:  MOVWF  xA5
1962:  MOVF   FC1,W
1964:  ANDLW  C0
1966:  IORLW  0F
1968:  MOVWF  FC1
196A:  MOVLW  07
196C:  MOVWF  FB4
196E:  MOVLW  3E
1970:  MOVWF  33
1972:  MOVLW  20
1974:  MOVWF  34
1976:  MOVLW  5E
1978:  MOVWF  35
197A:  CLRF   36
197C:  CLRF   37
197E:  CLRF   38
1980:  CLRF   39
1982:  CLRF   3A
1984:  CLRF   3B
1986:  CLRF   3C
1988:  CLRF   3D
198A:  CLRF   45
198C:  CLRF   46
198E:  CLRF   47
1990:  CLRF   48
1992:  CLRF   49
1994:  CLRF   4A
1996:  CLRF   4B
1998:  CLRF   4C
199A:  CLRF   4D
199C:  CLRF   4E
199E:  CLRF   4F
19A0:  CLRF   50
19A2:  CLRF   51
19A4:  CLRF   52
19A6:  CLRF   53
19A8:  CLRF   54
19AA:  CLRF   55
19AC:  CLRF   56
19AE:  CLRF   57
19B0:  CLRF   58
19B2:  CLRF   59
19B4:  CLRF   5A
19B6:  CLRF   5B
19B8:  CLRF   5C
19BA:  CLRF   5D
19BC:  CLRF   5E
19BE:  CLRF   5F
19C0:  CLRF   x60
19C2:  CLRF   x61
19C4:  CLRF   x62
19C6:  CLRF   x63
19C8:  CLRF   x64
19CA:  CLRF   x65
19CC:  CLRF   x66
19CE:  CLRF   x67
19D0:  CLRF   x68
19D2:  CLRF   x69
19D4:  CLRF   x6A
19D6:  CLRF   x6B
19D8:  CLRF   x6C
19DA:  CLRF   x6D
19DC:  CLRF   x6E
19DE:  CLRF   x6F
19E0:  CLRF   x70
19E2:  CLRF   x71
19E4:  CLRF   x72
19E6:  CLRF   x73
19E8:  CLRF   x74
19EA:  CLRF   x75
19EC:  CLRF   x76
19EE:  CLRF   x77
19F0:  CLRF   x78
19F2:  CLRF   x79
19F4:  CLRF   x7A
19F6:  CLRF   x7B
19F8:  CLRF   x7C
19FA:  CLRF   x7D
19FC:  CLRF   x7E
19FE:  CLRF   x7F
1A00:  CLRF   x80
1A02:  CLRF   x81
1A04:  CLRF   x82
1A06:  CLRF   x83
1A08:  CLRF   x84
1A0A:  CLRF   x85
1A0C:  CLRF   x86
1A0E:  CLRF   x87
1A10:  CLRF   x88
1A12:  CLRF   x89
1A14:  CLRF   x8A
1A16:  CLRF   x8B
1A18:  CLRF   x8C
1A1A:  CLRF   x8D
1A1C:  CLRF   x8E
1A1E:  CLRF   x8F
1A20:  CLRF   x90
1A22:  CLRF   x91
1A24:  CLRF   x92
1A26:  CLRF   x93
1A28:  CLRF   x94
....................    lcd_init(); 
1A2A:  CALL   078C
....................    set_tris_a(0XFF); 
1A2E:  MOVLW  FF
1A30:  MOVWF  F92
....................    set_tris_e(0XFF); 
1A32:  MOVWF  F96
....................    set_tris_d(0X00); 
1A34:  MOVLW  00
1A36:  MOVWF  F95
....................    output_d(0); 
1A38:  CLRF   F95
1A3A:  CLRF   F8C
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1A3C:  MOVLW  85
1A3E:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1A40:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
1A42:  MOVF   FC1,W
1A44:  ANDLW  C0
1A46:  IORLW  0E
1A48:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1A4A:  BCF    FC0.0
1A4C:  BSF    FC0.1
1A4E:  BCF    FC0.2
1A50:  BSF    FC0.7
1A52:  BSF    FC2.0
....................    enable_interrupts(global); 
1A54:  MOVLW  C0
1A56:  IORWF  FF2,F
....................    sensores(0); 
1A58:  CLRF   xAE
1A5A:  CALL   0818
....................    lcd_gotoxy(1,1); 
1A5E:  MOVLW  01
1A60:  MOVWF  xBB
1A62:  MOVWF  xBC
1A64:  CALL   086A
....................    printf(lcd_putc," CABINA  DE   FLUJO "); 
1A68:  MOVLW  98
1A6A:  MOVWF  FF6
1A6C:  MOVLW  01
1A6E:  MOVWF  FF7
1A70:  CALL   092A
....................    lcd_gotoxy(1,2); 
1A74:  MOVLW  01
1A76:  MOVWF  xBB
1A78:  MOVLW  02
1A7A:  MOVWF  xBC
1A7C:  CALL   086A
....................    printf(lcd_putc,"  LAMINAR  VERTICAL "); 
1A80:  MOVLW  AE
1A82:  MOVWF  FF6
1A84:  MOVLW  01
1A86:  MOVWF  FF7
1A88:  CALL   092A
....................    lcd_gotoxy(1,3); 
1A8C:  MOVLW  01
1A8E:  MOVWF  xBB
1A90:  MOVLW  03
1A92:  MOVWF  xBC
1A94:  CALL   086A
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1A98:  MOVLW  C4
1A9A:  MOVWF  FF6
1A9C:  MOVLW  01
1A9E:  MOVWF  FF7
1AA0:  CALL   092A
....................    lcd_gotoxy(1,4); 
1AA4:  MOVLW  01
1AA6:  MOVWF  xBB
1AA8:  MOVLW  04
1AAA:  MOVWF  xBC
1AAC:  CALL   086A
....................    printf(lcd_putc,"   REF:  JPCFLV120  "); 
1AB0:  MOVLW  DA
1AB2:  MOVWF  FF6
1AB4:  MOVLW  01
1AB6:  MOVWF  FF7
1AB8:  CALL   092A
....................    delay_ms(2000); 
1ABC:  MOVLW  08
1ABE:  MOVWF  xA9
1AC0:  MOVLW  FA
1AC2:  MOVWF  xBB
1AC4:  CALL   06D8
1AC8:  DECFSZ xA9,F
1ACA:  BRA    1AC0
....................    printf(lcd_putc,"\f");    
1ACC:  MOVLW  0C
1ACE:  MOVWF  xBA
1AD0:  CALL   08CC
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1AD4:  MOVFF  FF2,A9
1AD8:  BCF    FF2.7
1ADA:  CLRF   FA9
1ADC:  BCF    FA6.6
1ADE:  BCF    FA6.7
1AE0:  BSF    FA6.0
1AE2:  MOVF   FA8,W
1AE4:  BTFSC  xA9.7
1AE6:  BSF    FF2.7
1AE8:  MOVWF  3A
1AEA:  MOVLW  14
1AEC:  MOVWF  xBB
1AEE:  CALL   06D8
1AF2:  MOVFF  FF2,A9
1AF6:  BCF    FF2.7
1AF8:  MOVLW  01
1AFA:  MOVWF  FA9
1AFC:  BCF    FA6.6
1AFE:  BCF    FA6.7
1B00:  BSF    FA6.0
1B02:  MOVF   FA8,W
1B04:  BTFSC  xA9.7
1B06:  BSF    FF2.7
1B08:  MOVWF  3B
1B0A:  MOVLW  14
1B0C:  MOVWF  xBB
1B0E:  CALL   06D8
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1B12:  MOVFF  FF2,A9
1B16:  BCF    FF2.7
1B18:  MOVLW  02
1B1A:  MOVWF  FA9
1B1C:  BCF    FA6.6
1B1E:  BCF    FA6.7
1B20:  BSF    FA6.0
1B22:  MOVF   FA8,W
1B24:  BTFSC  xA9.7
1B26:  BSF    FF2.7
1B28:  MOVWF  3C
1B2A:  MOVLW  14
1B2C:  MOVWF  xBB
1B2E:  CALL   06D8
1B32:  MOVFF  FF2,A9
1B36:  BCF    FF2.7
1B38:  MOVLW  03
1B3A:  MOVWF  FA9
1B3C:  BCF    FA6.6
1B3E:  BCF    FA6.7
1B40:  BSF    FA6.0
1B42:  MOVF   FA8,W
1B44:  BTFSC  xA9.7
1B46:  BSF    FF2.7
1B48:  MOVWF  3D
1B4A:  MOVLW  14
1B4C:  MOVWF  xBB
1B4E:  CALL   06D8
....................    estadoalarma=read_eeprom(5); 
1B52:  MOVFF  FF2,A9
1B56:  BCF    FF2.7
1B58:  MOVLW  05
1B5A:  MOVWF  FA9
1B5C:  BCF    FA6.6
1B5E:  BCF    FA6.7
1B60:  BSF    FA6.0
1B62:  MOVF   FA8,W
1B64:  BTFSC  xA9.7
1B66:  BSF    FF2.7
1B68:  MOVWF  01
1B6A:  BCF    18.4
1B6C:  BTFSC  01.0
1B6E:  BSF    18.4
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(30); 
1B70:  MOVFF  FF2,A9
1B74:  BCF    FF2.7
1B76:  MOVLW  14
1B78:  MOVWF  FA9
1B7A:  BCF    FA6.6
1B7C:  BCF    FA6.7
1B7E:  BSF    FA6.0
1B80:  MOVF   FA8,W
1B82:  BTFSC  xA9.7
1B84:  BSF    FF2.7
1B86:  MOVWF  28
1B88:  MOVFF  FF2,A9
1B8C:  BCF    FF2.7
1B8E:  MOVLW  1E
1B90:  MOVWF  FA9
1B92:  BCF    FA6.6
1B94:  BCF    FA6.7
1B96:  BSF    FA6.0
1B98:  MOVF   FA8,W
1B9A:  BTFSC  xA9.7
1B9C:  BSF    FF2.7
1B9E:  MOVWF  29
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horasL=read_eeprom(52);horasH=read_eeprom(53);  
1BA0:  MOVFF  FF2,A9
1BA4:  BCF    FF2.7
1BA6:  MOVLW  32
1BA8:  MOVWF  FA9
1BAA:  BCF    FA6.6
1BAC:  BCF    FA6.7
1BAE:  BSF    FA6.0
1BB0:  MOVF   FA8,W
1BB2:  BTFSC  xA9.7
1BB4:  BSF    FF2.7
1BB6:  MOVWF  22
1BB8:  MOVFF  FF2,A9
1BBC:  BCF    FF2.7
1BBE:  MOVLW  33
1BC0:  MOVWF  FA9
1BC2:  BCF    FA6.6
1BC4:  BCF    FA6.7
1BC6:  BSF    FA6.0
1BC8:  MOVF   FA8,W
1BCA:  BTFSC  xA9.7
1BCC:  BSF    FF2.7
1BCE:  MOVWF  23
1BD0:  MOVFF  FF2,A9
1BD4:  BCF    FF2.7
1BD6:  MOVLW  34
1BD8:  MOVWF  FA9
1BDA:  BCF    FA6.6
1BDC:  BCF    FA6.7
1BDE:  BSF    FA6.0
1BE0:  MOVF   FA8,W
1BE2:  BTFSC  xA9.7
1BE4:  BSF    FF2.7
1BE6:  MOVWF  24
1BE8:  MOVFF  FF2,A9
1BEC:  BCF    FF2.7
1BEE:  MOVLW  35
1BF0:  MOVWF  FA9
1BF2:  BCF    FA6.6
1BF4:  BCF    FA6.7
1BF6:  BSF    FA6.0
1BF8:  MOVF   FA8,W
1BFA:  BTFSC  xA9.7
1BFC:  BSF    FF2.7
1BFE:  MOVWF  25
....................     
....................    G_l=read_eeprom(60); 
1C00:  MOVFF  FF2,A9
1C04:  BCF    FF2.7
1C06:  MOVLW  3C
1C08:  MOVWF  FA9
1C0A:  BCF    FA6.6
1C0C:  BCF    FA6.7
1C0E:  BSF    FA6.0
1C10:  MOVF   FA8,W
1C12:  BTFSC  xA9.7
1C14:  BSF    FF2.7
1C16:  MOVWF  26
....................    G_h=read_eeprom(61); 
1C18:  MOVFF  FF2,A9
1C1C:  BCF    FF2.7
1C1E:  MOVLW  3D
1C20:  MOVWF  FA9
1C22:  BCF    FA6.6
1C24:  BCF    FA6.7
1C26:  BSF    FA6.0
1C28:  MOVF   FA8,W
1C2A:  BTFSC  xA9.7
1C2C:  BSF    FF2.7
1C2E:  MOVWF  27
....................    G16=make16(G_h,G_l); 
1C30:  MOVFF  27,44
1C34:  MOVFF  26,43
....................    G=G16; 
1C38:  MOVFF  44,C2
1C3C:  MOVFF  43,C1
1C40:  CALL   07E2
1C44:  MOVFF  03,A8
1C48:  MOVFF  02,A7
1C4C:  MOVFF  01,A6
1C50:  MOVFF  00,A5
....................  
....................    Limita(); 
1C54:  GOTO   094A
....................    horas=make16(horasH,horasL); 
1C58:  MOVFF  25,42
1C5C:  MOVFF  24,41
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1C60:  MOVFF  28,2A
1C64:  MOVFF  29,2B
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1C68:  MOVF   19,F
1C6A:  BTFSS  FD8.2
1C6C:  BRA    201E
....................    lcd_gotoxy(1,1); 
1C6E:  MOVLW  01
1C70:  MOVWF  xBB
1C72:  MOVWF  xBC
1C74:  CALL   086A
....................    printf(lcd_putc,"     Ingrese        "); 
1C78:  MOVLW  F0
1C7A:  MOVWF  FF6
1C7C:  MOVLW  01
1C7E:  MOVWF  FF7
1C80:  CALL   092A
....................    lcd_gotoxy(1,2); 
1C84:  MOVLW  01
1C86:  MOVWF  xBB
1C88:  MOVLW  02
1C8A:  MOVWF  xBC
1C8C:  CALL   086A
....................    printf(lcd_putc,"    Contraseña      "); 
1C90:  MOVLW  06
1C92:  MOVWF  FF6
1C94:  MOVLW  02
1C96:  MOVWF  FF7
1C98:  CALL   092A
....................    lcd_gotoxy(1,3); 
1C9C:  MOVLW  01
1C9E:  MOVWF  xBB
1CA0:  MOVLW  03
1CA2:  MOVWF  xBC
1CA4:  CALL   086A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1CA8:  MOVLW  1C
1CAA:  MOVWF  FF6
1CAC:  MOVLW  02
1CAE:  MOVWF  FF7
1CB0:  MOVLW  0A
1CB2:  MOVWF  xAD
1CB4:  CALL   096E
1CB8:  MOVFF  36,A9
1CBC:  MOVLW  1F
1CBE:  MOVWF  xAA
1CC0:  CALL   09B4
1CC4:  MOVFF  37,A9
1CC8:  MOVLW  1F
1CCA:  MOVWF  xAA
1CCC:  CALL   09B4
1CD0:  MOVFF  38,A9
1CD4:  MOVLW  1F
1CD6:  MOVWF  xAA
1CD8:  CALL   09B4
1CDC:  MOVFF  39,A9
1CE0:  MOVLW  1F
1CE2:  MOVWF  xAA
1CE4:  CALL   09B4
1CE8:  MOVLW  20
1CEA:  MOVWF  xBA
1CEC:  CALL   08CC
1CF0:  MOVLW  20
1CF2:  MOVWF  xBA
1CF4:  CALL   08CC
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
1CF8:  BSF    F92.5
1CFA:  BTFSS  F80.5
1CFC:  BRA    1D20
....................       {  if(Flanco == 0)  
1CFE:  BTFSC  17.3
1D00:  BRA    1D1E
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1D02:  MOVLW  0B
1D04:  SUBWF  1C,W
1D06:  CLRF   03
1D08:  ADDLW  36
1D0A:  MOVWF  FE9
1D0C:  MOVLW  00
1D0E:  ADDWFC 03,W
1D10:  MOVWF  FEA
1D12:  INCF   FEF,F
1D14:  BSF    17.3
1D16:  MOVLW  1E
1D18:  MOVWF  xBB
1D1A:  CALL   06D8
....................          else 
1D1E:  BRA    1D22
....................             {Flanco = 0;} 
1D20:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1D22:  BSF    F96.0
1D24:  BTFSS  F84.0
1D26:  BRA    1D4A
....................       {  if(Flanco2 == 0)  
1D28:  BTFSC  17.5
1D2A:  BRA    1D48
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1D2C:  MOVLW  0B
1D2E:  SUBWF  1C,W
1D30:  CLRF   03
1D32:  ADDLW  36
1D34:  MOVWF  FE9
1D36:  MOVLW  00
1D38:  ADDWFC 03,W
1D3A:  MOVWF  FEA
1D3C:  DECF   FEF,F
1D3E:  BSF    17.5
1D40:  MOVLW  1E
1D42:  MOVWF  xBB
1D44:  CALL   06D8
....................          else 
1D48:  BRA    1D4C
....................             {Flanco2 = 0;} 
1D4A:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1D4C:  BSF    F96.1
1D4E:  BTFSS  F84.1
1D50:  BRA    1D6C
....................       {  if(Flanco1 == 0)  
1D52:  BTFSC  17.4
1D54:  BRA    1D6A
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1D56:  BSF    17.4
1D58:  INCF   1C,F
1D5A:  MOVLW  1E
1D5C:  MOVWF  xBB
1D5E:  CALL   06D8
1D62:  MOVLW  0C
1D64:  MOVWF  xBA
1D66:  CALL   08CC
....................          else 
1D6A:  BRA    1D6E
....................             {Flanco1 = 0;}    
1D6C:  BCF    17.4
....................              
....................        if(IZQU)// Si Oprime izquierda 
1D6E:  BSF    F96.2
1D70:  BTFSS  F84.2
1D72:  BRA    1D96
....................        { 
....................          delay_ms(150); 
1D74:  MOVLW  96
1D76:  MOVWF  xBB
1D78:  CALL   06D8
....................          if(Flanco3 == 0) 
1D7C:  BTFSC  17.6
1D7E:  BRA    1D94
....................          { 
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f"); 
1D80:  BSF    17.6
1D82:  DECF   1C,F
1D84:  MOVLW  1E
1D86:  MOVWF  xBB
1D88:  CALL   06D8
1D8C:  MOVLW  0C
1D8E:  MOVWF  xBA
1D90:  CALL   08CC
....................          } 
....................        } 
....................        else 
1D94:  BRA    1D98
....................        { 
....................          Flanco3 = 0; 
1D96:  BCF    17.6
....................        } 
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1D98:  MOVLW  0B
1D9A:  SUBWF  1C,W
1D9C:  CLRF   03
1D9E:  ADDLW  36
1DA0:  MOVWF  FE9
1DA2:  MOVLW  00
1DA4:  ADDWFC 03,W
1DA6:  MOVWF  FEA
1DA8:  BTFSC  FEF.7
1DAA:  BRA    1DAE
1DAC:  BRA    1DC2
....................        {clave[unidad-11]=9;} 
1DAE:  MOVLW  0B
1DB0:  SUBWF  1C,W
1DB2:  CLRF   03
1DB4:  ADDLW  36
1DB6:  MOVWF  FE9
1DB8:  MOVLW  00
1DBA:  ADDWFC 03,W
1DBC:  MOVWF  FEA
1DBE:  MOVLW  09
1DC0:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1DC2:  MOVLW  0B
1DC4:  SUBWF  1C,W
1DC6:  CLRF   03
1DC8:  ADDLW  36
1DCA:  MOVWF  FE9
1DCC:  MOVLW  00
1DCE:  ADDWFC 03,W
1DD0:  MOVWF  FEA
1DD2:  BTFSC  FEF.7
1DD4:  BRA    1DEE
1DD6:  MOVF   FEF,W
1DD8:  SUBLW  09
1DDA:  BC    1DEE
....................        {clave[unidad-11]=0;} 
1DDC:  MOVLW  0B
1DDE:  SUBWF  1C,W
1DE0:  CLRF   03
1DE2:  ADDLW  36
1DE4:  MOVWF  FE9
1DE6:  MOVLW  00
1DE8:  ADDWFC 03,W
1DEA:  MOVWF  FEA
1DEC:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1DEE:  MOVF   1C,W
1DF0:  SUBLW  0A
1DF2:  BNC   1DF8
....................        {unidad=11;} 
1DF4:  MOVLW  0B
1DF6:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1DF8:  MOVFF  1C,BB
1DFC:  MOVLW  04
1DFE:  MOVWF  xBC
1E00:  CALL   086A
....................        lcd_putc(t[2]); 
1E04:  MOVFF  35,BA
1E08:  CALL   08CC
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1E0C:  MOVF   1C,W
1E0E:  SUBLW  0E
1E10:  BTFSC  FD8.0
1E12:  BRA    1FFA
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1E14:  MOVF   36,W
1E16:  SUBLW  03
1E18:  BNZ   1EF4
1E1A:  MOVF   37,W
1E1C:  SUBLW  08
1E1E:  BNZ   1EF4
1E20:  MOVF   38,W
1E22:  SUBLW  09
1E24:  BNZ   1EF4
1E26:  MOVF   39,W
1E28:  SUBLW  02
1E2A:  BNZ   1EF4
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1E2C:  CLRF   FA9
1E2E:  CLRF   FA8
1E30:  BCF    FA6.6
1E32:  BCF    FA6.7
1E34:  BSF    FA6.2
1E36:  MOVF   FF2,W
1E38:  MOVWF  00
1E3A:  BCF    FF2.7
1E3C:  MOVLB  F
1E3E:  MOVLW  55
1E40:  MOVWF  FA7
1E42:  MOVLW  AA
1E44:  MOVWF  FA7
1E46:  BSF    FA6.1
1E48:  BTFSC  FA6.1
1E4A:  BRA    1E48
1E4C:  BCF    FA6.2
1E4E:  MOVF   00,W
1E50:  IORWF  FF2,F
1E52:  MOVLW  14
1E54:  MOVLB  0
1E56:  MOVWF  xBB
1E58:  CALL   06D8
1E5C:  MOVLW  01
1E5E:  MOVWF  FA9
1E60:  CLRF   FA8
1E62:  BCF    FA6.6
1E64:  BCF    FA6.7
1E66:  BSF    FA6.2
1E68:  MOVF   FF2,W
1E6A:  MOVWF  00
1E6C:  BCF    FF2.7
1E6E:  MOVLB  F
1E70:  MOVLW  55
1E72:  MOVWF  FA7
1E74:  MOVLW  AA
1E76:  MOVWF  FA7
1E78:  BSF    FA6.1
1E7A:  BTFSC  FA6.1
1E7C:  BRA    1E7A
1E7E:  BCF    FA6.2
1E80:  MOVF   00,W
1E82:  IORWF  FF2,F
1E84:  MOVLW  14
1E86:  MOVLB  0
1E88:  MOVWF  xBB
1E8A:  CALL   06D8
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1E8E:  MOVLW  02
1E90:  MOVWF  FA9
1E92:  CLRF   FA8
1E94:  BCF    FA6.6
1E96:  BCF    FA6.7
1E98:  BSF    FA6.2
1E9A:  MOVF   FF2,W
1E9C:  MOVWF  00
1E9E:  BCF    FF2.7
1EA0:  MOVLB  F
1EA2:  MOVLW  55
1EA4:  MOVWF  FA7
1EA6:  MOVLW  AA
1EA8:  MOVWF  FA7
1EAA:  BSF    FA6.1
1EAC:  BTFSC  FA6.1
1EAE:  BRA    1EAC
1EB0:  BCF    FA6.2
1EB2:  MOVF   00,W
1EB4:  IORWF  FF2,F
1EB6:  MOVLW  14
1EB8:  MOVLB  0
1EBA:  MOVWF  xBB
1EBC:  CALL   06D8
1EC0:  MOVLW  03
1EC2:  MOVWF  FA9
1EC4:  CLRF   FA8
1EC6:  BCF    FA6.6
1EC8:  BCF    FA6.7
1ECA:  BSF    FA6.2
1ECC:  MOVF   FF2,W
1ECE:  MOVWF  00
1ED0:  BCF    FF2.7
1ED2:  MOVLB  F
1ED4:  MOVLW  55
1ED6:  MOVWF  FA7
1ED8:  MOVLW  AA
1EDA:  MOVWF  FA7
1EDC:  BSF    FA6.1
1EDE:  BTFSC  FA6.1
1EE0:  BRA    1EDE
1EE2:  BCF    FA6.2
1EE4:  MOVF   00,W
1EE6:  IORWF  FF2,F
1EE8:  MOVLW  14
1EEA:  MOVLB  0
1EEC:  MOVWF  xBB
1EEE:  CALL   06D8
....................              reset_cpu();} 
1EF2:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1EF4:  MOVF   3A,W
1EF6:  SUBWF  36,W
1EF8:  BNZ   1F8C
1EFA:  MOVF   3B,W
1EFC:  SUBWF  37,W
1EFE:  BNZ   1F8C
1F00:  MOVF   3C,W
1F02:  SUBWF  38,W
1F04:  BNZ   1F8C
1F06:  MOVF   3D,W
1F08:  SUBWF  39,W
1F0A:  BNZ   1F8C
....................             {lcd_gotoxy(1,1); 
1F0C:  MOVLW  01
1F0E:  MOVWF  xBB
1F10:  MOVWF  xBC
1F12:  CALL   086A
....................             printf(lcd_putc,"                   "); 
1F16:  MOVLW  32
1F18:  MOVWF  FF6
1F1A:  MOVLW  02
1F1C:  MOVWF  FF7
1F1E:  CALL   092A
....................             lcd_gotoxy(1,2); 
1F22:  MOVLW  01
1F24:  MOVWF  xBB
1F26:  MOVLW  02
1F28:  MOVWF  xBC
1F2A:  CALL   086A
....................             printf(lcd_putc,"     Contraseña    "); 
1F2E:  MOVLW  46
1F30:  MOVWF  FF6
1F32:  MOVLW  02
1F34:  MOVWF  FF7
1F36:  CALL   092A
....................             lcd_gotoxy(1,3); 
1F3A:  MOVLW  01
1F3C:  MOVWF  xBB
1F3E:  MOVLW  03
1F40:  MOVWF  xBC
1F42:  CALL   086A
....................             printf(lcd_putc,"      Correcta     "); 
1F46:  MOVLW  5A
1F48:  MOVWF  FF6
1F4A:  MOVLW  02
1F4C:  MOVWF  FF7
1F4E:  CALL   092A
....................             lcd_gotoxy(1,4); 
1F52:  MOVLW  01
1F54:  MOVWF  xBB
1F56:  MOVLW  04
1F58:  MOVWF  xBC
1F5A:  CALL   086A
....................             printf(lcd_putc,"                   "); 
1F5E:  MOVLW  6E
1F60:  MOVWF  FF6
1F62:  MOVLW  02
1F64:  MOVWF  FF7
1F66:  CALL   092A
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");} 
1F6A:  MOVLW  04
1F6C:  MOVWF  xA9
1F6E:  MOVLW  FA
1F70:  MOVWF  xBB
1F72:  CALL   06D8
1F76:  DECFSZ xA9,F
1F78:  BRA    1F6E
1F7A:  MOVLW  32
1F7C:  MOVWF  19
1F7E:  MOVLW  0B
1F80:  MOVWF  1C
1F82:  MOVLW  0C
1F84:  MOVWF  xBA
1F86:  CALL   08CC
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1F8A:  BRA    1FFA
....................          {lcd_gotoxy(1,1); 
1F8C:  MOVLW  01
1F8E:  MOVWF  xBB
1F90:  MOVWF  xBC
1F92:  CALL   086A
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1F96:  MOVLW  01
1F98:  MOVWF  xBB
1F9A:  MOVLW  02
1F9C:  MOVWF  xBC
1F9E:  CALL   086A
....................             printf(lcd_putc,"     Contraseña    "); 
1FA2:  MOVLW  82
1FA4:  MOVWF  FF6
1FA6:  MOVLW  02
1FA8:  MOVWF  FF7
1FAA:  CALL   092A
....................             lcd_gotoxy(1,3); 
1FAE:  MOVLW  01
1FB0:  MOVWF  xBB
1FB2:  MOVLW  03
1FB4:  MOVWF  xBC
1FB6:  CALL   086A
....................             printf(lcd_putc,"     Incorrecta    "); 
1FBA:  MOVLW  96
1FBC:  MOVWF  FF6
1FBE:  MOVLW  02
1FC0:  MOVWF  FF7
1FC2:  CALL   092A
....................             lcd_gotoxy(1,4); 
1FC6:  MOVLW  01
1FC8:  MOVWF  xBB
1FCA:  MOVLW  04
1FCC:  MOVWF  xBC
1FCE:  CALL   086A
....................             printf(lcd_putc,"                   "); 
1FD2:  MOVLW  AA
1FD4:  MOVWF  FF6
1FD6:  MOVLW  02
1FD8:  MOVWF  FF7
1FDA:  CALL   092A
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
1FDE:  MOVLW  04
1FE0:  MOVWF  xA9
1FE2:  MOVLW  FA
1FE4:  MOVWF  xBB
1FE6:  CALL   06D8
1FEA:  DECFSZ xA9,F
1FEC:  BRA    1FE2
1FEE:  MOVLW  0B
1FF0:  MOVWF  1C
1FF2:  MOVLW  0C
1FF4:  MOVWF  xBA
1FF6:  CALL   08CC
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1FFA:  MOVF   1C,W
1FFC:  SUBLW  0B
1FFE:  BC    201E
2000:  MOVF   1C,W
2002:  SUBLW  0D
2004:  BNC   201E
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2006:  MOVLW  01
2008:  SUBWF  1C,W
200A:  MOVWF  xA9
200C:  MOVWF  xBB
200E:  MOVLW  04
2010:  MOVWF  xBC
2012:  CALL   086A
....................             lcd_putc(t[1]); 
2016:  MOVFF  34,BA
201A:  CALL   08CC
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
201E:  DECFSZ 19,W
2020:  BRA    2212
....................    lcd_gotoxy(1,1); 
2022:  MOVLW  01
2024:  MOVWF  xBB
2026:  MOVWF  xBC
2028:  CALL   086A
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
202C:  MOVLW  BE
202E:  MOVWF  FF6
2030:  MOVLW  02
2032:  MOVWF  FF7
2034:  CALL   092A
....................       if(paso<0) 
2038:  BTFSC  32.7
203A:  BRA    203E
203C:  BRA    2040
....................         {paso=0;} 
203E:  CLRF   32
....................          
....................       if(UP)//Si oprime hacia arriba 
2040:  BSF    F92.5
2042:  BTFSS  F80.5
2044:  BRA    2060
....................       { 
....................          if(Flanco == 0) 
2046:  BTFSC  17.3
2048:  BRA    205E
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
204A:  DECF   1F,F
204C:  DECF   1D,F
204E:  MOVLW  01
2050:  ADDWF  1D,W
2052:  MOVWF  1E
2054:  BSF    17.3
2056:  MOVLW  1E
2058:  MOVWF  xBB
205A:  CALL   06D8
....................          } 
....................       } 
....................       else 
205E:  BRA    2062
....................       { 
....................          Flanco = 0; 
2060:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2062:  BSF    F96.0
2064:  BTFSS  F84.0
2066:  BRA    2082
....................       { 
....................          if(Flanco2 == 0) 
2068:  BTFSC  17.5
206A:  BRA    2080
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
206C:  INCF   1F,F
206E:  INCF   1D,F
2070:  MOVLW  01
2072:  SUBWF  1D,W
2074:  MOVWF  1E
2076:  BSF    17.5
2078:  MOVLW  1E
207A:  MOVWF  xBB
207C:  CALL   06D8
....................          } 
....................       } 
....................       else 
2080:  BRA    2084
....................       { 
....................          Flanco2 = 0; 
2082:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
2084:  MOVF   1F,W
2086:  SUBWF  21,W
2088:  BC    209A
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
208A:  INCF   32,F
208C:  MOVFF  1F,21
2090:  MOVLW  02
2092:  SUBWF  21,W
2094:  MOVWF  20
2096:  MOVLW  04
2098:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
209A:  MOVF   20,W
209C:  SUBWF  1F,W
209E:  BC    20B0
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
20A0:  DECF   32,F
20A2:  MOVFF  1F,20
20A6:  MOVLW  02
20A8:  ADDWF  20,W
20AA:  MOVWF  21
20AC:  MOVLW  02
20AE:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
20B0:  MOVF   1F,W
20B2:  SUBWF  1A,W
20B4:  BC    20C8
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
20B6:  MOVFF  1B,1F
20BA:  MOVLW  02
20BC:  MOVWF  1D
20BE:  CLRF   32
20C0:  MOVFF  1F,20
20C4:  ADDWF  20,W
20C6:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
20C8:  MOVF   1B,W
20CA:  SUBWF  1F,W
20CC:  BC    20E4
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
20CE:  MOVFF  1A,1F
20D2:  MOVLW  04
20D4:  MOVWF  1D
20D6:  SUBWF  1A,W
20D8:  MOVWF  32
20DA:  MOVFF  1F,21
20DE:  MOVLW  02
20E0:  SUBWF  21,W
20E2:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
20E4:  MOVLW  01
20E6:  ADDWF  32,W
20E8:  MOVWF  xA9
20EA:  MOVWF  xAA
20EC:  MOVLW  02
20EE:  MOVWF  xAB
20F0:  CALL   0A7C
....................         mensajes(2+paso,3); 
20F4:  MOVLW  02
20F6:  ADDWF  32,W
20F8:  MOVWF  xA9
20FA:  MOVWF  xAA
20FC:  MOVLW  03
20FE:  MOVWF  xAB
2100:  CALL   0A7C
....................         mensajes(3+paso,4); 
2104:  MOVLW  03
2106:  ADDWF  32,W
2108:  MOVWF  xA9
210A:  MOVWF  xAA
210C:  MOVLW  04
210E:  MOVWF  xAB
2110:  CALL   0A7C
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2114:  MOVLW  01
2116:  MOVWF  xBB
2118:  MOVFF  1D,BC
211C:  CALL   086A
....................         lcd_putc(t[0]); 
2120:  MOVFF  33,BA
2124:  CALL   08CC
....................  
....................         if(Flecha==2) 
2128:  MOVF   1D,W
212A:  SUBLW  02
212C:  BNZ   2156
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
212E:  MOVLW  01
2130:  MOVWF  xBB
2132:  MOVLW  04
2134:  MOVWF  xBC
2136:  CALL   086A
....................             lcd_putc(t[1]); 
213A:  MOVFF  34,BA
213E:  CALL   08CC
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2142:  MOVLW  01
2144:  MOVWF  xBB
2146:  MOVLW  03
2148:  MOVWF  xBC
214A:  CALL   086A
....................             lcd_putc(t[1]); 
214E:  MOVFF  34,BA
2152:  CALL   08CC
....................           } 
....................          
....................         if(Flecha==4) 
2156:  MOVF   1D,W
2158:  SUBLW  04
215A:  BNZ   2184
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
215C:  MOVLW  01
215E:  MOVWF  xBB
2160:  MOVLW  02
2162:  MOVWF  xBC
2164:  CALL   086A
....................             lcd_putc(t[1]); 
2168:  MOVFF  34,BA
216C:  CALL   08CC
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2170:  MOVLW  01
2172:  MOVWF  xBB
2174:  MOVLW  03
2176:  MOVWF  xBC
2178:  CALL   086A
....................             lcd_putc(t[1]); 
217C:  MOVFF  34,BA
2180:  CALL   08CC
....................           } 
....................          
....................         if(Flecha==3) 
2184:  MOVF   1D,W
2186:  SUBLW  03
2188:  BNZ   21B2
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
218A:  MOVLW  01
218C:  MOVWF  xBB
218E:  MOVLW  04
2190:  MOVWF  xBC
2192:  CALL   086A
....................             lcd_putc(t[1]); 
2196:  MOVFF  34,BA
219A:  CALL   08CC
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
219E:  MOVLW  01
21A0:  MOVWF  xBB
21A2:  MOVLW  02
21A4:  MOVWF  xBC
21A6:  CALL   086A
....................             lcd_putc(t[1]); 
21AA:  MOVFF  34,BA
21AE:  CALL   08CC
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
21B2:  BSF    F96.1
21B4:  BTFSS  F84.1
21B6:  BRA    21EE
....................        { 
....................          if(Flanco1 == 0) 
21B8:  BTFSC  17.4
21BA:  BRA    21EC
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
21BC:  BSF    17.4
21BE:  MOVFF  1F,19
21C2:  MOVLW  03
21C4:  MOVWF  1D
21C6:  MOVLW  02
21C8:  MOVWF  xA9
21CA:  MOVLW  96
21CC:  MOVWF  xBB
21CE:  CALL   06D8
21D2:  DECFSZ xA9,F
21D4:  BRA    21CA
21D6:  MOVLW  0C
21D8:  MOVWF  xBA
21DA:  CALL   08CC
....................             if(Menu==6) 
21DE:  MOVF   19,W
21E0:  SUBLW  06
21E2:  BNZ   21EC
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
21E4:  CLRF   36
21E6:  CLRF   37
21E8:  CLRF   38
21EA:  CLRF   39
....................             } 
....................          } 
....................        } 
....................        else 
21EC:  BRA    21F0
....................        { 
....................          Flanco1 = 0; 
21EE:  BCF    17.4
....................        } 
....................              
....................        if(IZQU) 
21F0:  BSF    F96.2
21F2:  BTFSS  F84.2
21F4:  BRA    2212
....................        { 
....................          delay_ms(500);Menu=50;printf(lcd_putc,"\f"); 
21F6:  MOVLW  02
21F8:  MOVWF  xA9
21FA:  MOVLW  FA
21FC:  MOVWF  xBB
21FE:  CALL   06D8
2202:  DECFSZ xA9,F
2204:  BRA    21FA
2206:  MOVLW  32
2208:  MOVWF  19
220A:  MOVLW  0C
220C:  MOVWF  xBA
220E:  CALL   08CC
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
2212:  MOVF   19,W
2214:  SUBLW  02
2216:  BTFSS  FD8.2
2218:  BRA    2428
....................     
....................    lcd_gotoxy(1,1); 
221A:  MOVLW  01
221C:  MOVWF  xBB
221E:  MOVWF  xBC
2220:  CALL   086A
....................    printf(lcd_putc,"    Temporizador     "); 
2224:  MOVLW  D4
2226:  MOVWF  FF6
2228:  MOVLW  02
222A:  MOVWF  FF7
222C:  CALL   092A
....................    lcd_gotoxy(1,2); 
2230:  MOVLW  01
2232:  MOVWF  xBB
2234:  MOVLW  02
2236:  MOVWF  xBC
2238:  CALL   086A
....................    printf(lcd_putc,"       Luz UV        "); 
223C:  MOVLW  EA
223E:  MOVWF  FF6
2240:  MOVLW  02
2242:  MOVWF  FF7
2244:  CALL   092A
....................    lcd_gotoxy(6,3); 
2248:  MOVLW  06
224A:  MOVWF  xBB
224C:  MOVLW  03
224E:  MOVWF  xBC
2250:  CALL   086A
....................    printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2254:  MOVFF  2A,A9
2258:  MOVLW  03
225A:  MOVWF  xAA
225C:  CALL   0B1A
2260:  MOVLW  3A
2262:  MOVWF  xBA
2264:  CALL   08CC
2268:  MOVFF  2B,A9
226C:  MOVLW  01
226E:  MOVWF  xAA
2270:  CALL   0B1A
2274:  MOVLW  09
2276:  MOVWF  FF6
2278:  MOVLW  03
227A:  MOVWF  FF7
227C:  MOVLW  08
227E:  MOVWF  xAD
2280:  CALL   096E
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2284:  MOVLW  06
2286:  ADDWF  2F,W
2288:  MOVWF  xA9
228A:  MOVWF  xBB
228C:  MOVLW  04
228E:  MOVWF  xBC
2290:  CALL   086A
....................    lcd_putc(t[2]); 
2294:  MOVFF  35,BA
2298:  CALL   08CC
....................     
....................    if(UP) 
229C:  BSF    F92.5
229E:  BTFSS  F80.5
22A0:  BRA    22DE
....................    { 
....................       if(unidad2==1) 
22A2:  DECFSZ 2F,W
22A4:  BRA    22C0
....................       { 
....................          if(tempo_minutos_pro<240) 
22A6:  MOVF   2A,W
22A8:  SUBLW  EF
22AA:  BNC   22C0
....................          { 
....................             tempo_minutos_pro+=5;delay_ms(300); 
22AC:  MOVLW  05
22AE:  ADDWF  2A,F
22B0:  MOVLW  02
22B2:  MOVWF  xA9
22B4:  MOVLW  96
22B6:  MOVWF  xBB
22B8:  CALL   06D8
22BC:  DECFSZ xA9,F
22BE:  BRA    22B4
....................          } 
....................       } 
....................        
....................       if(unidad2==4) 
22C0:  MOVF   2F,W
22C2:  SUBLW  04
22C4:  BNZ   22DE
....................       { 
....................          if(tempo_segundos_pro<59) 
22C6:  MOVF   2B,W
22C8:  SUBLW  3A
22CA:  BNC   22DE
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
22CC:  INCF   2B,F
22CE:  MOVLW  02
22D0:  MOVWF  xA9
22D2:  MOVLW  96
22D4:  MOVWF  xBB
22D6:  CALL   06D8
22DA:  DECFSZ xA9,F
22DC:  BRA    22D2
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
22DE:  BSF    F96.0
22E0:  BTFSS  F84.0
22E2:  BRA    231C
....................    { 
....................       if(unidad2==1) 
22E4:  DECFSZ 2F,W
22E6:  BRA    2300
....................       { 
....................          if(tempo_minutos_pro>0) 
22E8:  MOVF   2A,F
22EA:  BZ    2300
....................          { 
....................             tempo_minutos_pro-=5;delay_ms(300); 
22EC:  MOVLW  05
22EE:  SUBWF  2A,F
22F0:  MOVLW  02
22F2:  MOVWF  xA9
22F4:  MOVLW  96
22F6:  MOVWF  xBB
22F8:  CALL   06D8
22FC:  DECFSZ xA9,F
22FE:  BRA    22F4
....................          } 
....................           
....................       } 
....................        
....................       if(unidad2==4) 
2300:  MOVF   2F,W
2302:  SUBLW  04
2304:  BNZ   231C
....................       { 
....................          if(tempo_segundos_pro>0) 
2306:  MOVF   2B,F
2308:  BZ    231C
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
230A:  DECF   2B,F
230C:  MOVLW  02
230E:  MOVWF  xA9
2310:  MOVLW  96
2312:  MOVWF  xBB
2314:  CALL   06D8
2318:  DECFSZ xA9,F
231A:  BRA    2310
....................          } 
....................           
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
231C:  BSF    F96.1
231E:  BTFSS  F84.1
2320:  BRA    234E
....................    { 
....................       if(unidad2==1) 
2322:  DECFSZ 2F,W
2324:  BRA    232C
....................       { 
....................          unidad2=4; 
2326:  MOVLW  04
2328:  MOVWF  2F
....................       } 
....................       else 
232A:  BRA    2336
....................       { 
....................          if(unidad2==4) 
232C:  MOVF   2F,W
232E:  SUBLW  04
2330:  BNZ   2336
....................          { 
....................             unidad2=1; 
2332:  MOVLW  01
2334:  MOVWF  2F
....................          } 
....................       } 
....................       delay_ms(500); 
2336:  MOVLW  02
2338:  MOVWF  xA9
233A:  MOVLW  FA
233C:  MOVWF  xBB
233E:  CALL   06D8
2342:  DECFSZ xA9,F
2344:  BRA    233A
....................       printf(lcd_putc,"\f"); 
2346:  MOVLW  0C
2348:  MOVWF  xBA
234A:  CALL   08CC
....................    } 
....................     
....................    if(IZQU) 
234E:  BSF    F96.2
2350:  BTFSS  F84.2
2352:  BRA    2428
....................    { 
....................       delay_ms(200); 
2354:  MOVLW  C8
2356:  MOVWF  xBB
2358:  CALL   06D8
....................       printf(lcd_putc,"\f"); 
235C:  MOVLW  0C
235E:  MOVWF  xBA
2360:  CALL   08CC
....................       lcd_gotoxy(1,2); 
2364:  MOVLW  01
2366:  MOVWF  xBB
2368:  MOVLW  02
236A:  MOVWF  xBC
236C:  CALL   086A
....................       printf(lcd_putc,"Tiempo Almacenado"); 
2370:  MOVLW  12
2372:  MOVWF  FF6
2374:  MOVLW  03
2376:  MOVWF  FF7
2378:  CALL   092A
....................       lcd_gotoxy(1,3); 
237C:  MOVLW  01
237E:  MOVWF  xBB
2380:  MOVLW  03
2382:  MOVWF  xBC
2384:  CALL   086A
....................       printf(lcd_putc,"  Correctamente  "); 
2388:  MOVLW  24
238A:  MOVWF  FF6
238C:  MOVLW  03
238E:  MOVWF  FF7
2390:  CALL   092A
....................       write_eeprom(20,tempo_minutos_pro); 
2394:  MOVLW  14
2396:  MOVWF  FA9
2398:  MOVFF  2A,FA8
239C:  BCF    FA6.6
239E:  BCF    FA6.7
23A0:  BSF    FA6.2
23A2:  MOVF   FF2,W
23A4:  MOVWF  00
23A6:  BCF    FF2.7
23A8:  MOVLB  F
23AA:  MOVLW  55
23AC:  MOVWF  FA7
23AE:  MOVLW  AA
23B0:  MOVWF  FA7
23B2:  BSF    FA6.1
23B4:  BTFSC  FA6.1
23B6:  BRA    23B4
23B8:  BCF    FA6.2
23BA:  MOVF   00,W
23BC:  IORWF  FF2,F
....................       delay_ms(30); 
23BE:  MOVLW  1E
23C0:  MOVLB  0
23C2:  MOVWF  xBB
23C4:  CALL   06D8
....................       write_eeprom(30,tempo_segundos_pro); 
23C8:  MOVLW  1E
23CA:  MOVWF  FA9
23CC:  MOVFF  2B,FA8
23D0:  BCF    FA6.6
23D2:  BCF    FA6.7
23D4:  BSF    FA6.2
23D6:  MOVF   FF2,W
23D8:  MOVWF  00
23DA:  BCF    FF2.7
23DC:  MOVLB  F
23DE:  MOVLW  55
23E0:  MOVWF  FA7
23E2:  MOVLW  AA
23E4:  MOVWF  FA7
23E6:  BSF    FA6.1
23E8:  BTFSC  FA6.1
23EA:  BRA    23E8
23EC:  BCF    FA6.2
23EE:  MOVF   00,W
23F0:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
23F2:  MOVFF  2A,28
23F6:  MOVFF  2B,29
....................       delay_ms(700); 
23FA:  MOVLW  04
23FC:  MOVLB  0
23FE:  MOVWF  xA9
2400:  MOVLW  AF
2402:  MOVWF  xBB
2404:  CALL   06D8
2408:  DECFSZ xA9,F
240A:  BRA    2400
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
240C:  MOVLW  1E
240E:  MOVWF  xBB
2410:  CALL   06D8
2414:  MOVLW  01
2416:  MOVWF  19
2418:  CLRF   32
241A:  MOVLW  02
241C:  MOVWF  1D
241E:  MOVWF  1F
2420:  MOVLW  0C
2422:  MOVWF  xBA
2424:  CALL   08CC
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
2428:  MOVF   19,W
242A:  SUBLW  03
242C:  BTFSS  FD8.2
242E:  BRA    2728
....................    lcd_gotoxy(1,1); 
2430:  MOVLW  01
2432:  MOVWF  xBB
2434:  MOVWF  xBC
2436:  CALL   086A
....................    printf(lcd_putc,"      Ingrese       "); 
243A:  MOVLW  36
243C:  MOVWF  FF6
243E:  MOVLW  03
2440:  MOVWF  FF7
2442:  CALL   092A
....................    lcd_gotoxy(1,2); 
2446:  MOVLW  01
2448:  MOVWF  xBB
244A:  MOVLW  02
244C:  MOVWF  xBC
244E:  CALL   086A
....................    printf(lcd_putc," Contraseña Actual  "); 
2452:  MOVLW  4C
2454:  MOVWF  FF6
2456:  MOVLW  03
2458:  MOVWF  FF7
245A:  CALL   092A
....................    lcd_gotoxy(1,3); 
245E:  MOVLW  01
2460:  MOVWF  xBB
2462:  MOVLW  03
2464:  MOVWF  xBC
2466:  CALL   086A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
246A:  MOVLW  62
246C:  MOVWF  FF6
246E:  MOVLW  03
2470:  MOVWF  FF7
2472:  MOVLW  0A
2474:  MOVWF  xAD
2476:  CALL   096E
247A:  MOVFF  36,A9
247E:  MOVLW  1F
2480:  MOVWF  xAA
2482:  CALL   09B4
2486:  MOVFF  37,A9
248A:  MOVLW  1F
248C:  MOVWF  xAA
248E:  CALL   09B4
2492:  MOVFF  38,A9
2496:  MOVLW  1F
2498:  MOVWF  xAA
249A:  CALL   09B4
249E:  MOVFF  39,A9
24A2:  MOVLW  1F
24A4:  MOVWF  xAA
24A6:  CALL   09B4
24AA:  MOVLW  20
24AC:  MOVWF  xBA
24AE:  CALL   08CC
24B2:  MOVLW  20
24B4:  MOVWF  xBA
24B6:  CALL   08CC
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
24BA:  BSF    F92.5
24BC:  BTFSS  F80.5
24BE:  BRA    24E2
....................       {  if(Flanco == 0)  
24C0:  BTFSC  17.3
24C2:  BRA    24E0
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
24C4:  MOVLW  0B
24C6:  SUBWF  1C,W
24C8:  CLRF   03
24CA:  ADDLW  36
24CC:  MOVWF  FE9
24CE:  MOVLW  00
24D0:  ADDWFC 03,W
24D2:  MOVWF  FEA
24D4:  INCF   FEF,F
24D6:  BSF    17.3
24D8:  MOVLW  1E
24DA:  MOVWF  xBB
24DC:  CALL   06D8
....................          else 
24E0:  BRA    24E4
....................             {Flanco = 0;} 
24E2:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
24E4:  BSF    F96.0
24E6:  BTFSS  F84.0
24E8:  BRA    250C
....................       {  if(Flanco2 == 0)  
24EA:  BTFSC  17.5
24EC:  BRA    250A
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
24EE:  MOVLW  0B
24F0:  SUBWF  1C,W
24F2:  CLRF   03
24F4:  ADDLW  36
24F6:  MOVWF  FE9
24F8:  MOVLW  00
24FA:  ADDWFC 03,W
24FC:  MOVWF  FEA
24FE:  DECF   FEF,F
2500:  BSF    17.5
2502:  MOVLW  1E
2504:  MOVWF  xBB
2506:  CALL   06D8
....................          else 
250A:  BRA    250E
....................             {Flanco2 = 0;} 
250C:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
250E:  BSF    F96.1
2510:  BTFSS  F84.1
2512:  BRA    252E
....................       {  if(Flanco1 == 0)  
2514:  BTFSC  17.4
2516:  BRA    252C
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2518:  BSF    17.4
251A:  INCF   1C,F
251C:  MOVLW  1E
251E:  MOVWF  xBB
2520:  CALL   06D8
2524:  MOVLW  0C
2526:  MOVWF  xBA
2528:  CALL   08CC
....................          else 
252C:  BRA    2530
....................             {Flanco1 = 0;}    
252E:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
2530:  BSF    F96.2
2532:  BTFSS  F84.2
2534:  BRA    2550
....................       {  if(Flanco3 == 0)  
2536:  BTFSC  17.6
2538:  BRA    254E
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
253A:  BSF    17.6
253C:  DECF   1C,F
253E:  MOVLW  1E
2540:  MOVWF  xBB
2542:  CALL   06D8
2546:  MOVLW  0C
2548:  MOVWF  xBA
254A:  CALL   08CC
....................          else 
254E:  BRA    2552
....................             {Flanco3 = 0;}     
2550:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2552:  MOVLW  0B
2554:  SUBWF  1C,W
2556:  CLRF   03
2558:  ADDLW  36
255A:  MOVWF  FE9
255C:  MOVLW  00
255E:  ADDWFC 03,W
2560:  MOVWF  FEA
2562:  BTFSC  FEF.7
2564:  BRA    2568
2566:  BRA    257C
....................        {clave[unidad-11]=9;} 
2568:  MOVLW  0B
256A:  SUBWF  1C,W
256C:  CLRF   03
256E:  ADDLW  36
2570:  MOVWF  FE9
2572:  MOVLW  00
2574:  ADDWFC 03,W
2576:  MOVWF  FEA
2578:  MOVLW  09
257A:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
257C:  MOVLW  0B
257E:  SUBWF  1C,W
2580:  CLRF   03
2582:  ADDLW  36
2584:  MOVWF  FE9
2586:  MOVLW  00
2588:  ADDWFC 03,W
258A:  MOVWF  FEA
258C:  BTFSC  FEF.7
258E:  BRA    25A8
2590:  MOVF   FEF,W
2592:  SUBLW  09
2594:  BC    25A8
....................        {clave[unidad-11]=0;} 
2596:  MOVLW  0B
2598:  SUBWF  1C,W
259A:  CLRF   03
259C:  ADDLW  36
259E:  MOVWF  FE9
25A0:  MOVLW  00
25A2:  ADDWFC 03,W
25A4:  MOVWF  FEA
25A6:  CLRF   FEF
....................        if(unidad<11) 
25A8:  MOVF   1C,W
25AA:  SUBLW  0A
25AC:  BNC   25CE
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
25AE:  MOVLW  01
25B0:  MOVWF  19
25B2:  CLRF   32
25B4:  MOVLW  02
25B6:  MOVWF  1D
25B8:  MOVWF  1F
25BA:  MOVLW  0B
25BC:  MOVWF  1C
25BE:  MOVLW  02
25C0:  MOVWF  xA9
25C2:  MOVLW  FA
25C4:  MOVWF  xBB
25C6:  CALL   06D8
25CA:  DECFSZ xA9,F
25CC:  BRA    25C2
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
25CE:  MOVFF  1C,BB
25D2:  MOVLW  04
25D4:  MOVWF  xBC
25D6:  CALL   086A
....................        lcd_putc(t[2]); 
25DA:  MOVFF  35,BA
25DE:  CALL   08CC
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
25E2:  MOVF   1C,W
25E4:  SUBLW  0E
25E6:  BTFSC  FD8.0
25E8:  BRA    2704
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
25EA:  MOVF   3A,W
25EC:  SUBWF  36,W
25EE:  BNZ   268A
25F0:  MOVF   3B,W
25F2:  SUBWF  37,W
25F4:  BNZ   268A
25F6:  MOVF   3C,W
25F8:  SUBWF  38,W
25FA:  BNZ   268A
25FC:  MOVF   3D,W
25FE:  SUBWF  39,W
2600:  BNZ   268A
....................             {lcd_gotoxy(1,1); 
2602:  MOVLW  01
2604:  MOVWF  xBB
2606:  MOVWF  xBC
2608:  CALL   086A
....................             printf(lcd_putc,"                    "); 
260C:  MOVLW  78
260E:  MOVWF  FF6
2610:  MOVLW  03
2612:  MOVWF  FF7
2614:  CALL   092A
....................             lcd_gotoxy(1,2); 
2618:  MOVLW  01
261A:  MOVWF  xBB
261C:  MOVLW  02
261E:  MOVWF  xBC
2620:  CALL   086A
....................             printf(lcd_putc,"     Contraseña     "); 
2624:  MOVLW  8E
2626:  MOVWF  FF6
2628:  MOVLW  03
262A:  MOVWF  FF7
262C:  CALL   092A
....................             lcd_gotoxy(1,3); 
2630:  MOVLW  01
2632:  MOVWF  xBB
2634:  MOVLW  03
2636:  MOVWF  xBC
2638:  CALL   086A
....................             printf(lcd_putc,"      Correcta      "); 
263C:  MOVLW  A4
263E:  MOVWF  FF6
2640:  MOVLW  03
2642:  MOVWF  FF7
2644:  CALL   092A
....................             lcd_gotoxy(1,4); 
2648:  MOVLW  01
264A:  MOVWF  xBB
264C:  MOVLW  04
264E:  MOVWF  xBC
2650:  CALL   086A
....................             printf(lcd_putc,"                    "); 
2654:  MOVLW  BA
2656:  MOVWF  FF6
2658:  MOVLW  03
265A:  MOVWF  FF7
265C:  CALL   092A
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2660:  MOVLW  02
2662:  MOVWF  xA9
2664:  MOVLW  FA
2666:  MOVWF  xBB
2668:  CALL   06D8
266C:  DECFSZ xA9,F
266E:  BRA    2664
2670:  MOVLW  3D
2672:  MOVWF  19
2674:  MOVLW  0B
2676:  MOVWF  1C
2678:  MOVLW  0C
267A:  MOVWF  xBA
267C:  CALL   08CC
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
2680:  CLRF   36
2682:  CLRF   37
2684:  CLRF   38
2686:  CLRF   39
....................          else 
2688:  BRA    2704
....................          {lcd_gotoxy(1,1); 
268A:  MOVLW  01
268C:  MOVWF  xBB
268E:  MOVWF  xBC
2690:  CALL   086A
....................             printf(lcd_putc,"                    "); 
2694:  MOVLW  D0
2696:  MOVWF  FF6
2698:  MOVLW  03
269A:  MOVWF  FF7
269C:  CALL   092A
....................             lcd_gotoxy(1,2); 
26A0:  MOVLW  01
26A2:  MOVWF  xBB
26A4:  MOVLW  02
26A6:  MOVWF  xBC
26A8:  CALL   086A
....................             printf(lcd_putc,"     Contraseña     "); 
26AC:  MOVLW  E6
26AE:  MOVWF  FF6
26B0:  MOVLW  03
26B2:  MOVWF  FF7
26B4:  CALL   092A
....................             lcd_gotoxy(1,3); 
26B8:  MOVLW  01
26BA:  MOVWF  xBB
26BC:  MOVLW  03
26BE:  MOVWF  xBC
26C0:  CALL   086A
....................             printf(lcd_putc,"     Incorrecta     "); 
26C4:  MOVLW  FC
26C6:  MOVWF  FF6
26C8:  MOVLW  03
26CA:  MOVWF  FF7
26CC:  CALL   092A
....................             lcd_gotoxy(1,4); 
26D0:  MOVLW  01
26D2:  MOVWF  xBB
26D4:  MOVLW  04
26D6:  MOVWF  xBC
26D8:  CALL   086A
....................             printf(lcd_putc,"                    "); 
26DC:  MOVLW  12
26DE:  MOVWF  FF6
26E0:  MOVLW  04
26E2:  MOVWF  FF7
26E4:  CALL   092A
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
26E8:  MOVLW  02
26EA:  MOVWF  xA9
26EC:  MOVLW  FA
26EE:  MOVWF  xBB
26F0:  CALL   06D8
26F4:  DECFSZ xA9,F
26F6:  BRA    26EC
26F8:  MOVLW  0B
26FA:  MOVWF  1C
26FC:  MOVLW  0C
26FE:  MOVWF  xBA
2700:  CALL   08CC
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
2704:  MOVF   1C,W
2706:  SUBLW  0B
2708:  BC    2728
270A:  MOVF   1C,W
270C:  SUBLW  0D
270E:  BNC   2728
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2710:  MOVLW  01
2712:  SUBWF  1C,W
2714:  MOVWF  xA9
2716:  MOVWF  xBB
2718:  MOVLW  04
271A:  MOVWF  xBC
271C:  CALL   086A
....................             lcd_putc(t[1]); 
2720:  MOVFF  34,BA
2724:  CALL   08CC
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
2728:  MOVF   19,W
272A:  SUBLW  3D
272C:  BTFSS  FD8.2
272E:  BRA    2A3E
....................    lcd_gotoxy(1,1); 
2730:  MOVLW  01
2732:  MOVWF  xBB
2734:  MOVWF  xBC
2736:  CALL   086A
....................    printf(lcd_putc,"     Ingrese        "); 
273A:  MOVLW  28
273C:  MOVWF  FF6
273E:  MOVLW  04
2740:  MOVWF  FF7
2742:  CALL   092A
....................    lcd_gotoxy(1,2); 
2746:  MOVLW  01
2748:  MOVWF  xBB
274A:  MOVLW  02
274C:  MOVWF  xBC
274E:  CALL   086A
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2752:  MOVLW  3E
2754:  MOVWF  FF6
2756:  MOVLW  04
2758:  MOVWF  FF7
275A:  CALL   092A
....................    lcd_gotoxy(1,3); 
275E:  MOVLW  01
2760:  MOVWF  xBB
2762:  MOVLW  03
2764:  MOVWF  xBC
2766:  CALL   086A
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
276A:  MOVLW  54
276C:  MOVWF  FF6
276E:  MOVLW  04
2770:  MOVWF  FF7
2772:  MOVLW  0A
2774:  MOVWF  xAD
2776:  CALL   096E
277A:  MOVFF  36,A9
277E:  MOVLW  1F
2780:  MOVWF  xAA
2782:  CALL   09B4
2786:  MOVFF  37,A9
278A:  MOVLW  1F
278C:  MOVWF  xAA
278E:  CALL   09B4
2792:  MOVFF  38,A9
2796:  MOVLW  1F
2798:  MOVWF  xAA
279A:  CALL   09B4
279E:  MOVFF  39,A9
27A2:  MOVLW  1F
27A4:  MOVWF  xAA
27A6:  CALL   09B4
27AA:  MOVLW  20
27AC:  MOVWF  xBA
27AE:  CALL   08CC
27B2:  MOVLW  20
27B4:  MOVWF  xBA
27B6:  CALL   08CC
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
27BA:  BSF    F92.5
27BC:  BTFSS  F80.5
27BE:  BRA    27E2
....................       {  if(Flanco == 0)  
27C0:  BTFSC  17.3
27C2:  BRA    27E0
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
27C4:  MOVLW  0B
27C6:  SUBWF  1C,W
27C8:  CLRF   03
27CA:  ADDLW  36
27CC:  MOVWF  FE9
27CE:  MOVLW  00
27D0:  ADDWFC 03,W
27D2:  MOVWF  FEA
27D4:  INCF   FEF,F
27D6:  BSF    17.3
27D8:  MOVLW  1E
27DA:  MOVWF  xBB
27DC:  CALL   06D8
....................          else 
27E0:  BRA    27E4
....................             {Flanco = 0;} 
27E2:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
27E4:  BSF    F96.0
27E6:  BTFSS  F84.0
27E8:  BRA    280C
....................       {  if(Flanco2 == 0)  
27EA:  BTFSC  17.5
27EC:  BRA    280A
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
27EE:  MOVLW  0B
27F0:  SUBWF  1C,W
27F2:  CLRF   03
27F4:  ADDLW  36
27F6:  MOVWF  FE9
27F8:  MOVLW  00
27FA:  ADDWFC 03,W
27FC:  MOVWF  FEA
27FE:  DECF   FEF,F
2800:  BSF    17.5
2802:  MOVLW  1E
2804:  MOVWF  xBB
2806:  CALL   06D8
....................          else 
280A:  BRA    280E
....................             {Flanco2 = 0;} 
280C:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
280E:  BSF    F96.1
2810:  BTFSS  F84.1
2812:  BRA    282E
....................       {  if(Flanco1 == 0)  
2814:  BTFSC  17.4
2816:  BRA    282C
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
2818:  BSF    17.4
281A:  INCF   1C,F
281C:  MOVLW  1E
281E:  MOVWF  xBB
2820:  CALL   06D8
2824:  MOVLW  0C
2826:  MOVWF  xBA
2828:  CALL   08CC
....................          else 
282C:  BRA    2830
....................             {Flanco1 = 0;}    
282E:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
2830:  BSF    F96.2
2832:  BTFSS  F84.2
2834:  BRA    2850
....................       {  if(Flanco3 == 0)  
2836:  BTFSC  17.6
2838:  BRA    284E
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
283A:  BSF    17.6
283C:  DECF   1C,F
283E:  MOVLW  1E
2840:  MOVWF  xBB
2842:  CALL   06D8
2846:  MOVLW  0C
2848:  MOVWF  xBA
284A:  CALL   08CC
....................          else 
284E:  BRA    2852
....................             {Flanco3 = 0;}     
2850:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2852:  MOVLW  0B
2854:  SUBWF  1C,W
2856:  CLRF   03
2858:  ADDLW  36
285A:  MOVWF  FE9
285C:  MOVLW  00
285E:  ADDWFC 03,W
2860:  MOVWF  FEA
2862:  BTFSC  FEF.7
2864:  BRA    2868
2866:  BRA    287C
....................        {clave[unidad-11]=9;} 
2868:  MOVLW  0B
286A:  SUBWF  1C,W
286C:  CLRF   03
286E:  ADDLW  36
2870:  MOVWF  FE9
2872:  MOVLW  00
2874:  ADDWFC 03,W
2876:  MOVWF  FEA
2878:  MOVLW  09
287A:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
287C:  MOVLW  0B
287E:  SUBWF  1C,W
2880:  CLRF   03
2882:  ADDLW  36
2884:  MOVWF  FE9
2886:  MOVLW  00
2888:  ADDWFC 03,W
288A:  MOVWF  FEA
288C:  BTFSC  FEF.7
288E:  BRA    28A8
2890:  MOVF   FEF,W
2892:  SUBLW  09
2894:  BC    28A8
....................        {clave[unidad-11]=0;} 
2896:  MOVLW  0B
2898:  SUBWF  1C,W
289A:  CLRF   03
289C:  ADDLW  36
289E:  MOVWF  FE9
28A0:  MOVLW  00
28A2:  ADDWFC 03,W
28A4:  MOVWF  FEA
28A6:  CLRF   FEF
....................        if(unidad<11) 
28A8:  MOVF   1C,W
28AA:  SUBLW  0A
28AC:  BNC   28B6
....................        {Menu=5;unidad=11;} 
28AE:  MOVLW  05
28B0:  MOVWF  19
28B2:  MOVLW  0B
28B4:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
28B6:  MOVFF  1C,BB
28BA:  MOVLW  04
28BC:  MOVWF  xBC
28BE:  CALL   086A
....................        lcd_putc(t[2]); 
28C2:  MOVFF  35,BA
28C6:  CALL   08CC
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
28CA:  MOVF   1C,W
28CC:  SUBLW  0E
28CE:  BTFSC  FD8.0
28D0:  BRA    2A1A
....................        { 
....................             lcd_gotoxy(1,1); 
28D2:  MOVLW  01
28D4:  MOVWF  xBB
28D6:  MOVWF  xBC
28D8:  CALL   086A
....................             printf(lcd_putc,"                    "); 
28DC:  MOVLW  6A
28DE:  MOVWF  FF6
28E0:  MOVLW  04
28E2:  MOVWF  FF7
28E4:  CALL   092A
....................             lcd_gotoxy(1,2); 
28E8:  MOVLW  01
28EA:  MOVWF  xBB
28EC:  MOVLW  02
28EE:  MOVWF  xBC
28F0:  CALL   086A
....................             printf(lcd_putc,"     Contraseña     "); 
28F4:  MOVLW  80
28F6:  MOVWF  FF6
28F8:  MOVLW  04
28FA:  MOVWF  FF7
28FC:  CALL   092A
....................             lcd_gotoxy(1,3); 
2900:  MOVLW  01
2902:  MOVWF  xBB
2904:  MOVLW  03
2906:  MOVWF  xBC
2908:  CALL   086A
....................             printf(lcd_putc,"     Almacenada     "); 
290C:  MOVLW  96
290E:  MOVWF  FF6
2910:  MOVLW  04
2912:  MOVWF  FF7
2914:  CALL   092A
....................             lcd_gotoxy(1,4); 
2918:  MOVLW  01
291A:  MOVWF  xBB
291C:  MOVLW  04
291E:  MOVWF  xBC
2920:  CALL   086A
....................             printf(lcd_putc,"                    "); 
2924:  MOVLW  AC
2926:  MOVWF  FF6
2928:  MOVLW  04
292A:  MOVWF  FF7
292C:  CALL   092A
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2930:  CLRF   FA9
2932:  MOVFF  36,FA8
2936:  BCF    FA6.6
2938:  BCF    FA6.7
293A:  BSF    FA6.2
293C:  MOVF   FF2,W
293E:  MOVWF  00
2940:  BCF    FF2.7
2942:  MOVLB  F
2944:  MOVLW  55
2946:  MOVWF  FA7
2948:  MOVLW  AA
294A:  MOVWF  FA7
294C:  BSF    FA6.1
294E:  BTFSC  FA6.1
2950:  BRA    294E
2952:  BCF    FA6.2
2954:  MOVF   00,W
2956:  IORWF  FF2,F
2958:  MOVLW  14
295A:  MOVLB  0
295C:  MOVWF  xBB
295E:  CALL   06D8
2962:  MOVLW  01
2964:  MOVWF  FA9
2966:  MOVFF  37,FA8
296A:  BCF    FA6.6
296C:  BCF    FA6.7
296E:  BSF    FA6.2
2970:  MOVF   FF2,W
2972:  MOVWF  00
2974:  BCF    FF2.7
2976:  MOVLB  F
2978:  MOVLW  55
297A:  MOVWF  FA7
297C:  MOVLW  AA
297E:  MOVWF  FA7
2980:  BSF    FA6.1
2982:  BTFSC  FA6.1
2984:  BRA    2982
2986:  BCF    FA6.2
2988:  MOVF   00,W
298A:  IORWF  FF2,F
298C:  MOVLW  14
298E:  MOVLB  0
2990:  MOVWF  xBB
2992:  CALL   06D8
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2996:  MOVLW  02
2998:  MOVWF  FA9
299A:  MOVFF  38,FA8
299E:  BCF    FA6.6
29A0:  BCF    FA6.7
29A2:  BSF    FA6.2
29A4:  MOVF   FF2,W
29A6:  MOVWF  00
29A8:  BCF    FF2.7
29AA:  MOVLB  F
29AC:  MOVLW  55
29AE:  MOVWF  FA7
29B0:  MOVLW  AA
29B2:  MOVWF  FA7
29B4:  BSF    FA6.1
29B6:  BTFSC  FA6.1
29B8:  BRA    29B6
29BA:  BCF    FA6.2
29BC:  MOVF   00,W
29BE:  IORWF  FF2,F
29C0:  MOVLW  14
29C2:  MOVLB  0
29C4:  MOVWF  xBB
29C6:  CALL   06D8
29CA:  MOVLW  03
29CC:  MOVWF  FA9
29CE:  MOVFF  39,FA8
29D2:  BCF    FA6.6
29D4:  BCF    FA6.7
29D6:  BSF    FA6.2
29D8:  MOVF   FF2,W
29DA:  MOVWF  00
29DC:  BCF    FF2.7
29DE:  MOVLB  F
29E0:  MOVLW  55
29E2:  MOVWF  FA7
29E4:  MOVLW  AA
29E6:  MOVWF  FA7
29E8:  BSF    FA6.1
29EA:  BTFSC  FA6.1
29EC:  BRA    29EA
29EE:  BCF    FA6.2
29F0:  MOVF   00,W
29F2:  IORWF  FF2,F
29F4:  MOVLW  14
29F6:  MOVLB  0
29F8:  MOVWF  xBB
29FA:  CALL   06D8
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
29FE:  MOVLW  02
2A00:  MOVWF  xA9
2A02:  MOVLW  FA
2A04:  MOVWF  xBB
2A06:  CALL   06D8
2A0A:  DECFSZ xA9,F
2A0C:  BRA    2A02
2A0E:  MOVLW  01
2A10:  MOVWF  19
2A12:  CLRF   32
2A14:  MOVLW  02
2A16:  MOVWF  1D
2A18:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
2A1A:  MOVF   1C,W
2A1C:  SUBLW  0B
2A1E:  BC    2A3E
2A20:  MOVF   1C,W
2A22:  SUBLW  0D
2A24:  BNC   2A3E
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2A26:  MOVLW  01
2A28:  SUBWF  1C,W
2A2A:  MOVWF  xA9
2A2C:  MOVWF  xBB
2A2E:  MOVLW  04
2A30:  MOVWF  xBC
2A32:  CALL   086A
....................             lcd_putc(t[1]); 
2A36:  MOVFF  34,BA
2A3A:  CALL   08CC
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
2A3E:  MOVF   19,W
2A40:  SUBLW  04
2A42:  BTFSS  FD8.2
2A44:  BRA    2BE2
....................    lcd_gotoxy(1,1); 
2A46:  MOVLW  01
2A48:  MOVWF  xBB
2A4A:  MOVWF  xBC
2A4C:  CALL   086A
....................    printf(lcd_putc,"  Duracion Actual   "); 
2A50:  MOVLW  C2
2A52:  MOVWF  FF6
2A54:  MOVLW  04
2A56:  MOVWF  FF7
2A58:  CALL   092A
....................    lcd_gotoxy(1,2); 
2A5C:  MOVLW  01
2A5E:  MOVWF  xBB
2A60:  MOVLW  02
2A62:  MOVWF  xBC
2A64:  CALL   086A
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2A68:  MOVLW  D8
2A6A:  MOVWF  FF6
2A6C:  MOVLW  04
2A6E:  MOVWF  FF7
2A70:  MOVLW  0B
2A72:  MOVWF  xAD
2A74:  CALL   096E
2A78:  MOVLW  08
2A7A:  MOVWF  FE9
2A7C:  MOVFF  42,AA
2A80:  MOVFF  41,A9
2A84:  GOTO   0B80
2A88:  MOVLW  20
2A8A:  MOVWF  xBA
2A8C:  CALL   08CC
2A90:  MOVLW  20
2A92:  MOVWF  xBA
2A94:  CALL   08CC
2A98:  MOVLW  20
2A9A:  MOVWF  xBA
2A9C:  CALL   08CC
....................    lcd_gotoxy(1,4); 
2AA0:  MOVLW  01
2AA2:  MOVWF  xBB
2AA4:  MOVLW  04
2AA6:  MOVWF  xBC
2AA8:  CALL   086A
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2AAC:  MOVLW  EC
2AAE:  MOVWF  FF6
2AB0:  MOVLW  04
2AB2:  MOVWF  FF7
2AB4:  CALL   092A
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2AB8:  BSF    F92.5
2ABA:  BTFSS  F80.5
2ABC:  BRA    2BAE
2ABE:  BSF    F96.1
2AC0:  BTFSS  F84.1
2AC2:  BRA    2BAE
....................       {   
....................          delay_ms(200); 
2AC4:  MOVLW  C8
2AC6:  MOVWF  xBB
2AC8:  CALL   06D8
....................          printf(lcd_putc,"\f"); 
2ACC:  MOVLW  0C
2ACE:  MOVWF  xBA
2AD0:  CALL   08CC
....................          lcd_gotoxy(1,2); 
2AD4:  MOVLW  01
2AD6:  MOVWF  xBB
2AD8:  MOVLW  02
2ADA:  MOVWF  xBC
2ADC:  CALL   086A
....................          printf(lcd_putc," Reset de tiempo "); 
2AE0:  MOVLW  02
2AE2:  MOVWF  FF6
2AE4:  MOVLW  05
2AE6:  MOVWF  FF7
2AE8:  CALL   092A
....................          lcd_gotoxy(1,3); 
2AEC:  MOVLW  01
2AEE:  MOVWF  xBB
2AF0:  MOVLW  03
2AF2:  MOVWF  xBC
2AF4:  CALL   086A
....................          printf(lcd_putc,"     Exitoso     "); 
2AF8:  MOVLW  14
2AFA:  MOVWF  FF6
2AFC:  MOVLW  05
2AFE:  MOVWF  FF7
2B00:  CALL   092A
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2B04:  MOVLW  32
2B06:  MOVWF  FA9
2B08:  CLRF   FA8
2B0A:  BCF    FA6.6
2B0C:  BCF    FA6.7
2B0E:  BSF    FA6.2
2B10:  MOVF   FF2,W
2B12:  MOVWF  00
2B14:  BCF    FF2.7
2B16:  MOVLB  F
2B18:  MOVLW  55
2B1A:  MOVWF  FA7
2B1C:  MOVLW  AA
2B1E:  MOVWF  FA7
2B20:  BSF    FA6.1
2B22:  BTFSC  FA6.1
2B24:  BRA    2B22
2B26:  BCF    FA6.2
2B28:  MOVF   00,W
2B2A:  IORWF  FF2,F
2B2C:  MOVLW  33
2B2E:  MOVWF  FA9
2B30:  CLRF   FA8
2B32:  BCF    FA6.6
2B34:  BCF    FA6.7
2B36:  BSF    FA6.2
2B38:  MOVF   FF2,W
2B3A:  MOVWF  00
2B3C:  BCF    FF2.7
2B3E:  MOVLW  55
2B40:  MOVWF  FA7
2B42:  MOVLW  AA
2B44:  MOVWF  FA7
2B46:  BSF    FA6.1
2B48:  BTFSC  FA6.1
2B4A:  BRA    2B48
2B4C:  BCF    FA6.2
2B4E:  MOVF   00,W
2B50:  IORWF  FF2,F
2B52:  MOVLW  34
2B54:  MOVWF  FA9
2B56:  CLRF   FA8
2B58:  BCF    FA6.6
2B5A:  BCF    FA6.7
2B5C:  BSF    FA6.2
2B5E:  MOVF   FF2,W
2B60:  MOVWF  00
2B62:  BCF    FF2.7
2B64:  MOVLW  55
2B66:  MOVWF  FA7
2B68:  MOVLW  AA
2B6A:  MOVWF  FA7
2B6C:  BSF    FA6.1
2B6E:  BTFSC  FA6.1
2B70:  BRA    2B6E
2B72:  BCF    FA6.2
2B74:  MOVF   00,W
2B76:  IORWF  FF2,F
....................          delay_ms(700); 
2B78:  MOVLW  04
2B7A:  MOVLB  0
2B7C:  MOVWF  xA9
2B7E:  MOVLW  AF
2B80:  MOVWF  xBB
2B82:  CALL   06D8
2B86:  DECFSZ xA9,F
2B88:  BRA    2B7E
....................          segundos=0;minutos=0;horas=0; 
2B8A:  CLRF   22
2B8C:  CLRF   23
2B8E:  CLRF   42
2B90:  CLRF   41
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2B92:  MOVLW  1E
2B94:  MOVWF  xBB
2B96:  CALL   06D8
2B9A:  MOVLW  01
2B9C:  MOVWF  19
2B9E:  CLRF   32
2BA0:  MOVLW  02
2BA2:  MOVWF  1D
2BA4:  MOVWF  1F
2BA6:  MOVLW  0C
2BA8:  MOVWF  xBA
2BAA:  CALL   08CC
....................       } 
....................              
....................       if(IZQU)// Si oprime Izquierda 
2BAE:  BSF    F96.2
2BB0:  BTFSS  F84.2
2BB2:  BRA    2BE0
....................       { 
....................          if(Flanco3 == 0) 
2BB4:  BTFSC  17.6
2BB6:  BRA    2BDE
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2BB8:  BSF    17.6
2BBA:  MOVLW  02
2BBC:  MOVWF  xA9
2BBE:  MOVLW  FA
2BC0:  MOVWF  xBB
2BC2:  CALL   06D8
2BC6:  DECFSZ xA9,F
2BC8:  BRA    2BBE
2BCA:  MOVLW  01
2BCC:  MOVWF  19
2BCE:  CLRF   32
2BD0:  MOVLW  02
2BD2:  MOVWF  1D
2BD4:  MOVWF  1F
2BD6:  MOVLW  0C
2BD8:  MOVWF  xBA
2BDA:  CALL   08CC
....................          } 
....................       } 
....................       else 
2BDE:  BRA    2BE2
....................       { 
....................          Flanco3 = 0; 
2BE0:  BCF    17.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
2BE2:  MOVF   19,W
2BE4:  SUBLW  05
2BE6:  BTFSS  FD8.2
2BE8:  BRA    2E04
....................       lcd_gotoxy(1,1); 
2BEA:  MOVLW  01
2BEC:  MOVWF  xBB
2BEE:  MOVWF  xBC
2BF0:  CALL   086A
....................       printf(lcd_putc,"  Zero Point Config "); 
2BF4:  MOVLW  26
2BF6:  MOVWF  FF6
2BF8:  MOVLW  05
2BFA:  MOVWF  FF7
2BFC:  CALL   092A
....................       lcd_gotoxy(1,2); 
2C00:  MOVLW  01
2C02:  MOVWF  xBB
2C04:  MOVLW  02
2C06:  MOVWF  xBC
2C08:  CALL   086A
....................       printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2C0C:  MOVLW  05
2C0E:  MOVWF  xA9
2C10:  CALL   106E
2C14:  MOVFF  00,A9
2C18:  MOVFF  01,AA
2C1C:  MOVFF  02,AB
2C20:  MOVFF  03,AC
2C24:  MOVFF  03,C0
2C28:  MOVFF  02,BF
2C2C:  MOVFF  01,BE
2C30:  MOVFF  00,BD
2C34:  MOVLW  D7
2C36:  MOVWF  xC4
2C38:  MOVLW  A3
2C3A:  MOVWF  xC3
2C3C:  CLRF   xC2
2C3E:  MOVLW  81
2C40:  MOVWF  xC1
2C42:  CALL   1204
2C46:  MOVFF  00,A9
2C4A:  MOVFF  01,AA
2C4E:  MOVFF  02,AB
2C52:  MOVFF  03,AC
2C56:  MOVLW  3C
2C58:  MOVWF  FF6
2C5A:  MOVLW  05
2C5C:  MOVWF  FF7
2C5E:  MOVLW  09
2C60:  MOVWF  xAD
2C62:  CALL   096E
2C66:  MOVLW  02
2C68:  MOVWF  FE9
2C6A:  MOVFF  AC,B0
2C6E:  MOVFF  AB,AF
2C72:  MOVFF  AA,AE
2C76:  MOVFF  A9,AD
2C7A:  MOVWF  xB1
2C7C:  CALL   13B0
2C80:  MOVLW  4A
2C82:  MOVWF  FF6
2C84:  MOVLW  05
2C86:  MOVWF  FF7
2C88:  MOVLW  07
2C8A:  MOVWF  xAD
2C8C:  CALL   096E
....................       lcd_gotoxy(1,3); 
2C90:  MOVLW  01
2C92:  MOVWF  xBB
2C94:  MOVLW  03
2C96:  MOVWF  xBC
2C98:  CALL   086A
....................       printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
2C9C:  CLRF   xAE
2C9E:  CALL   0818
2CA2:  MOVFF  00,A9
2CA6:  MOVFF  01,AA
2CAA:  MOVFF  02,AB
2CAE:  MOVFF  03,AC
2CB2:  MOVLW  52
2CB4:  MOVWF  FF6
2CB6:  MOVLW  05
2CB8:  MOVWF  FF7
2CBA:  MOVLW  08
2CBC:  MOVWF  xAD
2CBE:  CALL   096E
2CC2:  MOVLW  01
2CC4:  MOVWF  FE9
2CC6:  MOVFF  AC,B0
2CCA:  MOVFF  AB,AF
2CCE:  MOVFF  AA,AE
2CD2:  MOVFF  A9,AD
2CD6:  CLRF   xB1
2CD8:  CALL   13B0
....................       lcd_gotoxy(1,4); 
2CDC:  MOVLW  01
2CDE:  MOVWF  xBB
2CE0:  MOVLW  04
2CE2:  MOVWF  xBC
2CE4:  CALL   086A
....................       printf(lcd_putc,"    ZF=%2.0f",G); 
2CE8:  MOVLW  60
2CEA:  MOVWF  FF6
2CEC:  MOVLW  05
2CEE:  MOVWF  FF7
2CF0:  MOVLW  07
2CF2:  MOVWF  xAD
2CF4:  CALL   096E
2CF8:  MOVLW  01
2CFA:  MOVWF  FE9
2CFC:  MOVFF  A8,B0
2D00:  MOVFF  A7,AF
2D04:  MOVFF  A6,AE
2D08:  MOVFF  A5,AD
2D0C:  CLRF   xB1
2D0E:  CALL   13B0
....................      
....................       if(RIGHT)// Si oprime derecha 
2D12:  BSF    F96.1
2D14:  BTFSS  F84.1
2D16:  BRA    2DD4
....................       {  if(Flanco1 == 0)  
2D18:  BTFSC  17.4
2D1A:  BRA    2DD2
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2D1C:  MOVLW  01
2D1E:  MOVWF  19
2D20:  CLRF   32
2D22:  MOVLW  02
2D24:  MOVWF  1D
2D26:  MOVWF  1F
2D28:  MOVLW  0B
2D2A:  MOVWF  1C
2D2C:  MOVLW  02
2D2E:  MOVWF  xA9
2D30:  MOVLW  FA
2D32:  MOVWF  xBB
2D34:  CALL   06D8
2D38:  DECFSZ xA9,F
2D3A:  BRA    2D30
2D3C:  MOVLW  0C
2D3E:  MOVWF  xBA
2D40:  CALL   08CC
....................             G=sensores(0); 
2D44:  CLRF   xAE
2D46:  CALL   0818
2D4A:  MOVFF  03,A8
2D4E:  MOVFF  02,A7
2D52:  MOVFF  01,A6
2D56:  MOVFF  00,A5
....................             G16=(int16)G; 
2D5A:  MOVFF  A8,C0
2D5E:  MOVFF  A7,BF
2D62:  MOVFF  A6,BE
2D66:  MOVFF  A5,BD
2D6A:  CALL   1536
2D6E:  MOVFF  02,44
2D72:  MOVFF  01,43
....................             G_l=G16; G_h=(G16>>8); 
2D76:  MOVFF  43,26
2D7A:  MOVFF  44,27
....................              
....................             write_eeprom(60,G_l);write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
2D7E:  MOVLW  3C
2D80:  MOVWF  FA9
2D82:  MOVFF  26,FA8
2D86:  BCF    FA6.6
2D88:  BCF    FA6.7
2D8A:  BSF    FA6.2
2D8C:  MOVF   FF2,W
2D8E:  MOVWF  00
2D90:  BCF    FF2.7
2D92:  MOVLB  F
2D94:  MOVLW  55
2D96:  MOVWF  FA7
2D98:  MOVLW  AA
2D9A:  MOVWF  FA7
2D9C:  BSF    FA6.1
2D9E:  BTFSC  FA6.1
2DA0:  BRA    2D9E
2DA2:  BCF    FA6.2
2DA4:  MOVF   00,W
2DA6:  IORWF  FF2,F
2DA8:  MOVLW  3D
2DAA:  MOVWF  FA9
2DAC:  MOVFF  27,FA8
2DB0:  BCF    FA6.6
2DB2:  BCF    FA6.7
2DB4:  BSF    FA6.2
2DB6:  MOVF   FF2,W
2DB8:  MOVWF  00
2DBA:  BCF    FF2.7
2DBC:  MOVLW  55
2DBE:  MOVWF  FA7
2DC0:  MOVLW  AA
2DC2:  MOVWF  FA7
2DC4:  BSF    FA6.1
2DC6:  BTFSC  FA6.1
2DC8:  BRA    2DC6
2DCA:  BCF    FA6.2
2DCC:  MOVF   00,W
2DCE:  IORWF  FF2,F
2DD0:  MOVLB  0
....................             }} 
....................          else 
2DD2:  BRA    2DD6
....................             {Flanco1 = 0;}    
2DD4:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
2DD6:  BSF    F96.2
2DD8:  BTFSS  F84.2
2DDA:  BRA    2E02
....................       {  if(Flanco3 == 0)  
2DDC:  BTFSC  17.6
2DDE:  BRA    2E00
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
2DE0:  MOVLW  01
2DE2:  MOVWF  19
2DE4:  CLRF   32
2DE6:  MOVLW  02
2DE8:  MOVWF  1D
2DEA:  MOVWF  1F
2DEC:  MOVLW  0B
2DEE:  MOVWF  1C
2DF0:  MOVLW  1E
2DF2:  MOVWF  xBB
2DF4:  CALL   06D8
2DF8:  MOVLW  0C
2DFA:  MOVWF  xBA
2DFC:  CALL   08CC
....................          else 
2E00:  BRA    2E04
....................             {Flanco3 = 0;}   
2E02:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
2E04:  MOVF   19,W
2E06:  SUBLW  06
2E08:  BTFSS  FD8.2
2E0A:  BRA    2F30
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
2E0C:  BTG    18.4
2E0E:  BSF    17.4
2E10:  MOVLW  01
2E12:  MOVWF  19
2E14:  CLRF   32
....................                        
....................             if(estadoalarma==1) 
2E16:  BTFSS  18.4
2E18:  BRA    2E7A
....................             {estadoalarma=1; 
2E1A:  BSF    18.4
....................                lcd_gotoxy(1,1); 
2E1C:  MOVLW  01
2E1E:  MOVWF  xBB
2E20:  MOVWF  xBC
2E22:  CALL   086A
....................                printf(lcd_putc,"                    "); 
2E26:  MOVLW  6E
2E28:  MOVWF  FF6
2E2A:  MOVLW  05
2E2C:  MOVWF  FF7
2E2E:  CALL   092A
....................                lcd_gotoxy(1,2); 
2E32:  MOVLW  01
2E34:  MOVWF  xBB
2E36:  MOVLW  02
2E38:  MOVWF  xBC
2E3A:  CALL   086A
....................                printf(lcd_putc,"        Activo      "); 
2E3E:  MOVLW  84
2E40:  MOVWF  FF6
2E42:  MOVLW  05
2E44:  MOVWF  FF7
2E46:  CALL   092A
....................                lcd_gotoxy(1,3); 
2E4A:  MOVLW  01
2E4C:  MOVWF  xBB
2E4E:  MOVLW  03
2E50:  MOVWF  xBC
2E52:  CALL   086A
....................                printf(lcd_putc,"        Alarma      "); 
2E56:  MOVLW  9A
2E58:  MOVWF  FF6
2E5A:  MOVLW  05
2E5C:  MOVWF  FF7
2E5E:  CALL   092A
....................                lcd_gotoxy(1,4); 
2E62:  MOVLW  01
2E64:  MOVWF  xBB
2E66:  MOVLW  04
2E68:  MOVWF  xBC
2E6A:  CALL   086A
....................                printf(lcd_putc,"                    ");} 
2E6E:  MOVLW  B0
2E70:  MOVWF  FF6
2E72:  MOVLW  05
2E74:  MOVWF  FF7
2E76:  CALL   092A
....................                 
....................             if(estadoalarma==0) 
2E7A:  BTFSC  18.4
2E7C:  BRA    2EDE
....................             {estadoalarma=0; 
2E7E:  BCF    18.4
....................                lcd_gotoxy(1,1); 
2E80:  MOVLW  01
2E82:  MOVWF  xBB
2E84:  MOVWF  xBC
2E86:  CALL   086A
....................                printf(lcd_putc,"                    "); 
2E8A:  MOVLW  C6
2E8C:  MOVWF  FF6
2E8E:  MOVLW  05
2E90:  MOVWF  FF7
2E92:  CALL   092A
....................                lcd_gotoxy(1,2); 
2E96:  MOVLW  01
2E98:  MOVWF  xBB
2E9A:  MOVLW  02
2E9C:  MOVWF  xBC
2E9E:  CALL   086A
....................                printf(lcd_putc,"      Desactivo     "); 
2EA2:  MOVLW  DC
2EA4:  MOVWF  FF6
2EA6:  MOVLW  05
2EA8:  MOVWF  FF7
2EAA:  CALL   092A
....................                lcd_gotoxy(1,3); 
2EAE:  MOVLW  01
2EB0:  MOVWF  xBB
2EB2:  MOVLW  03
2EB4:  MOVWF  xBC
2EB6:  CALL   086A
....................                printf(lcd_putc,"       Alarma       "); 
2EBA:  MOVLW  F2
2EBC:  MOVWF  FF6
2EBE:  MOVLW  05
2EC0:  MOVWF  FF7
2EC2:  CALL   092A
....................                lcd_gotoxy(1,4); 
2EC6:  MOVLW  01
2EC8:  MOVWF  xBB
2ECA:  MOVLW  04
2ECC:  MOVWF  xBC
2ECE:  CALL   086A
....................                printf(lcd_putc,"                    ");} 
2ED2:  MOVLW  08
2ED4:  MOVWF  FF6
2ED6:  MOVLW  06
2ED8:  MOVWF  FF7
2EDA:  CALL   092A
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2EDE:  MOVLW  00
2EE0:  BTFSC  18.4
2EE2:  MOVLW  01
2EE4:  MOVWF  xA9
2EE6:  MOVLW  05
2EE8:  MOVWF  FA9
2EEA:  MOVFF  A9,FA8
2EEE:  BCF    FA6.6
2EF0:  BCF    FA6.7
2EF2:  BSF    FA6.2
2EF4:  MOVF   FF2,W
2EF6:  MOVWF  00
2EF8:  BCF    FF2.7
2EFA:  MOVLB  F
2EFC:  MOVLW  55
2EFE:  MOVWF  FA7
2F00:  MOVLW  AA
2F02:  MOVWF  FA7
2F04:  BSF    FA6.1
2F06:  BTFSC  FA6.1
2F08:  BRA    2F06
2F0A:  BCF    FA6.2
2F0C:  MOVF   00,W
2F0E:  IORWF  FF2,F
2F10:  MOVLW  04
2F12:  MOVLB  0
2F14:  MOVWF  xA9
2F16:  MOVLW  FA
2F18:  MOVWF  xBB
2F1A:  CALL   06D8
2F1E:  DECFSZ xA9,F
2F20:  BRA    2F16
2F22:  MOVLW  02
2F24:  MOVWF  1D
2F26:  MOVWF  1F
2F28:  MOVLW  0C
2F2A:  MOVWF  xBA
2F2C:  CALL   08CC
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV 
2F30:  MOVF   19,W
2F32:  SUBLW  32
2F34:  BTFSS  FD8.2
2F36:  BRA    33FA
....................  
....................    if(Lectura==1) 
2F38:  BTFSS  18.0
2F3A:  BRA    2F56
....................    { 
....................       Lectura=0; 
2F3C:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
2F3E:  MOVLW  05
2F40:  MOVWF  xA9
2F42:  CALL   106E
2F46:  MOVFF  03,A4
2F4A:  MOVFF  02,A3
2F4E:  MOVFF  01,A2
2F52:  MOVFF  00,A1
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
2F56:  BTFSS  17.7
2F58:  BRA    2FF2
....................    { 
....................       if(estadoalarma==1) 
2F5A:  BTFSS  18.4
2F5C:  BRA    2FE8
....................       { 
....................          printf(lcd_putc,"\f"); 
2F5E:  MOVLW  0C
2F60:  MOVWF  xBA
2F62:  CALL   08CC
....................          lcd_gotoxy(1,2); 
2F66:  MOVLW  01
2F68:  MOVWF  xBB
2F6A:  MOVLW  02
2F6C:  MOVWF  xBC
2F6E:  CALL   086A
....................          printf(lcd_putc,"  Temporizador  de  "); 
2F72:  MOVLW  1E
2F74:  MOVWF  FF6
2F76:  MOVLW  06
2F78:  MOVWF  FF7
2F7A:  CALL   092A
....................          lcd_gotoxy(1,3); 
2F7E:  MOVLW  01
2F80:  MOVWF  xBB
2F82:  MOVLW  03
2F84:  MOVWF  xBC
2F86:  CALL   086A
....................          printf(lcd_putc," Luz UV  Finalizado "); 
2F8A:  MOVLW  34
2F8C:  MOVWF  FF6
2F8E:  MOVLW  06
2F90:  MOVWF  FF7
2F92:  CALL   092A
....................          lcd_gotoxy(1,4); 
2F96:  MOVLW  01
2F98:  MOVWF  xBB
2F9A:  MOVLW  04
2F9C:  MOVWF  xBC
2F9E:  CALL   086A
....................          printf(lcd_putc,"                    "); 
2FA2:  MOVLW  4A
2FA4:  MOVWF  FF6
2FA6:  MOVLW  06
2FA8:  MOVWF  FF7
2FAA:  CALL   092A
....................          lcd_gotoxy(1,1); 
2FAE:  MOVLW  01
2FB0:  MOVWF  xBB
2FB2:  MOVWF  xBC
2FB4:  CALL   086A
....................          printf(lcd_putc,"                    "); 
2FB8:  MOVLW  60
2FBA:  MOVWF  FF6
2FBC:  MOVLW  06
2FBE:  MOVWF  FF7
2FC0:  CALL   092A
....................          for(i=0;i<5;i++) 
2FC4:  CLRF   2E
2FC6:  MOVF   2E,W
2FC8:  SUBLW  04
2FCA:  BNC   2FE8
....................          { 
....................             Buzzer_on; 
2FCC:  BSF    F8C.0
2FCE:  BCF    F95.0
....................             delay_ms(200); 
2FD0:  MOVLW  C8
2FD2:  MOVWF  xBB
2FD4:  CALL   06D8
....................             Buzzer_off; 
2FD8:  BCF    F8C.0
2FDA:  BCF    F95.0
....................             delay_ms(200); 
2FDC:  MOVLW  C8
2FDE:  MOVWF  xBB
2FE0:  CALL   06D8
....................          } 
2FE4:  INCF   2E,F
2FE6:  BRA    2FC6
....................       } 
....................       tiempo_cumplido=0; 
2FE8:  BCF    17.7
....................       printf(lcd_putc,"\f"); 
2FEA:  MOVLW  0C
2FEC:  MOVWF  xBA
2FEE:  CALL   08CC
....................    } 
....................     
....................    if(CaidaPresion>=0.37) 
2FF2:  MOVLW  A4
2FF4:  MOVWF  xC0
2FF6:  MOVLW  70
2FF8:  MOVWF  xBF
2FFA:  MOVLW  3D
2FFC:  MOVWF  xBE
2FFE:  MOVLW  7D
3000:  MOVWF  xBD
3002:  MOVFF  A4,C4
3006:  MOVFF  A3,C3
300A:  MOVFF  A2,C2
300E:  MOVFF  A1,C1
3012:  CALL   0FF8
3016:  BC    301A
3018:  BNZ   3020
....................    {  
....................       ActivaBuzzer=1; 
301A:  MOVLW  01
301C:  MOVWF  3E
....................    } 
....................    else 
301E:  BRA    3026
....................    { 
....................       ActivaBuzzer=0; 
3020:  CLRF   3E
....................       Buzzer_off; 
3022:  BCF    F8C.0
3024:  BCF    F95.0
....................    } 
....................        
....................    lcd_gotoxy(1,1); 
3026:  MOVLW  01
3028:  MOVWF  xBB
302A:  MOVWF  xBC
302C:  CALL   086A
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
3030:  MOVFF  A4,C0
3034:  MOVFF  A3,BF
3038:  MOVFF  A2,BE
303C:  MOVFF  A1,BD
3040:  MOVLW  D7
3042:  MOVWF  xC4
3044:  MOVLW  A3
3046:  MOVWF  xC3
3048:  CLRF   xC2
304A:  MOVLW  81
304C:  MOVWF  xC1
304E:  CALL   1204
3052:  MOVFF  00,A9
3056:  MOVFF  01,AA
305A:  MOVFF  02,AB
305E:  MOVFF  03,AC
3062:  MOVLW  76
3064:  MOVWF  FF6
3066:  MOVLW  06
3068:  MOVWF  FF7
306A:  MOVLW  08
306C:  MOVWF  xAD
306E:  CALL   096E
3072:  MOVLW  02
3074:  MOVWF  FE9
3076:  MOVFF  AC,B0
307A:  MOVFF  AB,AF
307E:  MOVFF  AA,AE
3082:  MOVFF  A9,AD
3086:  MOVWF  xB1
3088:  CALL   13B0
308C:  MOVLW  83
308E:  MOVWF  FF6
3090:  MOVLW  06
3092:  MOVWF  FF7
3094:  MOVLW  07
3096:  MOVWF  xAD
3098:  CALL   096E
....................    lcd_gotoxy(1,2); 
309C:  MOVLW  01
309E:  MOVWF  xBB
30A0:  MOVLW  02
30A2:  MOVWF  xBC
30A4:  CALL   086A
....................    printf(lcd_putc,"Filtro:"); 
30A8:  MOVLW  8C
30AA:  MOVWF  FF6
30AC:  MOVLW  06
30AE:  MOVWF  FF7
30B0:  CALL   092A
....................     
....................    Saturacion=(CaidaPresion/0.37)*11; 
30B4:  MOVFF  A4,C0
30B8:  MOVFF  A3,BF
30BC:  MOVFF  A2,BE
30C0:  MOVFF  A1,BD
30C4:  MOVLW  A4
30C6:  MOVWF  xC4
30C8:  MOVLW  70
30CA:  MOVWF  xC3
30CC:  MOVLW  3D
30CE:  MOVWF  xC2
30D0:  MOVLW  7D
30D2:  MOVWF  xC1
30D4:  CALL   0C34
30D8:  MOVFF  00,A9
30DC:  MOVFF  01,AA
30E0:  MOVFF  02,AB
30E4:  MOVFF  03,AC
30E8:  MOVFF  03,C0
30EC:  MOVFF  02,BF
30F0:  MOVFF  01,BE
30F4:  MOVFF  00,BD
30F8:  CLRF   xC4
30FA:  CLRF   xC3
30FC:  MOVLW  30
30FE:  MOVWF  xC2
3100:  MOVLW  82
3102:  MOVWF  xC1
3104:  CALL   1204
3108:  MOVFF  03,A0
310C:  MOVFF  02,9F
3110:  MOVFF  01,9E
3114:  MOVFF  00,9D
....................    if(Saturacion>11) 
3118:  CLRF   xC0
311A:  CLRF   xBF
311C:  MOVLW  30
311E:  MOVWF  xBE
3120:  MOVLW  82
3122:  MOVWF  xBD
3124:  MOVFF  A0,C4
3128:  MOVFF  9F,C3
312C:  MOVFF  9E,C2
3130:  MOVFF  9D,C1
3134:  CALL   0FF8
3138:  BNC   3146
....................    { 
....................       Saturacion=11; 
313A:  CLRF   xA0
313C:  CLRF   x9F
313E:  MOVLW  30
3140:  MOVWF  x9E
3142:  MOVLW  82
3144:  MOVWF  x9D
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
3146:  CLRF   2E
3148:  MOVFF  A0,AC
314C:  MOVFF  9F,AB
3150:  MOVFF  9E,AA
3154:  MOVFF  9D,A9
3158:  CALL   18A0
315C:  MOVFF  00,A9
3160:  MOVFF  01,AA
3164:  MOVFF  02,AB
3168:  MOVFF  03,AC
316C:  CLRF   xC2
316E:  MOVFF  2E,C1
3172:  CALL   07E2
3176:  MOVFF  03,C0
317A:  MOVFF  02,BF
317E:  MOVFF  01,BE
3182:  MOVFF  00,BD
3186:  MOVFF  AC,C4
318A:  MOVFF  AB,C3
318E:  MOVFF  AA,C2
3192:  MOVFF  A9,C1
3196:  CALL   0FF8
319A:  BNC   31B8
....................    { 
....................       lcd_gotoxy(i+8,2); 
319C:  MOVLW  08
319E:  ADDWF  2E,W
31A0:  MOVWF  xA9
31A2:  MOVWF  xBB
31A4:  MOVLW  02
31A6:  MOVWF  xBC
31A8:  CALL   086A
....................       printf(lcd_putc,"Ñ"); 
31AC:  MOVLW  D1
31AE:  MOVWF  xBA
31B0:  CALL   08CC
....................    } 
31B4:  INCF   2E,F
31B6:  BRA    3148
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
31B8:  MOVFF  A0,AC
31BC:  MOVFF  9F,AB
31C0:  MOVFF  9E,AA
31C4:  MOVFF  9D,A9
31C8:  CALL   18A0
31CC:  MOVFF  03,C0
31D0:  MOVFF  02,BF
31D4:  MOVFF  01,BE
31D8:  MOVFF  00,BD
31DC:  CALL   1536
31E0:  MOVFF  01,2E
31E4:  MOVF   2E,W
31E6:  SUBLW  0A
31E8:  BNC   3206
....................    { 
....................       lcd_gotoxy(i+8,2); 
31EA:  MOVLW  08
31EC:  ADDWF  2E,W
31EE:  MOVWF  xA9
31F0:  MOVWF  xBB
31F2:  MOVLW  02
31F4:  MOVWF  xBC
31F6:  CALL   086A
....................       printf(lcd_putc," "); 
31FA:  MOVLW  20
31FC:  MOVWF  xBA
31FE:  CALL   08CC
....................    } 
3202:  INCF   2E,F
3204:  BRA    31E4
....................     
....................    lcd_gotoxy(9,3); 
3206:  MOVLW  09
3208:  MOVWF  xBB
320A:  MOVLW  03
320C:  MOVWF  xBC
320E:  CALL   086A
....................    printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3212:  MOVLW  94
3214:  MOVWF  FF6
3216:  MOVLW  06
3218:  MOVWF  FF7
321A:  MOVLW  06
321C:  MOVWF  xAD
321E:  CALL   096E
3222:  MOVFF  28,A9
3226:  MOVLW  03
3228:  MOVWF  xAA
322A:  CALL   0B1A
322E:  MOVLW  3A
3230:  MOVWF  xBA
3232:  CALL   08CC
3236:  MOVFF  29,A9
323A:  MOVLW  01
323C:  MOVWF  xAA
323E:  CALL   0B1A
....................     
....................    if(estadomv==1) 
3242:  BTFSS  17.2
3244:  BRA    3268
....................    { 
....................       lcd_gotoxy(1,4); 
3246:  MOVLW  01
3248:  MOVWF  xBB
324A:  MOVLW  04
324C:  MOVWF  xBC
324E:  CALL   086A
....................       printf(lcd_putc,"Motor:ON ");       
3252:  MOVLW  A4
3254:  MOVWF  FF6
3256:  MOVLW  06
3258:  MOVWF  FF7
325A:  CALL   092A
....................       velocidades(1); 
325E:  MOVLW  01
3260:  MOVWF  xA9
3262:  CALL   18B6
....................    } 
....................    else 
3266:  BRA    3286
....................    { 
....................       lcd_gotoxy(1,4); 
3268:  MOVLW  01
326A:  MOVWF  xBB
326C:  MOVLW  04
326E:  MOVWF  xBC
3270:  CALL   086A
....................       printf(lcd_putc,"Motor:OFF"); 
3274:  MOVLW  AE
3276:  MOVWF  FF6
3278:  MOVLW  06
327A:  MOVWF  FF7
327C:  CALL   092A
....................       velocidades(0);  
3280:  CLRF   xA9
3282:  CALL   18B6
....................    } 
....................     
....................    if(estadouv==1) 
3286:  BTFSS  17.0
3288:  BRA    32D2
....................    { 
....................       lcd_gotoxy(13,4); 
328A:  MOVLW  0D
328C:  MOVWF  xBB
328E:  MOVLW  04
3290:  MOVWF  xBC
3292:  CALL   086A
....................       printf(lcd_putc,"UV:ON "); 
3296:  MOVLW  B8
3298:  MOVWF  FF6
329A:  MOVLW  06
329C:  MOVWF  FF7
329E:  CALL   092A
....................       estadomv=0; 
32A2:  BCF    17.2
....................       velocidades(0); 
32A4:  CLRF   xA9
32A6:  CALL   18B6
....................       estadofl=0; 
32AA:  BCF    17.1
....................       Luz_Blanca_off; 
32AC:  BCF    F8C.2
32AE:  BCF    F95.2
....................       Luz_UV_on; 
32B0:  BSF    F8C.1
32B2:  BCF    F95.1
....................       tiempo_cumplido=0; 
32B4:  BCF    17.7
....................       if(flaguv==0) 
32B6:  BTFSC  18.1
32B8:  BRA    32D0
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1; 
32BA:  CALL   078C
32BE:  MOVLW  C8
32C0:  MOVWF  xBB
32C2:  CALL   06D8
32C6:  CALL   078C
32CA:  BSF    18.1
32CC:  MOVLW  01
32CE:  MOVWF  31
....................       } 
....................    } 
....................    else 
32D0:  BRA    330A
....................    { 
....................       estadouv=0; 
32D2:  BCF    17.0
....................       lcd_gotoxy(13,4); 
32D4:  MOVLW  0D
32D6:  MOVWF  xBB
32D8:  MOVLW  04
32DA:  MOVWF  xBC
32DC:  CALL   086A
....................       printf(lcd_putc,"UV:OFF"); 
32E0:  MOVLW  C0
32E2:  MOVWF  FF6
32E4:  MOVLW  06
32E6:  MOVWF  FF7
32E8:  CALL   092A
....................       Luz_UV_off; 
32EC:  BCF    F8C.1
32EE:  BCF    F95.1
....................       if(flaguv==1) 
32F0:  BTFSS  18.1
32F2:  BRA    330A
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1; 
32F4:  CALL   078C
32F8:  MOVLW  C8
32FA:  MOVWF  xBB
32FC:  CALL   06D8
3300:  CALL   078C
3304:  BCF    18.1
3306:  MOVLW  01
3308:  MOVWF  31
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
330A:  BTFSS  17.1
330C:  BRA    3342
....................    { 
....................       lcd_gotoxy(1,3); 
330E:  MOVLW  01
3310:  MOVWF  xBB
3312:  MOVLW  03
3314:  MOVWF  xBC
3316:  CALL   086A
....................       printf(lcd_putc,"Luz:ON "); 
331A:  MOVLW  C8
331C:  MOVWF  FF6
331E:  MOVLW  06
3320:  MOVWF  FF7
3322:  CALL   092A
....................       Luz_Blanca_on; 
3326:  BSF    F8C.2
3328:  BCF    F95.2
....................       if(flagfl==0) 
332A:  BTFSC  18.2
332C:  BRA    3340
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1; 
332E:  CALL   078C
3332:  MOVLW  C8
3334:  MOVWF  xBB
3336:  CALL   06D8
333A:  CALL   078C
333E:  BSF    18.2
....................       } 
....................    } 
....................    else 
3340:  BRA    3374
....................    { 
....................       lcd_gotoxy(1,3); 
3342:  MOVLW  01
3344:  MOVWF  xBB
3346:  MOVLW  03
3348:  MOVWF  xBC
334A:  CALL   086A
....................       printf(lcd_putc,"Luz:OFF"); 
334E:  MOVLW  D0
3350:  MOVWF  FF6
3352:  MOVLW  06
3354:  MOVWF  FF7
3356:  CALL   092A
....................       Luz_Blanca_off; 
335A:  BCF    F8C.2
335C:  BCF    F95.2
....................       if(flagfl==1) 
335E:  BTFSS  18.2
3360:  BRA    3374
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0; 
3362:  CALL   078C
3366:  MOVLW  C8
3368:  MOVWF  xBB
336A:  CALL   06D8
336E:  CALL   078C
3372:  BCF    18.2
....................       } 
....................    } 
....................     
....................   if(DOWN)//Si oprime hacia arriba 
3374:  BSF    F96.0
3376:  BTFSS  F84.0
3378:  BRA    3394
....................    { 
....................       if(Flanco == 0) 
337A:  BTFSC  17.3
337C:  BRA    3392
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
337E:  BTG    17.1
3380:  BSF    17.3
3382:  MOVLW  02
3384:  MOVWF  xA9
3386:  MOVLW  96
3388:  MOVWF  xBB
338A:  CALL   06D8
338E:  DECFSZ xA9,F
3390:  BRA    3386
....................       } 
....................    } 
....................    else 
3392:  BRA    3396
....................    { 
....................       Flanco = 0; 
3394:  BCF    17.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3396:  BSF    F96.1
3398:  BTFSS  F84.1
339A:  BRA    33B6
....................    { 
....................       if(Flanco1 == 0) 
339C:  BTFSC  17.4
339E:  BRA    33B4
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
33A0:  BTG    17.2
33A2:  BSF    17.4
33A4:  MOVLW  02
33A6:  MOVWF  xA9
33A8:  MOVLW  96
33AA:  MOVWF  xBB
33AC:  CALL   06D8
33B0:  DECFSZ xA9,F
33B2:  BRA    33A8
....................       } 
....................    } 
....................    else 
33B4:  BRA    33B8
....................    { 
....................       Flanco1 = 0; 
33B6:  BCF    17.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
33B8:  BSF    F96.2
33BA:  BTFSS  F84.2
33BC:  BRA    33C8
....................    { 
....................       delay_ms(150);  
33BE:  MOVLW  96
33C0:  MOVWF  xBB
33C2:  CALL   06D8
....................       estadouv=!estadouv; 
33C6:  BTG    17.0
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
33C8:  BSF    F92.5
33CA:  BTFSS  F80.5
33CC:  BRA    33FA
....................    { 
....................       delay_ms(200); 
33CE:  MOVLW  C8
33D0:  MOVWF  xBB
33D2:  CALL   06D8
....................       printf(lcd_putc,"\f"); 
33D6:  MOVLW  0C
33D8:  MOVWF  xBA
33DA:  CALL   08CC
....................       delay_ms(300); 
33DE:  MOVLW  02
33E0:  MOVWF  xA9
33E2:  MOVLW  96
33E4:  MOVWF  xBB
33E6:  CALL   06D8
33EA:  DECFSZ xA9,F
33EC:  BRA    33E2
....................       Menu=1;  
33EE:  MOVLW  01
33F0:  MOVWF  19
....................       paso=0; 
33F2:  CLRF   32
....................       Flecha=2; 
33F4:  MOVLW  02
33F6:  MOVWF  1D
....................       Flecha2=2; 
33F8:  MOVWF  1F
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................    if(guardaruv==1) 
33FA:  DECFSZ 31,W
33FC:  BRA    34AC
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
33FE:  MOVLW  32
3400:  MOVWF  FA9
3402:  MOVFF  22,FA8
3406:  BCF    FA6.6
3408:  BCF    FA6.7
340A:  BSF    FA6.2
340C:  MOVF   FF2,W
340E:  MOVWF  00
3410:  BCF    FF2.7
3412:  MOVLB  F
3414:  MOVLW  55
3416:  MOVWF  FA7
3418:  MOVLW  AA
341A:  MOVWF  FA7
341C:  BSF    FA6.1
341E:  BTFSC  FA6.1
3420:  BRA    341E
3422:  BCF    FA6.2
3424:  MOVF   00,W
3426:  IORWF  FF2,F
3428:  MOVLW  33
342A:  MOVWF  FA9
342C:  MOVFF  23,FA8
3430:  BCF    FA6.6
3432:  BCF    FA6.7
3434:  BSF    FA6.2
3436:  MOVF   FF2,W
3438:  MOVWF  00
343A:  BCF    FF2.7
343C:  MOVLW  55
343E:  MOVWF  FA7
3440:  MOVLW  AA
3442:  MOVWF  FA7
3444:  BSF    FA6.1
3446:  BTFSC  FA6.1
3448:  BRA    3446
344A:  BCF    FA6.2
344C:  MOVF   00,W
344E:  IORWF  FF2,F
....................       horasL=(int8)horas; 
3450:  MOVFF  41,24
....................       horasH=(int8)(horas>>8); 
3454:  MOVF   42,W
3456:  MOVWF  25
....................       write_eeprom(52,horasL); 
3458:  MOVLW  34
345A:  MOVWF  FA9
345C:  MOVFF  24,FA8
3460:  BCF    FA6.6
3462:  BCF    FA6.7
3464:  BSF    FA6.2
3466:  MOVFF  FF2,00
346A:  BCF    FF2.7
346C:  MOVLW  55
346E:  MOVWF  FA7
3470:  MOVLW  AA
3472:  MOVWF  FA7
3474:  BSF    FA6.1
3476:  BTFSC  FA6.1
3478:  BRA    3476
347A:  BCF    FA6.2
347C:  MOVF   00,W
347E:  IORWF  FF2,F
....................       write_eeprom(53,horasH); 
3480:  MOVLW  35
3482:  MOVWF  FA9
3484:  MOVFF  25,FA8
3488:  BCF    FA6.6
348A:  BCF    FA6.7
348C:  BSF    FA6.2
348E:  MOVFF  FF2,00
3492:  BCF    FF2.7
3494:  MOVLW  55
3496:  MOVWF  FA7
3498:  MOVLW  AA
349A:  MOVWF  FA7
349C:  BSF    FA6.1
349E:  BTFSC  FA6.1
34A0:  BRA    349E
34A2:  BCF    FA6.2
34A4:  MOVF   00,W
34A6:  IORWF  FF2,F
....................       guardaruv=0; 
34A8:  CLRF   31
34AA:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
34AC:  MOVF   30,W
34AE:  SUBLW  13
34B0:  BC    34D2
....................    { 
....................       if(Menu==50){ 
34B2:  MOVF   19,W
34B4:  SUBLW  32
34B6:  BNZ   34D0
....................          lcd_init();delay_ms(200);lcd_init();delay_ms(20); 
34B8:  CALL   078C
34BC:  MOVLW  C8
34BE:  MOVWF  xBB
34C0:  CALL   06D8
34C4:  CALL   078C
34C8:  MOVLW  14
34CA:  MOVWF  xBB
34CC:  CALL   06D8
....................       } 
....................       tiemporeset=0; 
34D0:  CLRF   30
....................    }    
....................     
....................    if(segundos>=60) 
34D2:  MOVF   22,W
34D4:  SUBLW  3B
34D6:  BC    34DC
....................    { 
....................       segundos=0;minutos++; 
34D8:  CLRF   22
34DA:  INCF   23,F
....................    } 
....................    if(minutos==60) 
34DC:  MOVF   23,W
34DE:  SUBLW  3C
34E0:  BNZ   34EA
....................    { 
....................       minutos=0;horas++; 
34E2:  CLRF   23
34E4:  INCF   41,F
34E6:  BTFSC  FD8.2
34E8:  INCF   42,F
....................    } 
....................     
....................    } 
34EA:  GOTO   1C68
.................... } 
....................  
34EE:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
