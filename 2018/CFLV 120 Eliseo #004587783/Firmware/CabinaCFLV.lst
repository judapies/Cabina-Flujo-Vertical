CCS PCH C Compiler, Version 4.104, 5967               29-may.-18 14:41

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Vertical\2018\CFLV 120 Eliseo #004587783\Firmware\CabinaCFLV.lst

               ROM used: 13518 bytes (41%)
                         Largest free fragment is 19246
               RAM used: 173 (8%) at main() level
                         210 (10%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   18A8
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,VREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
06D8:  CLRF   FEA
06DA:  MOVLW  BB
06DC:  MOVWF  FE9
06DE:  MOVF   FEF,W
06E0:  BZ    06FE
06E2:  MOVLW  0F
06E4:  MOVWF  01
06E6:  CLRF   00
06E8:  DECFSZ 00,F
06EA:  BRA    06E8
06EC:  DECFSZ 01,F
06EE:  BRA    06E6
06F0:  MOVLW  8F
06F2:  MOVWF  00
06F4:  DECFSZ 00,F
06F6:  BRA    06F4
06F8:  NOP   
06FA:  DECFSZ FEF,F
06FC:  BRA    06E2
06FE:  RETLW  00
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_cycles(30); 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30); 
....................       lcd.enable = 1; 
....................       delay_us(30); 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
0700:  SWAPF  xC1,W
0702:  ANDLW  F0
0704:  MOVWF  00
0706:  MOVLW  0F
0708:  ANDWF  F81,W
070A:  IORWF  00,W
070C:  MOVWF  F81
....................       delay_cycles(30); 
070E:  MOVLW  09
0710:  MOVWF  00
0712:  DECFSZ 00,F
0714:  BRA    0712
0716:  BRA    0718
....................       lcd.enable = 1; 
0718:  BSF    F81.3
....................       delay_us(55); 
071A:  MOVLW  DB
071C:  MOVWF  00
071E:  DECFSZ 00,F
0720:  BRA    071E
0722:  BRA    0724
....................       lcd.enable = 0; 
0724:  BCF    F81.3
.................... } 
0726:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0728:  BCF    F81.1
....................       delay_cycles(30); 
072A:  MOVLW  09
072C:  MOVWF  00
072E:  DECFSZ 00,F
0730:  BRA    072E
0732:  BRA    0734
....................       lcd.rs = address; 
0734:  BTFSS  xBE.0
0736:  BCF    F81.1
0738:  BTFSC  xBE.0
073A:  BSF    F81.1
....................       delay_cycles(30); 
073C:  MOVLW  09
073E:  MOVWF  00
0740:  DECFSZ 00,F
0742:  BRA    0740
0744:  BRA    0746
....................       lcd.rw = 0; 
0746:  BCF    F81.2
....................       delay_cycles(30); 
0748:  MOVLW  09
074A:  MOVWF  00
074C:  DECFSZ 00,F
074E:  BRA    074C
0750:  BRA    0752
....................       lcd.enable = 0; 
0752:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
0754:  SWAPF  xBF,W
0756:  MOVWF  xC0
0758:  MOVLW  0F
075A:  ANDWF  xC0,F
075C:  MOVFF  C0,C1
0760:  RCALL  0700
....................       lcd_send_nibble(n & 0xf); 
0762:  MOVF   xBF,W
0764:  ANDLW  0F
0766:  MOVWF  xC0
0768:  MOVWF  xC1
076A:  RCALL  0700
.................... } 
076C:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
076E:  MOVLW  00
0770:  MOVWF  F93
....................     lcd.rs = 0; 
0772:  BCF    F81.1
....................     lcd.rw = 0; 
0774:  BCF    F81.2
....................     lcd.enable = 0; 
0776:  BCF    F81.3
....................     delay_ms(15); 
0778:  MOVLW  0F
077A:  MOVWF  xBB
077C:  RCALL  06D8
....................     for(i=1;i<=3;++i) { 
077E:  MOVLW  01
0780:  MOVWF  xA9
0782:  MOVF   xA9,W
0784:  SUBLW  03
0786:  BNC   0798
....................        lcd_send_nibble(3); 
0788:  MOVLW  03
078A:  MOVWF  xC1
078C:  RCALL  0700
....................        delay_ms(5); 
078E:  MOVLW  05
0790:  MOVWF  xBB
0792:  RCALL  06D8
....................     } 
0794:  INCF   xA9,F
0796:  BRA    0782
....................     lcd_send_nibble(2); 
0798:  MOVLW  02
079A:  MOVWF  xC1
079C:  RCALL  0700
....................     for(i=0;i<=3;++i) 
079E:  CLRF   xA9
07A0:  MOVF   xA9,W
07A2:  SUBLW  03
07A4:  BNC   07C2
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
07A6:  CLRF   03
07A8:  MOVF   xA9,W
07AA:  MOVFF  FF2,AA
07AE:  BCF    FF2.7
07B0:  RCALL  0096
07B2:  BTFSC  xAA.7
07B4:  BSF    FF2.7
07B6:  MOVWF  xAA
07B8:  CLRF   xBE
07BA:  MOVWF  xBF
07BC:  RCALL  0728
07BE:  INCF   xA9,F
07C0:  BRA    07A0
.................... } 
07C2:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
*
084C:  MOVLW  01
084E:  SUBWF  xBC,W
0850:  ADDLW  FC
0852:  BC    0872
0854:  ADDLW  04
0856:  GOTO   0882
....................      case 1 : address=0x80;break; 
085A:  MOVLW  80
085C:  MOVWF  xBD
085E:  BRA    0872
....................      case 2 : address=0xc0;break; 
0860:  MOVLW  C0
0862:  MOVWF  xBD
0864:  BRA    0872
....................      case 3 : address=0x94;break; 
0866:  MOVLW  94
0868:  MOVWF  xBD
086A:  BRA    0872
....................      case 4 : address=0xd4;break; 
086C:  MOVLW  D4
086E:  MOVWF  xBD
0870:  BRA    0872
....................    } 
....................    address+=x-1; 
0872:  MOVLW  01
0874:  SUBWF  xBB,W
0876:  ADDWF  xBD,F
....................    lcd_send_byte(0,address); 
0878:  CLRF   xBE
087A:  MOVFF  BD,BF
087E:  RCALL  0728
.................... } 
0880:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
08AE:  MOVF   xBA,W
08B0:  SUBLW  F1
08B2:  BNZ   08B8
....................    { 
....................       c=238; 
08B4:  MOVLW  EE
08B6:  MOVWF  xBA
....................    } 
....................    if(c=='Ñ') 
08B8:  MOVF   xBA,W
08BA:  SUBLW  D1
08BC:  BNZ   08C2
....................    { 
....................       c=255; 
08BE:  MOVLW  FF
08C0:  MOVWF  xBA
....................    } 
....................     
....................    switch (c) { 
08C2:  MOVF   xBA,W
08C4:  XORLW  0C
08C6:  BZ    08D2
08C8:  XORLW  06
08CA:  BZ    08E6
08CC:  XORLW  02
08CE:  BZ    08F4
08D0:  BRA    08FE
....................      case '\f'   : lcd_send_byte(0,1); 
08D2:  CLRF   xBE
08D4:  MOVLW  01
08D6:  MOVWF  xBF
08D8:  RCALL  0728
....................                    lcdline=1; 
08DA:  MOVLW  01
08DC:  MOVWF  16
....................                    delay_ms(2); 
08DE:  MOVLW  02
08E0:  MOVWF  xBB
08E2:  RCALL  06D8
....................                                            break; 
08E4:  BRA    090A
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
08E6:  INCF   16,F
08E8:  MOVLW  01
08EA:  MOVWF  xBB
08EC:  MOVFF  16,BC
08F0:  RCALL  084C
08F2:  BRA    090A
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
08F4:  CLRF   xBE
08F6:  MOVLW  10
08F8:  MOVWF  xBF
08FA:  RCALL  0728
08FC:  BRA    090A
....................      default     : lcd_send_byte(1,c);     break; 
08FE:  MOVLW  01
0900:  MOVWF  xBE
0902:  MOVFF  BA,BF
0906:  RCALL  0728
0908:  BRA    090A
....................    } 
.................... } 
090A:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
1550:  BCF    xBC.0
....................    y = x; 
1552:  MOVFF  B0,B5
1556:  MOVFF  AF,B4
155A:  MOVFF  AE,B3
155E:  MOVFF  AD,B2
....................  
....................    if (x < 0) 
1562:  MOVFF  B0,C0
1566:  MOVFF  AF,BF
156A:  MOVFF  AE,BE
156E:  MOVFF  AD,BD
1572:  CLRF   xC4
1574:  CLRF   xC3
1576:  CLRF   xC2
1578:  CLRF   xC1
157A:  RCALL  0FDA
157C:  BNC   1586
....................    { 
....................       s = 1; 
157E:  BSF    xBC.0
....................       y = -y; 
1580:  MOVF   xB3,W
1582:  XORLW  80
1584:  MOVWF  xB3
....................    } 
....................  
....................    if (y <= 32768.0) 
1586:  MOVFF  B5,C0
158A:  MOVFF  B4,BF
158E:  MOVFF  B3,BE
1592:  MOVFF  B2,BD
1596:  CLRF   xC4
1598:  CLRF   xC3
159A:  CLRF   xC2
159C:  MOVLW  8E
159E:  MOVWF  xC1
15A0:  RCALL  0FDA
15A2:  BC    15A6
15A4:  BNZ   15D6
....................   res = (float32)(unsigned int16)y; 
15A6:  MOVFF  B5,C0
15AA:  MOVFF  B4,BF
15AE:  MOVFF  B3,BE
15B2:  MOVFF  B2,BD
15B6:  RCALL  1518
15B8:  MOVFF  02,C2
15BC:  MOVFF  01,C1
15C0:  CALL   07C4
15C4:  MOVFF  03,B9
15C8:  MOVFF  02,B8
15CC:  MOVFF  01,B7
15D0:  MOVFF  00,B6
....................  
....................  else if (y < 10000000.0) 
15D4:  BRA    175E
15D6:  MOVFF  B5,C0
15DA:  MOVFF  B4,BF
15DE:  MOVFF  B3,BE
15E2:  MOVFF  B2,BD
15E6:  MOVLW  80
15E8:  MOVWF  xC4
15EA:  MOVLW  96
15EC:  MOVWF  xC3
15EE:  MOVLW  18
15F0:  MOVWF  xC2
15F2:  MOVLW  96
15F4:  MOVWF  xC1
15F6:  RCALL  0FDA
15F8:  BTFSS  FD8.0
15FA:  BRA    174E
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
15FC:  MOVFF  B5,C0
1600:  MOVFF  B4,BF
1604:  MOVFF  B3,BE
1608:  MOVFF  B2,BD
160C:  CLRF   xC4
160E:  CLRF   xC3
1610:  CLRF   xC2
1612:  MOVLW  8E
1614:  MOVWF  xC1
1616:  CALL   0C16
161A:  MOVFF  03,C0
161E:  MOVFF  02,BF
1622:  MOVFF  01,BE
1626:  MOVFF  00,BD
162A:  RCALL  1518
162C:  MOVFF  02,BB
1630:  MOVFF  01,BA
....................       y = 32768.0*(y/32768.0 - (float32)l); 
1634:  MOVFF  B5,C0
1638:  MOVFF  B4,BF
163C:  MOVFF  B3,BE
1640:  MOVFF  B2,BD
1644:  CLRF   xC4
1646:  CLRF   xC3
1648:  CLRF   xC2
164A:  MOVLW  8E
164C:  MOVWF  xC1
164E:  CALL   0C16
1652:  MOVFF  00,BD
1656:  MOVFF  01,BE
165A:  MOVFF  02,BF
165E:  MOVFF  03,C0
1662:  MOVFF  BB,C2
1666:  MOVFF  BA,C1
166A:  CALL   07C4
166E:  BSF    FD8.1
1670:  MOVFF  C0,C4
1674:  MOVFF  BF,C3
1678:  MOVFF  BE,C2
167C:  MOVFF  BD,C1
1680:  MOVFF  03,C8
1684:  MOVFF  02,C7
1688:  MOVFF  01,C6
168C:  MOVFF  00,C5
1690:  CALL   0D70
1694:  CLRF   xC0
1696:  CLRF   xBF
1698:  CLRF   xBE
169A:  MOVLW  8E
169C:  MOVWF  xBD
169E:  MOVFF  03,C4
16A2:  MOVFF  02,C3
16A6:  MOVFF  01,C2
16AA:  MOVFF  00,C1
16AE:  RCALL  11E6
16B0:  MOVFF  03,B5
16B4:  MOVFF  02,B4
16B8:  MOVFF  01,B3
16BC:  MOVFF  00,B2
....................   res = 32768.0*(float32)l; 
16C0:  MOVFF  BB,C2
16C4:  MOVFF  BA,C1
16C8:  CALL   07C4
16CC:  CLRF   xC0
16CE:  CLRF   xBF
16D0:  CLRF   xBE
16D2:  MOVLW  8E
16D4:  MOVWF  xBD
16D6:  MOVFF  03,C4
16DA:  MOVFF  02,C3
16DE:  MOVFF  01,C2
16E2:  MOVFF  00,C1
16E6:  RCALL  11E6
16E8:  MOVFF  03,B9
16EC:  MOVFF  02,B8
16F0:  MOVFF  01,B7
16F4:  MOVFF  00,B6
....................   res += (float32)(unsigned int16)y; 
16F8:  MOVFF  B5,C0
16FC:  MOVFF  B4,BF
1700:  MOVFF  B3,BE
1704:  MOVFF  B2,BD
1708:  RCALL  1518
170A:  MOVFF  02,C2
170E:  MOVFF  01,C1
1712:  CALL   07C4
1716:  BCF    FD8.1
1718:  MOVFF  B9,C4
171C:  MOVFF  B8,C3
1720:  MOVFF  B7,C2
1724:  MOVFF  B6,C1
1728:  MOVFF  03,C8
172C:  MOVFF  02,C7
1730:  MOVFF  01,C6
1734:  MOVFF  00,C5
1738:  CALL   0D70
173C:  MOVFF  03,B9
1740:  MOVFF  02,B8
1744:  MOVFF  01,B7
1748:  MOVFF  00,B6
....................  } 
....................  
....................  else 
174C:  BRA    175E
....................   res = y; 
174E:  MOVFF  B5,B9
1752:  MOVFF  B4,B8
1756:  MOVFF  B3,B7
175A:  MOVFF  B2,B6
....................  
....................  y = y - (float32)(unsigned int16)y; 
175E:  MOVFF  B5,C0
1762:  MOVFF  B4,BF
1766:  MOVFF  B3,BE
176A:  MOVFF  B2,BD
176E:  RCALL  1518
1770:  MOVFF  02,C2
1774:  MOVFF  01,C1
1778:  CALL   07C4
177C:  BSF    FD8.1
177E:  MOVFF  B5,C4
1782:  MOVFF  B4,C3
1786:  MOVFF  B3,C2
178A:  MOVFF  B2,C1
178E:  MOVFF  03,C8
1792:  MOVFF  02,C7
1796:  MOVFF  01,C6
179A:  MOVFF  00,C5
179E:  CALL   0D70
17A2:  MOVFF  03,B5
17A6:  MOVFF  02,B4
17AA:  MOVFF  01,B3
17AE:  MOVFF  00,B2
....................  
....................  if (s) 
17B2:  BTFSS  xBC.0
17B4:  BRA    17BC
....................   res = -res; 
17B6:  MOVF   xB7,W
17B8:  XORLW  80
17BA:  MOVWF  xB7
....................  
....................  if (y != 0) 
17BC:  MOVFF  B5,C0
17C0:  MOVFF  B4,BF
17C4:  MOVFF  B3,BE
17C8:  MOVFF  B2,BD
17CC:  CLRF   xC4
17CE:  CLRF   xC3
17D0:  CLRF   xC2
17D2:  CLRF   xC1
17D4:  RCALL  0FDA
17D6:  BZ    1848
....................  { 
....................   if (s == 1 && n == 0) 
17D8:  BTFSS  xBC.0
17DA:  BRA    1810
17DC:  MOVF   xB1,F
17DE:  BNZ   1810
....................    res -= 1.0; 
17E0:  BSF    FD8.1
17E2:  MOVFF  B9,C4
17E6:  MOVFF  B8,C3
17EA:  MOVFF  B7,C2
17EE:  MOVFF  B6,C1
17F2:  CLRF   xC8
17F4:  CLRF   xC7
17F6:  CLRF   xC6
17F8:  MOVLW  7F
17FA:  MOVWF  xC5
17FC:  CALL   0D70
1800:  MOVFF  03,B9
1804:  MOVFF  02,B8
1808:  MOVFF  01,B7
180C:  MOVFF  00,B6
....................  
....................   if (s == 0 && n == 1) 
1810:  BTFSC  xBC.0
1812:  BRA    1848
1814:  DECFSZ xB1,W
1816:  BRA    1848
....................    res += 1.0; 
1818:  BCF    FD8.1
181A:  MOVFF  B9,C4
181E:  MOVFF  B8,C3
1822:  MOVFF  B7,C2
1826:  MOVFF  B6,C1
182A:  CLRF   xC8
182C:  CLRF   xC7
182E:  CLRF   xC6
1830:  MOVLW  7F
1832:  MOVWF  xC5
1834:  CALL   0D70
1838:  MOVFF  03,B9
183C:  MOVFF  02,B8
1840:  MOVFF  01,B7
1844:  MOVFF  00,B6
....................  } 
....................  if (x == 0) 
1848:  MOVFF  B0,C0
184C:  MOVFF  AF,BF
1850:  MOVFF  AE,BE
1854:  MOVFF  AD,BD
1858:  CLRF   xC4
185A:  CLRF   xC3
185C:  CLRF   xC2
185E:  CLRF   xC1
1860:  CALL   0FDA
1864:  BNZ   186E
....................     res = 0; 
1866:  CLRF   xB9
1868:  CLRF   xB8
186A:  CLRF   xB7
186C:  CLRF   xB6
....................  
....................  return (res); 
186E:  MOVFF  B6,00
1872:  MOVFF  B7,01
1876:  MOVFF  B8,02
187A:  MOVFF  B9,03
.................... } 
187E:  GOTO   1896 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
1882:  MOVFF  AC,B0
1886:  MOVFF  AB,AF
188A:  MOVFF  AA,AE
188E:  MOVFF  A9,AD
1892:  CLRF   xB1
1894:  BRA    1550
.................... } 
1896:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NC 
.................... #define   UP            input(PIN_A5) 
.................... #define   DOWN          input(PIN_E0) 
.................... #define   RIGHT         input(PIN_E1) 
.................... #define   IZQU          input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D1,1) 
.................... #define   Luz_UV_off        output_bit(PIN_D1,0) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D2,1) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D2,0) 
.................... #define   Motor_L1_on       output_bit(PIN_D3,1) 
.................... #define   Motor_L1_off      output_bit(PIN_D3,0) 
.................... #define   Buzzer_on         output_bit(PIN_D0,1) 
.................... #define   Buzzer_off        output_bit(PIN_D0,0) 
....................  
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    tiempos++; 
00BC:  INCF   3F,F
00BE:  BTFSC  FD8.2
00C0:  INCF   40,F
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00C2:  MOVF   40,F
00C4:  BNZ   00CC
00C6:  MOVF   3F,W
00C8:  SUBLW  C7
00CA:  BC    011A
....................    {tiempos=0;tiemporeset++;Lectura=1; 
00CC:  CLRF   40
00CE:  CLRF   3F
00D0:  INCF   30,F
00D2:  BSF    18.0
....................     
....................    if(ActivaBuzzer==1) 
00D4:  DECFSZ 3E,W
00D6:  BRA    00EC
....................    { 
....................       if(estadobuzzer==0) 
00D8:  BTFSC  18.3
00DA:  BRA    00E2
....................       { 
....................          Buzzer_off; 
00DC:  BCF    F8C.0
00DE:  BCF    F95.0
....................       } 
....................       else 
00E0:  BRA    00EA
....................       { 
....................          if(estadoalarma==1) 
00E2:  BTFSS  18.4
00E4:  BRA    00EA
....................             Buzzer_on; 
00E6:  BSF    F8C.0
00E8:  BCF    F95.0
....................       } 
....................       estadobuzzer=!estadobuzzer; 
00EA:  BTG    18.3
....................    } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00EC:  BTFSS  17.0
00EE:  BRA    011A
....................    { 
....................       segundos++; 
00F0:  INCF   22,F
....................       if(tiempo_cumplido==0) 
00F2:  BTFSC  17.7
00F4:  BRA    011A
....................       { 
....................          if(tempo_segundos>0) 
00F6:  MOVF   29,F
00F8:  BZ    00FE
....................          { 
....................             tempo_segundos--; 
00FA:  DECF   29,F
....................          } 
....................          else 
00FC:  BRA    011A
....................          { 
....................             if(tempo_minutos>0) 
00FE:  MOVF   28,F
0100:  BZ    010A
....................             { 
....................                tempo_minutos--; 
0102:  DECF   28,F
....................                tempo_segundos=59; 
0104:  MOVLW  3B
0106:  MOVWF  29
....................             } 
....................             else 
0108:  BRA    011A
....................             { 
....................                tiempo_cumplido=1; 
010A:  BSF    17.7
....................                estadouv=0;Luz_UV_off; 
010C:  BCF    17.0
010E:  BCF    F8C.1
0110:  BCF    F95.1
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
0112:  MOVFF  2A,28
0116:  MOVFF  2B,29
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
011A:  BCF    F9E.0
011C:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0A5E:  DECFSZ xAA,W
0A60:  BRA    0A76
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0A62:  MOVLW  02
0A64:  MOVWF  xBB
0A66:  MOVFF  AB,BC
0A6A:  RCALL  084C
0A6C:  MOVLW  20
0A6E:  MOVWF  FF6
0A70:  MOVLW  01
0A72:  MOVWF  FF7
0A74:  RCALL  090C
....................    if(x==2) 
0A76:  MOVF   xAA,W
0A78:  SUBLW  02
0A7A:  BNZ   0A90
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0A7C:  MOVLW  02
0A7E:  MOVWF  xBB
0A80:  MOVFF  AB,BC
0A84:  RCALL  084C
0A86:  MOVLW  34
0A88:  MOVWF  FF6
0A8A:  MOVLW  01
0A8C:  MOVWF  FF7
0A8E:  RCALL  090C
....................    if(x==3) 
0A90:  MOVF   xAA,W
0A92:  SUBLW  03
0A94:  BNZ   0AAA
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0A96:  MOVLW  02
0A98:  MOVWF  xBB
0A9A:  MOVFF  AB,BC
0A9E:  RCALL  084C
0AA0:  MOVLW  48
0AA2:  MOVWF  FF6
0AA4:  MOVLW  01
0AA6:  MOVWF  FF7
0AA8:  RCALL  090C
....................    if(x==4) 
0AAA:  MOVF   xAA,W
0AAC:  SUBLW  04
0AAE:  BNZ   0AC4
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0AB0:  MOVLW  02
0AB2:  MOVWF  xBB
0AB4:  MOVFF  AB,BC
0AB8:  RCALL  084C
0ABA:  MOVLW  5C
0ABC:  MOVWF  FF6
0ABE:  MOVLW  01
0AC0:  MOVWF  FF7
0AC2:  RCALL  090C
....................     
....................    if(x==5) 
0AC4:  MOVF   xAA,W
0AC6:  SUBLW  05
0AC8:  BNZ   0AFA
....................    {if(estadoalarma==0) 
0ACA:  BTFSC  18.4
0ACC:  BRA    0AE2
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0ACE:  MOVLW  02
0AD0:  MOVWF  xBB
0AD2:  MOVFF  AB,BC
0AD6:  RCALL  084C
0AD8:  MOVLW  70
0ADA:  MOVWF  FF6
0ADC:  MOVLW  01
0ADE:  MOVWF  FF7
0AE0:  RCALL  090C
....................    if(estadoalarma==1) 
0AE2:  BTFSS  18.4
0AE4:  BRA    0AFA
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0AE6:  MOVLW  02
0AE8:  MOVWF  xBB
0AEA:  MOVFF  AB,BC
0AEE:  RCALL  084C
0AF0:  MOVLW  84
0AF2:  MOVWF  FF6
0AF4:  MOVLW  01
0AF6:  MOVWF  FF7
0AF8:  RCALL  090C
....................    } 
.................... } 
0AFA:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
1898:  MOVF   xA9,F
189A:  BNZ   18A2
....................    { 
....................       Motor_L1_off; 
189C:  BCF    F8C.3
189E:  BCF    F95.3
....................    } 
....................    else 
18A0:  BRA    18A6
....................    { 
....................       Motor_L1_on; 
18A2:  BSF    F8C.3
18A4:  BCF    F95.3
....................    } 
.................... } 
18A6:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
07FA:  RLCF   xAE,W
07FC:  MOVWF  00
07FE:  RLCF   00,F
0800:  MOVLW  FC
0802:  ANDWF  00,F
0804:  MOVFF  00,01
0808:  MOVF   FC2,W
080A:  ANDLW  C3
080C:  IORWF  00,W
080E:  MOVWF  FC2
0810:  MOVLW  0A
0812:  MOVWF  xBB
0814:  RCALL  06D8
0816:  BSF    FC2.1
0818:  BTFSC  FC2.1
081A:  BRA    0818
081C:  MOVFF  FC4,03
0820:  MOVFF  FC3,C1
0824:  MOVFF  FC4,C2
0828:  RCALL  07C4
082A:  MOVFF  03,B2
082E:  MOVFF  02,B1
0832:  MOVFF  01,B0
0836:  MOVFF  00,AF
083A:  MOVFF  AF,00
083E:  MOVFF  B0,01
0842:  MOVFF  B1,02
0846:  MOVFF  B2,03
.................... } 
084A:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
1050:  CLRF   xAD
1052:  CLRF   xAC
1054:  CLRF   xAB
1056:  CLRF   xAA
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
1058:  CLRF   xAE
105A:  CALL   07FA
105E:  MOVFF  03,98
1062:  MOVFF  02,97
1066:  MOVFF  01,96
106A:  MOVFF  00,95
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
106E:  MOVFF  98,C0
1072:  MOVFF  97,BF
1076:  MOVFF  96,BE
107A:  MOVFF  95,BD
107E:  MOVFF  A8,C4
1082:  MOVFF  A7,C3
1086:  MOVFF  A6,C2
108A:  MOVFF  A5,C1
108E:  RCALL  0C16
1090:  MOVFF  00,AE
1094:  MOVFF  01,AF
1098:  MOVFF  02,B0
109C:  MOVFF  03,B1
10A0:  BSF    FD8.1
10A2:  MOVFF  03,C4
10A6:  MOVFF  02,C3
10AA:  MOVFF  01,C2
10AE:  MOVFF  00,C1
10B2:  CLRF   xC8
10B4:  CLRF   xC7
10B6:  CLRF   xC6
10B8:  MOVLW  7F
10BA:  MOVWF  xC5
10BC:  RCALL  0D70
10BE:  MOVFF  03,9C
10C2:  MOVFF  02,9B
10C6:  MOVFF  01,9A
10CA:  MOVFF  00,99
....................     
....................    if(Presion<0.0) 
10CE:  MOVFF  9C,C0
10D2:  MOVFF  9B,BF
10D6:  MOVFF  9A,BE
10DA:  MOVFF  99,BD
10DE:  CLRF   xC4
10E0:  CLRF   xC3
10E2:  CLRF   xC2
10E4:  CLRF   xC1
10E6:  RCALL  0FDA
10E8:  BNC   10F2
....................    { 
....................       Presion=0.0; 
10EA:  CLRF   x9C
10EC:  CLRF   x9B
10EE:  CLRF   x9A
10F0:  CLRF   x99
....................    } 
....................  
....................    if(r>media-1) 
10F2:  MOVLW  01
10F4:  SUBWF  xA9,W
10F6:  SUBWF  2C,W
10F8:  BZ    10FE
10FA:  BNC   10FE
....................    {r=0;} 
10FC:  CLRF   2C
....................    PromPresion[r]=Presion;r++; 
10FE:  MOVF   2C,W
1100:  MULLW  04
1102:  MOVF   FF3,W
1104:  CLRF   03
1106:  ADDLW  45
1108:  MOVWF  FE9
110A:  MOVLW  00
110C:  ADDWFC 03,W
110E:  MOVWF  FEA
1110:  MOVFF  99,FEF
1114:  MOVFF  9A,FEC
1118:  MOVFF  9B,FEC
111C:  MOVFF  9C,FEC
1120:  INCF   2C,F
....................           
....................    for(q=0;q<=(media-1);q++) 
1122:  CLRF   2D
1124:  MOVLW  01
1126:  SUBWF  xA9,W
1128:  SUBWF  2D,W
112A:  BZ    112E
112C:  BC    1198
....................    { 
....................       promediopresion+=PromPresion[q]; 
112E:  MOVF   2D,W
1130:  MULLW  04
1132:  MOVF   FF3,W
1134:  CLRF   03
1136:  ADDLW  45
1138:  MOVWF  FE9
113A:  MOVLW  00
113C:  ADDWFC 03,W
113E:  MOVWF  FEA
1140:  MOVFF  FEF,00
1144:  MOVFF  FEC,01
1148:  MOVFF  FEC,02
114C:  MOVFF  FEC,03
1150:  MOVFF  FEA,AF
1154:  MOVFF  FE9,AE
1158:  BCF    FD8.1
115A:  MOVFF  AD,C4
115E:  MOVFF  AC,C3
1162:  MOVFF  AB,C2
1166:  MOVFF  AA,C1
116A:  MOVFF  03,C8
116E:  MOVFF  02,C7
1172:  MOVFF  01,C6
1176:  MOVFF  00,C5
117A:  RCALL  0D70
117C:  MOVFF  AF,FEA
1180:  MOVFF  AE,FE9
1184:  MOVFF  03,AD
1188:  MOVFF  02,AC
118C:  MOVFF  01,AB
1190:  MOVFF  00,AA
....................    }  
1194:  INCF   2D,F
1196:  BRA    1124
....................    promediopresion=promediopresion/media;    
1198:  CLRF   xC2
119A:  MOVFF  A9,C1
119E:  CALL   07C4
11A2:  MOVFF  AD,C0
11A6:  MOVFF  AC,BF
11AA:  MOVFF  AB,BE
11AE:  MOVFF  AA,BD
11B2:  MOVFF  03,C4
11B6:  MOVFF  02,C3
11BA:  MOVFF  01,C2
11BE:  MOVFF  00,C1
11C2:  RCALL  0C16
11C4:  MOVFF  03,AD
11C8:  MOVFF  02,AC
11CC:  MOVFF  01,AB
11D0:  MOVFF  00,AA
....................     
....................    return promediopresion; 
11D4:  MOVFF  AA,00
11D8:  MOVFF  AB,01
11DC:  MOVFF  AC,02
11E0:  MOVFF  AD,03
.................... } 
11E4:  RETLW  00
....................  
.................... void Limita(void){ 
....................     
....................    if(Contrasena[0]>9) 
*
092C:  MOVF   3A,W
092E:  SUBLW  09
0930:  BC    0934
....................       Contrasena[0]=0; 
0932:  CLRF   3A
....................    if(Contrasena[1]>9) 
0934:  MOVF   3B,W
0936:  SUBLW  09
0938:  BC    093C
....................       Contrasena[1]=0; 
093A:  CLRF   3B
....................    if(Contrasena[2]>9) 
093C:  MOVF   3C,W
093E:  SUBLW  09
0940:  BC    0944
....................       Contrasena[2]=0; 
0942:  CLRF   3C
....................    if(Contrasena[3]>9) 
0944:  MOVF   3D,W
0946:  SUBLW  09
0948:  BC    094C
....................       Contrasena[3]=0; 
094A:  CLRF   3D
....................    /*if(tempo_minutos>60) 
....................       tempo_minutos=0; 
....................    if(tempo_segundos) 
....................       tempo_segundos=0; 
....................    if(segundos>60) 
....................       segundos=0; 
....................    if(minutos>60) 
....................       minutos=0;*/  
.................... } 
094C:  GOTO   1C3A (RETURN)
.................... void main () 
.................... { 
*
18A8:  CLRF   FF8
18AA:  BCF    FD0.7
18AC:  BSF    07.7
18AE:  CLRF   FEA
18B0:  CLRF   FE9
18B2:  BCF    17.0
18B4:  BCF    17.1
18B6:  BCF    17.2
18B8:  BCF    17.3
18BA:  BCF    17.4
18BC:  BCF    17.5
18BE:  BCF    17.6
18C0:  BCF    17.7
18C2:  BCF    18.0
18C4:  BCF    18.1
18C6:  BCF    18.2
18C8:  BCF    18.3
18CA:  BCF    18.4
18CC:  CLRF   19
18CE:  MOVLW  06
18D0:  MOVWF  1A
18D2:  MOVLW  02
18D4:  MOVWF  1B
18D6:  MOVLW  0B
18D8:  MOVWF  1C
18DA:  MOVLW  02
18DC:  MOVWF  1D
18DE:  MOVLW  03
18E0:  MOVWF  1E
18E2:  MOVLW  02
18E4:  MOVWF  1F
18E6:  MOVWF  20
18E8:  MOVLW  04
18EA:  MOVWF  21
18EC:  CLRF   22
18EE:  CLRF   23
18F0:  CLRF   24
18F2:  CLRF   25
18F4:  CLRF   26
18F6:  CLRF   27
18F8:  CLRF   28
18FA:  CLRF   29
18FC:  CLRF   2A
18FE:  CLRF   2B
1900:  CLRF   2C
1902:  CLRF   2D
1904:  CLRF   2E
1906:  MOVLW  01
1908:  MOVWF  2F
190A:  CLRF   30
190C:  CLRF   31
190E:  CLRF   32
1910:  CLRF   3E
1912:  CLRF   42
1914:  CLRF   41
1916:  CLRF   44
1918:  CLRF   43
191A:  CLRF   x98
191C:  CLRF   x97
191E:  CLRF   x96
1920:  CLRF   x95
1922:  CLRF   x9C
1924:  CLRF   x9B
1926:  CLRF   x9A
1928:  CLRF   x99
192A:  CLRF   xA0
192C:  CLRF   x9F
192E:  CLRF   x9E
1930:  CLRF   x9D
1932:  CLRF   xA4
1934:  CLRF   xA3
1936:  CLRF   xA2
1938:  CLRF   xA1
193A:  CLRF   xA8
193C:  CLRF   xA7
193E:  CLRF   xA6
1940:  MOVLW  80
1942:  MOVWF  xA5
1944:  MOVF   FC1,W
1946:  ANDLW  C0
1948:  IORLW  0F
194A:  MOVWF  FC1
194C:  MOVLW  07
194E:  MOVWF  FB4
1950:  MOVLW  3E
1952:  MOVWF  33
1954:  MOVLW  20
1956:  MOVWF  34
1958:  MOVLW  5E
195A:  MOVWF  35
195C:  CLRF   36
195E:  CLRF   37
1960:  CLRF   38
1962:  CLRF   39
1964:  CLRF   3A
1966:  CLRF   3B
1968:  CLRF   3C
196A:  CLRF   3D
196C:  CLRF   45
196E:  CLRF   46
1970:  CLRF   47
1972:  CLRF   48
1974:  CLRF   49
1976:  CLRF   4A
1978:  CLRF   4B
197A:  CLRF   4C
197C:  CLRF   4D
197E:  CLRF   4E
1980:  CLRF   4F
1982:  CLRF   50
1984:  CLRF   51
1986:  CLRF   52
1988:  CLRF   53
198A:  CLRF   54
198C:  CLRF   55
198E:  CLRF   56
1990:  CLRF   57
1992:  CLRF   58
1994:  CLRF   59
1996:  CLRF   5A
1998:  CLRF   5B
199A:  CLRF   5C
199C:  CLRF   5D
199E:  CLRF   5E
19A0:  CLRF   5F
19A2:  CLRF   x60
19A4:  CLRF   x61
19A6:  CLRF   x62
19A8:  CLRF   x63
19AA:  CLRF   x64
19AC:  CLRF   x65
19AE:  CLRF   x66
19B0:  CLRF   x67
19B2:  CLRF   x68
19B4:  CLRF   x69
19B6:  CLRF   x6A
19B8:  CLRF   x6B
19BA:  CLRF   x6C
19BC:  CLRF   x6D
19BE:  CLRF   x6E
19C0:  CLRF   x6F
19C2:  CLRF   x70
19C4:  CLRF   x71
19C6:  CLRF   x72
19C8:  CLRF   x73
19CA:  CLRF   x74
19CC:  CLRF   x75
19CE:  CLRF   x76
19D0:  CLRF   x77
19D2:  CLRF   x78
19D4:  CLRF   x79
19D6:  CLRF   x7A
19D8:  CLRF   x7B
19DA:  CLRF   x7C
19DC:  CLRF   x7D
19DE:  CLRF   x7E
19E0:  CLRF   x7F
19E2:  CLRF   x80
19E4:  CLRF   x81
19E6:  CLRF   x82
19E8:  CLRF   x83
19EA:  CLRF   x84
19EC:  CLRF   x85
19EE:  CLRF   x86
19F0:  CLRF   x87
19F2:  CLRF   x88
19F4:  CLRF   x89
19F6:  CLRF   x8A
19F8:  CLRF   x8B
19FA:  CLRF   x8C
19FC:  CLRF   x8D
19FE:  CLRF   x8E
1A00:  CLRF   x8F
1A02:  CLRF   x90
1A04:  CLRF   x91
1A06:  CLRF   x92
1A08:  CLRF   x93
1A0A:  CLRF   x94
....................    lcd_init(); 
1A0C:  CALL   076E
....................    set_tris_a(0XFF); 
1A10:  MOVLW  FF
1A12:  MOVWF  F92
....................    set_tris_e(0XFF); 
1A14:  MOVWF  F96
....................    set_tris_d(0X00); 
1A16:  MOVLW  00
1A18:  MOVWF  F95
....................    output_d(0); 
1A1A:  CLRF   F95
1A1C:  CLRF   F8C
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1A1E:  MOVLW  85
1A20:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1A22:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
1A24:  MOVF   FC1,W
1A26:  ANDLW  C0
1A28:  IORLW  0E
1A2A:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1A2C:  BCF    FC0.0
1A2E:  BSF    FC0.1
1A30:  BCF    FC0.2
1A32:  BSF    FC0.7
1A34:  BSF    FC2.0
....................    enable_interrupts(global); 
1A36:  MOVLW  C0
1A38:  IORWF  FF2,F
....................    sensores(0); 
1A3A:  CLRF   xAE
1A3C:  CALL   07FA
....................    lcd_gotoxy(1,1); 
1A40:  MOVLW  01
1A42:  MOVWF  xBB
1A44:  MOVWF  xBC
1A46:  CALL   084C
....................    printf(lcd_putc," CABINA  DE   FLUJO "); 
1A4A:  MOVLW  98
1A4C:  MOVWF  FF6
1A4E:  MOVLW  01
1A50:  MOVWF  FF7
1A52:  CALL   090C
....................    lcd_gotoxy(1,2); 
1A56:  MOVLW  01
1A58:  MOVWF  xBB
1A5A:  MOVLW  02
1A5C:  MOVWF  xBC
1A5E:  CALL   084C
....................    printf(lcd_putc,"  LAMINAR  VERTICAL "); 
1A62:  MOVLW  AE
1A64:  MOVWF  FF6
1A66:  MOVLW  01
1A68:  MOVWF  FF7
1A6A:  CALL   090C
....................    lcd_gotoxy(1,3); 
1A6E:  MOVLW  01
1A70:  MOVWF  xBB
1A72:  MOVLW  03
1A74:  MOVWF  xBC
1A76:  CALL   084C
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1A7A:  MOVLW  C4
1A7C:  MOVWF  FF6
1A7E:  MOVLW  01
1A80:  MOVWF  FF7
1A82:  CALL   090C
....................    lcd_gotoxy(1,4); 
1A86:  MOVLW  01
1A88:  MOVWF  xBB
1A8A:  MOVLW  04
1A8C:  MOVWF  xBC
1A8E:  CALL   084C
....................    printf(lcd_putc,"   REF:  JPCFLV120  "); 
1A92:  MOVLW  DA
1A94:  MOVWF  FF6
1A96:  MOVLW  01
1A98:  MOVWF  FF7
1A9A:  CALL   090C
....................    delay_ms(2000); 
1A9E:  MOVLW  08
1AA0:  MOVWF  xA9
1AA2:  MOVLW  FA
1AA4:  MOVWF  xBB
1AA6:  CALL   06D8
1AAA:  DECFSZ xA9,F
1AAC:  BRA    1AA2
....................    printf(lcd_putc,"\f");    
1AAE:  MOVLW  0C
1AB0:  MOVWF  xBA
1AB2:  CALL   08AE
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0);delay_ms(20); contrasena[1]=read_eeprom(1);delay_ms(20); 
1AB6:  MOVFF  FF2,A9
1ABA:  BCF    FF2.7
1ABC:  CLRF   FA9
1ABE:  BCF    FA6.6
1AC0:  BCF    FA6.7
1AC2:  BSF    FA6.0
1AC4:  MOVF   FA8,W
1AC6:  BTFSC  xA9.7
1AC8:  BSF    FF2.7
1ACA:  MOVWF  3A
1ACC:  MOVLW  14
1ACE:  MOVWF  xBB
1AD0:  CALL   06D8
1AD4:  MOVFF  FF2,A9
1AD8:  BCF    FF2.7
1ADA:  MOVLW  01
1ADC:  MOVWF  FA9
1ADE:  BCF    FA6.6
1AE0:  BCF    FA6.7
1AE2:  BSF    FA6.0
1AE4:  MOVF   FA8,W
1AE6:  BTFSC  xA9.7
1AE8:  BSF    FF2.7
1AEA:  MOVWF  3B
1AEC:  MOVLW  14
1AEE:  MOVWF  xBB
1AF0:  CALL   06D8
....................    contrasena[2]=read_eeprom(2);delay_ms(20); contrasena[3]=read_eeprom(3);delay_ms(20); 
1AF4:  MOVFF  FF2,A9
1AF8:  BCF    FF2.7
1AFA:  MOVLW  02
1AFC:  MOVWF  FA9
1AFE:  BCF    FA6.6
1B00:  BCF    FA6.7
1B02:  BSF    FA6.0
1B04:  MOVF   FA8,W
1B06:  BTFSC  xA9.7
1B08:  BSF    FF2.7
1B0A:  MOVWF  3C
1B0C:  MOVLW  14
1B0E:  MOVWF  xBB
1B10:  CALL   06D8
1B14:  MOVFF  FF2,A9
1B18:  BCF    FF2.7
1B1A:  MOVLW  03
1B1C:  MOVWF  FA9
1B1E:  BCF    FA6.6
1B20:  BCF    FA6.7
1B22:  BSF    FA6.0
1B24:  MOVF   FA8,W
1B26:  BTFSC  xA9.7
1B28:  BSF    FF2.7
1B2A:  MOVWF  3D
1B2C:  MOVLW  14
1B2E:  MOVWF  xBB
1B30:  CALL   06D8
....................    estadoalarma=read_eeprom(5); 
1B34:  MOVFF  FF2,A9
1B38:  BCF    FF2.7
1B3A:  MOVLW  05
1B3C:  MOVWF  FA9
1B3E:  BCF    FA6.6
1B40:  BCF    FA6.7
1B42:  BSF    FA6.0
1B44:  MOVF   FA8,W
1B46:  BTFSC  xA9.7
1B48:  BSF    FF2.7
1B4A:  MOVWF  01
1B4C:  BCF    18.4
1B4E:  BTFSC  01.0
1B50:  BSF    18.4
....................    tempo_minutos=read_eeprom(20);tempo_segundos=read_eeprom(30); 
1B52:  MOVFF  FF2,A9
1B56:  BCF    FF2.7
1B58:  MOVLW  14
1B5A:  MOVWF  FA9
1B5C:  BCF    FA6.6
1B5E:  BCF    FA6.7
1B60:  BSF    FA6.0
1B62:  MOVF   FA8,W
1B64:  BTFSC  xA9.7
1B66:  BSF    FF2.7
1B68:  MOVWF  28
1B6A:  MOVFF  FF2,A9
1B6E:  BCF    FF2.7
1B70:  MOVLW  1E
1B72:  MOVWF  FA9
1B74:  BCF    FA6.6
1B76:  BCF    FA6.7
1B78:  BSF    FA6.0
1B7A:  MOVF   FA8,W
1B7C:  BTFSC  xA9.7
1B7E:  BSF    FF2.7
1B80:  MOVWF  29
....................    segundos=read_eeprom(50);minutos=read_eeprom(51);horasL=read_eeprom(52);horasH=read_eeprom(53);  
1B82:  MOVFF  FF2,A9
1B86:  BCF    FF2.7
1B88:  MOVLW  32
1B8A:  MOVWF  FA9
1B8C:  BCF    FA6.6
1B8E:  BCF    FA6.7
1B90:  BSF    FA6.0
1B92:  MOVF   FA8,W
1B94:  BTFSC  xA9.7
1B96:  BSF    FF2.7
1B98:  MOVWF  22
1B9A:  MOVFF  FF2,A9
1B9E:  BCF    FF2.7
1BA0:  MOVLW  33
1BA2:  MOVWF  FA9
1BA4:  BCF    FA6.6
1BA6:  BCF    FA6.7
1BA8:  BSF    FA6.0
1BAA:  MOVF   FA8,W
1BAC:  BTFSC  xA9.7
1BAE:  BSF    FF2.7
1BB0:  MOVWF  23
1BB2:  MOVFF  FF2,A9
1BB6:  BCF    FF2.7
1BB8:  MOVLW  34
1BBA:  MOVWF  FA9
1BBC:  BCF    FA6.6
1BBE:  BCF    FA6.7
1BC0:  BSF    FA6.0
1BC2:  MOVF   FA8,W
1BC4:  BTFSC  xA9.7
1BC6:  BSF    FF2.7
1BC8:  MOVWF  24
1BCA:  MOVFF  FF2,A9
1BCE:  BCF    FF2.7
1BD0:  MOVLW  35
1BD2:  MOVWF  FA9
1BD4:  BCF    FA6.6
1BD6:  BCF    FA6.7
1BD8:  BSF    FA6.0
1BDA:  MOVF   FA8,W
1BDC:  BTFSC  xA9.7
1BDE:  BSF    FF2.7
1BE0:  MOVWF  25
....................     
....................    G_l=read_eeprom(60); 
1BE2:  MOVFF  FF2,A9
1BE6:  BCF    FF2.7
1BE8:  MOVLW  3C
1BEA:  MOVWF  FA9
1BEC:  BCF    FA6.6
1BEE:  BCF    FA6.7
1BF0:  BSF    FA6.0
1BF2:  MOVF   FA8,W
1BF4:  BTFSC  xA9.7
1BF6:  BSF    FF2.7
1BF8:  MOVWF  26
....................    G_h=read_eeprom(61); 
1BFA:  MOVFF  FF2,A9
1BFE:  BCF    FF2.7
1C00:  MOVLW  3D
1C02:  MOVWF  FA9
1C04:  BCF    FA6.6
1C06:  BCF    FA6.7
1C08:  BSF    FA6.0
1C0A:  MOVF   FA8,W
1C0C:  BTFSC  xA9.7
1C0E:  BSF    FF2.7
1C10:  MOVWF  27
....................    G16=make16(G_h,G_l); 
1C12:  MOVFF  27,44
1C16:  MOVFF  26,43
....................    G=G16; 
1C1A:  MOVFF  44,C2
1C1E:  MOVFF  43,C1
1C22:  CALL   07C4
1C26:  MOVFF  03,A8
1C2A:  MOVFF  02,A7
1C2E:  MOVFF  01,A6
1C32:  MOVFF  00,A5
....................  
....................    Limita(); 
1C36:  GOTO   092C
....................    horas=make16(horasH,horasL); 
1C3A:  MOVFF  25,42
1C3E:  MOVFF  24,41
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1C42:  MOVFF  28,2A
1C46:  MOVFF  29,2B
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1C4A:  MOVF   19,F
1C4C:  BTFSS  FD8.2
1C4E:  BRA    2000
....................    lcd_gotoxy(1,1); 
1C50:  MOVLW  01
1C52:  MOVWF  xBB
1C54:  MOVWF  xBC
1C56:  CALL   084C
....................    printf(lcd_putc,"     Ingrese        "); 
1C5A:  MOVLW  F0
1C5C:  MOVWF  FF6
1C5E:  MOVLW  01
1C60:  MOVWF  FF7
1C62:  CALL   090C
....................    lcd_gotoxy(1,2); 
1C66:  MOVLW  01
1C68:  MOVWF  xBB
1C6A:  MOVLW  02
1C6C:  MOVWF  xBC
1C6E:  CALL   084C
....................    printf(lcd_putc,"    Contraseña      "); 
1C72:  MOVLW  06
1C74:  MOVWF  FF6
1C76:  MOVLW  02
1C78:  MOVWF  FF7
1C7A:  CALL   090C
....................    lcd_gotoxy(1,3); 
1C7E:  MOVLW  01
1C80:  MOVWF  xBB
1C82:  MOVLW  03
1C84:  MOVWF  xBC
1C86:  CALL   084C
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1C8A:  MOVLW  1C
1C8C:  MOVWF  FF6
1C8E:  MOVLW  02
1C90:  MOVWF  FF7
1C92:  MOVLW  0A
1C94:  MOVWF  xAD
1C96:  CALL   0950
1C9A:  MOVFF  36,A9
1C9E:  MOVLW  1F
1CA0:  MOVWF  xAA
1CA2:  CALL   0996
1CA6:  MOVFF  37,A9
1CAA:  MOVLW  1F
1CAC:  MOVWF  xAA
1CAE:  CALL   0996
1CB2:  MOVFF  38,A9
1CB6:  MOVLW  1F
1CB8:  MOVWF  xAA
1CBA:  CALL   0996
1CBE:  MOVFF  39,A9
1CC2:  MOVLW  1F
1CC4:  MOVWF  xAA
1CC6:  CALL   0996
1CCA:  MOVLW  20
1CCC:  MOVWF  xBA
1CCE:  CALL   08AE
1CD2:  MOVLW  20
1CD4:  MOVWF  xBA
1CD6:  CALL   08AE
....................     
....................        
....................       if(UP)//Si oprime hacia arriba 
1CDA:  BSF    F92.5
1CDC:  BTFSS  F80.5
1CDE:  BRA    1D02
....................       {  if(Flanco == 0)  
1CE0:  BTFSC  17.3
1CE2:  BRA    1D00
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
1CE4:  MOVLW  0B
1CE6:  SUBWF  1C,W
1CE8:  CLRF   03
1CEA:  ADDLW  36
1CEC:  MOVWF  FE9
1CEE:  MOVLW  00
1CF0:  ADDWFC 03,W
1CF2:  MOVWF  FEA
1CF4:  INCF   FEF,F
1CF6:  BSF    17.3
1CF8:  MOVLW  1E
1CFA:  MOVWF  xBB
1CFC:  CALL   06D8
....................          else 
1D00:  BRA    1D04
....................             {Flanco = 0;} 
1D02:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
1D04:  BSF    F96.0
1D06:  BTFSS  F84.0
1D08:  BRA    1D2C
....................       {  if(Flanco2 == 0)  
1D0A:  BTFSC  17.5
1D0C:  BRA    1D2A
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
1D0E:  MOVLW  0B
1D10:  SUBWF  1C,W
1D12:  CLRF   03
1D14:  ADDLW  36
1D16:  MOVWF  FE9
1D18:  MOVLW  00
1D1A:  ADDWFC 03,W
1D1C:  MOVWF  FEA
1D1E:  DECF   FEF,F
1D20:  BSF    17.5
1D22:  MOVLW  1E
1D24:  MOVWF  xBB
1D26:  CALL   06D8
....................          else 
1D2A:  BRA    1D2E
....................             {Flanco2 = 0;} 
1D2C:  BCF    17.5
....................     
....................       if(RIGHT)// Si Oprime Derecha 
1D2E:  BSF    F96.1
1D30:  BTFSS  F84.1
1D32:  BRA    1D4E
....................       {  if(Flanco1 == 0)  
1D34:  BTFSC  17.4
1D36:  BRA    1D4C
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
1D38:  BSF    17.4
1D3A:  INCF   1C,F
1D3C:  MOVLW  1E
1D3E:  MOVWF  xBB
1D40:  CALL   06D8
1D44:  MOVLW  0C
1D46:  MOVWF  xBA
1D48:  CALL   08AE
....................          else 
1D4C:  BRA    1D50
....................             {Flanco1 = 0;}    
1D4E:  BCF    17.4
....................              
....................        if(IZQU)// Si Oprime izquierda 
1D50:  BSF    F96.2
1D52:  BTFSS  F84.2
1D54:  BRA    1D78
....................        { 
....................          delay_ms(150); 
1D56:  MOVLW  96
1D58:  MOVWF  xBB
1D5A:  CALL   06D8
....................          if(Flanco3 == 0) 
1D5E:  BTFSC  17.6
1D60:  BRA    1D76
....................          { 
....................             Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f"); 
1D62:  BSF    17.6
1D64:  DECF   1C,F
1D66:  MOVLW  1E
1D68:  MOVWF  xBB
1D6A:  CALL   06D8
1D6E:  MOVLW  0C
1D70:  MOVWF  xBA
1D72:  CALL   08AE
....................          } 
....................        } 
....................        else 
1D76:  BRA    1D7A
....................        { 
....................          Flanco3 = 0; 
1D78:  BCF    17.6
....................        } 
....................              
....................        if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1D7A:  MOVLW  0B
1D7C:  SUBWF  1C,W
1D7E:  CLRF   03
1D80:  ADDLW  36
1D82:  MOVWF  FE9
1D84:  MOVLW  00
1D86:  ADDWFC 03,W
1D88:  MOVWF  FEA
1D8A:  BTFSC  FEF.7
1D8C:  BRA    1D90
1D8E:  BRA    1DA4
....................        {clave[unidad-11]=9;} 
1D90:  MOVLW  0B
1D92:  SUBWF  1C,W
1D94:  CLRF   03
1D96:  ADDLW  36
1D98:  MOVWF  FE9
1D9A:  MOVLW  00
1D9C:  ADDWFC 03,W
1D9E:  MOVWF  FEA
1DA0:  MOVLW  09
1DA2:  MOVWF  FEF
....................        if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1DA4:  MOVLW  0B
1DA6:  SUBWF  1C,W
1DA8:  CLRF   03
1DAA:  ADDLW  36
1DAC:  MOVWF  FE9
1DAE:  MOVLW  00
1DB0:  ADDWFC 03,W
1DB2:  MOVWF  FEA
1DB4:  BTFSC  FEF.7
1DB6:  BRA    1DD0
1DB8:  MOVF   FEF,W
1DBA:  SUBLW  09
1DBC:  BC    1DD0
....................        {clave[unidad-11]=0;} 
1DBE:  MOVLW  0B
1DC0:  SUBWF  1C,W
1DC2:  CLRF   03
1DC4:  ADDLW  36
1DC6:  MOVWF  FE9
1DC8:  MOVLW  00
1DCA:  ADDWFC 03,W
1DCC:  MOVWF  FEA
1DCE:  CLRF   FEF
....................        if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1DD0:  MOVF   1C,W
1DD2:  SUBLW  0A
1DD4:  BNC   1DDA
....................        {unidad=11;} 
1DD6:  MOVLW  0B
1DD8:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1DDA:  MOVFF  1C,BB
1DDE:  MOVLW  04
1DE0:  MOVWF  xBC
1DE2:  CALL   084C
....................        lcd_putc(t[2]); 
1DE6:  MOVFF  35,BA
1DEA:  CALL   08AE
....................        if(unidad>14)             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1DEE:  MOVF   1C,W
1DF0:  SUBLW  0E
1DF2:  BTFSC  FD8.0
1DF4:  BRA    1FDC
....................        { 
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2) // Si Ingresa clave para reset general del sistema. 
1DF6:  MOVF   36,W
1DF8:  SUBLW  03
1DFA:  BNZ   1ED6
1DFC:  MOVF   37,W
1DFE:  SUBLW  08
1E00:  BNZ   1ED6
1E02:  MOVF   38,W
1E04:  SUBLW  09
1E06:  BNZ   1ED6
1E08:  MOVF   39,W
1E0A:  SUBLW  02
1E0C:  BNZ   1ED6
....................             {write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1E0E:  CLRF   FA9
1E10:  CLRF   FA8
1E12:  BCF    FA6.6
1E14:  BCF    FA6.7
1E16:  BSF    FA6.2
1E18:  MOVF   FF2,W
1E1A:  MOVWF  00
1E1C:  BCF    FF2.7
1E1E:  MOVLB  F
1E20:  MOVLW  55
1E22:  MOVWF  FA7
1E24:  MOVLW  AA
1E26:  MOVWF  FA7
1E28:  BSF    FA6.1
1E2A:  BTFSC  FA6.1
1E2C:  BRA    1E2A
1E2E:  BCF    FA6.2
1E30:  MOVF   00,W
1E32:  IORWF  FF2,F
1E34:  MOVLW  14
1E36:  MOVLB  0
1E38:  MOVWF  xBB
1E3A:  CALL   06D8
1E3E:  MOVLW  01
1E40:  MOVWF  FA9
1E42:  CLRF   FA8
1E44:  BCF    FA6.6
1E46:  BCF    FA6.7
1E48:  BSF    FA6.2
1E4A:  MOVF   FF2,W
1E4C:  MOVWF  00
1E4E:  BCF    FF2.7
1E50:  MOVLB  F
1E52:  MOVLW  55
1E54:  MOVWF  FA7
1E56:  MOVLW  AA
1E58:  MOVWF  FA7
1E5A:  BSF    FA6.1
1E5C:  BTFSC  FA6.1
1E5E:  BRA    1E5C
1E60:  BCF    FA6.2
1E62:  MOVF   00,W
1E64:  IORWF  FF2,F
1E66:  MOVLW  14
1E68:  MOVLB  0
1E6A:  MOVWF  xBB
1E6C:  CALL   06D8
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1E70:  MOVLW  02
1E72:  MOVWF  FA9
1E74:  CLRF   FA8
1E76:  BCF    FA6.6
1E78:  BCF    FA6.7
1E7A:  BSF    FA6.2
1E7C:  MOVF   FF2,W
1E7E:  MOVWF  00
1E80:  BCF    FF2.7
1E82:  MOVLB  F
1E84:  MOVLW  55
1E86:  MOVWF  FA7
1E88:  MOVLW  AA
1E8A:  MOVWF  FA7
1E8C:  BSF    FA6.1
1E8E:  BTFSC  FA6.1
1E90:  BRA    1E8E
1E92:  BCF    FA6.2
1E94:  MOVF   00,W
1E96:  IORWF  FF2,F
1E98:  MOVLW  14
1E9A:  MOVLB  0
1E9C:  MOVWF  xBB
1E9E:  CALL   06D8
1EA2:  MOVLW  03
1EA4:  MOVWF  FA9
1EA6:  CLRF   FA8
1EA8:  BCF    FA6.6
1EAA:  BCF    FA6.7
1EAC:  BSF    FA6.2
1EAE:  MOVF   FF2,W
1EB0:  MOVWF  00
1EB2:  BCF    FF2.7
1EB4:  MOVLB  F
1EB6:  MOVLW  55
1EB8:  MOVWF  FA7
1EBA:  MOVLW  AA
1EBC:  MOVWF  FA7
1EBE:  BSF    FA6.1
1EC0:  BTFSC  FA6.1
1EC2:  BRA    1EC0
1EC4:  BCF    FA6.2
1EC6:  MOVF   00,W
1EC8:  IORWF  FF2,F
1ECA:  MOVLW  14
1ECC:  MOVLB  0
1ECE:  MOVWF  xBB
1ED0:  CALL   06D8
....................              reset_cpu();} 
1ED4:  RESET
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) // Si las claves coinciden pasa a Menu Principal. 
1ED6:  MOVF   3A,W
1ED8:  SUBWF  36,W
1EDA:  BNZ   1F6E
1EDC:  MOVF   3B,W
1EDE:  SUBWF  37,W
1EE0:  BNZ   1F6E
1EE2:  MOVF   3C,W
1EE4:  SUBWF  38,W
1EE6:  BNZ   1F6E
1EE8:  MOVF   3D,W
1EEA:  SUBWF  39,W
1EEC:  BNZ   1F6E
....................             {lcd_gotoxy(1,1); 
1EEE:  MOVLW  01
1EF0:  MOVWF  xBB
1EF2:  MOVWF  xBC
1EF4:  CALL   084C
....................             printf(lcd_putc,"                   "); 
1EF8:  MOVLW  32
1EFA:  MOVWF  FF6
1EFC:  MOVLW  02
1EFE:  MOVWF  FF7
1F00:  CALL   090C
....................             lcd_gotoxy(1,2); 
1F04:  MOVLW  01
1F06:  MOVWF  xBB
1F08:  MOVLW  02
1F0A:  MOVWF  xBC
1F0C:  CALL   084C
....................             printf(lcd_putc,"     Contraseña    "); 
1F10:  MOVLW  46
1F12:  MOVWF  FF6
1F14:  MOVLW  02
1F16:  MOVWF  FF7
1F18:  CALL   090C
....................             lcd_gotoxy(1,3); 
1F1C:  MOVLW  01
1F1E:  MOVWF  xBB
1F20:  MOVLW  03
1F22:  MOVWF  xBC
1F24:  CALL   084C
....................             printf(lcd_putc,"      Correcta     "); 
1F28:  MOVLW  5A
1F2A:  MOVWF  FF6
1F2C:  MOVLW  02
1F2E:  MOVWF  FF7
1F30:  CALL   090C
....................             lcd_gotoxy(1,4); 
1F34:  MOVLW  01
1F36:  MOVWF  xBB
1F38:  MOVLW  04
1F3A:  MOVWF  xBC
1F3C:  CALL   084C
....................             printf(lcd_putc,"                   "); 
1F40:  MOVLW  6E
1F42:  MOVWF  FF6
1F44:  MOVLW  02
1F46:  MOVWF  FF7
1F48:  CALL   090C
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");} 
1F4C:  MOVLW  04
1F4E:  MOVWF  xA9
1F50:  MOVLW  FA
1F52:  MOVWF  xBB
1F54:  CALL   06D8
1F58:  DECFSZ xA9,F
1F5A:  BRA    1F50
1F5C:  MOVLW  32
1F5E:  MOVWF  19
1F60:  MOVLW  0B
1F62:  MOVWF  1C
1F64:  MOVLW  0C
1F66:  MOVWF  xBA
1F68:  CALL   08AE
....................          else                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
1F6C:  BRA    1FDC
....................          {lcd_gotoxy(1,1); 
1F6E:  MOVLW  01
1F70:  MOVWF  xBB
1F72:  MOVWF  xBC
1F74:  CALL   084C
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
1F78:  MOVLW  01
1F7A:  MOVWF  xBB
1F7C:  MOVLW  02
1F7E:  MOVWF  xBC
1F80:  CALL   084C
....................             printf(lcd_putc,"     Contraseña    "); 
1F84:  MOVLW  82
1F86:  MOVWF  FF6
1F88:  MOVLW  02
1F8A:  MOVWF  FF7
1F8C:  CALL   090C
....................             lcd_gotoxy(1,3); 
1F90:  MOVLW  01
1F92:  MOVWF  xBB
1F94:  MOVLW  03
1F96:  MOVWF  xBC
1F98:  CALL   084C
....................             printf(lcd_putc,"     Incorrecta    "); 
1F9C:  MOVLW  96
1F9E:  MOVWF  FF6
1FA0:  MOVLW  02
1FA2:  MOVWF  FF7
1FA4:  CALL   090C
....................             lcd_gotoxy(1,4); 
1FA8:  MOVLW  01
1FAA:  MOVWF  xBB
1FAC:  MOVLW  04
1FAE:  MOVWF  xBC
1FB0:  CALL   084C
....................             printf(lcd_putc,"                   "); 
1FB4:  MOVLW  AA
1FB6:  MOVWF  FF6
1FB8:  MOVLW  02
1FBA:  MOVWF  FF7
1FBC:  CALL   090C
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");} 
1FC0:  MOVLW  04
1FC2:  MOVWF  xA9
1FC4:  MOVLW  FA
1FC6:  MOVWF  xBB
1FC8:  CALL   06D8
1FCC:  DECFSZ xA9,F
1FCE:  BRA    1FC4
1FD0:  MOVLW  0B
1FD2:  MOVWF  1C
1FD4:  MOVLW  0C
1FD6:  MOVWF  xBA
1FD8:  CALL   08AE
....................        } 
....................     
....................        if(unidad>11&&unidad<14) 
1FDC:  MOVF   1C,W
1FDE:  SUBLW  0B
1FE0:  BC    2000
1FE2:  MOVF   1C,W
1FE4:  SUBLW  0D
1FE6:  BNC   2000
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1FE8:  MOVLW  01
1FEA:  SUBWF  1C,W
1FEC:  MOVWF  xA9
1FEE:  MOVWF  xBB
1FF0:  MOVLW  04
1FF2:  MOVWF  xBC
1FF4:  CALL   084C
....................             lcd_putc(t[1]); 
1FF8:  MOVFF  34,BA
1FFC:  CALL   08AE
....................           } 
....................  
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2000:  DECFSZ 19,W
2002:  BRA    21F4
....................    lcd_gotoxy(1,1); 
2004:  MOVLW  01
2006:  MOVWF  xBB
2008:  MOVWF  xBC
200A:  CALL   084C
....................    printf(lcd_putc,"---MENU PRINCIPAL---"); 
200E:  MOVLW  BE
2010:  MOVWF  FF6
2012:  MOVLW  02
2014:  MOVWF  FF7
2016:  CALL   090C
....................       if(paso<0) 
201A:  BTFSC  32.7
201C:  BRA    2020
201E:  BRA    2022
....................         {paso=0;} 
2020:  CLRF   32
....................          
....................       if(UP)//Si oprime hacia arriba 
2022:  BSF    F92.5
2024:  BTFSS  F80.5
2026:  BRA    2042
....................       { 
....................          if(Flanco == 0) 
2028:  BTFSC  17.3
202A:  BRA    2040
....................          { 
....................             Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30); 
202C:  DECF   1F,F
202E:  DECF   1D,F
2030:  MOVLW  01
2032:  ADDWF  1D,W
2034:  MOVWF  1E
2036:  BSF    17.3
2038:  MOVLW  1E
203A:  MOVWF  xBB
203C:  CALL   06D8
....................          } 
....................       } 
....................       else 
2040:  BRA    2044
....................       { 
....................          Flanco = 0; 
2042:  BCF    17.3
....................       } 
....................              
....................       if(DOWN)//Si oprime hacia abajo 
2044:  BSF    F96.0
2046:  BTFSS  F84.0
2048:  BRA    2064
....................       { 
....................          if(Flanco2 == 0) 
204A:  BTFSC  17.5
204C:  BRA    2062
....................          { 
....................             Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30); 
204E:  INCF   1F,F
2050:  INCF   1D,F
2052:  MOVLW  01
2054:  SUBWF  1D,W
2056:  MOVWF  1E
2058:  BSF    17.5
205A:  MOVLW  1E
205C:  MOVWF  xBB
205E:  CALL   06D8
....................          } 
....................       } 
....................       else 
2062:  BRA    2066
....................       { 
....................          Flanco2 = 0; 
2064:  BCF    17.5
....................       } 
....................     
....................          
....................         if(Flecha2>nMenuH) 
2066:  MOVF   1F,W
2068:  SUBWF  21,W
206A:  BC    207C
....................         {paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4;} 
206C:  INCF   32,F
206E:  MOVFF  1F,21
2072:  MOVLW  02
2074:  SUBWF  21,W
2076:  MOVWF  20
2078:  MOVLW  04
207A:  MOVWF  1D
....................          
....................         if(Flecha2<nMenuL) 
207C:  MOVF   20,W
207E:  SUBWF  1F,W
2080:  BC    2092
....................         {paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2;} 
2082:  DECF   32,F
2084:  MOVFF  1F,20
2088:  MOVLW  02
208A:  ADDWF  20,W
208C:  MOVWF  21
208E:  MOVLW  02
2090:  MOVWF  1D
....................          
....................         if(Flecha2>n_opcionH) 
2092:  MOVF   1F,W
2094:  SUBWF  1A,W
2096:  BC    20AA
....................         {Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2;} 
2098:  MOVFF  1B,1F
209C:  MOVLW  02
209E:  MOVWF  1D
20A0:  CLRF   32
20A2:  MOVFF  1F,20
20A6:  ADDWF  20,W
20A8:  MOVWF  21
....................          
....................         if(Flecha2<n_opcionL) 
20AA:  MOVF   1B,W
20AC:  SUBWF  1F,W
20AE:  BC    20C6
....................         {Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2;}                
20B0:  MOVFF  1A,1F
20B4:  MOVLW  04
20B6:  MOVWF  1D
20B8:  SUBWF  1A,W
20BA:  MOVWF  32
20BC:  MOVFF  1F,21
20C0:  MOVLW  02
20C2:  SUBWF  21,W
20C4:  MOVWF  20
....................          
....................         mensajes(1+paso,2); 
20C6:  MOVLW  01
20C8:  ADDWF  32,W
20CA:  MOVWF  xA9
20CC:  MOVWF  xAA
20CE:  MOVLW  02
20D0:  MOVWF  xAB
20D2:  CALL   0A5E
....................         mensajes(2+paso,3); 
20D6:  MOVLW  02
20D8:  ADDWF  32,W
20DA:  MOVWF  xA9
20DC:  MOVWF  xAA
20DE:  MOVLW  03
20E0:  MOVWF  xAB
20E2:  CALL   0A5E
....................         mensajes(3+paso,4); 
20E6:  MOVLW  03
20E8:  ADDWF  32,W
20EA:  MOVWF  xA9
20EC:  MOVWF  xAA
20EE:  MOVLW  04
20F0:  MOVWF  xAB
20F2:  CALL   0A5E
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
20F6:  MOVLW  01
20F8:  MOVWF  xBB
20FA:  MOVFF  1D,BC
20FE:  CALL   084C
....................         lcd_putc(t[0]); 
2102:  MOVFF  33,BA
2106:  CALL   08AE
....................  
....................         if(Flecha==2) 
210A:  MOVF   1D,W
210C:  SUBLW  02
210E:  BNZ   2138
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
2110:  MOVLW  01
2112:  MOVWF  xBB
2114:  MOVLW  04
2116:  MOVWF  xBC
2118:  CALL   084C
....................             lcd_putc(t[1]); 
211C:  MOVFF  34,BA
2120:  CALL   08AE
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2124:  MOVLW  01
2126:  MOVWF  xBB
2128:  MOVLW  03
212A:  MOVWF  xBC
212C:  CALL   084C
....................             lcd_putc(t[1]); 
2130:  MOVFF  34,BA
2134:  CALL   08AE
....................           } 
....................          
....................         if(Flecha==4) 
2138:  MOVF   1D,W
213A:  SUBLW  04
213C:  BNZ   2166
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
213E:  MOVLW  01
2140:  MOVWF  xBB
2142:  MOVLW  02
2144:  MOVWF  xBC
2146:  CALL   084C
....................             lcd_putc(t[1]); 
214A:  MOVFF  34,BA
214E:  CALL   08AE
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
2152:  MOVLW  01
2154:  MOVWF  xBB
2156:  MOVLW  03
2158:  MOVWF  xBC
215A:  CALL   084C
....................             lcd_putc(t[1]); 
215E:  MOVFF  34,BA
2162:  CALL   08AE
....................           } 
....................          
....................         if(Flecha==3) 
2166:  MOVF   1D,W
2168:  SUBLW  03
216A:  BNZ   2194
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
216C:  MOVLW  01
216E:  MOVWF  xBB
2170:  MOVLW  04
2172:  MOVWF  xBC
2174:  CALL   084C
....................             lcd_putc(t[1]); 
2178:  MOVFF  34,BA
217C:  CALL   08AE
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
2180:  MOVLW  01
2182:  MOVWF  xBB
2184:  MOVLW  02
2186:  MOVWF  xBC
2188:  CALL   084C
....................             lcd_putc(t[1]); 
218C:  MOVFF  34,BA
2190:  CALL   08AE
....................           } 
....................  
....................        if(RIGHT)// Si oprime derecha 
2194:  BSF    F96.1
2196:  BTFSS  F84.1
2198:  BRA    21D0
....................        { 
....................          if(Flanco1 == 0) 
219A:  BTFSC  17.4
219C:  BRA    21CE
....................          { 
....................             Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
219E:  BSF    17.4
21A0:  MOVFF  1F,19
21A4:  MOVLW  03
21A6:  MOVWF  1D
21A8:  MOVLW  02
21AA:  MOVWF  xA9
21AC:  MOVLW  96
21AE:  MOVWF  xBB
21B0:  CALL   06D8
21B4:  DECFSZ xA9,F
21B6:  BRA    21AC
21B8:  MOVLW  0C
21BA:  MOVWF  xBA
21BC:  CALL   08AE
....................             if(Menu==6) 
21C0:  MOVF   19,W
21C2:  SUBLW  06
21C4:  BNZ   21CE
....................             { 
....................                clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
21C6:  CLRF   36
21C8:  CLRF   37
21CA:  CLRF   38
21CC:  CLRF   39
....................             } 
....................          } 
....................        } 
....................        else 
21CE:  BRA    21D2
....................        { 
....................          Flanco1 = 0; 
21D0:  BCF    17.4
....................        } 
....................              
....................        if(IZQU) 
21D2:  BSF    F96.2
21D4:  BTFSS  F84.2
21D6:  BRA    21F4
....................        { 
....................          delay_ms(500);Menu=50;printf(lcd_putc,"\f"); 
21D8:  MOVLW  02
21DA:  MOVWF  xA9
21DC:  MOVLW  FA
21DE:  MOVWF  xBB
21E0:  CALL   06D8
21E4:  DECFSZ xA9,F
21E6:  BRA    21DC
21E8:  MOVLW  32
21EA:  MOVWF  19
21EC:  MOVLW  0C
21EE:  MOVWF  xBA
21F0:  CALL   08AE
....................        } 
....................  
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
21F4:  MOVF   19,W
21F6:  SUBLW  02
21F8:  BTFSS  FD8.2
21FA:  BRA    240A
....................     
....................    lcd_gotoxy(1,1); 
21FC:  MOVLW  01
21FE:  MOVWF  xBB
2200:  MOVWF  xBC
2202:  CALL   084C
....................    printf(lcd_putc,"    Temporizador     "); 
2206:  MOVLW  D4
2208:  MOVWF  FF6
220A:  MOVLW  02
220C:  MOVWF  FF7
220E:  CALL   090C
....................    lcd_gotoxy(1,2); 
2212:  MOVLW  01
2214:  MOVWF  xBB
2216:  MOVLW  02
2218:  MOVWF  xBC
221A:  CALL   084C
....................    printf(lcd_putc,"       Luz UV        "); 
221E:  MOVLW  EA
2220:  MOVWF  FF6
2222:  MOVLW  02
2224:  MOVWF  FF7
2226:  CALL   090C
....................    lcd_gotoxy(6,3); 
222A:  MOVLW  06
222C:  MOVWF  xBB
222E:  MOVLW  03
2230:  MOVWF  xBC
2232:  CALL   084C
....................    printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
2236:  MOVFF  2A,A9
223A:  MOVLW  03
223C:  MOVWF  xAA
223E:  CALL   0AFC
2242:  MOVLW  3A
2244:  MOVWF  xBA
2246:  CALL   08AE
224A:  MOVFF  2B,A9
224E:  MOVLW  01
2250:  MOVWF  xAA
2252:  CALL   0AFC
2256:  MOVLW  09
2258:  MOVWF  FF6
225A:  MOVLW  03
225C:  MOVWF  FF7
225E:  MOVLW  08
2260:  MOVWF  xAD
2262:  CALL   0950
....................     
....................    lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
2266:  MOVLW  06
2268:  ADDWF  2F,W
226A:  MOVWF  xA9
226C:  MOVWF  xBB
226E:  MOVLW  04
2270:  MOVWF  xBC
2272:  CALL   084C
....................    lcd_putc(t[2]); 
2276:  MOVFF  35,BA
227A:  CALL   08AE
....................     
....................    if(UP) 
227E:  BSF    F92.5
2280:  BTFSS  F80.5
2282:  BRA    22C0
....................    { 
....................       if(unidad2==1) 
2284:  DECFSZ 2F,W
2286:  BRA    22A2
....................       { 
....................          if(tempo_minutos_pro<240) 
2288:  MOVF   2A,W
228A:  SUBLW  EF
228C:  BNC   22A2
....................          { 
....................             tempo_minutos_pro+=5;delay_ms(300); 
228E:  MOVLW  05
2290:  ADDWF  2A,F
2292:  MOVLW  02
2294:  MOVWF  xA9
2296:  MOVLW  96
2298:  MOVWF  xBB
229A:  CALL   06D8
229E:  DECFSZ xA9,F
22A0:  BRA    2296
....................          } 
....................       } 
....................        
....................       if(unidad2==4) 
22A2:  MOVF   2F,W
22A4:  SUBLW  04
22A6:  BNZ   22C0
....................       { 
....................          if(tempo_segundos_pro<59) 
22A8:  MOVF   2B,W
22AA:  SUBLW  3A
22AC:  BNC   22C0
....................          { 
....................             tempo_segundos_pro++;delay_ms(300); 
22AE:  INCF   2B,F
22B0:  MOVLW  02
22B2:  MOVWF  xA9
22B4:  MOVLW  96
22B6:  MOVWF  xBB
22B8:  CALL   06D8
22BC:  DECFSZ xA9,F
22BE:  BRA    22B4
....................          } 
....................       } 
....................    } 
....................     
....................    if(DOWN) 
22C0:  BSF    F96.0
22C2:  BTFSS  F84.0
22C4:  BRA    22FE
....................    { 
....................       if(unidad2==1) 
22C6:  DECFSZ 2F,W
22C8:  BRA    22E2
....................       { 
....................          if(tempo_minutos_pro>0) 
22CA:  MOVF   2A,F
22CC:  BZ    22E2
....................          { 
....................             tempo_minutos_pro-=5;delay_ms(300); 
22CE:  MOVLW  05
22D0:  SUBWF  2A,F
22D2:  MOVLW  02
22D4:  MOVWF  xA9
22D6:  MOVLW  96
22D8:  MOVWF  xBB
22DA:  CALL   06D8
22DE:  DECFSZ xA9,F
22E0:  BRA    22D6
....................          } 
....................           
....................       } 
....................        
....................       if(unidad2==4) 
22E2:  MOVF   2F,W
22E4:  SUBLW  04
22E6:  BNZ   22FE
....................       { 
....................          if(tempo_segundos_pro>0) 
22E8:  MOVF   2B,F
22EA:  BZ    22FE
....................          { 
....................             tempo_segundos_pro--;delay_ms(300); 
22EC:  DECF   2B,F
22EE:  MOVLW  02
22F0:  MOVWF  xA9
22F2:  MOVLW  96
22F4:  MOVWF  xBB
22F6:  CALL   06D8
22FA:  DECFSZ xA9,F
22FC:  BRA    22F2
....................          } 
....................           
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
22FE:  BSF    F96.1
2300:  BTFSS  F84.1
2302:  BRA    2330
....................    { 
....................       if(unidad2==1) 
2304:  DECFSZ 2F,W
2306:  BRA    230E
....................       { 
....................          unidad2=4; 
2308:  MOVLW  04
230A:  MOVWF  2F
....................       } 
....................       else 
230C:  BRA    2318
....................       { 
....................          if(unidad2==4) 
230E:  MOVF   2F,W
2310:  SUBLW  04
2312:  BNZ   2318
....................          { 
....................             unidad2=1; 
2314:  MOVLW  01
2316:  MOVWF  2F
....................          } 
....................       } 
....................       delay_ms(500); 
2318:  MOVLW  02
231A:  MOVWF  xA9
231C:  MOVLW  FA
231E:  MOVWF  xBB
2320:  CALL   06D8
2324:  DECFSZ xA9,F
2326:  BRA    231C
....................       printf(lcd_putc,"\f"); 
2328:  MOVLW  0C
232A:  MOVWF  xBA
232C:  CALL   08AE
....................    } 
....................     
....................    if(IZQU) 
2330:  BSF    F96.2
2332:  BTFSS  F84.2
2334:  BRA    240A
....................    { 
....................       delay_ms(200); 
2336:  MOVLW  C8
2338:  MOVWF  xBB
233A:  CALL   06D8
....................       printf(lcd_putc,"\f"); 
233E:  MOVLW  0C
2340:  MOVWF  xBA
2342:  CALL   08AE
....................       lcd_gotoxy(1,2); 
2346:  MOVLW  01
2348:  MOVWF  xBB
234A:  MOVLW  02
234C:  MOVWF  xBC
234E:  CALL   084C
....................       printf(lcd_putc,"Tiempo Almacenado"); 
2352:  MOVLW  12
2354:  MOVWF  FF6
2356:  MOVLW  03
2358:  MOVWF  FF7
235A:  CALL   090C
....................       lcd_gotoxy(1,3); 
235E:  MOVLW  01
2360:  MOVWF  xBB
2362:  MOVLW  03
2364:  MOVWF  xBC
2366:  CALL   084C
....................       printf(lcd_putc,"  Correctamente  "); 
236A:  MOVLW  24
236C:  MOVWF  FF6
236E:  MOVLW  03
2370:  MOVWF  FF7
2372:  CALL   090C
....................       write_eeprom(20,tempo_minutos_pro); 
2376:  MOVLW  14
2378:  MOVWF  FA9
237A:  MOVFF  2A,FA8
237E:  BCF    FA6.6
2380:  BCF    FA6.7
2382:  BSF    FA6.2
2384:  MOVF   FF2,W
2386:  MOVWF  00
2388:  BCF    FF2.7
238A:  MOVLB  F
238C:  MOVLW  55
238E:  MOVWF  FA7
2390:  MOVLW  AA
2392:  MOVWF  FA7
2394:  BSF    FA6.1
2396:  BTFSC  FA6.1
2398:  BRA    2396
239A:  BCF    FA6.2
239C:  MOVF   00,W
239E:  IORWF  FF2,F
....................       delay_ms(30); 
23A0:  MOVLW  1E
23A2:  MOVLB  0
23A4:  MOVWF  xBB
23A6:  CALL   06D8
....................       write_eeprom(30,tempo_segundos_pro); 
23AA:  MOVLW  1E
23AC:  MOVWF  FA9
23AE:  MOVFF  2B,FA8
23B2:  BCF    FA6.6
23B4:  BCF    FA6.7
23B6:  BSF    FA6.2
23B8:  MOVF   FF2,W
23BA:  MOVWF  00
23BC:  BCF    FF2.7
23BE:  MOVLB  F
23C0:  MOVLW  55
23C2:  MOVWF  FA7
23C4:  MOVLW  AA
23C6:  MOVWF  FA7
23C8:  BSF    FA6.1
23CA:  BTFSC  FA6.1
23CC:  BRA    23CA
23CE:  BCF    FA6.2
23D0:  MOVF   00,W
23D2:  IORWF  FF2,F
....................       tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
23D4:  MOVFF  2A,28
23D8:  MOVFF  2B,29
....................       delay_ms(700); 
23DC:  MOVLW  04
23DE:  MOVLB  0
23E0:  MOVWF  xA9
23E2:  MOVLW  AF
23E4:  MOVWF  xBB
23E6:  CALL   06D8
23EA:  DECFSZ xA9,F
23EC:  BRA    23E2
....................       delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
23EE:  MOVLW  1E
23F0:  MOVWF  xBB
23F2:  CALL   06D8
23F6:  MOVLW  01
23F8:  MOVWF  19
23FA:  CLRF   32
23FC:  MOVLW  02
23FE:  MOVWF  1D
2400:  MOVWF  1F
2402:  MOVLW  0C
2404:  MOVWF  xBA
2406:  CALL   08AE
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
240A:  MOVF   19,W
240C:  SUBLW  03
240E:  BTFSS  FD8.2
2410:  BRA    270A
....................    lcd_gotoxy(1,1); 
2412:  MOVLW  01
2414:  MOVWF  xBB
2416:  MOVWF  xBC
2418:  CALL   084C
....................    printf(lcd_putc,"      Ingrese       "); 
241C:  MOVLW  36
241E:  MOVWF  FF6
2420:  MOVLW  03
2422:  MOVWF  FF7
2424:  CALL   090C
....................    lcd_gotoxy(1,2); 
2428:  MOVLW  01
242A:  MOVWF  xBB
242C:  MOVLW  02
242E:  MOVWF  xBC
2430:  CALL   084C
....................    printf(lcd_putc," Contraseña Actual  "); 
2434:  MOVLW  4C
2436:  MOVWF  FF6
2438:  MOVLW  03
243A:  MOVWF  FF7
243C:  CALL   090C
....................    lcd_gotoxy(1,3); 
2440:  MOVLW  01
2442:  MOVWF  xBB
2444:  MOVLW  03
2446:  MOVWF  xBC
2448:  CALL   084C
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
244C:  MOVLW  62
244E:  MOVWF  FF6
2450:  MOVLW  03
2452:  MOVWF  FF7
2454:  MOVLW  0A
2456:  MOVWF  xAD
2458:  CALL   0950
245C:  MOVFF  36,A9
2460:  MOVLW  1F
2462:  MOVWF  xAA
2464:  CALL   0996
2468:  MOVFF  37,A9
246C:  MOVLW  1F
246E:  MOVWF  xAA
2470:  CALL   0996
2474:  MOVFF  38,A9
2478:  MOVLW  1F
247A:  MOVWF  xAA
247C:  CALL   0996
2480:  MOVFF  39,A9
2484:  MOVLW  1F
2486:  MOVWF  xAA
2488:  CALL   0996
248C:  MOVLW  20
248E:  MOVWF  xBA
2490:  CALL   08AE
2494:  MOVLW  20
2496:  MOVWF  xBA
2498:  CALL   08AE
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
249C:  BSF    F92.5
249E:  BTFSS  F80.5
24A0:  BRA    24C4
....................       {  if(Flanco == 0)  
24A2:  BTFSC  17.3
24A4:  BRA    24C2
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
24A6:  MOVLW  0B
24A8:  SUBWF  1C,W
24AA:  CLRF   03
24AC:  ADDLW  36
24AE:  MOVWF  FE9
24B0:  MOVLW  00
24B2:  ADDWFC 03,W
24B4:  MOVWF  FEA
24B6:  INCF   FEF,F
24B8:  BSF    17.3
24BA:  MOVLW  1E
24BC:  MOVWF  xBB
24BE:  CALL   06D8
....................          else 
24C2:  BRA    24C6
....................             {Flanco = 0;} 
24C4:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
24C6:  BSF    F96.0
24C8:  BTFSS  F84.0
24CA:  BRA    24EE
....................       {  if(Flanco2 == 0)  
24CC:  BTFSC  17.5
24CE:  BRA    24EC
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
24D0:  MOVLW  0B
24D2:  SUBWF  1C,W
24D4:  CLRF   03
24D6:  ADDLW  36
24D8:  MOVWF  FE9
24DA:  MOVLW  00
24DC:  ADDWFC 03,W
24DE:  MOVWF  FEA
24E0:  DECF   FEF,F
24E2:  BSF    17.5
24E4:  MOVLW  1E
24E6:  MOVWF  xBB
24E8:  CALL   06D8
....................          else 
24EC:  BRA    24F0
....................             {Flanco2 = 0;} 
24EE:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime derecha 
24F0:  BSF    F96.1
24F2:  BTFSS  F84.1
24F4:  BRA    2510
....................       {  if(Flanco1 == 0)  
24F6:  BTFSC  17.4
24F8:  BRA    250E
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
24FA:  BSF    17.4
24FC:  INCF   1C,F
24FE:  MOVLW  1E
2500:  MOVWF  xBB
2502:  CALL   06D8
2506:  MOVLW  0C
2508:  MOVWF  xBA
250A:  CALL   08AE
....................          else 
250E:  BRA    2512
....................             {Flanco1 = 0;}    
2510:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
2512:  BSF    F96.2
2514:  BTFSS  F84.2
2516:  BRA    2532
....................       {  if(Flanco3 == 0)  
2518:  BTFSC  17.6
251A:  BRA    2530
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
251C:  BSF    17.6
251E:  DECF   1C,F
2520:  MOVLW  1E
2522:  MOVWF  xBB
2524:  CALL   06D8
2528:  MOVLW  0C
252A:  MOVWF  xBA
252C:  CALL   08AE
....................          else 
2530:  BRA    2534
....................             {Flanco3 = 0;}     
2532:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2534:  MOVLW  0B
2536:  SUBWF  1C,W
2538:  CLRF   03
253A:  ADDLW  36
253C:  MOVWF  FE9
253E:  MOVLW  00
2540:  ADDWFC 03,W
2542:  MOVWF  FEA
2544:  BTFSC  FEF.7
2546:  BRA    254A
2548:  BRA    255E
....................        {clave[unidad-11]=9;} 
254A:  MOVLW  0B
254C:  SUBWF  1C,W
254E:  CLRF   03
2550:  ADDLW  36
2552:  MOVWF  FE9
2554:  MOVLW  00
2556:  ADDWFC 03,W
2558:  MOVWF  FEA
255A:  MOVLW  09
255C:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
255E:  MOVLW  0B
2560:  SUBWF  1C,W
2562:  CLRF   03
2564:  ADDLW  36
2566:  MOVWF  FE9
2568:  MOVLW  00
256A:  ADDWFC 03,W
256C:  MOVWF  FEA
256E:  BTFSC  FEF.7
2570:  BRA    258A
2572:  MOVF   FEF,W
2574:  SUBLW  09
2576:  BC    258A
....................        {clave[unidad-11]=0;} 
2578:  MOVLW  0B
257A:  SUBWF  1C,W
257C:  CLRF   03
257E:  ADDLW  36
2580:  MOVWF  FE9
2582:  MOVLW  00
2584:  ADDWFC 03,W
2586:  MOVWF  FEA
2588:  CLRF   FEF
....................        if(unidad<11) 
258A:  MOVF   1C,W
258C:  SUBLW  0A
258E:  BNC   25B0
....................        {Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);} 
2590:  MOVLW  01
2592:  MOVWF  19
2594:  CLRF   32
2596:  MOVLW  02
2598:  MOVWF  1D
259A:  MOVWF  1F
259C:  MOVLW  0B
259E:  MOVWF  1C
25A0:  MOVLW  02
25A2:  MOVWF  xA9
25A4:  MOVLW  FA
25A6:  MOVWF  xBB
25A8:  CALL   06D8
25AC:  DECFSZ xA9,F
25AE:  BRA    25A4
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
25B0:  MOVFF  1C,BB
25B4:  MOVLW  04
25B6:  MOVWF  xBC
25B8:  CALL   084C
....................        lcd_putc(t[2]); 
25BC:  MOVFF  35,BA
25C0:  CALL   08AE
....................        if(unidad>14)// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
25C4:  MOVF   1C,W
25C6:  SUBLW  0E
25C8:  BTFSC  FD8.0
25CA:  BRA    26E6
....................        { 
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]) 
25CC:  MOVF   3A,W
25CE:  SUBWF  36,W
25D0:  BNZ   266C
25D2:  MOVF   3B,W
25D4:  SUBWF  37,W
25D6:  BNZ   266C
25D8:  MOVF   3C,W
25DA:  SUBWF  38,W
25DC:  BNZ   266C
25DE:  MOVF   3D,W
25E0:  SUBWF  39,W
25E2:  BNZ   266C
....................             {lcd_gotoxy(1,1); 
25E4:  MOVLW  01
25E6:  MOVWF  xBB
25E8:  MOVWF  xBC
25EA:  CALL   084C
....................             printf(lcd_putc,"                    "); 
25EE:  MOVLW  78
25F0:  MOVWF  FF6
25F2:  MOVLW  03
25F4:  MOVWF  FF7
25F6:  CALL   090C
....................             lcd_gotoxy(1,2); 
25FA:  MOVLW  01
25FC:  MOVWF  xBB
25FE:  MOVLW  02
2600:  MOVWF  xBC
2602:  CALL   084C
....................             printf(lcd_putc,"     Contraseña     "); 
2606:  MOVLW  8E
2608:  MOVWF  FF6
260A:  MOVLW  03
260C:  MOVWF  FF7
260E:  CALL   090C
....................             lcd_gotoxy(1,3); 
2612:  MOVLW  01
2614:  MOVWF  xBB
2616:  MOVLW  03
2618:  MOVWF  xBC
261A:  CALL   084C
....................             printf(lcd_putc,"      Correcta      "); 
261E:  MOVLW  A4
2620:  MOVWF  FF6
2622:  MOVLW  03
2624:  MOVWF  FF7
2626:  CALL   090C
....................             lcd_gotoxy(1,4); 
262A:  MOVLW  01
262C:  MOVWF  xBB
262E:  MOVLW  04
2630:  MOVWF  xBC
2632:  CALL   084C
....................             printf(lcd_putc,"                    "); 
2636:  MOVLW  BA
2638:  MOVWF  FF6
263A:  MOVLW  03
263C:  MOVWF  FF7
263E:  CALL   090C
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
2642:  MOVLW  02
2644:  MOVWF  xA9
2646:  MOVLW  FA
2648:  MOVWF  xBB
264A:  CALL   06D8
264E:  DECFSZ xA9,F
2650:  BRA    2646
2652:  MOVLW  3D
2654:  MOVWF  19
2656:  MOVLW  0B
2658:  MOVWF  1C
265A:  MOVLW  0C
265C:  MOVWF  xBA
265E:  CALL   08AE
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;} 
2662:  CLRF   36
2664:  CLRF   37
2666:  CLRF   38
2668:  CLRF   39
....................          else 
266A:  BRA    26E6
....................          {lcd_gotoxy(1,1); 
266C:  MOVLW  01
266E:  MOVWF  xBB
2670:  MOVWF  xBC
2672:  CALL   084C
....................             printf(lcd_putc,"                    "); 
2676:  MOVLW  D0
2678:  MOVWF  FF6
267A:  MOVLW  03
267C:  MOVWF  FF7
267E:  CALL   090C
....................             lcd_gotoxy(1,2); 
2682:  MOVLW  01
2684:  MOVWF  xBB
2686:  MOVLW  02
2688:  MOVWF  xBC
268A:  CALL   084C
....................             printf(lcd_putc,"     Contraseña     "); 
268E:  MOVLW  E6
2690:  MOVWF  FF6
2692:  MOVLW  03
2694:  MOVWF  FF7
2696:  CALL   090C
....................             lcd_gotoxy(1,3); 
269A:  MOVLW  01
269C:  MOVWF  xBB
269E:  MOVLW  03
26A0:  MOVWF  xBC
26A2:  CALL   084C
....................             printf(lcd_putc,"     Incorrecta     "); 
26A6:  MOVLW  FC
26A8:  MOVWF  FF6
26AA:  MOVLW  03
26AC:  MOVWF  FF7
26AE:  CALL   090C
....................             lcd_gotoxy(1,4); 
26B2:  MOVLW  01
26B4:  MOVWF  xBB
26B6:  MOVLW  04
26B8:  MOVWF  xBC
26BA:  CALL   084C
....................             printf(lcd_putc,"                    "); 
26BE:  MOVLW  12
26C0:  MOVWF  FF6
26C2:  MOVLW  04
26C4:  MOVWF  FF7
26C6:  CALL   090C
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");} 
26CA:  MOVLW  02
26CC:  MOVWF  xA9
26CE:  MOVLW  FA
26D0:  MOVWF  xBB
26D2:  CALL   06D8
26D6:  DECFSZ xA9,F
26D8:  BRA    26CE
26DA:  MOVLW  0B
26DC:  MOVWF  1C
26DE:  MOVLW  0C
26E0:  MOVWF  xBA
26E2:  CALL   08AE
....................        } 
....................                 
....................           if(unidad>11&&unidad<14) 
26E6:  MOVF   1C,W
26E8:  SUBLW  0B
26EA:  BC    270A
26EC:  MOVF   1C,W
26EE:  SUBLW  0D
26F0:  BNC   270A
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
26F2:  MOVLW  01
26F4:  SUBWF  1C,W
26F6:  MOVWF  xA9
26F8:  MOVWF  xBB
26FA:  MOVLW  04
26FC:  MOVWF  xBC
26FE:  CALL   084C
....................             lcd_putc(t[1]); 
2702:  MOVFF  34,BA
2706:  CALL   08AE
....................           } 
....................    }       
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
270A:  MOVF   19,W
270C:  SUBLW  3D
270E:  BTFSS  FD8.2
2710:  BRA    2A20
....................    lcd_gotoxy(1,1); 
2712:  MOVLW  01
2714:  MOVWF  xBB
2716:  MOVWF  xBC
2718:  CALL   084C
....................    printf(lcd_putc,"     Ingrese        "); 
271C:  MOVLW  28
271E:  MOVWF  FF6
2720:  MOVLW  04
2722:  MOVWF  FF7
2724:  CALL   090C
....................    lcd_gotoxy(1,2); 
2728:  MOVLW  01
272A:  MOVWF  xBB
272C:  MOVLW  02
272E:  MOVWF  xBC
2730:  CALL   084C
....................    printf(lcd_putc,"  Contraseña Nueva  "); 
2734:  MOVLW  3E
2736:  MOVWF  FF6
2738:  MOVLW  04
273A:  MOVWF  FF7
273C:  CALL   090C
....................    lcd_gotoxy(1,3); 
2740:  MOVLW  01
2742:  MOVWF  xBB
2744:  MOVLW  03
2746:  MOVWF  xBC
2748:  CALL   084C
....................    printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
274C:  MOVLW  54
274E:  MOVWF  FF6
2750:  MOVLW  04
2752:  MOVWF  FF7
2754:  MOVLW  0A
2756:  MOVWF  xAD
2758:  CALL   0950
275C:  MOVFF  36,A9
2760:  MOVLW  1F
2762:  MOVWF  xAA
2764:  CALL   0996
2768:  MOVFF  37,A9
276C:  MOVLW  1F
276E:  MOVWF  xAA
2770:  CALL   0996
2774:  MOVFF  38,A9
2778:  MOVLW  1F
277A:  MOVWF  xAA
277C:  CALL   0996
2780:  MOVFF  39,A9
2784:  MOVLW  1F
2786:  MOVWF  xAA
2788:  CALL   0996
278C:  MOVLW  20
278E:  MOVWF  xBA
2790:  CALL   08AE
2794:  MOVLW  20
2796:  MOVWF  xBA
2798:  CALL   08AE
....................     
....................        
....................    if(UP)//Si oprime hacia arriba 
279C:  BSF    F92.5
279E:  BTFSS  F80.5
27A0:  BRA    27C4
....................       {  if(Flanco == 0)  
27A2:  BTFSC  17.3
27A4:  BRA    27C2
....................             {clave[unidad-11]++;Flanco = 1;delay_ms(30);}} 
27A6:  MOVLW  0B
27A8:  SUBWF  1C,W
27AA:  CLRF   03
27AC:  ADDLW  36
27AE:  MOVWF  FE9
27B0:  MOVLW  00
27B2:  ADDWFC 03,W
27B4:  MOVWF  FEA
27B6:  INCF   FEF,F
27B8:  BSF    17.3
27BA:  MOVLW  1E
27BC:  MOVWF  xBB
27BE:  CALL   06D8
....................          else 
27C2:  BRA    27C6
....................             {Flanco = 0;} 
27C4:  BCF    17.3
....................              
....................       if(DOWN)//Si oprime hacia abajo 
27C6:  BSF    F96.0
27C8:  BTFSS  F84.0
27CA:  BRA    27EE
....................       {  if(Flanco2 == 0)  
27CC:  BTFSC  17.5
27CE:  BRA    27EC
....................             {clave[unidad-11]--;Flanco2 = 1;delay_ms(30);}} 
27D0:  MOVLW  0B
27D2:  SUBWF  1C,W
27D4:  CLRF   03
27D6:  ADDLW  36
27D8:  MOVWF  FE9
27DA:  MOVLW  00
27DC:  ADDWFC 03,W
27DE:  MOVWF  FEA
27E0:  DECF   FEF,F
27E2:  BSF    17.5
27E4:  MOVLW  1E
27E6:  MOVWF  xBB
27E8:  CALL   06D8
....................          else 
27EC:  BRA    27F0
....................             {Flanco2 = 0;} 
27EE:  BCF    17.5
....................     
....................       if(RIGHT)// Si oprime Derecha 
27F0:  BSF    F96.1
27F2:  BTFSS  F84.1
27F4:  BRA    2810
....................       {  if(Flanco1 == 0)  
27F6:  BTFSC  17.4
27F8:  BRA    280E
....................             {Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");}} 
27FA:  BSF    17.4
27FC:  INCF   1C,F
27FE:  MOVLW  1E
2800:  MOVWF  xBB
2802:  CALL   06D8
2806:  MOVLW  0C
2808:  MOVWF  xBA
280A:  CALL   08AE
....................          else 
280E:  BRA    2812
....................             {Flanco1 = 0;}    
2810:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
2812:  BSF    F96.2
2814:  BTFSS  F84.2
2816:  BRA    2832
....................       {  if(Flanco3 == 0)  
2818:  BTFSC  17.6
281A:  BRA    2830
....................             {Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");}} 
281C:  BSF    17.6
281E:  DECF   1C,F
2820:  MOVLW  1E
2822:  MOVWF  xBB
2824:  CALL   06D8
2828:  MOVLW  0C
282A:  MOVWF  xBA
282C:  CALL   08AE
....................          else 
2830:  BRA    2834
....................             {Flanco3 = 0;}     
2832:  BCF    17.6
....................              
....................        if(clave[unidad-11]<0)// Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9.      
2834:  MOVLW  0B
2836:  SUBWF  1C,W
2838:  CLRF   03
283A:  ADDLW  36
283C:  MOVWF  FE9
283E:  MOVLW  00
2840:  ADDWFC 03,W
2842:  MOVWF  FEA
2844:  BTFSC  FEF.7
2846:  BRA    284A
2848:  BRA    285E
....................        {clave[unidad-11]=9;} 
284A:  MOVLW  0B
284C:  SUBWF  1C,W
284E:  CLRF   03
2850:  ADDLW  36
2852:  MOVWF  FE9
2854:  MOVLW  00
2856:  ADDWFC 03,W
2858:  MOVWF  FEA
285A:  MOVLW  09
285C:  MOVWF  FEF
....................        if(clave[unidad-11]>9)// Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0.      
285E:  MOVLW  0B
2860:  SUBWF  1C,W
2862:  CLRF   03
2864:  ADDLW  36
2866:  MOVWF  FE9
2868:  MOVLW  00
286A:  ADDWFC 03,W
286C:  MOVWF  FEA
286E:  BTFSC  FEF.7
2870:  BRA    288A
2872:  MOVF   FEF,W
2874:  SUBLW  09
2876:  BC    288A
....................        {clave[unidad-11]=0;} 
2878:  MOVLW  0B
287A:  SUBWF  1C,W
287C:  CLRF   03
287E:  ADDLW  36
2880:  MOVWF  FE9
2882:  MOVLW  00
2884:  ADDWFC 03,W
2886:  MOVWF  FEA
2888:  CLRF   FEF
....................        if(unidad<11) 
288A:  MOVF   1C,W
288C:  SUBLW  0A
288E:  BNC   2898
....................        {Menu=5;unidad=11;} 
2890:  MOVLW  05
2892:  MOVWF  19
2894:  MOVLW  0B
2896:  MOVWF  1C
....................        lcd_gotoxy(unidad,4);// Para mostrar la flecha de seleccion 
2898:  MOVFF  1C,BB
289C:  MOVLW  04
289E:  MOVWF  xBC
28A0:  CALL   084C
....................        lcd_putc(t[2]); 
28A4:  MOVFF  35,BA
28A8:  CALL   08AE
....................        if(unidad>14)// Si ya ingreso la nueva contraseña. 
28AC:  MOVF   1C,W
28AE:  SUBLW  0E
28B0:  BTFSC  FD8.0
28B2:  BRA    29FC
....................        { 
....................             lcd_gotoxy(1,1); 
28B4:  MOVLW  01
28B6:  MOVWF  xBB
28B8:  MOVWF  xBC
28BA:  CALL   084C
....................             printf(lcd_putc,"                    "); 
28BE:  MOVLW  6A
28C0:  MOVWF  FF6
28C2:  MOVLW  04
28C4:  MOVWF  FF7
28C6:  CALL   090C
....................             lcd_gotoxy(1,2); 
28CA:  MOVLW  01
28CC:  MOVWF  xBB
28CE:  MOVLW  02
28D0:  MOVWF  xBC
28D2:  CALL   084C
....................             printf(lcd_putc,"     Contraseña     "); 
28D6:  MOVLW  80
28D8:  MOVWF  FF6
28DA:  MOVLW  04
28DC:  MOVWF  FF7
28DE:  CALL   090C
....................             lcd_gotoxy(1,3); 
28E2:  MOVLW  01
28E4:  MOVWF  xBB
28E6:  MOVLW  03
28E8:  MOVWF  xBC
28EA:  CALL   084C
....................             printf(lcd_putc,"     Almacenada     "); 
28EE:  MOVLW  96
28F0:  MOVWF  FF6
28F2:  MOVLW  04
28F4:  MOVWF  FF7
28F6:  CALL   090C
....................             lcd_gotoxy(1,4); 
28FA:  MOVLW  01
28FC:  MOVWF  xBB
28FE:  MOVLW  04
2900:  MOVWF  xBC
2902:  CALL   084C
....................             printf(lcd_putc,"                    "); 
2906:  MOVLW  AC
2908:  MOVWF  FF6
290A:  MOVLW  04
290C:  MOVWF  FF7
290E:  CALL   090C
....................             write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2912:  CLRF   FA9
2914:  MOVFF  36,FA8
2918:  BCF    FA6.6
291A:  BCF    FA6.7
291C:  BSF    FA6.2
291E:  MOVF   FF2,W
2920:  MOVWF  00
2922:  BCF    FF2.7
2924:  MOVLB  F
2926:  MOVLW  55
2928:  MOVWF  FA7
292A:  MOVLW  AA
292C:  MOVWF  FA7
292E:  BSF    FA6.1
2930:  BTFSC  FA6.1
2932:  BRA    2930
2934:  BCF    FA6.2
2936:  MOVF   00,W
2938:  IORWF  FF2,F
293A:  MOVLW  14
293C:  MOVLB  0
293E:  MOVWF  xBB
2940:  CALL   06D8
2944:  MOVLW  01
2946:  MOVWF  FA9
2948:  MOVFF  37,FA8
294C:  BCF    FA6.6
294E:  BCF    FA6.7
2950:  BSF    FA6.2
2952:  MOVF   FF2,W
2954:  MOVWF  00
2956:  BCF    FF2.7
2958:  MOVLB  F
295A:  MOVLW  55
295C:  MOVWF  FA7
295E:  MOVLW  AA
2960:  MOVWF  FA7
2962:  BSF    FA6.1
2964:  BTFSC  FA6.1
2966:  BRA    2964
2968:  BCF    FA6.2
296A:  MOVF   00,W
296C:  IORWF  FF2,F
296E:  MOVLW  14
2970:  MOVLB  0
2972:  MOVWF  xBB
2974:  CALL   06D8
....................             write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2978:  MOVLW  02
297A:  MOVWF  FA9
297C:  MOVFF  38,FA8
2980:  BCF    FA6.6
2982:  BCF    FA6.7
2984:  BSF    FA6.2
2986:  MOVF   FF2,W
2988:  MOVWF  00
298A:  BCF    FF2.7
298C:  MOVLB  F
298E:  MOVLW  55
2990:  MOVWF  FA7
2992:  MOVLW  AA
2994:  MOVWF  FA7
2996:  BSF    FA6.1
2998:  BTFSC  FA6.1
299A:  BRA    2998
299C:  BCF    FA6.2
299E:  MOVF   00,W
29A0:  IORWF  FF2,F
29A2:  MOVLW  14
29A4:  MOVLB  0
29A6:  MOVWF  xBB
29A8:  CALL   06D8
29AC:  MOVLW  03
29AE:  MOVWF  FA9
29B0:  MOVFF  39,FA8
29B4:  BCF    FA6.6
29B6:  BCF    FA6.7
29B8:  BSF    FA6.2
29BA:  MOVF   FF2,W
29BC:  MOVWF  00
29BE:  BCF    FF2.7
29C0:  MOVLB  F
29C2:  MOVLW  55
29C4:  MOVWF  FA7
29C6:  MOVLW  AA
29C8:  MOVWF  FA7
29CA:  BSF    FA6.1
29CC:  BTFSC  FA6.1
29CE:  BRA    29CC
29D0:  BCF    FA6.2
29D2:  MOVF   00,W
29D4:  IORWF  FF2,F
29D6:  MOVLW  14
29D8:  MOVLB  0
29DA:  MOVWF  xBB
29DC:  CALL   06D8
....................             delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
29E0:  MOVLW  02
29E2:  MOVWF  xA9
29E4:  MOVLW  FA
29E6:  MOVWF  xBB
29E8:  CALL   06D8
29EC:  DECFSZ xA9,F
29EE:  BRA    29E4
29F0:  MOVLW  01
29F2:  MOVWF  19
29F4:  CLRF   32
29F6:  MOVLW  02
29F8:  MOVWF  1D
29FA:  MOVWF  1F
....................        } 
....................        
....................            if(unidad>11&&unidad<14) 
29FC:  MOVF   1C,W
29FE:  SUBLW  0B
2A00:  BC    2A20
2A02:  MOVF   1C,W
2A04:  SUBLW  0D
2A06:  BNC   2A20
....................           { lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2A08:  MOVLW  01
2A0A:  SUBWF  1C,W
2A0C:  MOVWF  xA9
2A0E:  MOVWF  xBB
2A10:  MOVLW  04
2A12:  MOVWF  xBC
2A14:  CALL   084C
....................             lcd_putc(t[1]); 
2A18:  MOVFF  34,BA
2A1C:  CALL   08AE
....................           } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
2A20:  MOVF   19,W
2A22:  SUBLW  04
2A24:  BTFSS  FD8.2
2A26:  BRA    2BC4
....................    lcd_gotoxy(1,1); 
2A28:  MOVLW  01
2A2A:  MOVWF  xBB
2A2C:  MOVWF  xBC
2A2E:  CALL   084C
....................    printf(lcd_putc,"  Duracion Actual   "); 
2A32:  MOVLW  C2
2A34:  MOVWF  FF6
2A36:  MOVLW  04
2A38:  MOVWF  FF7
2A3A:  CALL   090C
....................    lcd_gotoxy(1,2); 
2A3E:  MOVLW  01
2A40:  MOVWF  xBB
2A42:  MOVLW  02
2A44:  MOVWF  xBC
2A46:  CALL   084C
....................    printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2A4A:  MOVLW  D8
2A4C:  MOVWF  FF6
2A4E:  MOVLW  04
2A50:  MOVWF  FF7
2A52:  MOVLW  0B
2A54:  MOVWF  xAD
2A56:  CALL   0950
2A5A:  MOVLW  08
2A5C:  MOVWF  FE9
2A5E:  MOVFF  42,AA
2A62:  MOVFF  41,A9
2A66:  GOTO   0B62
2A6A:  MOVLW  20
2A6C:  MOVWF  xBA
2A6E:  CALL   08AE
2A72:  MOVLW  20
2A74:  MOVWF  xBA
2A76:  CALL   08AE
2A7A:  MOVLW  20
2A7C:  MOVWF  xBA
2A7E:  CALL   08AE
....................    lcd_gotoxy(1,4); 
2A82:  MOVLW  01
2A84:  MOVWF  xBB
2A86:  MOVLW  04
2A88:  MOVWF  xBC
2A8A:  CALL   084C
....................    printf(lcd_putc," RESET= Oprima ^ y > "); 
2A8E:  MOVLW  EC
2A90:  MOVWF  FF6
2A92:  MOVLW  04
2A94:  MOVWF  FF7
2A96:  CALL   090C
....................     
....................       if(UP && RIGHT)//Si oprime hacia arriba 
2A9A:  BSF    F92.5
2A9C:  BTFSS  F80.5
2A9E:  BRA    2B90
2AA0:  BSF    F96.1
2AA2:  BTFSS  F84.1
2AA4:  BRA    2B90
....................       {   
....................          delay_ms(200); 
2AA6:  MOVLW  C8
2AA8:  MOVWF  xBB
2AAA:  CALL   06D8
....................          printf(lcd_putc,"\f"); 
2AAE:  MOVLW  0C
2AB0:  MOVWF  xBA
2AB2:  CALL   08AE
....................          lcd_gotoxy(1,2); 
2AB6:  MOVLW  01
2AB8:  MOVWF  xBB
2ABA:  MOVLW  02
2ABC:  MOVWF  xBC
2ABE:  CALL   084C
....................          printf(lcd_putc," Reset de tiempo "); 
2AC2:  MOVLW  02
2AC4:  MOVWF  FF6
2AC6:  MOVLW  05
2AC8:  MOVWF  FF7
2ACA:  CALL   090C
....................          lcd_gotoxy(1,3); 
2ACE:  MOVLW  01
2AD0:  MOVWF  xBB
2AD2:  MOVLW  03
2AD4:  MOVWF  xBC
2AD6:  CALL   084C
....................          printf(lcd_putc,"     Exitoso     "); 
2ADA:  MOVLW  14
2ADC:  MOVWF  FF6
2ADE:  MOVLW  05
2AE0:  MOVWF  FF7
2AE2:  CALL   090C
....................          write_eeprom(50,0);write_eeprom(51,0);write_eeprom(52,0); 
2AE6:  MOVLW  32
2AE8:  MOVWF  FA9
2AEA:  CLRF   FA8
2AEC:  BCF    FA6.6
2AEE:  BCF    FA6.7
2AF0:  BSF    FA6.2
2AF2:  MOVF   FF2,W
2AF4:  MOVWF  00
2AF6:  BCF    FF2.7
2AF8:  MOVLB  F
2AFA:  MOVLW  55
2AFC:  MOVWF  FA7
2AFE:  MOVLW  AA
2B00:  MOVWF  FA7
2B02:  BSF    FA6.1
2B04:  BTFSC  FA6.1
2B06:  BRA    2B04
2B08:  BCF    FA6.2
2B0A:  MOVF   00,W
2B0C:  IORWF  FF2,F
2B0E:  MOVLW  33
2B10:  MOVWF  FA9
2B12:  CLRF   FA8
2B14:  BCF    FA6.6
2B16:  BCF    FA6.7
2B18:  BSF    FA6.2
2B1A:  MOVF   FF2,W
2B1C:  MOVWF  00
2B1E:  BCF    FF2.7
2B20:  MOVLW  55
2B22:  MOVWF  FA7
2B24:  MOVLW  AA
2B26:  MOVWF  FA7
2B28:  BSF    FA6.1
2B2A:  BTFSC  FA6.1
2B2C:  BRA    2B2A
2B2E:  BCF    FA6.2
2B30:  MOVF   00,W
2B32:  IORWF  FF2,F
2B34:  MOVLW  34
2B36:  MOVWF  FA9
2B38:  CLRF   FA8
2B3A:  BCF    FA6.6
2B3C:  BCF    FA6.7
2B3E:  BSF    FA6.2
2B40:  MOVF   FF2,W
2B42:  MOVWF  00
2B44:  BCF    FF2.7
2B46:  MOVLW  55
2B48:  MOVWF  FA7
2B4A:  MOVLW  AA
2B4C:  MOVWF  FA7
2B4E:  BSF    FA6.1
2B50:  BTFSC  FA6.1
2B52:  BRA    2B50
2B54:  BCF    FA6.2
2B56:  MOVF   00,W
2B58:  IORWF  FF2,F
....................          delay_ms(700); 
2B5A:  MOVLW  04
2B5C:  MOVLB  0
2B5E:  MOVWF  xA9
2B60:  MOVLW  AF
2B62:  MOVWF  xBB
2B64:  CALL   06D8
2B68:  DECFSZ xA9,F
2B6A:  BRA    2B60
....................          segundos=0;minutos=0;horas=0; 
2B6C:  CLRF   22
2B6E:  CLRF   23
2B70:  CLRF   42
2B72:  CLRF   41
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2B74:  MOVLW  1E
2B76:  MOVWF  xBB
2B78:  CALL   06D8
2B7C:  MOVLW  01
2B7E:  MOVWF  19
2B80:  CLRF   32
2B82:  MOVLW  02
2B84:  MOVWF  1D
2B86:  MOVWF  1F
2B88:  MOVLW  0C
2B8A:  MOVWF  xBA
2B8C:  CALL   08AE
....................       } 
....................              
....................       if(IZQU)// Si oprime Izquierda 
2B90:  BSF    F96.2
2B92:  BTFSS  F84.2
2B94:  BRA    2BC2
....................       { 
....................          if(Flanco3 == 0) 
2B96:  BTFSC  17.6
2B98:  BRA    2BC0
....................          { 
....................             Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2B9A:  BSF    17.6
2B9C:  MOVLW  02
2B9E:  MOVWF  xA9
2BA0:  MOVLW  FA
2BA2:  MOVWF  xBB
2BA4:  CALL   06D8
2BA8:  DECFSZ xA9,F
2BAA:  BRA    2BA0
2BAC:  MOVLW  01
2BAE:  MOVWF  19
2BB0:  CLRF   32
2BB2:  MOVLW  02
2BB4:  MOVWF  1D
2BB6:  MOVWF  1F
2BB8:  MOVLW  0C
2BBA:  MOVWF  xBA
2BBC:  CALL   08AE
....................          } 
....................       } 
....................       else 
2BC0:  BRA    2BC4
....................       { 
....................          Flanco3 = 0; 
2BC2:  BCF    17.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
2BC4:  MOVF   19,W
2BC6:  SUBLW  05
2BC8:  BTFSS  FD8.2
2BCA:  BRA    2DE6
....................       lcd_gotoxy(1,1); 
2BCC:  MOVLW  01
2BCE:  MOVWF  xBB
2BD0:  MOVWF  xBC
2BD2:  CALL   084C
....................       printf(lcd_putc,"  Zero Point Config "); 
2BD6:  MOVLW  26
2BD8:  MOVWF  FF6
2BDA:  MOVLW  05
2BDC:  MOVWF  FF7
2BDE:  CALL   090C
....................       lcd_gotoxy(1,2); 
2BE2:  MOVLW  01
2BE4:  MOVWF  xBB
2BE6:  MOVLW  02
2BE8:  MOVWF  xBC
2BEA:  CALL   084C
....................       printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2BEE:  MOVLW  05
2BF0:  MOVWF  xA9
2BF2:  CALL   1050
2BF6:  MOVFF  00,A9
2BFA:  MOVFF  01,AA
2BFE:  MOVFF  02,AB
2C02:  MOVFF  03,AC
2C06:  MOVFF  03,C0
2C0A:  MOVFF  02,BF
2C0E:  MOVFF  01,BE
2C12:  MOVFF  00,BD
2C16:  MOVLW  D7
2C18:  MOVWF  xC4
2C1A:  MOVLW  A3
2C1C:  MOVWF  xC3
2C1E:  CLRF   xC2
2C20:  MOVLW  81
2C22:  MOVWF  xC1
2C24:  CALL   11E6
2C28:  MOVFF  00,A9
2C2C:  MOVFF  01,AA
2C30:  MOVFF  02,AB
2C34:  MOVFF  03,AC
2C38:  MOVLW  3C
2C3A:  MOVWF  FF6
2C3C:  MOVLW  05
2C3E:  MOVWF  FF7
2C40:  MOVLW  09
2C42:  MOVWF  xAD
2C44:  CALL   0950
2C48:  MOVLW  02
2C4A:  MOVWF  FE9
2C4C:  MOVFF  AC,B0
2C50:  MOVFF  AB,AF
2C54:  MOVFF  AA,AE
2C58:  MOVFF  A9,AD
2C5C:  MOVWF  xB1
2C5E:  CALL   1392
2C62:  MOVLW  4A
2C64:  MOVWF  FF6
2C66:  MOVLW  05
2C68:  MOVWF  FF7
2C6A:  MOVLW  07
2C6C:  MOVWF  xAD
2C6E:  CALL   0950
....................       lcd_gotoxy(1,3); 
2C72:  MOVLW  01
2C74:  MOVWF  xBB
2C76:  MOVLW  03
2C78:  MOVWF  xBC
2C7A:  CALL   084C
....................       printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
2C7E:  CLRF   xAE
2C80:  CALL   07FA
2C84:  MOVFF  00,A9
2C88:  MOVFF  01,AA
2C8C:  MOVFF  02,AB
2C90:  MOVFF  03,AC
2C94:  MOVLW  52
2C96:  MOVWF  FF6
2C98:  MOVLW  05
2C9A:  MOVWF  FF7
2C9C:  MOVLW  08
2C9E:  MOVWF  xAD
2CA0:  CALL   0950
2CA4:  MOVLW  01
2CA6:  MOVWF  FE9
2CA8:  MOVFF  AC,B0
2CAC:  MOVFF  AB,AF
2CB0:  MOVFF  AA,AE
2CB4:  MOVFF  A9,AD
2CB8:  CLRF   xB1
2CBA:  CALL   1392
....................       lcd_gotoxy(1,4); 
2CBE:  MOVLW  01
2CC0:  MOVWF  xBB
2CC2:  MOVLW  04
2CC4:  MOVWF  xBC
2CC6:  CALL   084C
....................       printf(lcd_putc,"    ZF=%2.0f",G); 
2CCA:  MOVLW  60
2CCC:  MOVWF  FF6
2CCE:  MOVLW  05
2CD0:  MOVWF  FF7
2CD2:  MOVLW  07
2CD4:  MOVWF  xAD
2CD6:  CALL   0950
2CDA:  MOVLW  01
2CDC:  MOVWF  FE9
2CDE:  MOVFF  A8,B0
2CE2:  MOVFF  A7,AF
2CE6:  MOVFF  A6,AE
2CEA:  MOVFF  A5,AD
2CEE:  CLRF   xB1
2CF0:  CALL   1392
....................      
....................       if(RIGHT)// Si oprime derecha 
2CF4:  BSF    F96.1
2CF6:  BTFSS  F84.1
2CF8:  BRA    2DB6
....................       {  if(Flanco1 == 0)  
2CFA:  BTFSC  17.4
2CFC:  BRA    2DB4
....................             {/*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2CFE:  MOVLW  01
2D00:  MOVWF  19
2D02:  CLRF   32
2D04:  MOVLW  02
2D06:  MOVWF  1D
2D08:  MOVWF  1F
2D0A:  MOVLW  0B
2D0C:  MOVWF  1C
2D0E:  MOVLW  02
2D10:  MOVWF  xA9
2D12:  MOVLW  FA
2D14:  MOVWF  xBB
2D16:  CALL   06D8
2D1A:  DECFSZ xA9,F
2D1C:  BRA    2D12
2D1E:  MOVLW  0C
2D20:  MOVWF  xBA
2D22:  CALL   08AE
....................             G=sensores(0); 
2D26:  CLRF   xAE
2D28:  CALL   07FA
2D2C:  MOVFF  03,A8
2D30:  MOVFF  02,A7
2D34:  MOVFF  01,A6
2D38:  MOVFF  00,A5
....................             G16=(int16)G; 
2D3C:  MOVFF  A8,C0
2D40:  MOVFF  A7,BF
2D44:  MOVFF  A6,BE
2D48:  MOVFF  A5,BD
2D4C:  CALL   1518
2D50:  MOVFF  02,44
2D54:  MOVFF  01,43
....................             G_l=G16; G_h=(G16>>8); 
2D58:  MOVFF  43,26
2D5C:  MOVFF  44,27
....................              
....................             write_eeprom(60,G_l);write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
2D60:  MOVLW  3C
2D62:  MOVWF  FA9
2D64:  MOVFF  26,FA8
2D68:  BCF    FA6.6
2D6A:  BCF    FA6.7
2D6C:  BSF    FA6.2
2D6E:  MOVF   FF2,W
2D70:  MOVWF  00
2D72:  BCF    FF2.7
2D74:  MOVLB  F
2D76:  MOVLW  55
2D78:  MOVWF  FA7
2D7A:  MOVLW  AA
2D7C:  MOVWF  FA7
2D7E:  BSF    FA6.1
2D80:  BTFSC  FA6.1
2D82:  BRA    2D80
2D84:  BCF    FA6.2
2D86:  MOVF   00,W
2D88:  IORWF  FF2,F
2D8A:  MOVLW  3D
2D8C:  MOVWF  FA9
2D8E:  MOVFF  27,FA8
2D92:  BCF    FA6.6
2D94:  BCF    FA6.7
2D96:  BSF    FA6.2
2D98:  MOVF   FF2,W
2D9A:  MOVWF  00
2D9C:  BCF    FF2.7
2D9E:  MOVLW  55
2DA0:  MOVWF  FA7
2DA2:  MOVLW  AA
2DA4:  MOVWF  FA7
2DA6:  BSF    FA6.1
2DA8:  BTFSC  FA6.1
2DAA:  BRA    2DA8
2DAC:  BCF    FA6.2
2DAE:  MOVF   00,W
2DB0:  IORWF  FF2,F
2DB2:  MOVLB  0
....................             }} 
....................          else 
2DB4:  BRA    2DB8
....................             {Flanco1 = 0;}    
2DB6:  BCF    17.4
....................              
....................        if(IZQU)// Si oprime Izquierda 
2DB8:  BSF    F96.2
2DBA:  BTFSS  F84.2
2DBC:  BRA    2DE4
....................       {  if(Flanco3 == 0)  
2DBE:  BTFSC  17.6
2DC0:  BRA    2DE2
....................             {/*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f");}} 
2DC2:  MOVLW  01
2DC4:  MOVWF  19
2DC6:  CLRF   32
2DC8:  MOVLW  02
2DCA:  MOVWF  1D
2DCC:  MOVWF  1F
2DCE:  MOVLW  0B
2DD0:  MOVWF  1C
2DD2:  MOVLW  1E
2DD4:  MOVWF  xBB
2DD6:  CALL   06D8
2DDA:  MOVLW  0C
2DDC:  MOVWF  xBA
2DDE:  CALL   08AE
....................          else 
2DE2:  BRA    2DE6
....................             {Flanco3 = 0;}   
2DE4:  BCF    17.6
....................       } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
2DE6:  MOVF   19,W
2DE8:  SUBLW  06
2DEA:  BTFSS  FD8.2
2DEC:  BRA    2F12
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
2DEE:  BTG    18.4
2DF0:  BSF    17.4
2DF2:  MOVLW  01
2DF4:  MOVWF  19
2DF6:  CLRF   32
....................                        
....................             if(estadoalarma==1) 
2DF8:  BTFSS  18.4
2DFA:  BRA    2E5C
....................             {estadoalarma=1; 
2DFC:  BSF    18.4
....................                lcd_gotoxy(1,1); 
2DFE:  MOVLW  01
2E00:  MOVWF  xBB
2E02:  MOVWF  xBC
2E04:  CALL   084C
....................                printf(lcd_putc,"                    "); 
2E08:  MOVLW  6E
2E0A:  MOVWF  FF6
2E0C:  MOVLW  05
2E0E:  MOVWF  FF7
2E10:  CALL   090C
....................                lcd_gotoxy(1,2); 
2E14:  MOVLW  01
2E16:  MOVWF  xBB
2E18:  MOVLW  02
2E1A:  MOVWF  xBC
2E1C:  CALL   084C
....................                printf(lcd_putc,"        Activo      "); 
2E20:  MOVLW  84
2E22:  MOVWF  FF6
2E24:  MOVLW  05
2E26:  MOVWF  FF7
2E28:  CALL   090C
....................                lcd_gotoxy(1,3); 
2E2C:  MOVLW  01
2E2E:  MOVWF  xBB
2E30:  MOVLW  03
2E32:  MOVWF  xBC
2E34:  CALL   084C
....................                printf(lcd_putc,"        Alarma      "); 
2E38:  MOVLW  9A
2E3A:  MOVWF  FF6
2E3C:  MOVLW  05
2E3E:  MOVWF  FF7
2E40:  CALL   090C
....................                lcd_gotoxy(1,4); 
2E44:  MOVLW  01
2E46:  MOVWF  xBB
2E48:  MOVLW  04
2E4A:  MOVWF  xBC
2E4C:  CALL   084C
....................                printf(lcd_putc,"                    ");} 
2E50:  MOVLW  B0
2E52:  MOVWF  FF6
2E54:  MOVLW  05
2E56:  MOVWF  FF7
2E58:  CALL   090C
....................                 
....................             if(estadoalarma==0) 
2E5C:  BTFSC  18.4
2E5E:  BRA    2EC0
....................             {estadoalarma=0; 
2E60:  BCF    18.4
....................                lcd_gotoxy(1,1); 
2E62:  MOVLW  01
2E64:  MOVWF  xBB
2E66:  MOVWF  xBC
2E68:  CALL   084C
....................                printf(lcd_putc,"                    "); 
2E6C:  MOVLW  C6
2E6E:  MOVWF  FF6
2E70:  MOVLW  05
2E72:  MOVWF  FF7
2E74:  CALL   090C
....................                lcd_gotoxy(1,2); 
2E78:  MOVLW  01
2E7A:  MOVWF  xBB
2E7C:  MOVLW  02
2E7E:  MOVWF  xBC
2E80:  CALL   084C
....................                printf(lcd_putc,"      Desactivo     "); 
2E84:  MOVLW  DC
2E86:  MOVWF  FF6
2E88:  MOVLW  05
2E8A:  MOVWF  FF7
2E8C:  CALL   090C
....................                lcd_gotoxy(1,3); 
2E90:  MOVLW  01
2E92:  MOVWF  xBB
2E94:  MOVLW  03
2E96:  MOVWF  xBC
2E98:  CALL   084C
....................                printf(lcd_putc,"       Alarma       "); 
2E9C:  MOVLW  F2
2E9E:  MOVWF  FF6
2EA0:  MOVLW  05
2EA2:  MOVWF  FF7
2EA4:  CALL   090C
....................                lcd_gotoxy(1,4); 
2EA8:  MOVLW  01
2EAA:  MOVWF  xBB
2EAC:  MOVLW  04
2EAE:  MOVWF  xBC
2EB0:  CALL   084C
....................                printf(lcd_putc,"                    ");} 
2EB4:  MOVLW  08
2EB6:  MOVWF  FF6
2EB8:  MOVLW  06
2EBA:  MOVWF  FF7
2EBC:  CALL   090C
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2EC0:  MOVLW  00
2EC2:  BTFSC  18.4
2EC4:  MOVLW  01
2EC6:  MOVWF  xA9
2EC8:  MOVLW  05
2ECA:  MOVWF  FA9
2ECC:  MOVFF  A9,FA8
2ED0:  BCF    FA6.6
2ED2:  BCF    FA6.7
2ED4:  BSF    FA6.2
2ED6:  MOVF   FF2,W
2ED8:  MOVWF  00
2EDA:  BCF    FF2.7
2EDC:  MOVLB  F
2EDE:  MOVLW  55
2EE0:  MOVWF  FA7
2EE2:  MOVLW  AA
2EE4:  MOVWF  FA7
2EE6:  BSF    FA6.1
2EE8:  BTFSC  FA6.1
2EEA:  BRA    2EE8
2EEC:  BCF    FA6.2
2EEE:  MOVF   00,W
2EF0:  IORWF  FF2,F
2EF2:  MOVLW  04
2EF4:  MOVLB  0
2EF6:  MOVWF  xA9
2EF8:  MOVLW  FA
2EFA:  MOVWF  xBB
2EFC:  CALL   06D8
2F00:  DECFSZ xA9,F
2F02:  BRA    2EF8
2F04:  MOVLW  02
2F06:  MOVWF  1D
2F08:  MOVWF  1F
2F0A:  MOVLW  0C
2F0C:  MOVWF  xBA
2F0E:  CALL   08AE
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV 
2F12:  MOVF   19,W
2F14:  SUBLW  32
2F16:  BTFSS  FD8.2
2F18:  BRA    33DC
....................  
....................    if(Lectura==1) 
2F1A:  BTFSS  18.0
2F1C:  BRA    2F38
....................    { 
....................       Lectura=0; 
2F1E:  BCF    18.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
2F20:  MOVLW  05
2F22:  MOVWF  xA9
2F24:  CALL   1050
2F28:  MOVFF  03,A4
2F2C:  MOVFF  02,A3
2F30:  MOVFF  01,A2
2F34:  MOVFF  00,A1
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
2F38:  BTFSS  17.7
2F3A:  BRA    2FD4
....................    { 
....................       if(estadoalarma==1) 
2F3C:  BTFSS  18.4
2F3E:  BRA    2FCA
....................       { 
....................          printf(lcd_putc,"\f"); 
2F40:  MOVLW  0C
2F42:  MOVWF  xBA
2F44:  CALL   08AE
....................          lcd_gotoxy(1,2); 
2F48:  MOVLW  01
2F4A:  MOVWF  xBB
2F4C:  MOVLW  02
2F4E:  MOVWF  xBC
2F50:  CALL   084C
....................          printf(lcd_putc,"  Temporizador  de  "); 
2F54:  MOVLW  1E
2F56:  MOVWF  FF6
2F58:  MOVLW  06
2F5A:  MOVWF  FF7
2F5C:  CALL   090C
....................          lcd_gotoxy(1,3); 
2F60:  MOVLW  01
2F62:  MOVWF  xBB
2F64:  MOVLW  03
2F66:  MOVWF  xBC
2F68:  CALL   084C
....................          printf(lcd_putc," Luz UV  Finalizado "); 
2F6C:  MOVLW  34
2F6E:  MOVWF  FF6
2F70:  MOVLW  06
2F72:  MOVWF  FF7
2F74:  CALL   090C
....................          lcd_gotoxy(1,4); 
2F78:  MOVLW  01
2F7A:  MOVWF  xBB
2F7C:  MOVLW  04
2F7E:  MOVWF  xBC
2F80:  CALL   084C
....................          printf(lcd_putc,"                    "); 
2F84:  MOVLW  4A
2F86:  MOVWF  FF6
2F88:  MOVLW  06
2F8A:  MOVWF  FF7
2F8C:  CALL   090C
....................          lcd_gotoxy(1,1); 
2F90:  MOVLW  01
2F92:  MOVWF  xBB
2F94:  MOVWF  xBC
2F96:  CALL   084C
....................          printf(lcd_putc,"                    "); 
2F9A:  MOVLW  60
2F9C:  MOVWF  FF6
2F9E:  MOVLW  06
2FA0:  MOVWF  FF7
2FA2:  CALL   090C
....................          for(i=0;i<5;i++) 
2FA6:  CLRF   2E
2FA8:  MOVF   2E,W
2FAA:  SUBLW  04
2FAC:  BNC   2FCA
....................          { 
....................             Buzzer_on; 
2FAE:  BSF    F8C.0
2FB0:  BCF    F95.0
....................             delay_ms(200); 
2FB2:  MOVLW  C8
2FB4:  MOVWF  xBB
2FB6:  CALL   06D8
....................             Buzzer_off; 
2FBA:  BCF    F8C.0
2FBC:  BCF    F95.0
....................             delay_ms(200); 
2FBE:  MOVLW  C8
2FC0:  MOVWF  xBB
2FC2:  CALL   06D8
....................          } 
2FC6:  INCF   2E,F
2FC8:  BRA    2FA8
....................       } 
....................       tiempo_cumplido=0; 
2FCA:  BCF    17.7
....................       printf(lcd_putc,"\f"); 
2FCC:  MOVLW  0C
2FCE:  MOVWF  xBA
2FD0:  CALL   08AE
....................    } 
....................     
....................    if(CaidaPresion>=0.37) 
2FD4:  MOVLW  A4
2FD6:  MOVWF  xC0
2FD8:  MOVLW  70
2FDA:  MOVWF  xBF
2FDC:  MOVLW  3D
2FDE:  MOVWF  xBE
2FE0:  MOVLW  7D
2FE2:  MOVWF  xBD
2FE4:  MOVFF  A4,C4
2FE8:  MOVFF  A3,C3
2FEC:  MOVFF  A2,C2
2FF0:  MOVFF  A1,C1
2FF4:  CALL   0FDA
2FF8:  BC    2FFC
2FFA:  BNZ   3002
....................    {  
....................       ActivaBuzzer=1; 
2FFC:  MOVLW  01
2FFE:  MOVWF  3E
....................    } 
....................    else 
3000:  BRA    3008
....................    { 
....................       ActivaBuzzer=0; 
3002:  CLRF   3E
....................       Buzzer_off; 
3004:  BCF    F8C.0
3006:  BCF    F95.0
....................    } 
....................        
....................    lcd_gotoxy(1,1); 
3008:  MOVLW  01
300A:  MOVWF  xBB
300C:  MOVWF  xBC
300E:  CALL   084C
....................    printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02)); 
3012:  MOVFF  A4,C0
3016:  MOVFF  A3,BF
301A:  MOVFF  A2,BE
301E:  MOVFF  A1,BD
3022:  MOVLW  D7
3024:  MOVWF  xC4
3026:  MOVLW  A3
3028:  MOVWF  xC3
302A:  CLRF   xC2
302C:  MOVLW  81
302E:  MOVWF  xC1
3030:  CALL   11E6
3034:  MOVFF  00,A9
3038:  MOVFF  01,AA
303C:  MOVFF  02,AB
3040:  MOVFF  03,AC
3044:  MOVLW  76
3046:  MOVWF  FF6
3048:  MOVLW  06
304A:  MOVWF  FF7
304C:  MOVLW  08
304E:  MOVWF  xAD
3050:  CALL   0950
3054:  MOVLW  02
3056:  MOVWF  FE9
3058:  MOVFF  AC,B0
305C:  MOVFF  AB,AF
3060:  MOVFF  AA,AE
3064:  MOVFF  A9,AD
3068:  MOVWF  xB1
306A:  CALL   1392
306E:  MOVLW  83
3070:  MOVWF  FF6
3072:  MOVLW  06
3074:  MOVWF  FF7
3076:  MOVLW  07
3078:  MOVWF  xAD
307A:  CALL   0950
....................    lcd_gotoxy(1,2); 
307E:  MOVLW  01
3080:  MOVWF  xBB
3082:  MOVLW  02
3084:  MOVWF  xBC
3086:  CALL   084C
....................    printf(lcd_putc,"Filtro:"); 
308A:  MOVLW  8C
308C:  MOVWF  FF6
308E:  MOVLW  06
3090:  MOVWF  FF7
3092:  CALL   090C
....................     
....................    Saturacion=(CaidaPresion/0.37)*11; 
3096:  MOVFF  A4,C0
309A:  MOVFF  A3,BF
309E:  MOVFF  A2,BE
30A2:  MOVFF  A1,BD
30A6:  MOVLW  A4
30A8:  MOVWF  xC4
30AA:  MOVLW  70
30AC:  MOVWF  xC3
30AE:  MOVLW  3D
30B0:  MOVWF  xC2
30B2:  MOVLW  7D
30B4:  MOVWF  xC1
30B6:  CALL   0C16
30BA:  MOVFF  00,A9
30BE:  MOVFF  01,AA
30C2:  MOVFF  02,AB
30C6:  MOVFF  03,AC
30CA:  MOVFF  03,C0
30CE:  MOVFF  02,BF
30D2:  MOVFF  01,BE
30D6:  MOVFF  00,BD
30DA:  CLRF   xC4
30DC:  CLRF   xC3
30DE:  MOVLW  30
30E0:  MOVWF  xC2
30E2:  MOVLW  82
30E4:  MOVWF  xC1
30E6:  CALL   11E6
30EA:  MOVFF  03,A0
30EE:  MOVFF  02,9F
30F2:  MOVFF  01,9E
30F6:  MOVFF  00,9D
....................    if(Saturacion>11) 
30FA:  CLRF   xC0
30FC:  CLRF   xBF
30FE:  MOVLW  30
3100:  MOVWF  xBE
3102:  MOVLW  82
3104:  MOVWF  xBD
3106:  MOVFF  A0,C4
310A:  MOVFF  9F,C3
310E:  MOVFF  9E,C2
3112:  MOVFF  9D,C1
3116:  CALL   0FDA
311A:  BNC   3128
....................    { 
....................       Saturacion=11; 
311C:  CLRF   xA0
311E:  CLRF   x9F
3120:  MOVLW  30
3122:  MOVWF  x9E
3124:  MOVLW  82
3126:  MOVWF  x9D
....................    } 
....................     
....................    for(i=0;i<floor(Saturacion);i++) 
3128:  CLRF   2E
312A:  MOVFF  A0,AC
312E:  MOVFF  9F,AB
3132:  MOVFF  9E,AA
3136:  MOVFF  9D,A9
313A:  CALL   1882
313E:  MOVFF  00,A9
3142:  MOVFF  01,AA
3146:  MOVFF  02,AB
314A:  MOVFF  03,AC
314E:  CLRF   xC2
3150:  MOVFF  2E,C1
3154:  CALL   07C4
3158:  MOVFF  03,C0
315C:  MOVFF  02,BF
3160:  MOVFF  01,BE
3164:  MOVFF  00,BD
3168:  MOVFF  AC,C4
316C:  MOVFF  AB,C3
3170:  MOVFF  AA,C2
3174:  MOVFF  A9,C1
3178:  CALL   0FDA
317C:  BNC   319A
....................    { 
....................       lcd_gotoxy(i+8,2); 
317E:  MOVLW  08
3180:  ADDWF  2E,W
3182:  MOVWF  xA9
3184:  MOVWF  xBB
3186:  MOVLW  02
3188:  MOVWF  xBC
318A:  CALL   084C
....................       printf(lcd_putc,"Ñ"); 
318E:  MOVLW  D1
3190:  MOVWF  xBA
3192:  CALL   08AE
....................    } 
3196:  INCF   2E,F
3198:  BRA    312A
....................     
....................    for(i=floor(Saturacion);i<11;i++) 
319A:  MOVFF  A0,AC
319E:  MOVFF  9F,AB
31A2:  MOVFF  9E,AA
31A6:  MOVFF  9D,A9
31AA:  CALL   1882
31AE:  MOVFF  03,C0
31B2:  MOVFF  02,BF
31B6:  MOVFF  01,BE
31BA:  MOVFF  00,BD
31BE:  CALL   1518
31C2:  MOVFF  01,2E
31C6:  MOVF   2E,W
31C8:  SUBLW  0A
31CA:  BNC   31E8
....................    { 
....................       lcd_gotoxy(i+8,2); 
31CC:  MOVLW  08
31CE:  ADDWF  2E,W
31D0:  MOVWF  xA9
31D2:  MOVWF  xBB
31D4:  MOVLW  02
31D6:  MOVWF  xBC
31D8:  CALL   084C
....................       printf(lcd_putc," "); 
31DC:  MOVLW  20
31DE:  MOVWF  xBA
31E0:  CALL   08AE
....................    } 
31E4:  INCF   2E,F
31E6:  BRA    31C6
....................     
....................    lcd_gotoxy(9,3); 
31E8:  MOVLW  09
31EA:  MOVWF  xBB
31EC:  MOVLW  03
31EE:  MOVWF  xBC
31F0:  CALL   084C
....................    printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
31F4:  MOVLW  94
31F6:  MOVWF  FF6
31F8:  MOVLW  06
31FA:  MOVWF  FF7
31FC:  MOVLW  06
31FE:  MOVWF  xAD
3200:  CALL   0950
3204:  MOVFF  28,A9
3208:  MOVLW  03
320A:  MOVWF  xAA
320C:  CALL   0AFC
3210:  MOVLW  3A
3212:  MOVWF  xBA
3214:  CALL   08AE
3218:  MOVFF  29,A9
321C:  MOVLW  01
321E:  MOVWF  xAA
3220:  CALL   0AFC
....................     
....................    if(estadomv==1) 
3224:  BTFSS  17.2
3226:  BRA    324A
....................    { 
....................       lcd_gotoxy(1,4); 
3228:  MOVLW  01
322A:  MOVWF  xBB
322C:  MOVLW  04
322E:  MOVWF  xBC
3230:  CALL   084C
....................       printf(lcd_putc,"Motor:ON ");       
3234:  MOVLW  A4
3236:  MOVWF  FF6
3238:  MOVLW  06
323A:  MOVWF  FF7
323C:  CALL   090C
....................       velocidades(1); 
3240:  MOVLW  01
3242:  MOVWF  xA9
3244:  CALL   1898
....................    } 
....................    else 
3248:  BRA    3268
....................    { 
....................       lcd_gotoxy(1,4); 
324A:  MOVLW  01
324C:  MOVWF  xBB
324E:  MOVLW  04
3250:  MOVWF  xBC
3252:  CALL   084C
....................       printf(lcd_putc,"Motor:OFF"); 
3256:  MOVLW  AE
3258:  MOVWF  FF6
325A:  MOVLW  06
325C:  MOVWF  FF7
325E:  CALL   090C
....................       velocidades(0);  
3262:  CLRF   xA9
3264:  CALL   1898
....................    } 
....................     
....................    if(estadouv==1) 
3268:  BTFSS  17.0
326A:  BRA    32B4
....................    { 
....................       lcd_gotoxy(13,4); 
326C:  MOVLW  0D
326E:  MOVWF  xBB
3270:  MOVLW  04
3272:  MOVWF  xBC
3274:  CALL   084C
....................       printf(lcd_putc,"UV:ON "); 
3278:  MOVLW  B8
327A:  MOVWF  FF6
327C:  MOVLW  06
327E:  MOVWF  FF7
3280:  CALL   090C
....................       estadomv=0; 
3284:  BCF    17.2
....................       velocidades(0); 
3286:  CLRF   xA9
3288:  CALL   1898
....................       estadofl=0; 
328C:  BCF    17.1
....................       Luz_Blanca_off; 
328E:  BCF    F8C.2
3290:  BCF    F95.2
....................       Luz_UV_on; 
3292:  BSF    F8C.1
3294:  BCF    F95.1
....................       tiempo_cumplido=0; 
3296:  BCF    17.7
....................       if(flaguv==0) 
3298:  BTFSC  18.1
329A:  BRA    32B2
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1; 
329C:  CALL   076E
32A0:  MOVLW  C8
32A2:  MOVWF  xBB
32A4:  CALL   06D8
32A8:  CALL   076E
32AC:  BSF    18.1
32AE:  MOVLW  01
32B0:  MOVWF  31
....................       } 
....................    } 
....................    else 
32B2:  BRA    32EC
....................    { 
....................       estadouv=0; 
32B4:  BCF    17.0
....................       lcd_gotoxy(13,4); 
32B6:  MOVLW  0D
32B8:  MOVWF  xBB
32BA:  MOVLW  04
32BC:  MOVWF  xBC
32BE:  CALL   084C
....................       printf(lcd_putc,"UV:OFF"); 
32C2:  MOVLW  C0
32C4:  MOVWF  FF6
32C6:  MOVLW  06
32C8:  MOVWF  FF7
32CA:  CALL   090C
....................       Luz_UV_off; 
32CE:  BCF    F8C.1
32D0:  BCF    F95.1
....................       if(flaguv==1) 
32D2:  BTFSS  18.1
32D4:  BRA    32EC
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1; 
32D6:  CALL   076E
32DA:  MOVLW  C8
32DC:  MOVWF  xBB
32DE:  CALL   06D8
32E2:  CALL   076E
32E6:  BCF    18.1
32E8:  MOVLW  01
32EA:  MOVWF  31
....................       } 
....................    } 
....................     
....................    if(estadofl==1) 
32EC:  BTFSS  17.1
32EE:  BRA    3324
....................    { 
....................       lcd_gotoxy(1,3); 
32F0:  MOVLW  01
32F2:  MOVWF  xBB
32F4:  MOVLW  03
32F6:  MOVWF  xBC
32F8:  CALL   084C
....................       printf(lcd_putc,"Luz:ON "); 
32FC:  MOVLW  C8
32FE:  MOVWF  FF6
3300:  MOVLW  06
3302:  MOVWF  FF7
3304:  CALL   090C
....................       Luz_Blanca_on; 
3308:  BSF    F8C.2
330A:  BCF    F95.2
....................       if(flagfl==0) 
330C:  BTFSC  18.2
330E:  BRA    3322
....................       { 
....................          lcd_init();delay_ms(50);lcd_init();flagfl=1; 
3310:  CALL   076E
3314:  MOVLW  32
3316:  MOVWF  xBB
3318:  CALL   06D8
331C:  CALL   076E
3320:  BSF    18.2
....................       } 
....................    } 
....................    else 
3322:  BRA    3356
....................    { 
....................       lcd_gotoxy(1,3); 
3324:  MOVLW  01
3326:  MOVWF  xBB
3328:  MOVLW  03
332A:  MOVWF  xBC
332C:  CALL   084C
....................       printf(lcd_putc,"Luz:OFF"); 
3330:  MOVLW  D0
3332:  MOVWF  FF6
3334:  MOVLW  06
3336:  MOVWF  FF7
3338:  CALL   090C
....................       Luz_Blanca_off; 
333C:  BCF    F8C.2
333E:  BCF    F95.2
....................       if(flagfl==1) 
3340:  BTFSS  18.2
3342:  BRA    3356
....................       { 
....................          lcd_init();delay_ms(50);lcd_init();flagfl=0; 
3344:  CALL   076E
3348:  MOVLW  32
334A:  MOVWF  xBB
334C:  CALL   06D8
3350:  CALL   076E
3354:  BCF    18.2
....................       } 
....................    } 
....................     
....................   if(DOWN)//Si oprime hacia arriba 
3356:  BSF    F96.0
3358:  BTFSS  F84.0
335A:  BRA    3376
....................    { 
....................       if(Flanco == 0) 
335C:  BTFSC  17.3
335E:  BRA    3374
....................       { 
....................          estadofl=!estadofl;Flanco = 1;delay_ms(300); 
3360:  BTG    17.1
3362:  BSF    17.3
3364:  MOVLW  02
3366:  MOVWF  xA9
3368:  MOVLW  96
336A:  MOVWF  xBB
336C:  CALL   06D8
3370:  DECFSZ xA9,F
3372:  BRA    3368
....................       } 
....................    } 
....................    else 
3374:  BRA    3378
....................    { 
....................       Flanco = 0; 
3376:  BCF    17.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
3378:  BSF    F96.1
337A:  BTFSS  F84.1
337C:  BRA    3398
....................    { 
....................       if(Flanco1 == 0) 
337E:  BTFSC  17.4
3380:  BRA    3396
....................       { 
....................          estadomv=!estadomv;Flanco1 = 1;delay_ms(300); 
3382:  BTG    17.2
3384:  BSF    17.4
3386:  MOVLW  02
3388:  MOVWF  xA9
338A:  MOVLW  96
338C:  MOVWF  xBB
338E:  CALL   06D8
3392:  DECFSZ xA9,F
3394:  BRA    338A
....................       } 
....................    } 
....................    else 
3396:  BRA    339A
....................    { 
....................       Flanco1 = 0; 
3398:  BCF    17.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
339A:  BSF    F96.2
339C:  BTFSS  F84.2
339E:  BRA    33AA
....................    { 
....................       delay_ms(150);  
33A0:  MOVLW  96
33A2:  MOVWF  xBB
33A4:  CALL   06D8
....................       estadouv=!estadouv; 
33A8:  BTG    17.0
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
33AA:  BSF    F92.5
33AC:  BTFSS  F80.5
33AE:  BRA    33DC
....................    { 
....................       delay_ms(200); 
33B0:  MOVLW  C8
33B2:  MOVWF  xBB
33B4:  CALL   06D8
....................       printf(lcd_putc,"\f"); 
33B8:  MOVLW  0C
33BA:  MOVWF  xBA
33BC:  CALL   08AE
....................       delay_ms(300); 
33C0:  MOVLW  02
33C2:  MOVWF  xA9
33C4:  MOVLW  96
33C6:  MOVWF  xBB
33C8:  CALL   06D8
33CC:  DECFSZ xA9,F
33CE:  BRA    33C4
....................       Menu=1;  
33D0:  MOVLW  01
33D2:  MOVWF  19
....................       paso=0; 
33D4:  CLRF   32
....................       Flecha=2; 
33D6:  MOVLW  02
33D8:  MOVWF  1D
....................       Flecha2=2; 
33DA:  MOVWF  1F
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------    
....................    if(guardaruv==1) 
33DC:  DECFSZ 31,W
33DE:  BRA    348E
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
33E0:  MOVLW  32
33E2:  MOVWF  FA9
33E4:  MOVFF  22,FA8
33E8:  BCF    FA6.6
33EA:  BCF    FA6.7
33EC:  BSF    FA6.2
33EE:  MOVF   FF2,W
33F0:  MOVWF  00
33F2:  BCF    FF2.7
33F4:  MOVLB  F
33F6:  MOVLW  55
33F8:  MOVWF  FA7
33FA:  MOVLW  AA
33FC:  MOVWF  FA7
33FE:  BSF    FA6.1
3400:  BTFSC  FA6.1
3402:  BRA    3400
3404:  BCF    FA6.2
3406:  MOVF   00,W
3408:  IORWF  FF2,F
340A:  MOVLW  33
340C:  MOVWF  FA9
340E:  MOVFF  23,FA8
3412:  BCF    FA6.6
3414:  BCF    FA6.7
3416:  BSF    FA6.2
3418:  MOVF   FF2,W
341A:  MOVWF  00
341C:  BCF    FF2.7
341E:  MOVLW  55
3420:  MOVWF  FA7
3422:  MOVLW  AA
3424:  MOVWF  FA7
3426:  BSF    FA6.1
3428:  BTFSC  FA6.1
342A:  BRA    3428
342C:  BCF    FA6.2
342E:  MOVF   00,W
3430:  IORWF  FF2,F
....................       horasL=(int8)horas; 
3432:  MOVFF  41,24
....................       horasH=(int8)(horas>>8); 
3436:  MOVF   42,W
3438:  MOVWF  25
....................       write_eeprom(52,horasL); 
343A:  MOVLW  34
343C:  MOVWF  FA9
343E:  MOVFF  24,FA8
3442:  BCF    FA6.6
3444:  BCF    FA6.7
3446:  BSF    FA6.2
3448:  MOVFF  FF2,00
344C:  BCF    FF2.7
344E:  MOVLW  55
3450:  MOVWF  FA7
3452:  MOVLW  AA
3454:  MOVWF  FA7
3456:  BSF    FA6.1
3458:  BTFSC  FA6.1
345A:  BRA    3458
345C:  BCF    FA6.2
345E:  MOVF   00,W
3460:  IORWF  FF2,F
....................       write_eeprom(53,horasH); 
3462:  MOVLW  35
3464:  MOVWF  FA9
3466:  MOVFF  25,FA8
346A:  BCF    FA6.6
346C:  BCF    FA6.7
346E:  BSF    FA6.2
3470:  MOVFF  FF2,00
3474:  BCF    FF2.7
3476:  MOVLW  55
3478:  MOVWF  FA7
347A:  MOVLW  AA
347C:  MOVWF  FA7
347E:  BSF    FA6.1
3480:  BTFSC  FA6.1
3482:  BRA    3480
3484:  BCF    FA6.2
3486:  MOVF   00,W
3488:  IORWF  FF2,F
....................       guardaruv=0; 
348A:  CLRF   31
348C:  MOVLB  0
....................    } 
....................    
....................    if(tiemporeset>=20) 
348E:  MOVF   30,W
3490:  SUBLW  13
3492:  BC    34B4
....................    { 
....................       if(Menu==50){ 
3494:  MOVF   19,W
3496:  SUBLW  32
3498:  BNZ   34B2
....................          lcd_init();delay_ms(200);lcd_init();delay_ms(20); 
349A:  CALL   076E
349E:  MOVLW  C8
34A0:  MOVWF  xBB
34A2:  CALL   06D8
34A6:  CALL   076E
34AA:  MOVLW  14
34AC:  MOVWF  xBB
34AE:  CALL   06D8
....................       } 
....................       tiemporeset=0; 
34B2:  CLRF   30
....................    }    
....................     
....................    if(segundos>=60) 
34B4:  MOVF   22,W
34B6:  SUBLW  3B
34B8:  BC    34BE
....................    { 
....................       segundos=0;minutos++; 
34BA:  CLRF   22
34BC:  INCF   23,F
....................    } 
....................    if(minutos==60) 
34BE:  MOVF   23,W
34C0:  SUBLW  3C
34C2:  BNZ   34CC
....................    { 
....................       minutos=0;horas++; 
34C4:  CLRF   23
34C6:  INCF   41,F
34C8:  BTFSC  FD8.2
34CA:  INCF   42,F
....................    } 
....................     
....................    } 
34CC:  GOTO   1C4A
.................... } 
....................  
34D0:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
