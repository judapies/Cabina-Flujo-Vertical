CCS PCH C Compiler, Version 4.104, 5967               11-oct.-18 09:11

               Filename: H:\JP\JP\Laboratorio\Cabina de Flujo Laminar Vertical\2018\CFLV 90 V2.0 Avantika #0045878XX\Firmware V2.0\CabinaCFLH.lst

               ROM used: 14448 bytes (44%)
                         Largest free fragment is 18318
               RAM used: 179 (9%) at main() level
                         216 (11%) worst case
               Stack:    7 worst case (6 in main + 1 for interrupts)

*
0000:  GOTO   1942
*
0008:  MOVWF  04
000A:  MOVFF  FD8,05
000E:  MOVFF  FE0,06
0012:  MOVLB  0
0014:  MOVFF  FE9,0C
0018:  MOVFF  FEA,07
001C:  MOVFF  FE1,08
0020:  MOVFF  FE2,09
0024:  MOVFF  FD9,0A
0028:  MOVFF  FDA,0B
002C:  MOVFF  FF3,12
0030:  MOVFF  FF4,13
0034:  MOVFF  FFA,14
0038:  MOVFF  00,0E
003C:  MOVFF  01,0F
0040:  MOVFF  02,10
0044:  MOVFF  03,11
0048:  BTFSS  F9D.0
004A:  GOTO   0054
004E:  BTFSC  F9E.0
0050:  GOTO   00B4
0054:  MOVFF  0E,00
0058:  MOVFF  0F,01
005C:  MOVFF  10,02
0060:  MOVFF  11,03
0064:  MOVFF  0C,FE9
0068:  MOVFF  07,FEA
006C:  BSF    07.7
006E:  MOVFF  08,FE1
0072:  MOVFF  09,FE2
0076:  MOVFF  0A,FD9
007A:  MOVFF  0B,FDA
007E:  MOVFF  12,FF3
0082:  MOVFF  13,FF4
0086:  MOVFF  14,FFA
008A:  MOVF   04,W
008C:  MOVFF  06,FE0
0090:  MOVFF  05,FD8
0094:  RETFIE 0
.................... // Cuatro pulsadores de entrada (Derecha, Izquierda, arriba y abajo). 
.................... // Reloj con XT de 4 MHz. 
.................... // Programación para Cabina de PCR. 
.................... // Tiene Contraseña de incio para permitir funcionamiento de Cabina. 
.................... // Tiene Menú:Luz UV, Luz Blanca, Motor Ventilador y Cambio de Contraseña. 
.................... // Ing. Juan David Piñeros. 
.................... // JP Inglobal. 
....................  
.................... #include <18F4550.h> 
.................... //////// Standard Header file for the PIC18F4550 device //////////////// 
.................... #device PIC18F4550 
.................... #list 
....................  
.................... #device adc=10 
.................... #fuses HSPLL,NOWDT,NOPROTECT,NOLVP,NODEBUG,USBDIV,PLL1,CPUDIV1,NOVREGEN,NOMCLR,NOPUT// PLL1 para 4 MHz 
.................... //#fuses XT,NOWDT,NOPROTECT,NOLVP,NODEBUG,NOVREGEN,NOMCLR// PLL1 para 4 MHz 
.................... #use delay(clock=48000000) 
*
06E2:  CLRF   FEA
06E4:  MOVLW  C6
06E6:  MOVWF  FE9
06E8:  MOVF   FEF,W
06EA:  BZ    0708
06EC:  MOVLW  0F
06EE:  MOVWF  01
06F0:  CLRF   00
06F2:  DECFSZ 00,F
06F4:  BRA    06F2
06F6:  DECFSZ 01,F
06F8:  BRA    06F0
06FA:  MOVLW  8F
06FC:  MOVWF  00
06FE:  DECFSZ 00,F
0700:  BRA    06FE
0702:  NOP   
0704:  DECFSZ FEF,F
0706:  BRA    06EC
0708:  RETLW  00
.................... //#use delay(clock=20000000) 
.................... #include <MATH.h> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2008 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                                                                    //// 
.................... //// History:                                                           //// 
.................... ////  * 9/20/2001 :  Improvments are made to sin/cos code.              //// 
.................... ////                 The code now is small, much faster,                //// 
.................... ////                 and more accurate.                                 //// 
.................... ////  * 2/21/2007 :  Compiler handles & operator differently and does 
.................... ////                 not return generic (int8 *) so type cast is done   //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef MATH_H 
.................... #define MATH_H 
....................  
.................... #ifdef PI 
.................... #undef  PI 
.................... #endif 
.................... #define PI     3.1415926535897932 
....................  
....................  
.................... #define SQRT2  1.4142135623730950 
....................  
.................... //float const ps[4] = {5.9304945, 21.125224, 8.9403076, 0.29730279}; 
.................... //float const qs[4] = {1.0000000, 15.035723, 17.764134, 2.4934718}; 
....................  
.................... ///////////////////////////// Round Functions ////////////////////////////// 
....................  
.................... float32 CEIL_FLOOR(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
*
15E2:  BCF    xC2.0
....................    y = x; 
15E4:  MOVFF  B6,BB
15E8:  MOVFF  B5,BA
15EC:  MOVFF  B4,B9
15F0:  MOVFF  B3,B8
....................  
....................    if (x < 0) 
15F4:  MOVFF  B6,C6
15F8:  MOVFF  B5,C5
15FC:  MOVFF  B4,C4
1600:  MOVFF  B3,C3
1604:  CLRF   xCA
1606:  CLRF   xC9
1608:  CLRF   xC8
160A:  CLRF   xC7
160C:  CALL   08E0
1610:  BNC   161A
....................    { 
....................       s = 1; 
1612:  BSF    xC2.0
....................       y = -y; 
1614:  MOVF   xB9,W
1616:  XORLW  80
1618:  MOVWF  xB9
....................    } 
....................  
....................    if (y <= 32768.0) 
161A:  MOVFF  BB,C6
161E:  MOVFF  BA,C5
1622:  MOVFF  B9,C4
1626:  MOVFF  B8,C3
162A:  CLRF   xCA
162C:  CLRF   xC9
162E:  CLRF   xC8
1630:  MOVLW  8E
1632:  MOVWF  xC7
1634:  CALL   08E0
1638:  BC    163C
163A:  BNZ   166C
....................   res = (float32)(unsigned int16)y; 
163C:  MOVFF  BB,C6
1640:  MOVFF  BA,C5
1644:  MOVFF  B9,C4
1648:  MOVFF  B8,C3
164C:  RCALL  15AA
164E:  MOVFF  02,C8
1652:  MOVFF  01,C7
1656:  CALL   08AA
165A:  MOVFF  03,BF
165E:  MOVFF  02,BE
1662:  MOVFF  01,BD
1666:  MOVFF  00,BC
....................  
....................  else if (y < 10000000.0) 
166A:  BRA    17F6
166C:  MOVFF  BB,C6
1670:  MOVFF  BA,C5
1674:  MOVFF  B9,C4
1678:  MOVFF  B8,C3
167C:  MOVLW  80
167E:  MOVWF  xCA
1680:  MOVLW  96
1682:  MOVWF  xC9
1684:  MOVLW  18
1686:  MOVWF  xC8
1688:  MOVLW  96
168A:  MOVWF  xC7
168C:  CALL   08E0
1690:  BTFSS  FD8.0
1692:  BRA    17E6
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
1694:  MOVFF  BB,C6
1698:  MOVFF  BA,C5
169C:  MOVFF  B9,C4
16A0:  MOVFF  B8,C3
16A4:  CLRF   xCA
16A6:  CLRF   xC9
16A8:  CLRF   xC8
16AA:  MOVLW  8E
16AC:  MOVWF  xC7
16AE:  CALL   0D1E
16B2:  MOVFF  03,C6
16B6:  MOVFF  02,C5
16BA:  MOVFF  01,C4
16BE:  MOVFF  00,C3
16C2:  RCALL  15AA
16C4:  MOVFF  02,C1
16C8:  MOVFF  01,C0
....................       y = 32768.0*(y/32768.0 - (float32)l); 
16CC:  MOVFF  BB,C6
16D0:  MOVFF  BA,C5
16D4:  MOVFF  B9,C4
16D8:  MOVFF  B8,C3
16DC:  CLRF   xCA
16DE:  CLRF   xC9
16E0:  CLRF   xC8
16E2:  MOVLW  8E
16E4:  MOVWF  xC7
16E6:  CALL   0D1E
16EA:  MOVFF  00,C3
16EE:  MOVFF  01,C4
16F2:  MOVFF  02,C5
16F6:  MOVFF  03,C6
16FA:  MOVFF  C1,C8
16FE:  MOVFF  C0,C7
1702:  CALL   08AA
1706:  BSF    FD8.1
1708:  MOVFF  C6,CA
170C:  MOVFF  C5,C9
1710:  MOVFF  C4,C8
1714:  MOVFF  C3,C7
1718:  MOVFF  03,CE
171C:  MOVFF  02,CD
1720:  MOVFF  01,CC
1724:  MOVFF  00,CB
1728:  CALL   0E78
172C:  CLRF   xC6
172E:  CLRF   xC5
1730:  CLRF   xC4
1732:  MOVLW  8E
1734:  MOVWF  xC3
1736:  MOVFF  03,CA
173A:  MOVFF  02,C9
173E:  MOVFF  01,C8
1742:  MOVFF  00,C7
1746:  RCALL  1278
1748:  MOVFF  03,BB
174C:  MOVFF  02,BA
1750:  MOVFF  01,B9
1754:  MOVFF  00,B8
....................   res = 32768.0*(float32)l; 
1758:  MOVFF  C1,C8
175C:  MOVFF  C0,C7
1760:  CALL   08AA
1764:  CLRF   xC6
1766:  CLRF   xC5
1768:  CLRF   xC4
176A:  MOVLW  8E
176C:  MOVWF  xC3
176E:  MOVFF  03,CA
1772:  MOVFF  02,C9
1776:  MOVFF  01,C8
177A:  MOVFF  00,C7
177E:  RCALL  1278
1780:  MOVFF  03,BF
1784:  MOVFF  02,BE
1788:  MOVFF  01,BD
178C:  MOVFF  00,BC
....................   res += (float32)(unsigned int16)y; 
1790:  MOVFF  BB,C6
1794:  MOVFF  BA,C5
1798:  MOVFF  B9,C4
179C:  MOVFF  B8,C3
17A0:  RCALL  15AA
17A2:  MOVFF  02,C8
17A6:  MOVFF  01,C7
17AA:  CALL   08AA
17AE:  BCF    FD8.1
17B0:  MOVFF  BF,CA
17B4:  MOVFF  BE,C9
17B8:  MOVFF  BD,C8
17BC:  MOVFF  BC,C7
17C0:  MOVFF  03,CE
17C4:  MOVFF  02,CD
17C8:  MOVFF  01,CC
17CC:  MOVFF  00,CB
17D0:  CALL   0E78
17D4:  MOVFF  03,BF
17D8:  MOVFF  02,BE
17DC:  MOVFF  01,BD
17E0:  MOVFF  00,BC
....................  } 
....................  
....................  else 
17E4:  BRA    17F6
....................   res = y; 
17E6:  MOVFF  BB,BF
17EA:  MOVFF  BA,BE
17EE:  MOVFF  B9,BD
17F2:  MOVFF  B8,BC
....................  
....................  y = y - (float32)(unsigned int16)y; 
17F6:  MOVFF  BB,C6
17FA:  MOVFF  BA,C5
17FE:  MOVFF  B9,C4
1802:  MOVFF  B8,C3
1806:  RCALL  15AA
1808:  MOVFF  02,C8
180C:  MOVFF  01,C7
1810:  CALL   08AA
1814:  BSF    FD8.1
1816:  MOVFF  BB,CA
181A:  MOVFF  BA,C9
181E:  MOVFF  B9,C8
1822:  MOVFF  B8,C7
1826:  MOVFF  03,CE
182A:  MOVFF  02,CD
182E:  MOVFF  01,CC
1832:  MOVFF  00,CB
1836:  CALL   0E78
183A:  MOVFF  03,BB
183E:  MOVFF  02,BA
1842:  MOVFF  01,B9
1846:  MOVFF  00,B8
....................  
....................  if (s) 
184A:  BTFSS  xC2.0
184C:  BRA    1854
....................   res = -res; 
184E:  MOVF   xBD,W
1850:  XORLW  80
1852:  MOVWF  xBD
....................  
....................  if (y != 0) 
1854:  MOVFF  BB,C6
1858:  MOVFF  BA,C5
185C:  MOVFF  B9,C4
1860:  MOVFF  B8,C3
1864:  CLRF   xCA
1866:  CLRF   xC9
1868:  CLRF   xC8
186A:  CLRF   xC7
186C:  CALL   08E0
1870:  BZ    18E2
....................  { 
....................   if (s == 1 && n == 0) 
1872:  BTFSS  xC2.0
1874:  BRA    18AA
1876:  MOVF   xB7,F
1878:  BNZ   18AA
....................    res -= 1.0; 
187A:  BSF    FD8.1
187C:  MOVFF  BF,CA
1880:  MOVFF  BE,C9
1884:  MOVFF  BD,C8
1888:  MOVFF  BC,C7
188C:  CLRF   xCE
188E:  CLRF   xCD
1890:  CLRF   xCC
1892:  MOVLW  7F
1894:  MOVWF  xCB
1896:  CALL   0E78
189A:  MOVFF  03,BF
189E:  MOVFF  02,BE
18A2:  MOVFF  01,BD
18A6:  MOVFF  00,BC
....................  
....................   if (s == 0 && n == 1) 
18AA:  BTFSC  xC2.0
18AC:  BRA    18E2
18AE:  DECFSZ xB7,W
18B0:  BRA    18E2
....................    res += 1.0; 
18B2:  BCF    FD8.1
18B4:  MOVFF  BF,CA
18B8:  MOVFF  BE,C9
18BC:  MOVFF  BD,C8
18C0:  MOVFF  BC,C7
18C4:  CLRF   xCE
18C6:  CLRF   xCD
18C8:  CLRF   xCC
18CA:  MOVLW  7F
18CC:  MOVWF  xCB
18CE:  CALL   0E78
18D2:  MOVFF  03,BF
18D6:  MOVFF  02,BE
18DA:  MOVFF  01,BD
18DE:  MOVFF  00,BC
....................  } 
....................  if (x == 0) 
18E2:  MOVFF  B6,C6
18E6:  MOVFF  B5,C5
18EA:  MOVFF  B4,C4
18EE:  MOVFF  B3,C3
18F2:  CLRF   xCA
18F4:  CLRF   xC9
18F6:  CLRF   xC8
18F8:  CLRF   xC7
18FA:  CALL   08E0
18FE:  BNZ   1908
....................     res = 0; 
1900:  CLRF   xBF
1902:  CLRF   xBE
1904:  CLRF   xBD
1906:  CLRF   xBC
....................  
....................  return (res); 
1908:  MOVFF  BC,00
190C:  MOVFF  BD,01
1910:  MOVFF  BE,02
1914:  MOVFF  BF,03
.................... } 
1918:  GOTO   1930 (RETURN)
....................  
.................... // Overloaded Functions to take care for new Data types in PCD 
.................... // Overloaded function CEIL_FLOOR() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 CEIL_FLOOR(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float48)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float48)l); 
....................   res = 32768.0*(float32)l; 
....................   res += (float48)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float48)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
....................  
....................  
.................... // Overloaded function CEIL_FLOOR() for data type - Float64 
.................... float64 CEIL_FLOOR(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 l; 
....................    int1 s; 
....................  
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y <= 32768.0) 
....................   res = (float64)(unsigned int16)y; 
....................  
....................  else if (y < 10000000.0) 
....................    { 
....................   l = (unsigned int16)(y/32768.0); 
....................       y = 32768.0*(y/32768.0 - (float64)l); 
....................   res = 32768.0*(float64)l; 
....................   res += (float64)(unsigned int16)y; 
....................  } 
....................  
....................  else 
....................   res = y; 
....................  
....................  y = y - (float64)(unsigned int16)y; 
....................  
....................  if (s) 
....................   res = -res; 
....................  
....................  if (y != 0) 
....................  { 
....................   if (s == 1 && n == 0) 
....................    res -= 1.0; 
....................  
....................   if (s == 0 && n == 1) 
....................    res += 1.0; 
....................  } 
....................  if (x == 0) 
....................     res = 0; 
....................  
....................  return (res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float floor(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds down the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 floor(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
191C:  MOVFF  B2,B6
1920:  MOVFF  B1,B5
1924:  MOVFF  B0,B4
1928:  MOVFF  AF,B3
192C:  CLRF   xB7
192E:  BRA    15E2
.................... } 
1930:  RETLW  00
.................... // Following 2 functions are overloaded functions of floor() for PCD 
.................... // Overloaded function floor() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 floor(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
....................  
.................... // Overloaded function floor() for data type - Float64 
.................... float64 floor(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 0); 
.................... } 
.................... #endif 
....................  
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float ceil(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : rounds up the number x. 
.................... // Date : N/A 
.................... // 
.................... float32 ceil(float32 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... // Following 2 functions are overloaded functions of ceil() for PCD 
.................... // Overloaded function ceil() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ceil(float48 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
....................  
.................... // Overloaded function ceil() for data type - Float64 
.................... float64 ceil(float64 x) 
.................... { 
....................    return CEIL_FLOOR(x, 1); 
.................... } 
.................... #endif 
....................  
....................  //////////////////////////////////////////////////////////////////////////// 
.................... //   float fabs(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the absolute value of floating point number x 
.................... // Returns : returns the absolute value of x 
.................... // Date : N/A 
.................... // 
.................... #define fabs abs 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float fmod(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the floating point remainder of x/y 
.................... // Returns : returns the value of x= i*y, for some integer i such that, if y 
.................... // is non zero, the result has the same isgn of x na dmagnitude less than the 
.................... // magnitude of y. If y is zero then a domain error occurs. 
.................... // Date : N/A 
.................... // 
....................  
.................... float fmod(float32 x,float32 y) 
.................... { 
....................    float32 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... //Overloaded function for fmod() for PCD 
.................... // Overloaded function fmod() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 fmod(float48 x,float48 y) 
.................... { 
....................    float48 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... // Overloaded function fmod() for data type - Float64 
.................... float64 fmod(float64 x,float64 y) 
.................... { 
....................    float64 i; 
....................    if (y!=0.0) 
....................    { 
....................       i=(x/y < 0.0)? ceil(x/y): floor(x/y); 
....................       return(x-(i*y)); 
....................    } 
....................    else 
....................    { 
....................    #ifdef _ERRNO 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    } 
.................... } 
.................... #endif 
.................... //////////////////// Exponential and logarithmic functions //////////////////// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float exp(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (e^x) 
.................... // Date : N/A 
.................... // 
.................... #define LN2 0.6931471805599453 
....................  
.................... float const pe[6] = {0.000207455774, 0.00127100575, 0.00965065093, 
....................                      0.0554965651,  0.240227138,  0.693147172}; 
....................  
....................  
.................... float32 exp(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    #if defined(__PCD__) 
....................    int8 data1; 
....................    #endif 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
.................... #if !defined(__PCD__) 
....................    *((unsigned int8 *)(&res)) = n + 0x7F; 
.................... #endif 
....................  
.................... #if defined(__PCD__)  // Takes care of IEEE format for PCD 
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+2)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+3)) = data1; 
.................... #endif 
....................  
....................    y = y/LN2 - (float32)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
....................  
.................... //Overloaded function for exp() for PCD 
.................... // Overloaded function exp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 exp(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int8 data1; 
....................    signed int8 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 88.722838) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
....................    data1 = n+0x7F; 
....................    if(bit_test(data1,0)) 
....................    bit_set(*(((unsigned int8 *)(&res)+4)),7); 
....................    rotate_right(&data1,1); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&res)+5)) = data1; 
....................  
....................    y = y/LN2 - (float48)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function exp() for data type - Float64 
.................... float64 exp(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    unsigned int16 data1, data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x > 709.7827128) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    n = (signed int16)(x/LN2); 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       n = -n; 
....................       y = -y; 
....................    } 
....................  
....................    res = 0.0; 
....................  
.................... #if !defined(__PCD__) 
....................    *((unsigned int16 *)(&res)) = n + 0x7F; 
.................... #endif 
....................    p= (((unsigned int16 *)(&res))+3); 
....................    data1 = *p; 
....................    data2 = *p;    
....................    data1 = n + 0x3FF; 
....................    data1 = data1 <<4; 
....................    if(bit_test(data2,15)) 
....................    bit_set(data1,15); 
....................    data2 = data2 & 0x000F; 
....................    data1 ^= data2; 
....................  
....................    *(((unsigned int16 *)(&res)+3)) = data1; 
....................  
....................  
....................    y = y/LN2 - (float64)n; 
....................  
....................    r = pe[0]*y + pe[1]; 
....................    r = r*y + pe[2]; 
....................    r = r*y + pe[3]; 
....................    r = r*y + pe[4]; 
....................    r = r*y + pe[5]; 
....................  
....................    res = res*(1.0 + y*r); 
....................  
....................    if (s) 
....................       res = 1.0/res; 
....................    return(res); 
.................... } 
....................  
.................... #ENDIF 
....................  
....................  
.................... /************************************************************/ 
....................  
.................... float32 const pl[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the natural log of x 
.................... // Date : N/A 
.................... // 
.................... float32 log(float32 x) 
.................... { 
....................    float32 y, res, r, y2; 
....................    #if defined(__PCD__) 
....................    unsigned int8  data1,data2; 
....................    #endif 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
.................... #if !defined(__PCD__) 
....................     *((unsigned int8 *)(&y)) = 0x7E;  
.................... #endif 
....................  
.................... #if defined(__PCD__) // Takes care of IEEE format 
....................    data2 = *(((unsigned int8 *)(&y))+3); 
....................    *(((unsigned int8 *)(&y))+3) = 0x3F; 
....................    data1 = *(((unsigned int8 *)(&y))+2); 
....................    bit_clear(data1,7); 
....................    *(((unsigned int8 *)(&y))+2) = data1; 
....................    if(bit_test(data2,7)) 
....................    bit_set(*(((unsigned int8 *)(&y))+3),7); 
.................... #endif 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
.................... #if !defined(__PCD__) 
....................       n = *((unsigned int8 *)(&x)) - 0x7E; 
.................... #endif 
.................... #if defined(__PCD__)  
....................     data1 = *(((unsigned int8 *)(&x)+3)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+2)); 
....................     if(bit_test (data2,7)) 
....................       bit_set(data1,0); 
....................     n = data1 - 0x7E; 
.................... #endif 
....................  
....................       if (n<0)  
....................          r = -(float32)-n; 
....................       else 
....................          r = (float32)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded function for log() for PCD 
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log(float48 x) 
.................... { 
....................    float48 y, res, r, y2; 
....................    unsigned int8  data1,data2; 
....................    signed int8 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................     
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       data2 = *(((unsigned int8 *)(&y))+5); 
....................       *(((unsigned int8 *)(&y))+5) = 0x3F; 
....................       data1 = *(((unsigned int8 *)(&y))+4); 
....................       bit_clear(data1,7); 
....................       *(((unsigned int8 *)(&y))+4) = data1; 
....................    
....................       if(bit_test(data2,7)) 
....................          bit_set(*(((unsigned int8 *)(&y))+4),7); 
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl[0]*y2 + pl[1]; 
....................       res = res*y2 + pl[2]; 
....................       res = res*y2 + pl[3]; 
....................  
....................       r = ql[0]*y2 + ql[1]; 
....................       r = r*y2 + ql[2]; 
....................       r = r*y2 + ql[3]; 
....................  
....................       res = y*res/r; 
....................  
....................     data1 = *(((unsigned int8 *)(&x)+5)); 
....................     rotate_left(&data1,1); 
....................     data2 = *(((unsigned int8 *)(&x)+4)); 
....................     if(bit_test (data2,7)) 
....................        bit_set(data1,0); 
....................       
....................     n = data1 - 0x7E; 
....................  
....................       if (n<0) 
....................          r = -(float48)-n; 
....................       else 
....................          r = (float48)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function log() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float32 const pl_64[4] = {0.45145214, -9.0558803, 26.940971, -19.860189}; 
.................... float32 const ql_64[4] = {1.0000000,  -8.1354259, 16.780517, -9.9300943}; 
.................... #endif 
.................... float64 log(float64 x) 
.................... { 
....................    float64 y, res, r, y2; 
....................    unsigned int16  data1,data2; 
....................    unsigned int16 *p; 
....................    signed int16 n; 
....................    #ifdef _ERRNO 
....................    if(x <0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    if(x ==0) 
....................    { 
....................       errno=ERANGE; 
....................       return(0); 
....................    } 
....................    #endif 
....................    y = x; 
....................  
....................    if (y != 1.0) 
....................    { 
....................    #if !defined(__PCD__) 
....................        *((unsigned int8 *)(&y)) = 0x7E;  
....................    #endif 
....................       p= (((unsigned int16 *)(&y))+3); 
....................       data1 = *p; 
....................       data2 = *p; 
....................       data1 = 0x3FE; 
....................       data1 = data1 <<4; 
....................       if(bit_test (data2,15)) 
....................       bit_set(data1,15); 
....................       data2 = data2 & 0x000F; 
....................       data1 ^=data2; 
....................  
....................       *p = data1; 
....................  
....................       y = (y - 1.0)/(y + 1.0); 
....................  
....................       y2=y*y; 
....................  
....................       res = pl_64[0]*y2 + pl_64[1]; 
....................       res = res*y2 + pl_64[2]; 
....................       res = res*y2 + pl_64[3]; 
....................  
....................       r = ql_64[0]*y2 + ql_64[1]; 
....................       r = r*y2 + ql_64[2]; 
....................       r = r*y2 + ql_64[3]; 
....................  
....................       res = y*res/r; 
....................   
....................       p= (((unsigned int16 *)(&x))+3); 
....................       data1 = *p; 
....................       bit_clear(data1,15); 
....................       data1 = data1 >>4;     
....................       n = data1 - 0x3FE; 
....................  
....................  
....................       if (n<0) 
....................          r = -(float64)-n; 
....................       else 
....................          r = (float64)n; 
....................  
....................       res += r*LN2; 
....................    } 
....................  
....................    else 
....................       res = 0.0; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
....................  
.................... #define LN10 2.3025850929940456 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float log10(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the the log base 10 of x 
.................... // Date : N/A 
.................... // 
.................... float32 log10(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... //Overloaded functions for log10() for PCD 
.................... // Overloaded function log10() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 log10(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function log10() for data type - Float64 
.................... float64 log10(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = log(x); 
....................    r = r/LN10; 
....................    return(r); 
.................... } 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float modf(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description :breaks the argument value int integral and fractional parts, 
.................... // ach of which have the same sign as the argument.  It stores the integral part 
.................... // as a float in the object pointed to by the iptr 
.................... // Returns : returns the signed fractional part of value. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 modf(float32 value,float32 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... //Overloaded functions for modf() for PCD 
.................... // Overloaded function modf() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 modf(float48 value,float48 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... // Overloaded function modf() for data type - Float64 
.................... float64 modf(float64 value,float64 *iptr) 
.................... { 
....................    *iptr=(value < 0.0)? ceil(value): floor(value); 
....................    return(value - *iptr); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pwr(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pwr(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pwr() for PCD 
.................... // Overloaded function pwr() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pwr(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... // Overloaded function pwr() for data type - Float64 
.................... float64 pwr(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Power functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float pow(float x,float y) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the value (x^y) 
.................... // Date : N/A 
.................... // Note : 0 is returned when the function will generate an imaginary number 
.................... // 
.................... float32 pow(float32 x,float32 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... //Overloaded functions for pow() for PCD 
.................... // Overloaded function for pow() data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 pow(float48 x,float48 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function pow() for data type - Float64 
.................... float64 pow(float64 x,float64 y) 
.................... { 
....................    if(0 > x && fmod(y, 1) == 0) { 
....................       if(fmod(y, 2) == 0) { 
....................          return (exp(log(-x) * y)); 
....................       } else { 
....................          return (-exp(log(-x) * y)); 
....................       } 
....................    } else if(0 > x && fmod(y, 1) != 0) { 
....................       return 0; 
....................    } else { 
....................       if(x != 0 || 0 >= y) { 
....................          return (exp(log(x) * y)); 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sqrt(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the square root of x 
.................... // Date : N/A 
.................... // 
.................... float32 sqrt(float32 x) 
.................... { 
....................    float32 y, res; 
....................    #if defined(__PCD__) 
....................    unsigned int16 data1,data2; 
....................    #endif 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+3); 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1);     
....................     if(bit_test(data2,7))     
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     data1 = *(((unsigned int8 *)(&y))+3); 
....................     data2 = *(((unsigned int8 *)(&y))+2); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+3) = data1; 
....................     *(((unsigned int8 *)(&y))+2) = data2; 
....................      
....................   #endif 
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for sqrt() for PCD 
.................... // Overloaded function sqrt() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sqrt(float48 x) 
.................... { 
....................    float48 y, res; 
....................    unsigned int16 data1,data2; 
....................    BYTE *p; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................     
....................    #if !defined(__PCD__) 
....................     p=&y; 
....................    (*p)=(BYTE)((((unsigned int16)(*p)) + 127) >> 1); 
....................    #endif 
....................     
....................    #if defined(__PCD__) 
....................     p = (((unsigned int8 *)(&y))+5); 
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1 = ((data1+127) >>1); 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................   #endif 
....................  
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................  
....................       #if !defined(__PCD__) 
....................      (*p)--; 
....................    #endif 
....................     
....................     data1 = *(((unsigned int8 *)(&y))+5); 
....................     data2 = *(((unsigned int8 *)(&y))+4); 
....................     rotate_left(&data1,1); 
....................     if(bit_test(data2,7)) 
....................     bit_set(data1,0);     
....................     data1--; 
....................     bit_clear(data2,7); 
....................     if(bit_test(data1,0)) 
....................     bit_set(data2,7); 
....................     data1 = data1 >>1; 
....................     *(((unsigned int8 *)(&y))+5) = data1; 
....................     *(((unsigned int8 *)(&y))+4) = data2; 
....................      
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function sqrt() for data type - Float64 
.................... float64 sqrt(float64 x) 
.................... { 
....................    float64 y, res; 
....................    unsigned int16 *p; 
....................    unsigned int16 temp1,temp2; 
....................  
....................    #ifdef _ERRNO 
....................    if(x < 0) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................  
....................    if( x<=0.0) 
....................       return(0.0); 
....................  
....................    y=x; 
....................    p= (((unsigned int16 *)(&y))+3); 
....................    temp1 = *p; 
....................    temp2 = *p; 
....................    bit_clear(temp1,15); 
....................    temp1 = (temp1>>4)+1023; 
....................    temp1 = temp1 >> 1; 
....................    temp1 = (temp1<<4) & 0xFFF0; 
....................    if(bit_test(temp2,15)) 
....................    bit_set(temp1,15); 
....................    temp2 = temp2 & 0x000F; 
....................    temp1 ^= temp2; 
....................     
....................    (*p) = temp1; 
....................     
....................    do { 
....................       res=y; 
....................       y+=(x/y); 
....................      temp1 = *p; 
....................      temp2 = *p; 
....................      bit_clear(temp1,15); 
....................      temp1 = (temp1>>4); 
....................      temp1--; 
....................      temp1 = (temp1<<4) & 0xFFF0; 
....................      if(bit_test(temp2,15)) 
....................      bit_set(temp1,15); 
....................      temp2 = temp2 & 0x000F; 
....................      temp1 ^= temp2; 
....................      (*p) = temp1; 
....................  
....................    } while(res != y); 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////// Trig Functions ////////////////////////////// 
.................... #ifdef PI_DIV_BY_TWO 
.................... #undef PI_DIV_BY_TWO 
.................... #endif 
.................... #define PI_DIV_BY_TWO   1.5707963267948966 
.................... #ifdef TWOBYPI 
.................... #undef TWOBYPI 
.................... #define TWOBYPI          0.6366197723675813 
.................... #endif 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the cosine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 cos(float32 x) 
.................... { 
....................    float32 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float32 frac; 
....................    float32 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 1.0; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
....................  
.................... //Overloaded functions for cos() for PCD 
.................... // Overloaded function cos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cos(float48 x) 
.................... { 
....................    float48 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float48 frac; 
....................    float48 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... // Overloaded function cos() for data type - Float48 
.................... float64 cos(float64 x) 
.................... { 
....................    float64 y, t, t2 = 1.0; 
....................    unsigned int8 quad, i; 
....................    float64 frac; 
....................    float64 p[6] = {                    //by the series definition for cosine 
....................       -0.5,                            // sum ( ( (-1)^n * x^2n )/(2n)! ) 
....................        0.04166666666667, 
....................       -0.00138888888889, 
....................        0.00002480158730, 
....................       -0.00000027557319, 
....................        0.00000000208767, 
....................       //-0.00000000001147, 
....................       // 0.00000000000005 
....................    }; 
....................  
....................    if (x < 0) x = -x;                  // absolute value of input 
....................  
....................    quad = (unsigned int8)(x / PI_DIV_BY_TWO);    // quadrant 
....................    frac = (x / PI_DIV_BY_TWO) - quad;  // fractional part of input 
....................    quad = quad % 4;                    // quadrant (0 to 3) 
....................  
....................    if (quad == 0 || quad == 2) 
....................       t = frac * PI_DIV_BY_TWO; 
....................    else if (quad == 1) 
....................       t = (1-frac) * PI_DIV_BY_TWO; 
....................    else // should be 3 
....................       t = (frac-1) * PI_DIV_BY_TWO; 
....................  
....................    y = 0.999999999781; 
....................    t = t * t; 
....................    for (i = 0; i <= 5; i++) 
....................    { 
....................       t2 = t2 * t; 
....................       y = y + p[i] * t2; 
....................    } 
....................  
....................    if (quad == 2 || quad == 1) 
....................       y = -y;  // correct sign 
....................  
....................    return (y); 
.................... } 
....................  
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the sine value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 sin(float32 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... //Overloaded functions for sin() for PCD 
.................... // Overloaded function sin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sin(float48 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
....................  
.................... // Overloaded function sin() for data type - Float48 
.................... float64 sin(float64 x) 
.................... { 
....................    return cos(x - PI_DIV_BY_TWO); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the tangent value of the angle x, which is in radian 
.................... // Date : 9/20/2001 
.................... // 
.................... float32 tan(float32 x) 
.................... { 
....................    float32 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... //Overloaded functions for tan() for PCD 
.................... // Overloaded function tan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tan(float48 x) 
.................... { 
....................    float48 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
....................  
.................... // Overloaded function tan() for data type - Float48 
.................... float64 tan(float64 x) 
.................... { 
....................    float64 c, s; 
....................  
....................    c = cos(x); 
....................    if (c == 0.0) 
....................       return (1.0e+36); 
....................  
....................    s = sin(x); 
....................    return(s/c); 
.................... } 
.................... #endif 
....................  
.................... float32 const pas[3] = {0.49559947, -4.6145309, 5.6036290}; 
.................... float32 const qas[3] = {1.0000000,  -5.5484666, 5.6036290}; 
....................  
.................... float32 ASIN_COS(float32 x, unsigned int8 n) 
.................... { 
....................    float32 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... //Overloaded functions for ASIN_COS() for PCD 
.................... // Overloaded function ASIN_COS() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 ASIN_COS(float48 x, unsigned int8 n) 
.................... { 
....................    float48 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function ASIN_COS() for data type - Float64 
.................... float64 ASIN_COS(float64 x, unsigned int8 n) 
.................... { 
....................    float64 y, res, r, y2; 
....................    int1 s; 
....................    #ifdef _ERRNO 
....................    if(x <-1 || x > 1) 
....................    { 
....................       errno=EDOM; 
....................    } 
....................    #endif 
....................    s = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 0.5) 
....................    { 
....................       y = sqrt((1.0 - y)/2.0); 
....................       n += 2; 
....................    } 
....................  
....................    y2=y*y; 
....................  
....................    res = pas[0]*y2 + pas[1]; 
....................    res = res*y2 + pas[2]; 
....................  
....................    r = qas[0]*y2 + qas[1]; 
....................    r = r*y2 + qas[2]; 
....................  
....................    res = y*res/r; 
....................  
....................    if (n & 2)     // |x| > 0.5 
....................       res = PI_DIV_BY_TWO - 2.0*res; 
....................    if (s) 
....................       res = -res; 
....................    if (n & 1)           // take arccos 
....................       res = PI_DIV_BY_TWO - res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float asin(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arcsine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 asin(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for asin() for PCD 
.................... // Overloaded function asin() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 asin(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function asin() for data type - Float64 
.................... float64 asin(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 0); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float acos(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arccosine value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 acos(float32 x) 
.................... { 
....................    float32 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... //Overloaded functions for acos() for PCD 
.................... // Overloaded function acos() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 acos(float48 x) 
.................... { 
....................    float48 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
....................  
.................... // Overloaded function acos() for data type - Float64 
.................... float64 acos(float64 x) 
.................... { 
....................    float64 r; 
....................  
....................    r = ASIN_COS(x, 1); 
....................    return(r); 
.................... } 
.................... #endif 
....................  
.................... float32 const pat[4] = {0.17630401, 5.6710795, 22.376096, 19.818457}; 
.................... float32 const qat[4] = {1.0000000,  11.368190, 28.982246, 19.818457}; 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float atan(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : returns the arctangent value of the value x. 
.................... // Date : N/A 
.................... // 
.................... float32 atan(float32 x) 
.................... { 
....................    float32 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... //Overloaded functions for atan() for PCD 
.................... // Overloaded function atan() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan(float48 x) 
.................... { 
....................    float48 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
....................  
.................... // Overloaded function atan() for data type - Float64 
.................... float64 atan(float64 x) 
.................... { 
....................    float64 y, res, r; 
....................    int1 s, flag; 
....................  
....................    s = 0; 
....................    flag = 0; 
....................    y = x; 
....................  
....................    if (x < 0) 
....................    { 
....................       s = 1; 
....................       y = -y; 
....................    } 
....................  
....................    if (y > 1.0) 
....................    { 
....................       y = 1.0/y; 
....................       flag = 1; 
....................    } 
....................  
....................    res = pat[0]*y*y + pat[1]; 
....................    res = res*y*y + pat[2]; 
....................    res = res*y*y + pat[3]; 
....................  
....................    r = qat[0]*y*y + qat[1]; 
....................    r = r*y*y + qat[2]; 
....................    r = r*y*y + qat[3]; 
....................  
....................    res = y*res/r; 
....................  
....................  
....................    if (flag)                              // for |x| > 1 
....................       res = PI_DIV_BY_TWO - res; 
....................    if (s) 
....................       res = -res; 
....................  
....................    return(res); 
.................... } 
.................... #endif 
....................  
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... //   float atan2(float y, float x) 
.................... ///////////////////////////////////////////////////////////////////////////// 
.................... // Description :computes the principal value of arc tangent of y/x, using the 
.................... // signs of both the arguments to determine the quadrant of the return value 
.................... // Returns : returns the arc tangent of y/x. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 atan2(float32 y,float32 x) 
.................... { 
....................    float32 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... //Overloaded functions for atan2() for PCD 
.................... // Overloaded function atan2() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 atan2(float48 y,float48 x) 
.................... { 
....................    float48 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
....................  
.................... // Overloaded function atan2() for data type - Float64 
.................... float64 atan2(float64 y,float64 x) 
.................... { 
....................    float64 z; 
....................    int1 sign; 
....................    unsigned int8 quad; 
....................    sign=0; 
....................    quad=0; //quadrant 
....................    quad=((y<=0.0)?((x<=0.0)?3:4):((x<0.0)?2:1)); 
....................    if(y<0.0) 
....................    { 
....................       sign=1; 
....................       y=-y; 
....................    } 
....................    if(x<0.0) 
....................    { 
....................       x=-x; 
....................    } 
....................    if (x==0.0) 
....................    { 
....................       if(y==0.0) 
....................       { 
....................       #ifdef _ERRNO 
....................       { 
....................          errno=EDOM; 
....................       } 
....................       #endif 
....................       } 
....................       else 
....................       { 
....................          if(sign) 
....................          { 
....................          return (-(PI_DIV_BY_TWO)); 
....................          } 
....................          else 
....................          { 
....................          return (PI_DIV_BY_TWO); 
....................          } 
....................       } 
....................    } 
....................    else 
....................    { 
....................       z=y/x; 
....................       switch(quad) 
....................       { 
....................          case 1: 
....................          { 
....................             return atan(z); 
....................             break; 
....................          } 
....................          case 2: 
....................          { 
.................... //            return (atan(z)+PI_DIV_BY_TWO);  //2L3122 
....................             return (PI-atan(z)); 
....................             break; 
....................          } 
....................          case 3: 
....................          { 
....................             return (atan(z)-PI); 
....................             break; 
....................          } 
....................          case 4: 
....................          { 
....................             return (-atan(z)); 
....................             break; 
....................          } 
....................       } 
....................    } 
.................... } 
.................... #endif 
....................  
.................... //////////////////// Hyperbolic functions //////////////////// 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float cosh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic cosine value of x 
.................... // Returns : returns the hyperbolic cosine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 cosh(float32 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... //Overloaded functions for cosh() for PCD 
.................... // Overloaded function cosh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 cosh(float48 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function cosh() for data type - Float64 
.................... float64 cosh(float64 x) 
.................... { 
....................    return ((exp(x)+exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float sinh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic sine value of x 
.................... // Returns : returns the hyperbolic sine value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 sinh(float32 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... //Overloaded functions for sinh() for PCD 
.................... // Overloaded function sinh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 sinh(float48 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
....................  
.................... // Overloaded function sinh() for data type - Float48 
.................... float64 sinh(float64 x) 
.................... { 
....................  
....................    return ((exp(x) - exp(-x))/2); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float tanh(float x) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : Computes the hyperbolic tangent value of x 
.................... // Returns : returns the hyperbolic tangent value of x 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 tanh(float32 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... //Overloaded functions for tanh() for PCD 
.................... // Overloaded function tanh() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 tanh(float48 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
....................  
.................... // Overloaded function tanh() for data type - Float64 
.................... float64 tanh(float64 x) 
.................... { 
....................    return(sinh(x)/cosh(x)); 
.................... } 
.................... #endif 
....................  
.................... //////////////////////////////////////////////////////////////////////////// 
.................... //   float frexp(float x, signed int *exp) 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... // Description : breaks a floating point number into a normalized fraction and an integral 
.................... // power of 2. It stores the integer in the signed int object pointed to by exp. 
.................... // Returns : returns the value x, such that x is a double with magnitude in the interval 
.................... // [1/2,1) or zero, and value equals x times 2 raised to the power *exp.If value is zero, 
.................... // both parts of the result are zero. 
.................... // Date : N/A 
.................... // 
....................  
.................... #define LOG2 .30102999566398119521 
.................... float32 frexp(float32 x, signed int8 *exp) 
.................... { 
....................    float32 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... //Overloaded functions for frexp() for PCD 
.................... // Overloaded function frexp() for data type - Float48 
.................... #if defined(__PCD__) 
.................... float48 frexp(float48 x, signed int8 *exp) 
.................... { 
....................    float48 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
....................  
.................... // Overloaded function frexp() for data type - Float64 
.................... float64 frexp(float64 x, signed int8 *exp) 
.................... { 
....................    float64 res; 
....................    int1 sign = 0; 
....................    if(x == 0.0) 
....................    { 
....................       *exp=0; 
....................       return (0.0); 
....................    } 
....................    if(x < 0.0) 
....................    { 
....................      x=-x; 
....................      sign=1; 
....................    } 
....................    if (x > 1.0) 
....................    { 
....................       *exp=(ceil(log10(x)/LOG2)); 
....................       res=x/(pow(2, *exp)); 
....................       if (res == 1) 
....................       { 
....................          *exp=*exp+1; 
....................           res=.5; 
....................       } 
....................    } 
....................    else 
....................    { 
....................       if(x < 0.5) 
....................       { 
....................          *exp=-1; 
....................          res=x*2; 
....................       } 
....................       else 
....................       { 
....................          *exp=0; 
....................           res=x; 
....................       } 
....................    } 
....................    if(sign) 
....................    { 
....................       res=-res; 
....................    } 
....................    return res; 
.................... } 
.................... #endif 
....................  
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... //   float ldexp(float x, signed int *exp) 
.................... ////////////////////////////////////////////////////////////////////////////// 
.................... // Description : multiplies a floating point number by an integral power of 2. 
.................... // Returns : returns the value of x times 2 raised to the power exp. 
.................... // Date : N/A 
.................... // 
....................  
.................... float32 ldexp(float32 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... //Overloaded functions for ldexp() for PCD 
.................... // Overloaded function ldexp() for data type - Float48 
....................  
.................... #if defined(__PCD__) 
.................... float48 ldexp(float48 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... // Overloaded function ldexp() for data type - Float64 
.................... float64 ldexp(float64 value, signed int8 exp) 
.................... { 
....................    return (value * pow(2,exp)); 
.................... } 
.................... #endif 
....................  
.................... #endif 
....................  
....................  
.................... // Definición de teclado - NO 
.................... #define   UP            !input(PIN_A5) 
.................... #define   DOWN          !input(PIN_E0) 
.................... #define   RIGHT         !input(PIN_E1) 
.................... #define   IZQU          !input(PIN_E2) 
.................... #define   VIDRIO        !input(PIN_A2) 
....................  
.................... // Definición de otros puertos 
.................... #define   Luz_UV_on         output_bit(PIN_D1,0) 
.................... #define   Luz_UV_off        output_bit(PIN_D1,1) 
.................... #define   Luz_Blanca_on     output_bit(PIN_D2,0) 
.................... #define   Luz_Blanca_off    output_bit(PIN_D2,1) 
.................... #define   Motor_L1_on       output_bit(PIN_C6,0) 
.................... #define   Motor_L1_off      output_bit(PIN_C6,1) 
.................... #define   Buzzer_on         output_bit(PIN_D0,1) 
.................... #define   Buzzer_off        output_bit(PIN_D0,0) 
.................... #define   ON  1 
.................... #define   OFF 0 
....................  
.................... //------Variables---------------------// 
.................... short estadouv=0,estadofl=0,estadomv=0,Flanco=0,Flanco1=0,Flanco2=0,Flanco3=0,tiempo_cumplido=0,Lectura=0,flaguv=0,flagfl=0,estadobuzzer=0,estadoalarma=0; 
.................... int8 Menu=0, n_opcionH=6,n_opcionL=2,unidad=11,Flecha=2,Flecha1=3,Flecha2=2, nMenuL=2, nMenuH=4,segundos=0,minutos=0,horasL=0,horasH=0,G_l=0,G_h=0; 
.................... int8 tempo_minutos=0,tempo_segundos=0,tempo_minutos_pro=0,tempo_segundos_pro=0,r=0,q=0,i=0,unidad2=1,tiemporeset=0,guardaruv=0; 
.................... signed int8   paso=0; 
.................... char t[3]={'>',' ','^'};  
.................... signed  int8 clave[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... signed  int8 contrasena[4]={0,0,0,0};   // 0=Verdadero, 1=Falso 
.................... int8 ActivaBuzzer=0; 
.................... int16 tiempos,horas=0,G16=0,tiempobloqueo=0; 
.................... float PromPresion[20]={0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}; 
.................... float V1=0.0,Presion=0.0,Saturacion=0.0,CaidaPresion=0.0; 
.................... float G=2; 
.................... short Cambio=ON,flagmv=0,Ruido=OFF,Bloqueo=OFF; 
.................... char dato[3]; 
.................... //---------------------------------------// 
....................  
.................... #include <LCD420.c> 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD420.C                               //// 
.................... ////            Driver for common 4x20 LCD modules                      //// 
.................... ////                                                                    //// 
.................... ////  lcd_init()   Must be called before any other function.            //// 
.................... ////                                                                    //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.      //// 
.................... ////                     The following have special meaning:            //// 
.................... ////                      \f  Clear display                             //// 
.................... ////                      \n  Go to start of second line                //// 
.................... ////                      \b  Move back one position                    //// 
.................... ////                                                                    //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)     //// 
.................... ////                                                                    //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD          //// 
.................... ////                                                                    //// 
.................... //////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,1997 Custom Computer Services            //// 
.................... //// This source code may only be used by licensed users of the CCS C   //// 
.................... //// compiler.  This source code may only be distributed to other       //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction  //// 
.................... //// or distribution is permitted without written permission.           //// 
.................... //// Derivative programs created using this software in object code     //// 
.................... //// form are not restricted in any way.                                //// 
.................... //////////////////////////////////////////////////////////////////////////// 
....................  
.................... // As defined in the following structure the pin connection is as follows: 
.................... //     B0  enable 
.................... //     B1  rs 
.................... //     B2  rw 
.................... //     B4  D4 
.................... //     B5  D5 
.................... //     B6  D6 
.................... //     B7  D7 
.................... // 
.................... //   LCD pins D0-D3 are not used and PIC B3 is not used. 
....................  
.................... struct lcd_pin_map {                 // This structure is overlayed 
....................            BOOLEAN unused;           // on to an I/O port to gain 
....................            BOOLEAN rs;               // access to the LCD pins. 
....................            BOOLEAN rw;               // The bits are allocated from 
....................            BOOLEAN enable;           // low order up.  ENABLE will 
....................            int     data : 4;         // be pin B0. 
....................         } lcd; 
....................  
.................... #locate lcd = getenv("SFR:PORTB")                        // This puts the entire structure 
....................                                      // on to port B  
....................  
.................... #define lcd_type 2           // 0=5x7, 1=5x10, 2=2 lines 
....................  
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (lcd_type << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
....................  
....................                              // The following are used for setting 
....................                              // the I/O port direction register. 
....................  
.................... struct lcd_pin_map const LCD_WRITE = {0,0,0,0,0}; // For write mode all pins are out 
.................... struct lcd_pin_map const LCD_READ = {0,0,0,0,15}; // For read mode data pins are in 
....................  
....................  
.................... BYTE lcdline; 
....................  
.................... BYTE lcd_read_byte() { 
....................       BYTE low,high; 
....................  
....................       set_tris_b(LCD_READ); 
....................       lcd.rw = 1; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_cycles(30);//30 
....................       high = lcd.data; 
....................       lcd.enable = 0; 
....................       delay_cycles(30);//30 
....................       lcd.enable = 1; 
....................       delay_us(30);//30 
....................       low = lcd.data; 
....................       lcd.enable = 0; 
....................       set_tris_b(LCD_WRITE); 
....................       return( (high<<4) | low); 
.................... } 
....................  
....................  
.................... void lcd_send_nibble( BYTE n ) { 
....................       lcd.data = n; 
*
070A:  SWAPF  xC7,W
070C:  ANDLW  F0
070E:  MOVWF  00
0710:  MOVLW  0F
0712:  ANDWF  F81,W
0714:  IORWF  00,W
0716:  MOVWF  F81
....................       delay_cycles(30);//30 
0718:  MOVLW  09
071A:  MOVWF  00
071C:  DECFSZ 00,F
071E:  BRA    071C
0720:  BRA    0722
....................       lcd.enable = 1; 
0722:  BSF    F81.3
....................       delay_us(55);//55 
0724:  MOVLW  DB
0726:  MOVWF  00
0728:  DECFSZ 00,F
072A:  BRA    0728
072C:  BRA    072E
....................       lcd.enable = 0; 
072E:  BCF    F81.3
.................... } 
0730:  RETLW  00
....................  
....................  
.................... void lcd_send_byte( BYTE address, BYTE n ) { 
....................  
....................       lcd.rs = 0; 
0732:  BCF    F81.1
....................       //while ( bit_test(lcd_read_byte(),7)); 
....................       delay_ms(1); 
0734:  MOVLW  01
0736:  MOVWF  xC6
0738:  RCALL  06E2
....................       lcd.rs = address; 
073A:  BTFSS  xC4.0
073C:  BCF    F81.1
073E:  BTFSC  xC4.0
0740:  BSF    F81.1
....................       delay_cycles(30);//30 
0742:  MOVLW  09
0744:  MOVWF  00
0746:  DECFSZ 00,F
0748:  BRA    0746
074A:  BRA    074C
....................       lcd.rw = 0; 
074C:  BCF    F81.2
....................       delay_cycles(30);//30 
074E:  MOVLW  09
0750:  MOVWF  00
0752:  DECFSZ 00,F
0754:  BRA    0752
0756:  BRA    0758
....................       lcd.enable = 0; 
0758:  BCF    F81.3
....................       lcd_send_nibble(n >> 4); 
075A:  SWAPF  xC5,W
075C:  MOVWF  xC6
075E:  MOVLW  0F
0760:  ANDWF  xC6,F
0762:  MOVFF  C6,C7
0766:  RCALL  070A
....................       lcd_send_nibble(n & 0xf); 
0768:  MOVF   xC5,W
076A:  ANDLW  0F
076C:  MOVWF  xC6
076E:  MOVWF  xC7
0770:  RCALL  070A
.................... } 
0772:  RETLW  00
....................  
....................  
.................... void lcd_init() { 
....................     BYTE i; 
....................  
....................     set_tris_b(LCD_WRITE); 
0774:  MOVLW  00
0776:  MOVWF  F93
....................     lcd.rs = 0; 
0778:  BCF    F81.1
....................     lcd.rw = 0; 
077A:  BCF    F81.2
....................     lcd.enable = 0; 
077C:  BCF    F81.3
....................     delay_ms(15); 
077E:  MOVLW  0F
0780:  MOVWF  xC6
0782:  RCALL  06E2
....................     for(i=1;i<=3;++i) { 
0784:  MOVLW  01
0786:  MOVWF  xAF
0788:  MOVF   xAF,W
078A:  SUBLW  03
078C:  BNC   079E
....................        lcd_send_nibble(3); 
078E:  MOVLW  03
0790:  MOVWF  xC7
0792:  RCALL  070A
....................        delay_ms(5); 
0794:  MOVLW  05
0796:  MOVWF  xC6
0798:  RCALL  06E2
....................     } 
079A:  INCF   xAF,F
079C:  BRA    0788
....................     lcd_send_nibble(2); 
079E:  MOVLW  02
07A0:  MOVWF  xC7
07A2:  RCALL  070A
....................     for(i=0;i<=3;++i) 
07A4:  CLRF   xAF
07A6:  MOVF   xAF,W
07A8:  SUBLW  03
07AA:  BNC   07C8
....................        lcd_send_byte(0, LCD_INIT_STRING[i]); 
07AC:  CLRF   03
07AE:  MOVF   xAF,W
07B0:  MOVFF  FF2,B0
07B4:  BCF    FF2.7
07B6:  RCALL  0096
07B8:  BTFSC  xB0.7
07BA:  BSF    FF2.7
07BC:  MOVWF  xB0
07BE:  CLRF   xC4
07C0:  MOVWF  xC5
07C2:  RCALL  0732
07C4:  INCF   xAF,F
07C6:  BRA    07A6
.................... } 
07C8:  RETLW  00
....................  
....................  
.................... void lcd_gotoxy( BYTE x, BYTE y) { 
....................    BYTE address; 
....................  
....................    switch(y) { 
07CA:  MOVLW  01
07CC:  SUBWF  xC2,W
07CE:  ADDLW  FC
07D0:  BC    07F0
07D2:  ADDLW  04
07D4:  GOTO   0800
....................      case 1 : address=0x80;break; 
07D8:  MOVLW  80
07DA:  MOVWF  xC3
07DC:  BRA    07F0
....................      case 2 : address=0xc0;break; 
07DE:  MOVLW  C0
07E0:  MOVWF  xC3
07E2:  BRA    07F0
....................      case 3 : address=0x94;break; 
07E4:  MOVLW  94
07E6:  MOVWF  xC3
07E8:  BRA    07F0
....................      case 4 : address=0xd4;break; 
07EA:  MOVLW  D4
07EC:  MOVWF  xC3
07EE:  BRA    07F0
....................    } 
....................    address+=x-1; 
07F0:  MOVLW  01
07F2:  SUBWF  xC1,W
07F4:  ADDWF  xC3,F
....................    lcd_send_byte(0,address); 
07F6:  CLRF   xC4
07F8:  MOVFF  C3,C5
07FC:  RCALL  0732
.................... } 
07FE:  RETLW  00
....................  
.................... void lcd_putc( char c) { 
....................    if(c=='ñ') 
*
082C:  MOVF   xC0,W
082E:  SUBLW  F1
0830:  BNZ   0836
....................    { 
....................       c=238; 
0832:  MOVLW  EE
0834:  MOVWF  xC0
....................    } 
....................    if(c=='Ñ') 
0836:  MOVF   xC0,W
0838:  SUBLW  D1
083A:  BNZ   0840
....................    { 
....................       c=255; 
083C:  MOVLW  FF
083E:  MOVWF  xC0
....................    } 
....................     
....................    switch (c) { 
0840:  MOVF   xC0,W
0842:  XORLW  0C
0844:  BZ    0850
0846:  XORLW  06
0848:  BZ    0864
084A:  XORLW  02
084C:  BZ    0872
084E:  BRA    087C
....................      case '\f'   : lcd_send_byte(0,1); 
0850:  CLRF   xC4
0852:  MOVLW  01
0854:  MOVWF  xC5
0856:  RCALL  0732
....................                    lcdline=1; 
0858:  MOVLW  01
085A:  MOVWF  xAE
....................                    delay_ms(2); 
085C:  MOVLW  02
085E:  MOVWF  xC6
0860:  RCALL  06E2
....................                                            break; 
0862:  BRA    0888
....................      case '\n'   : lcd_gotoxy(1,++lcdline);        break; 
0864:  INCF   xAE,F
0866:  MOVLW  01
0868:  MOVWF  xC1
086A:  MOVFF  AE,C2
086E:  RCALL  07CA
0870:  BRA    0888
....................      case '\b'   : lcd_send_byte(0,0x10);  break; 
0872:  CLRF   xC4
0874:  MOVLW  10
0876:  MOVWF  xC5
0878:  RCALL  0732
087A:  BRA    0888
....................      default     : lcd_send_byte(1,c);     break; 
087C:  MOVLW  01
087E:  MOVWF  xC4
0880:  MOVFF  C0,C5
0884:  RCALL  0732
0886:  BRA    0888
....................    } 
.................... } 
0888:  RETLW  00
....................  
.................... char lcd_getc( BYTE x, BYTE y) { 
....................    char value; 
....................  
....................     lcd_gotoxy(x,y); 
....................     lcd.rs=1; 
....................     value = lcd_read_byte(); 
....................     lcd.rs=0; 
....................     return(value); 
.................... } 
....................  
....................  
....................  
.................... #int_TIMER1 
.................... void temp1s(void){ 
....................    set_timer1(5536);  // 5 ms 
*
00B4:  MOVLW  15
00B6:  MOVWF  FCF
00B8:  MOVLW  A0
00BA:  MOVWF  FCE
....................    //set_timer1(45536);  // 5 ms 
....................    tiempos++; 
00BC:  INCF   3E,F
00BE:  BTFSC  FD8.2
00C0:  INCF   3F,F
....................     
....................    if(Bloqueo){ 
00C2:  BTFSS  xAA.0
00C4:  BRA    00CC
....................       tiempobloqueo++; 
00C6:  INCF   44,F
00C8:  BTFSC  FD8.2
00CA:  INCF   45,F
....................    } 
....................     
....................    if(tiempos>=200)   // Ha transcurrido una decima de segundo (PIC18F4550 con XT = 16MHZ) 
00CC:  MOVF   3F,F
00CE:  BNZ   00D6
00D0:  MOVF   3E,W
00D2:  SUBLW  C7
00D4:  BC    0124
....................    { 
....................       tiempos=0;tiemporeset++;Lectura=1; 
00D6:  CLRF   3F
00D8:  CLRF   3E
00DA:  INCF   2F,F
00DC:  BSF    17.0
....................     
....................    if(ActivaBuzzer==1) 
00DE:  DECFSZ 3D,W
00E0:  BRA    00F6
....................    { 
....................       if(estadobuzzer==0) 
00E2:  BTFSC  17.3
00E4:  BRA    00EC
....................       { 
....................          Buzzer_off; 
00E6:  BCF    F8C.0
00E8:  BCF    F95.0
....................       } 
....................       else 
00EA:  BRA    00F4
....................       { 
....................          if(estadoalarma==1) 
00EC:  BTFSS  17.4
00EE:  BRA    00F4
....................             Buzzer_on; 
00F0:  BSF    F8C.0
00F2:  BCF    F95.0
....................       } 
....................       estadobuzzer=!estadobuzzer; 
00F4:  BTG    17.3
....................    } 
....................    //----------------------------- Tiempo Total-----------------------------// 
....................    if(estadouv==1) 
00F6:  BTFSS  16.0
00F8:  BRA    0124
....................    { 
....................       segundos++; 
00FA:  INCF   21,F
....................       if(tiempo_cumplido==0) 
00FC:  BTFSC  16.7
00FE:  BRA    0124
....................       { 
....................          if(tempo_segundos>0) 
0100:  MOVF   28,F
0102:  BZ    0108
....................          { 
....................             tempo_segundos--; 
0104:  DECF   28,F
....................          } 
....................          else 
0106:  BRA    0124
....................          { 
....................             if(tempo_minutos>0) 
0108:  MOVF   27,F
010A:  BZ    0114
....................             { 
....................                tempo_minutos--; 
010C:  DECF   27,F
....................                tempo_segundos=59; 
010E:  MOVLW  3B
0110:  MOVWF  28
....................             } 
....................             else 
0112:  BRA    0124
....................             { 
....................                tiempo_cumplido=1; 
0114:  BSF    16.7
....................                estadouv=0;Luz_UV_off; 
0116:  BCF    16.0
0118:  BSF    F8C.1
011A:  BCF    F95.1
....................                tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
011C:  MOVFF  29,27
0120:  MOVFF  2A,28
....................             } 
....................          } 
....................       } 
....................    } 
....................          
....................    } 
.................... } 
....................  
....................  
0124:  BCF    F9E.0
0126:  GOTO   0054
.................... void mensajes(int8 x,y)// Funcion para imprimir mensajes de Menu Principal. 
.................... {   
....................    if(x==1) 
*
0B14:  DECFSZ xB0,W
0B16:  BRA    0B2C
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Temporizador UV    ");} 
0B18:  MOVLW  02
0B1A:  MOVWF  xC1
0B1C:  MOVFF  B1,C2
0B20:  RCALL  07CA
0B22:  MOVLW  2A
0B24:  MOVWF  FF6
0B26:  MOVLW  01
0B28:  MOVWF  FF7
0B2A:  RCALL  088A
....................    if(x==2) 
0B2C:  MOVF   xB0,W
0B2E:  SUBLW  02
0B30:  BNZ   0B46
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Cambio Contraseña  ");} 
0B32:  MOVLW  02
0B34:  MOVWF  xC1
0B36:  MOVFF  B1,C2
0B3A:  RCALL  07CA
0B3C:  MOVLW  3E
0B3E:  MOVWF  FF6
0B40:  MOVLW  01
0B42:  MOVWF  FF7
0B44:  RCALL  088A
....................    if(x==3) 
0B46:  MOVF   xB0,W
0B48:  SUBLW  03
0B4A:  BNZ   0B60
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Tiempo Trabajo UV  ");} 
0B4C:  MOVLW  02
0B4E:  MOVWF  xC1
0B50:  MOVFF  B1,C2
0B54:  RCALL  07CA
0B56:  MOVLW  52
0B58:  MOVWF  FF6
0B5A:  MOVLW  01
0B5C:  MOVWF  FF7
0B5E:  RCALL  088A
....................    if(x==4) 
0B60:  MOVF   xB0,W
0B62:  SUBLW  04
0B64:  BNZ   0B7A
....................    {lcd_gotoxy(2,y);printf(lcd_putc,"Punto Cero         ");} 
0B66:  MOVLW  02
0B68:  MOVWF  xC1
0B6A:  MOVFF  B1,C2
0B6E:  RCALL  07CA
0B70:  MOVLW  66
0B72:  MOVWF  FF6
0B74:  MOVLW  01
0B76:  MOVWF  FF7
0B78:  RCALL  088A
....................     
....................    if(x==5) 
0B7A:  MOVF   xB0,W
0B7C:  SUBLW  05
0B7E:  BNZ   0BB0
....................    {if(estadoalarma==0) 
0B80:  BTFSC  17.4
0B82:  BRA    0B98
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma          OFF");} 
0B84:  MOVLW  02
0B86:  MOVWF  xC1
0B88:  MOVFF  B1,C2
0B8C:  RCALL  07CA
0B8E:  MOVLW  7A
0B90:  MOVWF  FF6
0B92:  MOVLW  01
0B94:  MOVWF  FF7
0B96:  RCALL  088A
....................    if(estadoalarma==1) 
0B98:  BTFSS  17.4
0B9A:  BRA    0BB0
....................       {lcd_gotoxy(2,y);printf(lcd_putc,"Alarma           ON");} 
0B9C:  MOVLW  02
0B9E:  MOVWF  xC1
0BA0:  MOVFF  B1,C2
0BA4:  RCALL  07CA
0BA6:  MOVLW  8E
0BA8:  MOVWF  FF6
0BAA:  MOVLW  01
0BAC:  MOVWF  FF7
0BAE:  RCALL  088A
....................    } 
.................... } 
0BB0:  RETLW  00
....................  
.................... void velocidades(int8 x)// Funcion para imprimir mensajes de Menu Principal. 
.................... {  if(x==0) 
*
1932:  MOVF   xAF,F
1934:  BNZ   193C
....................    { 
....................       Motor_L1_off; 
1936:  BSF    F8B.6
1938:  BCF    F94.6
....................    } 
....................    else 
193A:  BRA    1940
....................    { 
....................       Motor_L1_on; 
193C:  BCF    F8B.6
193E:  BCF    F94.6
....................    } 
.................... } 
1940:  RETLW  00
....................  
.................... float sensores(int x){ 
.................... float y;set_adc_channel(x);delay_ms(10);y=read_adc();return (y); 
*
0CCC:  RLCF   xB4,W
0CCE:  MOVWF  00
0CD0:  RLCF   00,F
0CD2:  MOVLW  FC
0CD4:  ANDWF  00,F
0CD6:  MOVFF  00,01
0CDA:  MOVF   FC2,W
0CDC:  ANDLW  C3
0CDE:  IORWF  00,W
0CE0:  MOVWF  FC2
0CE2:  MOVLW  0A
0CE4:  MOVWF  xC6
0CE6:  RCALL  06E2
0CE8:  BSF    FC2.1
0CEA:  BTFSC  FC2.1
0CEC:  BRA    0CEA
0CEE:  MOVFF  FC4,03
0CF2:  MOVFF  FC3,C7
0CF6:  MOVFF  FC4,C8
0CFA:  RCALL  08AA
0CFC:  MOVFF  03,B8
0D00:  MOVFF  02,B7
0D04:  MOVFF  01,B6
0D08:  MOVFF  00,B5
0D0C:  MOVFF  B5,00
0D10:  MOVFF  B6,01
0D14:  MOVFF  B7,02
0D18:  MOVFF  B8,03
.................... } 
0D1C:  RETLW  00
....................  
.................... float Leer_Sensor_Presion(int media){ 
*
10E2:  CLRF   xB3
10E4:  CLRF   xB2
10E6:  CLRF   xB1
10E8:  CLRF   xB0
....................    float promediopresion=0.0; 
....................     
....................    V1=sensores(0);  
10EA:  CLRF   xB4
10EC:  RCALL  0CCC
10EE:  MOVFF  03,99
10F2:  MOVFF  02,98
10F6:  MOVFF  01,97
10FA:  MOVFF  00,96
....................    //V1 = (x_uno*5.0)/1023.0;   //Lectura de Divisor de Voltaje de PT100 con resistencia de 1k (+-10%) 
....................    Presion=(V1/G)-1.0;// Presion=(Voltaje/Ganancia)-1 
10FE:  MOVFF  99,C6
1102:  MOVFF  98,C5
1106:  MOVFF  97,C4
110A:  MOVFF  96,C3
110E:  MOVFF  A9,CA
1112:  MOVFF  A8,C9
1116:  MOVFF  A7,C8
111A:  MOVFF  A6,C7
111E:  RCALL  0D1E
1120:  MOVFF  00,B4
1124:  MOVFF  01,B5
1128:  MOVFF  02,B6
112C:  MOVFF  03,B7
1130:  BSF    FD8.1
1132:  MOVFF  03,CA
1136:  MOVFF  02,C9
113A:  MOVFF  01,C8
113E:  MOVFF  00,C7
1142:  CLRF   xCE
1144:  CLRF   xCD
1146:  CLRF   xCC
1148:  MOVLW  7F
114A:  MOVWF  xCB
114C:  RCALL  0E78
114E:  MOVFF  03,9D
1152:  MOVFF  02,9C
1156:  MOVFF  01,9B
115A:  MOVFF  00,9A
....................     
....................    if(Presion<0.0) 
115E:  MOVFF  9D,C6
1162:  MOVFF  9C,C5
1166:  MOVFF  9B,C4
116A:  MOVFF  9A,C3
116E:  CLRF   xCA
1170:  CLRF   xC9
1172:  CLRF   xC8
1174:  CLRF   xC7
1176:  CALL   08E0
117A:  BNC   1184
....................    { 
....................       Presion=0.0; 
117C:  CLRF   x9D
117E:  CLRF   x9C
1180:  CLRF   x9B
1182:  CLRF   x9A
....................    } 
....................  
....................    if(r>media-1) 
1184:  MOVLW  01
1186:  SUBWF  xAF,W
1188:  SUBWF  2B,W
118A:  BZ    1190
118C:  BNC   1190
....................    {r=0;} 
118E:  CLRF   2B
....................    PromPresion[r]=Presion;r++; 
1190:  MOVF   2B,W
1192:  MULLW  04
1194:  MOVF   FF3,W
1196:  CLRF   03
1198:  ADDLW  46
119A:  MOVWF  FE9
119C:  MOVLW  00
119E:  ADDWFC 03,W
11A0:  MOVWF  FEA
11A2:  MOVFF  9A,FEF
11A6:  MOVFF  9B,FEC
11AA:  MOVFF  9C,FEC
11AE:  MOVFF  9D,FEC
11B2:  INCF   2B,F
....................           
....................    for(q=0;q<=(media-1);q++) 
11B4:  CLRF   2C
11B6:  MOVLW  01
11B8:  SUBWF  xAF,W
11BA:  SUBWF  2C,W
11BC:  BZ    11C0
11BE:  BC    122A
....................    { 
....................       promediopresion+=PromPresion[q]; 
11C0:  MOVF   2C,W
11C2:  MULLW  04
11C4:  MOVF   FF3,W
11C6:  CLRF   03
11C8:  ADDLW  46
11CA:  MOVWF  FE9
11CC:  MOVLW  00
11CE:  ADDWFC 03,W
11D0:  MOVWF  FEA
11D2:  MOVFF  FEF,00
11D6:  MOVFF  FEC,01
11DA:  MOVFF  FEC,02
11DE:  MOVFF  FEC,03
11E2:  MOVFF  FEA,B5
11E6:  MOVFF  FE9,B4
11EA:  BCF    FD8.1
11EC:  MOVFF  B3,CA
11F0:  MOVFF  B2,C9
11F4:  MOVFF  B1,C8
11F8:  MOVFF  B0,C7
11FC:  MOVFF  03,CE
1200:  MOVFF  02,CD
1204:  MOVFF  01,CC
1208:  MOVFF  00,CB
120C:  RCALL  0E78
120E:  MOVFF  B5,FEA
1212:  MOVFF  B4,FE9
1216:  MOVFF  03,B3
121A:  MOVFF  02,B2
121E:  MOVFF  01,B1
1222:  MOVFF  00,B0
....................    }  
1226:  INCF   2C,F
1228:  BRA    11B6
....................    promediopresion=promediopresion/media;    
122A:  CLRF   xC8
122C:  MOVFF  AF,C7
1230:  CALL   08AA
1234:  MOVFF  B3,C6
1238:  MOVFF  B2,C5
123C:  MOVFF  B1,C4
1240:  MOVFF  B0,C3
1244:  MOVFF  03,CA
1248:  MOVFF  02,C9
124C:  MOVFF  01,C8
1250:  MOVFF  00,C7
1254:  RCALL  0D1E
1256:  MOVFF  03,B3
125A:  MOVFF  02,B2
125E:  MOVFF  01,B1
1262:  MOVFF  00,B0
....................     
....................    return promediopresion; 
1266:  MOVFF  B0,00
126A:  MOVFF  B1,01
126E:  MOVFF  B2,02
1272:  MOVFF  B3,03
.................... } 
1276:  RETLW  00
....................  
.................... void Limita(void){ 
....................     
....................    if(Contrasena[0]>9 || Contrasena[0]<0)Contrasena[0]=0; 
*
0956:  BTFSC  39.7
0958:  BRA    0960
095A:  MOVF   39,W
095C:  SUBLW  09
095E:  BNC   0964
0960:  BTFSS  39.7
0962:  BRA    0966
0964:  CLRF   39
....................    if(Contrasena[1]>9 || Contrasena[1]<0)Contrasena[1]=0; 
0966:  BTFSC  3A.7
0968:  BRA    0970
096A:  MOVF   3A,W
096C:  SUBLW  09
096E:  BNC   0974
0970:  BTFSS  3A.7
0972:  BRA    0976
0974:  CLRF   3A
....................    if(Contrasena[2]>9 || Contrasena[2]<0)Contrasena[2]=0; 
0976:  BTFSC  3B.7
0978:  BRA    0980
097A:  MOVF   3B,W
097C:  SUBLW  09
097E:  BNC   0984
0980:  BTFSS  3B.7
0982:  BRA    0986
0984:  CLRF   3B
....................    if(Contrasena[3]>9 || Contrasena[3]<0)Contrasena[3]=0; 
0986:  BTFSC  3C.7
0988:  BRA    0990
098A:  MOVF   3C,W
098C:  SUBLW  09
098E:  BNC   0994
0990:  BTFSS  3C.7
0992:  BRA    0996
0994:  CLRF   3C
....................    if(tempo_minutos>60)tempo_minutos=20; 
0996:  MOVF   27,W
0998:  SUBLW  3C
099A:  BC    09A0
099C:  MOVLW  14
099E:  MOVWF  27
....................    if(tempo_segundos)tempo_segundos=0; 
09A0:  MOVF   28,F
09A2:  BTFSS  FD8.2
09A4:  CLRF   28
....................    if(segundos>60)segundos=0; 
09A6:  MOVF   21,W
09A8:  SUBLW  3C
09AA:  BTFSS  FD8.0
09AC:  CLRF   21
....................    if(minutos>60)minutos=0; 
09AE:  MOVF   22,W
09B0:  SUBLW  3C
09B2:  BTFSS  FD8.0
09B4:  CLRF   22
....................    if(horas>10000)horas=0; 
09B6:  MOVF   41,W
09B8:  SUBLW  26
09BA:  BC    09CA
09BC:  XORLW  FF
09BE:  BNZ   09C6
09C0:  MOVF   40,W
09C2:  SUBLW  10
09C4:  BC    09CA
09C6:  CLRF   41
09C8:  CLRF   40
....................    if(G>1000)G=240; 
09CA:  CLRF   xC6
09CC:  CLRF   xC5
09CE:  MOVLW  7A
09D0:  MOVWF  xC4
09D2:  MOVLW  88
09D4:  MOVWF  xC3
09D6:  MOVFF  A9,CA
09DA:  MOVFF  A8,C9
09DE:  MOVFF  A7,C8
09E2:  MOVFF  A6,C7
09E6:  RCALL  08E0
09E8:  BNC   09F6
09EA:  CLRF   xA9
09EC:  CLRF   xA8
09EE:  MOVLW  70
09F0:  MOVWF  xA7
09F2:  MOVLW  86
09F4:  MOVWF  xA6
....................    if(estadoalarma>10)estadoalarma=1; 
09F6:  MOVLW  00
09F8:  BTFSC  17.4
09FA:  MOVLW  01
09FC:  SUBLW  0A
09FE:  BTFSS  FD8.0
0A00:  BSF    17.4
.................... } 
0A02:  GOTO   1D24 (RETURN)
....................  
.................... void EliminaRuido(void){ 
....................    /*if(Menu==50){ 
....................       dato[0]=lcd_getc(1,2); 
....................       dato[1]=lcd_getc(2,2); 
....................       dato[2]=lcd_getc(3,2); 
....................       if(dato[0]!=70 || dato[1]!=105 || dato[2]!=108){ 
....................          lcd_init();delay_ms(200);lcd_init(); 
....................          Cambio=ON; 
....................       } 
....................    }*/ 
.................... } 
*
0004:  RETLW  00
....................  
.................... void main () 
.................... { 
*
1942:  CLRF   FF8
1944:  BCF    FD0.7
1946:  BSF    07.7
1948:  CLRF   FEA
194A:  CLRF   FE9
194C:  BCF    16.0
194E:  BCF    16.1
1950:  BCF    16.2
1952:  BCF    16.3
1954:  BCF    16.4
1956:  BCF    16.5
1958:  BCF    16.6
195A:  BCF    16.7
195C:  BCF    17.0
195E:  BCF    17.1
1960:  BCF    17.2
1962:  BCF    17.3
1964:  BCF    17.4
1966:  CLRF   18
1968:  MOVLW  06
196A:  MOVWF  19
196C:  MOVLW  02
196E:  MOVWF  1A
1970:  MOVLW  0B
1972:  MOVWF  1B
1974:  MOVLW  02
1976:  MOVWF  1C
1978:  MOVLW  03
197A:  MOVWF  1D
197C:  MOVLW  02
197E:  MOVWF  1E
1980:  MOVWF  1F
1982:  MOVLW  04
1984:  MOVWF  20
1986:  CLRF   21
1988:  CLRF   22
198A:  CLRF   23
198C:  CLRF   24
198E:  CLRF   25
1990:  CLRF   26
1992:  CLRF   27
1994:  CLRF   28
1996:  CLRF   29
1998:  CLRF   2A
199A:  CLRF   2B
199C:  CLRF   2C
199E:  CLRF   2D
19A0:  MOVLW  01
19A2:  MOVWF  2E
19A4:  CLRF   2F
19A6:  CLRF   30
19A8:  CLRF   31
19AA:  CLRF   3D
19AC:  CLRF   41
19AE:  CLRF   40
19B0:  CLRF   43
19B2:  CLRF   42
19B4:  CLRF   45
19B6:  CLRF   44
19B8:  CLRF   x99
19BA:  CLRF   x98
19BC:  CLRF   x97
19BE:  CLRF   x96
19C0:  CLRF   x9D
19C2:  CLRF   x9C
19C4:  CLRF   x9B
19C6:  CLRF   x9A
19C8:  CLRF   xA1
19CA:  CLRF   xA0
19CC:  CLRF   x9F
19CE:  CLRF   x9E
19D0:  CLRF   xA5
19D2:  CLRF   xA4
19D4:  CLRF   xA3
19D6:  CLRF   xA2
19D8:  CLRF   xA9
19DA:  CLRF   xA8
19DC:  CLRF   xA7
19DE:  MOVLW  80
19E0:  MOVWF  xA6
19E2:  BSF    17.5
19E4:  BCF    17.6
19E6:  BCF    17.7
19E8:  BCF    xAA.0
19EA:  MOVF   FC1,W
19EC:  ANDLW  C0
19EE:  IORLW  0F
19F0:  MOVWF  FC1
19F2:  MOVLW  07
19F4:  MOVWF  FB4
19F6:  MOVLW  3E
19F8:  MOVWF  32
19FA:  MOVLW  20
19FC:  MOVWF  33
19FE:  MOVLW  5E
1A00:  MOVWF  34
1A02:  CLRF   35
1A04:  CLRF   36
1A06:  CLRF   37
1A08:  CLRF   38
1A0A:  CLRF   39
1A0C:  CLRF   3A
1A0E:  CLRF   3B
1A10:  CLRF   3C
1A12:  CLRF   46
1A14:  CLRF   47
1A16:  CLRF   48
1A18:  CLRF   49
1A1A:  CLRF   4A
1A1C:  CLRF   4B
1A1E:  CLRF   4C
1A20:  CLRF   4D
1A22:  CLRF   4E
1A24:  CLRF   4F
1A26:  CLRF   50
1A28:  CLRF   51
1A2A:  CLRF   52
1A2C:  CLRF   53
1A2E:  CLRF   54
1A30:  CLRF   55
1A32:  CLRF   56
1A34:  CLRF   57
1A36:  CLRF   58
1A38:  CLRF   59
1A3A:  CLRF   5A
1A3C:  CLRF   5B
1A3E:  CLRF   5C
1A40:  CLRF   5D
1A42:  CLRF   5E
1A44:  CLRF   5F
1A46:  CLRF   x60
1A48:  CLRF   x61
1A4A:  CLRF   x62
1A4C:  CLRF   x63
1A4E:  CLRF   x64
1A50:  CLRF   x65
1A52:  CLRF   x66
1A54:  CLRF   x67
1A56:  CLRF   x68
1A58:  CLRF   x69
1A5A:  CLRF   x6A
1A5C:  CLRF   x6B
1A5E:  CLRF   x6C
1A60:  CLRF   x6D
1A62:  CLRF   x6E
1A64:  CLRF   x6F
1A66:  CLRF   x70
1A68:  CLRF   x71
1A6A:  CLRF   x72
1A6C:  CLRF   x73
1A6E:  CLRF   x74
1A70:  CLRF   x75
1A72:  CLRF   x76
1A74:  CLRF   x77
1A76:  CLRF   x78
1A78:  CLRF   x79
1A7A:  CLRF   x7A
1A7C:  CLRF   x7B
1A7E:  CLRF   x7C
1A80:  CLRF   x7D
1A82:  CLRF   x7E
1A84:  CLRF   x7F
1A86:  CLRF   x80
1A88:  CLRF   x81
1A8A:  CLRF   x82
1A8C:  CLRF   x83
1A8E:  CLRF   x84
1A90:  CLRF   x85
1A92:  CLRF   x86
1A94:  CLRF   x87
1A96:  CLRF   x88
1A98:  CLRF   x89
1A9A:  CLRF   x8A
1A9C:  CLRF   x8B
1A9E:  CLRF   x8C
1AA0:  CLRF   x8D
1AA2:  CLRF   x8E
1AA4:  CLRF   x8F
1AA6:  CLRF   x90
1AA8:  CLRF   x91
1AAA:  CLRF   x92
1AAC:  CLRF   x93
1AAE:  CLRF   x94
1AB0:  CLRF   x95
....................    lcd_init(); 
1AB2:  CALL   0774
....................    setup_timer_1(T1_INTERNAL|T1_DIV_BY_1); 
1AB6:  MOVLW  85
1AB8:  MOVWF  FCD
....................    enable_interrupts(INT_TIMER1); 
1ABA:  BSF    F9D.0
....................    setup_adc_ports(AN0); 
1ABC:  MOVF   FC1,W
1ABE:  ANDLW  C0
1AC0:  IORLW  0E
1AC2:  MOVWF  FC1
....................    setup_adc(ADC_CLOCK_DIV_32 ); 
1AC4:  BCF    FC0.0
1AC6:  BSF    FC0.1
1AC8:  BCF    FC0.2
1ACA:  BSF    FC0.7
1ACC:  BSF    FC2.0
....................    enable_interrupts(global); 
1ACE:  MOVLW  C0
1AD0:  IORWF  FF2,F
....................    lcd_gotoxy(1,1); 
1AD2:  MOVLW  01
1AD4:  MOVWF  xC1
1AD6:  MOVWF  xC2
1AD8:  CALL   07CA
....................    printf(lcd_putc," CABINA  DE   FLUJO "); 
1ADC:  MOVLW  A2
1ADE:  MOVWF  FF6
1AE0:  MOVLW  01
1AE2:  MOVWF  FF7
1AE4:  CALL   088A
....................    lcd_gotoxy(1,2); 
1AE8:  MOVLW  01
1AEA:  MOVWF  xC1
1AEC:  MOVLW  02
1AEE:  MOVWF  xC2
1AF0:  CALL   07CA
....................    printf(lcd_putc,"  LAMINAR  VERTICAL "); 
1AF4:  MOVLW  B8
1AF6:  MOVWF  FF6
1AF8:  MOVLW  01
1AFA:  MOVWF  FF7
1AFC:  CALL   088A
....................    lcd_gotoxy(1,3); 
1B00:  MOVLW  01
1B02:  MOVWF  xC1
1B04:  MOVLW  03
1B06:  MOVWF  xC2
1B08:  CALL   07CA
....................    printf(lcd_putc,"    JP INGLOBAL     "); 
1B0C:  MOVLW  CE
1B0E:  MOVWF  FF6
1B10:  MOVLW  01
1B12:  MOVWF  FF7
1B14:  CALL   088A
....................    lcd_gotoxy(1,4); 
1B18:  MOVLW  01
1B1A:  MOVWF  xC1
1B1C:  MOVLW  04
1B1E:  MOVWF  xC2
1B20:  CALL   07CA
....................    printf(lcd_putc,"   REF:  JPCFLV90   "); 
1B24:  MOVLW  E4
1B26:  MOVWF  FF6
1B28:  MOVLW  01
1B2A:  MOVWF  FF7
1B2C:  CALL   088A
....................    delay_ms(2000); 
1B30:  MOVLW  08
1B32:  MOVWF  xAF
1B34:  MOVLW  FA
1B36:  MOVWF  xC6
1B38:  CALL   06E2
1B3C:  DECFSZ xAF,F
1B3E:  BRA    1B34
....................    printf(lcd_putc,"\f");    
1B40:  MOVLW  0C
1B42:  MOVWF  xC0
1B44:  CALL   082C
....................     
....................    // Lee la contraseña almacenada en la eeprom para poder comprobar con la que escribe el usuario. 
....................    contrasena[0]=read_eeprom(0); 
1B48:  MOVFF  FF2,AF
1B4C:  BCF    FF2.7
1B4E:  CLRF   FA9
1B50:  BCF    FA6.6
1B52:  BCF    FA6.7
1B54:  BSF    FA6.0
1B56:  MOVF   FA8,W
1B58:  BTFSC  xAF.7
1B5A:  BSF    FF2.7
1B5C:  MOVWF  39
....................    delay_ms(20);  
1B5E:  MOVLW  14
1B60:  MOVWF  xC6
1B62:  CALL   06E2
....................    contrasena[1]=read_eeprom(1); 
1B66:  MOVFF  FF2,AF
1B6A:  BCF    FF2.7
1B6C:  MOVLW  01
1B6E:  MOVWF  FA9
1B70:  BCF    FA6.6
1B72:  BCF    FA6.7
1B74:  BSF    FA6.0
1B76:  MOVF   FA8,W
1B78:  BTFSC  xAF.7
1B7A:  BSF    FF2.7
1B7C:  MOVWF  3A
....................    delay_ms(20); 
1B7E:  MOVLW  14
1B80:  MOVWF  xC6
1B82:  CALL   06E2
....................    contrasena[2]=read_eeprom(2); 
1B86:  MOVFF  FF2,AF
1B8A:  BCF    FF2.7
1B8C:  MOVLW  02
1B8E:  MOVWF  FA9
1B90:  BCF    FA6.6
1B92:  BCF    FA6.7
1B94:  BSF    FA6.0
1B96:  MOVF   FA8,W
1B98:  BTFSC  xAF.7
1B9A:  BSF    FF2.7
1B9C:  MOVWF  3B
....................    delay_ms(20);  
1B9E:  MOVLW  14
1BA0:  MOVWF  xC6
1BA2:  CALL   06E2
....................    contrasena[3]=read_eeprom(3); 
1BA6:  MOVFF  FF2,AF
1BAA:  BCF    FF2.7
1BAC:  MOVLW  03
1BAE:  MOVWF  FA9
1BB0:  BCF    FA6.6
1BB2:  BCF    FA6.7
1BB4:  BSF    FA6.0
1BB6:  MOVF   FA8,W
1BB8:  BTFSC  xAF.7
1BBA:  BSF    FF2.7
1BBC:  MOVWF  3C
....................    delay_ms(20); 
1BBE:  MOVLW  14
1BC0:  MOVWF  xC6
1BC2:  CALL   06E2
....................    estadoalarma=read_eeprom(5); 
1BC6:  MOVFF  FF2,AF
1BCA:  BCF    FF2.7
1BCC:  MOVLW  05
1BCE:  MOVWF  FA9
1BD0:  BCF    FA6.6
1BD2:  BCF    FA6.7
1BD4:  BSF    FA6.0
1BD6:  MOVF   FA8,W
1BD8:  BTFSC  xAF.7
1BDA:  BSF    FF2.7
1BDC:  MOVWF  01
1BDE:  BCF    17.4
1BE0:  BTFSC  01.0
1BE2:  BSF    17.4
....................    delay_ms(20); 
1BE4:  MOVLW  14
1BE6:  MOVWF  xC6
1BE8:  CALL   06E2
....................    tempo_minutos=read_eeprom(20); 
1BEC:  MOVFF  FF2,AF
1BF0:  BCF    FF2.7
1BF2:  MOVLW  14
1BF4:  MOVWF  FA9
1BF6:  BCF    FA6.6
1BF8:  BCF    FA6.7
1BFA:  BSF    FA6.0
1BFC:  MOVF   FA8,W
1BFE:  BTFSC  xAF.7
1C00:  BSF    FF2.7
1C02:  MOVWF  27
....................    delay_ms(20); 
1C04:  MOVLW  14
1C06:  MOVWF  xC6
1C08:  CALL   06E2
....................    tempo_segundos=read_eeprom(30); 
1C0C:  MOVFF  FF2,AF
1C10:  BCF    FF2.7
1C12:  MOVLW  1E
1C14:  MOVWF  FA9
1C16:  BCF    FA6.6
1C18:  BCF    FA6.7
1C1A:  BSF    FA6.0
1C1C:  MOVF   FA8,W
1C1E:  BTFSC  xAF.7
1C20:  BSF    FF2.7
1C22:  MOVWF  28
....................    delay_ms(20); 
1C24:  MOVLW  14
1C26:  MOVWF  xC6
1C28:  CALL   06E2
....................    segundos=read_eeprom(50); 
1C2C:  MOVFF  FF2,AF
1C30:  BCF    FF2.7
1C32:  MOVLW  32
1C34:  MOVWF  FA9
1C36:  BCF    FA6.6
1C38:  BCF    FA6.7
1C3A:  BSF    FA6.0
1C3C:  MOVF   FA8,W
1C3E:  BTFSC  xAF.7
1C40:  BSF    FF2.7
1C42:  MOVWF  21
....................    delay_ms(20); 
1C44:  MOVLW  14
1C46:  MOVWF  xC6
1C48:  CALL   06E2
....................    minutos=read_eeprom(51); 
1C4C:  MOVFF  FF2,AF
1C50:  BCF    FF2.7
1C52:  MOVLW  33
1C54:  MOVWF  FA9
1C56:  BCF    FA6.6
1C58:  BCF    FA6.7
1C5A:  BSF    FA6.0
1C5C:  MOVF   FA8,W
1C5E:  BTFSC  xAF.7
1C60:  BSF    FF2.7
1C62:  MOVWF  22
....................    delay_ms(20); 
1C64:  MOVLW  14
1C66:  MOVWF  xC6
1C68:  CALL   06E2
....................    horasL=read_eeprom(52); 
1C6C:  MOVFF  FF2,AF
1C70:  BCF    FF2.7
1C72:  MOVLW  34
1C74:  MOVWF  FA9
1C76:  BCF    FA6.6
1C78:  BCF    FA6.7
1C7A:  BSF    FA6.0
1C7C:  MOVF   FA8,W
1C7E:  BTFSC  xAF.7
1C80:  BSF    FF2.7
1C82:  MOVWF  23
....................    delay_ms(20); 
1C84:  MOVLW  14
1C86:  MOVWF  xC6
1C88:  CALL   06E2
....................    horasH=read_eeprom(53); 
1C8C:  MOVFF  FF2,AF
1C90:  BCF    FF2.7
1C92:  MOVLW  35
1C94:  MOVWF  FA9
1C96:  BCF    FA6.6
1C98:  BCF    FA6.7
1C9A:  BSF    FA6.0
1C9C:  MOVF   FA8,W
1C9E:  BTFSC  xAF.7
1CA0:  BSF    FF2.7
1CA2:  MOVWF  24
....................    delay_ms(20); 
1CA4:  MOVLW  14
1CA6:  MOVWF  xC6
1CA8:  CALL   06E2
....................    G_l=read_eeprom(60); 
1CAC:  MOVFF  FF2,AF
1CB0:  BCF    FF2.7
1CB2:  MOVLW  3C
1CB4:  MOVWF  FA9
1CB6:  BCF    FA6.6
1CB8:  BCF    FA6.7
1CBA:  BSF    FA6.0
1CBC:  MOVF   FA8,W
1CBE:  BTFSC  xAF.7
1CC0:  BSF    FF2.7
1CC2:  MOVWF  25
....................    delay_ms(20); 
1CC4:  MOVLW  14
1CC6:  MOVWF  xC6
1CC8:  CALL   06E2
....................    G_h=read_eeprom(61); 
1CCC:  MOVFF  FF2,AF
1CD0:  BCF    FF2.7
1CD2:  MOVLW  3D
1CD4:  MOVWF  FA9
1CD6:  BCF    FA6.6
1CD8:  BCF    FA6.7
1CDA:  BSF    FA6.0
1CDC:  MOVF   FA8,W
1CDE:  BTFSC  xAF.7
1CE0:  BSF    FF2.7
1CE2:  MOVWF  26
....................    delay_ms(20); 
1CE4:  MOVLW  14
1CE6:  MOVWF  xC6
1CE8:  CALL   06E2
....................    G16=make16(G_h,G_l); 
1CEC:  MOVFF  26,43
1CF0:  MOVFF  25,42
....................    G=G16; 
1CF4:  MOVFF  43,C8
1CF8:  MOVFF  42,C7
1CFC:  CALL   08AA
1D00:  MOVFF  03,A9
1D04:  MOVFF  02,A8
1D08:  MOVFF  01,A7
1D0C:  MOVFF  00,A6
....................    horas=make16(horasH,horasL); 
1D10:  MOVFF  24,41
1D14:  MOVFF  23,40
....................    tempo_minutos_pro=tempo_minutos;tempo_segundos_pro=tempo_segundos; 
1D18:  MOVFF  27,29
1D1C:  MOVFF  28,2A
....................    Limita();    
1D20:  GOTO   0956
....................    //segundos=read_eeprom(50);minutos=read_eeprom(51);horas=read_eeprom(52); 
....................    Luz_UV_off; 
1D24:  BSF    F8C.1
1D26:  BCF    F95.1
....................    Luz_Blanca_off; 
1D28:  BSF    F8C.2
1D2A:  BCF    F95.2
....................    Motor_L1_off; 
1D2C:  BSF    F8B.6
1D2E:  BCF    F94.6
....................  
....................    while(true){ 
....................  
.................... //------------Menu0------------------------------------------------------------------    
....................    if(Menu == 0){ // Menu de Contraseña para Poder iniciar el equipo 
1D30:  MOVF   18,F
1D32:  BTFSS  FD8.2
1D34:  BRA    2124
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
1D36:  MOVLW  01
1D38:  MOVWF  xC1
1D3A:  MOVWF  xC2
1D3C:  CALL   07CA
....................          printf(lcd_putc,"     Ingrese        "); 
1D40:  MOVLW  FA
1D42:  MOVWF  FF6
1D44:  MOVLW  01
1D46:  MOVWF  FF7
1D48:  CALL   088A
....................          lcd_gotoxy(1,2); 
1D4C:  MOVLW  01
1D4E:  MOVWF  xC1
1D50:  MOVLW  02
1D52:  MOVWF  xC2
1D54:  CALL   07CA
....................          printf(lcd_putc,"    Contraseña      "); 
1D58:  MOVLW  10
1D5A:  MOVWF  FF6
1D5C:  MOVLW  02
1D5E:  MOVWF  FF7
1D60:  CALL   088A
....................          lcd_gotoxy(1,3); 
1D64:  MOVLW  01
1D66:  MOVWF  xC1
1D68:  MOVLW  03
1D6A:  MOVWF  xC2
1D6C:  CALL   07CA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
1D70:  MOVLW  26
1D72:  MOVWF  FF6
1D74:  MOVLW  02
1D76:  MOVWF  FF7
1D78:  MOVLW  0A
1D7A:  MOVWF  xB3
1D7C:  CALL   0A06
1D80:  MOVFF  35,AF
1D84:  MOVLW  1F
1D86:  MOVWF  xB0
1D88:  CALL   0A4C
1D8C:  MOVFF  36,AF
1D90:  MOVLW  1F
1D92:  MOVWF  xB0
1D94:  CALL   0A4C
1D98:  MOVFF  37,AF
1D9C:  MOVLW  1F
1D9E:  MOVWF  xB0
1DA0:  CALL   0A4C
1DA4:  MOVFF  38,AF
1DA8:  MOVLW  1F
1DAA:  MOVWF  xB0
1DAC:  CALL   0A4C
1DB0:  MOVLW  20
1DB2:  MOVWF  xC0
1DB4:  CALL   082C
1DB8:  MOVLW  20
1DBA:  MOVWF  xC0
1DBC:  CALL   082C
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
1DC0:  MOVFF  1B,C1
1DC4:  MOVLW  04
1DC6:  MOVWF  xC2
1DC8:  CALL   07CA
....................          lcd_putc(t[2]); 
1DCC:  MOVFF  34,C0
1DD0:  CALL   082C
....................           
....................          if(unidad>11&&unidad<14){ 
1DD4:  MOVF   1B,W
1DD6:  SUBLW  0B
1DD8:  BC    1DF8
1DDA:  MOVF   1B,W
1DDC:  SUBLW  0D
1DDE:  BNC   1DF8
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
1DE0:  MOVLW  01
1DE2:  SUBWF  1B,W
1DE4:  MOVWF  xAF
1DE6:  MOVWF  xC1
1DE8:  MOVLW  04
1DEA:  MOVWF  xC2
1DEC:  CALL   07CA
....................             lcd_putc(t[1]); 
1DF0:  MOVFF  33,C0
1DF4:  CALL   082C
....................          } 
....................           
....................          Cambio=OFF; 
1DF8:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
1DFA:  BSF    F92.5
1DFC:  BTFSC  F80.5
1DFE:  BRA    1E32
....................          delay_ms(20); 
1E00:  MOVLW  14
1E02:  MOVWF  xC6
1E04:  CALL   06E2
....................          if(UP){ 
1E08:  BSF    F92.5
1E0A:  BTFSC  F80.5
1E0C:  BRA    1E30
....................             if(Flanco == 0) { 
1E0E:  BTFSC  16.3
1E10:  BRA    1E30
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
1E12:  MOVLW  0B
1E14:  SUBWF  1B,W
1E16:  CLRF   03
1E18:  ADDLW  35
1E1A:  MOVWF  FE9
1E1C:  MOVLW  00
1E1E:  ADDWFC 03,W
1E20:  MOVWF  FEA
1E22:  INCF   FEF,F
1E24:  BSF    16.3
1E26:  MOVLW  1E
1E28:  MOVWF  xC6
1E2A:  CALL   06E2
1E2E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1E30:  BRA    1E34
....................          Flanco = 0; 
1E32:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
1E34:  BSF    F96.0
1E36:  BTFSC  F84.0
1E38:  BRA    1E6C
....................          delay_ms(20); 
1E3A:  MOVLW  14
1E3C:  MOVWF  xC6
1E3E:  CALL   06E2
....................          if(DOWN){ 
1E42:  BSF    F96.0
1E44:  BTFSC  F84.0
1E46:  BRA    1E6A
....................             if(Flanco2 == 0) { 
1E48:  BTFSC  16.5
1E4A:  BRA    1E6A
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
1E4C:  MOVLW  0B
1E4E:  SUBWF  1B,W
1E50:  CLRF   03
1E52:  ADDLW  35
1E54:  MOVWF  FE9
1E56:  MOVLW  00
1E58:  ADDWFC 03,W
1E5A:  MOVWF  FEA
1E5C:  DECF   FEF,F
1E5E:  BSF    16.5
1E60:  MOVLW  1E
1E62:  MOVWF  xC6
1E64:  CALL   06E2
1E68:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1E6A:  BRA    1E6E
....................          Flanco2 = 0; 
1E6C:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
1E6E:  BSF    F96.1
1E70:  BTFSC  F84.1
1E72:  BRA    1E9E
....................          delay_ms(20); 
1E74:  MOVLW  14
1E76:  MOVWF  xC6
1E78:  CALL   06E2
....................          if(RIGHT){ 
1E7C:  BSF    F96.1
1E7E:  BTFSC  F84.1
1E80:  BRA    1E9C
....................             if(Flanco1 == 0) { 
1E82:  BTFSC  16.4
1E84:  BRA    1E9C
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
1E86:  BSF    16.4
1E88:  INCF   1B,F
1E8A:  MOVLW  1E
1E8C:  MOVWF  xC6
1E8E:  CALL   06E2
1E92:  MOVLW  0C
1E94:  MOVWF  xC0
1E96:  CALL   082C
1E9A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1E9C:  BRA    1EA0
....................          Flanco1 = 0; 
1E9E:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
1EA0:  BSF    F96.2
1EA2:  BTFSC  F84.2
1EA4:  BRA    1ED0
....................          delay_ms(150); 
1EA6:  MOVLW  96
1EA8:  MOVWF  xC6
1EAA:  CALL   06E2
....................          if(IZQU){ 
1EAE:  BSF    F96.2
1EB0:  BTFSC  F84.2
1EB2:  BRA    1ECE
....................             if(Flanco3 == 0){ 
1EB4:  BTFSC  16.6
1EB6:  BRA    1ECE
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
1EB8:  BSF    16.6
1EBA:  DECF   1B,F
1EBC:  MOVLW  1E
1EBE:  MOVWF  xC6
1EC0:  CALL   06E2
1EC4:  MOVLW  0C
1EC6:  MOVWF  xC0
1EC8:  CALL   082C
1ECC:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
1ECE:  BRA    1ED2
....................         Flanco3 = 0; 
1ED0:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
1ED2:  MOVLW  0B
1ED4:  SUBWF  1B,W
1ED6:  CLRF   03
1ED8:  ADDLW  35
1EDA:  MOVWF  FE9
1EDC:  MOVLW  00
1EDE:  ADDWFC 03,W
1EE0:  MOVWF  FEA
1EE2:  BTFSC  FEF.7
1EE4:  BRA    1EE8
1EE6:  BRA    1EFC
....................          clave[unidad-11]=9; 
1EE8:  MOVLW  0B
1EEA:  SUBWF  1B,W
1EEC:  CLRF   03
1EEE:  ADDLW  35
1EF0:  MOVWF  FE9
1EF2:  MOVLW  00
1EF4:  ADDWFC 03,W
1EF6:  MOVWF  FEA
1EF8:  MOVLW  09
1EFA:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
1EFC:  MOVLW  0B
1EFE:  SUBWF  1B,W
1F00:  CLRF   03
1F02:  ADDLW  35
1F04:  MOVWF  FE9
1F06:  MOVLW  00
1F08:  ADDWFC 03,W
1F0A:  MOVWF  FEA
1F0C:  BTFSC  FEF.7
1F0E:  BRA    1F28
1F10:  MOVF   FEF,W
1F12:  SUBLW  09
1F14:  BC    1F28
....................          clave[unidad-11]=0; 
1F16:  MOVLW  0B
1F18:  SUBWF  1B,W
1F1A:  CLRF   03
1F1C:  ADDLW  35
1F1E:  MOVWF  FE9
1F20:  MOVLW  00
1F22:  ADDWFC 03,W
1F24:  MOVWF  FEA
1F26:  CLRF   FEF
....................         
....................       if(unidad<11)             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
1F28:  MOVF   1B,W
1F2A:  SUBLW  0A
1F2C:  BNC   1F32
....................          unidad=11; 
1F2E:  MOVLW  0B
1F30:  MOVWF  1B
....................              
....................       if(unidad>14){             // Si a Terminado de ingresar la clave, verifica si es correcta o no. 
1F32:  MOVF   1B,W
1F34:  SUBLW  0E
1F36:  BTFSC  FD8.0
1F38:  BRA    2124
....................          if(clave[0]==3&&clave[1]==8&&clave[2]==9&&clave[3]==2){ // Si Ingresa clave para reset general del sistema. 
1F3A:  MOVF   35,W
1F3C:  SUBLW  03
1F3E:  BNZ   201A
1F40:  MOVF   36,W
1F42:  SUBLW  08
1F44:  BNZ   201A
1F46:  MOVF   37,W
1F48:  SUBLW  09
1F4A:  BNZ   201A
1F4C:  MOVF   38,W
1F4E:  SUBLW  02
1F50:  BNZ   201A
....................             write_eeprom(0,0);delay_ms(20);write_eeprom(1,0);delay_ms(20);// Reestablece a contraseña de Fabrica y reinicia Programa. 
1F52:  CLRF   FA9
1F54:  CLRF   FA8
1F56:  BCF    FA6.6
1F58:  BCF    FA6.7
1F5A:  BSF    FA6.2
1F5C:  MOVF   FF2,W
1F5E:  MOVWF  00
1F60:  BCF    FF2.7
1F62:  MOVLB  F
1F64:  MOVLW  55
1F66:  MOVWF  FA7
1F68:  MOVLW  AA
1F6A:  MOVWF  FA7
1F6C:  BSF    FA6.1
1F6E:  BTFSC  FA6.1
1F70:  BRA    1F6E
1F72:  BCF    FA6.2
1F74:  MOVF   00,W
1F76:  IORWF  FF2,F
1F78:  MOVLW  14
1F7A:  MOVLB  0
1F7C:  MOVWF  xC6
1F7E:  CALL   06E2
1F82:  MOVLW  01
1F84:  MOVWF  FA9
1F86:  CLRF   FA8
1F88:  BCF    FA6.6
1F8A:  BCF    FA6.7
1F8C:  BSF    FA6.2
1F8E:  MOVF   FF2,W
1F90:  MOVWF  00
1F92:  BCF    FF2.7
1F94:  MOVLB  F
1F96:  MOVLW  55
1F98:  MOVWF  FA7
1F9A:  MOVLW  AA
1F9C:  MOVWF  FA7
1F9E:  BSF    FA6.1
1FA0:  BTFSC  FA6.1
1FA2:  BRA    1FA0
1FA4:  BCF    FA6.2
1FA6:  MOVF   00,W
1FA8:  IORWF  FF2,F
1FAA:  MOVLW  14
1FAC:  MOVLB  0
1FAE:  MOVWF  xC6
1FB0:  CALL   06E2
....................              write_eeprom(2,0);delay_ms(20);write_eeprom(3,0);delay_ms(20); 
1FB4:  MOVLW  02
1FB6:  MOVWF  FA9
1FB8:  CLRF   FA8
1FBA:  BCF    FA6.6
1FBC:  BCF    FA6.7
1FBE:  BSF    FA6.2
1FC0:  MOVF   FF2,W
1FC2:  MOVWF  00
1FC4:  BCF    FF2.7
1FC6:  MOVLB  F
1FC8:  MOVLW  55
1FCA:  MOVWF  FA7
1FCC:  MOVLW  AA
1FCE:  MOVWF  FA7
1FD0:  BSF    FA6.1
1FD2:  BTFSC  FA6.1
1FD4:  BRA    1FD2
1FD6:  BCF    FA6.2
1FD8:  MOVF   00,W
1FDA:  IORWF  FF2,F
1FDC:  MOVLW  14
1FDE:  MOVLB  0
1FE0:  MOVWF  xC6
1FE2:  CALL   06E2
1FE6:  MOVLW  03
1FE8:  MOVWF  FA9
1FEA:  CLRF   FA8
1FEC:  BCF    FA6.6
1FEE:  BCF    FA6.7
1FF0:  BSF    FA6.2
1FF2:  MOVF   FF2,W
1FF4:  MOVWF  00
1FF6:  BCF    FF2.7
1FF8:  MOVLB  F
1FFA:  MOVLW  55
1FFC:  MOVWF  FA7
1FFE:  MOVLW  AA
2000:  MOVWF  FA7
2002:  BSF    FA6.1
2004:  BTFSC  FA6.1
2006:  BRA    2004
2008:  BCF    FA6.2
200A:  MOVF   00,W
200C:  IORWF  FF2,F
200E:  MOVLW  14
2010:  MOVLB  0
2012:  MOVWF  xC6
2014:  CALL   06E2
....................              reset_cpu(); 
2018:  RESET
....................          } 
....................              
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ // Si las claves coinciden pasa a Menu Principal. 
201A:  MOVF   39,W
201C:  SUBWF  35,W
201E:  BNZ   20B4
2020:  MOVF   3A,W
2022:  SUBWF  36,W
2024:  BNZ   20B4
2026:  MOVF   3B,W
2028:  SUBWF  37,W
202A:  BNZ   20B4
202C:  MOVF   3C,W
202E:  SUBWF  38,W
2030:  BNZ   20B4
....................             lcd_gotoxy(1,1); 
2032:  MOVLW  01
2034:  MOVWF  xC1
2036:  MOVWF  xC2
2038:  CALL   07CA
....................             printf(lcd_putc,"                   "); 
203C:  MOVLW  3C
203E:  MOVWF  FF6
2040:  MOVLW  02
2042:  MOVWF  FF7
2044:  CALL   088A
....................             lcd_gotoxy(1,2); 
2048:  MOVLW  01
204A:  MOVWF  xC1
204C:  MOVLW  02
204E:  MOVWF  xC2
2050:  CALL   07CA
....................             printf(lcd_putc,"     Contraseña    "); 
2054:  MOVLW  50
2056:  MOVWF  FF6
2058:  MOVLW  02
205A:  MOVWF  FF7
205C:  CALL   088A
....................             lcd_gotoxy(1,3); 
2060:  MOVLW  01
2062:  MOVWF  xC1
2064:  MOVLW  03
2066:  MOVWF  xC2
2068:  CALL   07CA
....................             printf(lcd_putc,"      Correcta     "); 
206C:  MOVLW  64
206E:  MOVWF  FF6
2070:  MOVLW  02
2072:  MOVWF  FF7
2074:  CALL   088A
....................             lcd_gotoxy(1,4); 
2078:  MOVLW  01
207A:  MOVWF  xC1
207C:  MOVLW  04
207E:  MOVWF  xC2
2080:  CALL   07CA
....................             printf(lcd_putc,"                   "); 
2084:  MOVLW  78
2086:  MOVWF  FF6
2088:  MOVLW  02
208A:  MOVWF  FF7
208C:  CALL   088A
....................             delay_ms(1000);Menu=50;unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2090:  MOVLW  04
2092:  MOVWF  xAF
2094:  MOVLW  FA
2096:  MOVWF  xC6
2098:  CALL   06E2
209C:  DECFSZ xAF,F
209E:  BRA    2094
20A0:  MOVLW  32
20A2:  MOVWF  18
20A4:  MOVLW  0B
20A6:  MOVWF  1B
20A8:  MOVLW  0C
20AA:  MOVWF  xC0
20AC:  CALL   082C
20B0:  BSF    17.5
....................          } 
....................          else{                                         // Si la clave no coincide vuelve a mostrar el menu para ingresar la clave. 
20B2:  BRA    2124
....................             lcd_gotoxy(1,1); 
20B4:  MOVLW  01
20B6:  MOVWF  xC1
20B8:  MOVWF  xC2
20BA:  CALL   07CA
....................             printf(lcd_putc,""); 
....................             lcd_gotoxy(1,2); 
20BE:  MOVLW  01
20C0:  MOVWF  xC1
20C2:  MOVLW  02
20C4:  MOVWF  xC2
20C6:  CALL   07CA
....................             printf(lcd_putc,"     Contraseña    "); 
20CA:  MOVLW  8C
20CC:  MOVWF  FF6
20CE:  MOVLW  02
20D0:  MOVWF  FF7
20D2:  CALL   088A
....................             lcd_gotoxy(1,3); 
20D6:  MOVLW  01
20D8:  MOVWF  xC1
20DA:  MOVLW  03
20DC:  MOVWF  xC2
20DE:  CALL   07CA
....................             printf(lcd_putc,"     Incorrecta    "); 
20E2:  MOVLW  A0
20E4:  MOVWF  FF6
20E6:  MOVLW  02
20E8:  MOVWF  FF7
20EA:  CALL   088A
....................             lcd_gotoxy(1,4); 
20EE:  MOVLW  01
20F0:  MOVWF  xC1
20F2:  MOVLW  04
20F4:  MOVWF  xC2
20F6:  CALL   07CA
....................             printf(lcd_putc,"                   "); 
20FA:  MOVLW  B4
20FC:  MOVWF  FF6
20FE:  MOVLW  02
2100:  MOVWF  FF7
2102:  CALL   088A
....................             delay_ms(1000);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
2106:  MOVLW  04
2108:  MOVWF  xAF
210A:  MOVLW  FA
210C:  MOVWF  xC6
210E:  CALL   06E2
2112:  DECFSZ xAF,F
2114:  BRA    210A
2116:  MOVLW  0B
2118:  MOVWF  1B
211A:  MOVLW  0C
211C:  MOVWF  xC0
211E:  CALL   082C
2122:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu0---------------------------------------------------------------    
....................  
.................... //------------Menu1------------------------------------------------------------------    
....................    if(Menu == 1){ // Menu de seleccion de lo que desea encender 
2124:  DECFSZ 18,W
2126:  BRA    235E
....................       EliminaRuido(); 
2128:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
212C:  MOVLW  01
212E:  MOVWF  xC1
2130:  MOVWF  xC2
2132:  CALL   07CA
....................          printf(lcd_putc,"---MENU PRINCIPAL---"); 
2136:  MOVLW  C8
2138:  MOVWF  FF6
213A:  MOVLW  02
213C:  MOVWF  FF7
213E:  CALL   088A
....................          mensajes(1+paso,2); 
2142:  MOVLW  01
2144:  ADDWF  31,W
2146:  MOVWF  xAF
2148:  MOVWF  xB0
214A:  MOVLW  02
214C:  MOVWF  xB1
214E:  CALL   0B14
....................          mensajes(2+paso,3); 
2152:  MOVLW  02
2154:  ADDWF  31,W
2156:  MOVWF  xAF
2158:  MOVWF  xB0
215A:  MOVLW  03
215C:  MOVWF  xB1
215E:  CALL   0B14
....................          mensajes(3+paso,4); 
2162:  MOVLW  03
2164:  ADDWF  31,W
2166:  MOVWF  xAF
2168:  MOVWF  xB0
216A:  MOVLW  04
216C:  MOVWF  xB1
216E:  CALL   0B14
....................  
....................         lcd_gotoxy(1,Flecha);// Para mostrar la flecha de seleccion 
2172:  MOVLW  01
2174:  MOVWF  xC1
2176:  MOVFF  1C,C2
217A:  CALL   07CA
....................         lcd_putc(t[0]); 
217E:  MOVFF  32,C0
2182:  CALL   082C
....................  
....................         if(Flecha==2) 
2186:  MOVF   1C,W
2188:  SUBLW  02
218A:  BNZ   21B4
....................           {lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
218C:  MOVLW  01
218E:  MOVWF  xC1
2190:  MOVLW  04
2192:  MOVWF  xC2
2194:  CALL   07CA
....................             lcd_putc(t[1]); 
2198:  MOVFF  33,C0
219C:  CALL   082C
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
21A0:  MOVLW  01
21A2:  MOVWF  xC1
21A4:  MOVLW  03
21A6:  MOVWF  xC2
21A8:  CALL   07CA
....................             lcd_putc(t[1]); 
21AC:  MOVFF  33,C0
21B0:  CALL   082C
....................           } 
....................          
....................         if(Flecha==4) 
21B4:  MOVF   1C,W
21B6:  SUBLW  04
21B8:  BNZ   21E2
....................           {lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
21BA:  MOVLW  01
21BC:  MOVWF  xC1
21BE:  MOVLW  02
21C0:  MOVWF  xC2
21C2:  CALL   07CA
....................             lcd_putc(t[1]); 
21C6:  MOVFF  33,C0
21CA:  CALL   082C
....................             lcd_gotoxy(1,3);// Para mostrar la flecha de seleccion 
21CE:  MOVLW  01
21D0:  MOVWF  xC1
21D2:  MOVLW  03
21D4:  MOVWF  xC2
21D6:  CALL   07CA
....................             lcd_putc(t[1]); 
21DA:  MOVFF  33,C0
21DE:  CALL   082C
....................           } 
....................          
....................         if(Flecha==3) 
21E2:  MOVF   1C,W
21E4:  SUBLW  03
21E6:  BNZ   2210
....................           { lcd_gotoxy(1,4);// Para mostrar la flecha de seleccion 
21E8:  MOVLW  01
21EA:  MOVWF  xC1
21EC:  MOVLW  04
21EE:  MOVWF  xC2
21F0:  CALL   07CA
....................             lcd_putc(t[1]); 
21F4:  MOVFF  33,C0
21F8:  CALL   082C
....................             lcd_gotoxy(1,2);// Para mostrar la flecha de seleccion 
21FC:  MOVLW  01
21FE:  MOVWF  xC1
2200:  MOVLW  02
2202:  MOVWF  xC2
2204:  CALL   07CA
....................             lcd_putc(t[1]); 
2208:  MOVFF  33,C0
220C:  CALL   082C
....................           } 
....................          Cambio=OFF; 
2210:  BCF    17.5
....................       //} 
....................          
....................       if(UP){//Si oprime hacia arriba 
2212:  BSF    F92.5
2214:  BTFSC  F80.5
2216:  BRA    2242
....................          delay_ms(20); 
2218:  MOVLW  14
221A:  MOVWF  xC6
221C:  CALL   06E2
....................          if(UP){ 
2220:  BSF    F92.5
2222:  BTFSC  F80.5
2224:  BRA    2240
....................             if(Flanco == 0){ 
2226:  BTFSC  16.3
2228:  BRA    2240
....................                Flecha2--;Flecha--;Flecha1=Flecha+1;Flanco = 1;delay_ms(30);Cambio=ON; 
222A:  DECF   1E,F
222C:  DECF   1C,F
222E:  MOVLW  01
2230:  ADDWF  1C,W
2232:  MOVWF  1D
2234:  BSF    16.3
2236:  MOVLW  1E
2238:  MOVWF  xC6
223A:  CALL   06E2
223E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2240:  BRA    2244
....................          Flanco = 0; 
2242:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2244:  BSF    F96.0
2246:  BTFSC  F84.0
2248:  BRA    2274
....................          delay_ms(20); 
224A:  MOVLW  14
224C:  MOVWF  xC6
224E:  CALL   06E2
....................          if(DOWN){ 
2252:  BSF    F96.0
2254:  BTFSC  F84.0
2256:  BRA    2272
....................             if(Flanco2 == 0){ 
2258:  BTFSC  16.5
225A:  BRA    2272
....................                Flecha2++;Flecha++;Flecha1=Flecha-1;Flanco2 = 1;delay_ms(30);Cambio=ON; 
225C:  INCF   1E,F
225E:  INCF   1C,F
2260:  MOVLW  01
2262:  SUBWF  1C,W
2264:  MOVWF  1D
2266:  BSF    16.5
2268:  MOVLW  1E
226A:  MOVWF  xC6
226C:  CALL   06E2
2270:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2272:  BRA    2276
....................          Flanco2 = 0; 
2274:  BCF    16.5
....................       } 
....................     
....................          
....................       if(Flecha2>nMenuH){ 
2276:  MOVF   1E,W
2278:  SUBWF  20,W
227A:  BC    228C
....................          paso++;nMenuH=Flecha2;nMenuL=nMenuH-2;Flecha=4; 
227C:  INCF   31,F
227E:  MOVFF  1E,20
2282:  MOVLW  02
2284:  SUBWF  20,W
2286:  MOVWF  1F
2288:  MOVLW  04
228A:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2<nMenuL){ 
228C:  MOVF   1F,W
228E:  SUBWF  1E,W
2290:  BC    22A2
....................          paso--;nMenuL=Flecha2;nMenuH=nMenuL+2;Flecha=2; 
2292:  DECF   31,F
2294:  MOVFF  1E,1F
2298:  MOVLW  02
229A:  ADDWF  1F,W
229C:  MOVWF  20
229E:  MOVLW  02
22A0:  MOVWF  1C
....................       } 
....................          
....................       if(Flecha2>n_opcionH){ 
22A2:  MOVF   1E,W
22A4:  SUBWF  19,W
22A6:  BC    22BA
....................          Flecha2=n_opcionL;Flecha=2;paso=0;nMenuL=Flecha2;nMenuH=nMenuL+2; 
22A8:  MOVFF  1A,1E
22AC:  MOVLW  02
22AE:  MOVWF  1C
22B0:  CLRF   31
22B2:  MOVFF  1E,1F
22B6:  ADDWF  1F,W
22B8:  MOVWF  20
....................       } 
....................          
....................       if(Flecha2<n_opcionL){ 
22BA:  MOVF   1A,W
22BC:  SUBWF  1E,W
22BE:  BC    22D6
....................          Flecha2=n_opcionH;Flecha=4;paso=n_opcionH-4;nMenuH=Flecha2;nMenuL=nMenuH-2; 
22C0:  MOVFF  19,1E
22C4:  MOVLW  04
22C6:  MOVWF  1C
22C8:  SUBWF  19,W
22CA:  MOVWF  31
22CC:  MOVFF  1E,20
22D0:  MOVLW  02
22D2:  SUBWF  20,W
22D4:  MOVWF  1F
....................       } 
....................          
....................       if(paso<0) 
22D6:  BTFSC  31.7
22D8:  BRA    22DC
22DA:  BRA    22DE
....................          paso=0; 
22DC:  CLRF   31
....................           
....................       if(RIGHT){// Si oprime derecha 
22DE:  BSF    F96.1
22E0:  BTFSC  F84.1
22E2:  BRA    232A
....................          delay_ms(20); 
22E4:  MOVLW  14
22E6:  MOVWF  xC6
22E8:  CALL   06E2
....................          if(RIGHT){ 
22EC:  BSF    F96.1
22EE:  BTFSC  F84.1
22F0:  BRA    2326
....................             if(Flanco1 == 0){ 
22F2:  BTFSC  16.4
22F4:  BRA    2326
....................                Flanco1 = 1;Menu=Flecha2;Flecha=3;delay_ms(300);printf(lcd_putc,"\f"); 
22F6:  BSF    16.4
22F8:  MOVFF  1E,18
22FC:  MOVLW  03
22FE:  MOVWF  1C
2300:  MOVLW  02
2302:  MOVWF  xAF
2304:  MOVLW  96
2306:  MOVWF  xC6
2308:  CALL   06E2
230C:  DECFSZ xAF,F
230E:  BRA    2304
2310:  MOVLW  0C
2312:  MOVWF  xC0
2314:  CALL   082C
....................                if(Menu==6){ 
2318:  MOVF   18,W
231A:  SUBLW  06
231C:  BNZ   2326
....................                   clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
231E:  CLRF   35
2320:  CLRF   36
2322:  CLRF   37
2324:  CLRF   38
....................                } 
....................             } 
....................          } 
....................          Cambio=ON; 
2326:  BSF    17.5
....................       }else{ 
2328:  BRA    232C
....................         Flanco1 = 0; 
232A:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){ 
232C:  BSF    F96.2
232E:  BTFSC  F84.2
2330:  BRA    235E
....................          delay_ms(20); 
2332:  MOVLW  14
2334:  MOVWF  xC6
2336:  CALL   06E2
....................          if(IZQU){ 
233A:  BSF    F96.2
233C:  BTFSC  F84.2
233E:  BRA    235E
....................             delay_ms(500);Menu=50;printf(lcd_putc,"\f");Cambio=ON; 
2340:  MOVLW  02
2342:  MOVWF  xAF
2344:  MOVLW  FA
2346:  MOVWF  xC6
2348:  CALL   06E2
234C:  DECFSZ xAF,F
234E:  BRA    2344
2350:  MOVLW  32
2352:  MOVWF  18
2354:  MOVLW  0C
2356:  MOVWF  xC0
2358:  CALL   082C
235C:  BSF    17.5
....................          } 
....................       } 
....................    } 
.................... //----------------Fin-Menu1---------------------------------------------------------------       
....................  
.................... //----------------Menu2--------------------------------------------------------------- 
....................    if(Menu == 2){ // Menu de tiempo de trabajo de Luz UV    
235E:  MOVF   18,W
2360:  SUBLW  02
2362:  BTFSS  FD8.2
2364:  BRA    25BA
....................    EliminaRuido(); 
2366:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
236A:  MOVLW  01
236C:  MOVWF  xC1
236E:  MOVWF  xC2
2370:  CALL   07CA
....................       printf(lcd_putc,"    Temporizador     "); 
2374:  MOVLW  DE
2376:  MOVWF  FF6
2378:  MOVLW  02
237A:  MOVWF  FF7
237C:  CALL   088A
....................       lcd_gotoxy(1,2); 
2380:  MOVLW  01
2382:  MOVWF  xC1
2384:  MOVLW  02
2386:  MOVWF  xC2
2388:  CALL   07CA
....................       printf(lcd_putc,"       Luz UV        "); 
238C:  MOVLW  F4
238E:  MOVWF  FF6
2390:  MOVLW  02
2392:  MOVWF  FF7
2394:  CALL   088A
....................       lcd_gotoxy(6,3); 
2398:  MOVLW  06
239A:  MOVWF  xC1
239C:  MOVLW  03
239E:  MOVWF  xC2
23A0:  CALL   07CA
....................       printf(lcd_putc,"%03u:%02u (M:S)  ",tempo_minutos_pro,tempo_segundos_pro);  
23A4:  MOVFF  29,AF
23A8:  MOVLW  03
23AA:  MOVWF  xB0
23AC:  CALL   0BB2
23B0:  MOVLW  3A
23B2:  MOVWF  xC0
23B4:  CALL   082C
23B8:  MOVFF  2A,AF
23BC:  MOVLW  01
23BE:  MOVWF  xB0
23C0:  CALL   0BB2
23C4:  MOVLW  13
23C6:  MOVWF  FF6
23C8:  MOVLW  03
23CA:  MOVWF  FF7
23CC:  MOVLW  08
23CE:  MOVWF  xB3
23D0:  CALL   0A06
....................        
....................       lcd_gotoxy(unidad2+6,4);// Para mostrar cursor. 
23D4:  MOVLW  06
23D6:  ADDWF  2E,W
23D8:  MOVWF  xAF
23DA:  MOVWF  xC1
23DC:  MOVLW  04
23DE:  MOVWF  xC2
23E0:  CALL   07CA
....................       lcd_putc(t[2]); 
23E4:  MOVFF  34,C0
23E8:  CALL   082C
....................        
....................       Cambio=OFF; 
23EC:  BCF    17.5
....................    //} 
....................     
....................    if(UP) 
23EE:  BSF    F92.5
23F0:  BTFSC  F80.5
23F2:  BRA    2440
....................    { 
....................       delay_ms(20); 
23F4:  MOVLW  14
23F6:  MOVWF  xC6
23F8:  CALL   06E2
....................       if(UP){ 
23FC:  BSF    F92.5
23FE:  BTFSC  F80.5
2400:  BRA    2440
....................          if(unidad2==1) 
2402:  DECFSZ 2E,W
2404:  BRA    2420
....................          { 
....................             if(tempo_minutos_pro<240) 
2406:  MOVF   29,W
2408:  SUBLW  EF
240A:  BNC   2420
....................             { 
....................                tempo_minutos_pro+=5;delay_ms(300); 
240C:  MOVLW  05
240E:  ADDWF  29,F
2410:  MOVLW  02
2412:  MOVWF  xAF
2414:  MOVLW  96
2416:  MOVWF  xC6
2418:  CALL   06E2
241C:  DECFSZ xAF,F
241E:  BRA    2414
....................             } 
....................          } 
....................           
....................          if(unidad2==4) 
2420:  MOVF   2E,W
2422:  SUBLW  04
2424:  BNZ   243E
....................          { 
....................             if(tempo_segundos_pro<59) 
2426:  MOVF   2A,W
2428:  SUBLW  3A
242A:  BNC   243E
....................             { 
....................                tempo_segundos_pro++;delay_ms(300); 
242C:  INCF   2A,F
242E:  MOVLW  02
2430:  MOVWF  xAF
2432:  MOVLW  96
2434:  MOVWF  xC6
2436:  CALL   06E2
243A:  DECFSZ xAF,F
243C:  BRA    2432
....................             } 
....................          }      
....................       Cambio=ON; 
243E:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN) 
2440:  BSF    F96.0
2442:  BTFSC  F84.0
2444:  BRA    248E
....................    { 
....................       delay_ms(20); 
2446:  MOVLW  14
2448:  MOVWF  xC6
244A:  CALL   06E2
....................       if(DOWN){ 
244E:  BSF    F96.0
2450:  BTFSC  F84.0
2452:  BRA    248E
....................          if(unidad2==1) 
2454:  DECFSZ 2E,W
2456:  BRA    2470
....................          { 
....................             if(tempo_minutos_pro>0) 
2458:  MOVF   29,F
245A:  BZ    2470
....................             { 
....................                tempo_minutos_pro-=5;delay_ms(300); 
245C:  MOVLW  05
245E:  SUBWF  29,F
2460:  MOVLW  02
2462:  MOVWF  xAF
2464:  MOVLW  96
2466:  MOVWF  xC6
2468:  CALL   06E2
246C:  DECFSZ xAF,F
246E:  BRA    2464
....................             }  
....................          } 
....................           
....................          if(unidad2==4) 
2470:  MOVF   2E,W
2472:  SUBLW  04
2474:  BNZ   248C
....................          { 
....................             if(tempo_segundos_pro>0) 
2476:  MOVF   2A,F
2478:  BZ    248C
....................             { 
....................                tempo_segundos_pro--;delay_ms(300); 
247A:  DECF   2A,F
247C:  MOVLW  02
247E:  MOVWF  xAF
2480:  MOVLW  96
2482:  MOVWF  xC6
2484:  CALL   06E2
2488:  DECFSZ xAF,F
248A:  BRA    2480
....................             }    
....................          } 
....................       Cambio=ON; 
248C:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(RIGHT) 
248E:  BSF    F96.1
2490:  BTFSC  F84.1
2492:  BRA    24D0
....................    { 
....................       delay_ms(20); 
2494:  MOVLW  14
2496:  MOVWF  xC6
2498:  CALL   06E2
....................       if(RIGHT){ 
249C:  BSF    F96.1
249E:  BTFSC  F84.1
24A0:  BRA    24D0
....................          if(unidad2==1) 
24A2:  DECFSZ 2E,W
24A4:  BRA    24AC
....................          { 
....................             unidad2=4; 
24A6:  MOVLW  04
24A8:  MOVWF  2E
....................          } 
....................          else 
24AA:  BRA    24B6
....................          { 
....................             if(unidad2==4) 
24AC:  MOVF   2E,W
24AE:  SUBLW  04
24B0:  BNZ   24B6
....................             { 
....................                unidad2=1; 
24B2:  MOVLW  01
24B4:  MOVWF  2E
....................             } 
....................          } 
....................       delay_ms(500); 
24B6:  MOVLW  02
24B8:  MOVWF  xAF
24BA:  MOVLW  FA
24BC:  MOVWF  xC6
24BE:  CALL   06E2
24C2:  DECFSZ xAF,F
24C4:  BRA    24BA
....................       printf(lcd_putc,"\f"); 
24C6:  MOVLW  0C
24C8:  MOVWF  xC0
24CA:  CALL   082C
....................       Cambio=ON; 
24CE:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(IZQU) 
24D0:  BSF    F96.2
24D2:  BTFSC  F84.2
24D4:  BRA    25BA
....................    { 
....................       if(IZQU){ 
24D6:  BSF    F96.2
24D8:  BTFSC  F84.2
24DA:  BRA    25BA
....................          delay_ms(200); 
24DC:  MOVLW  C8
24DE:  MOVWF  xC6
24E0:  CALL   06E2
....................          printf(lcd_putc,"\f"); 
24E4:  MOVLW  0C
24E6:  MOVWF  xC0
24E8:  CALL   082C
....................          lcd_gotoxy(1,2); 
24EC:  MOVLW  01
24EE:  MOVWF  xC1
24F0:  MOVLW  02
24F2:  MOVWF  xC2
24F4:  CALL   07CA
....................          printf(lcd_putc,"Tiempo Almacenado"); 
24F8:  MOVLW  1C
24FA:  MOVWF  FF6
24FC:  MOVLW  03
24FE:  MOVWF  FF7
2500:  CALL   088A
....................          lcd_gotoxy(1,3); 
2504:  MOVLW  01
2506:  MOVWF  xC1
2508:  MOVLW  03
250A:  MOVWF  xC2
250C:  CALL   07CA
....................          printf(lcd_putc,"  Correctamente  "); 
2510:  MOVLW  2E
2512:  MOVWF  FF6
2514:  MOVLW  03
2516:  MOVWF  FF7
2518:  CALL   088A
....................          write_eeprom(20,tempo_minutos_pro); 
251C:  MOVLW  14
251E:  MOVWF  FA9
2520:  MOVFF  29,FA8
2524:  BCF    FA6.6
2526:  BCF    FA6.7
2528:  BSF    FA6.2
252A:  MOVF   FF2,W
252C:  MOVWF  00
252E:  BCF    FF2.7
2530:  MOVLB  F
2532:  MOVLW  55
2534:  MOVWF  FA7
2536:  MOVLW  AA
2538:  MOVWF  FA7
253A:  BSF    FA6.1
253C:  BTFSC  FA6.1
253E:  BRA    253C
2540:  BCF    FA6.2
2542:  MOVF   00,W
2544:  IORWF  FF2,F
....................          delay_ms(20); 
2546:  MOVLW  14
2548:  MOVLB  0
254A:  MOVWF  xC6
254C:  CALL   06E2
....................          write_eeprom(30,tempo_segundos_pro); 
2550:  MOVLW  1E
2552:  MOVWF  FA9
2554:  MOVFF  2A,FA8
2558:  BCF    FA6.6
255A:  BCF    FA6.7
255C:  BSF    FA6.2
255E:  MOVF   FF2,W
2560:  MOVWF  00
2562:  BCF    FF2.7
2564:  MOVLB  F
2566:  MOVLW  55
2568:  MOVWF  FA7
256A:  MOVLW  AA
256C:  MOVWF  FA7
256E:  BSF    FA6.1
2570:  BTFSC  FA6.1
2572:  BRA    2570
2574:  BCF    FA6.2
2576:  MOVF   00,W
2578:  IORWF  FF2,F
....................          delay_ms(20); 
257A:  MOVLW  14
257C:  MOVLB  0
257E:  MOVWF  xC6
2580:  CALL   06E2
....................          tempo_minutos=tempo_minutos_pro;tempo_segundos=tempo_segundos_pro; 
2584:  MOVFF  29,27
2588:  MOVFF  2A,28
....................          delay_ms(700); 
258C:  MOVLW  04
258E:  MOVWF  xAF
2590:  MOVLW  AF
2592:  MOVWF  xC6
2594:  CALL   06E2
2598:  DECFSZ xAF,F
259A:  BRA    2590
....................          delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
259C:  MOVLW  1E
259E:  MOVWF  xC6
25A0:  CALL   06E2
25A4:  MOVLW  01
25A6:  MOVWF  18
25A8:  CLRF   31
25AA:  MOVLW  02
25AC:  MOVWF  1C
25AE:  MOVWF  1E
25B0:  MOVLW  0C
25B2:  MOVWF  xC0
25B4:  CALL   082C
....................          Cambio=ON; 
25B8:  BSF    17.5
....................       } 
....................    }   
....................   } 
.................... //----------------Fin-Menu2--------------------------------------------------------------- 
....................  
.................... //----------------Menu3--------------------------------------------------------------- 
....................    if(Menu == 3){ // Menu para Cambio de Contraseña 
25BA:  MOVF   18,W
25BC:  SUBLW  03
25BE:  BTFSS  FD8.2
25C0:  BRA    290C
....................       EliminaRuido(); 
25C2:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
25C6:  MOVLW  01
25C8:  MOVWF  xC1
25CA:  MOVWF  xC2
25CC:  CALL   07CA
....................          printf(lcd_putc,"     Ingrese        "); 
25D0:  MOVLW  40
25D2:  MOVWF  FF6
25D4:  MOVLW  03
25D6:  MOVWF  FF7
25D8:  CALL   088A
....................          lcd_gotoxy(1,2); 
25DC:  MOVLW  01
25DE:  MOVWF  xC1
25E0:  MOVLW  02
25E2:  MOVWF  xC2
25E4:  CALL   07CA
....................          printf(lcd_putc,"    Contraseña      "); 
25E8:  MOVLW  56
25EA:  MOVWF  FF6
25EC:  MOVLW  03
25EE:  MOVWF  FF7
25F0:  CALL   088A
....................          lcd_gotoxy(1,3); 
25F4:  MOVLW  01
25F6:  MOVWF  xC1
25F8:  MOVLW  03
25FA:  MOVWF  xC2
25FC:  CALL   07CA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2600:  MOVLW  6C
2602:  MOVWF  FF6
2604:  MOVLW  03
2606:  MOVWF  FF7
2608:  MOVLW  0A
260A:  MOVWF  xB3
260C:  CALL   0A06
2610:  MOVFF  35,AF
2614:  MOVLW  1F
2616:  MOVWF  xB0
2618:  CALL   0A4C
261C:  MOVFF  36,AF
2620:  MOVLW  1F
2622:  MOVWF  xB0
2624:  CALL   0A4C
2628:  MOVFF  37,AF
262C:  MOVLW  1F
262E:  MOVWF  xB0
2630:  CALL   0A4C
2634:  MOVFF  38,AF
2638:  MOVLW  1F
263A:  MOVWF  xB0
263C:  CALL   0A4C
2640:  MOVLW  20
2642:  MOVWF  xC0
2644:  CALL   082C
2648:  MOVLW  20
264A:  MOVWF  xC0
264C:  CALL   082C
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
2650:  MOVFF  1B,C1
2654:  MOVLW  04
2656:  MOVWF  xC2
2658:  CALL   07CA
....................          lcd_putc(t[2]); 
265C:  MOVFF  34,C0
2660:  CALL   082C
....................           
....................          if(unidad>11&&unidad<14){ 
2664:  MOVF   1B,W
2666:  SUBLW  0B
2668:  BC    2688
266A:  MOVF   1B,W
266C:  SUBLW  0D
266E:  BNC   2688
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
2670:  MOVLW  01
2672:  SUBWF  1B,W
2674:  MOVWF  xAF
2676:  MOVWF  xC1
2678:  MOVLW  04
267A:  MOVWF  xC2
267C:  CALL   07CA
....................             lcd_putc(t[1]); 
2680:  MOVFF  33,C0
2684:  CALL   082C
....................          } 
....................           
....................          Cambio=OFF; 
2688:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
268A:  BSF    F92.5
268C:  BTFSC  F80.5
268E:  BRA    26C2
....................          delay_ms(20); 
2690:  MOVLW  14
2692:  MOVWF  xC6
2694:  CALL   06E2
....................          if(UP){ 
2698:  BSF    F92.5
269A:  BTFSC  F80.5
269C:  BRA    26C0
....................             if(Flanco == 0) { 
269E:  BTFSC  16.3
26A0:  BRA    26C0
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
26A2:  MOVLW  0B
26A4:  SUBWF  1B,W
26A6:  CLRF   03
26A8:  ADDLW  35
26AA:  MOVWF  FE9
26AC:  MOVLW  00
26AE:  ADDWFC 03,W
26B0:  MOVWF  FEA
26B2:  INCF   FEF,F
26B4:  BSF    16.3
26B6:  MOVLW  1E
26B8:  MOVWF  xC6
26BA:  CALL   06E2
26BE:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
26C0:  BRA    26C4
....................          Flanco = 0; 
26C2:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
26C4:  BSF    F96.0
26C6:  BTFSC  F84.0
26C8:  BRA    26FC
....................          delay_ms(20); 
26CA:  MOVLW  14
26CC:  MOVWF  xC6
26CE:  CALL   06E2
....................          if(DOWN){ 
26D2:  BSF    F96.0
26D4:  BTFSC  F84.0
26D6:  BRA    26FA
....................             if(Flanco2 == 0) { 
26D8:  BTFSC  16.5
26DA:  BRA    26FA
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
26DC:  MOVLW  0B
26DE:  SUBWF  1B,W
26E0:  CLRF   03
26E2:  ADDLW  35
26E4:  MOVWF  FE9
26E6:  MOVLW  00
26E8:  ADDWFC 03,W
26EA:  MOVWF  FEA
26EC:  DECF   FEF,F
26EE:  BSF    16.5
26F0:  MOVLW  1E
26F2:  MOVWF  xC6
26F4:  CALL   06E2
26F8:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
26FA:  BRA    26FE
....................          Flanco2 = 0; 
26FC:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
26FE:  BSF    F96.1
2700:  BTFSC  F84.1
2702:  BRA    272E
....................          delay_ms(20); 
2704:  MOVLW  14
2706:  MOVWF  xC6
2708:  CALL   06E2
....................          if(RIGHT){ 
270C:  BSF    F96.1
270E:  BTFSC  F84.1
2710:  BRA    272C
....................             if(Flanco1 == 0) { 
2712:  BTFSC  16.4
2714:  BRA    272C
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2716:  BSF    16.4
2718:  INCF   1B,F
271A:  MOVLW  1E
271C:  MOVWF  xC6
271E:  CALL   06E2
2722:  MOVLW  0C
2724:  MOVWF  xC0
2726:  CALL   082C
272A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
272C:  BRA    2730
....................          Flanco1 = 0; 
272E:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2730:  BSF    F96.2
2732:  BTFSC  F84.2
2734:  BRA    2760
....................          delay_ms(150); 
2736:  MOVLW  96
2738:  MOVWF  xC6
273A:  CALL   06E2
....................          if(IZQU){ 
273E:  BSF    F96.2
2740:  BTFSC  F84.2
2742:  BRA    275E
....................             if(Flanco3 == 0){ 
2744:  BTFSC  16.6
2746:  BRA    275E
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2748:  BSF    16.6
274A:  DECF   1B,F
274C:  MOVLW  1E
274E:  MOVWF  xC6
2750:  CALL   06E2
2754:  MOVLW  0C
2756:  MOVWF  xC0
2758:  CALL   082C
275C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
275E:  BRA    2762
....................         Flanco3 = 0; 
2760:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2762:  MOVLW  0B
2764:  SUBWF  1B,W
2766:  CLRF   03
2768:  ADDLW  35
276A:  MOVWF  FE9
276C:  MOVLW  00
276E:  ADDWFC 03,W
2770:  MOVWF  FEA
2772:  BTFSC  FEF.7
2774:  BRA    2778
2776:  BRA    278C
....................          clave[unidad-11]=9; 
2778:  MOVLW  0B
277A:  SUBWF  1B,W
277C:  CLRF   03
277E:  ADDLW  35
2780:  MOVWF  FE9
2782:  MOVLW  00
2784:  ADDWFC 03,W
2786:  MOVWF  FEA
2788:  MOVLW  09
278A:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
278C:  MOVLW  0B
278E:  SUBWF  1B,W
2790:  CLRF   03
2792:  ADDLW  35
2794:  MOVWF  FE9
2796:  MOVLW  00
2798:  ADDWFC 03,W
279A:  MOVWF  FEA
279C:  BTFSC  FEF.7
279E:  BRA    27B8
27A0:  MOVF   FEF,W
27A2:  SUBLW  09
27A4:  BC    27B8
....................          clave[unidad-11]=0; 
27A6:  MOVLW  0B
27A8:  SUBWF  1B,W
27AA:  CLRF   03
27AC:  ADDLW  35
27AE:  MOVWF  FE9
27B0:  MOVLW  00
27B2:  ADDWFC 03,W
27B4:  MOVWF  FEA
27B6:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
27B8:  MOVF   1B,W
27BA:  SUBLW  0A
27BC:  BNC   27DE
....................          unidad=11; 
27BE:  MOVLW  0B
27C0:  MOVWF  1B
....................          Menu=1; 
27C2:  MOVLW  01
27C4:  MOVWF  18
....................          paso=0; 
27C6:  CLRF   31
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
27C8:  CLRF   35
27CA:  CLRF   36
27CC:  CLRF   37
27CE:  CLRF   38
27D0:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
27D2:  MOVLW  0B
27D4:  MOVWF  1B
27D6:  MOVLW  0C
27D8:  MOVWF  xC0
27DA:  CALL   082C
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la contraseña muestra si es correcta o no, dependiendo si ingreso la clave correctamente. 
27DE:  MOVF   1B,W
27E0:  SUBLW  0E
27E2:  BTFSC  FD8.0
27E4:  BRA    290C
....................          if(clave[0]==contrasena[0]&&clave[1]==contrasena[1]&&clave[2]==contrasena[2]&&clave[3]==contrasena[3]){ 
27E6:  MOVF   39,W
27E8:  SUBWF  35,W
27EA:  BNZ   2888
27EC:  MOVF   3A,W
27EE:  SUBWF  36,W
27F0:  BNZ   2888
27F2:  MOVF   3B,W
27F4:  SUBWF  37,W
27F6:  BNZ   2888
27F8:  MOVF   3C,W
27FA:  SUBWF  38,W
27FC:  BNZ   2888
....................             lcd_gotoxy(1,1); 
27FE:  MOVLW  01
2800:  MOVWF  xC1
2802:  MOVWF  xC2
2804:  CALL   07CA
....................             printf(lcd_putc,"                    "); 
2808:  MOVLW  82
280A:  MOVWF  FF6
280C:  MOVLW  03
280E:  MOVWF  FF7
2810:  CALL   088A
....................             lcd_gotoxy(1,2); 
2814:  MOVLW  01
2816:  MOVWF  xC1
2818:  MOVLW  02
281A:  MOVWF  xC2
281C:  CALL   07CA
....................             printf(lcd_putc,"     Contraseña     "); 
2820:  MOVLW  98
2822:  MOVWF  FF6
2824:  MOVLW  03
2826:  MOVWF  FF7
2828:  CALL   088A
....................             lcd_gotoxy(1,3); 
282C:  MOVLW  01
282E:  MOVWF  xC1
2830:  MOVLW  03
2832:  MOVWF  xC2
2834:  CALL   07CA
....................             printf(lcd_putc,"      Correcta      "); 
2838:  MOVLW  AE
283A:  MOVWF  FF6
283C:  MOVLW  03
283E:  MOVWF  FF7
2840:  CALL   088A
....................             lcd_gotoxy(1,4); 
2844:  MOVLW  01
2846:  MOVWF  xC1
2848:  MOVLW  04
284A:  MOVWF  xC2
284C:  CALL   07CA
....................             printf(lcd_putc,"                    "); 
2850:  MOVLW  C4
2852:  MOVWF  FF6
2854:  MOVLW  03
2856:  MOVWF  FF7
2858:  CALL   088A
....................             delay_ms(500);Menu=61;unidad=11;printf(lcd_putc,"\f"); 
285C:  MOVLW  02
285E:  MOVWF  xAF
2860:  MOVLW  FA
2862:  MOVWF  xC6
2864:  CALL   06E2
2868:  DECFSZ xAF,F
286A:  BRA    2860
286C:  MOVLW  3D
286E:  MOVWF  18
2870:  MOVLW  0B
2872:  MOVWF  1B
2874:  MOVLW  0C
2876:  MOVWF  xC0
2878:  CALL   082C
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
287C:  CLRF   35
287E:  CLRF   36
2880:  CLRF   37
2882:  CLRF   38
2884:  BSF    17.5
....................          }else{ 
2886:  BRA    290C
....................             lcd_gotoxy(1,1); 
2888:  MOVLW  01
288A:  MOVWF  xC1
288C:  MOVWF  xC2
288E:  CALL   07CA
....................             printf(lcd_putc,"                    "); 
2892:  MOVLW  DA
2894:  MOVWF  FF6
2896:  MOVLW  03
2898:  MOVWF  FF7
289A:  CALL   088A
....................             lcd_gotoxy(1,2); 
289E:  MOVLW  01
28A0:  MOVWF  xC1
28A2:  MOVLW  02
28A4:  MOVWF  xC2
28A6:  CALL   07CA
....................             printf(lcd_putc,"     Contraseña     "); 
28AA:  MOVLW  F0
28AC:  MOVWF  FF6
28AE:  MOVLW  03
28B0:  MOVWF  FF7
28B2:  CALL   088A
....................             lcd_gotoxy(1,3); 
28B6:  MOVLW  01
28B8:  MOVWF  xC1
28BA:  MOVLW  03
28BC:  MOVWF  xC2
28BE:  CALL   07CA
....................             printf(lcd_putc,"     Incorrecta     "); 
28C2:  MOVLW  06
28C4:  MOVWF  FF6
28C6:  MOVLW  04
28C8:  MOVWF  FF7
28CA:  CALL   088A
....................             lcd_gotoxy(1,4); 
28CE:  MOVLW  01
28D0:  MOVWF  xC1
28D2:  MOVLW  04
28D4:  MOVWF  xC2
28D6:  CALL   07CA
....................             printf(lcd_putc,"                    "); 
28DA:  MOVLW  1C
28DC:  MOVWF  FF6
28DE:  MOVLW  04
28E0:  MOVWF  FF7
28E2:  CALL   088A
....................             delay_ms(500);unidad=11;printf(lcd_putc,"\f");Cambio=ON; 
28E6:  MOVLW  02
28E8:  MOVWF  xAF
28EA:  MOVLW  FA
28EC:  MOVWF  xC6
28EE:  CALL   06E2
28F2:  DECFSZ xAF,F
28F4:  BRA    28EA
28F6:  MOVLW  0B
28F8:  MOVWF  1B
28FA:  MOVLW  0C
28FC:  MOVWF  xC0
28FE:  CALL   082C
2902:  BSF    17.5
....................             clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0; 
2904:  CLRF   35
2906:  CLRF   36
2908:  CLRF   37
290A:  CLRF   38
....................          } 
....................       } 
....................    }       
.................... //----------------Fin-Menu3--------------------------------------------------------------- 
....................  
.................... //----------------Menu6.1--------------------------------------------------------------- 
....................    if(Menu == 61){ // Menu cuando ingresa correctamente la contraseña, permite que digite nueva contraseña. 
290C:  MOVF   18,W
290E:  SUBLW  3D
2910:  BTFSS  FD8.2
2912:  BRA    2C9C
....................       EliminaRuido(); 
2914:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2918:  MOVLW  01
291A:  MOVWF  xC1
291C:  MOVWF  xC2
291E:  CALL   07CA
....................          printf(lcd_putc,"     Ingrese        "); 
2922:  MOVLW  32
2924:  MOVWF  FF6
2926:  MOVLW  04
2928:  MOVWF  FF7
292A:  CALL   088A
....................          lcd_gotoxy(1,2); 
292E:  MOVLW  01
2930:  MOVWF  xC1
2932:  MOVLW  02
2934:  MOVWF  xC2
2936:  CALL   07CA
....................          printf(lcd_putc,"    Contraseña      "); 
293A:  MOVLW  48
293C:  MOVWF  FF6
293E:  MOVLW  04
2940:  MOVWF  FF7
2942:  CALL   088A
....................          lcd_gotoxy(1,3); 
2946:  MOVLW  01
2948:  MOVWF  xC1
294A:  MOVLW  03
294C:  MOVWF  xC2
294E:  CALL   07CA
....................          printf(lcd_putc,"    CLAVE=%i%i%i%i  ",clave[0],clave[1],clave[2],clave[3]); 
2952:  MOVLW  5E
2954:  MOVWF  FF6
2956:  MOVLW  04
2958:  MOVWF  FF7
295A:  MOVLW  0A
295C:  MOVWF  xB3
295E:  CALL   0A06
2962:  MOVFF  35,AF
2966:  MOVLW  1F
2968:  MOVWF  xB0
296A:  CALL   0A4C
296E:  MOVFF  36,AF
2972:  MOVLW  1F
2974:  MOVWF  xB0
2976:  CALL   0A4C
297A:  MOVFF  37,AF
297E:  MOVLW  1F
2980:  MOVWF  xB0
2982:  CALL   0A4C
2986:  MOVFF  38,AF
298A:  MOVLW  1F
298C:  MOVWF  xB0
298E:  CALL   0A4C
2992:  MOVLW  20
2994:  MOVWF  xC0
2996:  CALL   082C
299A:  MOVLW  20
299C:  MOVWF  xC0
299E:  CALL   082C
....................          lcd_gotoxy(unidad,4);// Para mostrar cursor. 
29A2:  MOVFF  1B,C1
29A6:  MOVLW  04
29A8:  MOVWF  xC2
29AA:  CALL   07CA
....................          lcd_putc(t[2]); 
29AE:  MOVFF  34,C0
29B2:  CALL   082C
....................           
....................          if(unidad>11&&unidad<14){ 
29B6:  MOVF   1B,W
29B8:  SUBLW  0B
29BA:  BC    29DA
29BC:  MOVF   1B,W
29BE:  SUBLW  0D
29C0:  BNC   29DA
....................             lcd_gotoxy(unidad-1,4);// Para mostrar cursor. 
29C2:  MOVLW  01
29C4:  SUBWF  1B,W
29C6:  MOVWF  xAF
29C8:  MOVWF  xC1
29CA:  MOVLW  04
29CC:  MOVWF  xC2
29CE:  CALL   07CA
....................             lcd_putc(t[1]); 
29D2:  MOVFF  33,C0
29D6:  CALL   082C
....................          } 
....................           
....................          Cambio=OFF; 
29DA:  BCF    17.5
....................       //} 
....................        
....................       if(UP){//Si oprime hacia arriba 
29DC:  BSF    F92.5
29DE:  BTFSC  F80.5
29E0:  BRA    2A14
....................          delay_ms(20); 
29E2:  MOVLW  14
29E4:  MOVWF  xC6
29E6:  CALL   06E2
....................          if(UP){ 
29EA:  BSF    F92.5
29EC:  BTFSC  F80.5
29EE:  BRA    2A12
....................             if(Flanco == 0) { 
29F0:  BTFSC  16.3
29F2:  BRA    2A12
....................                clave[unidad-11]++;Flanco = 1;delay_ms(30);Cambio=ON; 
29F4:  MOVLW  0B
29F6:  SUBWF  1B,W
29F8:  CLRF   03
29FA:  ADDLW  35
29FC:  MOVWF  FE9
29FE:  MOVLW  00
2A00:  ADDWFC 03,W
2A02:  MOVWF  FEA
2A04:  INCF   FEF,F
2A06:  BSF    16.3
2A08:  MOVLW  1E
2A0A:  MOVWF  xC6
2A0C:  CALL   06E2
2A10:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2A12:  BRA    2A16
....................          Flanco = 0; 
2A14:  BCF    16.3
....................       } 
....................              
....................       if(DOWN){//Si oprime hacia abajo 
2A16:  BSF    F96.0
2A18:  BTFSC  F84.0
2A1A:  BRA    2A4E
....................          delay_ms(20); 
2A1C:  MOVLW  14
2A1E:  MOVWF  xC6
2A20:  CALL   06E2
....................          if(DOWN){ 
2A24:  BSF    F96.0
2A26:  BTFSC  F84.0
2A28:  BRA    2A4C
....................             if(Flanco2 == 0) { 
2A2A:  BTFSC  16.5
2A2C:  BRA    2A4C
....................                clave[unidad-11]--;Flanco2 = 1;delay_ms(30);Cambio=ON; 
2A2E:  MOVLW  0B
2A30:  SUBWF  1B,W
2A32:  CLRF   03
2A34:  ADDLW  35
2A36:  MOVWF  FE9
2A38:  MOVLW  00
2A3A:  ADDWFC 03,W
2A3C:  MOVWF  FEA
2A3E:  DECF   FEF,F
2A40:  BSF    16.5
2A42:  MOVLW  1E
2A44:  MOVWF  xC6
2A46:  CALL   06E2
2A4A:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2A4C:  BRA    2A50
....................          Flanco2 = 0; 
2A4E:  BCF    16.5
....................       } 
....................     
....................       if(RIGHT){// Si Oprime Derecha 
2A50:  BSF    F96.1
2A52:  BTFSC  F84.1
2A54:  BRA    2A78
....................          if(RIGHT){ 
2A56:  BSF    F96.1
2A58:  BTFSC  F84.1
2A5A:  BRA    2A76
....................             if(Flanco1 == 0) { 
2A5C:  BTFSC  16.4
2A5E:  BRA    2A76
....................                Flanco1 = 1;unidad++;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2A60:  BSF    16.4
2A62:  INCF   1B,F
2A64:  MOVLW  1E
2A66:  MOVWF  xC6
2A68:  CALL   06E2
2A6C:  MOVLW  0C
2A6E:  MOVWF  xC0
2A70:  CALL   082C
2A74:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2A76:  BRA    2A7A
....................          Flanco1 = 0; 
2A78:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si Oprime izquierda 
2A7A:  BSF    F96.2
2A7C:  BTFSC  F84.2
2A7E:  BRA    2AAA
....................          delay_ms(150); 
2A80:  MOVLW  96
2A82:  MOVWF  xC6
2A84:  CALL   06E2
....................          if(IZQU){ 
2A88:  BSF    F96.2
2A8A:  BTFSC  F84.2
2A8C:  BRA    2AA8
....................             if(Flanco3 == 0){ 
2A8E:  BTFSC  16.6
2A90:  BRA    2AA8
....................                Flanco3 = 1;unidad--;delay_ms(30);printf(lcd_putc,"\f");Cambio=ON; 
2A92:  BSF    16.6
2A94:  DECF   1B,F
2A96:  MOVLW  1E
2A98:  MOVWF  xC6
2A9A:  CALL   06E2
2A9E:  MOVLW  0C
2AA0:  MOVWF  xC0
2AA2:  CALL   082C
2AA6:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2AA8:  BRA    2AAC
....................         Flanco3 = 0; 
2AAA:  BCF    16.6
....................       } 
....................              
....................       if(clave[unidad-11]<0)     // Si la unidad donde se encuentra ubicado el cursor es menor que 0 pasa a 9. 
2AAC:  MOVLW  0B
2AAE:  SUBWF  1B,W
2AB0:  CLRF   03
2AB2:  ADDLW  35
2AB4:  MOVWF  FE9
2AB6:  MOVLW  00
2AB8:  ADDWFC 03,W
2ABA:  MOVWF  FEA
2ABC:  BTFSC  FEF.7
2ABE:  BRA    2AC2
2AC0:  BRA    2AD6
....................          clave[unidad-11]=9; 
2AC2:  MOVLW  0B
2AC4:  SUBWF  1B,W
2AC6:  CLRF   03
2AC8:  ADDLW  35
2ACA:  MOVWF  FE9
2ACC:  MOVLW  00
2ACE:  ADDWFC 03,W
2AD0:  MOVWF  FEA
2AD2:  MOVLW  09
2AD4:  MOVWF  FEF
....................           
....................       if(clave[unidad-11]>9)     // Si la unidad donde se encuentra ubicado el cursor es mayor que 9 pasa a 0. 
2AD6:  MOVLW  0B
2AD8:  SUBWF  1B,W
2ADA:  CLRF   03
2ADC:  ADDLW  35
2ADE:  MOVWF  FE9
2AE0:  MOVLW  00
2AE2:  ADDWFC 03,W
2AE4:  MOVWF  FEA
2AE6:  BTFSC  FEF.7
2AE8:  BRA    2B02
2AEA:  MOVF   FEF,W
2AEC:  SUBLW  09
2AEE:  BC    2B02
....................          clave[unidad-11]=0; 
2AF0:  MOVLW  0B
2AF2:  SUBWF  1B,W
2AF4:  CLRF   03
2AF6:  ADDLW  35
2AF8:  MOVWF  FE9
2AFA:  MOVLW  00
2AFC:  ADDWFC 03,W
2AFE:  MOVWF  FEA
2B00:  CLRF   FEF
....................         
....................       if(unidad<11){             // Si trata de correr mas a la izquierda de la primera unidad, deja el cursor en esa posicion. 
2B02:  MOVF   1B,W
2B04:  SUBLW  0A
2B06:  BNC   2B26
....................          unidad=11; 
2B08:  MOVLW  0B
2B0A:  MOVWF  1B
....................          Menu=1; 
2B0C:  MOVLW  01
2B0E:  MOVWF  18
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2B10:  CLRF   35
2B12:  CLRF   36
2B14:  CLRF   37
2B16:  CLRF   38
2B18:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f"); 
2B1A:  MOVLW  0B
2B1C:  MOVWF  1B
2B1E:  MOVLW  0C
2B20:  MOVWF  xC0
2B22:  CALL   082C
....................       } 
....................         
....................       if(unidad>14){// Si ya ingreso la nueva contraseña.      
2B26:  MOVF   1B,W
2B28:  SUBLW  0E
2B2A:  BTFSC  FD8.0
2B2C:  BRA    2C9C
....................          lcd_gotoxy(1,1); 
2B2E:  MOVLW  01
2B30:  MOVWF  xC1
2B32:  MOVWF  xC2
2B34:  CALL   07CA
....................          printf(lcd_putc,"                    "); 
2B38:  MOVLW  74
2B3A:  MOVWF  FF6
2B3C:  MOVLW  04
2B3E:  MOVWF  FF7
2B40:  CALL   088A
....................          lcd_gotoxy(1,2); 
2B44:  MOVLW  01
2B46:  MOVWF  xC1
2B48:  MOVLW  02
2B4A:  MOVWF  xC2
2B4C:  CALL   07CA
....................          printf(lcd_putc,"     Contraseña     "); 
2B50:  MOVLW  8A
2B52:  MOVWF  FF6
2B54:  MOVLW  04
2B56:  MOVWF  FF7
2B58:  CALL   088A
....................          lcd_gotoxy(1,3); 
2B5C:  MOVLW  01
2B5E:  MOVWF  xC1
2B60:  MOVLW  03
2B62:  MOVWF  xC2
2B64:  CALL   07CA
....................          printf(lcd_putc,"     Almacenada     "); 
2B68:  MOVLW  A0
2B6A:  MOVWF  FF6
2B6C:  MOVLW  04
2B6E:  MOVWF  FF7
2B70:  CALL   088A
....................          lcd_gotoxy(1,4); 
2B74:  MOVLW  01
2B76:  MOVWF  xC1
2B78:  MOVLW  04
2B7A:  MOVWF  xC2
2B7C:  CALL   07CA
....................          printf(lcd_putc,"                    "); 
2B80:  MOVLW  B6
2B82:  MOVWF  FF6
2B84:  MOVLW  04
2B86:  MOVWF  FF7
2B88:  CALL   088A
....................          write_eeprom(0,clave[0]);delay_ms(20);write_eeprom(1,clave[1]);delay_ms(20); 
2B8C:  CLRF   FA9
2B8E:  MOVFF  35,FA8
2B92:  BCF    FA6.6
2B94:  BCF    FA6.7
2B96:  BSF    FA6.2
2B98:  MOVF   FF2,W
2B9A:  MOVWF  00
2B9C:  BCF    FF2.7
2B9E:  MOVLB  F
2BA0:  MOVLW  55
2BA2:  MOVWF  FA7
2BA4:  MOVLW  AA
2BA6:  MOVWF  FA7
2BA8:  BSF    FA6.1
2BAA:  BTFSC  FA6.1
2BAC:  BRA    2BAA
2BAE:  BCF    FA6.2
2BB0:  MOVF   00,W
2BB2:  IORWF  FF2,F
2BB4:  MOVLW  14
2BB6:  MOVLB  0
2BB8:  MOVWF  xC6
2BBA:  CALL   06E2
2BBE:  MOVLW  01
2BC0:  MOVWF  FA9
2BC2:  MOVFF  36,FA8
2BC6:  BCF    FA6.6
2BC8:  BCF    FA6.7
2BCA:  BSF    FA6.2
2BCC:  MOVF   FF2,W
2BCE:  MOVWF  00
2BD0:  BCF    FF2.7
2BD2:  MOVLB  F
2BD4:  MOVLW  55
2BD6:  MOVWF  FA7
2BD8:  MOVLW  AA
2BDA:  MOVWF  FA7
2BDC:  BSF    FA6.1
2BDE:  BTFSC  FA6.1
2BE0:  BRA    2BDE
2BE2:  BCF    FA6.2
2BE4:  MOVF   00,W
2BE6:  IORWF  FF2,F
2BE8:  MOVLW  14
2BEA:  MOVLB  0
2BEC:  MOVWF  xC6
2BEE:  CALL   06E2
....................          write_eeprom(2,clave[2]);delay_ms(20);write_eeprom(3,clave[3]);delay_ms(20); 
2BF2:  MOVLW  02
2BF4:  MOVWF  FA9
2BF6:  MOVFF  37,FA8
2BFA:  BCF    FA6.6
2BFC:  BCF    FA6.7
2BFE:  BSF    FA6.2
2C00:  MOVF   FF2,W
2C02:  MOVWF  00
2C04:  BCF    FF2.7
2C06:  MOVLB  F
2C08:  MOVLW  55
2C0A:  MOVWF  FA7
2C0C:  MOVLW  AA
2C0E:  MOVWF  FA7
2C10:  BSF    FA6.1
2C12:  BTFSC  FA6.1
2C14:  BRA    2C12
2C16:  BCF    FA6.2
2C18:  MOVF   00,W
2C1A:  IORWF  FF2,F
2C1C:  MOVLW  14
2C1E:  MOVLB  0
2C20:  MOVWF  xC6
2C22:  CALL   06E2
2C26:  MOVLW  03
2C28:  MOVWF  FA9
2C2A:  MOVFF  38,FA8
2C2E:  BCF    FA6.6
2C30:  BCF    FA6.7
2C32:  BSF    FA6.2
2C34:  MOVF   FF2,W
2C36:  MOVWF  00
2C38:  BCF    FF2.7
2C3A:  MOVLB  F
2C3C:  MOVLW  55
2C3E:  MOVWF  FA7
2C40:  MOVLW  AA
2C42:  MOVWF  FA7
2C44:  BSF    FA6.1
2C46:  BTFSC  FA6.1
2C48:  BRA    2C46
2C4A:  BCF    FA6.2
2C4C:  MOVF   00,W
2C4E:  IORWF  FF2,F
2C50:  MOVLW  14
2C52:  MOVLB  0
2C54:  MOVWF  xC6
2C56:  CALL   06E2
....................          delay_ms(500);Menu=1;paso=0;Flecha=2;Flecha2=2; 
2C5A:  MOVLW  02
2C5C:  MOVWF  xAF
2C5E:  MOVLW  FA
2C60:  MOVWF  xC6
2C62:  CALL   06E2
2C66:  DECFSZ xAF,F
2C68:  BRA    2C5E
2C6A:  MOVLW  01
2C6C:  MOVWF  18
2C6E:  CLRF   31
2C70:  MOVLW  02
2C72:  MOVWF  1C
2C74:  MOVWF  1E
....................          contrasena[0]=clave[0];contrasena[1]=clave[1];contrasena[2]=clave[2];contrasena[3]=clave[3]; 
2C76:  MOVFF  35,39
2C7A:  MOVFF  36,3A
2C7E:  MOVFF  37,3B
2C82:  MOVFF  38,3C
....................          clave[0]=0;clave[1]=0;clave[2]=0;clave[3]=0;Cambio=ON; 
2C86:  CLRF   35
2C88:  CLRF   36
2C8A:  CLRF   37
2C8C:  CLRF   38
2C8E:  BSF    17.5
....................          unidad=11;printf(lcd_putc,"\f");          
2C90:  MOVLW  0B
2C92:  MOVWF  1B
2C94:  MOVLW  0C
2C96:  MOVWF  xC0
2C98:  CALL   082C
....................       } 
....................    }       
.................... //----------------Fin-Menu6.1--------------------------------------------------------------- 
....................     
.................... //----------------Menu4--------------------------------------------------------------- 
....................    if(Menu == 4){ // Menu de tiempo de trabajo de Luz UV 
2C9C:  MOVF   18,W
2C9E:  SUBLW  04
2CA0:  BTFSS  FD8.2
2CA2:  BRA    2E84
....................    EliminaRuido(); 
2CA4:  CALL   0004
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,1); 
2CA8:  MOVLW  01
2CAA:  MOVWF  xC1
2CAC:  MOVWF  xC2
2CAE:  CALL   07CA
....................       printf(lcd_putc,"  Duracion Actual   "); 
2CB2:  MOVLW  CC
2CB4:  MOVWF  FF6
2CB6:  MOVLW  04
2CB8:  MOVWF  FF7
2CBA:  CALL   088A
....................       lcd_gotoxy(1,2); 
2CBE:  MOVLW  01
2CC0:  MOVWF  xC1
2CC2:  MOVLW  02
2CC4:  MOVWF  xC2
2CC6:  CALL   07CA
....................       printf(lcd_putc,"   Tiempo= %05Lu   ",horas); 
2CCA:  MOVLW  E2
2CCC:  MOVWF  FF6
2CCE:  MOVLW  04
2CD0:  MOVWF  FF7
2CD2:  MOVLW  0B
2CD4:  MOVWF  xB3
2CD6:  CALL   0A06
2CDA:  MOVLW  08
2CDC:  MOVWF  FE9
2CDE:  MOVFF  41,B0
2CE2:  MOVFF  40,AF
2CE6:  GOTO   0C18
2CEA:  MOVLW  20
2CEC:  MOVWF  xC0
2CEE:  CALL   082C
2CF2:  MOVLW  20
2CF4:  MOVWF  xC0
2CF6:  CALL   082C
2CFA:  MOVLW  20
2CFC:  MOVWF  xC0
2CFE:  CALL   082C
....................       lcd_gotoxy(1,4); 
2D02:  MOVLW  01
2D04:  MOVWF  xC1
2D06:  MOVLW  04
2D08:  MOVWF  xC2
2D0A:  CALL   07CA
....................       printf(lcd_putc," RESET= Oprima ^ y > "); 
2D0E:  MOVLW  F6
2D10:  MOVWF  FF6
2D12:  MOVLW  04
2D14:  MOVWF  FF7
2D16:  CALL   088A
....................        
....................       Cambio=OFF; 
2D1A:  BCF    17.5
....................    //} 
....................     
....................       if(UP && RIGHT){//Si oprime hacia arriba 
2D1C:  BSF    F92.5
2D1E:  BTFSC  F80.5
2D20:  BRA    2E40
2D22:  BSF    F96.1
2D24:  BTFSC  F84.1
2D26:  BRA    2E40
....................          delay_ms(20); 
2D28:  MOVLW  14
2D2A:  MOVWF  xC6
2D2C:  CALL   06E2
....................          if(UP && RIGHT){ 
2D30:  BSF    F92.5
2D32:  BTFSC  F80.5
2D34:  BRA    2E40
2D36:  BSF    F96.1
2D38:  BTFSC  F84.1
2D3A:  BRA    2E40
....................             delay_ms(200); 
2D3C:  MOVLW  C8
2D3E:  MOVWF  xC6
2D40:  CALL   06E2
....................             printf(lcd_putc,"\f"); 
2D44:  MOVLW  0C
2D46:  MOVWF  xC0
2D48:  CALL   082C
....................             lcd_gotoxy(1,2); 
2D4C:  MOVLW  01
2D4E:  MOVWF  xC1
2D50:  MOVLW  02
2D52:  MOVWF  xC2
2D54:  CALL   07CA
....................             printf(lcd_putc," Reset de tiempo "); 
2D58:  MOVLW  0C
2D5A:  MOVWF  FF6
2D5C:  MOVLW  05
2D5E:  MOVWF  FF7
2D60:  CALL   088A
....................             lcd_gotoxy(1,3); 
2D64:  MOVLW  01
2D66:  MOVWF  xC1
2D68:  MOVLW  03
2D6A:  MOVWF  xC2
2D6C:  CALL   07CA
....................             printf(lcd_putc,"     Exitoso     "); 
2D70:  MOVLW  1E
2D72:  MOVWF  FF6
2D74:  MOVLW  05
2D76:  MOVWF  FF7
2D78:  CALL   088A
....................             write_eeprom(50,0); 
2D7C:  MOVLW  32
2D7E:  MOVWF  FA9
2D80:  CLRF   FA8
2D82:  BCF    FA6.6
2D84:  BCF    FA6.7
2D86:  BSF    FA6.2
2D88:  MOVF   FF2,W
2D8A:  MOVWF  00
2D8C:  BCF    FF2.7
2D8E:  MOVLB  F
2D90:  MOVLW  55
2D92:  MOVWF  FA7
2D94:  MOVLW  AA
2D96:  MOVWF  FA7
2D98:  BSF    FA6.1
2D9A:  BTFSC  FA6.1
2D9C:  BRA    2D9A
2D9E:  BCF    FA6.2
2DA0:  MOVF   00,W
2DA2:  IORWF  FF2,F
....................             delay_ms(20); 
2DA4:  MOVLW  14
2DA6:  MOVLB  0
2DA8:  MOVWF  xC6
2DAA:  CALL   06E2
....................             write_eeprom(51,0); 
2DAE:  MOVLW  33
2DB0:  MOVWF  FA9
2DB2:  CLRF   FA8
2DB4:  BCF    FA6.6
2DB6:  BCF    FA6.7
2DB8:  BSF    FA6.2
2DBA:  MOVF   FF2,W
2DBC:  MOVWF  00
2DBE:  BCF    FF2.7
2DC0:  MOVLB  F
2DC2:  MOVLW  55
2DC4:  MOVWF  FA7
2DC6:  MOVLW  AA
2DC8:  MOVWF  FA7
2DCA:  BSF    FA6.1
2DCC:  BTFSC  FA6.1
2DCE:  BRA    2DCC
2DD0:  BCF    FA6.2
2DD2:  MOVF   00,W
2DD4:  IORWF  FF2,F
....................             delay_ms(20); 
2DD6:  MOVLW  14
2DD8:  MOVLB  0
2DDA:  MOVWF  xC6
2DDC:  CALL   06E2
....................             write_eeprom(52,0); 
2DE0:  MOVLW  34
2DE2:  MOVWF  FA9
2DE4:  CLRF   FA8
2DE6:  BCF    FA6.6
2DE8:  BCF    FA6.7
2DEA:  BSF    FA6.2
2DEC:  MOVF   FF2,W
2DEE:  MOVWF  00
2DF0:  BCF    FF2.7
2DF2:  MOVLB  F
2DF4:  MOVLW  55
2DF6:  MOVWF  FA7
2DF8:  MOVLW  AA
2DFA:  MOVWF  FA7
2DFC:  BSF    FA6.1
2DFE:  BTFSC  FA6.1
2E00:  BRA    2DFE
2E02:  BCF    FA6.2
2E04:  MOVF   00,W
2E06:  IORWF  FF2,F
....................             delay_ms(700); 
2E08:  MOVLW  04
2E0A:  MOVLB  0
2E0C:  MOVWF  xAF
2E0E:  MOVLW  AF
2E10:  MOVWF  xC6
2E12:  CALL   06E2
2E16:  DECFSZ xAF,F
2E18:  BRA    2E0E
....................             segundos=0;minutos=0;horas=0; 
2E1A:  CLRF   21
2E1C:  CLRF   22
2E1E:  CLRF   41
2E20:  CLRF   40
....................             delay_ms(30);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
2E22:  MOVLW  1E
2E24:  MOVWF  xC6
2E26:  CALL   06E2
2E2A:  MOVLW  01
2E2C:  MOVWF  18
2E2E:  CLRF   31
2E30:  MOVLW  02
2E32:  MOVWF  1C
2E34:  MOVWF  1E
2E36:  MOVLW  0C
2E38:  MOVWF  xC0
2E3A:  CALL   082C
....................             Cambio=ON; 
2E3E:  BSF    17.5
....................          } 
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
2E40:  BSF    F96.2
2E42:  BTFSC  F84.2
2E44:  BRA    2E82
....................          delay_ms(20); 
2E46:  MOVLW  14
2E48:  MOVWF  xC6
2E4A:  CALL   06E2
....................          if(IZQU){ 
2E4E:  BSF    F96.2
2E50:  BTFSC  F84.2
2E52:  BRA    2E80
....................             if(Flanco3 == 0){ 
2E54:  BTFSC  16.6
2E56:  BRA    2E80
....................                Flanco3 = 1;delay_ms(500);Menu=1; paso=0;Flecha=2;Flecha2=2;printf(lcd_putc,"\f");Cambio=ON; 
2E58:  BSF    16.6
2E5A:  MOVLW  02
2E5C:  MOVWF  xAF
2E5E:  MOVLW  FA
2E60:  MOVWF  xC6
2E62:  CALL   06E2
2E66:  DECFSZ xAF,F
2E68:  BRA    2E5E
2E6A:  MOVLW  01
2E6C:  MOVWF  18
2E6E:  CLRF   31
2E70:  MOVLW  02
2E72:  MOVWF  1C
2E74:  MOVWF  1E
2E76:  MOVLW  0C
2E78:  MOVWF  xC0
2E7A:  CALL   082C
2E7E:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
2E80:  BRA    2E84
....................          Flanco3 = 0; 
2E82:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu4--------------------------------------------------------------- 
....................  
.................... //----------------Menu5--------------------------------------------------------------- 
....................    if(Menu == 5){ // Menu de Punto Cero 
2E84:  MOVF   18,W
2E86:  SUBLW  05
2E88:  BTFSS  FD8.2
2E8A:  BRA    30E0
....................       EliminaRuido(); 
2E8C:  CALL   0004
....................       //if(Cambio){ 
....................          lcd_gotoxy(1,1); 
2E90:  MOVLW  01
2E92:  MOVWF  xC1
2E94:  MOVWF  xC2
2E96:  CALL   07CA
....................          printf(lcd_putc,"  Zero Point Config "); 
2E9A:  MOVLW  30
2E9C:  MOVWF  FF6
2E9E:  MOVLW  05
2EA0:  MOVWF  FF7
2EA2:  CALL   088A
....................          lcd_gotoxy(1,2); 
2EA6:  MOVLW  01
2EA8:  MOVWF  xC1
2EAA:  MOVLW  02
2EAC:  MOVWF  xC2
2EAE:  CALL   07CA
....................          printf(lcd_putc,"Presion= %3.2f inH2O ",(Leer_Sensor_Presion(5)*4.02)); 
2EB2:  MOVLW  05
2EB4:  MOVWF  xAF
2EB6:  CALL   10E2
2EBA:  MOVFF  00,AF
2EBE:  MOVFF  01,B0
2EC2:  MOVFF  02,B1
2EC6:  MOVFF  03,B2
2ECA:  MOVFF  03,C6
2ECE:  MOVFF  02,C5
2ED2:  MOVFF  01,C4
2ED6:  MOVFF  00,C3
2EDA:  MOVLW  D7
2EDC:  MOVWF  xCA
2EDE:  MOVLW  A3
2EE0:  MOVWF  xC9
2EE2:  CLRF   xC8
2EE4:  MOVLW  81
2EE6:  MOVWF  xC7
2EE8:  CALL   1278
2EEC:  MOVFF  00,AF
2EF0:  MOVFF  01,B0
2EF4:  MOVFF  02,B1
2EF8:  MOVFF  03,B2
2EFC:  MOVLW  46
2EFE:  MOVWF  FF6
2F00:  MOVLW  05
2F02:  MOVWF  FF7
2F04:  MOVLW  09
2F06:  MOVWF  xB3
2F08:  CALL   0A06
2F0C:  MOVLW  02
2F0E:  MOVWF  FE9
2F10:  MOVFF  B2,B6
2F14:  MOVFF  B1,B5
2F18:  MOVFF  B0,B4
2F1C:  MOVFF  AF,B3
2F20:  MOVWF  xB7
2F22:  CALL   1424
2F26:  MOVLW  54
2F28:  MOVWF  FF6
2F2A:  MOVLW  05
2F2C:  MOVWF  FF7
2F2E:  MOVLW  07
2F30:  MOVWF  xB3
2F32:  CALL   0A06
....................          lcd_gotoxy(1,3); 
2F36:  MOVLW  01
2F38:  MOVWF  xC1
2F3A:  MOVLW  03
2F3C:  MOVWF  xC2
2F3E:  CALL   07CA
....................          printf(lcd_putc,"    ADC=%2.0f",sensores(0)); 
2F42:  CLRF   xB4
2F44:  CALL   0CCC
2F48:  MOVFF  00,AF
2F4C:  MOVFF  01,B0
2F50:  MOVFF  02,B1
2F54:  MOVFF  03,B2
2F58:  MOVLW  5C
2F5A:  MOVWF  FF6
2F5C:  MOVLW  05
2F5E:  MOVWF  FF7
2F60:  MOVLW  08
2F62:  MOVWF  xB3
2F64:  CALL   0A06
2F68:  MOVLW  01
2F6A:  MOVWF  FE9
2F6C:  MOVFF  B2,B6
2F70:  MOVFF  B1,B5
2F74:  MOVFF  B0,B4
2F78:  MOVFF  AF,B3
2F7C:  CLRF   xB7
2F7E:  CALL   1424
....................          lcd_gotoxy(1,4); 
2F82:  MOVLW  01
2F84:  MOVWF  xC1
2F86:  MOVLW  04
2F88:  MOVWF  xC2
2F8A:  CALL   07CA
....................          printf(lcd_putc,"    ZF=%2.0f",G); 
2F8E:  MOVLW  6A
2F90:  MOVWF  FF6
2F92:  MOVLW  05
2F94:  MOVWF  FF7
2F96:  MOVLW  07
2F98:  MOVWF  xB3
2F9A:  CALL   0A06
2F9E:  MOVLW  01
2FA0:  MOVWF  FE9
2FA2:  MOVFF  A9,B6
2FA6:  MOVFF  A8,B5
2FAA:  MOVFF  A7,B4
2FAE:  MOVFF  A6,B3
2FB2:  CLRF   xB7
2FB4:  CALL   1424
....................           
....................          Cambio=OFF; 
2FB8:  BCF    17.5
....................       //} 
....................      
....................       if(RIGHT){// Si oprime derecha 
2FBA:  BSF    F96.1
2FBC:  BTFSC  F84.1
2FBE:  BRA    30A0
....................          delay_ms(20); 
2FC0:  MOVLW  14
2FC2:  MOVWF  xC6
2FC4:  CALL   06E2
....................          if(RIGHT){ 
2FC8:  BSF    F96.1
2FCA:  BTFSC  F84.1
2FCC:  BRA    309E
....................             if(Flanco1 == 0){ 
2FCE:  BTFSC  16.4
2FD0:  BRA    309E
....................                /*Flanco1 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(500);printf(lcd_putc,"\f"); 
2FD2:  MOVLW  01
2FD4:  MOVWF  18
2FD6:  CLRF   31
2FD8:  MOVLW  02
2FDA:  MOVWF  1C
2FDC:  MOVWF  1E
2FDE:  MOVLW  0B
2FE0:  MOVWF  1B
2FE2:  MOVLW  02
2FE4:  MOVWF  xAF
2FE6:  MOVLW  FA
2FE8:  MOVWF  xC6
2FEA:  CALL   06E2
2FEE:  DECFSZ xAF,F
2FF0:  BRA    2FE6
2FF2:  MOVLW  0C
2FF4:  MOVWF  xC0
2FF6:  CALL   082C
....................                G=sensores(0); 
2FFA:  CLRF   xB4
2FFC:  CALL   0CCC
3000:  MOVFF  03,A9
3004:  MOVFF  02,A8
3008:  MOVFF  01,A7
300C:  MOVFF  00,A6
....................                G16=(int16)G; 
3010:  MOVFF  A9,C6
3014:  MOVFF  A8,C5
3018:  MOVFF  A7,C4
301C:  MOVFF  A6,C3
3020:  CALL   15AA
3024:  MOVFF  02,43
3028:  MOVFF  01,42
....................                G_l=G16; G_h=(G16>>8); 
302C:  MOVFF  42,25
3030:  MOVFF  43,26
....................                 
....................                write_eeprom(60,G_l); 
3034:  MOVLW  3C
3036:  MOVWF  FA9
3038:  MOVFF  25,FA8
303C:  BCF    FA6.6
303E:  BCF    FA6.7
3040:  BSF    FA6.2
3042:  MOVF   FF2,W
3044:  MOVWF  00
3046:  BCF    FF2.7
3048:  MOVLB  F
304A:  MOVLW  55
304C:  MOVWF  FA7
304E:  MOVLW  AA
3050:  MOVWF  FA7
3052:  BSF    FA6.1
3054:  BTFSC  FA6.1
3056:  BRA    3054
3058:  BCF    FA6.2
305A:  MOVF   00,W
305C:  IORWF  FF2,F
....................                delay_ms(20); 
305E:  MOVLW  14
3060:  MOVLB  0
3062:  MOVWF  xC6
3064:  CALL   06E2
....................                write_eeprom(61,G_h);//Guardar valor de Setpoint en eeprom 
3068:  MOVLW  3D
306A:  MOVWF  FA9
306C:  MOVFF  26,FA8
3070:  BCF    FA6.6
3072:  BCF    FA6.7
3074:  BSF    FA6.2
3076:  MOVF   FF2,W
3078:  MOVWF  00
307A:  BCF    FF2.7
307C:  MOVLB  F
307E:  MOVLW  55
3080:  MOVWF  FA7
3082:  MOVLW  AA
3084:  MOVWF  FA7
3086:  BSF    FA6.1
3088:  BTFSC  FA6.1
308A:  BRA    3088
308C:  BCF    FA6.2
308E:  MOVF   00,W
3090:  IORWF  FF2,F
....................                delay_ms(20); 
3092:  MOVLW  14
3094:  MOVLB  0
3096:  MOVWF  xC6
3098:  CALL   06E2
....................                Cambio=ON; 
309C:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
309E:  BRA    30A2
....................          Flanco1 = 0; 
30A0:  BCF    16.4
....................       } 
....................              
....................       if(IZQU){// Si oprime Izquierda 
30A2:  BSF    F96.2
30A4:  BTFSC  F84.2
30A6:  BRA    30DE
....................          delay_ms(20); 
30A8:  MOVLW  14
30AA:  MOVWF  xC6
30AC:  CALL   06E2
....................          if(IZQU){ 
30B0:  BSF    F96.2
30B2:  BTFSC  F84.2
30B4:  BRA    30DC
....................             if(Flanco3 == 0){ 
30B6:  BTFSC  16.6
30B8:  BRA    30DC
....................                /*Flanco3 = 1;*/Menu=1;paso=0;Flecha=2;Flecha2=2;unidad=11;delay_ms(30);printf(lcd_putc,"\f"); 
30BA:  MOVLW  01
30BC:  MOVWF  18
30BE:  CLRF   31
30C0:  MOVLW  02
30C2:  MOVWF  1C
30C4:  MOVWF  1E
30C6:  MOVLW  0B
30C8:  MOVWF  1B
30CA:  MOVLW  1E
30CC:  MOVWF  xC6
30CE:  CALL   06E2
30D2:  MOVLW  0C
30D4:  MOVWF  xC0
30D6:  CALL   082C
....................                Cambio=ON; 
30DA:  BSF    17.5
....................             } 
....................          } 
....................       }else{ 
30DC:  BRA    30E0
....................          Flanco3 = 0; 
30DE:  BCF    16.6
....................       } 
....................    } 
.................... //----------------Fin-Menu5--------------------------------------------------------------- 
....................  
....................  
.................... //----------------Menu6--------------------------------------------------------------- 
....................    if(Menu == 6){ // Menu de seleccion de estado de Alarma 
30E0:  MOVF   18,W
30E2:  SUBLW  06
30E4:  BTFSS  FD8.2
30E6:  BRA    320E
....................    estadoalarma=!estadoalarma;Flanco1 = 1;Menu=1; paso=0; 
30E8:  BTG    17.4
30EA:  BSF    16.4
30EC:  MOVLW  01
30EE:  MOVWF  18
30F0:  CLRF   31
....................                        
....................             if(estadoalarma==1) 
30F2:  BTFSS  17.4
30F4:  BRA    3156
....................             {estadoalarma=1; 
30F6:  BSF    17.4
....................                lcd_gotoxy(1,1); 
30F8:  MOVLW  01
30FA:  MOVWF  xC1
30FC:  MOVWF  xC2
30FE:  CALL   07CA
....................                printf(lcd_putc,"                    "); 
3102:  MOVLW  78
3104:  MOVWF  FF6
3106:  MOVLW  05
3108:  MOVWF  FF7
310A:  CALL   088A
....................                lcd_gotoxy(1,2); 
310E:  MOVLW  01
3110:  MOVWF  xC1
3112:  MOVLW  02
3114:  MOVWF  xC2
3116:  CALL   07CA
....................                printf(lcd_putc,"        Activo      "); 
311A:  MOVLW  8E
311C:  MOVWF  FF6
311E:  MOVLW  05
3120:  MOVWF  FF7
3122:  CALL   088A
....................                lcd_gotoxy(1,3); 
3126:  MOVLW  01
3128:  MOVWF  xC1
312A:  MOVLW  03
312C:  MOVWF  xC2
312E:  CALL   07CA
....................                printf(lcd_putc,"        Alarma      "); 
3132:  MOVLW  A4
3134:  MOVWF  FF6
3136:  MOVLW  05
3138:  MOVWF  FF7
313A:  CALL   088A
....................                lcd_gotoxy(1,4); 
313E:  MOVLW  01
3140:  MOVWF  xC1
3142:  MOVLW  04
3144:  MOVWF  xC2
3146:  CALL   07CA
....................                printf(lcd_putc,"                    ");} 
314A:  MOVLW  BA
314C:  MOVWF  FF6
314E:  MOVLW  05
3150:  MOVWF  FF7
3152:  CALL   088A
....................                 
....................             if(estadoalarma==0) 
3156:  BTFSC  17.4
3158:  BRA    31BA
....................             {estadoalarma=0; 
315A:  BCF    17.4
....................                lcd_gotoxy(1,1); 
315C:  MOVLW  01
315E:  MOVWF  xC1
3160:  MOVWF  xC2
3162:  CALL   07CA
....................                printf(lcd_putc,"                    "); 
3166:  MOVLW  D0
3168:  MOVWF  FF6
316A:  MOVLW  05
316C:  MOVWF  FF7
316E:  CALL   088A
....................                lcd_gotoxy(1,2); 
3172:  MOVLW  01
3174:  MOVWF  xC1
3176:  MOVLW  02
3178:  MOVWF  xC2
317A:  CALL   07CA
....................                printf(lcd_putc,"      Desactivo     "); 
317E:  MOVLW  E6
3180:  MOVWF  FF6
3182:  MOVLW  05
3184:  MOVWF  FF7
3186:  CALL   088A
....................                lcd_gotoxy(1,3); 
318A:  MOVLW  01
318C:  MOVWF  xC1
318E:  MOVLW  03
3190:  MOVWF  xC2
3192:  CALL   07CA
....................                printf(lcd_putc,"       Alarma       "); 
3196:  MOVLW  FC
3198:  MOVWF  FF6
319A:  MOVLW  05
319C:  MOVWF  FF7
319E:  CALL   088A
....................                lcd_gotoxy(1,4); 
31A2:  MOVLW  01
31A4:  MOVWF  xC1
31A6:  MOVLW  04
31A8:  MOVWF  xC2
31AA:  CALL   07CA
....................                printf(lcd_putc,"                    ");} 
31AE:  MOVLW  12
31B0:  MOVWF  FF6
31B2:  MOVLW  06
31B4:  MOVWF  FF7
31B6:  CALL   088A
....................               
....................             write_eeprom(5,estadoalarma);delay_ms(1000);Flecha=2;Flecha2=2;printf(lcd_putc,"\f"); 
31BA:  MOVLW  00
31BC:  BTFSC  17.4
31BE:  MOVLW  01
31C0:  MOVWF  xAF
31C2:  MOVLW  05
31C4:  MOVWF  FA9
31C6:  MOVFF  AF,FA8
31CA:  BCF    FA6.6
31CC:  BCF    FA6.7
31CE:  BSF    FA6.2
31D0:  MOVF   FF2,W
31D2:  MOVWF  00
31D4:  BCF    FF2.7
31D6:  MOVLB  F
31D8:  MOVLW  55
31DA:  MOVWF  FA7
31DC:  MOVLW  AA
31DE:  MOVWF  FA7
31E0:  BSF    FA6.1
31E2:  BTFSC  FA6.1
31E4:  BRA    31E2
31E6:  BCF    FA6.2
31E8:  MOVF   00,W
31EA:  IORWF  FF2,F
31EC:  MOVLW  04
31EE:  MOVLB  0
31F0:  MOVWF  xAF
31F2:  MOVLW  FA
31F4:  MOVWF  xC6
31F6:  CALL   06E2
31FA:  DECFSZ xAF,F
31FC:  BRA    31F2
31FE:  MOVLW  02
3200:  MOVWF  1C
3202:  MOVWF  1E
3204:  MOVLW  0C
3206:  MOVWF  xC0
3208:  CALL   082C
....................             Cambio=ON; 
320C:  BSF    17.5
....................    }       
.................... //----------------Fin-Menu6--------------------------------------------------------------- 
....................  
.................... //----------------Menu100--------------------------------------------------------------- 
....................    if(Menu == 50){ // Menu de seleccion de Estado de Luz UV    
320E:  MOVF   18,W
3210:  SUBLW  32
3212:  BTFSS  FD8.2
3214:  BRA    3852
....................    if(Lectura==1) 
3216:  BTFSS  17.0
3218:  BRA    343C
....................    { 
....................       Lectura=0; 
321A:  BCF    17.0
....................       CaidaPresion=Leer_Sensor_Presion(5); 
321C:  MOVLW  05
321E:  MOVWF  xAF
3220:  CALL   10E2
3224:  MOVFF  03,A5
3228:  MOVFF  02,A4
322C:  MOVFF  01,A3
3230:  MOVFF  00,A2
....................       lcd_gotoxy(1,1); 
3234:  MOVLW  01
3236:  MOVWF  xC1
3238:  MOVWF  xC2
323A:  CALL   07CA
....................       printf(lcd_putc,"JPCR DP:%3.2f inH2O ",(CaidaPresion*4.02));       
323E:  MOVFF  A5,C6
3242:  MOVFF  A4,C5
3246:  MOVFF  A3,C4
324A:  MOVFF  A2,C3
324E:  MOVLW  D7
3250:  MOVWF  xCA
3252:  MOVLW  A3
3254:  MOVWF  xC9
3256:  CLRF   xC8
3258:  MOVLW  81
325A:  MOVWF  xC7
325C:  CALL   1278
3260:  MOVFF  00,AF
3264:  MOVFF  01,B0
3268:  MOVFF  02,B1
326C:  MOVFF  03,B2
3270:  MOVLW  28
3272:  MOVWF  FF6
3274:  MOVLW  06
3276:  MOVWF  FF7
3278:  MOVLW  08
327A:  MOVWF  xB3
327C:  CALL   0A06
3280:  MOVLW  02
3282:  MOVWF  FE9
3284:  MOVFF  B2,B6
3288:  MOVFF  B1,B5
328C:  MOVFF  B0,B4
3290:  MOVFF  AF,B3
3294:  MOVWF  xB7
3296:  CALL   1424
329A:  MOVLW  35
329C:  MOVWF  FF6
329E:  MOVLW  06
32A0:  MOVWF  FF7
32A2:  MOVLW  07
32A4:  MOVWF  xB3
32A6:  CALL   0A06
....................       Saturacion=(CaidaPresion/0.37)*11; 
32AA:  MOVFF  A5,C6
32AE:  MOVFF  A4,C5
32B2:  MOVFF  A3,C4
32B6:  MOVFF  A2,C3
32BA:  MOVLW  A4
32BC:  MOVWF  xCA
32BE:  MOVLW  70
32C0:  MOVWF  xC9
32C2:  MOVLW  3D
32C4:  MOVWF  xC8
32C6:  MOVLW  7D
32C8:  MOVWF  xC7
32CA:  CALL   0D1E
32CE:  MOVFF  00,AF
32D2:  MOVFF  01,B0
32D6:  MOVFF  02,B1
32DA:  MOVFF  03,B2
32DE:  MOVFF  03,C6
32E2:  MOVFF  02,C5
32E6:  MOVFF  01,C4
32EA:  MOVFF  00,C3
32EE:  CLRF   xCA
32F0:  CLRF   xC9
32F2:  MOVLW  30
32F4:  MOVWF  xC8
32F6:  MOVLW  82
32F8:  MOVWF  xC7
32FA:  CALL   1278
32FE:  MOVFF  03,A1
3302:  MOVFF  02,A0
3306:  MOVFF  01,9F
330A:  MOVFF  00,9E
....................        
....................       if(Saturacion>11) 
330E:  CLRF   xC6
3310:  CLRF   xC5
3312:  MOVLW  30
3314:  MOVWF  xC4
3316:  MOVLW  82
3318:  MOVWF  xC3
331A:  MOVFF  A1,CA
331E:  MOVFF  A0,C9
3322:  MOVFF  9F,C8
3326:  MOVFF  9E,C7
332A:  CALL   08E0
332E:  BNC   333C
....................       { 
....................          Saturacion=11; 
3330:  CLRF   xA1
3332:  CLRF   xA0
3334:  MOVLW  30
3336:  MOVWF  x9F
3338:  MOVLW  82
333A:  MOVWF  x9E
....................       } 
....................        
....................       for(i=0;i<floor(Saturacion);i++) 
333C:  CLRF   2D
333E:  MOVFF  A1,B2
3342:  MOVFF  A0,B1
3346:  MOVFF  9F,B0
334A:  MOVFF  9E,AF
334E:  CALL   191C
3352:  MOVFF  00,AF
3356:  MOVFF  01,B0
335A:  MOVFF  02,B1
335E:  MOVFF  03,B2
3362:  CLRF   xC8
3364:  MOVFF  2D,C7
3368:  CALL   08AA
336C:  MOVFF  03,C6
3370:  MOVFF  02,C5
3374:  MOVFF  01,C4
3378:  MOVFF  00,C3
337C:  MOVFF  B2,CA
3380:  MOVFF  B1,C9
3384:  MOVFF  B0,C8
3388:  MOVFF  AF,C7
338C:  CALL   08E0
3390:  BNC   33AE
....................       { 
....................          lcd_gotoxy(i+8,2); 
3392:  MOVLW  08
3394:  ADDWF  2D,W
3396:  MOVWF  xAF
3398:  MOVWF  xC1
339A:  MOVLW  02
339C:  MOVWF  xC2
339E:  CALL   07CA
....................          printf(lcd_putc,"Ñ"); 
33A2:  MOVLW  D1
33A4:  MOVWF  xC0
33A6:  CALL   082C
....................       } 
33AA:  INCF   2D,F
33AC:  BRA    333E
....................        
....................       for(i=floor(Saturacion);i<11;i++) 
33AE:  MOVFF  A1,B2
33B2:  MOVFF  A0,B1
33B6:  MOVFF  9F,B0
33BA:  MOVFF  9E,AF
33BE:  CALL   191C
33C2:  MOVFF  03,C6
33C6:  MOVFF  02,C5
33CA:  MOVFF  01,C4
33CE:  MOVFF  00,C3
33D2:  CALL   15AA
33D6:  MOVFF  01,2D
33DA:  MOVF   2D,W
33DC:  SUBLW  0A
33DE:  BNC   33FC
....................       { 
....................          lcd_gotoxy(i+8,2); 
33E0:  MOVLW  08
33E2:  ADDWF  2D,W
33E4:  MOVWF  xAF
33E6:  MOVWF  xC1
33E8:  MOVLW  02
33EA:  MOVWF  xC2
33EC:  CALL   07CA
....................          printf(lcd_putc," "); 
33F0:  MOVLW  20
33F2:  MOVWF  xC0
33F4:  CALL   082C
....................       } 
33F8:  INCF   2D,F
33FA:  BRA    33DA
....................        
....................       lcd_gotoxy(9,3); 
33FC:  MOVLW  09
33FE:  MOVWF  xC1
3400:  MOVLW  03
3402:  MOVWF  xC2
3404:  CALL   07CA
....................       printf(lcd_putc,"Tempo:%03u:%02u",tempo_minutos,tempo_segundos); 
3408:  MOVLW  3E
340A:  MOVWF  FF6
340C:  MOVLW  06
340E:  MOVWF  FF7
3410:  MOVLW  06
3412:  MOVWF  xB3
3414:  CALL   0A06
3418:  MOVFF  27,AF
341C:  MOVLW  03
341E:  MOVWF  xB0
3420:  CALL   0BB2
3424:  MOVLW  3A
3426:  MOVWF  xC0
3428:  CALL   082C
342C:  MOVFF  28,AF
3430:  MOVLW  01
3432:  MOVWF  xB0
3434:  CALL   0BB2
....................       EliminaRuido(); 
3438:  CALL   0004
....................    } 
....................      
....................    if(tiempo_cumplido==1) 
343C:  BTFSS  16.7
343E:  BRA    34D8
....................    { 
....................       if(estadoalarma==1) 
3440:  BTFSS  17.4
3442:  BRA    34CE
....................       { 
....................          printf(lcd_putc,"\f"); 
3444:  MOVLW  0C
3446:  MOVWF  xC0
3448:  CALL   082C
....................          lcd_gotoxy(1,2); 
344C:  MOVLW  01
344E:  MOVWF  xC1
3450:  MOVLW  02
3452:  MOVWF  xC2
3454:  CALL   07CA
....................          printf(lcd_putc,"  Temporizador  de  "); 
3458:  MOVLW  4E
345A:  MOVWF  FF6
345C:  MOVLW  06
345E:  MOVWF  FF7
3460:  CALL   088A
....................          lcd_gotoxy(1,3); 
3464:  MOVLW  01
3466:  MOVWF  xC1
3468:  MOVLW  03
346A:  MOVWF  xC2
346C:  CALL   07CA
....................          printf(lcd_putc," Luz UV  Finalizado "); 
3470:  MOVLW  64
3472:  MOVWF  FF6
3474:  MOVLW  06
3476:  MOVWF  FF7
3478:  CALL   088A
....................          lcd_gotoxy(1,4); 
347C:  MOVLW  01
347E:  MOVWF  xC1
3480:  MOVLW  04
3482:  MOVWF  xC2
3484:  CALL   07CA
....................          printf(lcd_putc,"                    "); 
3488:  MOVLW  7A
348A:  MOVWF  FF6
348C:  MOVLW  06
348E:  MOVWF  FF7
3490:  CALL   088A
....................          lcd_gotoxy(1,1); 
3494:  MOVLW  01
3496:  MOVWF  xC1
3498:  MOVWF  xC2
349A:  CALL   07CA
....................          printf(lcd_putc,"                    "); 
349E:  MOVLW  90
34A0:  MOVWF  FF6
34A2:  MOVLW  06
34A4:  MOVWF  FF7
34A6:  CALL   088A
....................          for(i=0;i<5;i++) 
34AA:  CLRF   2D
34AC:  MOVF   2D,W
34AE:  SUBLW  04
34B0:  BNC   34CE
....................          { 
....................             Buzzer_on; 
34B2:  BSF    F8C.0
34B4:  BCF    F95.0
....................             delay_ms(200); 
34B6:  MOVLW  C8
34B8:  MOVWF  xC6
34BA:  CALL   06E2
....................             Buzzer_off; 
34BE:  BCF    F8C.0
34C0:  BCF    F95.0
....................             delay_ms(200); 
34C2:  MOVLW  C8
34C4:  MOVWF  xC6
34C6:  CALL   06E2
....................          } 
34CA:  INCF   2D,F
34CC:  BRA    34AC
....................       } 
....................       tiempo_cumplido=0; 
34CE:  BCF    16.7
....................       printf(lcd_putc,"\f"); 
34D0:  MOVLW  0C
34D2:  MOVWF  xC0
34D4:  CALL   082C
....................    } 
....................     
....................    if(CaidaPresion>=0.37) 
34D8:  MOVLW  A4
34DA:  MOVWF  xC6
34DC:  MOVLW  70
34DE:  MOVWF  xC5
34E0:  MOVLW  3D
34E2:  MOVWF  xC4
34E4:  MOVLW  7D
34E6:  MOVWF  xC3
34E8:  MOVFF  A5,CA
34EC:  MOVFF  A4,C9
34F0:  MOVFF  A3,C8
34F4:  MOVFF  A2,C7
34F8:  CALL   08E0
34FC:  BC    3500
34FE:  BNZ   3506
....................    {  
....................       ActivaBuzzer=1; 
3500:  MOVLW  01
3502:  MOVWF  3D
....................    } 
....................    else 
3504:  BRA    350C
....................    { 
....................       ActivaBuzzer=0; 
3506:  CLRF   3D
....................       Buzzer_off; 
3508:  BCF    F8C.0
350A:  BCF    F95.0
....................    } 
....................        
....................    //if(Cambio){ 
....................       lcd_gotoxy(1,2); 
350C:  MOVLW  01
350E:  MOVWF  xC1
3510:  MOVLW  02
3512:  MOVWF  xC2
3514:  CALL   07CA
....................       printf(lcd_putc,"Filtro:"); 
3518:  MOVLW  A6
351A:  MOVWF  FF6
351C:  MOVLW  06
351E:  MOVWF  FF7
3520:  CALL   088A
....................        
....................       if(estadomv==1) 
3524:  BTFSS  16.2
3526:  BRA    3542
....................       { 
....................          lcd_gotoxy(1,4); 
3528:  MOVLW  01
352A:  MOVWF  xC1
352C:  MOVLW  04
352E:  MOVWF  xC2
3530:  CALL   07CA
....................          printf(lcd_putc,"Motor:ON ");       
3534:  MOVLW  AE
3536:  MOVWF  FF6
3538:  MOVLW  06
353A:  MOVWF  FF7
353C:  CALL   088A
....................       } 
....................       else 
3540:  BRA    355A
....................       { 
....................          lcd_gotoxy(1,4); 
3542:  MOVLW  01
3544:  MOVWF  xC1
3546:  MOVLW  04
3548:  MOVWF  xC2
354A:  CALL   07CA
....................          printf(lcd_putc,"Motor:OFF"); 
354E:  MOVLW  B8
3550:  MOVWF  FF6
3552:  MOVLW  06
3554:  MOVWF  FF7
3556:  CALL   088A
....................       } 
....................        
....................       if(estadouv==1) 
355A:  BTFSS  16.0
355C:  BRA    3578
....................       { 
....................          lcd_gotoxy(13,4); 
355E:  MOVLW  0D
3560:  MOVWF  xC1
3562:  MOVLW  04
3564:  MOVWF  xC2
3566:  CALL   07CA
....................          printf(lcd_putc,"UV:ON "); 
356A:  MOVLW  C2
356C:  MOVWF  FF6
356E:  MOVLW  06
3570:  MOVWF  FF7
3572:  CALL   088A
....................       } 
....................       else 
3576:  BRA    3590
....................       {          
....................          lcd_gotoxy(13,4); 
3578:  MOVLW  0D
357A:  MOVWF  xC1
357C:  MOVLW  04
357E:  MOVWF  xC2
3580:  CALL   07CA
....................          printf(lcd_putc,"UV:OFF"); 
3584:  MOVLW  CA
3586:  MOVWF  FF6
3588:  MOVLW  06
358A:  MOVWF  FF7
358C:  CALL   088A
....................       } 
....................        
....................       if(estadofl==1) 
3590:  BTFSS  16.1
3592:  BRA    35AE
....................       { 
....................          lcd_gotoxy(1,3); 
3594:  MOVLW  01
3596:  MOVWF  xC1
3598:  MOVLW  03
359A:  MOVWF  xC2
359C:  CALL   07CA
....................          printf(lcd_putc,"Luz:ON "); 
35A0:  MOVLW  D2
35A2:  MOVWF  FF6
35A4:  MOVLW  06
35A6:  MOVWF  FF7
35A8:  CALL   088A
....................       } 
....................       else 
35AC:  BRA    35C6
....................       { 
....................          lcd_gotoxy(1,3); 
35AE:  MOVLW  01
35B0:  MOVWF  xC1
35B2:  MOVLW  03
35B4:  MOVWF  xC2
35B6:  CALL   07CA
....................          printf(lcd_putc,"Luz:OFF"); 
35BA:  MOVLW  DA
35BC:  MOVWF  FF6
35BE:  MOVLW  06
35C0:  MOVWF  FF7
35C2:  CALL   088A
....................       }  
....................       Cambio=OFF; 
35C6:  BCF    17.5
....................    //} 
....................     
....................    if(estadomv==1){  
35C8:  BTFSS  16.2
35CA:  BRA    35EE
....................       velocidades(1); 
35CC:  MOVLW  01
35CE:  MOVWF  xAF
35D0:  CALL   1932
....................       if(flagmv==0){ 
35D4:  BTFSC  17.6
35D6:  BRA    35EC
....................          lcd_init();delay_ms(200);lcd_init();flagmv=1;Cambio=ON; 
35D8:  CALL   0774
35DC:  MOVLW  C8
35DE:  MOVWF  xC6
35E0:  CALL   06E2
35E4:  CALL   0774
35E8:  BSF    17.6
35EA:  BSF    17.5
....................       } 
....................    }else{ 
35EC:  BRA    360C
....................       velocidades(0);     
35EE:  CLRF   xAF
35F0:  CALL   1932
....................       if(flagmv==1){ 
35F4:  BTFSS  17.6
35F6:  BRA    360C
....................          lcd_init();delay_ms(200);lcd_init();flagmv=0;Cambio=ON; 
35F8:  CALL   0774
35FC:  MOVLW  C8
35FE:  MOVWF  xC6
3600:  CALL   06E2
3604:  CALL   0774
3608:  BCF    17.6
360A:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(estadouv==1) 
360C:  BTFSS  16.0
360E:  BRA    3642
....................    { 
....................       estadomv=0; 
3610:  BCF    16.2
....................       velocidades(0); 
3612:  CLRF   xAF
3614:  CALL   1932
....................       estadofl=0; 
3618:  BCF    16.1
....................       Luz_Blanca_off; 
361A:  BSF    F8C.2
361C:  BCF    F95.2
....................       Luz_UV_on; 
361E:  BCF    F8C.1
3620:  BCF    F95.1
....................       tiempo_cumplido=0; 
3622:  BCF    16.7
....................       if(flaguv==0) 
3624:  BTFSC  17.1
3626:  BRA    3640
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=1;guardaruv=1;Cambio=ON; 
3628:  CALL   0774
362C:  MOVLW  C8
362E:  MOVWF  xC6
3630:  CALL   06E2
3634:  CALL   0774
3638:  BSF    17.1
363A:  MOVLW  01
363C:  MOVWF  30
363E:  BSF    17.5
....................       } 
....................    } 
....................    else 
3640:  BRA    3664
....................    { 
....................       estadouv=0; 
3642:  BCF    16.0
....................       Luz_UV_off; 
3644:  BSF    F8C.1
3646:  BCF    F95.1
....................       if(flaguv==1) 
3648:  BTFSS  17.1
364A:  BRA    3664
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flaguv=0;guardaruv=1;Cambio=ON; 
364C:  CALL   0774
3650:  MOVLW  C8
3652:  MOVWF  xC6
3654:  CALL   06E2
3658:  CALL   0774
365C:  BCF    17.1
365E:  MOVLW  01
3660:  MOVWF  30
3662:  BSF    17.5
....................       } 
....................    } 
....................        
....................    if(estadofl==1) 
3664:  BTFSS  16.1
3666:  BRA    3686
....................    { 
....................       Luz_Blanca_on; 
3668:  BCF    F8C.2
366A:  BCF    F95.2
....................       if(flagfl==0) 
366C:  BTFSC  17.2
366E:  BRA    3684
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=1;Cambio=ON; 
3670:  CALL   0774
3674:  MOVLW  C8
3676:  MOVWF  xC6
3678:  CALL   06E2
367C:  CALL   0774
3680:  BSF    17.2
3682:  BSF    17.5
....................       } 
....................    } 
....................    else 
3684:  BRA    36A2
....................    { 
....................       Luz_Blanca_off; 
3686:  BSF    F8C.2
3688:  BCF    F95.2
....................       if(flagfl==1) 
368A:  BTFSS  17.2
368C:  BRA    36A2
....................       { 
....................          lcd_init();delay_ms(200);lcd_init();flagfl=0;Cambio=ON; 
368E:  CALL   0774
3692:  MOVLW  C8
3694:  MOVWF  xC6
3696:  CALL   06E2
369A:  CALL   0774
369E:  BCF    17.2
36A0:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(DOWN)//Si oprime hacia arriba 
36A2:  BSF    F96.0
36A4:  BTFSC  F84.0
36A6:  BRA    36D2
....................    { 
....................       delay_ms(20); 
36A8:  MOVLW  14
36AA:  MOVWF  xC6
36AC:  CALL   06E2
....................       if(DOWN){ 
36B0:  BSF    F96.0
36B2:  BTFSC  F84.0
36B4:  BRA    36D0
....................          if(Flanco == 0) 
36B6:  BTFSC  16.3
36B8:  BRA    36D0
....................          { 
....................             estadofl=!estadofl;Flanco = 1;delay_ms(300);Cambio=ON; 
36BA:  BTG    16.1
36BC:  BSF    16.3
36BE:  MOVLW  02
36C0:  MOVWF  xAF
36C2:  MOVLW  96
36C4:  MOVWF  xC6
36C6:  CALL   06E2
36CA:  DECFSZ xAF,F
36CC:  BRA    36C2
36CE:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
36D0:  BRA    36D4
....................    { 
....................       Flanco = 0; 
36D2:  BCF    16.3
....................    } 
....................     
....................    if(RIGHT)//Si oprime hacia abajo 
36D4:  BSF    F96.1
36D6:  BTFSC  F84.1
36D8:  BRA    3704
....................    { 
....................       delay_ms(20); 
36DA:  MOVLW  14
36DC:  MOVWF  xC6
36DE:  CALL   06E2
....................       if(RIGHT){ 
36E2:  BSF    F96.1
36E4:  BTFSC  F84.1
36E6:  BRA    3702
....................          if(Flanco1 == 0) 
36E8:  BTFSC  16.4
36EA:  BRA    3702
....................          { 
....................             estadomv=!estadomv;Flanco1 = 1;delay_ms(300);Cambio=ON; 
36EC:  BTG    16.2
36EE:  BSF    16.4
36F0:  MOVLW  02
36F2:  MOVWF  xAF
36F4:  MOVLW  96
36F6:  MOVWF  xC6
36F8:  CALL   06E2
36FC:  DECFSZ xAF,F
36FE:  BRA    36F4
3700:  BSF    17.5
....................          } 
....................       } 
....................    } 
....................    else 
3702:  BRA    3706
....................    { 
....................       Flanco1 = 0; 
3704:  BCF    16.4
....................    } 
....................     
....................    if(IZQU)//Si oprime hacia izquierda 
3706:  BSF    F96.2
3708:  BTFSC  F84.2
370A:  BRA    3726
....................    { 
....................       delay_ms(20); 
370C:  MOVLW  14
370E:  MOVWF  xC6
3710:  CALL   06E2
....................       if(IZQU){ 
3714:  BSF    F96.2
3716:  BTFSC  F84.2
3718:  BRA    3726
....................          delay_ms(150);  
371A:  MOVLW  96
371C:  MOVWF  xC6
371E:  CALL   06E2
....................          estadouv=!estadouv; 
3722:  BTG    16.0
....................          Cambio=ON; 
3724:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(UP)//Si oprime hacia izquierda 
3726:  BSF    F92.5
3728:  BTFSC  F80.5
372A:  BRA    3768
....................    { 
....................       delay_ms(20); 
372C:  MOVLW  14
372E:  MOVWF  xC6
3730:  CALL   06E2
....................       if(UP){ 
3734:  BSF    F92.5
3736:  BTFSC  F80.5
3738:  BRA    3768
....................          delay_ms(200); 
373A:  MOVLW  C8
373C:  MOVWF  xC6
373E:  CALL   06E2
....................          printf(lcd_putc,"\f"); 
3742:  MOVLW  0C
3744:  MOVWF  xC0
3746:  CALL   082C
....................          delay_ms(300); 
374A:  MOVLW  02
374C:  MOVWF  xAF
374E:  MOVLW  96
3750:  MOVWF  xC6
3752:  CALL   06E2
3756:  DECFSZ xAF,F
3758:  BRA    374E
....................          Menu=1;  
375A:  MOVLW  01
375C:  MOVWF  18
....................          paso=0; 
375E:  CLRF   31
....................          Flecha=2; 
3760:  MOVLW  02
3762:  MOVWF  1C
....................          Flecha2=2; 
3764:  MOVWF  1E
....................          Cambio=ON; 
3766:  BSF    17.5
....................       } 
....................    } 
....................     
....................    if(guardaruv==1) 
3768:  DECFSZ 30,W
376A:  BRA    383A
....................    { 
....................       write_eeprom(50,segundos);write_eeprom(51,minutos); 
376C:  MOVLW  32
376E:  MOVWF  FA9
3770:  MOVFF  21,FA8
3774:  BCF    FA6.6
3776:  BCF    FA6.7
3778:  BSF    FA6.2
377A:  MOVF   FF2,W
377C:  MOVWF  00
377E:  BCF    FF2.7
3780:  MOVLB  F
3782:  MOVLW  55
3784:  MOVWF  FA7
3786:  MOVLW  AA
3788:  MOVWF  FA7
378A:  BSF    FA6.1
378C:  BTFSC  FA6.1
378E:  BRA    378C
3790:  BCF    FA6.2
3792:  MOVF   00,W
3794:  IORWF  FF2,F
3796:  MOVLW  33
3798:  MOVWF  FA9
379A:  MOVFF  22,FA8
379E:  BCF    FA6.6
37A0:  BCF    FA6.7
37A2:  BSF    FA6.2
37A4:  MOVF   FF2,W
37A6:  MOVWF  00
37A8:  BCF    FF2.7
37AA:  MOVLW  55
37AC:  MOVWF  FA7
37AE:  MOVLW  AA
37B0:  MOVWF  FA7
37B2:  BSF    FA6.1
37B4:  BTFSC  FA6.1
37B6:  BRA    37B4
37B8:  BCF    FA6.2
37BA:  MOVF   00,W
37BC:  IORWF  FF2,F
....................       delay_ms(20); 
37BE:  MOVLW  14
37C0:  MOVLB  0
37C2:  MOVWF  xC6
37C4:  CALL   06E2
....................       horasL=make8(horas,0); 
37C8:  MOVFF  40,23
....................       horasH=make8(horas,1); 
37CC:  MOVFF  41,24
....................       write_eeprom(52,horasL); 
37D0:  MOVLW  34
37D2:  MOVWF  FA9
37D4:  MOVFF  23,FA8
37D8:  BCF    FA6.6
37DA:  BCF    FA6.7
37DC:  BSF    FA6.2
37DE:  MOVF   FF2,W
37E0:  MOVWF  00
37E2:  BCF    FF2.7
37E4:  MOVLB  F
37E6:  MOVLW  55
37E8:  MOVWF  FA7
37EA:  MOVLW  AA
37EC:  MOVWF  FA7
37EE:  BSF    FA6.1
37F0:  BTFSC  FA6.1
37F2:  BRA    37F0
37F4:  BCF    FA6.2
37F6:  MOVF   00,W
37F8:  IORWF  FF2,F
....................       delay_ms(20); 
37FA:  MOVLW  14
37FC:  MOVLB  0
37FE:  MOVWF  xC6
3800:  CALL   06E2
....................       write_eeprom(53,horasH); 
3804:  MOVLW  35
3806:  MOVWF  FA9
3808:  MOVFF  24,FA8
380C:  BCF    FA6.6
380E:  BCF    FA6.7
3810:  BSF    FA6.2
3812:  MOVF   FF2,W
3814:  MOVWF  00
3816:  BCF    FF2.7
3818:  MOVLB  F
381A:  MOVLW  55
381C:  MOVWF  FA7
381E:  MOVLW  AA
3820:  MOVWF  FA7
3822:  BSF    FA6.1
3824:  BTFSC  FA6.1
3826:  BRA    3824
3828:  BCF    FA6.2
382A:  MOVF   00,W
382C:  IORWF  FF2,F
....................       delay_ms(20); 
382E:  MOVLW  14
3830:  MOVLB  0
3832:  MOVWF  xC6
3834:  CALL   06E2
....................       guardaruv=0; 
3838:  CLRF   30
....................    } 
....................     
....................    if(segundos>=60) 
383A:  MOVF   21,W
383C:  SUBLW  3B
383E:  BC    3844
....................    { 
....................       segundos=0;minutos++; 
3840:  CLRF   21
3842:  INCF   22,F
....................    } 
....................    if(minutos==60) 
3844:  MOVF   22,W
3846:  SUBLW  3C
3848:  BNZ   3852
....................    { 
....................       minutos=0;horas++; 
384A:  CLRF   22
384C:  INCF   40,F
384E:  BTFSC  FD8.2
3850:  INCF   41,F
....................    } 
....................      
....................    } 
.................... //----------------Fin-Menu100--------------------------------------------------------------   
....................     
....................    if(tiemporeset>=60) 
3852:  MOVF   2F,W
3854:  SUBLW  3B
3856:  BC    386C
....................    { 
....................       lcd_init();delay_ms(200);lcd_init(); 
3858:  CALL   0774
385C:  MOVLW  C8
385E:  MOVWF  xC6
3860:  CALL   06E2
3864:  CALL   0774
....................       tiemporeset=0; 
3868:  CLRF   2F
....................       Cambio=ON; 
386A:  BSF    17.5
....................    }   
....................     
....................    } 
386C:  GOTO   1D30
.................... } 
....................  
3870:  SLEEP 

Configuration Fuses:
   Word  1: CE20   IESO FCMEN HSPLL PLL1 CPUDIV1 USBDIV
   Word  2: 1E1F   BROWNOUT NOWDT BORV20 NOPUT WDT32768 NOVREGEN
   Word  3: 0700   PBADEN CCP2C1 NOMCLR LPT1OSC
   Word  4: 0081   STVREN NODEBUG NOLVP NOXINST NOICPRT
   Word  5: C00F   NOPROTECT NOCPD NOCPB
   Word  6: E00F   NOWRT NOWRTD NOWRTC NOWRTB
   Word  7: 400F   NOEBTR NOEBTRB
